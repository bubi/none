/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3066.0) */

#ifndef BLE_NONE_DISPLAY_H__
#define BLE_NONE_DISPLAY_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief none Display event type. */
typedef enum
{ 
    BLE_NONE_DISPLAY_DISPLAY_CONFIGURATION_EVT_NOTIFICATION_ENABLED,  /**< Display Configuration value notification enabled event. */
    BLE_NONE_DISPLAY_DISPLAY_CONFIGURATION_EVT_NOTIFICATION_DISABLED, /**< Display Configuration value notification disabled event. */
    BLE_NONE_DISPLAY_DISPLAY_CONFIGURATION_EVT_WRITE, /**< Display Configuration write event. */
    BLE_NONE_DISPLAY_METRICS_EVT_NOTIFICATION_ENABLED,  /**< Metrics value notification enabled event. */
    BLE_NONE_DISPLAY_METRICS_EVT_NOTIFICATION_DISABLED, /**< Metrics value notification disabled event. */
    BLE_NONE_DISPLAY_METRICS_EVT_WRITE, /**< Metrics write event. */
    BLE_NONE_DISPLAY_BUTTONS_EVT_NOTIFICATION_ENABLED,  /**< Buttons value notification enabled event. */
    BLE_NONE_DISPLAY_BUTTONS_EVT_NOTIFICATION_DISABLED, /**< Buttons value notification disabled event. */
    BLE_NONE_DISPLAY_BUTTONS_EVT_CCCD_WRITE, /**< Buttons CCCD write event. */
} ble_none_display_evt_type_t;

// Forward declaration of the ble_none_display_t type.
typedef struct ble_none_display_s ble_none_display_t;








/**@brief Display Configuration structure. */
typedef struct
{
    uint16_t configuration;
} ble_none_display_display_configuration_t;
/**@brief Metrics structure. */
typedef struct
{
    uint8_t heart_beat_bpm;
    uint16_t speed_kmh;
    uint16_t cadence_rpm;
    uint32_t total_height;
    uint32_t distance;
} ble_none_display_metrics_t;
/**@brief Buttons structure. */
typedef struct
{
    uint8_t button;
} ble_none_display_buttons_t;

/**@brief none Display Service event. */
typedef struct
{
    ble_none_display_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_none_display_display_configuration_t display_configuration; /**< Holds decoded data in Write event handler. */
        ble_none_display_metrics_t metrics; /**< Holds decoded data in Write event handler. */
    } params;
} ble_none_display_evt_t;

/**@brief none Display Service event handler type. */
typedef void (*ble_none_display_evt_handler_t) (ble_none_display_t * p_none_display, ble_none_display_evt_t * p_evt);

/**@brief none Display Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_none_display_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the none Display Service. */
    ble_none_display_display_configuration_t ble_none_display_display_configuration_initial_value; /**< If not NULL, initial value of the Display Configuration characteristic. */ 
    ble_none_display_metrics_t ble_none_display_metrics_initial_value; /**< If not NULL, initial value of the Metrics characteristic. */ 
    ble_none_display_buttons_t ble_none_display_buttons_initial_value; /**< If not NULL, initial value of the Buttons characteristic. */ 
} ble_none_display_init_t;

/**@brief none Display Service structure. This contains various status information for the service.*/
struct ble_none_display_s
{
    ble_none_display_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the none Display Service. */
    uint16_t service_handle; /**< Handle of none Display Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t display_configuration_handles; /**< Handles related to the Display Configuration characteristic. */
    ble_gatts_char_handles_t metrics_handles; /**< Handles related to the Metrics characteristic. */
    ble_gatts_char_handles_t buttons_handles; /**< Handles related to the Buttons characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the none Display.
 *
 * @param[out]  p_none_display       none Display Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_none_display_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_none_display_init(ble_none_display_t * p_none_display, const ble_none_display_init_t * p_none_display_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_none_display_on_ble_evt(ble_none_display_t * p_none_display, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Display Configuration.
 *
 * @details Sets a new value of the Display Configuration characteristic. The new value will be sent
 *          to the client the next time the client reads the Display Configuration characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_none_display                 none Display Service structure.
 * @param[in]   p_display_configuration  New Display Configuration.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_none_display_display_configuration_set(ble_none_display_t * p_none_display, ble_none_display_display_configuration_t * p_display_configuration);

/**@brief Function for setting the Metrics.
 *
 * @details Sets a new value of the Metrics characteristic. The new value will be sent
 *          to the client the next time the client reads the Metrics characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_none_display                 none Display Service structure.
 * @param[in]   p_metrics  New Metrics.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_none_display_metrics_set(ble_none_display_t * p_none_display, ble_none_display_metrics_t * p_metrics);

/**@brief Function for setting the Buttons.
 *
 * @details Sets a new value of the Buttons characteristic. The new value will be sent
 *          to the client the next time the client reads the Buttons characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_none_display                 none Display Service structure.
 * @param[in]   p_buttons  New Buttons.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_none_display_buttons_set(ble_none_display_t * p_none_display, ble_none_display_buttons_t * p_buttons);

/**@brief Function for sending the Buttons.
 *
 * @details The application calls this function after having performed a buttons.
 *          The buttons data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_none_display                    none Display Service structure.
 * @param[in]   p_buttons               New buttons.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_none_display_buttons_send(ble_none_display_t * p_none_display, ble_none_display_buttons_t * p_buttons);

#endif //_BLE_NONE_DISPLAY_H__
