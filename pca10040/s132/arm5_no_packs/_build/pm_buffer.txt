; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\pm_buffer.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\pm_buffer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\pm_buffer.crf ..\..\..\..\..\..\components\ble\peer_manager\pm_buffer.c]
                          THUMB

                          AREA ||i.pm_buffer_block_acquire||, CODE, READONLY, ALIGN=1

                  pm_buffer_block_acquire PROC
;;;59     
;;;60     uint8_t pm_buffer_block_acquire(pm_buffer_t * p_buffer, uint32_t n_blocks)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;61     {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;62         if (!BUFFER_IS_VALID(p_buffer))
000008  b11c              CBZ      r4,|L1.18|
00000a  6820              LDR      r0,[r4,#0]
00000c  b108              CBZ      r0,|L1.18|
00000e  6860              LDR      r0,[r4,#4]
000010  b910              CBNZ     r0,|L1.24|
                  |L1.18|
;;;63         {
;;;64             return ( BUFFER_INVALID_ID );
000012  20ff              MOVS     r0,#0xff
                  |L1.20|
;;;65         }
;;;66     
;;;67         uint8_t first_locked_mutex = BUFFER_INVALID_ID;
;;;68     
;;;69         for (uint8_t i = 0; i < p_buffer->n_blocks; i++)
;;;70         {
;;;71             if (pm_mutex_lock(p_buffer->p_mutex, i))
;;;72             {
;;;73                 if (first_locked_mutex == BUFFER_INVALID_ID)
;;;74                 {
;;;75                     first_locked_mutex = i;
;;;76                 }
;;;77                 if ((i - first_locked_mutex + 1) == n_blocks)
;;;78                 {
;;;79                     return first_locked_mutex;
;;;80                 }
;;;81             }
;;;82             else if (first_locked_mutex != BUFFER_INVALID_ID)
;;;83             {
;;;84                 for (uint8_t j = first_locked_mutex; j < i; j++)
;;;85                 {
;;;86                     pm_buffer_release(p_buffer, j);
;;;87                 }
;;;88                 first_locked_mutex = BUFFER_INVALID_ID;
;;;89             }
;;;90         }
;;;91     
;;;92         return ( BUFFER_INVALID_ID );
;;;93     }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L1.24|
000018  25ff              MOVS     r5,#0xff              ;67
00001a  2600              MOVS     r6,#0                 ;69
00001c  e01c              B        |L1.88|
                  |L1.30|
00001e  4631              MOV      r1,r6                 ;71
000020  6860              LDR      r0,[r4,#4]            ;71
000022  f7fffffe          BL       pm_mutex_lock
000026  b140              CBZ      r0,|L1.58|
000028  2dff              CMP      r5,#0xff              ;73
00002a  d100              BNE      |L1.46|
00002c  4635              MOV      r5,r6                 ;75
                  |L1.46|
00002e  1b70              SUBS     r0,r6,r5              ;77
000030  1c40              ADDS     r0,r0,#1              ;77
000032  4540              CMP      r0,r8                 ;77
000034  d10e              BNE      |L1.84|
000036  4628              MOV      r0,r5                 ;79
000038  e7ec              B        |L1.20|
                  |L1.58|
00003a  2dff              CMP      r5,#0xff              ;82
00003c  d00a              BEQ      |L1.84|
00003e  462f              MOV      r7,r5                 ;84
000040  e005              B        |L1.78|
                  |L1.66|
000042  4639              MOV      r1,r7                 ;86
000044  4620              MOV      r0,r4                 ;86
000046  f7fffffe          BL       pm_buffer_release
00004a  1c78              ADDS     r0,r7,#1              ;84
00004c  b2c7              UXTB     r7,r0                 ;84
                  |L1.78|
00004e  42b7              CMP      r7,r6                 ;84
000050  dbf7              BLT      |L1.66|
000052  25ff              MOVS     r5,#0xff              ;88
                  |L1.84|
000054  1c70              ADDS     r0,r6,#1              ;69
000056  b2c6              UXTB     r6,r0                 ;69
                  |L1.88|
000058  68a0              LDR      r0,[r4,#8]            ;69
00005a  42b0              CMP      r0,r6                 ;69
00005c  d8df              BHI      |L1.30|
00005e  20ff              MOVS     r0,#0xff              ;92
000060  e7d8              B        |L1.20|
;;;94     
                          ENDP


                          AREA ||i.pm_buffer_init||, CODE, READONLY, ALIGN=1

                  pm_buffer_init PROC
;;;28     
;;;29     ret_code_t pm_buffer_init(pm_buffer_t * p_buffer,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;30                               uint8_t     * p_buffer_memory,
;;;31                               uint32_t      buffer_memory_size,
;;;32                               uint8_t     * p_mutex_memory,
;;;33                               uint32_t      mutex_memory_size,
;;;34                               uint32_t      n_blocks,
;;;35                               uint32_t      block_size)
;;;36     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  e9dda508          LDRD     r10,r5,[sp,#0x20]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;37         if (   (p_buffer           != NULL)
000014  b1cc              CBZ      r4,|L2.74|
;;;38             && (p_buffer_memory    != NULL)
000016  b1c6              CBZ      r6,|L2.74|
;;;39             && (p_mutex_memory     != NULL)
000018  b1bf              CBZ      r7,|L2.74|
;;;40             && (buffer_memory_size >= (n_blocks * block_size))
00001a  fb05f008          MUL      r0,r5,r8
00001e  4548              CMP      r0,r9
000020  d813              BHI      |L2.74|
;;;41             && (mutex_memory_size  >= MUTEX_STORAGE_SIZE(n_blocks))
000022  1de8              ADDS     r0,r5,#7
000024  ebba0fd0          CMP      r10,r0,LSR #3
000028  d30f              BCC      |L2.74|
;;;42             && (n_blocks           != 0)
00002a  b175              CBZ      r5,|L2.74|
;;;43             && (block_size         != 0))
00002c  f1b80f00          CMP      r8,#0
000030  d00b              BEQ      |L2.74|
;;;44         {
;;;45             p_buffer->p_memory   = p_buffer_memory;
000032  6026              STR      r6,[r4,#0]
;;;46             p_buffer->p_mutex    = p_mutex_memory;
000034  6067              STR      r7,[r4,#4]
;;;47             p_buffer->n_blocks   = n_blocks;
000036  60a5              STR      r5,[r4,#8]
;;;48             p_buffer->block_size = block_size;
000038  f8c4800c          STR      r8,[r4,#0xc]
;;;49             pm_mutex_init(p_buffer->p_mutex, n_blocks);
00003c  b2a9              UXTH     r1,r5
00003e  6860              LDR      r0,[r4,#4]
000040  f7fffffe          BL       pm_mutex_init
;;;50     
;;;51             return NRF_SUCCESS;
000044  2000              MOVS     r0,#0
                  |L2.70|
;;;52         }
;;;53         else
;;;54         {
;;;55             return NRF_ERROR_INVALID_PARAM;
;;;56         }
;;;57     }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L2.74|
00004a  2007              MOVS     r0,#7                 ;55
00004c  e7fb              B        |L2.70|
;;;58     
                          ENDP


                          AREA ||i.pm_buffer_ptr_get||, CODE, READONLY, ALIGN=1

                  pm_buffer_ptr_get PROC
;;;95     
;;;96     uint8_t * pm_buffer_ptr_get(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;98         if (!BUFFER_IS_VALID(p_buffer))
000006  b11c              CBZ      r4,|L3.16|
000008  6820              LDR      r0,[r4,#0]
00000a  b108              CBZ      r0,|L3.16|
00000c  6860              LDR      r0,[r4,#4]
00000e  b908              CBNZ     r0,|L3.20|
                  |L3.16|
;;;99         {
;;;100            return ( NULL );
000010  2000              MOVS     r0,#0
                  |L3.18|
;;;101        }
;;;102    
;;;103        if ( (id != BUFFER_INVALID_ID)
;;;104        &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id) )
;;;105        {
;;;106            return ( &p_buffer->p_memory[id * p_buffer->block_size] );
;;;107        }
;;;108        else
;;;109        {
;;;110            return ( NULL );
;;;111        }
;;;112    }
000012  bd70              POP      {r4-r6,pc}
                  |L3.20|
000014  2dff              CMP      r5,#0xff              ;103
000016  d009              BEQ      |L3.44|
000018  4629              MOV      r1,r5                 ;104
00001a  6860              LDR      r0,[r4,#4]            ;104
00001c  f7fffffe          BL       pm_mutex_lock_status_get
000020  b120              CBZ      r0,|L3.44|
000022  68e1              LDR      r1,[r4,#0xc]          ;106
000024  6820              LDR      r0,[r4,#0]            ;106
000026  fb050001          MLA      r0,r5,r1,r0           ;106
00002a  e7f2              B        |L3.18|
                  |L3.44|
00002c  2000              MOVS     r0,#0                 ;110
00002e  e7f0              B        |L3.18|
;;;113    
                          ENDP


                          AREA ||i.pm_buffer_release||, CODE, READONLY, ALIGN=1

                  pm_buffer_release PROC
;;;114    
;;;115    void pm_buffer_release(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;117        if (    BUFFER_IS_VALID(p_buffer)
000006  b174              CBZ      r4,|L4.38|
000008  6820              LDR      r0,[r4,#0]
00000a  b160              CBZ      r0,|L4.38|
00000c  6860              LDR      r0,[r4,#4]
00000e  b150              CBZ      r0,|L4.38|
;;;118           &&  (id != BUFFER_INVALID_ID)
000010  2dff              CMP      r5,#0xff
000012  d008              BEQ      |L4.38|
;;;119           &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id))
000014  4629              MOV      r1,r5
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       pm_mutex_lock_status_get
00001c  b118              CBZ      r0,|L4.38|
;;;120        {
;;;121            pm_mutex_unlock(p_buffer->p_mutex, id);
00001e  4629              MOV      r1,r5
000020  6860              LDR      r0,[r4,#4]
000022  f7fffffe          BL       pm_mutex_unlock
                  |L4.38|
;;;122        }
;;;123    }
000026  bd70              POP      {r4-r6,pc}
;;;124    #endif //PEER_MANAGER_ENABLED
                          ENDP

