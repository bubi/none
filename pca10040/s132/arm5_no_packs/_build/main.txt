; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\main.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\main.crf ..\..\..\main.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;121    
;;;122    void SysTick_Handler(void){
000000  4802              LDR      r0,|L1.12|
;;;123    		m_msTick++;
000002  6800              LDR      r0,[r0,#0]  ; m_msTick
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L1.12|
000008  6008              STR      r0,[r1,#0]  ; m_msTick
;;;124    }
00000a  4770              BX       lr
;;;125    
                          ENDP

                  |L1.12|
                          DCD      m_msTick

                          AREA ||i.advertising_init||, CODE, READONLY, ALIGN=2

                  advertising_init PROC
;;;704     */
;;;705    static void advertising_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;706    {
000002  b097              SUB      sp,sp,#0x5c
;;;707        uint32_t      err_code;
;;;708        ble_advdata_t advdata;
;;;709    
;;;710        // Build advertising data struct to pass into @ref ble_advertising_init.
;;;711        memset(&advdata, 0, sizeof(advdata));
000004  2138              MOVS     r1,#0x38
000006  a809              ADD      r0,sp,#0x24
000008  f7fffffe          BL       __aeabi_memclr4
;;;712    
;;;713        advdata.name_type               = BLE_ADVDATA_FULL_NAME;
00000c  2002              MOVS     r0,#2
00000e  f88d0024          STRB     r0,[sp,#0x24]
;;;714        advdata.include_appearance      = true;
000012  2001              MOVS     r0,#1
000014  f88d0026          STRB     r0,[sp,#0x26]
;;;715        advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
000018  2006              MOVS     r0,#6
00001a  f88d0027          STRB     r0,[sp,#0x27]
;;;716        advdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
00001e  2001              MOVS     r0,#1
000020  f8ad0034          STRH     r0,[sp,#0x34]
;;;717        advdata.uuids_complete.p_uuids  = m_adv_uuids;
000024  4910              LDR      r1,|L2.104|
000026  910e              STR      r1,[sp,#0x38]
;;;718    
;;;719        ble_adv_modes_config_t options = {0};
000028  2120              MOVS     r1,#0x20
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       __aeabi_memclr4
;;;720        options.ble_adv_fast_enabled  = true;
000030  2001              MOVS     r0,#1
000032  f88d0007          STRB     r0,[sp,#7]
;;;721        options.ble_adv_fast_interval = APP_ADV_INTERVAL;
000036  f44f7096          MOV      r0,#0x12c
00003a  9005              STR      r0,[sp,#0x14]
;;;722        options.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;
00003c  20b4              MOVS     r0,#0xb4
00003e  9006              STR      r0,[sp,#0x18]
;;;723    
;;;724        err_code = ble_advertising_init(&advdata, NULL, &options, on_adv_evt, NULL);
000040  2000              MOVS     r0,#0
000042  4b0a              LDR      r3,|L2.108|
000044  aa01              ADD      r2,sp,#4
000046  4601              MOV      r1,r0
000048  9000              STR      r0,[sp,#0]
00004a  a809              ADD      r0,sp,#0x24
00004c  f7fffffe          BL       ble_advertising_init
000050  4604              MOV      r4,r0
;;;725        APP_ERROR_CHECK(err_code);
000052  bf00              NOP      
000054  4625              MOV      r5,r4
000056  b125              CBZ      r5,|L2.98|
000058  bf00              NOP      
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       app_error_handler_bare
000060  bf00              NOP      
                  |L2.98|
000062  bf00              NOP      
;;;726    }
000064  b017              ADD      sp,sp,#0x5c
000066  bd30              POP      {r4,r5,pc}
;;;727    
                          ENDP

                  |L2.104|
                          DCD      m_adv_uuids
                  |L2.108|
                          DCD      on_adv_evt

                          AREA ||i.application_timers_start||, CODE, READONLY, ALIGN=2

                  application_timers_start PROC
;;;306    */
;;;307    static void application_timers_start(void)
000000  b510              PUSH     {r4,lr}
;;;308    {
;;;309        /* YOUR_JOB: Start your timers. below is an example of how to start a timer.
;;;310        uint32_t err_code;
;;;311        err_code = app_timer_start(m_app_timer_id, TIMER_INTERVAL, NULL);
;;;312        APP_ERROR_CHECK(err_code); */
;;;313    		app_timer_start(m_ui_update_id, APP_TIMER_TICKS(100,0), NULL);
000002  2200              MOVS     r2,#0
000004  f64041cd          MOV      r1,#0xccd
000008  4802              LDR      r0,|L3.20|
00000a  6800              LDR      r0,[r0,#0]  ; m_ui_update_id
00000c  f7fffffe          BL       app_timer_start
;;;314    }
000010  bd10              POP      {r4,pc}
;;;315    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      m_ui_update_id

                          AREA ||i.assert_nrf_callback||, CODE, READONLY, ALIGN=2

                  assert_nrf_callback PROC
;;;152     */
;;;153    void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;155        app_error_handler(DEAD_BEEF, line_num, p_file_name);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  4802              LDR      r0,|L4.20|
00000c  f7fffffe          BL       app_error_handler
;;;156    }
000010  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xdeadbeef

                          AREA ||i.ble_evt_dispatch||, CODE, READONLY, ALIGN=2

                  ble_evt_dispatch PROC
;;;421     */
;;;422    static void ble_evt_dispatch(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;423    {
000002  4604              MOV      r4,r0
;;;424        ble_conn_state_on_ble_evt(p_ble_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       ble_conn_state_on_ble_evt
;;;425        pm_on_ble_evt(p_ble_evt);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       pm_on_ble_evt
;;;426        ble_conn_params_on_ble_evt(p_ble_evt);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       ble_conn_params_on_ble_evt
;;;427        bsp_btn_ble_on_ble_evt(p_ble_evt);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       bsp_btn_ble_on_ble_evt
;;;428        ble_advertising_on_ble_evt(p_ble_evt);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       ble_advertising_on_ble_evt
;;;429        on_ble_evt(p_ble_evt);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       on_ble_evt
;;;430        bluetooth_on_ble_evt(p_ble_evt);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       bluetooth_on_ble_evt
;;;431        nrf_ble_qwr_on_ble_evt(&m_qwr, p_ble_evt);
00002e  4621              MOV      r1,r4
000030  4801              LDR      r0,|L5.56|
000032  f7fffffe          BL       nrf_ble_qwr_on_ble_evt
;;;432    }
000036  bd10              POP      {r4,pc}
;;;433    
                          ENDP

                  |L5.56|
                          DCD      m_qwr

                          AREA ||i.ble_stack_init||, CODE, READONLY, ALIGN=2

                  ble_stack_init PROC
;;;458     */
;;;459    static void ble_stack_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;460    {
000002  b088              SUB      sp,sp,#0x20
;;;461        uint32_t err_code;
;;;462    
;;;463        nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC;
000004  4827              LDR      r0,|L6.164|
000006  6800              LDR      r0,[r0,#0]  ; <Data3>
000008  9007              STR      r0,[sp,#0x1c]
;;;464    
;;;465        // Initialize the SoftDevice handler module.
;;;466        SOFTDEVICE_HANDLER_INIT(&clock_lf_cfg, NULL);
00000a  bf00              NOP      
00000c  2300              MOVS     r3,#0
00000e  2250              MOVS     r2,#0x50
000010  4925              LDR      r1,|L6.168|
000012  a807              ADD      r0,sp,#0x1c
000014  f7fffffe          BL       softdevice_handler_init
000018  4605              MOV      r5,r0
00001a  bf00              NOP      
00001c  462e              MOV      r6,r5
00001e  b126              CBZ      r6,|L6.42|
000020  bf00              NOP      
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       app_error_handler_bare
000028  bf00              NOP      
                  |L6.42|
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;467    
;;;468        ble_enable_params_t ble_enable_params;
;;;469        err_code = softdevice_enable_get_default_config(CENTRAL_LINK_COUNT,
00002e  466a              MOV      r2,sp
000030  2101              MOVS     r1,#1
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       softdevice_enable_get_default_config
000038  4604              MOV      r4,r0
;;;470                                                        PERIPHERAL_LINK_COUNT,
;;;471                                                        &ble_enable_params);
;;;472        APP_ERROR_CHECK(err_code);
00003a  bf00              NOP      
00003c  4625              MOV      r5,r4
00003e  b125              CBZ      r5,|L6.74|
000040  bf00              NOP      
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       app_error_handler_bare
000048  bf00              NOP      
                  |L6.74|
00004a  bf00              NOP      
;;;473    
;;;474        //Check the ram settings against the used number of links
;;;475        CHECK_RAM_START_ADDR(CENTRAL_LINK_COUNT,PERIPHERAL_LINK_COUNT);
;;;476    
;;;477        // Enable BLE stack.
;;;478    #if (NRF_SD_BLE_API_VERSION == 3)
;;;479        ble_enable_params.gatt_enable_params.att_mtu = NRF_BLE_MAX_MTU_SIZE;
00004c  2017              MOVS     r0,#0x17
00004e  f8ad0010          STRH     r0,[sp,#0x10]
;;;480    #endif
;;;481        err_code = softdevice_enable(&ble_enable_params);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       softdevice_enable
000058  4604              MOV      r4,r0
;;;482        APP_ERROR_CHECK(err_code);
00005a  bf00              NOP      
00005c  4625              MOV      r5,r4
00005e  b125              CBZ      r5,|L6.106|
000060  bf00              NOP      
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       app_error_handler_bare
000068  bf00              NOP      
                  |L6.106|
00006a  bf00              NOP      
;;;483    
;;;484        // Register with the SoftDevice handler module for BLE events.
;;;485        err_code = softdevice_ble_evt_handler_set(ble_evt_dispatch);
00006c  480f              LDR      r0,|L6.172|
00006e  f7fffffe          BL       softdevice_ble_evt_handler_set
000072  4604              MOV      r4,r0
;;;486        APP_ERROR_CHECK(err_code);
000074  bf00              NOP      
000076  4625              MOV      r5,r4
000078  b125              CBZ      r5,|L6.132|
00007a  bf00              NOP      
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       app_error_handler_bare
000082  bf00              NOP      
                  |L6.132|
000084  bf00              NOP      
;;;487    
;;;488        // Register with the SoftDevice handler module for system events.
;;;489        err_code = softdevice_sys_evt_handler_set(sys_evt_dispatch);
000086  480a              LDR      r0,|L6.176|
000088  f7fffffe          BL       softdevice_sys_evt_handler_set
00008c  4604              MOV      r4,r0
;;;490        APP_ERROR_CHECK(err_code);
00008e  bf00              NOP      
000090  4625              MOV      r5,r4
000092  b125              CBZ      r5,|L6.158|
000094  bf00              NOP      
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       app_error_handler_bare
00009c  bf00              NOP      
                  |L6.158|
00009e  bf00              NOP      
;;;491    }
0000a0  b008              ADD      sp,sp,#0x20
0000a2  bd70              POP      {r4-r6,pc}
;;;492    
                          ENDP

                  |L6.164|
                          DCD      ||.constdata||+0x904
                  |L6.168|
                          DCD      BLE_EVT_BUFFER
                  |L6.172|
                          DCD      ble_evt_dispatch
                  |L6.176|
                          DCD      sys_evt_dispatch

                          AREA ||i.bsp_event_handler||, CODE, READONLY, ALIGN=2

                  bsp_event_handler PROC
;;;497     */
;;;498    void bsp_event_handler(bsp_event_t event)
000000  b570              PUSH     {r4-r6,lr}
;;;499    {
000002  4605              MOV      r5,r0
;;;500        uint32_t err_code;
;;;501        switch (event)
000004  2d04              CMP      r5,#4
000006  d006              BEQ      |L7.22|
000008  2d07              CMP      r5,#7
00000a  d015              BEQ      |L7.56|
00000c  2d0a              CMP      r5,#0xa
00000e  d128              BNE      |L7.98|
;;;502        {
;;;503            case BSP_EVENT_SLEEP:
;;;504                sleep_mode_enter();
000010  f7fffffe          BL       sleep_mode_enter
;;;505                break;
000014  e026              B        |L7.100|
                  |L7.22|
;;;506    
;;;507            case BSP_EVENT_DISCONNECT:
;;;508                err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
000016  2113              MOVS     r1,#0x13
000018  4813              LDR      r0,|L7.104|
00001a  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00001c  df76              SVC      #0x76
00001e  4604              MOV      r4,r0
;;;509                if (err_code != NRF_ERROR_INVALID_STATE)
000020  2c08              CMP      r4,#8
000022  d008              BEQ      |L7.54|
;;;510                {
;;;511                    APP_ERROR_CHECK(err_code);
000024  bf00              NOP      
000026  4626              MOV      r6,r4
000028  b126              CBZ      r6,|L7.52|
00002a  bf00              NOP      
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       app_error_handler_bare
000032  bf00              NOP      
                  |L7.52|
000034  bf00              NOP      
                  |L7.54|
;;;512                }
;;;513                break;
000036  e015              B        |L7.100|
                  |L7.56|
;;;514    
;;;515            case BSP_EVENT_WHITELIST_OFF:
;;;516                if (m_conn_handle == BLE_CONN_HANDLE_INVALID)
000038  480b              LDR      r0,|L7.104|
00003a  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00003c  f64f71ff          MOV      r1,#0xffff
000040  4288              CMP      r0,r1
000042  d10d              BNE      |L7.96|
;;;517                {
;;;518                    err_code = ble_advertising_restart_without_whitelist();
000044  f7fffffe          BL       ble_advertising_restart_without_whitelist
000048  4604              MOV      r4,r0
;;;519                    if (err_code != NRF_ERROR_INVALID_STATE)
00004a  2c08              CMP      r4,#8
00004c  d008              BEQ      |L7.96|
;;;520                    {
;;;521                        APP_ERROR_CHECK(err_code);
00004e  bf00              NOP      
000050  4626              MOV      r6,r4
000052  b126              CBZ      r6,|L7.94|
000054  bf00              NOP      
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       app_error_handler_bare
00005c  bf00              NOP      
                  |L7.94|
00005e  bf00              NOP      
                  |L7.96|
;;;522                    }
;;;523                }
;;;524                break;
000060  e000              B        |L7.100|
                  |L7.98|
;;;525    
;;;526            default:
;;;527                break;
000062  bf00              NOP      
                  |L7.100|
000064  bf00              NOP                            ;505
;;;528        }
;;;529    }
000066  bd70              POP      {r4-r6,pc}
;;;530    
                          ENDP

                  |L7.104|
                          DCD      m_conn_handle

                          AREA ||i.buttons_leds_init||, CODE, READONLY, ALIGN=2

                  buttons_leds_init PROC
;;;732     */
;;;733    static void buttons_leds_init(bool * p_erase_bonds)
000000  b5f8              PUSH     {r3-r7,lr}
;;;734    {
000002  4605              MOV      r5,r0
;;;735        bsp_event_t startup_event;
;;;736    
;;;737        uint32_t err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS,
000004  4a13              LDR      r2,|L8.84|
000006  f64041cd          MOV      r1,#0xccd
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       bsp_init
000010  4604              MOV      r4,r0
;;;738                                     APP_TIMER_TICKS(100, APP_TIMER_PRESCALER),
;;;739                                     bsp_event_handler);
;;;740        APP_ERROR_CHECK(err_code);
000012  bf00              NOP      
000014  4626              MOV      r6,r4
000016  b126              CBZ      r6,|L8.34|
000018  bf00              NOP      
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       app_error_handler_bare
000020  bf00              NOP      
                  |L8.34|
000022  bf00              NOP      
;;;741    
;;;742        err_code = bsp_btn_ble_init(NULL, &startup_event);
000024  4669              MOV      r1,sp
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       bsp_btn_ble_init
00002c  4604              MOV      r4,r0
;;;743        APP_ERROR_CHECK(err_code);
00002e  bf00              NOP      
000030  4626              MOV      r6,r4
000032  b126              CBZ      r6,|L8.62|
000034  bf00              NOP      
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       app_error_handler_bare
00003c  bf00              NOP      
                  |L8.62|
00003e  bf00              NOP      
;;;744    
;;;745        *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);
000040  f89d0000          LDRB     r0,[sp,#0]
000044  2802              CMP      r0,#2
000046  d101              BNE      |L8.76|
000048  2001              MOVS     r0,#1
00004a  e000              B        |L8.78|
                  |L8.76|
00004c  2000              MOVS     r0,#0
                  |L8.78|
00004e  7028              STRB     r0,[r5,#0]
;;;746    }
000050  bdf8              POP      {r3-r7,pc}
;;;747    
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      bsp_event_handler

                          AREA ||i.conn_params_error_handler||, CODE, READONLY, ALIGN=1

                  conn_params_error_handler PROC
;;;275     */
;;;276    static void conn_params_error_handler(uint32_t nrf_error)
000000  b510              PUSH     {r4,lr}
;;;277    {
000002  4604              MOV      r4,r0
;;;278        APP_ERROR_HANDLER(nrf_error);
000004  bf00              NOP      
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       app_error_handler_bare
00000c  bf00              NOP      
;;;279    }
00000e  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||i.conn_params_init||, CODE, READONLY, ALIGN=2

                  conn_params_init PROC
;;;283     */
;;;284    static void conn_params_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;285    {
000002  b087              SUB      sp,sp,#0x1c
;;;286        uint32_t               err_code;
;;;287        ble_conn_params_init_t cp_init;
;;;288    
;;;289        memset(&cp_init, 0, sizeof(cp_init));
000004  211c              MOVS     r1,#0x1c
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;290    
;;;291        cp_init.p_conn_params                  = NULL;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;292        cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
000010  f44f3020          MOV      r0,#0x28000
000014  9001              STR      r0,[sp,#4]
;;;293        cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
000016  f44f2070          MOV      r0,#0xf0000
00001a  9002              STR      r0,[sp,#8]
;;;294        cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
00001c  2003              MOVS     r0,#3
00001e  f88d000c          STRB     r0,[sp,#0xc]
;;;295        cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
000022  2000              MOVS     r0,#0
000024  f8ad000e          STRH     r0,[sp,#0xe]
;;;296        cp_init.disconnect_on_fail             = false;
000028  f88d0010          STRB     r0,[sp,#0x10]
;;;297        cp_init.evt_handler                    = on_conn_params_evt;
00002c  4809              LDR      r0,|L10.84|
00002e  9005              STR      r0,[sp,#0x14]
;;;298        cp_init.error_handler                  = conn_params_error_handler;
000030  4809              LDR      r0,|L10.88|
000032  9006              STR      r0,[sp,#0x18]
;;;299    
;;;300        err_code = ble_conn_params_init(&cp_init);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       ble_conn_params_init
00003a  4604              MOV      r4,r0
;;;301        APP_ERROR_CHECK(err_code);
00003c  bf00              NOP      
00003e  4625              MOV      r5,r4
000040  b125              CBZ      r5,|L10.76|
000042  bf00              NOP      
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       app_error_handler_bare
00004a  bf00              NOP      
                  |L10.76|
00004c  bf00              NOP      
;;;302    }
00004e  b007              ADD      sp,sp,#0x1c
000050  bd30              POP      {r4,r5,pc}
;;;303    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      on_conn_params_evt
                  |L10.88|
                          DCD      conn_params_error_handler

                          AREA ||i.fds_evt_handler||, CODE, READONLY, ALIGN=1

                  fds_evt_handler PROC
;;;163     */
;;;164    static void fds_evt_handler(fds_evt_t const * const p_evt)
000000  4770              BX       lr
;;;165    {
;;;166        if (p_evt->id == FDS_EVT_GC)
;;;167        {
;;;168            NRF_LOG_INFO("GC completed\n");
;;;169        }
;;;170    }
;;;171    
                          ENDP


                          AREA ||i.gap_params_init||, CODE, READONLY, ALIGN=2

                  gap_params_init PROC
;;;200     */
;;;201    static void gap_params_init(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;202    {
;;;203        uint32_t                err_code;
;;;204        ble_gap_conn_params_t   gap_conn_params;
;;;205        ble_gap_conn_sec_mode_t sec_mode;
;;;206    
;;;207        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
000002  bf00              NOP      
000004  f89d0000          LDRB     r0,[sp,#0]
000008  f020000f          BIC      r0,r0,#0xf
00000c  1c40              ADDS     r0,r0,#1
00000e  9000              STR      r0,[sp,#0]
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f02000f0          BIC      r0,r0,#0xf0
000018  3010              ADDS     r0,r0,#0x10
00001a  9000              STR      r0,[sp,#0]
00001c  bf00              NOP      
;;;208    
;;;209        err_code = sd_ble_gap_device_name_set(&sec_mode,
00001e  220a              MOVS     r2,#0xa
000020  a114              ADR      r1,|L12.116|
000022  4668              MOV      r0,sp
000024  df7c              SVC      #0x7c
000026  4604              MOV      r4,r0
;;;210                                              (const uint8_t *)DEVICE_NAME,
;;;211                                              strlen(DEVICE_NAME));
;;;212        APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4625              MOV      r5,r4
00002c  b125              CBZ      r5,|L12.56|
00002e  bf00              NOP      
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       app_error_handler_bare
000036  bf00              NOP      
                  |L12.56|
000038  bf00              NOP      
;;;213    
;;;214        /* YOUR_JOB: Use an appearance value matching the application's use case.
;;;215        err_code = sd_ble_gap_appearance_set(BLE_APPEARANCE_);
;;;216        APP_ERROR_CHECK(err_code); */
;;;217    
;;;218        memset(&gap_conn_params, 0, sizeof(gap_conn_params));
00003a  2000              MOVS     r0,#0
00003c  9001              STR      r0,[sp,#4]
00003e  9002              STR      r0,[sp,#8]
;;;219    
;;;220        gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
000040  2050              MOVS     r0,#0x50
000042  f8ad0004          STRH     r0,[sp,#4]
;;;221        gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
000046  20a0              MOVS     r0,#0xa0
000048  f8ad0006          STRH     r0,[sp,#6]
;;;222        gap_conn_params.slave_latency     = SLAVE_LATENCY;
00004c  2000              MOVS     r0,#0
00004e  f8ad0008          STRH     r0,[sp,#8]
;;;223        gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
000052  f44f70c8          MOV      r0,#0x190
000056  f8ad000a          STRH     r0,[sp,#0xa]
;;;224    
;;;225        err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
00005a  a801              ADD      r0,sp,#4
00005c  df7a              SVC      #0x7a
00005e  4604              MOV      r4,r0
;;;226        APP_ERROR_CHECK(err_code);
000060  bf00              NOP      
000062  4625              MOV      r5,r4
000064  b125              CBZ      r5,|L12.112|
000066  bf00              NOP      
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       app_error_handler_bare
00006e  bf00              NOP      
                  |L12.112|
000070  bf00              NOP      
;;;227    }
000072  bd3e              POP      {r1-r5,pc}
;;;228    
                          ENDP

                  |L12.116|
000074  6e6f6e65          DCB      "noneNordic",0
000078  4e6f7264
00007c  696300  
00007f  00                DCB      0

                          AREA ||i.gfxMillisecondsToTicks||, CODE, READONLY, ALIGN=2

                  gfxMillisecondsToTicks PROC
;;;130    
;;;131    systemticks_t gfxMillisecondsToTicks(delaytime_t ms)
000000  4601              MOV      r1,r0
;;;132    {
;;;133    	return m_msTick;
000002  4801              LDR      r0,|L13.8|
000004  6800              LDR      r0,[r0,#0]  ; m_msTick
;;;134    }
000006  4770              BX       lr
;;;135    
                          ENDP

                  |L13.8|
                          DCD      m_msTick

                          AREA ||i.gfxSystemTicks||, CODE, READONLY, ALIGN=2

                  gfxSystemTicks PROC
;;;125    
;;;126    systemticks_t gfxSystemTicks(void)
000000  4801              LDR      r0,|L14.8|
;;;127    {
;;;128    	return m_msTick;
000002  6800              LDR      r0,[r0,#0]  ; m_msTick
;;;129    }
000004  4770              BX       lr
;;;130    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      m_msTick

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;759     */
;;;760    int main(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;761    {
;;;762        uint32_t err_code;
;;;763        bool erase_bonds;
;;;764    		
;;;765    		SysTick_Config(SystemCoreClock/1000); // once every 1ms
000002  483a              LDR      r0,|L15.236|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  f44f727a          MOV      r2,#0x3e8
00000a  fbb0f1f2          UDIV     r1,r0,r2
00000e  1e48              SUBS     r0,r1,#1
000010  f1b07f80          CMP      r0,#0x1000000
000014  d300              BCC      |L15.24|
000016  e01b              B        |L15.80|
                  |L15.24|
000018  1e48              SUBS     r0,r1,#1
00001a  f04f22e0          MOV      r2,#0xe000e000
00001e  6150              STR      r0,[r2,#0x14]
000020  1750              ASRS     r0,r2,#29
000022  2207              MOVS     r2,#7
000024  2800              CMP      r0,#0
000026  da07              BGE      |L15.56|
000028  0753              LSLS     r3,r2,#29
00002a  0e1f              LSRS     r7,r3,#24
00002c  4b30              LDR      r3,|L15.240|
00002e  f000050f          AND      r5,r0,#0xf
000032  1f2d              SUBS     r5,r5,#4
000034  555f              STRB     r7,[r3,r5]
000036  e003              B        |L15.64|
                  |L15.56|
000038  0753              LSLS     r3,r2,#29
00003a  0e1d              LSRS     r5,r3,#24
00003c  4b2d              LDR      r3,|L15.244|
00003e  541d              STRB     r5,[r3,r0]
                  |L15.64|
000040  bf00              NOP      
000042  2000              MOVS     r0,#0
000044  f04f22e0          MOV      r2,#0xe000e000
000048  6190              STR      r0,[r2,#0x18]
00004a  2007              MOVS     r0,#7
00004c  6110              STR      r0,[r2,#0x10]
00004e  bf00              NOP      
                  |L15.80|
;;;766    	
;;;767        err_code = NRF_LOG_INIT(NULL);
000050  2400              MOVS     r4,#0
;;;768        APP_ERROR_CHECK(err_code);
000052  bf00              NOP      
000054  4625              MOV      r5,r4
000056  b125              CBZ      r5,|L15.98|
000058  bf00              NOP      
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       app_error_handler_bare
000060  bf00              NOP      
                  |L15.98|
000062  bf00              NOP      
;;;769    
;;;770        // Initialize.
;;;771        timers_init();
000064  f7fffffe          BL       timers_init
;;;772        buttons_leds_init(&erase_bonds);
000068  a802              ADD      r0,sp,#8
00006a  f7fffffe          BL       buttons_leds_init
;;;773        ble_stack_init();
00006e  f7fffffe          BL       ble_stack_init
;;;774        peer_manager_init(erase_bonds);
000072  f89d0008          LDRB     r0,[sp,#8]
000076  f7fffffe          BL       peer_manager_init
;;;775        if (erase_bonds == true)
;;;776        {
;;;777            NRF_LOG_INFO("Bonds erased!\r\n");
;;;778        }
;;;779        gap_params_init();
00007a  f7fffffe          BL       gap_params_init
;;;780        advertising_init();
00007e  f7fffffe          BL       advertising_init
;;;781        services_init();
000082  f7fffffe          BL       services_init
;;;782        conn_params_init();
000086  f7fffffe          BL       conn_params_init
;;;783    		
;;;784    		
;;;785    		ble_bas_t * m_bas = return_ble_bas_t();
00008a  f7fffffe          BL       return_ble_bas_t
00008e  4606              MOV      r6,r0
;;;786    
;;;787    
;;;788    		m_batt.level = 0x01;
000090  2001              MOVS     r0,#1
000092  4919              LDR      r1,|L15.248|
000094  7008              STRB     r0,[r1,#0]
;;;789    		ble_bas_battery_level_set (m_bas, &m_batt);
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       ble_bas_battery_level_set
;;;790    		
;;;791        // Start execution.
;;;792        application_timers_start();
00009c  f7fffffe          BL       application_timers_start
;;;793        NRF_LOG_INFO("Bluetooth Dev Studio Start Advertising \r\n");
;;;794        err_code = ble_advertising_start(BLE_ADV_MODE_FAST);
0000a0  2003              MOVS     r0,#3
0000a2  f7fffffe          BL       ble_advertising_start
0000a6  4604              MOV      r4,r0
;;;795        APP_ERROR_CHECK(err_code);
0000a8  bf00              NOP      
0000aa  4625              MOV      r5,r4
0000ac  b125              CBZ      r5,|L15.184|
0000ae  bf00              NOP      
0000b0  4628              MOV      r0,r5
0000b2  f7fffffe          BL       app_error_handler_bare
0000b6  bf00              NOP      
                  |L15.184|
0000b8  bf00              NOP      
;;;796    		
;;;797    		
;;;798    		gfxInit();
0000ba  f7fffffe          BL       gfxInit
;;;799    		gdispGFillArea (GDISP, 0, 0, 1, 0, 0x07);
0000be  2007              MOVS     r0,#7
0000c0  2100              MOVS     r1,#0
0000c2  2301              MOVS     r3,#1
0000c4  460a              MOV      r2,r1
0000c6  e9cd1000          STRD     r1,r0,[sp,#0]
0000ca  480c              LDR      r0,|L15.252|
0000cc  6800              LDR      r0,[r0,#0]  ; GDISP
0000ce  f7fffffe          BL       gdispGFillArea
;;;800    		//gdispGDrawPixel(GDISP,0,0,0x07);
;;;801    		// gdispGDrawPixel(GDISP,1,0,0x07);
;;;802    		//memset(fb,0x00,LS013_BYTES_LINE*LS013_YRES);
;;;803    		//rgb
;;;804    		//ls013_init();
;;;805    		//ls013_clearframe();
;;;806    		
;;;807    		//printImage(fb,0,0,(uint8_t *) superman_h,sizeof(superman_h));	
;;;808    		
;;;809    		//fillWindow(fb,0,0,128,128,0x07);
;;;810    		//ls013_drawPixel(fb, 126, 0, 0x07);
;;;811    		//printText(fb,20,20,"HALLO WELT 123",14,0x00);	
;;;812    
;;;813    		//ls013_showframe(fb);
;;;814    		
;;;815    		APP_ERROR_CHECK(err_code);
0000d2  bf00              NOP      
0000d4  4625              MOV      r5,r4
0000d6  b125              CBZ      r5,|L15.226|
0000d8  bf00              NOP      
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       app_error_handler_bare
0000e0  bf00              NOP      
                  |L15.226|
0000e2  bf00              NOP      
;;;816        // Enter main loop.
;;;817        for (;;)
0000e4  bf00              NOP      
                  |L15.230|
;;;818        {		
;;;819            if (NRF_LOG_PROCESS() == false)
;;;820            {
;;;821                power_manage();
0000e6  f7fffffe          BL       power_manage
0000ea  e7fc              B        |L15.230|
;;;822            }
;;;823        }
;;;824    }
;;;825    
                          ENDP

                  |L15.236|
                          DCD      SystemCoreClock
                  |L15.240|
                          DCD      0xe000ed18
                  |L15.244|
                          DCD      0xe000e400
                  |L15.248|
                          DCD      m_batt
                  |L15.252|
                          DCD      GDISP

                          AREA ||i.on_adv_evt||, CODE, READONLY, ALIGN=1

                  on_adv_evt PROC
;;;341     */
;;;342    static void on_adv_evt(ble_adv_evt_t ble_adv_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;343    {
000002  4605              MOV      r5,r0
;;;344        uint32_t err_code;
;;;345    
;;;346        switch (ble_adv_evt)
000004  b17d              CBZ      r5,|L16.38|
000006  2d03              CMP      r5,#3
000008  d110              BNE      |L16.44|
;;;347        {
;;;348            case BLE_ADV_EVT_FAST:
;;;349                NRF_LOG_INFO("Fast Advertising\r\n");
;;;350                err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       bsp_indication_set
000010  4604              MOV      r4,r0
;;;351                APP_ERROR_CHECK(err_code);
000012  bf00              NOP      
000014  4626              MOV      r6,r4
000016  b126              CBZ      r6,|L16.34|
000018  bf00              NOP      
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       app_error_handler_bare
000020  bf00              NOP      
                  |L16.34|
000022  bf00              NOP      
;;;352                break;
000024  e003              B        |L16.46|
                  |L16.38|
;;;353            case BLE_ADV_EVT_IDLE:
;;;354                sleep_mode_enter();
000026  f7fffffe          BL       sleep_mode_enter
;;;355                break;
00002a  e000              B        |L16.46|
                  |L16.44|
;;;356            default:
;;;357                break;
00002c  bf00              NOP      
                  |L16.46|
00002e  bf00              NOP                            ;352
;;;358        }
;;;359    }
000030  bd70              POP      {r4-r6,pc}
;;;360    
                          ENDP


                          AREA ||i.on_ble_evt||, CODE, READONLY, ALIGN=2

                  on_ble_evt PROC
;;;365     */
;;;366    static void on_ble_evt(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;367    {
000002  4605              MOV      r5,r0
;;;368        uint32_t err_code;
;;;369    
;;;370        switch (p_ble_evt->header.evt_id)
000004  8828              LDRH     r0,[r5,#0]
000006  283b              CMP      r0,#0x3b
000008  d020              BEQ      |L17.76|
00000a  dc04              BGT      |L17.22|
00000c  2810              CMP      r0,#0x10
00000e  d007              BEQ      |L17.32|
000010  2811              CMP      r0,#0x11
000012  d145              BNE      |L17.160|
000014  e015              B        |L17.66|
                  |L17.22|
000016  2855              CMP      r0,#0x55
000018  d034              BEQ      |L17.132|
00001a  2856              CMP      r0,#0x56
00001c  d140              BNE      |L17.160|
00001e  e023              B        |L17.104|
                  |L17.32|
;;;371                {
;;;372            case BLE_GAP_EVT_CONNECTED:
;;;373                NRF_LOG_INFO("Connected\r\n");
;;;374                err_code = bsp_indication_set(BSP_INDICATE_CONNECTED);
000020  2007              MOVS     r0,#7
000022  f7fffffe          BL       bsp_indication_set
000026  4604              MOV      r4,r0
;;;375                APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4626              MOV      r6,r4
00002c  b126              CBZ      r6,|L17.56|
00002e  bf00              NOP      
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       app_error_handler_bare
000036  bf00              NOP      
                  |L17.56|
000038  bf00              NOP      
;;;376                m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
00003a  88a8              LDRH     r0,[r5,#4]
00003c  491a              LDR      r1,|L17.168|
00003e  8008              STRH     r0,[r1,#0]
;;;377                break; // BLE_GAP_EVT_CONNECTED
000040  e02f              B        |L17.162|
                  |L17.66|
;;;378    
;;;379            case BLE_GAP_EVT_DISCONNECTED:
;;;380                NRF_LOG_INFO("Disconnected\r\n");
;;;381                m_conn_handle = BLE_CONN_HANDLE_INVALID;
000042  f64f70ff          MOV      r0,#0xffff
000046  4918              LDR      r1,|L17.168|
000048  8008              STRH     r0,[r1,#0]
;;;382                break; // BLE_GAP_EVT_DISCONNECTED
00004a  e02a              B        |L17.162|
                  |L17.76|
;;;383    
;;;384            case BLE_GATTC_EVT_TIMEOUT:
;;;385                // Disconnect on GATT Client timeout event.
;;;386                NRF_LOG_DEBUG("GATT Client Timeout.\r\n");
;;;387                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
00004c  88a8              LDRH     r0,[r5,#4]
00004e  2113              MOVS     r1,#0x13
000050  df76              SVC      #0x76
000052  4604              MOV      r4,r0
;;;388                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;389                APP_ERROR_CHECK(err_code);
000054  bf00              NOP      
000056  4626              MOV      r6,r4
000058  b126              CBZ      r6,|L17.100|
00005a  bf00              NOP      
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       app_error_handler_bare
000062  bf00              NOP      
                  |L17.100|
000064  bf00              NOP      
;;;390                break; // BLE_GATTC_EVT_TIMEOUT
000066  e01c              B        |L17.162|
                  |L17.104|
;;;391    
;;;392            case BLE_GATTS_EVT_TIMEOUT:
;;;393                // Disconnect on GATT Server timeout event.
;;;394                NRF_LOG_DEBUG("GATT Server Timeout.\r\n");
;;;395                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
000068  88a8              LDRH     r0,[r5,#4]
00006a  2113              MOVS     r1,#0x13
00006c  df76              SVC      #0x76
00006e  4604              MOV      r4,r0
;;;396                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;397                APP_ERROR_CHECK(err_code);
000070  bf00              NOP      
000072  4626              MOV      r6,r4
000074  b126              CBZ      r6,|L17.128|
000076  bf00              NOP      
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       app_error_handler_bare
00007e  bf00              NOP      
                  |L17.128|
000080  bf00              NOP      
;;;398                break; // BLE_GATTS_EVT_TIMEOUT
000082  e00e              B        |L17.162|
                  |L17.132|
;;;399    
;;;400    #if (NRF_SD_BLE_API_VERSION == 3)
;;;401            case BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST:
;;;402                err_code = sd_ble_gatts_exchange_mtu_reply(p_ble_evt->evt.gatts_evt.conn_handle,
000084  88a8              LDRH     r0,[r5,#4]
000086  2117              MOVS     r1,#0x17
000088  dfad              SVC      #0xad
00008a  4604              MOV      r4,r0
;;;403                                                           NRF_BLE_MAX_MTU_SIZE);
;;;404                APP_ERROR_CHECK(err_code);
00008c  bf00              NOP      
00008e  4626              MOV      r6,r4
000090  b126              CBZ      r6,|L17.156|
000092  bf00              NOP      
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       app_error_handler_bare
00009a  bf00              NOP      
                  |L17.156|
00009c  bf00              NOP      
;;;405                break; // BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST
00009e  e000              B        |L17.162|
                  |L17.160|
;;;406    #endif
;;;407    
;;;408            default:
;;;409                // No implementation needed.
;;;410                break;
0000a0  bf00              NOP      
                  |L17.162|
0000a2  bf00              NOP                            ;377
;;;411        }
;;;412    }
0000a4  bd70              POP      {r4-r6,pc}
;;;413    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L17.168|
                          DCD      m_conn_handle

                          AREA ||i.on_conn_params_evt||, CODE, READONLY, ALIGN=2

                  on_conn_params_evt PROC
;;;259     */
;;;260    static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;261    {
000002  4605              MOV      r5,r0
;;;262        uint32_t err_code;
;;;263    
;;;264        if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
000004  7828              LDRB     r0,[r5,#0]
000006  b968              CBNZ     r0,|L18.36|
;;;265        {
;;;266            err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
000008  213b              MOVS     r1,#0x3b
00000a  4807              LDR      r0,|L18.40|
00000c  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00000e  df76              SVC      #0x76
000010  4604              MOV      r4,r0
;;;267            APP_ERROR_CHECK(err_code);
000012  bf00              NOP      
000014  4626              MOV      r6,r4
000016  b126              CBZ      r6,|L18.34|
000018  bf00              NOP      
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       app_error_handler_bare
000020  bf00              NOP      
                  |L18.34|
000022  bf00              NOP      
                  |L18.36|
;;;268        }
;;;269    }
000024  bd70              POP      {r4-r6,pc}
;;;270    
                          ENDP

000026  0000              DCW      0x0000
                  |L18.40|
                          DCD      m_conn_handle

                          AREA ||i.peer_manager_init||, CODE, READONLY, ALIGN=2

                  peer_manager_init PROC
;;;663     */
;;;664    static void peer_manager_init(bool erase_bonds)
000000  b57c              PUSH     {r2-r6,lr}
;;;665    {
000002  4605              MOV      r5,r0
;;;666        ble_gap_sec_params_t sec_param;
;;;667        ret_code_t           err_code;
;;;668    
;;;669        err_code = pm_init();
000004  f7fffffe          BL       pm_init
000008  4604              MOV      r4,r0
;;;670        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4626              MOV      r6,r4
00000e  b126              CBZ      r6,|L19.26|
000010  bf00              NOP      
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       app_error_handler_bare
000018  bf00              NOP      
                  |L19.26|
00001a  bf00              NOP      
;;;671    
;;;672        if (erase_bonds)
00001c  b15d              CBZ      r5,|L19.54|
;;;673        {
;;;674            err_code = pm_peers_delete();
00001e  f7fffffe          BL       pm_peers_delete
000022  4604              MOV      r4,r0
;;;675            APP_ERROR_CHECK(err_code);
000024  bf00              NOP      
000026  4626              MOV      r6,r4
000028  b126              CBZ      r6,|L19.52|
00002a  bf00              NOP      
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       app_error_handler_bare
000032  bf00              NOP      
                  |L19.52|
000034  bf00              NOP      
                  |L19.54|
;;;676        }
;;;677    
;;;678        memset(&sec_param, 0, sizeof(ble_gap_sec_params_t));
000036  2000              MOVS     r0,#0
000038  9000              STR      r0,[sp,#0]
00003a  9001              STR      r0,[sp,#4]
;;;679    
;;;680        // Security parameters to be used for all security procedures.
;;;681        sec_param.bond           = SEC_PARAM_BOND;
00003c  f89d0000          LDRB     r0,[sp,#0]
000040  f0200001          BIC      r0,r0,#1
000044  1c40              ADDS     r0,r0,#1
000046  f88d0000          STRB     r0,[sp,#0]
;;;682        sec_param.mitm           = SEC_PARAM_MITM;
00004a  f89d0000          LDRB     r0,[sp,#0]
00004e  f0200002          BIC      r0,r0,#2
000052  f88d0000          STRB     r0,[sp,#0]
;;;683        sec_param.io_caps        = SEC_PARAM_IO_CAPABILITIES;
000056  f89d0000          LDRB     r0,[sp,#0]
00005a  f0200070          BIC      r0,r0,#0x70
00005e  3030              ADDS     r0,r0,#0x30
000060  f88d0000          STRB     r0,[sp,#0]
;;;684        sec_param.oob            = SEC_PARAM_OOB;
000064  f89d0000          LDRB     r0,[sp,#0]
000068  f0200080          BIC      r0,r0,#0x80
00006c  f88d0000          STRB     r0,[sp,#0]
;;;685        sec_param.min_key_size   = SEC_PARAM_MIN_KEY_SIZE;
000070  2007              MOVS     r0,#7
000072  f88d0001          STRB     r0,[sp,#1]
;;;686        sec_param.max_key_size   = SEC_PARAM_MAX_KEY_SIZE;
000076  2010              MOVS     r0,#0x10
000078  f88d0002          STRB     r0,[sp,#2]
;;;687        sec_param.kdist_own.enc  = 1;
00007c  f89d0003          LDRB     r0,[sp,#3]
000080  f0200001          BIC      r0,r0,#1
000084  1c40              ADDS     r0,r0,#1
000086  f88d0003          STRB     r0,[sp,#3]
;;;688        sec_param.kdist_own.id   = 1;
00008a  f89d0003          LDRB     r0,[sp,#3]
00008e  f0200002          BIC      r0,r0,#2
000092  1c80              ADDS     r0,r0,#2
000094  f88d0003          STRB     r0,[sp,#3]
;;;689        sec_param.kdist_peer.enc = 1;
000098  f89d0004          LDRB     r0,[sp,#4]
00009c  f0200001          BIC      r0,r0,#1
0000a0  1c40              ADDS     r0,r0,#1
0000a2  f88d0004          STRB     r0,[sp,#4]
;;;690        sec_param.kdist_peer.id  = 1;
0000a6  f89d0004          LDRB     r0,[sp,#4]
0000aa  f0200002          BIC      r0,r0,#2
0000ae  1c80              ADDS     r0,r0,#2
0000b0  f88d0004          STRB     r0,[sp,#4]
;;;691    
;;;692        err_code = pm_sec_params_set(&sec_param);
0000b4  4668              MOV      r0,sp
0000b6  f7fffffe          BL       pm_sec_params_set
0000ba  4604              MOV      r4,r0
;;;693        APP_ERROR_CHECK(err_code);
0000bc  bf00              NOP      
0000be  4626              MOV      r6,r4
0000c0  b126              CBZ      r6,|L19.204|
0000c2  bf00              NOP      
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       app_error_handler_bare
0000ca  bf00              NOP      
                  |L19.204|
0000cc  bf00              NOP      
;;;694    
;;;695        err_code = pm_register(pm_evt_handler);
0000ce  480d              LDR      r0,|L19.260|
0000d0  f7fffffe          BL       pm_register
0000d4  4604              MOV      r4,r0
;;;696        APP_ERROR_CHECK(err_code);
0000d6  bf00              NOP      
0000d8  4626              MOV      r6,r4
0000da  b126              CBZ      r6,|L19.230|
0000dc  bf00              NOP      
0000de  4630              MOV      r0,r6
0000e0  f7fffffe          BL       app_error_handler_bare
0000e4  bf00              NOP      
                  |L19.230|
0000e6  bf00              NOP      
;;;697    
;;;698        err_code = fds_register(fds_evt_handler);
0000e8  4807              LDR      r0,|L19.264|
0000ea  f7fffffe          BL       fds_register
0000ee  4604              MOV      r4,r0
;;;699        APP_ERROR_CHECK(err_code);
0000f0  bf00              NOP      
0000f2  4626              MOV      r6,r4
0000f4  b126              CBZ      r6,|L19.256|
0000f6  bf00              NOP      
0000f8  4630              MOV      r0,r6
0000fa  f7fffffe          BL       app_error_handler_bare
0000fe  bf00              NOP      
                  |L19.256|
000100  bf00              NOP      
;;;700    }
000102  bd7c              POP      {r2-r6,pc}
;;;701    
                          ENDP

                  |L19.260|
                          DCD      pm_evt_handler
                  |L19.264|
                          DCD      fds_evt_handler

                          AREA ||i.pm_evt_handler||, CODE, READONLY, ALIGN=1

                  pm_evt_handler PROC
;;;535     */
;;;536    static void pm_evt_handler(pm_evt_t const * p_evt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;537    {
000002  4605              MOV      r5,r0
;;;538        ret_code_t err_code;
;;;539    
;;;540        switch (p_evt->evt_id)
000004  7828              LDRB     r0,[r5,#0]
000006  2811              CMP      r0,#0x11
000008  d26f              BCS      |L20.234|
00000a  e8dff000          TBB      [pc,r0]
00000e  0919              DCB      0x09,0x19
000010  1a2a434a          DCB      0x1a,0x2a,0x43,0x4a
000014  5963646d          DCB      0x59,0x63,0x64,0x6d
000018  6f797a84          DCB      0x6f,0x79,0x7a,0x84
00001c  85888900          DCB      0x85,0x88,0x89,0x00
;;;541        {
;;;542            case PM_EVT_BONDED_PEER_CONNECTED:
;;;543                NRF_LOG_DEBUG("Connected to previously bonded device\r\n");
;;;544                err_code = pm_peer_rank_highest(p_evt->peer_id);
000020  88a8              LDRH     r0,[r5,#4]
000022  f7fffffe          BL       pm_peer_rank_highest
000026  4604              MOV      r4,r0
;;;545                if (err_code != NRF_ERROR_BUSY)
000028  2c11              CMP      r4,#0x11
00002a  d008              BEQ      |L20.62|
;;;546                {
;;;547                    APP_ERROR_CHECK(err_code);
00002c  bf00              NOP      
00002e  4626              MOV      r6,r4
000030  b126              CBZ      r6,|L20.60|
000032  bf00              NOP      
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       app_error_handler_bare
00003a  bf00              NOP      
                  |L20.60|
00003c  bf00              NOP      
                  |L20.62|
;;;548                }
;;;549                break; // PM_EVT_BONDED_PEER_CONNECTED
00003e  e071              B        |L20.292|
;;;550    
;;;551            case PM_EVT_CONN_SEC_START:
;;;552                break; // PM_EVT_CONN_SEC_START
000040  e070              B        |L20.292|
;;;553    
;;;554            case PM_EVT_CONN_SEC_SUCCEEDED:
;;;555                NRF_LOG_DEBUG("Link secured. Role: %d. conn_handle: %d, Procedure: %d\r\n",
;;;556                                     ble_conn_state_role(p_evt->conn_handle),
;;;557                                     p_evt->conn_handle,
;;;558                                     p_evt->params.conn_sec_succeeded.procedure);
;;;559                err_code = pm_peer_rank_highest(p_evt->peer_id);
000042  88a8              LDRH     r0,[r5,#4]
000044  f7fffffe          BL       pm_peer_rank_highest
000048  4604              MOV      r4,r0
;;;560                if (err_code != NRF_ERROR_BUSY)
00004a  2c11              CMP      r4,#0x11
00004c  d008              BEQ      |L20.96|
;;;561                {
;;;562                    APP_ERROR_CHECK(err_code);
00004e  bf00              NOP      
000050  4626              MOV      r6,r4
000052  b126              CBZ      r6,|L20.94|
000054  bf00              NOP      
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       app_error_handler_bare
00005c  bf00              NOP      
                  |L20.94|
00005e  bf00              NOP      
                  |L20.96|
;;;563                }
;;;564                break;  // PM_EVT_CONN_SEC_SUCCEEDED
000060  e060              B        |L20.292|
;;;565    
;;;566            case PM_EVT_CONN_SEC_FAILED:
;;;567    
;;;568                /** In some cases, when securing fails, it can be restarted directly. Sometimes it can
;;;569                 *  be restarted, but only after changing some Security Parameters. Sometimes, it cannot
;;;570                 *  be restarted until the link is disconnected and reconnected. Sometimes it is
;;;571                 *  impossible, to secure the link, or the peer device does not support it. How to
;;;572                 *  handle this error is highly application dependent. */
;;;573                switch (p_evt->params.conn_sec_failed.error)
000062  8968              LDRH     r0,[r5,#0xa]
000064  f5a05080          SUB      r0,r0,#0x1000
000068  3806              SUBS     r0,#6
00006a  b980              CBNZ     r0,|L20.142|
;;;574                {
;;;575                    case PM_CONN_SEC_ERROR_PIN_OR_KEY_MISSING:
;;;576                        // Rebond if one party has lost its keys.
;;;577                        err_code = pm_conn_secure(p_evt->conn_handle, true);
00006c  8868              LDRH     r0,[r5,#2]
00006e  2101              MOVS     r1,#1
000070  f7fffffe          BL       pm_conn_secure
000074  4604              MOV      r4,r0
;;;578                        if (err_code != NRF_ERROR_INVALID_STATE)
000076  2c08              CMP      r4,#8
000078  d008              BEQ      |L20.140|
;;;579                        {
;;;580                            APP_ERROR_CHECK(err_code);
00007a  bf00              NOP      
00007c  4626              MOV      r6,r4
00007e  b126              CBZ      r6,|L20.138|
000080  bf00              NOP      
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       app_error_handler_bare
000088  bf00              NOP      
                  |L20.138|
00008a  bf00              NOP      
                  |L20.140|
;;;581                        }
;;;582                        break;
00008c  e000              B        |L20.144|
                  |L20.142|
;;;583    
;;;584                    default:
;;;585                        break;
00008e  bf00              NOP      
                  |L20.144|
000090  bf00              NOP                            ;582
;;;586                }
;;;587                break; // PM_EVT_CONN_SEC_FAILED
000092  e047              B        |L20.292|
;;;588    
;;;589            case PM_EVT_CONN_SEC_CONFIG_REQ:
;;;590            {
;;;591                // Reject pairing request from an already bonded peer.
;;;592                pm_conn_sec_config_t conn_sec_config = {.allow_repairing = false};
000094  2000              MOVS     r0,#0
000096  9000              STR      r0,[sp,#0]
;;;593                pm_conn_sec_config_reply(p_evt->conn_handle, &conn_sec_config);
000098  8868              LDRH     r0,[r5,#2]
00009a  4669              MOV      r1,sp
00009c  f7fffffe          BL       pm_conn_sec_config_reply
;;;594            } break; // PM_EVT_CONN_SEC_CONFIG_REQ
0000a0  e040              B        |L20.292|
;;;595    
;;;596            case PM_EVT_STORAGE_FULL:
;;;597                // Run garbage collection on the flash.
;;;598                err_code = fds_gc();
0000a2  f7fffffe          BL       fds_gc
0000a6  4604              MOV      r4,r0
;;;599                if (err_code != NRF_ERROR_BUSY)
0000a8  2c11              CMP      r4,#0x11
0000aa  d008              BEQ      |L20.190|
;;;600                {
;;;601                    APP_ERROR_CHECK(err_code);
0000ac  bf00              NOP      
0000ae  4626              MOV      r6,r4
0000b0  b126              CBZ      r6,|L20.188|
0000b2  bf00              NOP      
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       app_error_handler_bare
0000ba  bf00              NOP      
                  |L20.188|
0000bc  bf00              NOP      
                  |L20.190|
;;;602                }
;;;603                break; // PM_EVT_STORAGE_FULL
0000be  e031              B        |L20.292|
;;;604    
;;;605            case PM_EVT_ERROR_UNEXPECTED:
;;;606                // A likely fatal error occurred. Assert.
;;;607                APP_ERROR_CHECK(p_evt->params.error_unexpected.error);
0000c0  bf00              NOP      
0000c2  68ae              LDR      r6,[r5,#8]
0000c4  b126              CBZ      r6,|L20.208|
0000c6  bf00              NOP      
0000c8  4630              MOV      r0,r6
0000ca  f7fffffe          BL       app_error_handler_bare
0000ce  bf00              NOP      
                  |L20.208|
0000d0  bf00              NOP      
;;;608                break;
0000d2  e027              B        |L20.292|
;;;609    
;;;610            case PM_EVT_PEER_DATA_UPDATE_SUCCEEDED:
;;;611                break; // PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
0000d4  e026              B        |L20.292|
;;;612    
;;;613            case PM_EVT_PEER_DATA_UPDATE_FAILED:
;;;614                // Assert.
;;;615                APP_ERROR_CHECK_BOOL(false);
0000d6  bf00              NOP      
0000d8  2600              MOVS     r6,#0
0000da  bf00              NOP      
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       app_error_handler_bare
0000e2  bf00              NOP      
0000e4  bf00              NOP      
;;;616                break; // PM_EVT_ERROR_UNEXPECTED
0000e6  e01d              B        |L20.292|
;;;617    
;;;618            case PM_EVT_PEER_DELETE_SUCCEEDED:
;;;619                break; // PM_EVT_PEER_DELETE_SUCCEEDED
0000e8  e01c              B        |L20.292|
                  |L20.234|
0000ea  e01a              B        |L20.290|
;;;620    
;;;621            case PM_EVT_PEER_DELETE_FAILED:
;;;622                // Assert.
;;;623                APP_ERROR_CHECK(p_evt->params.peer_delete_failed.error);
0000ec  bf00              NOP      
0000ee  68ae              LDR      r6,[r5,#8]
0000f0  b126              CBZ      r6,|L20.252|
0000f2  bf00              NOP      
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       app_error_handler_bare
0000fa  bf00              NOP      
                  |L20.252|
0000fc  bf00              NOP      
;;;624                break; // PM_EVT_PEER_DELETE_FAILED
0000fe  e011              B        |L20.292|
;;;625    
;;;626            case PM_EVT_PEERS_DELETE_SUCCEEDED:
;;;627                break; // PM_EVT_PEERS_DELETE_SUCCEEDED
000100  e010              B        |L20.292|
;;;628    
;;;629            case PM_EVT_PEERS_DELETE_FAILED:
;;;630                // Assert.
;;;631                APP_ERROR_CHECK(p_evt->params.peers_delete_failed_evt.error);
000102  bf00              NOP      
000104  68ae              LDR      r6,[r5,#8]
000106  b126              CBZ      r6,|L20.274|
000108  bf00              NOP      
00010a  4630              MOV      r0,r6
00010c  f7fffffe          BL       app_error_handler_bare
000110  bf00              NOP      
                  |L20.274|
000112  bf00              NOP      
;;;632                break; // PM_EVT_PEERS_DELETE_FAILED
000114  e006              B        |L20.292|
;;;633    
;;;634            case PM_EVT_LOCAL_DB_CACHE_APPLIED:
;;;635                break; // PM_EVT_LOCAL_DB_CACHE_APPLIED
000116  e005              B        |L20.292|
;;;636    
;;;637            case PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED:
;;;638                // The local database has likely changed, send service changed indications.
;;;639                pm_local_database_has_changed();
000118  f7fffffe          BL       pm_local_database_has_changed
;;;640                break; // PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED
00011c  e002              B        |L20.292|
;;;641    
;;;642            case PM_EVT_SERVICE_CHANGED_IND_SENT:
;;;643                break; // PM_EVT_SERVICE_CHANGED_IND_SENT
00011e  e001              B        |L20.292|
;;;644    
;;;645            case PM_EVT_SERVICE_CHANGED_IND_CONFIRMED:
;;;646                break; // PM_EVT_SERVICE_CHANGED_IND_SENT
000120  e000              B        |L20.292|
                  |L20.290|
;;;647    
;;;648            default:
;;;649                // No implementation needed.
;;;650                break;
000122  bf00              NOP      
                  |L20.292|
000124  bf00              NOP                            ;549
;;;651        }
;;;652    }
000126  bdf8              POP      {r3-r7,pc}
;;;653    
                          ENDP


                          AREA ||i.power_manage||, CODE, READONLY, ALIGN=1

                  power_manage PROC
;;;750     */
;;;751    static void power_manage(void)
000000  b570              PUSH     {r4-r6,lr}
;;;752    {
;;;753        uint32_t err_code = sd_app_evt_wait();
000002  df3e              SVC      #0x3e
000004  4604              MOV      r4,r0
;;;754        APP_ERROR_CHECK(err_code);
000006  bf00              NOP      
000008  4625              MOV      r5,r4
00000a  b125              CBZ      r5,|L21.22|
00000c  bf00              NOP      
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       app_error_handler_bare
000014  bf00              NOP      
                  |L21.22|
000016  bf00              NOP      
;;;755    }
000018  bd70              POP      {r4-r6,pc}
;;;756    
                          ENDP


                          AREA ||i.services_init||, CODE, READONLY, ALIGN=2

                  services_init PROC
;;;231     */
;;;232    static void services_init(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;233    {
;;;234        nrf_ble_qwr_init_t qwr_init;
;;;235        uint32_t           err_code;
;;;236    
;;;237        // Initialize Queued Write Module
;;;238        memset(&qwr_init, 0, sizeof(qwr_init));
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  9003              STR      r0,[sp,#0xc]
;;;239        qwr_init.mem_buffer.len   = 0;
00000c  2100              MOVS     r1,#0
00000e  f8ad1008          STRH     r1,[sp,#8]
;;;240        qwr_init.mem_buffer.p_mem = NULL;
000012  9001              STR      r0,[sp,#4]
;;;241    
;;;242        err_code = nrf_ble_qwr_init(&m_qwr, &qwr_init);
000014  4669              MOV      r1,sp
000016  480d              LDR      r0,|L22.76|
000018  f7fffffe          BL       nrf_ble_qwr_init
00001c  4604              MOV      r4,r0
;;;243        APP_ERROR_CHECK(err_code);
00001e  bf00              NOP      
000020  4625              MOV      r5,r4
000022  b125              CBZ      r5,|L22.46|
000024  bf00              NOP      
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       app_error_handler_bare
00002c  bf00              NOP      
                  |L22.46|
00002e  bf00              NOP      
;;;244    
;;;245        err_code = bluetooth_init();
000030  f7fffffe          BL       bluetooth_init
000034  4604              MOV      r4,r0
;;;246        APP_ERROR_CHECK(err_code);
000036  bf00              NOP      
000038  4625              MOV      r5,r4
00003a  b125              CBZ      r5,|L22.70|
00003c  bf00              NOP      
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       app_error_handler_bare
000044  bf00              NOP      
                  |L22.70|
000046  bf00              NOP      
;;;247    }
000048  bd7f              POP      {r0-r6,pc}
;;;248    
                          ENDP

00004a  0000              DCW      0x0000
                  |L22.76|
                          DCD      m_qwr

                          AREA ||i.sleep_mode_enter||, CODE, READONLY, ALIGN=1

                  sleep_mode_enter PROC
;;;320     */
;;;321    static void sleep_mode_enter(void)
000000  b570              PUSH     {r4-r6,lr}
;;;322    {
;;;323        uint32_t err_code = bsp_indication_set(BSP_INDICATE_IDLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_indication_set
000008  4604              MOV      r4,r0
;;;324        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4625              MOV      r5,r4
00000e  b125              CBZ      r5,|L23.26|
000010  bf00              NOP      
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       app_error_handler_bare
000018  bf00              NOP      
                  |L23.26|
00001a  bf00              NOP      
;;;325    
;;;326        // Prepare wakeup buttons.
;;;327        err_code = bsp_btn_ble_sleep_mode_prepare();
00001c  f7fffffe          BL       bsp_btn_ble_sleep_mode_prepare
000020  4604              MOV      r4,r0
;;;328        APP_ERROR_CHECK(err_code);
000022  bf00              NOP      
000024  4625              MOV      r5,r4
000026  b125              CBZ      r5,|L23.50|
000028  bf00              NOP      
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       app_error_handler_bare
000030  bf00              NOP      
                  |L23.50|
000032  bf00              NOP      
;;;329    
;;;330        // Go to system-off mode (this function will not return; wakeup will cause a reset).
;;;331        err_code = sd_power_system_off();
000034  df32              SVC      #0x32
000036  4604              MOV      r4,r0
;;;332        APP_ERROR_CHECK(err_code);
000038  bf00              NOP      
00003a  4625              MOV      r5,r4
00003c  b125              CBZ      r5,|L23.72|
00003e  bf00              NOP      
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       app_error_handler_bare
000046  bf00              NOP      
                  |L23.72|
000048  bf00              NOP      
;;;333    }
00004a  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP


                          AREA ||i.sys_evt_dispatch||, CODE, READONLY, ALIGN=1

                  sys_evt_dispatch PROC
;;;441     */
;;;442    static void sys_evt_dispatch(uint32_t sys_evt)
000000  b510              PUSH     {r4,lr}
;;;443    {
000002  4604              MOV      r4,r0
;;;444        // Dispatch the system event to the fstorage module, where it will be
;;;445        // dispatched to the Flash Data Storage (FDS) module.
;;;446        fs_sys_event_handler(sys_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       fs_sys_event_handler
;;;447    
;;;448        // Dispatch to the Advertising module last, since it will check if there are any
;;;449        // pending flash operations in fstorage. Let fstorage process system events first,
;;;450        // so that it can report correctly to the Advertising module.
;;;451        ble_advertising_on_sys_evt(sys_evt);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ble_advertising_on_sys_evt
;;;452    }
000010  bd10              POP      {r4,pc}
;;;453    
                          ENDP


                          AREA ||i.timers_init||, CODE, READONLY, ALIGN=2

                  timers_init PROC
;;;178     */
;;;179    static void timers_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;180    {
;;;181    
;;;182        // Initialize timer module.
;;;183        APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_OP_QUEUE_SIZE, false);
000002  bf00              NOP      
000004  2300              MOVS     r3,#0
000006  4a0b              LDR      r2,|L25.52|
000008  2105              MOVS     r1,#5
00000a  4618              MOV      r0,r3
00000c  f7fffffe          BL       app_timer_init
000010  4604              MOV      r4,r0
000012  bf00              NOP      
000014  4625              MOV      r5,r4
000016  b125              CBZ      r5,|L25.34|
000018  bf00              NOP      
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       app_error_handler_bare
000020  bf00              NOP      
                  |L25.34|
000022  bf00              NOP      
000024  bf00              NOP      
;;;184    
;;;185        // Create timers.
;;;186    
;;;187        /* YOUR_JOB: Create any timers to be used by the application.
;;;188                     Below is an example of how to create a timer.
;;;189        uint32_t err_code;
;;;190        err_code = app_timer_create(&m_app_timer_id, APP_TIMER_MODE_REPEATED, timer_timeout_handler);
;;;191        APP_ERROR_CHECK(err_code); */
;;;192    		app_timer_create(&m_ui_update_id, APP_TIMER_MODE_REPEATED, ui_handler);
000026  4a04              LDR      r2,|L25.56|
000028  2101              MOVS     r1,#1
00002a  4804              LDR      r0,|L25.60|
00002c  f7fffffe          BL       app_timer_create
;;;193    }
000030  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

000032  0000              DCW      0x0000
                  |L25.52|
                          DCD      APP_TIMER_BUF
                  |L25.56|
                          DCD      ui_handler
                  |L25.60|
                          DCD      m_ui_update_id

                          AREA ||i.ui_handler||, CODE, READONLY, ALIGN=1

                  ui_handler PROC
;;;136    
;;;137    void ui_handler(void * p_context)
000000  4770              BX       lr
;;;138    {
;;;139    
;;;140    }
;;;141    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_qwr
                          %        68
                  m_ui_update_id_data
                          %        32
                  m_batt
                          %        10
                  m_bpm
                          %        18
                  APP_TIMER_BUF
                          %        120
                  BLE_EVT_BUFFER
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  image_h
000000  ffffffff          DCB      0xff,0xff,0xff,0xff
000004  ffffffff          DCB      0xff,0xff,0xff,0xff
000008  ffffffff          DCB      0xff,0xff,0xff,0xff
00000c  ffffffff          DCB      0xff,0xff,0xff,0xff
000010  ffffffff          DCB      0xff,0xff,0xff,0xff
000014  ffffffff          DCB      0xff,0xff,0xff,0xff
000018  ffffffff          DCB      0xff,0xff,0xff,0xff
00001c  ffffffff          DCB      0xff,0xff,0xff,0xff
000020  ffffffff          DCB      0xff,0xff,0xff,0xff
000024  ffffffff          DCB      0xff,0xff,0xff,0xff
000028  ffffffff          DCB      0xff,0xff,0xff,0xff
00002c  ffffffff          DCB      0xff,0xff,0xff,0xff
000030  ffffffff          DCB      0xff,0xff,0xff,0xff
000034  ffffffff          DCB      0xff,0xff,0xff,0xff
000038  ffffffff          DCB      0xff,0xff,0xff,0xff
00003c  ffffffff          DCB      0xff,0xff,0xff,0xff
000040  ffffffff          DCB      0xff,0xff,0xff,0xff
000044  ffffffff          DCB      0xff,0xff,0xff,0xff
000048  ffffffff          DCB      0xff,0xff,0xff,0xff
00004c  ffffffff          DCB      0xff,0xff,0xff,0xff
000050  ffffffff          DCB      0xff,0xff,0xff,0xff
000054  ffffffff          DCB      0xff,0xff,0xff,0xff
000058  ffffffff          DCB      0xff,0xff,0xff,0xff
00005c  ffffffff          DCB      0xff,0xff,0xff,0xff
000060  ffffffff          DCB      0xff,0xff,0xff,0xff
000064  ffffffff          DCB      0xff,0xff,0xff,0xff
000068  ffffffff          DCB      0xff,0xff,0xff,0xff
00006c  ffffffff          DCB      0xff,0xff,0xff,0xff
000070  ffffffff          DCB      0xff,0xff,0xff,0xff
000074  ffffffff          DCB      0xff,0xff,0xff,0xff
000078  ffffffff          DCB      0xff,0xff,0xff,0xff
00007c  ffffffff          DCB      0xff,0xff,0xff,0xff
000080  ffffffff          DCB      0xff,0xff,0xff,0xff
000084  ffffffff          DCB      0xff,0xff,0xff,0xff
000088  ffffffff          DCB      0xff,0xff,0xff,0xff
00008c  ffffffff          DCB      0xff,0xff,0xff,0xff
000090  ffffffff          DCB      0xff,0xff,0xff,0xff
000094  ffffffff          DCB      0xff,0xff,0xff,0xff
000098  ffffffff          DCB      0xff,0xff,0xff,0xff
00009c  ffffffff          DCB      0xff,0xff,0xff,0xff
0000a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0000a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0000ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0000b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0000b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0000bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0000c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0000c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0000cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0000d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0000d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0000dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0000e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0000e8  ffffdfff          DCB      0xff,0xff,0xdf,0xff
0000ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0000f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0000f4  fff3dfff          DCB      0xff,0xf3,0xdf,0xff
0000f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0000fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000100  fff79fff          DCB      0xff,0xf7,0x9f,0xff
000104  ffffffff          DCB      0xff,0xff,0xff,0xff
000108  ffffffff          DCB      0xff,0xff,0xff,0xff
00010c  ffe3cfff          DCB      0xff,0xe3,0xcf,0xff
000110  dfffffff          DCB      0xdf,0xff,0xff,0xff
000114  fffffff1          DCB      0xff,0xff,0xff,0xf1
000118  ffe38fff          DCB      0xff,0xe3,0x8f,0xff
00011c  1ffeffff          DCB      0x1f,0xfe,0xff,0xff
000120  ffff7ff8          DCB      0xff,0xff,0x7f,0xf8
000124  ffe38fff          DCB      0xff,0xe3,0x8f,0xff
000128  3ffcffff          DCB      0x3f,0xfc,0xff,0xff
00012c  ffff1ff8          DCB      0xff,0xff,0x1f,0xf8
000130  ffc387ff          DCB      0xff,0xc3,0x87,0xff
000134  3fe0ffff          DCB      0x3f,0xe0,0xff,0xff
000138  ffff07fc          DCB      0xff,0xff,0x07,0xfc
00013c  ffc385ff          DCB      0xff,0xc3,0x85,0xff
000140  7fc0ffff          DCB      0x7f,0xc0,0xff,0xff
000144  ffff03fc          DCB      0xff,0xff,0x03,0xfc
000148  ff0380ff          DCB      0xff,0x03,0x80,0xff
00014c  7f00ffff          DCB      0x7f,0x00,0xff,0xff
000150  ffff00fc          DCB      0xff,0xff,0x00,0xfc
000154  ff0380ff          DCB      0xff,0x03,0x80,0xff
000158  7f00fcff          DCB      0x7f,0x00,0xfc,0xff
00015c  ff7f00fc          DCB      0xff,0x7f,0x00,0xfc
000160  ff0380ff          DCB      0xff,0x03,0x80,0xff
000164  7f00f8ff          DCB      0x7f,0x00,0xf8,0xff
000168  ff1f00fc          DCB      0xff,0x1f,0x00,0xfc
00016c  ff0380ff          DCB      0xff,0x03,0x80,0xff
000170  7f00e0ff          DCB      0x7f,0x00,0xe0,0xff
000174  ff0f00fc          DCB      0xff,0x0f,0x00,0xfc
000178  ff0380ff          DCB      0xff,0x03,0x80,0xff
00017c  7f00c0ff          DCB      0x7f,0x00,0xc0,0xff
000180  ff0700fc          DCB      0xff,0x07,0x00,0xfc
000184  ff0300ff          DCB      0xff,0x03,0x00,0xff
000188  7f00c0ff          DCB      0x7f,0x00,0xc0,0xff
00018c  ff0300f8          DCB      0xff,0x03,0x00,0xf8
000190  ff0380ff          DCB      0xff,0x03,0x80,0xff
000194  7f0000ff          DCB      0x7f,0x00,0x00,0xff
000198  ff0100f8          DCB      0xff,0x01,0x00,0xf8
00019c  ff0300ff          DCB      0xff,0x03,0x00,0xff
0001a0  3f0000fe          DCB      0x3f,0x00,0x00,0xfe
0001a4  ff0000f8          DCB      0xff,0x00,0x00,0xf8
0001a8  ff0100ff          DCB      0xff,0x01,0x00,0xff
0001ac  3f0000fc          DCB      0x3f,0x00,0x00,0xfc
0001b0  7f0000f0          DCB      0x7f,0x00,0x00,0xf0
0001b4  ff0380ff          DCB      0xff,0x03,0x80,0xff
0001b8  1f0000fc          DCB      0x1f,0x00,0x00,0xfc
0001bc  3f0000f0          DCB      0x3f,0x00,0x00,0xf0
0001c0  ff0100ff          DCB      0xff,0x01,0x00,0xff
0001c4  1f0000f8          DCB      0x1f,0x00,0x00,0xf8
0001c8  3f0000e0          DCB      0x3f,0x00,0x00,0xe0
0001cc  ff0100ff          DCB      0xff,0x01,0x00,0xff
0001d0  070000f0          DCB      0x07,0x00,0x00,0xf0
0001d4  1f0000c0          DCB      0x1f,0x00,0x00,0xc0
0001d8  ff0000fe          DCB      0xff,0x00,0x00,0xfe
0001dc  070000f0          DCB      0x07,0x00,0x00,0xf0
0001e0  0f000080          DCB      0x0f,0x00,0x00,0x80
0001e4  3f0000fc          DCB      0x3f,0x00,0x00,0xfc
0001e8  000000e0          DCB      0x00,0x00,0x00,0xe0
0001ec  0f000000          DCB      0x0f,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  000000e0          DCB      0x00,0x00,0x00,0xe0
0001f8  0f000000          DCB      0x0f,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  000000c0          DCB      0x00,0x00,0x00,0xc0
000204  07000000          DCB      0x07,0x00,0x00,0x00
000208  00000000          DCB      0x00,0x00,0x00,0x00
00020c  000000c0          DCB      0x00,0x00,0x00,0xc0
000210  07000000          DCB      0x07,0x00,0x00,0x00
000214  00000000          DCB      0x00,0x00,0x00,0x00
000218  000000c0          DCB      0x00,0x00,0x00,0xc0
00021c  03000000          DCB      0x03,0x00,0x00,0x00
000220  00000000          DCB      0x00,0x00,0x00,0x00
000224  00000080          DCB      0x00,0x00,0x00,0x80
000228  03000000          DCB      0x03,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00000080          DCB      0x00,0x00,0x00,0x80
000234  03000000          DCB      0x03,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000080          DCB      0x00,0x00,0x00,0x80
000240  03000000          DCB      0x03,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000080          DCB      0x00,0x00,0x00,0x80
00024c  03000000          DCB      0x03,0x00,0x00,0x00
000250  00000000          DCB      0x00,0x00,0x00,0x00
000254  00000080          DCB      0x00,0x00,0x00,0x80
000258  03000000          DCB      0x03,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00000080          DCB      0x00,0x00,0x00,0x80
000264  03000000          DCB      0x03,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000080          DCB      0x00,0x00,0x00,0x80
000270  03000000          DCB      0x03,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000080          DCB      0x00,0x00,0x00,0x80
00027c  03000000          DCB      0x03,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000080          DCB      0x00,0x00,0x00,0x80
000288  03000000          DCB      0x03,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000080          DCB      0x00,0x00,0x00,0x80
000294  03000000          DCB      0x03,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000080          DCB      0x00,0x00,0x00,0x80
0002a0  03000000          DCB      0x03,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000080          DCB      0x00,0x00,0x00,0x80
0002ac  03000000          DCB      0x03,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  000000c0          DCB      0x00,0x00,0x00,0xc0
0002b8  07000000          DCB      0x07,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  000000c0          DCB      0x00,0x00,0x00,0xc0
0002c4  07000000          DCB      0x07,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  000000c0          DCB      0x00,0x00,0x00,0xc0
0002d0  07000000          DCB      0x07,0x00,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  000000c0          DCB      0x00,0x00,0x00,0xc0
0002dc  0f000000          DCB      0x0f,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  000000e0          DCB      0x00,0x00,0x00,0xe0
0002e8  0f008000          DCB      0x0f,0x00,0x80,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  000a00e0          DCB      0x00,0x0a,0x00,0xe0
0002f4  0f00f003          DCB      0x0f,0x00,0xf0,0x03
0002f8  60000018          DCB      0x60,0x00,0x00,0x18
0002fc  801f00f0          DCB      0x80,0x1f,0x00,0xf0
000300  1f00f80f          DCB      0x1f,0x00,0xf8,0x0f
000304  fc00007f          DCB      0xfc,0x00,0x00,0x7f
000308  e03f00f0          DCB      0xe0,0x3f,0x00,0xf0
00030c  3f00f81f          DCB      0x3f,0x00,0xf8,0x1f
000310  fc03007f          DCB      0xfc,0x03,0x00,0x7f
000314  e03f00f8          DCB      0xe0,0x3f,0x00,0xf8
000318  3f00fc1f          DCB      0x3f,0x00,0xfc,0x1f
00031c  fe0380ff          DCB      0xfe,0x03,0x80,0xff
000320  f87f00fc          DCB      0xf8,0x7f,0x00,0xfc
000324  7f00fc7f          DCB      0x7f,0x00,0xfc,0x7f
000328  fe07c0ff          DCB      0xfe,0x07,0xc0,0xff
00032c  f87f00fc          DCB      0xf8,0x7f,0x00,0xfc
000330  ff00fc7f          DCB      0xff,0x00,0xfc,0x7f
000334  ff0fe0ff          DCB      0xff,0x0f,0xe0,0xff
000338  fd7f00fe          DCB      0xfd,0x7f,0x00,0xfe
00033c  ff01fcff          DCB      0xff,0x01,0xfc,0xff
000340  ff0fe0ff          DCB      0xff,0x0f,0xe0,0xff
000344  ff7f00ff          DCB      0xff,0x7f,0x00,0xff
000348  ff03fcff          DCB      0xff,0x03,0xfc,0xff
00034c  ff1ff0ff          DCB      0xff,0x1f,0xf0,0xff
000350  ff7f80ff          DCB      0xff,0x7f,0x80,0xff
000354  ff07fcff          DCB      0xff,0x07,0xfc,0xff
000358  ff1ff0ff          DCB      0xff,0x1f,0xf0,0xff
00035c  ff7fc0ff          DCB      0xff,0x7f,0xc0,0xff
000360  ff0ff8ff          DCB      0xff,0x0f,0xf8,0xff
000364  ff1ff0ff          DCB      0xff,0x1f,0xf0,0xff
000368  ff3fe0ff          DCB      0xff,0x3f,0xe0,0xff
00036c  ff3ff8ff          DCB      0xff,0x3f,0xf8,0xff
000370  ff3ff8ff          DCB      0xff,0x3f,0xf8,0xff
000374  ff3ff8ff          DCB      0xff,0x3f,0xf8,0xff
000378  ff7ff0ff          DCB      0xff,0x7f,0xf0,0xff
00037c  ff3ff8ff          DCB      0xff,0x3f,0xf8,0xff
000380  ff3ffcff          DCB      0xff,0x3f,0xfc,0xff
000384  fffff1ff          DCB      0xff,0xff,0xf1,0xff
000388  ff7ffcff          DCB      0xff,0x7f,0xfc,0xff
00038c  ff1fffff          DCB      0xff,0x1f,0xff,0xff
000390  fffff7ff          DCB      0xff,0xff,0xf7,0xff
000394  ff7ffcff          DCB      0xff,0x7f,0xfc,0xff
000398  ffdfffff          DCB      0xff,0xdf,0xff,0xff
00039c  ffffffff          DCB      0xff,0xff,0xff,0xff
0003a0  fffffcff          DCB      0xff,0xff,0xfc,0xff
0003a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003ac  fffffeff          DCB      0xff,0xff,0xfe,0xff
0003b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0003b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0003c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0003c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0003d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0003d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0003e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0003e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0003f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0003f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0003f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0003fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000400  ffffffff          DCB      0xff,0xff,0xff,0xff
000404  ffffffff          DCB      0xff,0xff,0xff,0xff
000408  ffffffff          DCB      0xff,0xff,0xff,0xff
00040c  ffffffff          DCB      0xff,0xff,0xff,0xff
000410  ffffffff          DCB      0xff,0xff,0xff,0xff
000414  ffffffff          DCB      0xff,0xff,0xff,0xff
000418  ffffffff          DCB      0xff,0xff,0xff,0xff
00041c  ffffffff          DCB      0xff,0xff,0xff,0xff
000420  ffffffff          DCB      0xff,0xff,0xff,0xff
000424  ffffffff          DCB      0xff,0xff,0xff,0xff
000428  ffffffff          DCB      0xff,0xff,0xff,0xff
00042c  ffffffff          DCB      0xff,0xff,0xff,0xff
000430  ffffffff          DCB      0xff,0xff,0xff,0xff
000434  ffffffff          DCB      0xff,0xff,0xff,0xff
000438  ffffffff          DCB      0xff,0xff,0xff,0xff
00043c  ffffffff          DCB      0xff,0xff,0xff,0xff
000440  ffffffff          DCB      0xff,0xff,0xff,0xff
000444  ffffffff          DCB      0xff,0xff,0xff,0xff
000448  ffffffff          DCB      0xff,0xff,0xff,0xff
00044c  ffffffff          DCB      0xff,0xff,0xff,0xff
000450  ffffffff          DCB      0xff,0xff,0xff,0xff
000454  ffffffff          DCB      0xff,0xff,0xff,0xff
000458  ffffffff          DCB      0xff,0xff,0xff,0xff
00045c  ffffffff          DCB      0xff,0xff,0xff,0xff
000460  ffffffff          DCB      0xff,0xff,0xff,0xff
000464  ffffffff          DCB      0xff,0xff,0xff,0xff
000468  ffffffff          DCB      0xff,0xff,0xff,0xff
00046c  ffffffff          DCB      0xff,0xff,0xff,0xff
000470  ffffffff          DCB      0xff,0xff,0xff,0xff
000474  ffffffff          DCB      0xff,0xff,0xff,0xff
000478  ffffffff          DCB      0xff,0xff,0xff,0xff
00047c  ffffffff          DCB      0xff,0xff,0xff,0xff
                  superman_h
000480  ffffffff          DCB      0xff,0xff,0xff,0xff
000484  ffffffff          DCB      0xff,0xff,0xff,0xff
000488  ffffffff          DCB      0xff,0xff,0xff,0xff
00048c  ffffffff          DCB      0xff,0xff,0xff,0xff
000490  ffffffff          DCB      0xff,0xff,0xff,0xff
000494  ffffffff          DCB      0xff,0xff,0xff,0xff
000498  ffffffff          DCB      0xff,0xff,0xff,0xff
00049c  ffffffff          DCB      0xff,0xff,0xff,0xff
0004a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0004b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0004c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0004d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0004e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0004f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0004f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0004f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0004fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000500  ffffffff          DCB      0xff,0xff,0xff,0xff
000504  ffffffff          DCB      0xff,0xff,0xff,0xff
000508  ffffffff          DCB      0xff,0xff,0xff,0xff
00050c  ffffffff          DCB      0xff,0xff,0xff,0xff
000510  ffffffff          DCB      0xff,0xff,0xff,0xff
000514  ffffffff          DCB      0xff,0xff,0xff,0xff
000518  ffffffff          DCB      0xff,0xff,0xff,0xff
00051c  ffffffff          DCB      0xff,0xff,0xff,0xff
000520  ffffffff          DCB      0xff,0xff,0xff,0xff
000524  ffffffff          DCB      0xff,0xff,0xff,0xff
000528  ffffffff          DCB      0xff,0xff,0xff,0xff
00052c  ffffffff          DCB      0xff,0xff,0xff,0xff
000530  ffffffff          DCB      0xff,0xff,0xff,0xff
000534  ffff0700          DCB      0xff,0xff,0x07,0x00
000538  00000000          DCB      0x00,0x00,0x00,0x00
00053c  0080ffff          DCB      0x00,0x80,0xff,0xff
000540  ffff0300          DCB      0xff,0xff,0x03,0x00
000544  00000000          DCB      0x00,0x00,0x00,0x00
000548  0000ffff          DCB      0x00,0x00,0xff,0xff
00054c  fffff9ff          DCB      0xff,0xff,0xf9,0xff
000550  ffffffff          DCB      0xff,0xff,0xff,0xff
000554  ff7ffeff          DCB      0xff,0x7f,0xfe,0xff
000558  fffffcff          DCB      0xff,0xff,0xfc,0xff
00055c  ffffffff          DCB      0xff,0xff,0xff,0xff
000560  fffffcff          DCB      0xff,0xff,0xfc,0xff
000564  ff7ffeff          DCB      0xff,0x7f,0xfe,0xff
000568  ffffffff          DCB      0xff,0xff,0xff,0xff
00056c  fffff9ff          DCB      0xff,0xff,0xf9,0xff
000570  ff3f1f80          DCB      0xff,0x3f,0x1f,0x80
000574  ffffff7f          DCB      0xff,0xff,0xff,0x7f
000578  80fff3ff          DCB      0x80,0xff,0xf3,0xff
00057c  ff9f0fe0          DCB      0xff,0x9f,0x0f,0xe0
000580  ff00e0ff          DCB      0xff,0x00,0xe0,0xff
000584  80ffe7ff          DCB      0x80,0xff,0xe7,0xff
000588  ffcf07f8          DCB      0xff,0xcf,0x07,0xf8
00058c  1f0000ff          DCB      0x1f,0x00,0x00,0xff
000590  81bfcfff          DCB      0x81,0xbf,0xcf,0xff
000594  ffe707fc          DCB      0xff,0xe7,0x07,0xfc
000598  070000fc          DCB      0x07,0x00,0x00,0xfc
00059c  833f9fff          DCB      0x83,0x3f,0x9f,0xff
0005a0  fff303fe          DCB      0xff,0xf3,0x03,0xfe
0005a4  010000f0          DCB      0x01,0x00,0x00,0xf0
0005a8  c73f3eff          DCB      0xc7,0x3f,0x3e,0xff
0005ac  fff101ff          DCB      0xff,0xf1,0x01,0xff
0005b0  000000e0          DCB      0x00,0x00,0x00,0xe0
0005b4  e73f7cfe          DCB      0xe7,0x3f,0x7c,0xfe
0005b8  ff7cc07f          DCB      0xff,0x7c,0xc0,0x7f
0005bc  000000c0          DCB      0x00,0x00,0x00,0xc0
0005c0  ff3ff8fc          DCB      0xff,0x3f,0xf8,0xfc
0005c4  7f3ec07f          DCB      0x7f,0x3e,0xc0,0x7f
0005c8  000000c0          DCB      0x00,0x00,0x00,0xc0
0005cc  ff3ff0f9          DCB      0xff,0x3f,0xf0,0xf9
0005d0  3f1fe03f          DCB      0x3f,0x1f,0xe0,0x3f
0005d4  00000080          DCB      0x00,0x00,0x00,0x80
0005d8  ff3fe0f3          DCB      0xff,0x3f,0xe0,0xf3
0005dc  9f1ff03f          DCB      0x9f,0x1f,0xf0,0x3f
0005e0  00000080          DCB      0x00,0x00,0x00,0x80
0005e4  ff3fe0e7          DCB      0xff,0x3f,0xe0,0xe7
0005e8  8f0ff07f          DCB      0x8f,0x0f,0xf0,0x7f
0005ec  00000000          DCB      0x00,0x00,0x00,0x00
0005f0  ff3fc0cf          DCB      0xff,0x3f,0xc0,0xcf
0005f4  c707f87f          DCB      0xc7,0x07,0xf8,0x7f
0005f8  00000000          DCB      0x00,0x00,0x00,0x00
0005fc  ff3f809f          DCB      0xff,0x3f,0x80,0x9f
000600  e707f8ff          DCB      0xe7,0x07,0xf8,0xff
000604  00000000          DCB      0x00,0x00,0x00,0x00
000608  0000809f          DCB      0x00,0x00,0x80,0x9f
00060c  cf0ff8ff          DCB      0xcf,0x0f,0xf8,0xff
000610  01000000          DCB      0x01,0x00,0x00,0x00
000614  0000c0cf          DCB      0x00,0x00,0xc0,0xcf
000618  9f1ffcff          DCB      0x9f,0x1f,0xfc,0xff
00061c  07000000          DCB      0x07,0x00,0x00,0x00
000620  0000c0e7          DCB      0x00,0x00,0xc0,0xe7
000624  3f1ffcff          DCB      0x3f,0x1f,0xfc,0xff
000628  1f000000          DCB      0x1f,0x00,0x00,0x00
00062c  0000e0f3          DCB      0x00,0x00,0xe0,0xf3
000630  7f3efcff          DCB      0x7f,0x3e,0xfc,0xff
000634  ffffff0f          DCB      0xff,0xff,0xff,0x0f
000638  0000f0f9          DCB      0x00,0x00,0xf0,0xf9
00063c  7f7cfcff          DCB      0x7f,0x7c,0xfc,0xff
000640  ffffffff          DCB      0xff,0xff,0xff,0xff
000644  0300f8f9          DCB      0x03,0x00,0xf8,0xf9
000648  fff8fcff          DCB      0xff,0xf8,0xfc,0xff
00064c  ffffffff          DCB      0xff,0xff,0xff,0xff
000650  1f007cfc          DCB      0x1f,0x00,0x7c,0xfc
000654  fff1fdff          DCB      0xff,0xf1,0xfd,0xff
000658  ffffffff          DCB      0xff,0xff,0xff,0xff
00065c  7f007efe          DCB      0x7f,0x00,0x7e,0xfe
000660  fff3ffff          DCB      0xff,0xf3,0xff,0xff
000664  ffffffff          DCB      0xff,0xff,0xff,0xff
000668  ff013fff          DCB      0xff,0x01,0x3f,0xff
00066c  ffe7ffff          DCB      0xff,0xe7,0xff,0xff
000670  ffffffff          DCB      0xff,0xff,0xff,0xff
000674  ff819fff          DCB      0xff,0x81,0x9f,0xff
000678  ffcfffff          DCB      0xff,0xcf,0xff,0xff
00067c  ffffffff          DCB      0xff,0xff,0xff,0xff
000680  ff83cfff          DCB      0xff,0x83,0xcf,0xff
000684  ff9fffff          DCB      0xff,0x9f,0xff,0xff
000688  ffffffff          DCB      0xff,0xff,0xff,0xff
00068c  ffc7e7ff          DCB      0xff,0xc7,0xe7,0xff
000690  ff3fffff          DCB      0xff,0x3f,0xff,0xff
000694  ffffffff          DCB      0xff,0xff,0xff,0xff
000698  ffefe3ff          DCB      0xff,0xef,0xe3,0xff
00069c  ff3ffeff          DCB      0xff,0x3f,0xfe,0xff
0006a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0006a4  fffff1ff          DCB      0xff,0xff,0xf1,0xff
0006a8  ff7f7cfe          DCB      0xff,0x7f,0x7c,0xfe
0006ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0006b0  fffff9ff          DCB      0xff,0xff,0xf9,0xff
0006b4  fffffc80          DCB      0xff,0xff,0xfc,0x80
0006b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0006bc  fffffcff          DCB      0xff,0xff,0xfc,0xff
0006c0  fffff901          DCB      0xff,0xff,0xf9,0x01
0006c4  0000feff          DCB      0x00,0x00,0xfe,0xff
0006c8  ff7ffeff          DCB      0xff,0x7f,0xfe,0xff
0006cc  fffff303          DCB      0xff,0xff,0xf3,0x03
0006d0  000000e0          DCB      0x00,0x00,0x00,0xe0
0006d4  ff3fffff          DCB      0xff,0x3f,0xff,0xff
0006d8  ffffe703          DCB      0xff,0xff,0xe7,0x03
0006dc  00000000          DCB      0x00,0x00,0x00,0x00
0006e0  fe9fffff          DCB      0xfe,0x9f,0xff,0xff
0006e4  ffffcf07          DCB      0xff,0xff,0xcf,0x07
0006e8  00000000          DCB      0x00,0x00,0x00,0x00
0006ec  f88fffff          DCB      0xf8,0x8f,0xff,0xff
0006f0  ffff8f0f          DCB      0xff,0xff,0x8f,0x0f
0006f4  00000000          DCB      0x00,0x00,0x00,0x00
0006f8  f8c7ffff          DCB      0xf8,0xc7,0xff,0xff
0006fc  ffff1f1f          DCB      0xff,0xff,0x1f,0x1f
000700  fc010000          DCB      0xfc,0x01,0x00,0x00
000704  f8e7ffff          DCB      0xf8,0xe7,0xff,0xff
000708  ffff3f3f          DCB      0xff,0xff,0x3f,0x3f
00070c  fe070000          DCB      0xfe,0x07,0x00,0x00
000710  f8f3ffff          DCB      0xf8,0xf3,0xff,0xff
000714  ffff7f7e          DCB      0xff,0xff,0x7f,0x7e
000718  ff1f0000          DCB      0xff,0x1f,0x00,0x00
00071c  fcf9ffff          DCB      0xfc,0xf9,0xff,0xff
000720  fffffffc          DCB      0xff,0xff,0xff,0xfc
000724  ff3f0000          DCB      0xff,0x3f,0x00,0x00
000728  fffcffff          DCB      0xff,0xfc,0xff,0xff
00072c  fffffff9          DCB      0xff,0xff,0xff,0xf9
000730  ff7f00f0          DCB      0xff,0x7f,0x00,0xf0
000734  7ffeffff          DCB      0x7f,0xfe,0xff,0xff
000738  fffffff3          DCB      0xff,0xff,0xff,0xf3
00073c  fffffdff          DCB      0xff,0xff,0xfd,0xff
000740  3ffeffff          DCB      0x3f,0xfe,0xff,0xff
000744  ffffffe3          DCB      0xff,0xff,0xff,0xe3
000748  ffffffff          DCB      0xff,0xff,0xff,0xff
00074c  1fffffff          DCB      0x1f,0xff,0xff,0xff
000750  ffffffc7          DCB      0xff,0xff,0xff,0xc7
000754  ffffffff          DCB      0xff,0xff,0xff,0xff
000758  8fffffff          DCB      0x8f,0xff,0xff,0xff
00075c  ffffff8f          DCB      0xff,0xff,0xff,0x8f
000760  ffffffff          DCB      0xff,0xff,0xff,0xff
000764  cfffffff          DCB      0xcf,0xff,0xff,0xff
000768  ffffff9f          DCB      0xff,0xff,0xff,0x9f
00076c  ffffffef          DCB      0xff,0xff,0xff,0xef
000770  e7ffffff          DCB      0xe7,0xff,0xff,0xff
000774  ffffff3f          DCB      0xff,0xff,0xff,0x3f
000778  3f0000f0          DCB      0x3f,0x00,0x00,0xf0
00077c  f3ffffff          DCB      0xf3,0xff,0xff,0xff
000780  ffffff7f          DCB      0xff,0xff,0xff,0x7f
000784  7e0000f8          DCB      0x7e,0x00,0x00,0xf8
000788  f9ffffff          DCB      0xf9,0xff,0xff,0xff
00078c  ffffffff          DCB      0xff,0xff,0xff,0xff
000790  fc0000fc          DCB      0xfc,0x00,0x00,0xfc
000794  f8ffffff          DCB      0xf8,0xff,0xff,0xff
000798  ffffffff          DCB      0xff,0xff,0xff,0xff
00079c  f801007c          DCB      0xf8,0x01,0x00,0x7c
0007a0  fcffffff          DCB      0xfc,0xff,0xff,0xff
0007a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0007a8  f103003e          DCB      0xf1,0x03,0x00,0x3e
0007ac  feffffff          DCB      0xfe,0xff,0xff,0xff
0007b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0007b4  e303003f          DCB      0xe3,0x03,0x00,0x3f
0007b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0007bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0007c0  e707809f          DCB      0xe7,0x07,0x80,0x9f
0007c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0007c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0007cc  cf0fc0cf          DCB      0xcf,0x0f,0xc0,0xcf
0007d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0007d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0007d8  9f1fe0e7          DCB      0x9f,0x1f,0xe0,0xe7
0007dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0007e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0007e4  3f3ff0f3          DCB      0x3f,0x3f,0xf0,0xf3
0007e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0007ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0007f0  7f7ef8f1          DCB      0x7f,0x7e,0xf8,0xf1
0007f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0007f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0007fc  7ffcf8f8          DCB      0x7f,0xfc,0xf8,0xf8
000800  ffffffff          DCB      0xff,0xff,0xff,0xff
000804  ffffffff          DCB      0xff,0xff,0xff,0xff
000808  fff87ffc          DCB      0xff,0xf8,0x7f,0xfc
00080c  ffffffff          DCB      0xff,0xff,0xff,0xff
000810  ffffffff          DCB      0xff,0xff,0xff,0xff
000814  fff97ffe          DCB      0xff,0xf9,0x7f,0xfe
000818  ffffffff          DCB      0xff,0xff,0xff,0xff
00081c  ffffffff          DCB      0xff,0xff,0xff,0xff
000820  fff33fff          DCB      0xff,0xf3,0x3f,0xff
000824  ffffffff          DCB      0xff,0xff,0xff,0xff
000828  ffffffff          DCB      0xff,0xff,0xff,0xff
00082c  ffe79fff          DCB      0xff,0xe7,0x9f,0xff
000830  ffffffff          DCB      0xff,0xff,0xff,0xff
000834  ffffffff          DCB      0xff,0xff,0xff,0xff
000838  ffcfcfff          DCB      0xff,0xcf,0xcf,0xff
00083c  ffffffff          DCB      0xff,0xff,0xff,0xff
000840  ffffffff          DCB      0xff,0xff,0xff,0xff
000844  ff9fc7ff          DCB      0xff,0x9f,0xc7,0xff
000848  ffffffff          DCB      0xff,0xff,0xff,0xff
00084c  ffffffff          DCB      0xff,0xff,0xff,0xff
000850  ff3ff3ff          DCB      0xff,0x3f,0xf3,0xff
000854  ffffffff          DCB      0xff,0xff,0xff,0xff
000858  ffffffff          DCB      0xff,0xff,0xff,0xff
00085c  ff3ff0ff          DCB      0xff,0x3f,0xf0,0xff
000860  ffffffff          DCB      0xff,0xff,0xff,0xff
000864  ffffffff          DCB      0xff,0xff,0xff,0xff
000868  ff7ff8ff          DCB      0xff,0x7f,0xf8,0xff
00086c  ffffffff          DCB      0xff,0xff,0xff,0xff
000870  ffffffff          DCB      0xff,0xff,0xff,0xff
000874  fffffcff          DCB      0xff,0xff,0xfc,0xff
000878  ffffffff          DCB      0xff,0xff,0xff,0xff
00087c  ffffffff          DCB      0xff,0xff,0xff,0xff
000880  ffffffff          DCB      0xff,0xff,0xff,0xff
000884  ffffffff          DCB      0xff,0xff,0xff,0xff
000888  ffffffff          DCB      0xff,0xff,0xff,0xff
00088c  ffffffff          DCB      0xff,0xff,0xff,0xff
000890  ffffffff          DCB      0xff,0xff,0xff,0xff
000894  ffffffff          DCB      0xff,0xff,0xff,0xff
000898  ffffffff          DCB      0xff,0xff,0xff,0xff
00089c  ffffffff          DCB      0xff,0xff,0xff,0xff
0008a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0008b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0008c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0008d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0008e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0008f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0008f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0008f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0008fc  ffffffff          DCB      0xff,0xff,0xff,0xff
                  m_ui_update_id
                          DCD      m_ui_update_id_data
000904  01000007          DCB      0x01,0x00,0x00,0x07

                          AREA ||.data||, DATA, ALIGN=2

                  toggle
000000  0000              DCB      0x00,0x00
                  m_conn_handle
000002  ffff              DCW      0xffff
                  m_test
                          DCD      0x00000000
                  m_msTick
                          DCD      0x00000000
                  m_adv_uuids
00000c  180a              DCW      0x180a
00000e  0100              DCB      0x01,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_image_h____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_image_h____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_image_h____REVSH|
#line 402
|__asm___6_main_c_image_h____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_image_h____RRX|
#line 587
|__asm___6_main_c_image_h____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
