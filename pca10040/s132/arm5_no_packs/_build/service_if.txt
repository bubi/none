; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\service_if.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\service_if.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\service_if.crf ..\..\..\service_if.c]
                          THUMB

                          AREA ||i.bluetooth_init||, CODE, READONLY, ALIGN=2

                  bluetooth_init PROC
;;;87      */
;;;88     uint32_t bluetooth_init(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
000002  b0a2              SUB      sp,sp,#0x88
;;;90         uint32_t    err_code; 
;;;91         ble_dis_init_t    dis_init; 
;;;92         ble_bas_init_t    bas_init; 
;;;93         ble_none_display_init_t    none_display_init; 
;;;94         
;;;95     
;;;96         // Initialize Device Information.
;;;97         memset(&dis_init, 0, sizeof(dis_init));
000004  2158              MOVS     r1,#0x58
000006  a80c              ADD      r0,sp,#0x30
000008  f7fffffe          BL       __aeabi_memclr4
;;;98     
;;;99         dis_init.evt_handler = on_dis_evt; 
00000c  4836              LDR      r0,|L1.232|
00000e  900c              STR      r0,[sp,#0x30]
;;;100        ble_srv_ascii_to_utf8(&dis_init.ble_dis_manufacturer_name_string_initial_value.manufacturer_name, "INITIAL VALUE"); 
000010  a136              ADR      r1,|L1.236|
000012  a80d              ADD      r0,sp,#0x34
000014  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;101        ble_srv_ascii_to_utf8(&dis_init.ble_dis_model_number_string_initial_value.model_number, "INITIAL VALUE"); 
000018  a134              ADR      r1,|L1.236|
00001a  a80f              ADD      r0,sp,#0x3c
00001c  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;102        ble_srv_ascii_to_utf8(&dis_init.ble_dis_serial_number_string_initial_value.serial_number, "INITIAL VALUE"); 
000020  a132              ADR      r1,|L1.236|
000022  a811              ADD      r0,sp,#0x44
000024  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;103        ble_srv_ascii_to_utf8(&dis_init.ble_dis_hardware_revision_string_initial_value.hardware_revision, "INITIAL VALUE"); 
000028  a130              ADR      r1,|L1.236|
00002a  a813              ADD      r0,sp,#0x4c
00002c  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;104        ble_srv_ascii_to_utf8(&dis_init.ble_dis_firmware_revision_string_initial_value.firmware_revision, "INITIAL VALUE"); 
000030  a12e              ADR      r1,|L1.236|
000032  a815              ADD      r0,sp,#0x54
000034  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;105        ble_srv_ascii_to_utf8(&dis_init.ble_dis_software_revision_string_initial_value.software_revision, "INITIAL VALUE"); 
000038  a12c              ADR      r1,|L1.236|
00003a  a817              ADD      r0,sp,#0x5c
00003c  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;106        memset(&dis_init.ble_dis_system_id_initial_value.manufacturer_identifier,
000040  2000              MOVS     r0,#0
000042  901a              STR      r0,[sp,#0x68]
000044  901b              STR      r0,[sp,#0x6c]
;;;107               0x00,
;;;108               sizeof(dis_init.ble_dis_system_id_initial_value.manufacturer_identifier));
;;;109        memset(&dis_init.ble_dis_system_id_initial_value.organizationally_unique_identifier,
000046  2100              MOVS     r1,#0
000048  911c              STR      r1,[sp,#0x70]
;;;110               0x00,
;;;111               sizeof(dis_init.ble_dis_system_id_initial_value.organizationally_unique_identifier));
;;;112        dis_init.ble_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value.data.list_len = 1;
00004a  2101              MOVS     r1,#1
00004c  f88d107c          STRB     r1,[sp,#0x7c]
;;;113        dis_init.ble_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value.data.p_list = m_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value_data_arr; 
000050  482a              LDR      r0,|L1.252|
000052  901e              STR      r0,[sp,#0x78]
;;;114        dis_init.ble_dis_pnp_id_initial_value.vendor_id_source.vendor_id_source = VENDOR_ID_SOURCE_BLUETOOTH_SIG_ASSIGNED_COMPANY_IDENTIFIER_VALUE_FROM_THE_ASSIGNED_NUMBERS_DOCUMENT; 
000054  2001              MOVS     r0,#1
000056  f88d0080          STRB     r0,[sp,#0x80]
;;;115        memset(&dis_init.ble_dis_pnp_id_initial_value.vendor_id,
00005a  a80c              ADD      r0,sp,#0x30
00005c  2100              MOVS     r1,#0
00005e  f8ad1082          STRH     r1,[sp,#0x82]
;;;116               0x00,
;;;117               sizeof(dis_init.ble_dis_pnp_id_initial_value.vendor_id));
;;;118        memset(&dis_init.ble_dis_pnp_id_initial_value.product_id,
000062  f8ad1084          STRH     r1,[sp,#0x84]
;;;119               0x00,
;;;120               sizeof(dis_init.ble_dis_pnp_id_initial_value.product_id));
;;;121        memset(&dis_init.ble_dis_pnp_id_initial_value.product_version,
000066  f8ad1086          STRH     r1,[sp,#0x86]
;;;122               0x00,
;;;123               sizeof(dis_init.ble_dis_pnp_id_initial_value.product_version));
;;;124    
;;;125        err_code = ble_dis_init(&m_dis, &dis_init);
00006a  a90c              ADD      r1,sp,#0x30
00006c  4824              LDR      r0,|L1.256|
00006e  f7fffffe          BL       ble_dis_init
000072  4604              MOV      r4,r0
;;;126        if (err_code != NRF_SUCCESS)
000074  b114              CBZ      r4,|L1.124|
;;;127        {
;;;128            return err_code;
000076  4620              MOV      r0,r4
                  |L1.120|
;;;129        } 
;;;130    
;;;131        // Initialize Battery Service.
;;;132        memset(&bas_init, 0, sizeof(bas_init));
;;;133    
;;;134        bas_init.evt_handler = on_bas_evt; 
;;;135        bas_init.is_battery_level_notify_supported = true;
;;;136        memset(&bas_init.ble_bas_battery_level_initial_value.level,
;;;137               0x00,
;;;138               sizeof(bas_init.ble_bas_battery_level_initial_value.level));
;;;139    
;;;140        err_code = ble_bas_init(&m_bas, &bas_init);
;;;141        if (err_code != NRF_SUCCESS)
;;;142        {
;;;143            return err_code;
;;;144        } 
;;;145    
;;;146        // Initialize none Display.
;;;147        memset(&none_display_init, 0, sizeof(none_display_init));
;;;148    
;;;149        none_display_init.evt_handler = on_none_display_evt; 
;;;150        memset(&none_display_init.ble_none_display_display_configuration_initial_value.configuration,
;;;151               0x00,
;;;152               sizeof(none_display_init.ble_none_display_display_configuration_initial_value.configuration));
;;;153        memset(&none_display_init.ble_none_display_metrics_initial_value.heart_beat_bpm,
;;;154               0x00,
;;;155               sizeof(none_display_init.ble_none_display_metrics_initial_value.heart_beat_bpm));
;;;156        memset(&none_display_init.ble_none_display_metrics_initial_value.speed_kmh,
;;;157               0x00,
;;;158               sizeof(none_display_init.ble_none_display_metrics_initial_value.speed_kmh));
;;;159        memset(&none_display_init.ble_none_display_metrics_initial_value.cadence_rpm,
;;;160               0x00,
;;;161               sizeof(none_display_init.ble_none_display_metrics_initial_value.cadence_rpm));
;;;162        memset(&none_display_init.ble_none_display_metrics_initial_value.total_height,
;;;163               0x00,
;;;164               sizeof(none_display_init.ble_none_display_metrics_initial_value.total_height));
;;;165        memset(&none_display_init.ble_none_display_metrics_initial_value.distance,
;;;166               0x00,
;;;167               sizeof(none_display_init.ble_none_display_metrics_initial_value.distance));
;;;168        memset(&none_display_init.ble_none_display_buttons_initial_value.button,
;;;169               0x00,
;;;170               sizeof(none_display_init.ble_none_display_buttons_initial_value.button));
;;;171    
;;;172        err_code = ble_none_display_init(&m_none_display, &none_display_init);
;;;173        if (err_code != NRF_SUCCESS)
;;;174        {
;;;175            return err_code;
;;;176        } 
;;;177    
;;;178        return NRF_SUCCESS;
;;;179    }
000078  b022              ADD      sp,sp,#0x88
00007a  bd10              POP      {r4,pc}
                  |L1.124|
00007c  2000              MOVS     r0,#0                 ;132
00007e  9008              STR      r0,[sp,#0x20]         ;132
000080  9009              STR      r0,[sp,#0x24]         ;132
000082  900a              STR      r0,[sp,#0x28]         ;132
000084  900b              STR      r0,[sp,#0x2c]         ;132
000086  481f              LDR      r0,|L1.260|
000088  9008              STR      r0,[sp,#0x20]         ;134
00008a  2001              MOVS     r0,#1                 ;135
00008c  f88d0024          STRB     r0,[sp,#0x24]         ;135
000090  2000              MOVS     r0,#0                 ;136
000092  f88d0026          STRB     r0,[sp,#0x26]         ;136
000096  a908              ADD      r1,sp,#0x20           ;140
000098  481b              LDR      r0,|L1.264|
00009a  f7fffffe          BL       ble_bas_init
00009e  4604              MOV      r4,r0                 ;140
0000a0  b10c              CBZ      r4,|L1.166|
0000a2  4620              MOV      r0,r4                 ;143
0000a4  e7e8              B        |L1.120|
                  |L1.166|
0000a6  211c              MOVS     r1,#0x1c              ;147
0000a8  a801              ADD      r0,sp,#4              ;147
0000aa  f7fffffe          BL       __aeabi_memclr4
0000ae  4817              LDR      r0,|L1.268|
0000b0  9001              STR      r0,[sp,#4]            ;149
0000b2  2000              MOVS     r0,#0                 ;150
0000b4  f8ad0008          STRH     r0,[sp,#8]            ;150
0000b8  f88d000c          STRB     r0,[sp,#0xc]          ;153
0000bc  a801              ADD      r0,sp,#4              ;156
0000be  2100              MOVS     r1,#0                 ;156
0000c0  f8ad100e          STRH     r1,[sp,#0xe]          ;156
0000c4  f8ad1010          STRH     r1,[sp,#0x10]         ;159
0000c8  9105              STR      r1,[sp,#0x14]         ;162
0000ca  9106              STR      r1,[sp,#0x18]         ;165
0000cc  2000              MOVS     r0,#0                 ;168
0000ce  f88d001c          STRB     r0,[sp,#0x1c]         ;168
0000d2  a901              ADD      r1,sp,#4              ;172
0000d4  480e              LDR      r0,|L1.272|
0000d6  f7fffffe          BL       ble_none_display_init
0000da  4604              MOV      r4,r0                 ;172
0000dc  b10c              CBZ      r4,|L1.226|
0000de  4620              MOV      r0,r4                 ;175
0000e0  e7ca              B        |L1.120|
                  |L1.226|
0000e2  2000              MOVS     r0,#0                 ;178
0000e4  e7c8              B        |L1.120|
;;;180    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L1.232|
                          DCD      on_dis_evt
                  |L1.236|
0000ec  494e4954          DCB      "INITIAL VALUE",0
0000f0  49414c20
0000f4  56414c55
0000f8  4500    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L1.252|
                          DCD      m_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value_data_arr
                  |L1.256|
                          DCD      m_dis
                  |L1.260|
                          DCD      on_bas_evt
                  |L1.264|
                          DCD      m_bas
                  |L1.268|
                          DCD      on_none_display_evt
                  |L1.272|
                          DCD      m_none_display

                          AREA ||i.bluetooth_on_ble_evt||, CODE, READONLY, ALIGN=2

                  bluetooth_on_ble_evt PROC
;;;186     */
;;;187    void bluetooth_on_ble_evt(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;188    { 
000002  4604              MOV      r4,r0
;;;189        ble_dis_on_ble_evt(&m_dis, p_ble_evt); 
000004  4621              MOV      r1,r4
000006  4806              LDR      r0,|L2.32|
000008  f7fffffe          BL       ble_dis_on_ble_evt
;;;190        ble_bas_on_ble_evt(&m_bas, p_ble_evt); 
00000c  4621              MOV      r1,r4
00000e  4805              LDR      r0,|L2.36|
000010  f7fffffe          BL       ble_bas_on_ble_evt
;;;191        ble_none_display_on_ble_evt(&m_none_display, p_ble_evt); 
000014  4621              MOV      r1,r4
000016  4804              LDR      r0,|L2.40|
000018  f7fffffe          BL       ble_none_display_on_ble_evt
;;;192    }
00001c  bd10              POP      {r4,pc}
;;;193    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      m_dis
                  |L2.36|
                          DCD      m_bas
                  |L2.40|
                          DCD      m_none_display

                          AREA ||i.on_bas_evt||, CODE, READONLY, ALIGN=1

                  on_bas_evt PROC
;;;42      */
;;;43     static void on_bas_evt(ble_bas_t * p_bas, ble_bas_evt_t * p_evt)
000000  780a              LDRB     r2,[r1,#0]
;;;44     {
;;;45         switch (p_evt->evt_type)
000002  b122              CBZ      r2,|L3.14|
000004  2a01              CMP      r2,#1
000006  d003              BEQ      |L3.16|
000008  2a02              CMP      r2,#2
00000a  d103              BNE      |L3.20|
00000c  e001              B        |L3.18|
                  |L3.14|
;;;46         { 
;;;47             case BLE_BAS_BATTERY_LEVEL_EVT_NOTIFICATION_ENABLED:
;;;48                 break;
00000e  e002              B        |L3.22|
                  |L3.16|
;;;49             case BLE_BAS_BATTERY_LEVEL_EVT_NOTIFICATION_DISABLED:
;;;50                 break;
000010  e001              B        |L3.22|
                  |L3.18|
;;;51             case BLE_BAS_BATTERY_LEVEL_EVT_CCCD_WRITE:
;;;52                 break; 
000012  e000              B        |L3.22|
                  |L3.20|
;;;53             default:
;;;54                 // No implementation needed.
;;;55                 break;
000014  bf00              NOP      
                  |L3.22|
000016  bf00              NOP                            ;48
;;;56         }
;;;57     }
000018  4770              BX       lr
;;;58     
                          ENDP


                          AREA ||i.on_dis_evt||, CODE, READONLY, ALIGN=1

                  on_dis_evt PROC
;;;23      */
;;;24     static void on_dis_evt(ble_dis_t * p_dis, ble_dis_evt_t * p_evt)
000000  bf00              NOP      
;;;25     {
;;;26         switch (p_evt->evt_type)
;;;27         { 
;;;28             default:
;;;29                 // No implementation needed.
;;;30                 break;
000002  bf00              NOP      
000004  bf00              NOP      
;;;31         }
;;;32     }
000006  4770              BX       lr
;;;33     
                          ENDP


                          AREA ||i.on_none_display_evt||, CODE, READONLY, ALIGN=1

                  on_none_display_evt PROC
;;;67      */
;;;68     static void on_none_display_evt(ble_none_display_t * p_none_display, ble_none_display_evt_t * p_evt)
000000  780a              LDRB     r2,[r1,#0]
;;;69     {
;;;70         switch (p_evt->evt_type)
000002  2a02              CMP      r2,#2
000004  d002              BEQ      |L5.12|
000006  2a05              CMP      r2,#5
000008  d102              BNE      |L5.16|
00000a  e000              B        |L5.14|
                  |L5.12|
;;;71         { 
;;;72             case BLE_NONE_DISPLAY_DISPLAY_CONFIGURATION_EVT_WRITE:
;;;73                 break; 
00000c  e001              B        |L5.18|
                  |L5.14|
;;;74             case BLE_NONE_DISPLAY_METRICS_EVT_WRITE:
;;;75                 break; 
00000e  e000              B        |L5.18|
                  |L5.16|
;;;76             default:
;;;77                 // No implementation needed.
;;;78                 break;
000010  bf00              NOP      
                  |L5.18|
000012  bf00              NOP                            ;73
;;;79         }
;;;80     }
000014  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.return_ble_bas_t||, CODE, READONLY, ALIGN=2

                  return_ble_bas_t PROC
;;;193    
;;;194    ble_bas_t* return_ble_bas_t(void) { return &m_bas; }
000000  4800              LDR      r0,|L6.4|
000002  4770              BX       lr
;;;195    
                          ENDP

                  |L6.4|
                          DCD      m_bas

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_dis
                          %        80
                  m_bas
                          %        28
                  m_none_display
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  m_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value_data_arr
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\service_if.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_service_if_c_616b5e85____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_service_if_c_616b5e85____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_service_if_c_616b5e85____REVSH|
#line 402
|__asm___12_service_if_c_616b5e85____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_service_if_c_616b5e85____RRX|
#line 587
|__asm___12_service_if_c_616b5e85____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
