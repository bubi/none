; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_dis.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_dis.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_dis.crf ..\..\..\ble_dis.c]
                          THUMB

                          AREA ||i.bds_ble_srv_utf8_str_encode||, CODE, READONLY, ALIGN=1

                  bds_ble_srv_utf8_str_encode PROC
;;;173     */
;;;174    static __INLINE uint8_t bds_ble_srv_utf8_str_encode(const ble_srv_utf8_str_t * p_value,
000000  b570              PUSH     {r4-r6,lr}
;;;175                                                        uint8_t                  * p_encoded_data)
;;;176    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;177        memcpy(p_encoded_data, p_value->p_str, p_value->length);
000006  8822              LDRH     r2,[r4,#0]
000008  4628              MOV      r0,r5
00000a  6861              LDR      r1,[r4,#4]
00000c  f7fffffe          BL       __aeabi_memcpy
;;;178        return p_value->length;
000010  7820              LDRB     r0,[r4,#0]
;;;179    }
000012  bd70              POP      {r4-r6,pc}
;;;180    
                          ENDP


                          AREA ||i.bds_uint16_encode||, CODE, READONLY, ALIGN=1

                  bds_uint16_encode PROC
;;;73      */
;;;74     static __INLINE uint8_t bds_uint16_encode(const uint16_t * p_value, uint8_t * p_encoded_data)
000000  4602              MOV      r2,r0
;;;75     {
;;;76         p_encoded_data[0] = (uint8_t) ((*p_value & 0x00FF) >> 0);
000002  7810              LDRB     r0,[r2,#0]
000004  7008              STRB     r0,[r1,#0]
;;;77         p_encoded_data[1] = (uint8_t) ((*p_value & 0xFF00) >> 8);
000006  8810              LDRH     r0,[r2,#0]
000008  0a00              LSRS     r0,r0,#8
00000a  7048              STRB     r0,[r1,#1]
;;;78         return sizeof(uint16_t);
00000c  2002              MOVS     r0,#2
;;;79     }
00000e  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.ble_dis_firmware_revision_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_firmware_revision_string_set PROC
;;;538    /**@brief Function for setting the Firmware Revision String. */
;;;539    uint32_t ble_dis_firmware_revision_string_set(ble_dis_t * p_dis, ble_dis_firmware_revision_string_t * p_firmware_revision_string)
000000  b530              PUSH     {r4,r5,lr}
;;;540    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;541        ble_gatts_value_t gatts_value;
;;;542        uint8_t encoded_value[MAX_FIRMWARE_REVISION_STRING_LEN];
;;;543    
;;;544        // Initialize value struct.
;;;545        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;546    
;;;547        gatts_value.len     = firmware_revision_string_encode(p_firmware_revision_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       firmware_revision_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;548        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;549        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;550    
;;;551        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->firmware_revision_string_handles.value_handle, &gatts_value);
000024  8ce1              LDRH     r1,[r4,#0x26]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;552    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;553    
                          ENDP


                          AREA ||i.ble_dis_hardware_revision_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_hardware_revision_string_set PROC
;;;522    /**@brief Function for setting the Hardware Revision String. */
;;;523    uint32_t ble_dis_hardware_revision_string_set(ble_dis_t * p_dis, ble_dis_hardware_revision_string_t * p_hardware_revision_string)
000000  b530              PUSH     {r4,r5,lr}
;;;524    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;525        ble_gatts_value_t gatts_value;
;;;526        uint8_t encoded_value[MAX_HARDWARE_REVISION_STRING_LEN];
;;;527    
;;;528        // Initialize value struct.
;;;529        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;530    
;;;531        gatts_value.len     = hardware_revision_string_encode(p_hardware_revision_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       hardware_revision_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;532        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;533        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;534    
;;;535        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->hardware_revision_string_handles.value_handle, &gatts_value);
000024  8be1              LDRH     r1,[r4,#0x1e]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;536    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;537    
                          ENDP


                          AREA ||i.ble_dis_ieee_11073_20601_regulatory_certification_data_list_set||, CODE, READONLY, ALIGN=1

                  ble_dis_ieee_11073_20601_regulatory_certification_data_list_set PROC
;;;586    /**@brief Function for setting the IEEE 11073-20601 Regulatory Certification Data List. */
;;;587    uint32_t ble_dis_ieee_11073_20601_regulatory_certification_data_list_set(ble_dis_t * p_dis, ble_dis_ieee_11073_20601_regulatory_certification_data_list_t * p_ieee_11073_20601_regulatory_certification_data_list)
000000  b530              PUSH     {r4,r5,lr}
;;;588    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;589        ble_gatts_value_t gatts_value;
;;;590        uint8_t encoded_value[MAX_IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_LEN];
;;;591    
;;;592        // Initialize value struct.
;;;593        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;594    
;;;595        gatts_value.len     = ieee_11073_20601_regulatory_certification_data_list_encode(p_ieee_11073_20601_regulatory_certification_data_list, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       ieee_11073_20601_regulatory_certification_data_list_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;596        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;597        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;598    
;;;599        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->ieee_11073_20601_regulatory_certification_data_list_handles.value_handle, &gatts_value);
000024  8fe1              LDRH     r1,[r4,#0x3e]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;600    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;601    
                          ENDP


                          AREA ||i.ble_dis_init||, CODE, READONLY, ALIGN=1

                  ble_dis_init PROC
;;;254    /**@brief Function for initializing the Device Information. */
;;;255    uint32_t ble_dis_init(ble_dis_t * p_dis, const ble_dis_init_t * p_dis_init)
000000  b570              PUSH     {r4-r6,lr}
;;;256    {
000002  f5ad7d0c          SUB      sp,sp,#0x230
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
;;;257        uint32_t err_code;
;;;258        ble_uuid_t ble_uuid;
;;;259    
;;;260        // Initialize service structure
;;;261        p_dis->evt_handler = p_dis_init->evt_handler;
00000a  6830              LDR      r0,[r6,#0]
00000c  6020              STR      r0,[r4,#0]
;;;262        p_dis->conn_handle = BLE_CONN_HANDLE_INVALID;
00000e  f64f70ff          MOV      r0,#0xffff
000012  f8a4004e          STRH     r0,[r4,#0x4e]
;;;263        
;;;264        BLE_UUID_BLE_ASSIGN(ble_uuid, 0x180A);
000016  bf00              NOP      
000018  2001              MOVS     r0,#1
00001a  f88d022a          STRB     r0,[sp,#0x22a]
00001e  f641000a          MOV      r0,#0x180a
000022  f8ad0228          STRH     r0,[sp,#0x228]
000026  bf00              NOP      
;;;265            
;;;266        // Add service
;;;267        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_dis->service_handle);
000028  1d22              ADDS     r2,r4,#4
00002a  a98a              ADD      r1,sp,#0x228
00002c  2001              MOVS     r0,#1
00002e  dfa0              SVC      #0xa0
000030  4605              MOV      r5,r0
;;;268        if (err_code != NRF_SUCCESS)
000032  b11d              CBZ      r5,|L6.60|
;;;269        {
;;;270            return err_code;
000034  4628              MOV      r0,r5
                  |L6.54|
;;;271        } 
;;;272    
;;;273        // Add Manufacturer Name String characteristic
;;;274        ble_dis_manufacturer_name_string_t manufacturer_name_string_initial_value = p_dis_init->ble_dis_manufacturer_name_string_initial_value; 
;;;275    
;;;276        uint8_t manufacturer_name_string_encoded_value[MAX_MANUFACTURER_NAME_STRING_LEN];
;;;277        ble_add_char_params_t add_manufacturer_name_string_params;
;;;278        memset(&add_manufacturer_name_string_params, 0, sizeof(add_manufacturer_name_string_params));
;;;279        
;;;280        add_manufacturer_name_string_params.uuid                = 0x2A29; 
;;;281        add_manufacturer_name_string_params.max_len             = MAX_MANUFACTURER_NAME_STRING_LEN;
;;;282        add_manufacturer_name_string_params.init_len            = manufacturer_name_string_encode(&manufacturer_name_string_initial_value, manufacturer_name_string_encoded_value);
;;;283        add_manufacturer_name_string_params.p_init_value        = manufacturer_name_string_encoded_value; 
;;;284        add_manufacturer_name_string_params.char_props.read     = 1; 
;;;285        add_manufacturer_name_string_params.read_access         = SEC_OPEN; 
;;;286        // 1 for variable length and 0 for fixed length.
;;;287        add_manufacturer_name_string_params.is_var_len          = 1; 
;;;288    
;;;289        err_code = characteristic_add(p_dis->service_handle, &add_manufacturer_name_string_params, &(p_dis->manufacturer_name_string_handles));
;;;290        if (err_code != NRF_SUCCESS)
;;;291        {
;;;292            return err_code;
;;;293        } 
;;;294    
;;;295        // Add Model Number String characteristic
;;;296        ble_dis_model_number_string_t model_number_string_initial_value = p_dis_init->ble_dis_model_number_string_initial_value; 
;;;297    
;;;298        uint8_t model_number_string_encoded_value[MAX_MODEL_NUMBER_STRING_LEN];
;;;299        ble_add_char_params_t add_model_number_string_params;
;;;300        memset(&add_model_number_string_params, 0, sizeof(add_model_number_string_params));
;;;301        
;;;302        add_model_number_string_params.uuid                = 0x2A24; 
;;;303        add_model_number_string_params.max_len             = MAX_MODEL_NUMBER_STRING_LEN;
;;;304        add_model_number_string_params.init_len            = model_number_string_encode(&model_number_string_initial_value, model_number_string_encoded_value);
;;;305        add_model_number_string_params.p_init_value        = model_number_string_encoded_value; 
;;;306        add_model_number_string_params.char_props.read     = 1; 
;;;307        add_model_number_string_params.read_access         = SEC_OPEN; 
;;;308        // 1 for variable length and 0 for fixed length.
;;;309        add_model_number_string_params.is_var_len          = 1; 
;;;310    
;;;311        err_code = characteristic_add(p_dis->service_handle, &add_model_number_string_params, &(p_dis->model_number_string_handles));
;;;312        if (err_code != NRF_SUCCESS)
;;;313        {
;;;314            return err_code;
;;;315        } 
;;;316    
;;;317        // Add Serial Number String characteristic
;;;318        ble_dis_serial_number_string_t serial_number_string_initial_value = p_dis_init->ble_dis_serial_number_string_initial_value; 
;;;319    
;;;320        uint8_t serial_number_string_encoded_value[MAX_SERIAL_NUMBER_STRING_LEN];
;;;321        ble_add_char_params_t add_serial_number_string_params;
;;;322        memset(&add_serial_number_string_params, 0, sizeof(add_serial_number_string_params));
;;;323        
;;;324        add_serial_number_string_params.uuid                = 0x2A25; 
;;;325        add_serial_number_string_params.max_len             = MAX_SERIAL_NUMBER_STRING_LEN;
;;;326        add_serial_number_string_params.init_len            = serial_number_string_encode(&serial_number_string_initial_value, serial_number_string_encoded_value);
;;;327        add_serial_number_string_params.p_init_value        = serial_number_string_encoded_value; 
;;;328        add_serial_number_string_params.char_props.read     = 1; 
;;;329        add_serial_number_string_params.read_access         = SEC_OPEN; 
;;;330        // 1 for variable length and 0 for fixed length.
;;;331        add_serial_number_string_params.is_var_len          = 1; 
;;;332    
;;;333        err_code = characteristic_add(p_dis->service_handle, &add_serial_number_string_params, &(p_dis->serial_number_string_handles));
;;;334        if (err_code != NRF_SUCCESS)
;;;335        {
;;;336            return err_code;
;;;337        } 
;;;338    
;;;339        // Add Hardware Revision String characteristic
;;;340        ble_dis_hardware_revision_string_t hardware_revision_string_initial_value = p_dis_init->ble_dis_hardware_revision_string_initial_value; 
;;;341    
;;;342        uint8_t hardware_revision_string_encoded_value[MAX_HARDWARE_REVISION_STRING_LEN];
;;;343        ble_add_char_params_t add_hardware_revision_string_params;
;;;344        memset(&add_hardware_revision_string_params, 0, sizeof(add_hardware_revision_string_params));
;;;345        
;;;346        add_hardware_revision_string_params.uuid                = 0x2A27; 
;;;347        add_hardware_revision_string_params.max_len             = MAX_HARDWARE_REVISION_STRING_LEN;
;;;348        add_hardware_revision_string_params.init_len            = hardware_revision_string_encode(&hardware_revision_string_initial_value, hardware_revision_string_encoded_value);
;;;349        add_hardware_revision_string_params.p_init_value        = hardware_revision_string_encoded_value; 
;;;350        add_hardware_revision_string_params.char_props.read     = 1; 
;;;351        add_hardware_revision_string_params.read_access         = SEC_OPEN; 
;;;352        // 1 for variable length and 0 for fixed length.
;;;353        add_hardware_revision_string_params.is_var_len          = 1; 
;;;354    
;;;355        err_code = characteristic_add(p_dis->service_handle, &add_hardware_revision_string_params, &(p_dis->hardware_revision_string_handles));
;;;356        if (err_code != NRF_SUCCESS)
;;;357        {
;;;358            return err_code;
;;;359        } 
;;;360    
;;;361        // Add Firmware Revision String characteristic
;;;362        ble_dis_firmware_revision_string_t firmware_revision_string_initial_value = p_dis_init->ble_dis_firmware_revision_string_initial_value; 
;;;363    
;;;364        uint8_t firmware_revision_string_encoded_value[MAX_FIRMWARE_REVISION_STRING_LEN];
;;;365        ble_add_char_params_t add_firmware_revision_string_params;
;;;366        memset(&add_firmware_revision_string_params, 0, sizeof(add_firmware_revision_string_params));
;;;367        
;;;368        add_firmware_revision_string_params.uuid                = 0x2A26; 
;;;369        add_firmware_revision_string_params.max_len             = MAX_FIRMWARE_REVISION_STRING_LEN;
;;;370        add_firmware_revision_string_params.init_len            = firmware_revision_string_encode(&firmware_revision_string_initial_value, firmware_revision_string_encoded_value);
;;;371        add_firmware_revision_string_params.p_init_value        = firmware_revision_string_encoded_value; 
;;;372        add_firmware_revision_string_params.char_props.read     = 1; 
;;;373        add_firmware_revision_string_params.read_access         = SEC_OPEN; 
;;;374        // 1 for variable length and 0 for fixed length.
;;;375        add_firmware_revision_string_params.is_var_len          = 1; 
;;;376    
;;;377        err_code = characteristic_add(p_dis->service_handle, &add_firmware_revision_string_params, &(p_dis->firmware_revision_string_handles));
;;;378        if (err_code != NRF_SUCCESS)
;;;379        {
;;;380            return err_code;
;;;381        } 
;;;382    
;;;383        // Add Software Revision String characteristic
;;;384        ble_dis_software_revision_string_t software_revision_string_initial_value = p_dis_init->ble_dis_software_revision_string_initial_value; 
;;;385    
;;;386        uint8_t software_revision_string_encoded_value[MAX_SOFTWARE_REVISION_STRING_LEN];
;;;387        ble_add_char_params_t add_software_revision_string_params;
;;;388        memset(&add_software_revision_string_params, 0, sizeof(add_software_revision_string_params));
;;;389        
;;;390        add_software_revision_string_params.uuid                = 0x2A28; 
;;;391        add_software_revision_string_params.max_len             = MAX_SOFTWARE_REVISION_STRING_LEN;
;;;392        add_software_revision_string_params.init_len            = software_revision_string_encode(&software_revision_string_initial_value, software_revision_string_encoded_value);
;;;393        add_software_revision_string_params.p_init_value        = software_revision_string_encoded_value; 
;;;394        add_software_revision_string_params.char_props.read     = 1; 
;;;395        add_software_revision_string_params.read_access         = SEC_OPEN; 
;;;396        // 1 for variable length and 0 for fixed length.
;;;397        add_software_revision_string_params.is_var_len          = 1; 
;;;398    
;;;399        err_code = characteristic_add(p_dis->service_handle, &add_software_revision_string_params, &(p_dis->software_revision_string_handles));
;;;400        if (err_code != NRF_SUCCESS)
;;;401        {
;;;402            return err_code;
;;;403        } 
;;;404    
;;;405        // Add System ID characteristic
;;;406        ble_dis_system_id_t system_id_initial_value = p_dis_init->ble_dis_system_id_initial_value; 
;;;407    
;;;408        uint8_t system_id_encoded_value[MAX_SYSTEM_ID_LEN];
;;;409        ble_add_char_params_t add_system_id_params;
;;;410        memset(&add_system_id_params, 0, sizeof(add_system_id_params));
;;;411        
;;;412        add_system_id_params.uuid                = 0x2A23; 
;;;413        add_system_id_params.max_len             = MAX_SYSTEM_ID_LEN;
;;;414        add_system_id_params.init_len            = system_id_encode(&system_id_initial_value, system_id_encoded_value);
;;;415        add_system_id_params.p_init_value        = system_id_encoded_value; 
;;;416        add_system_id_params.char_props.read     = 1; 
;;;417        add_system_id_params.read_access         = SEC_OPEN; 
;;;418        // 1 for variable length and 0 for fixed length.
;;;419        add_system_id_params.is_var_len          = 1; 
;;;420    
;;;421        err_code = characteristic_add(p_dis->service_handle, &add_system_id_params, &(p_dis->system_id_handles));
;;;422        if (err_code != NRF_SUCCESS)
;;;423        {
;;;424            return err_code;
;;;425        } 
;;;426    
;;;427        // Add IEEE 11073-20601 Regulatory Certification Data List characteristic
;;;428        ble_dis_ieee_11073_20601_regulatory_certification_data_list_t ieee_11073_20601_regulatory_certification_data_list_initial_value = p_dis_init->ble_dis_ieee_11073_20601_regulatory_certification_data_list_initial_value; 
;;;429    
;;;430        uint8_t ieee_11073_20601_regulatory_certification_data_list_encoded_value[MAX_IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_LEN];
;;;431        ble_add_char_params_t add_ieee_11073_20601_regulatory_certification_data_list_params;
;;;432        memset(&add_ieee_11073_20601_regulatory_certification_data_list_params, 0, sizeof(add_ieee_11073_20601_regulatory_certification_data_list_params));
;;;433        
;;;434        add_ieee_11073_20601_regulatory_certification_data_list_params.uuid                = 0x2A2A; 
;;;435        add_ieee_11073_20601_regulatory_certification_data_list_params.max_len             = MAX_IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_LEN;
;;;436        add_ieee_11073_20601_regulatory_certification_data_list_params.init_len            = ieee_11073_20601_regulatory_certification_data_list_encode(&ieee_11073_20601_regulatory_certification_data_list_initial_value, ieee_11073_20601_regulatory_certification_data_list_encoded_value);
;;;437        add_ieee_11073_20601_regulatory_certification_data_list_params.p_init_value        = ieee_11073_20601_regulatory_certification_data_list_encoded_value; 
;;;438        add_ieee_11073_20601_regulatory_certification_data_list_params.char_props.read     = 1; 
;;;439        add_ieee_11073_20601_regulatory_certification_data_list_params.read_access         = SEC_OPEN; 
;;;440        // 1 for variable length and 0 for fixed length.
;;;441        add_ieee_11073_20601_regulatory_certification_data_list_params.is_var_len          = 1; 
;;;442    
;;;443        err_code = characteristic_add(p_dis->service_handle, &add_ieee_11073_20601_regulatory_certification_data_list_params, &(p_dis->ieee_11073_20601_regulatory_certification_data_list_handles));
;;;444        if (err_code != NRF_SUCCESS)
;;;445        {
;;;446            return err_code;
;;;447        } 
;;;448    
;;;449        // Add PnP ID characteristic
;;;450        ble_dis_pnp_id_t pnp_id_initial_value = p_dis_init->ble_dis_pnp_id_initial_value; 
;;;451    
;;;452        uint8_t pnp_id_encoded_value[MAX_PNP_ID_LEN];
;;;453        ble_add_char_params_t add_pnp_id_params;
;;;454        memset(&add_pnp_id_params, 0, sizeof(add_pnp_id_params));
;;;455        
;;;456        add_pnp_id_params.uuid                = 0x2A50; 
;;;457        add_pnp_id_params.max_len             = MAX_PNP_ID_LEN;
;;;458        add_pnp_id_params.init_len            = pnp_id_encode(&pnp_id_initial_value, pnp_id_encoded_value);
;;;459        add_pnp_id_params.p_init_value        = pnp_id_encoded_value; 
;;;460        add_pnp_id_params.char_props.read     = 1; 
;;;461        add_pnp_id_params.read_access         = SEC_OPEN; 
;;;462        // 1 for variable length and 0 for fixed length.
;;;463        add_pnp_id_params.is_var_len          = 1; 
;;;464    
;;;465        err_code = characteristic_add(p_dis->service_handle, &add_pnp_id_params, &(p_dis->pnp_id_handles));
;;;466        if (err_code != NRF_SUCCESS)
;;;467        {
;;;468            return err_code;
;;;469        } 
;;;470    
;;;471        return NRF_SUCCESS;
;;;472    }
000036  f50d7d0c          ADD      sp,sp,#0x230
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  e9d60101          LDRD     r0,r1,[r6,#4]         ;274
000040  9189              STR      r1,[sp,#0x224]        ;274
000042  9088              STR      r0,[sp,#0x220]        ;274
000044  2120              MOVS     r1,#0x20              ;278
000046  a87b              ADD      r0,sp,#0x1ec          ;278
000048  f7fffffe          BL       __aeabi_memclr4
00004c  f6422029          MOV      r0,#0x2a29            ;280
000050  f8ad01ec          STRH     r0,[sp,#0x1ec]        ;280
000054  2014              MOVS     r0,#0x14              ;281
000056  f8ad01f0          STRH     r0,[sp,#0x1f0]        ;281
00005a  a983              ADD      r1,sp,#0x20c          ;282
00005c  a888              ADD      r0,sp,#0x220          ;282
00005e  f7fffffe          BL       manufacturer_name_string_encode
000062  f8ad01f2          STRH     r0,[sp,#0x1f2]        ;282
000066  a883              ADD      r0,sp,#0x20c          ;283
000068  907d              STR      r0,[sp,#0x1f4]        ;283
00006a  f89d01f9          LDRB     r0,[sp,#0x1f9]        ;284
00006e  f0200002          BIC      r0,r0,#2              ;284
000072  1c80              ADDS     r0,r0,#2              ;284
000074  f88d01f9          STRB     r0,[sp,#0x1f9]        ;284
000078  2001              MOVS     r0,#1                 ;285
00007a  f88d01fd          STRB     r0,[sp,#0x1fd]        ;285
00007e  f88d01f8          STRB     r0,[sp,#0x1f8]        ;287
000082  88a0              LDRH     r0,[r4,#4]            ;289
000084  1da2              ADDS     r2,r4,#6              ;289
000086  a97b              ADD      r1,sp,#0x1ec          ;289
000088  f7fffffe          BL       characteristic_add
00008c  4605              MOV      r5,r0                 ;289
00008e  b10d              CBZ      r5,|L6.148|
000090  4628              MOV      r0,r5                 ;292
000092  e7d0              B        |L6.54|
                  |L6.148|
000094  e9d60103          LDRD     r0,r1,[r6,#0xc]       ;296
000098  917a              STR      r1,[sp,#0x1e8]        ;296
00009a  9079              STR      r0,[sp,#0x1e4]        ;296
00009c  2120              MOVS     r1,#0x20              ;300
00009e  a86c              ADD      r0,sp,#0x1b0          ;300
0000a0  f7fffffe          BL       __aeabi_memclr4
0000a4  f6422024          MOV      r0,#0x2a24            ;302
0000a8  f8ad01b0          STRH     r0,[sp,#0x1b0]        ;302
0000ac  2014              MOVS     r0,#0x14              ;303
0000ae  f8ad01b4          STRH     r0,[sp,#0x1b4]        ;303
0000b2  a974              ADD      r1,sp,#0x1d0          ;304
0000b4  a879              ADD      r0,sp,#0x1e4          ;304
0000b6  f7fffffe          BL       model_number_string_encode
0000ba  f8ad01b6          STRH     r0,[sp,#0x1b6]        ;304
0000be  a874              ADD      r0,sp,#0x1d0          ;305
0000c0  906e              STR      r0,[sp,#0x1b8]        ;305
0000c2  f89d01bd          LDRB     r0,[sp,#0x1bd]        ;306
0000c6  f0200002          BIC      r0,r0,#2              ;306
0000ca  1c80              ADDS     r0,r0,#2              ;306
0000cc  f88d01bd          STRB     r0,[sp,#0x1bd]        ;306
0000d0  2001              MOVS     r0,#1                 ;307
0000d2  f88d01c1          STRB     r0,[sp,#0x1c1]        ;307
0000d6  f88d01bc          STRB     r0,[sp,#0x1bc]        ;309
0000da  88a0              LDRH     r0,[r4,#4]            ;311
0000dc  f104020e          ADD      r2,r4,#0xe            ;311
0000e0  a96c              ADD      r1,sp,#0x1b0          ;311
0000e2  f7fffffe          BL       characteristic_add
0000e6  4605              MOV      r5,r0                 ;311
0000e8  b10d              CBZ      r5,|L6.238|
0000ea  4628              MOV      r0,r5                 ;314
0000ec  e7a3              B        |L6.54|
                  |L6.238|
0000ee  e9d60105          LDRD     r0,r1,[r6,#0x14]      ;318
0000f2  916b              STR      r1,[sp,#0x1ac]        ;318
0000f4  906a              STR      r0,[sp,#0x1a8]        ;318
0000f6  2120              MOVS     r1,#0x20              ;322
0000f8  a85d              ADD      r0,sp,#0x174          ;322
0000fa  f7fffffe          BL       __aeabi_memclr4
0000fe  f6422025          MOV      r0,#0x2a25            ;324
000102  f8ad0174          STRH     r0,[sp,#0x174]        ;324
000106  2014              MOVS     r0,#0x14              ;325
000108  f8ad0178          STRH     r0,[sp,#0x178]        ;325
00010c  a965              ADD      r1,sp,#0x194          ;326
00010e  a86a              ADD      r0,sp,#0x1a8          ;326
000110  f7fffffe          BL       serial_number_string_encode
000114  f8ad017a          STRH     r0,[sp,#0x17a]        ;326
000118  a865              ADD      r0,sp,#0x194          ;327
00011a  905f              STR      r0,[sp,#0x17c]        ;327
00011c  f89d0181          LDRB     r0,[sp,#0x181]        ;328
000120  f0200002          BIC      r0,r0,#2              ;328
000124  1c80              ADDS     r0,r0,#2              ;328
000126  f88d0181          STRB     r0,[sp,#0x181]        ;328
00012a  2001              MOVS     r0,#1                 ;329
00012c  f88d0185          STRB     r0,[sp,#0x185]        ;329
000130  f88d0180          STRB     r0,[sp,#0x180]        ;331
000134  88a0              LDRH     r0,[r4,#4]            ;333
000136  f1040216          ADD      r2,r4,#0x16           ;333
00013a  a95d              ADD      r1,sp,#0x174          ;333
00013c  f7fffffe          BL       characteristic_add
000140  4605              MOV      r5,r0                 ;333
000142  b10d              CBZ      r5,|L6.328|
000144  4628              MOV      r0,r5                 ;336
000146  e776              B        |L6.54|
                  |L6.328|
000148  e9d60107          LDRD     r0,r1,[r6,#0x1c]      ;340
00014c  915c              STR      r1,[sp,#0x170]        ;340
00014e  905b              STR      r0,[sp,#0x16c]        ;340
000150  2120              MOVS     r1,#0x20              ;344
000152  a84e              ADD      r0,sp,#0x138          ;344
000154  f7fffffe          BL       __aeabi_memclr4
000158  f6422027          MOV      r0,#0x2a27            ;346
00015c  f8ad0138          STRH     r0,[sp,#0x138]        ;346
000160  2014              MOVS     r0,#0x14              ;347
000162  f8ad013c          STRH     r0,[sp,#0x13c]        ;347
000166  a956              ADD      r1,sp,#0x158          ;348
000168  a85b              ADD      r0,sp,#0x16c          ;348
00016a  f7fffffe          BL       hardware_revision_string_encode
00016e  f8ad013e          STRH     r0,[sp,#0x13e]        ;348
000172  a856              ADD      r0,sp,#0x158          ;349
000174  9050              STR      r0,[sp,#0x140]        ;349
000176  f89d0145          LDRB     r0,[sp,#0x145]        ;350
00017a  f0200002          BIC      r0,r0,#2              ;350
00017e  1c80              ADDS     r0,r0,#2              ;350
000180  f88d0145          STRB     r0,[sp,#0x145]        ;350
000184  2001              MOVS     r0,#1                 ;351
000186  f88d0149          STRB     r0,[sp,#0x149]        ;351
00018a  f88d0144          STRB     r0,[sp,#0x144]        ;353
00018e  88a0              LDRH     r0,[r4,#4]            ;355
000190  f104021e          ADD      r2,r4,#0x1e           ;355
000194  a94e              ADD      r1,sp,#0x138          ;355
000196  f7fffffe          BL       characteristic_add
00019a  4605              MOV      r5,r0                 ;355
00019c  b10d              CBZ      r5,|L6.418|
00019e  4628              MOV      r0,r5                 ;358
0001a0  e749              B        |L6.54|
                  |L6.418|
0001a2  e9d60109          LDRD     r0,r1,[r6,#0x24]      ;362
0001a6  914d              STR      r1,[sp,#0x134]        ;362
0001a8  904c              STR      r0,[sp,#0x130]        ;362
0001aa  2120              MOVS     r1,#0x20              ;366
0001ac  a83f              ADD      r0,sp,#0xfc           ;366
0001ae  f7fffffe          BL       __aeabi_memclr4
0001b2  f6422026          MOV      r0,#0x2a26            ;368
0001b6  f8ad00fc          STRH     r0,[sp,#0xfc]         ;368
0001ba  2014              MOVS     r0,#0x14              ;369
0001bc  f8ad0100          STRH     r0,[sp,#0x100]        ;369
0001c0  a947              ADD      r1,sp,#0x11c          ;370
0001c2  a84c              ADD      r0,sp,#0x130          ;370
0001c4  f7fffffe          BL       firmware_revision_string_encode
0001c8  f8ad0102          STRH     r0,[sp,#0x102]        ;370
0001cc  a847              ADD      r0,sp,#0x11c          ;371
0001ce  9041              STR      r0,[sp,#0x104]        ;371
0001d0  f89d0109          LDRB     r0,[sp,#0x109]        ;372
0001d4  f0200002          BIC      r0,r0,#2              ;372
0001d8  1c80              ADDS     r0,r0,#2              ;372
0001da  f88d0109          STRB     r0,[sp,#0x109]        ;372
0001de  2001              MOVS     r0,#1                 ;373
0001e0  f88d010d          STRB     r0,[sp,#0x10d]        ;373
0001e4  f88d0108          STRB     r0,[sp,#0x108]        ;375
0001e8  88a0              LDRH     r0,[r4,#4]            ;377
0001ea  f1040226          ADD      r2,r4,#0x26           ;377
0001ee  a93f              ADD      r1,sp,#0xfc           ;377
0001f0  f7fffffe          BL       characteristic_add
0001f4  4605              MOV      r5,r0                 ;377
0001f6  b10d              CBZ      r5,|L6.508|
0001f8  4628              MOV      r0,r5                 ;380
0001fa  e71c              B        |L6.54|
                  |L6.508|
0001fc  e9d6010b          LDRD     r0,r1,[r6,#0x2c]      ;384
000200  e9cd013d          STRD     r0,r1,[sp,#0xf4]      ;384
000204  2120              MOVS     r1,#0x20              ;388
000206  a830              ADD      r0,sp,#0xc0           ;388
000208  f7fffffe          BL       __aeabi_memclr4
00020c  f6422028          MOV      r0,#0x2a28            ;390
000210  f8ad00c0          STRH     r0,[sp,#0xc0]         ;390
000214  2014              MOVS     r0,#0x14              ;391
000216  f8ad00c4          STRH     r0,[sp,#0xc4]         ;391
00021a  a938              ADD      r1,sp,#0xe0           ;392
00021c  a83d              ADD      r0,sp,#0xf4           ;392
00021e  f7fffffe          BL       software_revision_string_encode
000222  f8ad00c6          STRH     r0,[sp,#0xc6]         ;392
000226  a838              ADD      r0,sp,#0xe0           ;393
000228  9032              STR      r0,[sp,#0xc8]         ;393
00022a  f89d00cd          LDRB     r0,[sp,#0xcd]         ;394
00022e  f0200002          BIC      r0,r0,#2              ;394
000232  1c80              ADDS     r0,r0,#2              ;394
000234  f88d00cd          STRB     r0,[sp,#0xcd]         ;394
000238  2001              MOVS     r0,#1                 ;395
00023a  f88d00d1          STRB     r0,[sp,#0xd1]         ;395
00023e  f88d00cc          STRB     r0,[sp,#0xcc]         ;397
000242  88a0              LDRH     r0,[r4,#4]            ;399
000244  f104022e          ADD      r2,r4,#0x2e           ;399
000248  a930              ADD      r1,sp,#0xc0           ;399
00024a  f7fffffe          BL       characteristic_add
00024e  4605              MOV      r5,r0                 ;399
000250  b10d              CBZ      r5,|L6.598|
000252  4628              MOV      r0,r5                 ;402
000254  e6ef              B        |L6.54|
                  |L6.598|
000256  f1060038          ADD      r0,r6,#0x38           ;406
00025a  c80f              LDM      r0,{r0-r3}            ;406
00025c  e9cd232e          STRD     r2,r3,[sp,#0xb8]      ;406
000260  e9cd012c          STRD     r0,r1,[sp,#0xb0]      ;406
000264  2120              MOVS     r1,#0x20              ;410
000266  a81f              ADD      r0,sp,#0x7c           ;410
000268  f7fffffe          BL       __aeabi_memclr4
00026c  f6422023          MOV      r0,#0x2a23            ;412
000270  f8ad007c          STRH     r0,[sp,#0x7c]         ;412
000274  2014              MOVS     r0,#0x14              ;413
000276  f8ad0080          STRH     r0,[sp,#0x80]         ;413
00027a  a927              ADD      r1,sp,#0x9c           ;414
00027c  a82c              ADD      r0,sp,#0xb0           ;414
00027e  f7fffffe          BL       system_id_encode
000282  f8ad0082          STRH     r0,[sp,#0x82]         ;414
000286  a827              ADD      r0,sp,#0x9c           ;415
000288  9021              STR      r0,[sp,#0x84]         ;415
00028a  f89d0089          LDRB     r0,[sp,#0x89]         ;416
00028e  f0200002          BIC      r0,r0,#2              ;416
000292  1c80              ADDS     r0,r0,#2              ;416
000294  f88d0089          STRB     r0,[sp,#0x89]         ;416
000298  2001              MOVS     r0,#1                 ;417
00029a  f88d008d          STRB     r0,[sp,#0x8d]         ;417
00029e  f88d0088          STRB     r0,[sp,#0x88]         ;419
0002a2  88a0              LDRH     r0,[r4,#4]            ;421
0002a4  f1040236          ADD      r2,r4,#0x36           ;421
0002a8  a91f              ADD      r1,sp,#0x7c           ;421
0002aa  f7fffffe          BL       characteristic_add
0002ae  4605              MOV      r5,r0                 ;421
0002b0  b10d              CBZ      r5,|L6.694|
0002b2  4628              MOV      r0,r5                 ;424
0002b4  e6bf              B        |L6.54|
                  |L6.694|
0002b6  e9d60112          LDRD     r0,r1,[r6,#0x48]      ;428
0002ba  e9cd011d          STRD     r0,r1,[sp,#0x74]      ;428
0002be  2120              MOVS     r1,#0x20              ;432
0002c0  a810              ADD      r0,sp,#0x40           ;432
0002c2  f7fffffe          BL       __aeabi_memclr4
0002c6  f642202a          MOV      r0,#0x2a2a            ;434
0002ca  f8ad0040          STRH     r0,[sp,#0x40]         ;434
0002ce  2014              MOVS     r0,#0x14              ;435
0002d0  f8ad0044          STRH     r0,[sp,#0x44]         ;435
0002d4  a918              ADD      r1,sp,#0x60           ;436
0002d6  a81d              ADD      r0,sp,#0x74           ;436
0002d8  f7fffffe          BL       ieee_11073_20601_regulatory_certification_data_list_encode
0002dc  f8ad0046          STRH     r0,[sp,#0x46]         ;436
0002e0  a818              ADD      r0,sp,#0x60           ;437
0002e2  9012              STR      r0,[sp,#0x48]         ;437
0002e4  f89d004d          LDRB     r0,[sp,#0x4d]         ;438
0002e8  f0200002          BIC      r0,r0,#2              ;438
0002ec  1c80              ADDS     r0,r0,#2              ;438
0002ee  f88d004d          STRB     r0,[sp,#0x4d]         ;438
0002f2  2001              MOVS     r0,#1                 ;439
0002f4  f88d0051          STRB     r0,[sp,#0x51]         ;439
0002f8  f88d004c          STRB     r0,[sp,#0x4c]         ;441
0002fc  88a0              LDRH     r0,[r4,#4]            ;443
0002fe  f104023e          ADD      r2,r4,#0x3e           ;443
000302  a910              ADD      r1,sp,#0x40           ;443
000304  f7fffffe          BL       characteristic_add
000308  4605              MOV      r5,r0                 ;443
00030a  b10d              CBZ      r5,|L6.784|
00030c  4628              MOV      r0,r5                 ;446
00030e  e692              B        |L6.54|
                  |L6.784|
000310  6d30              LDR      r0,[r6,#0x50]         ;450
000312  900e              STR      r0,[sp,#0x38]         ;450
000314  6d70              LDR      r0,[r6,#0x54]         ;450
000316  900f              STR      r0,[sp,#0x3c]         ;450
000318  2120              MOVS     r1,#0x20              ;454
00031a  a801              ADD      r0,sp,#4              ;454
00031c  f7fffffe          BL       __aeabi_memclr4
000320  f6422050          MOV      r0,#0x2a50            ;456
000324  f8ad0004          STRH     r0,[sp,#4]            ;456
000328  2014              MOVS     r0,#0x14              ;457
00032a  f8ad0008          STRH     r0,[sp,#8]            ;457
00032e  a909              ADD      r1,sp,#0x24           ;458
000330  a80e              ADD      r0,sp,#0x38           ;458
000332  f7fffffe          BL       pnp_id_encode
000336  f8ad000a          STRH     r0,[sp,#0xa]          ;458
00033a  a809              ADD      r0,sp,#0x24           ;459
00033c  9003              STR      r0,[sp,#0xc]          ;459
00033e  f89d0011          LDRB     r0,[sp,#0x11]         ;460
000342  f0200002          BIC      r0,r0,#2              ;460
000346  1c80              ADDS     r0,r0,#2              ;460
000348  f88d0011          STRB     r0,[sp,#0x11]         ;460
00034c  2001              MOVS     r0,#1                 ;461
00034e  f88d0015          STRB     r0,[sp,#0x15]         ;461
000352  f88d0010          STRB     r0,[sp,#0x10]         ;463
000356  88a0              LDRH     r0,[r4,#4]            ;465
000358  f1040246          ADD      r2,r4,#0x46           ;465
00035c  a901              ADD      r1,sp,#4              ;465
00035e  f7fffffe          BL       characteristic_add
000362  4605              MOV      r5,r0                 ;465
000364  b10d              CBZ      r5,|L6.874|
000366  4628              MOV      r0,r5                 ;468
000368  e665              B        |L6.54|
                  |L6.874|
00036a  2000              MOVS     r0,#0                 ;471
00036c  e663              B        |L6.54|
;;;473    
                          ENDP


                          AREA ||i.ble_dis_manufacturer_name_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_manufacturer_name_string_set PROC
;;;474    /**@brief Function for setting the Manufacturer Name String. */
;;;475    uint32_t ble_dis_manufacturer_name_string_set(ble_dis_t * p_dis, ble_dis_manufacturer_name_string_t * p_manufacturer_name_string)
000000  b530              PUSH     {r4,r5,lr}
;;;476    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;477        ble_gatts_value_t gatts_value;
;;;478        uint8_t encoded_value[MAX_MANUFACTURER_NAME_STRING_LEN];
;;;479    
;;;480        // Initialize value struct.
;;;481        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;482    
;;;483        gatts_value.len     = manufacturer_name_string_encode(p_manufacturer_name_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       manufacturer_name_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;484        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;485        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;486    
;;;487        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->manufacturer_name_string_handles.value_handle, &gatts_value);
000024  88e1              LDRH     r1,[r4,#6]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;488    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;489    
                          ENDP


                          AREA ||i.ble_dis_model_number_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_model_number_string_set PROC
;;;490    /**@brief Function for setting the Model Number String. */
;;;491    uint32_t ble_dis_model_number_string_set(ble_dis_t * p_dis, ble_dis_model_number_string_t * p_model_number_string)
000000  b530              PUSH     {r4,r5,lr}
;;;492    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;493        ble_gatts_value_t gatts_value;
;;;494        uint8_t encoded_value[MAX_MODEL_NUMBER_STRING_LEN];
;;;495    
;;;496        // Initialize value struct.
;;;497        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;498    
;;;499        gatts_value.len     = model_number_string_encode(p_model_number_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       model_number_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;500        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;501        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;502    
;;;503        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->model_number_string_handles.value_handle, &gatts_value);
000024  89e1              LDRH     r1,[r4,#0xe]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;504    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;505    
                          ENDP


                          AREA ||i.ble_dis_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_dis_on_ble_evt PROC
;;;231     */
;;;232    void ble_dis_on_ble_evt(ble_dis_t * p_dis, ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;233    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;234        switch (p_ble_evt->header.evt_id)
000006  8820              LDRH     r0,[r4,#0]
000008  2810              CMP      r0,#0x10
00000a  d006              BEQ      |L9.26|
00000c  2811              CMP      r0,#0x11
00000e  d009              BEQ      |L9.36|
000010  2850              CMP      r0,#0x50
000012  d00c              BEQ      |L9.46|
000014  2851              CMP      r0,#0x51
000016  d114              BNE      |L9.66|
000018  e00e              B        |L9.56|
                  |L9.26|
;;;235        {
;;;236            case BLE_GAP_EVT_CONNECTED:
;;;237                on_connect(p_dis, p_ble_evt);
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       on_connect
;;;238                break;
000022  e00f              B        |L9.68|
                  |L9.36|
;;;239            case BLE_GAP_EVT_DISCONNECTED:
;;;240                on_disconnect(p_dis, p_ble_evt);
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       on_disconnect
;;;241                break;
00002c  e00a              B        |L9.68|
                  |L9.46|
;;;242            case BLE_GATTS_EVT_WRITE:
;;;243                on_write(p_dis, &p_ble_evt->evt.gatts_evt.params.write);
00002e  1da1              ADDS     r1,r4,#6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       on_write
;;;244                break;
000036  e005              B        |L9.68|
                  |L9.56|
;;;245             case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;246                on_rw_authorize_request(p_dis, &p_ble_evt->evt.gatts_evt);
000038  1d21              ADDS     r1,r4,#4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       on_rw_authorize_request
;;;247                break;
000040  e000              B        |L9.68|
                  |L9.66|
;;;248            default:
;;;249                //No implementation needed.
;;;250                break;
000042  bf00              NOP      
                  |L9.68|
000044  bf00              NOP                            ;238
;;;251        }
;;;252    }
000046  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP


                          AREA ||i.ble_dis_pnp_id_set||, CODE, READONLY, ALIGN=1

                  ble_dis_pnp_id_set PROC
;;;602    /**@brief Function for setting the PnP ID. */
;;;603    uint32_t ble_dis_pnp_id_set(ble_dis_t * p_dis, ble_dis_pnp_id_t * p_pnp_id)
000000  b530              PUSH     {r4,r5,lr}
;;;604    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;605        ble_gatts_value_t gatts_value;
;;;606        uint8_t encoded_value[MAX_PNP_ID_LEN];
;;;607    
;;;608        // Initialize value struct.
;;;609        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;610    
;;;611        gatts_value.len     = pnp_id_encode(p_pnp_id, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       pnp_id_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;612        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;613        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;614    
;;;615        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->pnp_id_handles.value_handle, &gatts_value);
000024  f8b41046          LDRH     r1,[r4,#0x46]
000028  f8b4004e          LDRH     r0,[r4,#0x4e]
00002c  aa05              ADD      r2,sp,#0x14
00002e  dfa4              SVC      #0xa4
;;;616    }
000030  b007              ADD      sp,sp,#0x1c
000032  bd30              POP      {r4,r5,pc}
;;;617    
                          ENDP


                          AREA ||i.ble_dis_serial_number_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_serial_number_string_set PROC
;;;506    /**@brief Function for setting the Serial Number String. */
;;;507    uint32_t ble_dis_serial_number_string_set(ble_dis_t * p_dis, ble_dis_serial_number_string_t * p_serial_number_string)
000000  b530              PUSH     {r4,r5,lr}
;;;508    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;509        ble_gatts_value_t gatts_value;
;;;510        uint8_t encoded_value[MAX_SERIAL_NUMBER_STRING_LEN];
;;;511    
;;;512        // Initialize value struct.
;;;513        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;514    
;;;515        gatts_value.len     = serial_number_string_encode(p_serial_number_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       serial_number_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;516        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;517        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;518    
;;;519        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->serial_number_string_handles.value_handle, &gatts_value);
000024  8ae1              LDRH     r1,[r4,#0x16]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;520    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;521    
                          ENDP


                          AREA ||i.ble_dis_software_revision_string_set||, CODE, READONLY, ALIGN=1

                  ble_dis_software_revision_string_set PROC
;;;554    /**@brief Function for setting the Software Revision String. */
;;;555    uint32_t ble_dis_software_revision_string_set(ble_dis_t * p_dis, ble_dis_software_revision_string_t * p_software_revision_string)
000000  b530              PUSH     {r4,r5,lr}
;;;556    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;557        ble_gatts_value_t gatts_value;
;;;558        uint8_t encoded_value[MAX_SOFTWARE_REVISION_STRING_LEN];
;;;559    
;;;560        // Initialize value struct.
;;;561        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;562    
;;;563        gatts_value.len     = software_revision_string_encode(p_software_revision_string, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       software_revision_string_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;564        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;565        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;566    
;;;567        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->software_revision_string_handles.value_handle, &gatts_value);
000024  8de1              LDRH     r1,[r4,#0x2e]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;568    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;569    
                          ENDP


                          AREA ||i.ble_dis_system_id_set||, CODE, READONLY, ALIGN=1

                  ble_dis_system_id_set PROC
;;;570    /**@brief Function for setting the System ID. */
;;;571    uint32_t ble_dis_system_id_set(ble_dis_t * p_dis, ble_dis_system_id_t * p_system_id)
000000  b530              PUSH     {r4,r5,lr}
;;;572    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;573        ble_gatts_value_t gatts_value;
;;;574        uint8_t encoded_value[MAX_SYSTEM_ID_LEN];
;;;575    
;;;576        // Initialize value struct.
;;;577        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;578    
;;;579        gatts_value.len     = system_id_encode(p_system_id, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       system_id_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;580        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;581        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;582    
;;;583        return sd_ble_gatts_value_set(p_dis->conn_handle, p_dis->system_id_handles.value_handle, &gatts_value);
000024  8ee1              LDRH     r1,[r4,#0x36]
000026  f8b4004e          LDRH     r0,[r4,#0x4e]
00002a  aa05              ADD      r2,sp,#0x14
00002c  dfa4              SVC      #0xa4
;;;584    }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd30              POP      {r4,r5,pc}
;;;585    
                          ENDP


                          AREA ||i.firmware_revision_string_encode||, CODE, READONLY, ALIGN=1

                  firmware_revision_string_encode PROC
;;;86      */
;;;87     static uint8_t firmware_revision_string_encode(ble_dis_firmware_revision_string_t * p_firmware_revision_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;88     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;89         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;90         len += bds_ble_srv_utf8_str_encode(&p_firmware_revision_string->firmware_revision, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;91         return len;
000014  4620              MOV      r0,r4
;;;92     }
000016  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP


                          AREA ||i.hardware_revision_string_encode||, CODE, READONLY, ALIGN=1

                  hardware_revision_string_encode PROC
;;;72      */
;;;73     static uint8_t hardware_revision_string_encode(ble_dis_hardware_revision_string_t * p_hardware_revision_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;75         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;76         len += bds_ble_srv_utf8_str_encode(&p_hardware_revision_string->hardware_revision, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;77         return len;
000014  4620              MOV      r0,r4
;;;78     }
000016  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP


                          AREA ||i.ieee_11073_20601_regulatory_certification_data_list_encode||, CODE, READONLY, ALIGN=1

                  ieee_11073_20601_regulatory_certification_data_list_encode PROC
;;;129     */
;;;130    static uint8_t ieee_11073_20601_regulatory_certification_data_list_encode(ble_dis_ieee_11073_20601_regulatory_certification_data_list_t * p_ieee_11073_20601_regulatory_certification_data_list, uint8_t * encoded_buffer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;132        uint8_t len = 0; 
000008  2500              MOVS     r5,#0
;;;133        len += bds_regcertdatalist_encode(&p_ieee_11073_20601_regulatory_certification_data_list->data, &encoded_buffer[len]); 
00000a  1977              ADDS     r7,r6,r5
00000c  7922              LDRB     r2,[r4,#4]
00000e  4638              MOV      r0,r7
000010  6821              LDR      r1,[r4,#0]
000012  f7fffffe          BL       __aeabi_memcpy
000016  7920              LDRB     r0,[r4,#4]
000018  4428              ADD      r0,r0,r5
00001a  b2c5              UXTB     r5,r0
;;;134        return len;
00001c  4628              MOV      r0,r5
;;;135    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP


                          AREA ||i.manufacturer_name_string_encode||, CODE, READONLY, ALIGN=1

                  manufacturer_name_string_encode PROC
;;;30      */
;;;31     static uint8_t manufacturer_name_string_encode(ble_dis_manufacturer_name_string_t * p_manufacturer_name_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;33         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;34         len += bds_ble_srv_utf8_str_encode(&p_manufacturer_name_string->manufacturer_name, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;35         return len;
000014  4620              MOV      r0,r4
;;;36     }
000016  bd70              POP      {r4-r6,pc}
;;;37     
                          ENDP


                          AREA ||i.model_number_string_encode||, CODE, READONLY, ALIGN=1

                  model_number_string_encode PROC
;;;44      */
;;;45     static uint8_t model_number_string_encode(ble_dis_model_number_string_t * p_model_number_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;46     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;47         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;48         len += bds_ble_srv_utf8_str_encode(&p_model_number_string->model_number, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;49         return len;
000014  4620              MOV      r0,r4
;;;50     }
000016  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP


                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=1

                  on_connect PROC
;;;174     */
;;;175    static void on_connect(ble_dis_t * p_dis, ble_evt_t * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;176    {
;;;177        p_dis->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  f8a0204e          STRH     r2,[r0,#0x4e]
;;;178    }
000006  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=1

                  on_disconnect PROC
;;;184     */
;;;185    static void on_disconnect(ble_dis_t * p_dis, ble_evt_t * p_ble_evt)
000000  f64f72ff          MOV      r2,#0xffff
;;;186    {
;;;187        UNUSED_PARAMETER(p_ble_evt);
;;;188        p_dis->conn_handle = BLE_CONN_HANDLE_INVALID;
000004  f8a0204e          STRH     r2,[r0,#0x4e]
;;;189    }
000008  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.on_rw_authorize_request||, CODE, READONLY, ALIGN=1

                  on_rw_authorize_request PROC
;;;208     */
;;;209    static void on_rw_authorize_request(ble_dis_t * p_dis, ble_gatts_evt_t * p_gatts_evt)
000000  4602              MOV      r2,r0
;;;210    {
;;;211        ble_gatts_evt_rw_authorize_request_t * p_auth_req = &p_gatts_evt->params.authorize_request;
000002  1c88              ADDS     r0,r1,#2
;;;212        if (p_auth_req->type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
000004  7803              LDRB     r3,[r0,#0]
000006  2b02              CMP      r3,#2
000008  d100              BNE      |L21.12|
;;;213        {
;;;214            if (   (p_gatts_evt->params.authorize_request.request.write.op
00000a  bf00              NOP      
                  |L21.12|
;;;215                    != BLE_GATTS_OP_PREP_WRITE_REQ)
;;;216                && (p_gatts_evt->params.authorize_request.request.write.op
;;;217                    != BLE_GATTS_OP_EXEC_WRITE_REQ_NOW)
;;;218                && (p_gatts_evt->params.authorize_request.request.write.op
;;;219                    != BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL)
;;;220               )
;;;221            {
;;;222            
;;;223            }
;;;224        }
;;;225    }
00000c  4770              BX       lr
;;;226    
                          ENDP


                          AREA ||i.on_write||, CODE, READONLY, ALIGN=1

                  on_write PROC
;;;195     */
;;;196    static void on_write(ble_dis_t * p_dis, ble_gatts_evt_write_t * p_ble_evt)
000000  4770              BX       lr
;;;197    {
;;;198        
;;;199    }
;;;200    
                          ENDP


                          AREA ||i.pnp_id_encode||, CODE, READONLY, ALIGN=1

                  pnp_id_encode PROC
;;;158     */
;;;159    static uint8_t pnp_id_encode(ble_dis_pnp_id_t * p_pnp_id, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;160    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;161        uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;162        len += pnp_id_vendor_id_source_encode(&p_pnp_id->vendor_id_source, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       pnp_id_vendor_id_source_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;163        len += bds_uint16_encode(&p_pnp_id->vendor_id, &encoded_buffer[len]); 
000014  1929              ADDS     r1,r5,r4
000016  1cb0              ADDS     r0,r6,#2
000018  f7fffffe          BL       bds_uint16_encode
00001c  4420              ADD      r0,r0,r4
00001e  b2c4              UXTB     r4,r0
;;;164        len += bds_uint16_encode(&p_pnp_id->product_id, &encoded_buffer[len]); 
000020  1929              ADDS     r1,r5,r4
000022  1d30              ADDS     r0,r6,#4
000024  f7fffffe          BL       bds_uint16_encode
000028  4420              ADD      r0,r0,r4
00002a  b2c4              UXTB     r4,r0
;;;165        len += bds_uint16_encode(&p_pnp_id->product_version, &encoded_buffer[len]); 
00002c  1929              ADDS     r1,r5,r4
00002e  1db0              ADDS     r0,r6,#6
000030  f7fffffe          BL       bds_uint16_encode
000034  4420              ADD      r0,r0,r4
000036  b2c4              UXTB     r4,r0
;;;166        return len;
000038  4620              MOV      r0,r4
;;;167    }
00003a  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP


                          AREA ||i.pnp_id_vendor_id_source_encode||, CODE, READONLY, ALIGN=1

                  pnp_id_vendor_id_source_encode PROC
;;;143     */
;;;144    static uint8_t pnp_id_vendor_id_source_encode(pnp_id_vendor_id_source_t * p_vendor_id_source, uint8_t * encoded_buffer)
000000  4602              MOV      r2,r0
;;;145    {
;;;146        uint8_t vendor_id_source;
;;;147        vendor_id_source = p_vendor_id_source->vendor_id_source;
000002  7813              LDRB     r3,[r2,#0]
;;;148        encoded_buffer[0] = vendor_id_source;
000004  700b              STRB     r3,[r1,#0]
;;;149        return 1; 
000006  2001              MOVS     r0,#1
;;;150    }
000008  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.serial_number_string_encode||, CODE, READONLY, ALIGN=1

                  serial_number_string_encode PROC
;;;58      */
;;;59     static uint8_t serial_number_string_encode(ble_dis_serial_number_string_t * p_serial_number_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;61         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;62         len += bds_ble_srv_utf8_str_encode(&p_serial_number_string->serial_number, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;63         return len;
000014  4620              MOV      r0,r4
;;;64     }
000016  bd70              POP      {r4-r6,pc}
;;;65     
                          ENDP


                          AREA ||i.software_revision_string_encode||, CODE, READONLY, ALIGN=1

                  software_revision_string_encode PROC
;;;100     */
;;;101    static uint8_t software_revision_string_encode(ble_dis_software_revision_string_t * p_software_revision_string, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;103        uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;104        len += bds_ble_srv_utf8_str_encode(&p_software_revision_string->software_revision, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_ble_srv_utf8_str_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;105        return len;
000014  4620              MOV      r0,r4
;;;106    }
000016  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.system_id_encode||, CODE, READONLY, ALIGN=1

                  system_id_encode PROC
;;;114     */
;;;115    static uint8_t system_id_encode(ble_dis_system_id_t * p_system_id, uint8_t * encoded_buffer)
000000  b5f0              PUSH     {r4-r7,lr}
;;;116    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;117        uint8_t len = 0; 
000006  2100              MOVS     r1,#0
;;;118        len += bds_uint40_encode(&p_system_id->manufacturer_identifier, &encoded_buffer[len]); 
000008  1858              ADDS     r0,r3,r1
00000a  7814              LDRB     r4,[r2,#0]
00000c  7004              STRB     r4,[r0,#0]
00000e  8815              LDRH     r5,[r2,#0]
000010  7914              LDRB     r4,[r2,#4]
000012  f44f467f          MOV      r6,#0xff00
000016  4035              ANDS     r5,r5,r6
000018  2400              MOVS     r4,#0
00001a  0626              LSLS     r6,r4,#24
00001c  ea462415          ORR      r4,r6,r5,LSR #8
000020  7044              STRB     r4,[r0,#1]
000022  7914              LDRB     r4,[r2,#4]
000024  f44f067f          MOV      r6,#0xff0000
000028  6815              LDR      r5,[r2,#0]
00002a  4035              ANDS     r5,r5,r6
00002c  2400              MOVS     r4,#0
00002e  0426              LSLS     r6,r4,#16
000030  ea464415          ORR      r4,r6,r5,LSR #16
000034  7084              STRB     r4,[r0,#2]
000036  7914              LDRB     r4,[r2,#4]
000038  f04f477f          MOV      r7,#0xff000000
00003c  6815              LDR      r5,[r2,#0]
00003e  403d              ANDS     r5,r5,r7
000040  2400              MOVS     r4,#0
000042  0226              LSLS     r6,r4,#8
000044  ea466415          ORR      r4,r6,r5,LSR #24
000048  70c4              STRB     r4,[r0,#3]
00004a  7914              LDRB     r4,[r2,#4]
00004c  7104              STRB     r4,[r0,#4]
00004e  2405              MOVS     r4,#5
000050  4421              ADD      r1,r1,r4
;;;119        len += bds_uint24_encode(&p_system_id->organizationally_unique_identifier, &encoded_buffer[len]); 
000052  1858              ADDS     r0,r3,r1
000054  7a14              LDRB     r4,[r2,#8]
000056  7004              STRB     r4,[r0,#0]
000058  8914              LDRH     r4,[r2,#8]
00005a  0a24              LSRS     r4,r4,#8
00005c  7044              STRB     r4,[r0,#1]
00005e  6894              LDR      r4,[r2,#8]
000060  0c24              LSRS     r4,r4,#16
000062  7084              STRB     r4,[r0,#2]
000064  2403              MOVS     r4,#3
000066  4421              ADD      r1,r1,r4
;;;120        return len;
000068  4608              MOV      r0,r1
;;;121    }
00006a  bdf0              POP      {r4-r7,pc}
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ble_dis.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dis_c_a78c7d86____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_dis_c_a78c7d86____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dis_c_a78c7d86____REVSH|
#line 402
|__asm___9_ble_dis_c_a78c7d86____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dis_c_a78c7d86____RRX|
#line 587
|__asm___9_ble_dis_c_a78c7d86____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
