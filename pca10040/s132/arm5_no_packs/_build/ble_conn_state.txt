; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_conn_state.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_conn_state.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_conn_state.crf ..\..\..\..\..\..\components\ble\common\ble_conn_state.c]
                          THUMB

                          AREA ||i.bcs_internal_state_reset||, CODE, READONLY, ALIGN=2

                  bcs_internal_state_reset PROC
;;;76      */
;;;77     void bcs_internal_state_reset(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         memset( &m_bcs, 0, sizeof(ble_conn_state_t) );
000002  2134              MOVS     r1,#0x34
000004  4801              LDR      r0,|L1.12|
000006  f7fffffe          BL       __aeabi_memclr4
;;;80     }
00000a  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L1.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_central_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_central_handles PROC
;;;316    
;;;317    sdk_mapped_flags_key_list_t ble_conn_state_central_handles(void)
000000  b510              PUSH     {r4,lr}
;;;318    {
000002  4604              MOV      r4,r0
;;;319        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L2.28|
000006  7d80              LDRB     r0,[r0,#0x16]
000008  4904              LDR      r1,|L2.28|
00000a  7d49              LDRB     r1,[r1,#0x15]
00000c  ea000201          AND      r2,r0,r1
000010  4902              LDR      r1,|L2.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;320                                            (m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;321    }
00001a  bd10              POP      {r4,pc}
;;;322    
                          ENDP

                  |L2.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_conn_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_conn_handles PROC
;;;310    
;;;311    sdk_mapped_flags_key_list_t ble_conn_state_conn_handles(void)
000000  b510              PUSH     {r4,lr}
;;;312    {
000002  4604              MOV      r4,r0
;;;313        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags);
000004  4803              LDR      r0,|L3.20|
000006  7d02              LDRB     r2,[r0,#0x14]  ; m_bcs
000008  1d01              ADDS     r1,r0,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;314    }
000010  bd10              POP      {r4,pc}
;;;315    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_encrypted||, CODE, READONLY, ALIGN=2

                  ble_conn_state_encrypted PROC
;;;276    
;;;277    bool ble_conn_state_encrypted(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;278    {
000002  4604              MOV      r4,r0
;;;279        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L4.20|
000006  7dc1              LDRB     r1,[r0,#0x17]
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;280                                           m_bcs.flags.encrypted_flags,
;;;281                                           conn_handle);
;;;282    }
000010  bd10              POP      {r4,pc}
;;;283    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_init||, CODE, READONLY, ALIGN=1

                  ble_conn_state_init PROC
;;;180    
;;;181    void ble_conn_state_init(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183        bcs_internal_state_reset();
000002  f7fffffe          BL       bcs_internal_state_reset
;;;184    }
000006  bd10              POP      {r4,pc}
;;;185    
                          ENDP


                          AREA ||i.ble_conn_state_mitm_protected||, CODE, READONLY, ALIGN=2

                  ble_conn_state_mitm_protected PROC
;;;284    
;;;285    bool ble_conn_state_mitm_protected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L6.20|
000006  7e01              LDRB     r1,[r0,#0x18]
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;288                                           m_bcs.flags.mitm_protected_flags,
;;;289                                           conn_handle);
;;;290    }
000010  bd10              POP      {r4,pc}
;;;291    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_centrals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_centrals PROC
;;;298    
;;;299    uint32_t ble_conn_state_n_centrals(void)
000000  b510              PUSH     {r4,lr}
;;;300    {
;;;301        return sdk_mapped_flags_n_flags_set((m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L7.20|
000004  7d89              LDRB     r1,[r1,#0x16]
000006  4a03              LDR      r2,|L7.20|
000008  7d52              LDRB     r2,[r2,#0x15]
00000a  ea010002          AND      r0,r1,r2
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;302    }
000012  bd10              POP      {r4,pc}
;;;303    
                          ENDP

                  |L7.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_connections||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_connections PROC
;;;292    
;;;293    uint32_t ble_conn_state_n_connections(void)
000000  b510              PUSH     {r4,lr}
;;;294    {
;;;295        return sdk_mapped_flags_n_flags_set(m_bcs.flags.connected_flags);
000002  4902              LDR      r1,|L8.12|
000004  7d48              LDRB     r0,[r1,#0x15]
000006  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;296    }
00000a  bd10              POP      {r4,pc}
;;;297    
                          ENDP

                  |L8.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_peripherals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_peripherals PROC
;;;304    
;;;305    uint32_t ble_conn_state_n_peripherals(void)
000000  b510              PUSH     {r4,lr}
;;;306    {
;;;307        return sdk_mapped_flags_n_flags_set((~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L9.20|
000004  7d49              LDRB     r1,[r1,#0x15]
000006  4a03              LDR      r2,|L9.20|
000008  7d92              LDRB     r2,[r2,#0x16]
00000a  ea210002          BIC      r0,r1,r2
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;308    }
000012  bd10              POP      {r4,pc}
;;;309    
                          ENDP

                  |L9.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_on_ble_evt||, CODE, READONLY, ALIGN=2

                  ble_conn_state_on_ble_evt PROC
;;;186    
;;;187    void ble_conn_state_on_ble_evt(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L10.20|
00000a  2811              CMP      r0,#0x11
00000c  d01d              BEQ      |L10.74|
00000e  281a              CMP      r0,#0x1a
000010  d140              BNE      |L10.148|
000012  e01e              B        |L10.82|
                  |L10.20|
;;;190        {
;;;191            case BLE_GAP_EVT_CONNECTED:
;;;192                record_purge_disconnected();
000014  f7fffffe          BL       record_purge_disconnected
;;;193    
;;;194                if ( !record_activate(p_ble_evt->evt.gap_evt.conn_handle) )
000018  88a0              LDRH     r0,[r4,#4]
00001a  f7fffffe          BL       record_activate
00001e  b920              CBNZ     r0,|L10.42|
;;;195                {
;;;196                    // No more records available. Should not happen.
;;;197                    APP_ERROR_HANDLER(NRF_ERROR_NO_MEM);
000020  bf00              NOP      
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       app_error_handler_bare
000028  e00e              B        |L10.72|
                  |L10.42|
;;;198                }
;;;199                else
;;;200                {
;;;201                    bool is_central =
00002a  7be0              LDRB     r0,[r4,#0xf]
00002c  2802              CMP      r0,#2
00002e  d101              BNE      |L10.52|
000030  2001              MOVS     r0,#1
000032  e000              B        |L10.54|
                  |L10.52|
000034  2000              MOVS     r0,#0
                  |L10.54|
000036  4605              MOV      r5,r0
;;;202                            (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_CENTRAL);
;;;203    
;;;204                    sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000038  88a2              LDRH     r2,[r4,#4]
00003a  462b              MOV      r3,r5
00003c  4916              LDR      r1,|L10.152|
00003e  f1a10012          SUB      r0,r1,#0x12
000042  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;205                                                  &m_bcs.flags.central_flags,
;;;206                                                   p_ble_evt->evt.gap_evt.conn_handle,
;;;207                                                   is_central);
;;;208                }
000046  bf00              NOP      
                  |L10.72|
;;;209    
;;;210                break;
000048  e024              B        |L10.148|
                  |L10.74|
;;;211    
;;;212            case BLE_GAP_EVT_DISCONNECTED:
;;;213                record_set_disconnected(p_ble_evt->evt.gap_evt.conn_handle);
00004a  88a0              LDRH     r0,[r4,#4]
00004c  f7fffffe          BL       record_set_disconnected
;;;214                break;
000050  e020              B        |L10.148|
                  |L10.82|
;;;215    
;;;216            case BLE_GAP_EVT_CONN_SEC_UPDATE:
;;;217                sdk_mapped_flags_update_by_key(
000052  7a20              LDRB     r0,[r4,#8]
000054  2101              MOVS     r1,#1
000056  ebb11f10          CMP      r1,r0,LSR #4
00005a  da01              BGE      |L10.96|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L10.98|
                  |L10.96|
000060  2000              MOVS     r0,#0
                  |L10.98|
000062  4603              MOV      r3,r0
000064  88a2              LDRH     r2,[r4,#4]
000066  490c              LDR      r1,|L10.152|
000068  1c49              ADDS     r1,r1,#1
00006a  f1a10013          SUB      r0,r1,#0x13
00006e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;218                              m_bcs.valid_conn_handles,
;;;219                             &m_bcs.flags.encrypted_flags,
;;;220                              p_ble_evt->evt.gap_evt.conn_handle,
;;;221                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 1));
;;;222                sdk_mapped_flags_update_by_key(
000072  7a20              LDRB     r0,[r4,#8]
000074  2102              MOVS     r1,#2
000076  ebb11f10          CMP      r1,r0,LSR #4
00007a  da01              BGE      |L10.128|
00007c  2001              MOVS     r0,#1
00007e  e000              B        |L10.130|
                  |L10.128|
000080  2000              MOVS     r0,#0
                  |L10.130|
000082  4603              MOV      r3,r0
000084  88a2              LDRH     r2,[r4,#4]
000086  4904              LDR      r1,|L10.152|
000088  1c89              ADDS     r1,r1,#2
00008a  f1a10014          SUB      r0,r1,#0x14
00008e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;223                              m_bcs.valid_conn_handles,
;;;224                             &m_bcs.flags.mitm_protected_flags,
;;;225                              p_ble_evt->evt.gap_evt.conn_handle,
;;;226                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 2));
;;;227                break;
000092  bf00              NOP      
                  |L10.148|
000094  bf00              NOP                            ;210
;;;228        }
;;;229    }
000096  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

                  |L10.152|
                          DCD      m_bcs+0x16

                          AREA ||i.ble_conn_state_periph_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_periph_handles PROC
;;;323    
;;;324    sdk_mapped_flags_key_list_t ble_conn_state_periph_handles(void)
000000  b510              PUSH     {r4,lr}
;;;325    {
000002  4604              MOV      r4,r0
;;;326        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L11.28|
000006  7d40              LDRB     r0,[r0,#0x15]
000008  4904              LDR      r1,|L11.28|
00000a  7d89              LDRB     r1,[r1,#0x16]
00000c  ea200201          BIC      r2,r0,r1
000010  4902              LDR      r1,|L11.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;327                                            (~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;328    }
00001a  bd10              POP      {r4,pc}
;;;329    
                          ENDP

                  |L11.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_role||, CODE, READONLY, ALIGN=2

                  ble_conn_state_role PROC
;;;239    
;;;240    uint8_t ble_conn_state_role(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4604              MOV      r4,r0
;;;242        uint8_t role = BLE_GAP_ROLE_INVALID;
000004  2500              MOVS     r5,#0
;;;243    
;;;244        if ( sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags, conn_handle) )
000006  480b              LDR      r0,|L12.52|
000008  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
00000a  4622              MOV      r2,r4
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       sdk_mapped_flags_get_by_key
000012  b160              CBZ      r0,|L12.46|
;;;245        {
;;;246            bool central = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000014  4807              LDR      r0,|L12.52|
000016  7d81              LDRB     r1,[r0,#0x16]
000018  4622              MOV      r2,r4
00001a  1d00              ADDS     r0,r0,#4
00001c  f7fffffe          BL       sdk_mapped_flags_get_by_key
000020  4606              MOV      r6,r0
;;;247                                                       m_bcs.flags.central_flags,
;;;248                                                       conn_handle);
;;;249    
;;;250            role = central ? BLE_GAP_ROLE_CENTRAL : BLE_GAP_ROLE_PERIPH;
000022  b10e              CBZ      r6,|L12.40|
000024  2002              MOVS     r0,#2
000026  e000              B        |L12.42|
                  |L12.40|
000028  2001              MOVS     r0,#1
                  |L12.42|
00002a  4605              MOV      r5,r0
;;;251        }
00002c  bf00              NOP      
                  |L12.46|
;;;252    
;;;253        return role;
00002e  4628              MOV      r0,r5
;;;254    }
000030  bd70              POP      {r4-r6,pc}
;;;255    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_status||, CODE, READONLY, ALIGN=2

                  ble_conn_state_status PROC
;;;256    
;;;257    ble_conn_state_status_t ble_conn_state_status(uint16_t conn_handle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;258    {
000004  4604              MOV      r4,r0
;;;259        ble_conn_state_status_t conn_status = BLE_CONN_STATUS_INVALID;
000006  2500              MOVS     r5,#0
;;;260        bool valid = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000008  480b              LDR      r0,|L13.56|
00000a  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
00000c  4622              MOV      r2,r4
00000e  1d00              ADDS     r0,r0,#4
000010  f7fffffe          BL       sdk_mapped_flags_get_by_key
000014  4606              MOV      r6,r0
;;;261                                                 m_bcs.flags.valid_flags,
;;;262                                                 conn_handle);
;;;263    
;;;264        if (valid)
000016  b166              CBZ      r6,|L13.50|
;;;265        {
;;;266            bool connected = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000018  4807              LDR      r0,|L13.56|
00001a  7d41              LDRB     r1,[r0,#0x15]
00001c  4622              MOV      r2,r4
00001e  1d00              ADDS     r0,r0,#4
000020  f7fffffe          BL       sdk_mapped_flags_get_by_key
000024  4607              MOV      r7,r0
;;;267                                                         m_bcs.flags.connected_flags,
;;;268                                                         conn_handle);
;;;269    
;;;270            conn_status = connected ? BLE_CONN_STATUS_CONNECTED : BLE_CONN_STATUS_DISCONNECTED;
000026  b10f              CBZ      r7,|L13.44|
000028  2002              MOVS     r0,#2
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  2001              MOVS     r0,#1
                  |L13.46|
00002e  4605              MOV      r5,r0
;;;271        }
000030  bf00              NOP      
                  |L13.50|
;;;272    
;;;273        return conn_status;
000032  4628              MOV      r0,r5
;;;274    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;275    
                          ENDP

                  |L13.56|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_user_flag_acquire||, CODE, READONLY, ALIGN=1

                  ble_conn_state_user_flag_acquire PROC
;;;330    
;;;331    ble_conn_state_user_flag_id_t ble_conn_state_user_flag_acquire(void)
000000  b510              PUSH     {r4,lr}
;;;332    {
;;;333        for (ble_conn_state_user_flag_id_t i = BLE_CONN_STATE_USER_FLAG0;
000002  2400              MOVS     r4,#0
000004  e00a              B        |L14.28|
                  |L14.6|
;;;334                                           i < BLE_CONN_STATE_N_USER_FLAGS;
;;;335                                           i++)
;;;336        {
;;;337            if ( !user_flag_is_acquired(i) )
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  b920              CBNZ     r0,|L14.24|
;;;338            {
;;;339                user_flag_acquire(i);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       user_flag_acquire
;;;340                return i;
000014  4620              MOV      r0,r4
                  |L14.22|
;;;341            }
;;;342        }
;;;343    
;;;344        return BLE_CONN_STATE_USER_FLAG_INVALID;
;;;345    }
000016  bd10              POP      {r4,pc}
                  |L14.24|
000018  1c60              ADDS     r0,r4,#1              ;335
00001a  b2c4              UXTB     r4,r0                 ;335
                  |L14.28|
00001c  2c18              CMP      r4,#0x18              ;334
00001e  dbf2              BLT      |L14.6|
000020  2018              MOVS     r0,#0x18              ;344
000022  e7f8              B        |L14.22|
;;;346    
                          ENDP


                          AREA ||i.ble_conn_state_user_flag_collection||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_collection PROC
;;;376    
;;;377    sdk_mapped_flags_t ble_conn_state_user_flag_collection(ble_conn_state_user_flag_id_t flag_id)
000000  b510              PUSH     {r4,lr}
;;;378    {
000002  4604              MOV      r4,r0
;;;379        if ( user_flag_is_acquired(flag_id) )
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       user_flag_is_acquired
00000a  b110              CBZ      r0,|L15.18|
;;;380        {
;;;381            return m_bcs.flags.user_flags[flag_id];
00000c  4802              LDR      r0,|L15.24|
00000e  5d00              LDRB     r0,[r0,r4]
                  |L15.16|
;;;382        }
;;;383        else
;;;384        {
;;;385            return 0;
;;;386        }
;;;387    }
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2000              MOVS     r0,#0                 ;385
000014  e7fc              B        |L15.16|
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_user_flag_get||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_get PROC
;;;347    
;;;348    bool ble_conn_state_user_flag_get(uint16_t conn_handle, ble_conn_state_user_flag_id_t flag_id)
000000  b570              PUSH     {r4-r6,lr}
;;;349    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;350        if (user_flag_is_acquired(flag_id))
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  b130              CBZ      r0,|L16.28|
;;;351        {
;;;352            return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
00000e  4804              LDR      r0,|L16.32|
000010  5d01              LDRB     r1,[r0,r4]
000012  462a              MOV      r2,r5
000014  3815              SUBS     r0,r0,#0x15
000016  f7fffffe          BL       sdk_mapped_flags_get_by_key
                  |L16.26|
;;;353                                               m_bcs.flags.user_flags[flag_id],
;;;354                                               conn_handle);
;;;355        }
;;;356        else
;;;357        {
;;;358            return false;
;;;359        }
;;;360    }
00001a  bd70              POP      {r4-r6,pc}
                  |L16.28|
00001c  2000              MOVS     r0,#0                 ;358
00001e  e7fc              B        |L16.26|
;;;361    
                          ENDP

                  |L16.32|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_user_flag_set||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_set PROC
;;;362    
;;;363    void ble_conn_state_user_flag_set(uint16_t                      conn_handle,
000000  b570              PUSH     {r4-r6,lr}
;;;364                                      ble_conn_state_user_flag_id_t flag_id,
;;;365                                      bool                          value)
;;;366    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;367        if (user_flag_is_acquired(flag_id))
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       user_flag_is_acquired
00000e  b130              CBZ      r0,|L17.30|
;;;368        {
;;;369            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000010  4803              LDR      r0,|L17.32|
000012  1901              ADDS     r1,r0,r4
000014  4633              MOV      r3,r6
000016  462a              MOV      r2,r5
000018  3815              SUBS     r0,r0,#0x15
00001a  f7fffffe          BL       sdk_mapped_flags_update_by_key
                  |L17.30|
;;;370                                          &m_bcs.flags.user_flags[flag_id],
;;;371                                           conn_handle,
;;;372                                           value);
;;;373        }
;;;374    }
00001e  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP

                  |L17.32|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_valid||, CODE, READONLY, ALIGN=2

                  ble_conn_state_valid PROC
;;;231    
;;;232    bool ble_conn_state_valid(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;233    {
000002  4604              MOV      r4,r0
;;;234        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L18.20|
000006  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;235                                           m_bcs.flags.valid_flags,
;;;236                                           conn_handle);
;;;237    }
000010  bd10              POP      {r4,pc}
;;;238    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      m_bcs

                          AREA ||i.record_activate||, CODE, READONLY, ALIGN=2

                  record_activate PROC
;;;90      */
;;;91     static bool record_activate(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  4604              MOV      r4,r0
;;;93         uint16_t available_index = sdk_mapped_flags_first_key_index_get(~m_bcs.flags.valid_flags);
000004  4910              LDR      r1,|L19.72|
000006  7d09              LDRB     r1,[r1,#0x14]  ; m_bcs
000008  43c9              MVNS     r1,r1
00000a  b2c8              UXTB     r0,r1
00000c  f7fffffe          BL       sdk_mapped_flags_first_key_index_get
000010  4605              MOV      r5,r0
;;;94     
;;;95         if (available_index != SDK_MAPPED_FLAGS_INVALID_INDEX)
000012  f64f70ff          MOV      r0,#0xffff
000016  4285              CMP      r5,r0
000018  d013              BEQ      |L19.66|
;;;96         {
;;;97             m_bcs.valid_conn_handles[available_index] = conn_handle;
00001a  480b              LDR      r0,|L19.72|
00001c  1d00              ADDS     r0,r0,#4
00001e  f8204015          STRH     r4,[r0,r5,LSL #1]
;;;98             sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000022  2301              MOVS     r3,#1
000024  4622              MOV      r2,r4
000026  f1000111          ADD      r1,r0,#0x11
00002a  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;99                                           &m_bcs.flags.connected_flags,
;;;100                                           conn_handle,
;;;101                                           1);
;;;102            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
00002e  2301              MOVS     r3,#1
000030  4622              MOV      r2,r4
000032  4905              LDR      r1,|L19.72|
000034  3114              ADDS     r1,r1,#0x14
000036  f1a10010          SUB      r0,r1,#0x10
00003a  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;103                                          &m_bcs.flags.valid_flags,
;;;104                                           conn_handle,
;;;105                                           1);
;;;106    
;;;107            return true;
00003e  2001              MOVS     r0,#1
                  |L19.64|
;;;108        }
;;;109    
;;;110        return false;
;;;111    }
000040  bd70              POP      {r4-r6,pc}
                  |L19.66|
000042  2000              MOVS     r0,#0                 ;110
000044  e7fc              B        |L19.64|
;;;112    
                          ENDP

000046  0000              DCW      0x0000
                  |L19.72|
                          DCD      m_bcs

                          AREA ||i.record_invalidate||, CODE, READONLY, ALIGN=2

                  record_invalidate PROC
;;;117     */
;;;118    static void record_invalidate(uint16_t conn_handle)
000000  b538              PUSH     {r3-r5,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120        sdk_mapped_flags_bulk_update_by_key(m_bcs.valid_conn_handles,
000004  2000              MOVS     r0,#0
000006  4623              MOV      r3,r4
000008  221d              MOVS     r2,#0x1d
00000a  4903              LDR      r1,|L20.24|
00000c  9000              STR      r0,[sp,#0]
00000e  f1a10010          SUB      r0,r1,#0x10
000012  f7fffffe          BL       sdk_mapped_flags_bulk_update_by_key
;;;121                                            m_bcs.flag_array,
;;;122                                            BLE_CONN_STATE_N_FLAGS,
;;;123                                            conn_handle,
;;;124                                            0);
;;;125    }
000016  bd38              POP      {r3-r5,pc}
;;;126    
                          ENDP

                  |L20.24|
                          DCD      m_bcs+0x14

                          AREA ||i.record_purge_disconnected||, CODE, READONLY, ALIGN=2

                  record_purge_disconnected PROC
;;;143     */
;;;144    static void record_purge_disconnected()
000000  b510              PUSH     {r4,lr}
;;;145    {
000002  b08a              SUB      sp,sp,#0x28
;;;146        sdk_mapped_flags_key_list_t disconnected_list;
;;;147    
;;;148        disconnected_list = sdk_mapped_flags_key_list_get(
000004  480e              LDR      r0,|L21.64|
000006  7d00              LDRB     r0,[r0,#0x14]  ; m_bcs
000008  490d              LDR      r1,|L21.64|
00000a  7d49              LDRB     r1,[r1,#0x15]
00000c  ea200201          BIC      r2,r0,r1
000010  490b              LDR      r1,|L21.64|
000012  1d09              ADDS     r1,r1,#4
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
00001a  2214              MOVS     r2,#0x14
00001c  4669              MOV      r1,sp
00001e  a805              ADD      r0,sp,#0x14
000020  f7fffffe          BL       __aeabi_memcpy4
;;;149                                       m_bcs.valid_conn_handles,
;;;150                                     (~m_bcs.flags.connected_flags) & (m_bcs.flags.valid_flags));
;;;151    
;;;152        for (uint32_t i = 0; i < disconnected_list.len; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L21.52|
                  |L21.40|
;;;153        {
;;;154            record_invalidate(disconnected_list.flag_keys[i]);
000028  a906              ADD      r1,sp,#0x18
00002a  f8310014          LDRH     r0,[r1,r4,LSL #1]
00002e  f7fffffe          BL       record_invalidate
000032  1c64              ADDS     r4,r4,#1              ;152
                  |L21.52|
000034  9805              LDR      r0,[sp,#0x14]         ;152
000036  42a0              CMP      r0,r4                 ;152
000038  d8f6              BHI      |L21.40|
;;;155        }
;;;156    }
00003a  b00a              ADD      sp,sp,#0x28
00003c  bd10              POP      {r4,pc}
;;;157    
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      m_bcs

                          AREA ||i.record_set_disconnected||, CODE, READONLY, ALIGN=2

                  record_set_disconnected PROC
;;;131     */
;;;132    static void record_set_disconnected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134        sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000004  2300              MOVS     r3,#0
000006  4622              MOV      r2,r4
000008  4902              LDR      r1,|L22.20|
00000a  f1a10011          SUB      r0,r1,#0x11
00000e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;135                                      &m_bcs.flags.connected_flags,
;;;136                                       conn_handle,
;;;137                                       0);
;;;138    }
000012  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L22.20|
                          DCD      m_bcs+0x15

                          AREA ||i.user_flag_acquire||, CODE, READONLY, ALIGN=2

                  user_flag_acquire PROC
;;;174     */
;;;175    static void user_flag_acquire(ble_conn_state_user_flag_id_t flag_id)
000000  4903              LDR      r1,|L23.16|
;;;176    {
;;;177        m_bcs.acquired_flags |= (1 << flag_id);
000002  6809              LDR      r1,[r1,#0]  ; m_bcs
000004  2201              MOVS     r2,#1
000006  4082              LSLS     r2,r2,r0
000008  4311              ORRS     r1,r1,r2
00000a  4a01              LDR      r2,|L23.16|
00000c  6011              STR      r1,[r2,#0]  ; m_bcs
;;;178    }
00000e  4770              BX       lr
;;;179    
                          ENDP

                  |L23.16|
                          DCD      m_bcs

                          AREA ||i.user_flag_is_acquired||, CODE, READONLY, ALIGN=2

                  user_flag_is_acquired PROC
;;;164     */
;;;165    static bool user_flag_is_acquired(ble_conn_state_user_flag_id_t flag_id)
000000  4601              MOV      r1,r0
;;;166    {
;;;167        return ((m_bcs.acquired_flags & (1 << flag_id)) != 0);
000002  4805              LDR      r0,|L24.24|
000004  6800              LDR      r0,[r0,#0]  ; m_bcs
000006  2201              MOVS     r2,#1
000008  408a              LSLS     r2,r2,r1
00000a  4010              ANDS     r0,r0,r2
00000c  b108              CBZ      r0,|L24.18|
00000e  2001              MOVS     r0,#1
                  |L24.16|
;;;168    }
000010  4770              BX       lr
                  |L24.18|
000012  2000              MOVS     r0,#0                 ;167
000014  e7fc              B        |L24.16|
;;;169    
                          ENDP

000016  0000              DCW      0x0000
                  |L24.24|
                          DCD      m_bcs

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_bcs
                          %        52

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_conn_state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_ble_conn_state_c_eac0480a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REVSH|
#line 402
|__asm___16_ble_conn_state_c_eac0480a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____RRX|
#line 587
|__asm___16_ble_conn_state_c_eac0480a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
