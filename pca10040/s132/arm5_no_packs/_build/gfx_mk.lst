L 1 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c"
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gfx.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfx.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gfx.c
N * @brief   GFX common routines.
N */
N
N/* Display various warnings from gfx_rules.h */
N#define GFX_DISPLAY_RULE_WARNINGS	TRUE
N
N#include "../gfx.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    gfx.h
N * @brief   GFX system header file.
N *
N * @addtogroup GFX
N *
N * @brief	Main module to glue all the others together
N *
N * @{
N */
N
N#ifndef _GFX_H
N#define _GFX_H
N
N/**
N * These two definitions below are required before anything else so that we can
N * turn module definitions off and on.
N */
N
N/**
N * @brief   Generic 'false' boolean constant.
N */
N#if !defined(FALSE) || defined(__DOXYGEN__)
X#if !0L || 0L
N	#define FALSE       0
N#endif
N
N/**
N * @brief   Generic 'true' boolean constant.
N */
N#if !defined(TRUE) || defined(__DOXYGEN__)
X#if !0L || 0L
N	#define TRUE        -1
N#endif
N
N/* gfxconf.h is the user's project configuration for the GFX system. */
N#include "gfxconf.h"
L 1 "..\..\..\..\none\gfxconf.h" 1
N/**
N * This file has a different license to the rest of the uGFX system.
N * You can copy, modify and distribute this file as you see fit.
N * You do not need to publish your source modifications to this file.
N * The only thing you are not permitted to do is to relicense it
N * under a different license.
N */
N
N/**
N * Copy this file into your project directory and rename it as gfxconf.h
N * Edit your copy to turn on the uGFX features you want to use.
N * The values below are the defaults.
N *
N * Only remove the comments from lines where you want to change the
N * default value. This allows definitions to be included from
N * driver makefiles when required and provides the best future
N * compatibility for your project.
N *
N * Please use spaces instead of tabs in this file.
N */
N
N#ifndef _GFXCONF_H
N#define _GFXCONF_H
N
N
N///////////////////////////////////////////////////////////////////////////
N// GOS - One of these must be defined, preferably in your Makefile       //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_OS_CHIBIOS                           FALSE
N//#define GFX_USE_OS_FREERTOS                          FALSE
N//    #define GFX_FREERTOS_USE_TRACE                   FALSE
N//#define GFX_USE_OS_WIN32                             FALSE
N//#define GFX_USE_OS_LINUX                             FALSE
N//#define GFX_USE_OS_OSX                               FALSE
N//#define GFX_USE_OS_ECOS                              FALSE
N//#define GFX_USE_OS_RAWRTOS                           FALSE
N//#define GFX_USE_OS_ARDUINO                           FALSE
N//#define GFX_USE_OS_KEIL                              FALSE
N//#define GFX_USE_OS_CMSIS                             FALSE
N  #define GFX_USE_OS_RAW32                             TRUE
N//#define GFX_USE_OS_NIOS                              FALSE
N//#define GFX_USE_OS_QT                                FALSE
N//    #define INTERRUPTS_OFF()                         optional_code
N//    #define INTERRUPTS_ON()                          optional_code
N
N// Options that (should where relevant) apply to all operating systems
N//    #define GFX_NO_INLINE                            FALSE
N//    #define GFX_COMPILER                             GFX_COMPILER_UNKNOWN
N//    #define GFX_CPU                                  GFX_CPU_UNKNOWN
N//    #define GFX_CPU_NO_ALIGNMENT_FAULTS              FALSE
N//    #define GFX_CPU_ENDIAN                           GFX_CPU_ENDIAN_UNKNOWN
N      #define GFX_OS_HEAP_SIZE                         0
N//    #define GFX_OS_NO_INIT                           FALSE
N//    #define GFX_OS_INIT_NO_WARNING                   FALSE
N//    #define GFX_OS_PRE_INIT_FUNCTION                 myHardwareInitRoutine
N//    #define GFX_OS_EXTRA_INIT_FUNCTION               myOSInitRoutine
N//    #define GFX_OS_EXTRA_DEINIT_FUNCTION             myOSDeInitRoutine
N//    #define GFX_EMULATE_MALLOC                       FALSE
N
N
N///////////////////////////////////////////////////////////////////////////
N// GDISP                                                                 //
N///////////////////////////////////////////////////////////////////////////
N#define GFX_USE_GDISP                                  TRUE
N
N//#define GDISP_NEED_AUTOFLUSH                         FALSE
N//#define GDISP_NEED_TIMERFLUSH                        FALSE
N//#define GDISP_NEED_VALIDATION                        TRUE
N//#define GDISP_NEED_CLIP                              TRUE
N//#define GDISP_NEED_CIRCLE                            FALSE
N//#define GDISP_NEED_ELLIPSE                           FALSE
N//#define GDISP_NEED_ARC                               FALSE
N//#define GDISP_NEED_ARCSECTORS                        FALSE
N//#define GDISP_NEED_CONVEX_POLYGON                    FALSE
N//#define GDISP_NEED_SCROLL                            FALSE
N//#define GDISP_NEED_PIXELREAD                         FALSE
N//#define GDISP_NEED_CONTROL                           FALSE
N//#define GDISP_NEED_QUERY                             FALSE
N//#define GDISP_NEED_MULTITHREAD                       FALSE
N//#define GDISP_NEED_STREAMING                         FALSE
N//#define GDISP_NEED_TEXT                              FALSE
N//    #define GDISP_NEED_TEXT_WORDWRAP                 FALSE
N//    #define GDISP_NEED_ANTIALIAS                     FALSE
N//    #define GDISP_NEED_UTF8                          FALSE
N//    #define GDISP_NEED_TEXT_KERNING                  FALSE
N//    #define GDISP_INCLUDE_FONT_UI1                   FALSE
N//    #define GDISP_INCLUDE_FONT_UI2                   FALSE		// The smallest preferred font.
N//    #define GDISP_INCLUDE_FONT_LARGENUMBERS          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS10          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS12          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS16          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS20          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS24          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS32          FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANSBOLD12      FALSE
N//    #define GDISP_INCLUDE_FONT_FIXED_10X20           FALSE
N//    #define GDISP_INCLUDE_FONT_FIXED_7X14            FALSE
N//    #define GDISP_INCLUDE_FONT_FIXED_5X8             FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS12_AA       FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS16_AA       FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS20_AA       FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS24_AA       FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANS32_AA       FALSE
N//    #define GDISP_INCLUDE_FONT_DEJAVUSANSBOLD12_AA   FALSE
N//    #define GDISP_INCLUDE_USER_FONTS                 FALSE
N
N//#define GDISP_NEED_IMAGE                             FALSE
N//    #define GDISP_NEED_IMAGE_NATIVE                  FALSE
N//    #define GDISP_NEED_IMAGE_GIF                     FALSE
N//    #define GDISP_NEED_IMAGE_BMP                     FALSE
N//        #define GDISP_NEED_IMAGE_BMP_1               TRUE
N//        #define GDISP_NEED_IMAGE_BMP_4               TRUE
N//        #define GDISP_NEED_IMAGE_BMP_4_RLE           TRUE
N//        #define GDISP_NEED_IMAGE_BMP_8               TRUE
N//        #define GDISP_NEED_IMAGE_BMP_8_RLE           TRUE
N//        #define GDISP_NEED_IMAGE_BMP_16              TRUE
N//        #define GDISP_NEED_IMAGE_BMP_24              TRUE
N//        #define GDISP_NEED_IMAGE_BMP_32              TRUE
N//    #define GDISP_NEED_IMAGE_JPG                     FALSE
N//    #define GDISP_NEED_IMAGE_PNG                     FALSE
N//        #define GDISP_NEED_IMAGE_PNG_INTERLACED      FALSE
N//        #define GDISP_NEED_IMAGE_PNG_TRANSPARENCY    TRUE
N//        #define GDISP_NEED_IMAGE_PNG_BACKGROUND      TRUE
N//        #define GDISP_NEED_IMAGE_PNG_ALPHACLIFF      32
N//        #define GDISP_NEED_IMAGE_PNG_PALETTE_124     TRUE
N//        #define GDISP_NEED_IMAGE_PNG_PALETTE_8       TRUE
N//        #define GDISP_NEED_IMAGE_PNG_GRAYSCALE_124   TRUE
N//        #define GDISP_NEED_IMAGE_PNG_GRAYSCALE_8     TRUE
N//        #define GDISP_NEED_IMAGE_PNG_GRAYSCALE_16    TRUE
N//        #define GDISP_NEED_IMAGE_PNG_GRAYALPHA_8     TRUE
N//        #define GDISP_NEED_IMAGE_PNG_GRAYALPHA_16    TRUE
N//        #define GDISP_NEED_IMAGE_PNG_RGB_8           TRUE
N//        #define GDISP_NEED_IMAGE_PNG_RGB_16          TRUE
N//        #define GDISP_NEED_IMAGE_PNG_RGBALPHA_8      TRUE
N//        #define GDISP_NEED_IMAGE_PNG_RGBALPHA_16     TRUE
N//    #define GDISP_NEED_IMAGE_ACCOUNTING              FALSE
N
N//#define GDISP_NEED_PIXMAP                            FALSE
N//    #define GDISP_NEED_PIXMAP_IMAGE                  FALSE
N
N//#define GDISP_DEFAULT_ORIENTATION                    GDISP_ROTATE_LANDSCAPE    // If not defined the native hardware orientation is used.
N//#define GDISP_LINEBUF_SIZE                           128
N//#define GDISP_STARTUP_COLOR                          Black
N#define GDISP_NEED_STARTUP_LOGO                        TRUE
N
N#define GDISP_TOTAL_DISPLAYS                        	 1
N
N/*#define GDISP_DRIVER_LIST                              GDISP_DRIVER_LS013														
N    #ifdef GDISP_DRIVER_LIST
N        // For code and speed optimization define as TRUE or FALSE if all controllers have the same capability
N        #define GDISP_HARDWARE_STREAM_WRITE          FALSE
N        #define GDISP_HARDWARE_STREAM_READ           FALSE
N        #define GDISP_HARDWARE_STREAM_POS            FALSE
N        #define GDISP_HARDWARE_DRAWPIXEL             FALSE
N        #define GDISP_HARDWARE_CLEARS                FALSE
N        #define GDISP_HARDWARE_FILLS                 FALSE
N        #define GDISP_HARDWARE_BITFILLS              FALSE
N        #define GDISP_HARDWARE_SCROLL                FALSE
N        #define GDISP_HARDWARE_PIXELREAD             FALSE
N        #define GDISP_HARDWARE_CONTROL               FALSE
N        #define GDISP_HARDWARE_QUERY                 FALSE
N        #define GDISP_HARDWARE_CLIP                  FALSE
N
N				#define GDISP_PIXELFORMAT                    GDISP_PIXELFORMAT_RGB111
N    #endif
N*/
N//#define GDISP_USE_GFXNET                             FALSE
N//    #define GDISP_GFXNET_PORT                        13001
N//    #define GDISP_GFXNET_CUSTOM_LWIP_STARTUP         FALSE
N//    #define GDISP_DONT_WAIT_FOR_NET_DISPLAY          FALSE
N//    #define GDISP_GFXNET_UNSAFE_SOCKETS              FALSE
N
N
N///////////////////////////////////////////////////////////////////////////
N// GWIN                                                                  //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GWIN                                 FALSE
N
N//#define GWIN_NEED_WINDOWMANAGER                      FALSE
N//    #define GWIN_REDRAW_IMMEDIATE                    FALSE
N//    #define GWIN_REDRAW_SINGLEOP                     FALSE
N//    #define GWIN_NEED_FLASHING                       FALSE
N//        #define GWIN_FLASHING_PERIOD                 250
N
N//#define GWIN_NEED_CONSOLE                            FALSE
N//    #define GWIN_CONSOLE_USE_HISTORY                 FALSE
N//        #define GWIN_CONSOLE_HISTORY_AVERAGING       FALSE
N//        #define GWIN_CONSOLE_HISTORY_ATCREATE        FALSE
N//    #define GWIN_CONSOLE_ESCSEQ                      FALSE
N//    #define GWIN_CONSOLE_USE_BASESTREAM              FALSE
N//    #define GWIN_CONSOLE_USE_FLOAT                   FALSE
N//#define GWIN_NEED_GRAPH                              FALSE
N//#define GWIN_NEED_GL3D                               FALSE
N
N//#define GWIN_NEED_WIDGET                             FALSE
N//#define GWIN_FOCUS_HIGHLIGHT_WIDTH                   1
N//    #define GWIN_NEED_LABEL                          FALSE
N//        #define GWIN_LABEL_ATTRIBUTE                 FALSE
N//    #define GWIN_NEED_BUTTON                         FALSE
N//        #define GWIN_BUTTON_LAZY_RELEASE             FALSE
N//    #define GWIN_NEED_SLIDER                         FALSE
N//        #define GWIN_SLIDER_NOSNAP                   FALSE
N//        #define GWIN_SLIDER_DEAD_BAND                5
N//        #define GWIN_SLIDER_TOGGLE_INC               20
N//    #define GWIN_NEED_CHECKBOX                       FALSE
N//    #define GWIN_NEED_IMAGE                          FALSE
N//        #define GWIN_NEED_IMAGE_ANIMATION            FALSE
N//    #define GWIN_NEED_RADIO                          FALSE
N//    #define GWIN_NEED_LIST                           FALSE
N//        #define GWIN_NEED_LIST_IMAGES                FALSE
N//    #define GWIN_NEED_PROGRESSBAR                    FALSE
N//        #define GWIN_PROGRESSBAR_AUTO                FALSE
N//    #define GWIN_NEED_KEYBOARD                       FALSE
N//        #define GWIN_KEYBOARD_DEFAULT_LAYOUT         VirtualKeyboard_English1
N//        #define GWIN_NEED_KEYBOARD_ENGLISH1          TRUE
N//    #define GWIN_NEED_TEXTEDIT                       FALSE
N//    #define GWIN_FLAT_STYLING                        FALSE
N//    #define GWIN_WIDGET_TAGS                         FALSE
N
N//#define GWIN_NEED_CONTAINERS                         FALSE
N//    #define GWIN_NEED_CONTAINER                      FALSE
N//    #define GWIN_NEED_FRAME                          FALSE
N//    #define GWIN_NEED_TABSET                         FALSE
N//        #define GWIN_TABSET_TABHEIGHT                18
N
N
N///////////////////////////////////////////////////////////////////////////
N// GTRANS                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GTRANS                               FALSE
N
N
N///////////////////////////////////////////////////////////////////////////
N// GEVENT                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GEVENT                               FALSE
N
N//#define GEVENT_ASSERT_NO_RESOURCE                    FALSE
N//#define GEVENT_MAXIMUM_SIZE                          32
N//#define GEVENT_MAX_SOURCE_LISTENERS                  32
N
N
N///////////////////////////////////////////////////////////////////////////
N// GTIMER                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GTIMER                               FALSE
N
N//#define GTIMER_THREAD_PRIORITY                       HIGH_PRIORITY
N//#define GTIMER_THREAD_WORKAREA_SIZE                  2048
N
N
N///////////////////////////////////////////////////////////////////////////
N// GQUEUE                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GQUEUE                               FALSE
N
N//#define GQUEUE_NEED_ASYNC                            FALSE
N//#define GQUEUE_NEED_GSYNC                            FALSE
N//#define GQUEUE_NEED_FSYNC                            FALSE
N//#define GQUEUE_NEED_BUFFERS                          FALSE
N
N///////////////////////////////////////////////////////////////////////////
N// GINPUT                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GINPUT                               FALSE
N
N//#define GINPUT_NEED_MOUSE                            FALSE
N//    #define GINPUT_TOUCH_STARTRAW                    FALSE
N//    #define GINPUT_TOUCH_NOTOUCH                     FALSE
N//    #define GINPUT_TOUCH_NOCALIBRATE                 FALSE
N//    #define GINPUT_TOUCH_NOCALIBRATE_GUI             FALSE
N//    #define GINPUT_MOUSE_POLL_PERIOD                 25
N//    #define GINPUT_MOUSE_CLICK_TIME                  300
N//    #define GINPUT_TOUCH_CXTCLICK_TIME               700
N//    #define GINPUT_TOUCH_USER_CALIBRATION_LOAD       FALSE
N//    #define GINPUT_TOUCH_USER_CALIBRATION_SAVE       FALSE
N//    #define GMOUSE_DRIVER_LIST                       GMOUSEVMT_Win32, GMOUSEVMT_Win32
N//#define GINPUT_NEED_KEYBOARD                         FALSE
N//    #define GINPUT_KEYBOARD_POLL_PERIOD              200
N//    #define GKEYBOARD_DRIVER_LIST                    GKEYBOARDVMT_Win32, GKEYBOARDVMT_Win32
N//    #define GKEYBOARD_LAYOUT_OFF                     FALSE
N//        #define GKEYBOARD_LAYOUT_SCANCODE2_US        FALSE
N//#define GINPUT_NEED_TOGGLE                           FALSE
N//#define GINPUT_NEED_DIAL                             FALSE
N
N
N///////////////////////////////////////////////////////////////////////////
N// GFILE                                                                 //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GFILE                                FALSE
N
N//#define GFILE_NEED_PRINTG                            FALSE
N//#define GFILE_NEED_SCANG                             FALSE
N//#define GFILE_NEED_STRINGS                           FALSE
N//#define GFILE_NEED_FILELISTS                         FALSE
N//#define GFILE_NEED_STDIO                             FALSE
N//#define GFILE_NEED_NOAUTOMOUNT                       FALSE
N//#define GFILE_NEED_NOAUTOSYNC                        FALSE
N
N//#define GFILE_NEED_MEMFS                             FALSE
N//#define GFILE_NEED_ROMFS                             FALSE
N//#define GFILE_NEED_RAMFS                             FALSE
N//#define GFILE_NEED_FATFS                             FALSE
N//#define GFILE_NEED_NATIVEFS                          FALSE
N//#define GFILE_NEED_CHBIOSFS                          FALSE
N
N//#define GFILE_ALLOW_FLOATS                           FALSE
N//#define GFILE_ALLOW_DEVICESPECIFIC                   FALSE
N//#define GFILE_MAX_GFILES                             3
N
N///////////////////////////////////////////////////////////////////////////
N// GADC                                                                  //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GADC                                 FALSE
N//    #define GADC_MAX_LOWSPEED_DEVICES                4
N
N///////////////////////////////////////////////////////////////////////////
N// GAUDIO                                                                //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GAUDIO                               FALSE
N//    #define GAUDIO_NEED_PLAY                         FALSE
N//    #define GAUDIO_NEED_RECORD                       FALSE
N
N///////////////////////////////////////////////////////////////////////////
N// GMISC                                                                 //
N///////////////////////////////////////////////////////////////////////////
N//#define GFX_USE_GMISC                                FALSE
N
N//#define GMISC_NEED_ARRAYOPS                          FALSE
N//#define GMISC_NEED_FASTTRIG                          FALSE
N//#define GMISC_NEED_FIXEDTRIG                         FALSE
N//#define GMISC_NEED_INVSQRT                           FALSE
N//    #define GMISC_INVSQRT_MIXED_ENDIAN               FALSE
N//    #define GMISC_INVSQRT_REAL_SLOW                  FALSE
N//#define GMISC_NEED_MATRIXFLOAT2D                     FALSE
N//#define GMISC_NEED_MATRIXFIXED2D                     FALSE
N
N#endif /* _GFXCONF_H */
L 43 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N
N/* Include Compiler and CPU support */
N#include "src/gfx_compilers.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gfx_compilers.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    gfx_compilers.h
N * @brief   GFX compiler support header file.
N *
N * @addtogroup GFX
N *
N * @brief	Main module to glue all the others together
N *
N * @{
N */
N
N#ifndef _GFX_COMPILERS_H
N#define _GFX_COMPILERS_H
N
N/**
N * @name    GFX compilation options
N * @{
N */
N 	/**
N	 * @brief	Should various inline ugfx functions be non-inline.
N	 * @details	Defaults to FALSE
N	 * @note	Generally there is no need to set this to TRUE as it will have huge performance impacts
N	 *			in the driver level.
N	 */
N	#ifndef GFX_NO_INLINE
N		#define GFX_NO_INLINE			FALSE
N	#endif
N
N	// Set the no inline value
N	#if GFX_NO_INLINE
X	#if 0
S		#define GFXINLINE
N	#endif
N
N	/**
N	 * @brief	Enable compiler specific code
N	 * @details	Auto detected by default but it can be overridden in gfxconf.h
N	 * @note	This is setting enables optimisations and code options that are compiler specific.
N	 * @note	If the compiler can't be auto-detected it is set to GFX_COMPILER_UNKNOWN
N	 * @{
N	 */
N	#ifndef GFX_COMPILER
N		#define GFX_COMPILER			GFX_COMPILER_UNKNOWN
N	#endif
N	#define GFX_COMPILER_UNKNOWN		0		//**< Unknown compiler
N	#define GFX_COMPILER_ACC			1		//**< ACC Compiler
N	#define GFX_COMPILER_ALTIUM			2		//**< Altium MicroBlaze C
N	#define GFX_COMPILER_ALTIUMHW		3		//**< Altium C-to-Hardware
N	#define GFX_COMPILER_AMSTERDAM		4		//**< Amsterdam Compiler Kit
N	#define GFX_COMPILER_ARMCC			5		//**< ARM Compiler
N	#define GFX_COMPILER_AZTEC			6		//**< Aztec C
N	#define GFX_COMPILER_BORLAND		7		//**< Borland C++
N	#define GFX_COMPILER_CC65			8		//**< CC65
N	#define GFX_COMPILER_CLANG			9		//**< CLang (LLVM) compiler
N	#define GFX_COMPILER_COMEAU			10		//**< Comeau C++
N	#define GFX_COMPILER_COMPAQ			11		//**< Compaq C
N	#define GFX_COMPILER_COMPCERT		12		//**< Compcert Compiler
N	#define GFX_COMPILER_CONVEX			13		//**< Convex C
N	#define GFX_COMPILER_CRAY			14		//**< Cray C/C++
N	#define GFX_COMPILER_CYGWIN			15		//**< Cygwin (x86) unix emulator compiler for windows
N	#define GFX_COMPILER_DAIB			16		//**< Diab C/C++
N	#define GFX_COMPILER_DEC			17		//**< The older DEC C Compiler
N	#define GFX_COMPILER_DICE			18		//**< DICE C Compiler
N	#define GFX_COMPILER_DIGNUS			19		//**< Dignus Systems C++ Compiler
N	#define GFX_COMPILER_DJGPP			20		//**< DJGPP
N	#define GFX_COMPILER_DMARS			21		//**< Digital Mars
N	#define GFX_COMPILER_EDG			22		//**< EDG C++
N	#define GFX_COMPILER_EKOPATH		23		//**< EKOPath Compiler
N	#define GFX_COMPILER_FUJITSU		24		//**< Fujitsu C++ Compiler
N	#define GFX_COMPILER_GCC			25		//**< Standard GCC/G++
N	#define GFX_COMPILER_GREENHILL		26		//**< Green Hill C/C++
N	#define GFX_COMPILER_HIGHC			27		//**< Metaware High C/C++
N	#define GFX_COMPILER_HP				28		//**< HP C/aC++
N	#define GFX_COMPILER_IAR			29		//**< IAR C/C++
N	#define GFX_COMPILER_IBMXL			30		//**< IBM XL C/C++ Compiler
N	#define GFX_COMPILER_IMAGECRAFT		31		//**< ImageCraft C Compiler
N	#define GFX_COMPILER_INTEL			32		//**< Intel ICC/ICPC Compiler
N	#define GFX_COMPILER_KAI			33		//**< Kai C++
N	#define GFX_COMPILER_KEIL			34		//**< Keil (use this when working with uVision IDE)
N	#define GFX_COMPILER_LCC			35		//**< LCC
N	#define GFX_COMPILER_METROWORKS		36		//**< Metroworks
N	#define GFX_COMPILER_MICROTEC		37		//**< Microtec C/C++
N	#define GFX_COMPILER_MICROWAY		38		//**< Microway NDP C
N	#define GFX_COMPILER_MINGW32		39		//**< MingW32 (x86) compiler for windows
N	#define GFX_COMPILER_MINGW64		40		//**< MingW64 (x64) compiler for windows
N	#define GFX_COMPILER_MIPSPRO		41		//**< MIPS Pro
N	#define GFX_COMPILER_MIRACLE		42		//**< Miracle C
N	#define GFX_COMPILER_MPW			43		//**< MPW C++
N	#define GFX_COMPILER_NORCROFT		44		//**< Norcroft ARM
N	#define GFX_COMPILER_NWCC			45		//**< NWCC
N	#define GFX_COMPILER_OPEN64			46		//**< Open64
N	#define GFX_COMPILER_OSS			47		//**< Oracle Solaris Studio
N	#define GFX_COMPILER_PACIFIC		48		//**< Pacific C
N	#define GFX_COMPILER_PALM			49		//**< Palm C/C++
N	#define GFX_COMPILER_PELLES			50		//**< Pelles C
N	#define GFX_COMPILER_PGCC			51		//**< Portland PGCC/PGCPP
N	#define GFX_COMPILER_RENESAS		52		//**< Renesas C/C++
N	#define GFX_COMPILER_SASC			53		//**< SAS/C
N	#define GFX_COMPILER_SCO			54		//**< SCO OpenServer
N	#define GFX_COMPILER_SDCC			55		//**< Small Device C Compiler
N	#define GFX_COMPILER_SN				56		//**< SN Compiler
N	#define GFX_COMPILER_STRATUS		57		//**< Stratus VOS C
N	#define GFX_COMPILER_SYMANTEC		58		//**< Symantec C++
N	#define GFX_COMPILER_TENDRA			59		//**< TenDRA C/C++
N	#define GFX_COMPILER_THINK			60		//**< Think C
N	#define GFX_COMPILER_TI				61		//**< Texas Instruments C/C++
N	#define GFX_COMPILER_TINYC			62		//**< Tiny C
N	#define GFX_COMPILER_TURBOC			63		//**< Borland Turbo C
N	#define GFX_COMPILER_ULTIMATE		64		//**< Ultimate C/C++
N	#define GFX_COMPILER_USL			65		//**< USL C
N	#define GFX_COMPILER_VBCC			66		//**< VBCC
N	#define GFX_COMPILER_VS				67		//**< Microsoft Visual Studio
N	#define GFX_COMPILER_WATCOM			68		//**< Watcom
N	#define GFX_COMPILER_ZTC			69		//**< Zortech C++
N	/** @} */
N
N	/************************************ Start Compiler Auto-Detection *************************
N	 *
N	 * Do not alter the order of these unless you know what you are doing as some compilers try
N	 *	to emulate other compilers. GCC in particular is commonly emulated and is also used as
N	 *	a code base for other compiler variants.
N	 */
N	#if GFX_COMPILER == GFX_COMPILER_UNKNOWN
X	#if 0 == 0
N		#undef GFX_COMPILER
N		#if defined(__MINGW32__)
X		#if 0L
S			#define GFX_COMPILER	GFX_COMPILER_MINGW32
S		#elif defined(__MINGW64__)
X		#elif 0L
S			#define GFX_COMPILER	GFX_COMPILER_MINGW64
S		#elif defined(__CYGWIN__)
X		#elif 0L
S			#define GFX_COMPILER	GFX_COMPILER_CYGWIN
N		#elif defined(__KEIL__) || defined(__CA__) || defined(__C51__) || defined(__CX51__) || defined(__C166__) || defined(__C251__) \
N				|| (defined(__CC_ARM) && defined(__EDG__))
X		#elif 0L || 0L || 0L || 0L || 0L || 0L 				|| (1L && 1L)
N			#define GFX_COMPILER	GFX_COMPILER_KEIL
N		#elif defined(__clang__) || defined(__llvm__)
S			#define GFX_COMPILER	GFX_COMPILER_CLANG
S		#elif defined(__INTEL_COMPILER) || defined(__ICC) || defined(__ECC) || defined(__TCL)
S			#define GFX_COMPILER	GFX_COMPILER_INTEL
S		#elif defined(__GNUC__) || defined(__GNUG__)
S			#define GFX_COMPILER	GFX_COMPILER_GCC
S		#elif defined(__CC_ARM)
S			#define GFX_COMPILER	GFX_COMPILER_ARMCC
S		#elif defined(__HP_cc) || defined(__HP_aCC)
S			#define GFX_COMPILER	GFX_COMPILER_HP
S		#elif defined(__IBMC__) || defined(__IBMCPP__) || defined(__xlc__) || defined(__xlC__)
S			#define GFX_COMPILER	GFX_COMPILER_IBMXL
S		#elif defined(_MSC_VER)
S			#define GFX_COMPILER	GFX_COMPILER_VS
S		#elif defined(__PGI)
S			#define GFX_COMPILER	GFX_COMPILER_PGCC
S		#elif defined(__SUNPRO_C) || defined(__SUNPRO_CC)
S			#define GFX_COMPILER	GFX_COMPILER_OSS
S		#elif defined(__TURBOC__)
S			#define GFX_COMPILER	GFX_COMPILER_TURBOC
S		#elif defined(__BORLANDC__)
S			#define GFX_COMPILER	GFX_COMPILER_BORLAND
S		#elif defined(__COMO__)
S			#define GFX_COMPILER	GFX_COMPILER_COMEAU
S		#elif defined(__DECC) || defined(__VAXC) || defined(VAXC) || defined(__DECCXX)
S			#define GFX_COMPILER	GFX_COMPILER_COMPAQ
S		#elif defined(__osf__) && defined(__LANGUAGE_C__)
S			#define GFX_COMPILER	GFX_COMPILER_DEC
S		#elif defined(_CRAYC)
S			#define GFX_COMPILER	GFX_COMPILER_CRAY
S		#elif defined(__DCC__)
S			#define GFX_COMPILER	GFX_COMPILER_DAIB
S		#elif defined(__DMC__)
S			#define GFX_COMPILER	GFX_COMPILER_DMARS
S		#elif defined(__KCC)
S			#define GFX_COMPILER	GFX_COMPILER_KAI
S		#elif defined(__LCC__)
S			#define GFX_COMPILER	GFX_COMPILER_LCC
S		#elif defined(__HIGHC__)
S			#define GFX_COMPILER	GFX_COMPILER_HIGHC
S		#elif defined(__MWERKS__) || defined(__CWCC__)
S			#define GFX_COMPILER	GFX_COMPILER_METROWORKS
S		#elif defined(__sgi)
S			#define GFX_COMPILER	GFX_COMPILER_MIPSPRO
S		#elif defined(__MRC__)
S			#define GFX_COMPILER	GFX_COMPILER_MPW
S		#elif defined(__CC_NORCROFT)
S			#define GFX_COMPILER	GFX_COMPILER_NORCROFT
S		#elif defined(__SASC__)
S			#define GFX_COMPILER	GFX_COMPILER_SASC
S		#elif defined( _SCO_DS )
S			#define GFX_COMPILER	GFX_COMPILER_SCO
S		#elif defined(__TINYC__)
S			#define GFX_COMPILER	GFX_COMPILER_TINYC
S		#elif defined( __USLC__ )
S			#define GFX_COMPILER	GFX_COMPILER_USL
S		#elif defined(__WATCOMC__)
S			#define GFX_COMPILER	GFX_COMPILER_WATCOM
S		#elif defined(__AZTEC_C__) || defined(AZTEC_C)
S			#define GFX_COMPILER	GFX_COMPILER_AZTEC
S		#elif defined(__CC65__)
S			#define GFX_COMPILER	GFX_COMPILER_CC65
S		#elif defined(__convexc__)
S			#define GFX_COMPILER	GFX_COMPILER_CONVEX
S		#elif defined(__COMPCERT__)
S			#define GFX_COMPILER	GFX_COMPILER_COMPCERT
S		#elif defined(_DICE)
S			#define GFX_COMPILER	GFX_COMPILER_DICE
S		#elif defined(__SYSC__)
S			#define GFX_COMPILER	GFX_COMPILER_DIGNUS
S		#elif defined(__DJGPP__) || defined(__GO32__)
S			#define GFX_COMPILER	GFX_COMPILER_DJGPP
S		#elif defined(__EDG__)
S			#define GFX_COMPILER	GFX_COMPILER_EDG
S		#elif defined(__PATHCC__)
S			#define GFX_COMPILER	GFX_COMPILER_EKOPATH
S		#elif defined(__FCC_VERSION)
S			#define GFX_COMPILER	GFX_COMPILER_FUJITSU
S		#elif defined(__ghs__)
S			#define GFX_COMPILER	GFX_COMPILER_GREENHILL
S		#elif defined(__IAR_SYSTEMS_ICC__)
S			#define GFX_COMPILER	GFX_COMPILER_IAR
S		#elif defined(_MRI)
S			#define GFX_COMPILER	GFX_COMPILER_MICROTEC
S		#elif defined(__NDPC__) || defined(__NDPX__)
S			#define GFX_COMPILER	GFX_COMPILER_MICROWAY
S		#elif defined(MIRACLE)
S			#define GFX_COMPILER	GFX_COMPILER_MIRACLE
S		#elif defined(__NWCC__)
S			#define GFX_COMPILER	GFX_COMPILER_NWCC
S		#elif defined(__OPEN64__)
S			#define GFX_COMPILER	GFX_COMPILER_OPEN64
S		#elif defined(__PACIFIC__)
S			#define GFX_COMPILER	GFX_COMPILER_PACIFIC
S		#elif defined(_PACC_VER)
S			#define GFX_COMPILER	GFX_COMPILER_PALM
S		#elif defined(__POCC__)
S			#define GFX_COMPILER	GFX_COMPILER_PELLES
S		#elif defined(__RENESAS__) || defined(__HITACHI__)
S			#define GFX_COMPILER	GFX_COMPILER_RENESAS
S		#elif defined(SDCC)
S			#define GFX_COMPILER	GFX_COMPILER_SDCC
S		#elif defined(__SNC__)
S			#define GFX_COMPILER	GFX_COMPILER_SN
S		#elif defined(__VOSC__)
S			#define GFX_COMPILER	GFX_COMPILER_STRATUS
S		#elif defined(__TenDRA__)
S			#define GFX_COMPILER	GFX_COMPILER_TENDRA
S		#elif defined(__TI_COMPILER_VERSION__)
S			#define GFX_COMPILER	GFX_COMPILER_TI
S		#elif defined(THINKC3) || defined(THINKC4)
S			#define GFX_COMPILER	GFX_COMPILER_THINK
S		#elif defined(_UCC)
S			#define GFX_COMPILER	GFX_COMPILER_ULTIMATE
S		#elif defined(__VBCC__)
S			#define GFX_COMPILER	GFX_COMPILER_VBCC
S		#elif defined(__ZTC__)
S			#define GFX_COMPILER	GFX_COMPILER_ZTC
S		#elif defined(__SC__)
S			#define GFX_COMPILER	GFX_COMPILER_SYMANTEC
S		#elif defined(_ACC_)
S			#define GFX_COMPILER	GFX_COMPILER_ACC
S		#elif defined(__CMB__)
S			#define GFX_COMPILER	GFX_COMPILER_ALTIUM
S		#elif defined(__CHC__)
S			#define GFX_COMPILER	GFX_COMPILER_ALTIUMHW
S		#elif defined(__ACK__)
S			#define GFX_COMPILER	GFX_COMPILER_AMSTERDAM
S		#elif defined(__IMAGECRAFT__)
S			#define GFX_COMPILER	GFX_COMPILER_IMAGECRAFT
S
S		#else
S			#define GFX_COMPILER	GFX_COMPILER_UNKNOWN
N		#endif
N	#endif
N	/************************************ End Compiler Auto-Detection *************************/
N
N	/************************************ Start Compiler Settings *****************************
N	 *
N	 *  Please keep this list in alphabetical order to keep it easier to maintain
N	 */
N	#undef GFX_COMPILER_NAME
N	#undef GFX_COMPILER_TESTED
N	#undef GFX_COMPILER_VERSION_MAJOR
N	#undef GFX_COMPILER_VERSION_MINOR
N	#undef GFX_COMPILER_VERSION_PATCH
N	#undef GFX_COMPILER_VERSION_BUILD
N	#if GFX_COMPILER ==  GFX_COMPILER_ACC
X	#if 34 ==  1
S		#define GFX_COMPILER_NAME					"ACC"
S	#elif GFX_COMPILER ==  GFX_COMPILER_ALTIUM
X	#elif 34 ==  2
S		#define GFX_COMPILER_NAME					"Altium MicroBlaze C"
S		#ifdef __BUILD__
S			#define GFX_COMPILER_VERSION_MAJOR		((__BUILD__)/1000000)
S			#define GFX_COMPILER_VERSION_MINOR		(((__BUILD__)/1000)%1000)
S			#define GFX_COMPILER_VERSION_PATCH		((__BUILD__)%1000)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((__VERSION__)/1000)
S			#define GFX_COMPILER_VERSION_MINOR		((__VERSION__)%1000)
S			#define GFX_COMPILER_VERSION_PATCH		(__REVISION__)
S		#endif
S	#elif GFX_COMPILER ==  GFX_COMPILER_ALTIUMHW
X	#elif 34 ==  3
S		#define GFX_COMPILER_NAME					"Altium C-to-Hardware"
S		#ifdef __BUILD__
S			#define GFX_COMPILER_VERSION_MAJOR		((__BUILD__)/1000000)
S			#define GFX_COMPILER_VERSION_MINOR		(((__BUILD__)/1000)%1000)
S			#define GFX_COMPILER_VERSION_PATCH		((__BUILD__)%1000)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((__VERSION__)/1000)
S			#define GFX_COMPILER_VERSION_MINOR		((__VERSION__)%1000)
S			#define GFX_COMPILER_VERSION_PATCH		(__REVISION__)
S		#endif
S	#elif GFX_COMPILER ==  GFX_COMPILER_AMSTERDAM
X	#elif 34 ==  4
S		#define GFX_COMPILER_NAME					"Amsterdam Compiler Kit"
S	#elif GFX_COMPILER == GFX_COMPILER_ARMCC
X	#elif 34 == 5
S		#define GFX_COMPILER_NAME					"ARMCC"
S		#define GFX_COMPILER_VERSION_MAJOR			((__ARMCC_VERSION)/100000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__ARMCC_VERSION)/10000)%10)
S		#define GFX_COMPILER_VERSION_PATCH			(((__ARMCC_VERSION)/1000)%10)
S		#define GFX_COMPILER_VERSION_BUILD			((__ARMCC_VERSION)%1000)
S		#define __LITTLE_IF_NOT_BIG__				// Oops - Defines __BIG_ENDIAN but not __LITTLE_ENDIAN
S	#elif GFX_COMPILER == GFX_COMPILER_AZTEC
X	#elif 34 == 6
S		#define GFX_COMPILER_NAME					"Aztec"
S		#define GFX_COMPILER_VERSION_MAJOR			((__VERSION)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__VERSION)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_BORLAND
X	#elif 34 == 7
S		#define GFX_COMPILER_NAME					"Borland C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__BORLANDC__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			(((((__BORLANDC__)%0x100)/0x10)*10) + ((__BORLANDC__)%0x10))
S	#elif GFX_COMPILER == GFX_COMPILER_CC65
X	#elif 34 == 8
S		#define GFX_COMPILER_NAME					"CC65"
S		#define GFX_COMPILER_VERSION_MAJOR			((__CC65__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			(((__CC65__)/0x10)%0x10)
S		#define GFX_COMPILER_VERSION_PATCH			((__CC65__)%0x10)
S	#elif GFX_COMPILER == GFX_COMPILER_CLANG
X	#elif 34 == 9
S		#define GFX_COMPILER_NAME					"CLang (LLVM)"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			(__clang_major__)
S		#define GFX_COMPILER_VERSION_MINOR			(__clang_minor__)
S		#define GFX_COMPILER_VERSION_PATCH			(__clang_patchlevel__)
S		#define DEPRECATED(msg)						__attribute__((deprecated(msg)));
S	#elif GFX_COMPILER == GFX_COMPILER_COMEAU
X	#elif 34 == 10
S		#define GFX_COMPILER_NAME					"Comeau C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__COMO_VERSION__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__COMO_VERSION__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_COMPAQ
X	#elif 34 == 11
S		#define GFX_COMPILER_NAME					"Compaq C"
S		#define GFX_COMPILER_VERSION_MAJOR			((__DECC_VER)/10000000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__DECC_VER)/100000)%100)
S		#define GFX_COMPILER_VERSION_PATCH			((__DECC_VER)%10000)
S	#elif GFX_COMPILER == GFX_COMPILER_COMPCERT
X	#elif 34 == 12
S		#define GFX_COMPILER_NAME					"Compcert"
S	#elif GFX_COMPILER == GFX_COMPILER_CONVEX
X	#elif 34 == 13
S		#define GFX_COMPILER_NAME					"Convex C"
S	#elif GFX_COMPILER == GFX_COMPILER_CRAY
X	#elif 34 == 14
S		#define GFX_COMPILER_NAME					"Cray C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			(_RELEASE)
S		#define GFX_COMPILER_VERSION_MINOR			(_RELEASE_MINOR)
S	#elif GFX_COMPILER == GFX_COMPILER_CYGWIN
X	#elif 34 == 15
S		#define GFX_COMPILER_NAME					"Cygwin"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			(__GNUC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__GNUC_MINOR__)
S		#ifdef __GNUC_PATCHLEVEL__
S			#define GFX_COMPILER_VERSION_PATCH		(__GNUC_PATCHLEVEL__)
S		#endif
S		#define DEPRECATED(msg)						__attribute__((deprecated(msg)))
S	#elif GFX_COMPILER == GFX_COMPILER_DAIB
X	#elif 34 == 16
S		#define GFX_COMPILER_NAME					"Diab C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__VERSION_NUMBER__)/1000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__VERSION_NUMBER__)/100)%10)
S		#define GFX_COMPILER_VERSION_PATCH			((__VERSION_NUMBER__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_DEC
X	#elif 34 == 17
S		#define GFX_COMPILER_NAME					"DEC"
S	#elif GFX_COMPILER == GFX_COMPILER_DICE
X	#elif 34 == 18
S		#define GFX_COMPILER_NAME					"DICE C"
S	#elif GFX_COMPILER == GFX_COMPILER_DIGNUS
X	#elif 34 == 19
S		#define GFX_COMPILER_NAME					"Dignus Systems C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__SYSC_VER__)/10000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__SYSC_VER__)/100)%100)
S		#define GFX_COMPILER_VERSION_PATCH			((__SYSC_VER__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_DJGPP
X	#elif 34 == 20
S		#define GFX_COMPILER_NAME					"DJGPP"
S		#ifdef __DJGPP__
S			#define GFX_COMPILER_VERSION_MAJOR		(__DJGPP__)
S			#define GFX_COMPILER_VERSION_MINOR		(__DJGPP_MINOR__)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		(1)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_DMARS
X	#elif 34 == 21
S		#define GFX_COMPILER_NAME					"Digital Mars"
S		#define GFX_COMPILER_VERSION_MAJOR			((__DMC__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			(((__DMC__)/0x10)%0x10)
S		#define GFX_COMPILER_VERSION_PATCH			((__DMC__)%0x10)
S	#elif GFX_COMPILER == GFX_COMPILER_EDG
X	#elif 34 == 22
S		#define GFX_COMPILER_NAME					"EDG C++"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			((__EDG_VERSION__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__EDG_VERSION__)%100)
S		#pragma diag_remark = Pe301
S		#pragma diag_remark = Pe083
S		#pragma diag_remark = Pe767
S		#pragma diag_remark = Pe188
S		#pragma diag_remark = Pe186
S		#pragma diag_remark = Pe068
S		#pragma diag_remark = Pa050
S	#elif GFX_COMPILER == GFX_COMPILER_EKOPATH
X	#elif 34 == 23
S		#define GFX_COMPILER_NAME					"EKOPath"
S		#define GFX_COMPILER_VERSION_MAJOR			(__PATHCC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__PATHCC_MINOR__)
S		#define GFX_COMPILER_VERSION_PATCH			(__PATHCC_PATCHLEVEL__)
S	#elif GFX_COMPILER == GFX_COMPILER_FUJITSU
X	#elif 34 == 24
S		#define GFX_COMPILER_NAME					"Fujitsu C++"
S	#elif GFX_COMPILER == GFX_COMPILER_GCC
X	#elif 34 == 25
S		#define GFX_COMPILER_NAME					"GCC"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			(__GNUC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__GNUC_MINOR__)
S		#ifdef __GNUC_PATCHLEVEL__
S			#define GFX_COMPILER_VERSION_PATCH		(__GNUC_PATCHLEVEL__)
S		#endif
S		#define DEPRECATED(msg)						__attribute__((deprecated(msg)))
S	#elif GFX_COMPILER == GFX_COMPILER_GREENHILL
X	#elif 34 == 26
S		#define GFX_COMPILER_NAME					"Green Hill C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__GHS_VERSION_NUMBER__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			(((__GHS_VERSION_NUMBER__)/10)%10)
S		#define GFX_COMPILER_VERSION_PATCH			((__GHS_VERSION_NUMBER__)%10)
S	#elif GFX_COMPILER == GFX_COMPILER_HIGHC
X	#elif 34 == 27
S		#define GFX_COMPILER_NAME					"Metaware High C/C++"
S	#elif GFX_COMPILER == GFX_COMPILER_HP
X	#elif 34 == 28
S		#define GFX_COMPILER_NAME					"HP C/aC++"
S		#ifdef __HP_aCC
S			#if __HP_aCC == 1
S				#define GFX_COMPILER_VERSION_MAJOR	(1)
S				#define GFX_COMPILER_VERSION_MINOR	(15)
S			#else
S				#define GFX_COMPILER_VERSION_MAJOR	((__HP_aCC)/10000)
S				#define GFX_COMPILER_VERSION_MINOR	(((__HP_aCC)/100)%100)
S				#define GFX_COMPILER_VERSION_PATCH	((__HP_aCC)%100)
S			#endif
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_IAR
X	#elif 34 == 29
S		#define GFX_COMPILER_NAME					"IAR C++"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			((__VER__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__VER__)%100)
S		#pragma diag_remark = Pe301
S		#pragma diag_remark = Pe083
S		#pragma diag_remark = Pe767
S		#pragma diag_remark = Pe188
S		#pragma diag_remark = Pe186
S		#pragma diag_remark = Pe068
S		#pragma diag_remark = Pa050
S	#elif GFX_COMPILER == GFX_COMPILER_IBMXL
X	#elif 34 == 30
S		#define GFX_COMPILER_NAME					"IBM XL C/C++"
S		#ifdef __xlC__
S			#define GFX_COMPILER_VERSION_MAJOR		((__xlC__)/0x100)
S			#define GFX_COMPILER_VERSION_MINOR		((__xlC__)%0x100)
S			#define GFX_COMPILER_VERSION_PATCH		((__xlC_ver__)/0x100)
S			#define GFX_COMPILER_VERSION_BUILD		((__xlC_ver__)%0x100)
S		#elif defined(__COMPILER_VER__)
S			#define GFX_COMPILER_VERSION_MAJOR		(((__COMPILER_VER__)/0x1000000)%0x10)
S			#define GFX_COMPILER_VERSION_MINOR		(((__COMPILER_VER__)/0x10000)%0x100)
S			#define GFX_COMPILER_VERSION_PATCH		((__COMPILER_VER__)/0x10000)
S		#elif defined(__IBMC__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__IBMC__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		(((__IBMC__)/10)%10)
S			#define GFX_COMPILER_VERSION_PATCH		((__IBMC__)%10)
S		#elif defined(__IBMCPP__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__IBMCPP__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		(((__IBMCPP__)/10)%10)
S			#define GFX_COMPILER_VERSION_PATCH		((__IBMCPP__)%10)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_IMAGECRAFT
X	#elif 34 == 31
S		#define GFX_COMPILER_NAME					"Imagecraft C"
S	#elif GFX_COMPILER == GFX_COMPILER_INTEL
X	#elif 34 == 32
S		#define GFX_COMPILER_NAME					"Intel ICC/ICPC"
S		#ifdef __INTEL_COMPILER
S			#define GFX_COMPILER_VERSION_MAJOR		((__INTEL_COMPILER)/100)
S			#define GFX_COMPILER_VERSION_MINOR		(((__INTEL_COMPILER)/10)%10)
S			#define GFX_COMPILER_VERSION_PATCH		((__INTEL_COMPILER)%10)
S			#ifdef __INTEL_COMPILER_BUILD_DATE
S				#define GFX_COMPILER_VERSION_BUILD	(__INTEL_COMPILER_BUILD_DATE)
S			#endif
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_KAI
X	#elif 34 == 33
S		#define GFX_COMPILER_NAME					"Kai C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__KCC_VERSION)/0x1000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__KCC_VERSION)/0x100)%0x10)
S		#define GFX_COMPILER_VERSION_PATCH			((__KCC_VERSION)%0x100)
N	#elif GFX_COMPILER == GFX_COMPILER_KEIL
X	#elif 34 == 34
N		#define GFX_COMPILER_NAME					"Keil"
N		#define GFX_COMPILER_TESTED					TRUE
N		#if defined(__ARMCC_VERSION)
X		#if 1L
N			#define GFX_COMPILER_VERSION_MAJOR		((__ARMCC_VERSION)/1000000)
N			#define GFX_COMPILER_VERSION_MINOR		(((__ARMCC_VERSION)/10000)%100)
N			#define GFX_COMPILER_VERSION_PATCH		((__ARMCC_VERSION)%10000)
N			#ifdef __EDG_VERSION__
N				#define GFX_COMPILER_VERSION_BUILD	(__EDG_VERSION__)
N			#endif
N		#elif defined(__CA__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__CA__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((__CA__)%100)
S		#elif defined(__C166__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__C166__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((__C166__)%100)
S		#elif defined(__C51__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__C51__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((__C51__)%100)
S		#elif defined(__C251__)
S			#define GFX_COMPILER_VERSION_MAJOR		((__C251__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((__C251__)%100)
N		#endif
N		#define DEPRECATED(msg)						__attribute__((deprecated(msg)))
N		#pragma anon_unions							// Allow anonymous unions
N		#pragma diag_remark 1293					// Turn off warning: assignment in condition
N		#pragma diag_remark 83						// Turn off warning: type qualifier specified more than once
N		#pragma diag_remark 767						// Turn off warning: conversion from pointer to smaller integer
N		#pragma diag_remark 188						// Turn off warning: enumerated type mixed with another type
N		#ifndef GFXINLINE							// Get the Keil definition for inline
N			#define GFXINLINE	__inline
N		#endif
N		#define __LITTLE_IF_NOT_BIG__				// Oops - Defines __BIG_ENDIAN but not __LITTLE_ENDIAN
N	#elif GFX_COMPILER == GFX_COMPILER_LCC
S		#define GFX_COMPILER_NAME					"LCC"
S	#elif GFX_COMPILER == GFX_COMPILER_METROWORKS
S		#define GFX_COMPILER_NAME					"Metroworks CodeWarrior"
S		#define GFX_COMPILER_VERSION_MAJOR			((__MWERKS__)/0x1000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__MWERKS__)/0x100)%0x10)
S		#define GFX_COMPILER_VERSION_PATCH			((__MWERKS__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_MICROTEC
S		#define GFX_COMPILER_NAME					"Microtec C/C++"
S	#elif GFX_COMPILER == GFX_COMPILER_MICROWAY
S		#define GFX_COMPILER_NAME					"Microway NDP C"
S	#elif GFX_COMPILER == GFX_COMPILER_MINGW32
S		#define GFX_COMPILER_NAME					"MingW32"
S		#define GFX_COMPILER_TESTED					TRUE
S		#define GFX_COMPILER_VERSION_MAJOR			(__GNUC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__GNUC_MINOR__)
S		#ifdef __GNUC_PATCHLEVEL__
S			#define GFX_COMPILER_VERSION_PATCH		(__GNUC_PATCHLEVEL__)
S		#endif
S		#define DEPRECATED(msg)						__attribute__((deprecated(msg)))
S	#elif GFX_COMPILER == GFX_COMPILER_MINGW64
S		#define GFX_COMPILER_NAME					"MingW64"
S		#define GFX_COMPILER_VERSION_MAJOR			(__GNUC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__GNUC_MINOR__)
S		#ifdef __GNUC_PATCHLEVEL__
S			#define GFX_COMPILER_VERSION_PATCH		(__GNUC_PATCHLEVEL__)
S		#endif
S		#define DEPRECATED(msg)						__attribute__((deprecated(msg)))
S	#elif GFX_COMPILER == GFX_COMPILER_MIPSPRO
S		#define GFX_COMPILER_NAME					"MIPS Pro"
S		#ifdef _SGI_COMPILER_VERSION
S			#define GFX_COMPILER_VERSION_MAJOR		((_SGI_COMPILER_VERSION)/100)
S			#define GFX_COMPILER_VERSION_MINOR		(((_SGI_COMPILER_VERSION)/10)%10)
S			#define GFX_COMPILER_VERSION_PATCH		((_SGI_COMPILER_VERSION)%10)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((_COMPILER_VERSION)/100)
S			#define GFX_COMPILER_VERSION_MINOR		(((_COMPILER_VERSION)/10)%10)
S			#define GFX_COMPILER_VERSION_PATCH		((_COMPILER_VERSION)%10)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_MIRACLE
S		#define GFX_COMPILER_NAME					"Miracle C"
S	#elif GFX_COMPILER == GFX_COMPILER_MPW
S		#define GFX_COMPILER_NAME					"MPW C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__MRC__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			((__MRC__)%0x100)
S	#elif GFX_COMPILER == GFX_COMPILER_NORCROFT
S		#define GFX_COMPILER_NAME					"Norcroft C"
S	#elif GFX_COMPILER == GFX_COMPILER_NWCC
S		#define GFX_COMPILER_NAME					"NWCC"
S	#elif GFX_COMPILER == GFX_COMPILER_OPEN64
S		#define GFX_COMPILER_NAME					"Open64"
S		#define GFX_COMPILER_VERSION_MAJOR			(__OPENCC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__OPENCC_MINOR__)
S	#elif GFX_COMPILER == GFX_COMPILER_OSS
S		#define GFX_COMPILER_NAME					"Oracle Solaris Studio"
S		#ifdef __SUNPRO_C >= 0x1000
S			#define GFX_COMPILER_VERSION_MAJOR		((__SUNPRO_C)/0x1000)
S			#define GFX_COMPILER_VERSION_MINOR		(((((__SUNPRO_C)/0x100)%0x10)*10) + (((__SUNPRO_C)/0x10)%10))
S			#define GFX_COMPILER_VERSION_PATCH		((__SUNPRO_C)%0x10)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((__SUNPRO_C)/0x100)
S			#define GFX_COMPILER_VERSION_MINOR		(((__SUNPRO_C)/0x10)%0x10)
S			#define GFX_COMPILER_VERSION_PATCH		((__SUNPRO_C)%0x10)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_PACIFIC
S		#define GFX_COMPILER_NAME					"Pacific C"
S	#elif GFX_COMPILER == GFX_COMPILER_PALM
S		#define GFX_COMPILER_NAME					"Palm C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((_PACC_VER)/0x10000000)
S		#define GFX_COMPILER_VERSION_MINOR			(((_PACC_VER)/0x100000)%0x100)
S		#define GFX_COMPILER_VERSION_PATCH			(((_PACC_VER)/0x1000)%0x100)
S		#define GFX_COMPILER_VERSION_BUILD			((_PACC_VER)%0x1000)
S	#elif GFX_COMPILER == GFX_COMPILER_PELLES
S		#define GFX_COMPILER_NAME					"Pelles C"
S		#define GFX_COMPILER_VERSION_MAJOR			((__POCC__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__POCC__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_PGCC
S		#define GFX_COMPILER_NAME					"Portland PGCC/PGCPP"
S		#define GFX_COMPILER_VERSION_MAJOR			(__PGIC__)
S		#define GFX_COMPILER_VERSION_MINOR			(__PGIC_MINOR__)
S		#define GFX_COMPILER_VERSION_PATCH			(__PGIC_PATCHLEVEL__)
S	#elif GFX_COMPILER == GFX_COMPILER_RENESAS
S		#define GFX_COMPILER_NAME					"Renesas C/C++"
S		#ifdef __HITACHI_VERSION__
S			#define GFX_COMPILER_VERSION_MAJOR		((__HITACHI_VERSION__)/0x100)
S			#define GFX_COMPILER_VERSION_MINOR		((__HITACHI_VERSION__)%0x100)
S		#elif __RENESAS_VERSION__ < 0x10000
S			#define GFX_COMPILER_VERSION_MAJOR		((__RENESAS_VERSION__)/0x100)
S			#define GFX_COMPILER_VERSION_MINOR		((__RENESAS_VERSION__)%0x100)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((__RENESAS_VERSION__)/0x1000000)
S			#define GFX_COMPILER_VERSION_MINOR		(((__RENESAS_VERSION__)/0x10000)%0x100)
S			#define GFX_COMPILER_VERSION_PATCH		(((__RENESAS_VERSION__)/0x100)%0x100)
S			#define GFX_COMPILER_VERSION_BUILD		((__RENESAS_VERSION__)%0x100)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_SASC
S		#define GFX_COMPILER_NAME					"SAS/C"
S		#ifdef __SASC__
S			#define GFX_COMPILER_VERSION_MAJOR		((__SASC__)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((__SASC__)%100)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		(__VERSION__)
S			#define GFX_COMPILER_VERSION_MINOR		(__REVISION__)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_SCO
S		#define GFX_COMPILER_NAME					"SCO OpenServer"
S	#elif GFX_COMPILER == GFX_COMPILER_SDCC
S		#define GFX_COMPILER_NAME					"Small Device C"
S		#define GFX_COMPILER_VERSION_MAJOR			((SDCC)/100)
S		#define GFX_COMPILER_VERSION_MINOR			(((SDCC)/10)%10)
S		#define GFX_COMPILER_VERSION_PATCH			((SDCC)%10)
S	#elif GFX_COMPILER == GFX_COMPILER_SN
S		#define GFX_COMPILER_NAME					"SN"
S	#elif GFX_COMPILER == GFX_COMPILER_STRATUS
S		#define GFX_COMPILER_NAME					"Stratus VOS C"
S		#define GFX_COMPILER_VERSION_MAJOR			(__VOSC__)
S	#elif GFX_COMPILER == GFX_COMPILER_SYMANTEC
S		#define GFX_COMPILER_NAME					"Symantec C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__SC__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			((__SC__)%0x100)
S	#elif GFX_COMPILER == GFX_COMPILER_TENDRA
S		#define GFX_COMPILER_NAME					"TenDRA C/C++"
S	#elif GFX_COMPILER == GFX_COMPILER_THINK
S		#define GFX_COMPILER_NAME					"Think C"
S		#ifdef THINKC4
S			#define GFX_COMPILER_VERSION_MAJOR		(4)
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		(3)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_TI
S		#define GFX_COMPILER_NAME					"Texas Instruments C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((SDCC)/1000000)
S		#define GFX_COMPILER_VERSION_MINOR			(((SDCC)/1000)%1000)
S		#define GFX_COMPILER_VERSION_PATCH			((SDCC)%1000)
S	#elif GFX_COMPILER == GFX_COMPILER_TINYC
S		#define GFX_COMPILER_NAME					"Tiny C"
S		#define GFX_COMPILER_TESTED					TRUE
S	#elif GFX_COMPILER == GFX_COMPILER_TURBOC
S		#define GFX_COMPILER_NAME					"Borland Turbo C/C++"
S		#if __TURBOC__ < 0x295 || __TURBOC__ >= 0x400
S			#define GFX_COMPILER_VERSION_MAJOR		((__TURBOC__)/0x100)
S			#define GFX_COMPILER_VERSION_MINOR		((__TURBOC__)%0x100)
S		#elif __TURBOC__ == 0x295
S			#define GFX_COMPILER_VERSION_MAJOR		(1)
S			#define GFX_COMPILER_VERSION_MINOR		(0)
S		#elif __TURBOC__ == 0x296
S			#define GFX_COMPILER_VERSION_MAJOR		(1)
S			#define GFX_COMPILER_VERSION_MINOR		(1)
S		#elif __TURBOC__ == 0x297
S			#define GFX_COMPILER_VERSION_MAJOR		(2)
S			#define GFX_COMPILER_VERSION_MINOR		(0)
S		#endif
S	#elif GFX_COMPILER == GFX_COMPILER_ULTIMATE
S		#define GFX_COMPILER_NAME					"Ultimate C/C++"
S		#define GFX_COMPILER_VERSION_MAJOR			(_MAJOR_REV)
S		#define GFX_COMPILER_VERSION_MINOR			(_MINOR_REV)
S	#elif GFX_COMPILER == GFX_COMPILER_USL
S		#define GFX_COMPILER_NAME					"USL C"
S		#define GFX_COMPILER_VERSION_MAJOR			((__SCO_VERSION__)/100000000)
S		#define GFX_COMPILER_VERSION_MINOR			(((__SCO_VERSION__)/1000000)%100)
S		#define GFX_COMPILER_VERSION_BUILD			((__SCO_VERSION__)%1000000)
S	#elif GFX_COMPILER == GFX_COMPILER_VBCC
S		#define GFX_COMPILER_NAME					"VBCC"
S	#elif GFX_COMPILER == GFX_COMPILER_VS
S		#define GFX_COMPILER_NAME					"Microsoft Visual Studio"
S		#ifdef _MSC_FULL_VER
S			#if _MSC_FULL_VER < 100000000
S				#define GFX_COMPILER_VERSION_MAJOR	((_MSC_FULL_VER)/1000000)
S				#define GFX_COMPILER_VERSION_MINOR	(((_MSC_FULL_VER)/10000)%100)
S				#define GFX_COMPILER_VERSION_PATCH	(((_MSC_FULL_VER)/10000)%10000)
S			#else
S				#define GFX_COMPILER_VERSION_MAJOR	((_MSC_FULL_VER)/10000000)
S				#define GFX_COMPILER_VERSION_MINOR	(((_MSC_FULL_VER)/100000)%100)
S				#define GFX_COMPILER_VERSION_PATCH	(((_MSC_FULL_VER)/100000)%10000)
S			#endif
S		#else
S			#define GFX_COMPILER_VERSION_MAJOR		((_MSC_VER)/100)
S			#define GFX_COMPILER_VERSION_MINOR		((_MSC_VER)%100)
S		#endif
S		#ifdef _MSC_BUILD
S			#define GFX_COMPILER_VERSION_BUILD		(_MSC_BUILD)
S		#endif
S		#define DEPRECATED(msg)						__declspec(deprecated(msg))
S	#elif GFX_COMPILER == GFX_COMPILER_WATCOM
S		#define GFX_COMPILER_NAME					"Watcom C"
S		#define GFX_COMPILER_VERSION_MAJOR			((__WATCOMC__)/100)
S		#define GFX_COMPILER_VERSION_MINOR			((__WATCOMC__)%100)
S	#elif GFX_COMPILER == GFX_COMPILER_ZTC
S		#define GFX_COMPILER_NAME					"Zortech C++"
S		#define GFX_COMPILER_VERSION_MAJOR			((__ZTC__)/0x100)
S		#define GFX_COMPILER_VERSION_MINOR			(((__ZTC__)/0x10)%0x10)
S		#define GFX_COMPILER_VERSION_PATCH			((__ZTC__)%0x10)
N	#endif
N	#ifndef GFX_COMPILER_TESTED
S		#define GFX_COMPILER_TESTED		FALSE
N	#endif
N	/************************************ End Compiler Settings *************************/
N
N	/**
N	 * @brief	The name of the compiler set or auto-detected
N	 * @details	Read-Only
N	 * @note	If you successfully compile ugfx with an unknown compiler
N	 * 			please report back to us via the ugfx forum so that we can add
N	 * 			it to our list of compilers to detect.
N	 */
N	#ifndef GFX_COMPILER_NAME
S		#define GFX_COMPILER_NAME		"Unknown"
S		#warning "You are using an unknown compiler. Please report this on the ugfx forum"
N	#endif
N
N	/**
N	 * @brief	This compiler is tested with ugfx
N	 * @details	Read-Only
N	 * @note	If you successfully compile ugfx with an un-tested compiler
N	 * 			please report back to us via the ugfx forum any compile errors
N	 * 			or warnings so that we can add it to our list of tested compilers.
N	 * @note	Although the compiler being used may be tested, it may have been
N	 * 			tested with a different compiler version. Please report any problems
N	 * 			on the ugfx forum.
N	 */
N	#if !GFX_COMPILER_TESTED
X	#if ! -1
S		#warning "You are using an un-tested compiler. Please report any compile errors or warnings on the ugfx forum"
N	#endif
N
N	/**
N	 * @brief	The major version number of the compiler
N	 * @details	Read-Only. It will be set to 0 if it can't be automatically detected.
N	 * @note	If you know how to detect a version number for a compiler and we haven't,
N	 * 			please report this on the ugfx forum.
N	 */
N	#ifndef GFX_COMPILER_VERSION_MAJOR
S		#define GFX_COMPILER_VERSION_MAJOR	0
N	#endif
N	/**
N	 * @brief	The minor version number of the compiler
N	 * @details	Read-Only. It will be set to 0 if it can't be automatically detected.
N	 * @note	If you know how to detect a version number for a compiler and we haven't,
N	 * 			please report this on the ugfx forum.
N	 */
N	#ifndef GFX_COMPILER_VERSION_MINOR
S		#define GFX_COMPILER_VERSION_MINOR	0
N	#endif
N	/**
N	 * @brief	The patch version number of the compiler
N	 * @details	Read-Only. It will be set to 0 if it can't be automatically detected.
N	 * @note	If you know how to detect a version number for a compiler and we haven't,
N	 * 			please report this on the ugfx forum.
N	 */
N	#ifndef GFX_COMPILER_VERSION_PATCH
S		#define GFX_COMPILER_VERSION_PATCH	0
N	#endif
N	/**
N	 * @brief	The build number of the compiler
N	 * @details	Read-Only. It will be set to 0 if it can't be automatically detected.
N	 * @note	If you know how to detect a version number for a compiler and we haven't,
N	 * 			please report this on the ugfx forum.
N	 */
N	#ifndef GFX_COMPILER_VERSION_BUILD
S		#define GFX_COMPILER_VERSION_BUILD	0
N	#endif
N
N	/**
N	 * @brief	Enable CPU specific code
N	 * @details	Auto detected by default but it can be overridden in gfxconf.h
N	 * @note	This is setting enables optimisations and code options that are CPU specific.
N	 * @note	If the CPU can't be auto-detected it is set to GFX_CPU_UNKNOWN
N	 * @note	Auto-detection is particularly weak currently particularly for ARM and other
N	 * 			non-Intel platforms. This doesn't normally matter very much as everything is
N	 * 			handled with more conservative code. Where you might want to add a manual CPU
N	 * 			define is for operating systems such as RAW32 that use the generic ugfx thread code
N	 * 			rather than operating system defined threading routines. For these platforms specifying
N	 * 			the CPU can make a decent performance improvement.
N	 * @{
N	 */
N	#ifndef GFX_CPU
N		#define GFX_CPU					GFX_CPU_UNKNOWN
N	#endif
N	#define GFX_CPU_UNKNOWN				0		//**< Unknown cpu
N	#define GFX_CPU_CORTEX_M0			0x01	//**< Cortex M0
N	#define GFX_CPU_CORTEX_M1			0x02	//**< Cortex M1
N	#define GFX_CPU_CORTEX_M2			0x03	//**< Cortex M2
N	#define GFX_CPU_CORTEX_M3			0x04	//**< Cortex M3
N	#define GFX_CPU_CORTEX_M4			0x05	//**< Cortex M4
N	#define GFX_CPU_CORTEX_M4_FP		0x06	//**< Cortex M4 with hardware floating point
N	#define GFX_CPU_CORTEX_M7			0x07	//**< Cortex M7
N	#define GFX_CPU_CORTEX_M7_FP		0x08	//**< Cortex M7 with hardware floating point
N	#define GFX_CPU_X86					0x10	//**< Intel x86
N	#define GFX_CPU_X64					0x11	//**< Intel x64
N	#define GFX_CPU_IA64				0x12	//**< Intel Itanium
N	#define GFX_CPU_POWERPC32			0x20	//**< PowerPC
N	#define GFX_CPU_POWERPC64			0x21	//**< PowerPC
N	#define GFX_CPU_SPARC				0x22	//**< Sparc
N	/** @} */
N
N	/************************************ Start CPU Auto-Detection *****************************/
N	#if GFX_CPU == GFX_CPU_UNKNOWN
X	#if 0 == 0
N		#undef GFX_CPU
N		#if defined(__ia64) || defined(__itanium__) || defined(_M_IA64)
X		#if 0L || 0L || 0L
S			#define GFX_CPU		GFX_CPU_IA64
S		#elif defined(__powerpc__) || defined(__ppc__) || defined(__PPC__)
X		#elif 0L || 0L || 0L
S			#if defined(__powerpc64__) || defined(__ppc64__) || defined(__PPC64__) || defined(__64BIT__) || defined(_LP64) || defined(__LP64__)
S				#define GFX_CPU		GFX_CPU_POWERPC64
S			#else
S				#define GFX_CPU		GFX_CPU_POWERPC32
S			#endif
S		#elif defined(__sparc)
X		#elif 0L
S			#define GFX_CPU		GFX_CPU_SPARC
S		#elif defined(__x86_64__) || defined(_M_X64) || defined(_M_AMD64) || defined(_WIN64)
X		#elif 0L || 0L || 0L || 0L
S			#define GFX_CPU		GFX_CPU_X64
S		#elif defined(__i386) || defined(_M_IX86) || defined(_WIN32)
X		#elif 0L || 0L || 0L
S			#define GFX_CPU		GFX_CPU_X86
N		#else
N			#define GFX_CPU		GFX_CPU_UNKNOWN
N		#endif
N	#endif
N	/************************************ End CPU Auto-Detection *****************************/
N
N	/************************************ Start CPU Settings *****************************/
N	#if GFX_CPU == GFX_CPU_X86
X	#if 0 == 0x10
S		#undef GFX_CPU_NO_ALIGNMENT_FAULTS
S		#define GFX_CPU_NO_ALIGNMENT_FAULTS		TRUE
S		#undef GFX_CPU_ENDIAN
S		#define GFX_CPU_ENDIAN					GFX_CPU_ENDIAN_LITTLE
S	#elif GFX_CPU == GFX_CPU_X64
X	#elif 0 == 0x11
S		#undef GFX_CPU_ENDIAN
S		#define GFX_CPU_ENDIAN					GFX_CPU_ENDIAN_LITTLE
N	#endif
N	/************************************ End CPU Settings *****************************/
N
N	/**
N	 * @brief   Does this CPU automatically handle alignment faults
N	 * @details	Defaults to FALSE
N	 * @note	Setting this to TRUE can decrease code size and increase speed but
N	 * 			it should not be turned on with a CPU that can generate
N	 * 			alignment segfaults.
N	 * @note	If you are unsure leave this as FALSE as that generates
N	 * 			the more conservative code.
N	 * @note	For some CPU's this can be auto-detected.
N	 */
N	#ifndef GFX_CPU_NO_ALIGNMENT_FAULTS
N		#define GFX_CPU_NO_ALIGNMENT_FAULTS		FALSE
N	#endif
N
N	/**
N	 * @brief	The endianness of the CPU
N	 * @details	Auto detected by default but it can be overridden in gfxconf.h
N	 * @note	This is setting enables optimisations that are cpu endian specific.
N	 * @note	If the endianness can't be auto-detected it is set to GFX_CPU_ENDIAN_UNKNOWN
N	 * 			and safe (but potentially slow) code is generated
N	 * @{
N	 */
N	#ifndef GFX_CPU_ENDIAN
N		#define GFX_CPU_ENDIAN			GFX_CPU_ENDIAN_UNKNOWN
N	#endif
N	#define GFX_CPU_ENDIAN_UNKNOWN		0				//**< Unknown endianness
N	#define GFX_CPU_ENDIAN_LITTLE		0x03020100		//**< Little endian
N	#define GFX_CPU_ENDIAN_BIG			0x00010203		//**< Big endian
N	#define GFX_CPU_ENDIAN_WBDWL		0x02030001		//**< Words are big endian, DWords are little endian eg. Honeywell 316
N	#define GFX_CPU_ENDIAN_WLDWB		0x01000302		//**< Words are little endian, DWords are big endian eg PDP-11
N	/** @} */
N
N	/************************************ Start Endianness Auto-Detection *****************************/
N	#if GFX_CPU_ENDIAN == GFX_CPU_ENDIAN_UNKNOWN
X	#if 0 == 0
N		#undef GFX_CPU_ENDIAN
N		#if (defined(__BYTE_ORDER__)&&defined(__ORDER_BIG_ENDIAN__)&&(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)) 			\
N				|| (defined(__BYTE_ORDER)&&defined(__BIG_ENDIAN)&&(__BYTE_ORDER == __BIG_ENDIAN))						\
N				|| defined(__BIG_ENDIAN__) || defined(__BIG_ENDIAN) || defined(_BIG_ENDIAN) 							\
N				|| defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) 										\
N				|| defined(__THUMBEB__) || defined(__AARCH64EB__) || defined(__ARMEB__)
X		#if (0L&&0L&&(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)) 							|| (0L&&0L&&(__BYTE_ORDER == __BIG_ENDIAN))										|| 0L || 0L || 0L 											|| 0L || 0L || 0L 														|| 0L || 0L || 0L
S			#define GFX_CPU_ENDIAN			GFX_CPU_ENDIAN_BIG
N		#elif (defined(__BYTE_ORDER__)&&defined(__ORDER_LITTLE_ENDIAN__)&&(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))	\
N				|| (defined(__BYTE_ORDER)&&defined(_LITTLE_ENDIAN)&&(__BYTE_ORDER == _LITTLE_ENDIAN))					\
N				|| defined(__LITTLE_ENDIAN__) || defined(__LITTLE_ENDIAN) || defined(_LITTLE_ENDIAN)					\
N				|| defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL)											\
N				|| defined(__THUMBEL__) || defined(__AARCH64EL__) || defined(__ARMEL__)									\
N				|| defined(__LITTLE_IF_NOT_BIG__)
X		#elif (0L&&0L&&(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))					|| (0L&&0L&&(__BYTE_ORDER == _LITTLE_ENDIAN))									|| 0L || 0L || 0L									|| 0L || 0L || 0L															|| 0L || 0L || 0L													|| 1L
N			#define GFX_CPU_ENDIAN			GFX_CPU_ENDIAN_LITTLE
N		#else
S			#define GFX_CPU_ENDIAN			GFX_CPU_ENDIAN_UNKNOWN
N		#endif
N	#endif
N	/************************************ End Endianness Auto-Detection *****************************/
N
N	/**
N	 * @brief   Mark a function as deprecated.
N	 */
N	#ifndef DEPRECATED
S		#define DEPRECATED(msg)
N	#endif
N
N	/**
N	 * @brief   Mark a function as inline.
N	 */
N	#ifndef GFXINLINE
S		#define GFXINLINE	inline
N	#endif
N
N/** @} */
N
N#endif /* _GFX_COMPILERS_H */
N/** @} */
N
L 46 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N
N/**
N * @name    GFX sub-systems that can be turned on
N * @{
N */
N	/**
N	 * @brief   GFX Driver API
N	 * @details	Defaults to TRUE
N	 * @note	Not much useful can be done without a driver
N	 */
N	#ifndef GFX_USE_GDRIVER
N		#define GFX_USE_GDRIVER	TRUE
N	#endif
N	/**
N	 * @brief   GFX Graphics Display Basic API
N	 * @details	Defaults to FALSE
N	 * @note	Also add the specific hardware driver to your makefile.
N	 * 			Eg.  include $(GFXLIB)/drivers/gdisp/Nokia6610/driver.mk
N	 */
N	#ifndef GFX_USE_GDISP
S		#define GFX_USE_GDISP	FALSE
N	#endif
N	/**
N	 * @brief   GFX Graphics Windowing API
N	 * @details	Defaults to FALSE
N	 * @details	Extends the GDISP API to add the concept of graphic windows.
N	 * @note	Also supports high-level "window" objects such as console windows,
N	 * 			buttons, graphing etc
N	 */
N	#ifndef GFX_USE_GWIN
N		#define GFX_USE_GWIN	FALSE
N	#endif
N	/**
N	 * @brief   GFX Event API
N	 * @details	Defaults to FALSE
N	 * @details	Defines the concept of a "Source" that can send "Events" to "Listeners".
N	 */
N	#ifndef GFX_USE_GEVENT
N		#define GFX_USE_GEVENT	FALSE
N	#endif
N	/**
N	 * @brief   GFX Timer API
N	 * @details	Defaults to FALSE
N	 * @details	Provides thread context timers - both one-shot and periodic.
N	 */
N	#ifndef GFX_USE_GTIMER
N		#define GFX_USE_GTIMER	FALSE
N	#endif
N	/**
N	 * @brief   GFX Queue API
N	 * @details	Defaults to FALSE
N	 * @details	Provides queue management.
N	 */
N	#ifndef GFX_USE_GQUEUE
N		#define GFX_USE_GQUEUE	FALSE
N	#endif
N	/**
N	 * @brief   GFX Input Device API
N	 * @details	Defaults to FALSE
N	 * @note	Also add the specific hardware drivers to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/ginput/toggle/Pal/driver.mk
N	 * 			and...
N	 * 				include $(GFXLIB)/drivers/ginput/touch/MCU/driver.mk
N	 */
N	#ifndef GFX_USE_GINPUT
N		#define GFX_USE_GINPUT	FALSE
N	#endif
N	/**
N	 * @brief   GFX Generic Periodic ADC API
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_GADC
N		#define GFX_USE_GADC	FALSE
N	#endif
N	/**
N	 * @brief   GFX Audio API
N	 * @details	Defaults to FALSE
N	 * @note	Also add the specific hardware drivers to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/gaudio/GADC/driver.mk
N	 */
N	#ifndef GFX_USE_GAUDIO
N		#define GFX_USE_GAUDIO	FALSE
N	#endif
N	/**
N	 * @brief   GFX Miscellaneous Routines API
N	 * @details	Defaults to FALSE
N	 * @note	Turning this on without turning on any GMISC_NEED_xxx macros will result
N	 * 			in no extra code being compiled in. GMISC is made up from the sum of its
N	 * 			parts.
N	 */
N	#ifndef GFX_USE_GMISC
N		#define GFX_USE_GMISC	FALSE
N	#endif
N	/**
N	 * @brief   GFX File API
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_GFILE
N		#define GFX_USE_GFILE	FALSE
N	#endif
N	/**
N	 * @brief   GFX Translation Support API
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_GTRANS
N		#define GFX_USE_GTRANS	FALSE
N	#endif
N/** @} */
N
N/**
N * Get all the options for each sub-system.
N *
N */
N#include "src/gos/gos_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gos/gos_options.h
N * @brief   GOS - Operating System options header file.
N *
N * @addtogroup GOS
N * @{
N */
N
N#ifndef _GOS_OPTIONS_H
N#define _GOS_OPTIONS_H
N
N/**
N * @name    The operating system to use. One (and only one) of these must be defined.
N * @{
N */
N	/**
N	 * @brief   Use ChibiOS
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_CHIBIOS
N		#define GFX_USE_OS_CHIBIOS		FALSE
N	#endif
N	/**
N	 * @brief   Use FreeRTOS
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_FREERTOS
N		#define GFX_USE_OS_FREERTOS		FALSE
N	#endif
N	/**
N	 * @brief   Use Win32
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_WIN32
N		#define GFX_USE_OS_WIN32		FALSE
N	#endif
N	/**
N	 * @brief   Use a linux based system running X11
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_LINUX
N		#define GFX_USE_OS_LINUX		FALSE
N	#endif
N	/**
N	 * @brief   Use a Mac OS-X based system
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_OSX
N		#define GFX_USE_OS_OSX			FALSE
N	#endif
N	/**
N	 * @brief   Use a Raw 32-bit CPU based system (Bare Metal)
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_RAW32
S		#define GFX_USE_OS_RAW32		FALSE
N	#endif
N	/**
N	 * @brief   Use a eCos
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_ECOS
N		#define GFX_USE_OS_ECOS			FALSE
N	#endif
N	/**
N	 * @brief   Use RAWRTOS
N	 * @details Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_RAWRTOS
N		#define GFX_USE_OS_RAWRTOS		FALSE
N	#endif
N	/**
N	 * @brief   Use Arduino
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_ARDUINO
N		#define GFX_USE_OS_ARDUINO		FALSE
N	#endif
N	/**
N	 * @brief	Use CMSIS RTOS compatible OS
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_CMSIS
N		#define GFX_USE_OS_CMSIS		FALSE
N	#endif
N	/**
N	 * @brief   Use Keil CMSIS
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_KEIL
N		#define GFX_USE_OS_KEIL			FALSE
N	#endif
N	/**
N	 * @brief   Use NIOS-II
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_NIOS
N		#define GFX_USE_OS_NIOS			FALSE
N	#endif
N	/**
N	 * @brief   Use Qt
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFX_USE_OS_QT
N		#define GFX_USE_OS_QT			FALSE
N	#endif
N/**
N * @}
N *
N * @name    GOS Optional Parameters
N * @{
N */
N 	/**
N 	 * @name	GFX_OS_PRE_INIT_FUNCTION
N 	 * @brief	A macro that defines a function that uGFX calls as part of gfxInit() in order to initialize hardware
N 	 * @details	Defaults to undefined
N 	 * @note	If defined the specified function is called before any other initialization.
N 	 * 			It is typically used to initialize hardware or the C runtime.
N 	 * @note	Eg. In your source:
N 	 * 					void myHardwareInitRoutine(void);
N 	 * 				In gfxconf.h:
N 	 * 					#define GFX_OS_PRE_INIT_FUNCTION myHardwareInitRoutine
N 	 */
N    //#define GFX_OS_PRE_INIT_FUNCTION                 myHardwareInitRoutine
N 	/**
N 	 * @name	GFX_OS_EXTRA_INIT_FUNCTION
N 	 * @brief	A macro that defines a function that uGFX calls as part of gfxInit() just after initializing
N 	 * 			the operating system.
N 	 * @details	Defaults to undefined
N 	 * @note	If defined the specified function is called just after the operating system is initialized by
N 	 * 			gfxInit(). Note that if gfxInit() is set up to not initialize an operating system it is called after
N 	 * 			the GFX_OS_PRE_INIT_FUNCTION function (if any).
N 	 * @note	Eg. In your source:
N 	 * 					void myOSInitRoutine(void);
N 	 * 				In gfxconf.h:
N 	 * 					#define GFX_OS_EXTRA_INIT_FUNCTION myOSInitRoutine
N 	 */
N    //#define GFX_OS_EXTRA_INIT_FUNCTION               myOSInitRoutine
N	/**
N 	 * @name	GFX_OS_EXTRA_DEINIT_FUNCTION
N 	 * @brief	A macro that defines a function that uGFX calls as part of gfxDeInit() just before de-initializing
N 	 * 			the operating system.
N 	 * @details	Defaults to undefined
N 	 * @note	If defined the specified function is called just before the operating system is de-initialized by
N 	 * 			gfxDeInit().
N 	 * @note	Eg. In your source:
N 	 * 					void myOSDeInitRoutine(void);
N 	 * 				In gfxconf.h:
N 	 * 					#define GFX_OS_EXTRA_DEINIT_FUNCTION myOSDeInitRoutine
N 	 */
N    //#define GFX_OS_EXTRA_DEINIT_FUNCTION             myOSDeInitRoutine
N 	/**
N 	 * @brief	Should uGFX avoid initializing the operating system
N 	 * @details	Defaults to FALSE
N 	 * @note	This is not relevant to all operating systems eg Win32 never initializes the
N 	 * 			operating system as uGFX runs as an application outside the boot process.
N 	 * @note	Operating system initialization is not necessarily implemented for all
N 	 * 			operating systems yet even when it is relevant. These operating systems
N 	 * 			will display a compile warning reminding you to initialize the operating
N 	 * 			system in your application code. Note that on these operating systems the
N 	 * 			demo applications will not work without modification.
N 	 */
N 	#ifndef GFX_OS_NO_INIT
N 		#define GFX_OS_NO_INIT			FALSE
N 	#endif
N 	/**
N 	 * @brief	Turn off warnings about initializing the operating system
N 	 * @details	Defaults to FALSE
N 	 * @note	This is only relevant where GOS cannot initialize the operating
N 	 * 			system automatically or the operating system initialization has been
N 	 * 			explicitly turned off.
N 	 */
N	#ifndef GFX_OS_INIT_NO_WARNING
N		#define GFX_OS_INIT_NO_WARNING	FALSE
N	#endif
N 	/**
N 	 * @brief	Should uGFX stuff be added to the FreeRTOS+Tracer
N 	 * @details	Defaults to FALSE
N 	 */
N 	#ifndef GFX_FREERTOS_USE_TRACE
N 		#define GFX_FREERTOS_USE_TRACE	FALSE
N 	#endif
N 	/**
N 	 * @brief	How much RAM should uGFX use for the heap when using its own internal heap allocator
N 	 * @details	Defaults to 0.
N 	 * @note	Only used when the internal ugfx heap allocator is used
N 	 * 				(GFX_USE_OS_RAW32, GFX_USE_OS_ARDUINO, GFX_US_OS_KEIL, GFX_USE_OS_CMSIS)
N 	 * @note	If 0 then the standard C runtime malloc(), free() and realloc()
N 	 * 			are used.
N 	 * @note	If it is non-zero then this is the number of bytes of RAM
N 	 * 			to use for the heap (gfxAlloc() and gfxFree()). No C
N 	 * 			runtime routines will be used and a new routine @p gfxAddHeapBlock()
N 	 * 			is added allowing the user to add extra memory blocks to the heap.
N 	 */
N	#ifndef GFX_OS_HEAP_SIZE
S		#define GFX_OS_HEAP_SIZE		0
N	#endif
N 	/**
N 	 * @brief	Enable wrappers for malloc() and free()
N 	 * @details	Defaults to FALSE
N 	 * @note	If enabled, malloc() and free() will be implemented as wrappers that call gfxAlloc() and
N 	 *			gfxFree() in order to provide portability to libraries using these function.
N 	 * @note	Enabling this can solve 'unresolved _sbrk' issues
N 	 * @note	It is strongly recommended to always use gfxAlloc() and gfxFree() directy to ensure
N 	 *			portability of uGFX applications across all platforms.
N 	 */
N	#ifndef GFX_EMULATE_MALLOC
N		#define GFX_EMULATE_MALLOC	FALSE
N	#endif
N/** @} */
N
N#endif /* _GOS_OPTIONS_H */
N/** @} */
L 162 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gdriver/gdriver_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdriver/gdriver_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdriver/gdriver_options.h
N * @brief   GDRIVER - Driver options header file.
N *
N * @addtogroup GDRIVER
N * @{
N */
N
N#ifndef _GDRIVER_OPTIONS_H
N#define _GDRIVER_OPTIONS_H
N
N/**
N * @name    GDRIVER Functionality to be included
N * @{
N */
N/**
N * @}
N *
N * @name    GDRIVER Optional Parameters
N * @{
N */
N/** @} */
N
N#endif /* _GDRIVER_OPTIONS_H */
N/** @} */
L 163 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gfile/gfile_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gfile/gfile_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gfile/gfile_options.h
N * @brief   GFILE - File IO options header file.
N *
N * @addtogroup GFILE
N * @{
N */
N
N#ifndef _GFILE_OPTIONS_H
N#define _GFILE_OPTIONS_H
N
N/**
N * @name    GFILE Functionality to be included
N * @{
N */
N	/**
N	 * @brief	Should the filesystem not be mounted automatically
N	 * @details	The filesystem is normally mounted automatically if the
N	 *			user does not do it manually. This option turns that off
N	 *			so the user must manually mount the file-system first.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFILE_NEED_NOAUTOMOUNT
N		#define GFILE_NEED_NOAUTOMOUNT	FALSE
N	#endif
N	/**
N	 * @brief	Should the filesystem be synced automatically
N	 * @details	The filesystem will automatically be synced after an open() or
N	 *			write() call unless this feature is disabled.
N	 * @details	If this feature is disabled, the user should sync the filesystem
N	 *			himself using @p gfileSync()
N	 * @details	Not all filesystems implement the syncing feature. This feature will
N	 *			have no effect in such a case.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFILE_NEED_NOAUTOSYNC
N		#define GFILE_NEED_NOAUTOSYNC	FALSE
N	#endif
N	/**
N	 * @brief   Include printg, fprintg etc functions
N	 * @details	Defaults to FALSE
N	 * @pre		To get the string sprintg functions you also need to define @p GFILE_NEED_STRINGS
N	 */
N	#ifndef GFILE_NEED_PRINTG
N		#define GFILE_NEED_PRINTG		FALSE
N	#endif
N	/**
N	 * @brief   Include scang, fscang etc functions
N	 * @details	Defaults to FALSE
N	 * @pre		To get the string sscang functions you also need to define @p GFILE_NEED_STRINGS
N	 */
N	#ifndef GFILE_NEED_SCANG
N		#define GFILE_NEED_SCANG		FALSE
N	#endif
N	/**
N	 * @brief   Include the string based file functions
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GFILE_NEED_STRINGS
N		#define GFILE_NEED_STRINGS		FALSE
N	#endif
N	/**
N	 * @brief   Map many stdio functions to their GFILE equivalent
N	 * @details	Defaults to FALSE
N	 * @note	This replaces the functions in stdio.h with equivalents
N	 * 			- Do not include stdio.h as it has different conflicting definitions.
N	 */
N	#ifndef GFILE_NEED_STDIO
N		#define GFILE_NEED_STDIO		FALSE
N	#endif
N	/**
N	 * @brief   Include the ROM file system
N	 * @details	Defaults to FALSE
N	 * @note	If GFILE_ALLOW_DEVICESPECIFIC is on then you can ensure that you are
N	 * 			opening a file on the ROM file system by prefixing
N	 * 			its name with "S|" (the letter 'S', followed by a vertical bar).
N	 * @note	This requires a file called romfs_files.h to be in the
N	 * 			users project include path. This file should include all the files
N	 * 			converted to .h files using the file2c utility (using flags "-dbcs").
N	 */
N	#ifndef GFILE_NEED_ROMFS
N		#define GFILE_NEED_ROMFS		FALSE
N	#endif
N	/**
N	 * @brief   Include the RAM file system
N	 * @details	Defaults to FALSE
N	 * @note	If GFILE_ALLOW_DEVICESPECIFIC is on then you can ensure that you are
N	 * 			opening a file on the RAM file system by prefixing
N	 * 			its name with "R|" (the letter 'R', followed by a vertical bar).
N	 * @note	You must also define GFILE_RAMFS_SIZE with the size of the file system
N	 * 			to be allocated in RAM.
N	 */
N	#ifndef GFILE_NEED_RAMFS
N		#define GFILE_NEED_RAMFS		FALSE
N	#endif
N	/**
N	 * @brief   Include the FAT file system driver based on the FATFS library
N	 * @details	Defaults to FALSE
N	 * @note	If GFILE_ALLOW_DEVICESPECIFIC is on then you can ensure that you are
N	 * 			opening a file on the FAT file system by prefixing
N	 * 			its name with "F|" (the letter 'F', followed by a vertical bar).
N	 * @note	FATFS and PETITFS offer the same FAT file system support. They just use
N	 * 			different constraints. PETITFS is smaller but has less features. Only
N	 * 			one can be used at a time. The block interfaces are also different.
N	 */
N	#ifndef GFILE_NEED_FATFS
N		#define GFILE_NEED_FATFS		FALSE
N	#endif
N	/**
N	 * @brief   Include the FAT file system driver based on the PETITFS library
N	 * @details	Defaults to FALSE
N	 * @note	If GFILE_ALLOW_DEVICESPECIFIC is on then you can ensure that you are
N	 * 			opening a file on the FAT file system by prefixing
N	 * 			its name with "F|" (the letter 'F', followed by a vertical bar).
N	 * @note	FATFS and PETITFS offer the same FAT file system support. They just use
N	 * 			different constraints. PETITFS is smaller but has less features. Only
N	 * 			one can be used at a time. The block interfaces are also different.
N	 * @note	Due to the restrictions on the PETITFS library on writing, we do not implement
N	 * 			writing.
N	 * @note	PETITFS can only have one file open at a time.
N	 */
N	#ifndef GFILE_NEED_PETITFS
N		#define GFILE_NEED_PETITFS		FALSE
N	#endif
N	/**
N	 * @brief   Include the operating system's native file system
N	 * @details	Defaults to FALSE
N	 * @note	If GFILE_ALLOW_DEVICESPECIFIC is on then you can ensure that you are
N	 * 			opening a file on the native file system by prefixing
N	 * 			its name with "N|" (the letter 'N', followed by a vertical bar).
N	 * @note	If defined then the gfileStdOut and gfileStdErr handles
N	 * 			use the operating system equivalent stdio and stderr.
N	 * 			If it is not defined the gfileStdOut and gfileStdErr io is discarded.
N	 */
N	#ifndef GFILE_NEED_NATIVEFS
N		#define GFILE_NEED_NATIVEFS		FALSE
N	#endif
N	/**
N	 * @brief   Include ChibiOS BaseFileStream support
N	 * @details	Defaults to FALSE
N	 * @pre		This is only relevant on the ChibiOS operating system.
N	 * @note	Use the @p gfileOpenBaseFileStream() call to open a GFILE based on a
N	 * 			BaseFileStream. The BaseFileStream must already be open.
N	 * @note	A GFile of this type cannot be opened by filename. The BaseFileStream
N	 * 			must be pre-opened using the operating system.
N	 */
N	#ifndef GFILE_NEED_CHIBIOSFS
N		#define GFILE_NEED_CHIBIOSFS	FALSE
N	#endif
N	/**
N	 * @brief   Include raw memory pointer support
N	 * @details	Defaults to FALSE
N	 * @note	Use the @p gfileOpenMemory() call to open a GFILE based on a
N	 * 			memory pointer. The GFILE opened appears to be of unlimited size.
N	 * @note	A GFile of this type cannot be opened by filename.
N	 */
N	#ifndef GFILE_NEED_MEMFS
N		#define GFILE_NEED_MEMFS		FALSE
N	#endif
N	/**
N	 * @brief   Include support for file list functions
N	 * @details	Defaults to FALSE
N	 * @note	Adds support for @p gfileOpenFileList(), @p gfileReadFileList() and @p gfileCloseFileList().
N	 */
N	#ifndef GFILE_NEED_FILELISTS
N		#define GFILE_NEED_FILELISTS	FALSE
N	#endif
N/**
N * @}
N *
N * @name    GFILE Optional Parameters
N * @{
N */
N	/**
N	 * @brief  Add floating point support to printg/scang etc.
N	 */
N	#ifndef GFILE_ALLOW_FLOATS
N		#define GFILE_ALLOW_FLOATS	FALSE
N	#endif
N	/**
N	 * @brief   Can the device be specified as part of the file name.
N	 * @note	If this is on then a device letter and a vertical bar can be
N	 * 			prefixed on a file name to specify that it must be on a
N	 * 			specific device.
N	 */
N	#ifndef GFILE_ALLOW_DEVICESPECIFIC
N		#define GFILE_ALLOW_DEVICESPECIFIC		FALSE
N	#endif
N	/**
N	 * @brief   The maximum number of open files
N	 * @note	This count excludes gfileStdIn, gfileStdOut and gfileStdErr
N	 * 			(if open by default).
N	 */
N	#ifndef GFILE_MAX_GFILES
N		#define GFILE_MAX_GFILES		3
N	#endif
N	/**
N	 * @brief   TUse an external FATFS library instead of the uGFX inbuilt one
N	 * @note	This is applicable when GFILE_NEED_FATFS is specified. It allows
N	 *			the programmer to use their own FATFS implementation provided the
N	 *			api matches the fatfs-0.10b API.
N	 * @note	The users ffconf.h file still needs to be reachable when compiling uGFX.
N	 * @note	If ffconf.h contains _FS_REENTRANT as true then the user provided simpleton
N	 *			routines must be compatible with uGFX threading.
N	 * @note	If ffconf.h contains _USE_LFN == 3 then the user provided simpleton routines must
N	 *			be compatible with uGFX memory management.
N	 */
N	#ifndef GFILE_FATFS_EXTERNAL_LIB
N		#define GFILE_FATFS_EXTERNAL_LIB		FALSE
N	#endif
N	/**
N	 * @brief   TUse an external PETITFS library instead of the uGFX inbuilt one
N	 * @note	This is applicable when GFILE_NEED_PETITFS is specified. It allows
N	 *			the programmer to use their own FATFS implementation provided the
N	 *			api matches the petitfs-0.03 API.
N	 * @note	The users pffconf.h file still needs to be reachable when compiling uGFX.
N	 */
N	#ifndef GFILE_PETITFS_EXTERNAL_LIB
N		#define GFILE_PETITFS_EXTERNAL_LIB	FALSE
N	#endif
N	
N/** @} */
N
N#endif /* _GFILE_OPTIONS_H */
N/** @} */
L 164 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gmisc/gmisc_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gmisc/gmisc_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gmisc/gmisc_options.h
N * @brief   GMISC - Miscellaneous Routines options header file.
N *
N * @addtogroup GMISC
N * @{
N */
N
N#ifndef _GMISC_OPTIONS_H
N#define _GMISC_OPTIONS_H
N
N/**
N * @name    GMISC Functionality to be included
N * @{
N */
N	/**
N	 * @brief   Include array operation functions
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GMISC_NEED_ARRAYOPS
N		#define GMISC_NEED_ARRAYOPS			FALSE
N	#endif
N	/**
N	 * @brief   Include fast floating point trig functions (fsin, fcos)
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GMISC_NEED_FASTTRIG
N		#define GMISC_NEED_FASTTRIG			FALSE
N	#endif
N	/**
N	 * @brief   Include fast fixed point trig functions (ffsin, ffcos)
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GMISC_NEED_FIXEDTRIG
N		#define GMISC_NEED_FIXEDTRIG		FALSE
N	#endif
N	/**
N	 * @brief   Include fast inverse square root (x^-1/2)
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GMISC_NEED_INVSQRT
N		#define GMISC_NEED_INVSQRT		FALSE
N	#endif
N/**
N * @}
N *
N * @name    GMISC Optional Parameters
N * @{
N */
N	/**
N	 * @brief	Modifies the @p invsqrt() function to assume a different integer to floating point endianness.
N	 * @note	Normally the floating point format and the integer format have
N	 * 			the same endianness. Unfortunately there are some strange
N	 * 			processors that don't eg. some very early ARM devices.
N	 * 			For those where the endianness doesn't match you can fix it by
N	 * 			defining GMISC_INVSQRT_MIXED_ENDIAN.
N	 * @note	This still assumes the processor is using an ieee floating point format.
N	 *
N	 * If you have a software floating point that uses a non-standard
N	 * floating point format (or very strange hardware) then define
N	 * GMISC_INVSQRT_REAL_SLOW and it will do it the hard way.
N	 */
N	#ifndef GMISC_INVSQRT_MIXED_ENDIAN
N		#define GMISC_INVSQRT_MIXED_ENDIAN	FALSE
N	#endif
N	/**
N	 * @brief	Modifies the @p invsqrt() function to do things the long slow way.
N	 * @note	This causes the @p invsqrt() function to work regardless of the
N	 * 			processor floating point format.
N	 * @note	This makes the @p invsqrt() function very slow.
N	 */
N	#ifndef GMISC_INVSQRT_REAL_SLOW
N		#define GMISC_INVSQRT_REAL_SLOW		FALSE
N	#endif
N/** @} */
N
N#endif /* _GMISC_OPTIONS_H */
N/** @} */
L 165 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtrans/gtrans_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtrans/gtrans_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtrans/gtrans_options.h
N *
N * @addtogroup GTRANS
N * @{
N */
N
N#ifndef _GTRANS_OPTIONS_H
N#define _GTRANS_OPTIONS_H
N
N
N
N#endif /* _GTRANS_OPTIONS_H */
N/** @} */
L 166 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gqueue/gqueue_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gqueue/gqueue_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gqueue/gqueue_options.h
N * @brief   GQUEUE - Queue options header file.
N *
N * @addtogroup GQUEUE
N * @{
N */
N
N#ifndef _GQUEUE_OPTIONS_H
N#define _GQUEUE_OPTIONS_H
N
N/**
N * @name    GQUEUE Functions to include.
N * @{
N */
N	/**
N	 * @brief   Enable Asynchronous Queues
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GQUEUE_NEED_ASYNC
N		#define GQUEUE_NEED_ASYNC		FALSE
N	#endif
N	/**
N	 * @brief   Enable Get-Synchronous Queues
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GQUEUE_NEED_GSYNC
N		#define GQUEUE_NEED_GSYNC		FALSE
N	#endif
N	/**
N	 * @brief   Enable Fully Synchronous Queues
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GQUEUE_NEED_FSYNC
N		#define GQUEUE_NEED_FSYNC		FALSE
N	#endif
N	/**
N	 * @brief	Enable Queue-able Data Buffers
N	 */
N	#ifndef GQUEUE_NEED_BUFFERS
N		#define GQUEUE_NEED_BUFFERS		FALSE
N	#endif
N/**
N * @}
N *
N * @name    GQUEUE Optional Sizing Parameters
N * @{
N */
N/** @} */
N
N#endif /* _GQUEUE_OPTIONS_H */
N/** @} */
L 167 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gevent/gevent_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gevent/gevent_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gevent/gevent_options.h
N * @brief   GEVENT sub-system options header file.
N *
N * @addtogroup GEVENT
N * @{
N */
N
N#ifndef _GEVENT_OPTIONS_H
N#define _GEVENT_OPTIONS_H
N
N/**
N * @name    GEVENT Functionality to be included
N * @{
N */
N	/**
N	 * @brief   Should routines assert() if they run out of resources.
N	 * @details	Defaults to FALSE.
N	 * @details	If FALSE the application must be prepared to handle these
N	 *			failures.
N	 */
N	#ifndef GEVENT_ASSERT_NO_RESOURCE
N		#define GEVENT_ASSERT_NO_RESOURCE		FALSE
N	#endif
N/**
N * @}
N *
N * @name    GEVENT Optional Sizing Parameters
N * @{
N */
N	/**
N	 * @brief   Defines the maximum size of an event status variable.
N	 * @details	Defaults to 32 bytes
N	 */
N	#ifndef GEVENT_MAXIMUM_SIZE
N		#define GEVENT_MAXIMUM_SIZE				32
N	#endif
N	/**
N	 * @brief   Defines the maximum Source/Listener pairs in the system.
N	 * @details	Defaults to 32
N	 */
N	#ifndef GEVENT_MAX_SOURCE_LISTENERS
N		#define GEVENT_MAX_SOURCE_LISTENERS		32
N	#endif
N/** @} */
N
N#endif /* _GEVENT_OPTIONS_H */
N/** @} */
L 168 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtimer/gtimer_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtimer/gtimer_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtimer/gtimer_options.h
N * @brief   GTIMER sub-system options header file.
N *
N * @addtogroup GTIMER
N * @{
N */
N
N#ifndef _GTIMER_OPTIONS_H
N#define _GTIMER_OPTIONS_H
N
N/**
N * @name    GTIMER Functionality to be included
N * @{
N */
N/**
N * @}
N *
N * @name    GTIMER Optional Sizing Parameters
N * @{
N */
N	/**
N	 * @brief	Defines the GTIMER thread priority
N	 * @details	Defaults to HIGH_PRIORITY
N	 */
N	#ifndef GTIMER_THREAD_PRIORITY
N		#define GTIMER_THREAD_PRIORITY			HIGH_PRIORITY
N	#endif
N	/**
N	 * @brief   Defines the size of the timer threads work area (stack+structures).
N	 * @details	Defaults to 2048 bytes
N	 */
N	#ifndef GTIMER_THREAD_WORKAREA_SIZE
N		#define GTIMER_THREAD_WORKAREA_SIZE		2048
N	#endif
N/** @} */
N
N#endif /* _GTIMER_OPTIONS_H */
N/** @} */
L 169 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gdisp/gdisp_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdisp/gdisp_options.h
N * @brief   GDISP sub-system options header file.
N *
N * @addtogroup GDISP
N * @{
N */
N
N#ifndef _GDISP_OPTIONS_H
N#define _GDISP_OPTIONS_H
N
N/**
N * @name    GDISP Functionality to be included
N * @{
N */
N	/**
N	 * @brief   Should drawing operations be automatically flushed.
N	 * @details	Defaults to FALSE
N	 * @note	If set to FALSE and the controller requires flushing
N	 * 			then the application must manually call @p gdispGFlush().
N	 * 			Setting this to TRUE causes GDISP to automatically flush
N	 * 			after each drawing operation. Note this may be slow but enables
N	 * 			an application to avoid having to manually call the flush routine.
N	 * @note	If TRUE and GDISP_NEED_TIMERFLUSH is also TRUE, this takes precedence.
N	 * @note	Most controllers don't need flushing which is why this is set to
N	 * 			FALSE by default.
N	 */
N	#ifndef GDISP_NEED_AUTOFLUSH
N		#define GDISP_NEED_AUTOFLUSH			FALSE
N	#endif
N	/**
N	 * @brief   Should drawing operations be automatically flushed on a timer.
N	 * @details	Defaults to FALSE, Can be set to FALSE or a timer period in milliseconds.
N	 * @note	The period should not be set too short or it will consume all your CPU. A
N	 * 			value between 250 and 500 milliseconds would probably be suitable.
N	 * @note	If TRUE and GDISP_NEED_AUTOFLUSH is also TRUE, this is ineffective.
N	 * @note	Most controllers don't need flushing which is why this is set to
N	 * 			FALSE by default.
N	 */
N	#ifndef GDISP_NEED_TIMERFLUSH
N		#define GDISP_NEED_TIMERFLUSH			FALSE
N	#endif
N	/**
N	 * @brief   Should all operations be clipped to the screen and colors validated.
N	 * @details	Defaults to TRUE.
N	 * @note    If this is FALSE, any operations that extend beyond the
N	 *          edge of the screen will have undefined results. Any
N	 *			out-of-range colors will produce undefined results.
N	 * @note	This should always be left as the default (TRUE) unless you
N	 * 			are a maniac for speed and you have thoroughly tested your code
N	 * 			and it never overwrites the edges of the screen.
N	 * @note	Setting GDISP_NEED_CLIP to TRUE internally uses the same mechanism
N	 * 			as this validation. There is no advantage in setting this FALSE if
N	 * 			GDISP_NEED_CLIP is TRUE.
N	 */
N	#ifndef GDISP_NEED_VALIDATION
N		#define GDISP_NEED_VALIDATION			TRUE
N	#endif
N	/**
N	 * @brief   Are clipping functions needed.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_CLIP
N		#define GDISP_NEED_CLIP					TRUE
N	#endif
N	/**
N	 * @brief   Streaming functions are needed
N	 * @details	Defaults to FALSE.
N	 */
N	#ifndef GDISP_NEED_STREAMING
N		#define GDISP_NEED_STREAMING			FALSE
N	#endif
N	/**
N	 * @brief   Are text functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	You must also define at least one font.
N	 */
N	#ifndef GDISP_NEED_TEXT
N		#define GDISP_NEED_TEXT					FALSE
N	#endif
N	/**
N	 * @brief   Are circle functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	Uses integer algorithms only. It does not use any trig or floating point.
N	 */
N	#ifndef GDISP_NEED_CIRCLE
N		#define GDISP_NEED_CIRCLE				FALSE
N	#endif
N	/**
N	 * @brief   Are ellipse functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	Uses integer algorithms only. It does not use any trig or floating point.
N	 */
N	#ifndef GDISP_NEED_ELLIPSE
N		#define GDISP_NEED_ELLIPSE				FALSE
N	#endif
N	/**
N	 * @brief   Are arc sector functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	Uses integer algorithms only. It does not use any trig or floating point.
N	 */
N	#ifndef GDISP_NEED_ARCSECTORS
N		#define GDISP_NEED_ARCSECTORS			FALSE
N	#endif
N	/**
N	 * @brief   Are arc functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	This can be compiled using fully integer mathematics by
N	 * 			defining GFX_USE_GMISC and GMISC_NEED_FIXEDTRIG as TRUE.
N	 * @note	This can be compiled to use floating point but no trig functions
N	 * 			by defining GFX_USE_GMISC and GMISC_NEED_FASTTRIG as TRUE.
N	 * @note	If neither of the above are defined it requires the maths library
N	 * 			to be included in the link to provide floating point and trig support.
N	 * 			ie  include -lm in your compiler flags.
N	 */
N	#ifndef GDISP_NEED_ARC
N		#define GDISP_NEED_ARC					FALSE
N	#endif
N	/**
N	 * @brief   Are convex polygon functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	Convex polygons are those that have no internal angles. That is;
N	 * 			you can draw a line from any point on the polygon to any other point
N	 * 			on the polygon without it going outside the polygon.
N	 */
N	#ifndef GDISP_NEED_CONVEX_POLYGON
N		#define GDISP_NEED_CONVEX_POLYGON		FALSE
N	#endif
N	/**
N	 * @brief   Are scrolling functions needed.
N	 * @details	Defaults to FALSE
N	 * @note	This function must be supported by the low level GDISP driver
N	 * 			you have included in your project. If it isn't, defining this
N	 * 			option will cause a compile error.
N	 */
N	#ifndef GDISP_NEED_SCROLL
N		#define GDISP_NEED_SCROLL				FALSE
N	#endif
N	/**
N	 * @brief   Is the capability to read pixels back needed.
N	 * @details	Defaults to FALSE
N	 * @note	This function must be supported by the low level GDISP driver
N	 * 			you have included in your project. If it isn't, defining this
N	 * 			option will cause a compile error.
N	 */
N	#ifndef GDISP_NEED_PIXELREAD
N		#define GDISP_NEED_PIXELREAD			FALSE
N	#endif
N	/**
N	 * @brief   Control some aspect of the hardware operation.
N	 * @details	Defaults to FALSE
N	 * @note	This allows control of hardware specific features such as
N	 * 			screen rotation, backlight levels, contrast etc
N	 */
N	#ifndef GDISP_NEED_CONTROL
N		#define GDISP_NEED_CONTROL				FALSE
N	#endif
N	/**
N	 * @brief   Query some aspect of the hardware operation.
N	 * @details	Defaults to FALSE
N	 * @note	This allows query of hardware specific features
N	 */
N	#ifndef GDISP_NEED_QUERY
N		#define GDISP_NEED_QUERY				FALSE
N	#endif
N	/**
N	 * @brief   Is the image interface required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE
N		#define GDISP_NEED_IMAGE				FALSE
N	#endif
N	/**
N	 * @brief   Is the image interface required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_PIXMAP
N		#define GDISP_NEED_PIXMAP				FALSE
N	#endif
N/**
N * @}
N *
N * @name    GDISP Multi-Threading Options
N * @{
N */
N	/**
N	 * @brief   Do the drawing functions need to be thread-safe.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_MULTITHREAD
N		#define GDISP_NEED_MULTITHREAD			FALSE
N	#endif
N/**
N * @}
N *
N * @name    GDISP Optional Parameters
N * @{
N */
N	/**
N	 * @brief	Should the startup logo be displayed
N	 *
N	 * @details Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_STARTUP_LOGO
S		#define GDISP_NEED_STARTUP_LOGO 		TRUE
N	#endif
N	/**
N	 * @brief	Define the initial background color for all displays in the system.
N	 */
N	#ifndef GDISP_STARTUP_COLOR
N		#define GDISP_STARTUP_COLOR				Black
N	#endif
N	/**
N	 * @brief	Define the default orientation for all displays in the system.
N	 * @note	GDISP_NEED_CONTROL must also be set (and the hardware must support it)
N	 * @note	If not specified then displays default to the native hardware orientation
N	 */
N	// #define GDISP_DEFAULT_ORIENTATION		GDISP_ROTATE_LANDSCAPE
N	/**
N	 * @brief   The size of pixel buffer (in pixels) used for optimization.
N	 * @details	Set to zero to guarantee disabling of the buffer.
N	 * @note	Depending on the driver and what operations the application
N	 * 			needs, this buffer may never be allocated.
N	 * @note	Setting the size to zero may cause some operations to not
N	 * 			compile eg. Scrolling if there is no hardware scroll support.
N	 * @note	Increasing the size will speedup certain operations
N	 * 			at the expense of RAM.
N	 * @note	Currently only used to support scrolling on hardware without
N	 * 			scrolling support, and to increase the speed of streaming
N	 * 			operations on non-streaming hardware where there is a
N	 * 			hardware supported bit-blit.
N	 */
N	#ifndef GDISP_LINEBUF_SIZE
N		#define GDISP_LINEBUF_SIZE				128
N	#endif
N/**
N * @}
N *
N * @name    GDISP Multiple Display Support
N * @{
N */
N	/**
N	 * @brief   The total number of displays using the default driver.
N	 * @note	If you want to use multiple displays either set GDISP_TOTAL_DISPLAYS or GDISP_DRIVER_LIST
N	 *          but not both.
N	 */
N	#ifndef GDISP_TOTAL_DISPLAYS
S		#define GDISP_TOTAL_DISPLAYS		1
N	#endif
N	#if defined(__DOXYGEN__)
X	#if 0L
S		/**
S		 * @brief   The list of display drivers.
S		 * @note	Replace this example with your own definition in your gfxconf.h file. See the gdisp_lld.c
S		 *          in each driver (near the top) to get the name of the VMT for a driver.
S		 * @note    The same driver can occur more than once in the list to create an extra instance of that driver.
S		 * @note    If defining this you must also define GDISP_PIXELFORMAT for your application to use.
S         *          Choose a value that is most common accross all your drivers for efficiency.
S         * @note    If using this you may optionally define the GDISP_HARDWARE_xxx values as either TRUE or FALSE.
S         *          Doing this causes GDISP to assume that all (TRUE) or none (FALSE) of the listed drivers have that
S         *          capability. This can help improve drawing speed and efficiency.
S		 */
S		#define GDISP_DRIVER_LIST		  GDISPVMT_Win32, GDISPVMT_SSD1963
N	#endif
N/**
N * @}
N *
N * @name    GDISP Image Options
N * @pre		GDISP_NEED_IMAGE must be TRUE
N * @{
N */
N	/**
N	 * @brief   Is native image decoding required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_NATIVE
N		#define GDISP_NEED_IMAGE_NATIVE			FALSE
N	#endif
N	/**
N	 * @brief   Is GIF image decoding required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_GIF
N		#define GDISP_NEED_IMAGE_GIF			FALSE
N	#endif
N	/**
N	 * @brief   Is BMP image decoding required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP
N		#define GDISP_NEED_IMAGE_BMP			FALSE
N	#endif
N	/**
N	 * @brief   Is JPG image decoding required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_JPG
N		#define GDISP_NEED_IMAGE_JPG			FALSE
N	#endif
N	/**
N	 * @brief   Is PNG image decoding required.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG
N		#define GDISP_NEED_IMAGE_PNG			FALSE
N	#endif
N	/**
N	 * @brief   Is memory accounting required during image decoding.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_IMAGE_ACCOUNTING
N		#define GDISP_NEED_IMAGE_ACCOUNTING		FALSE
N	#endif
N/**
N * @}
N *
N * @name    GDISP BMP Image Options
N * @pre		GDISP_NEED_IMAGE and GDISP_NEED_IMAGE_BMP must be TRUE
N * @{
N */
N	/**
N	 * @brief   Is BMP 1 bit per pixel (monochrome/2 color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_1
N		#define GDISP_NEED_IMAGE_BMP_1		TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 4 bits per pixel (16 color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_4
N		#define GDISP_NEED_IMAGE_BMP_4		TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 4 bits per pixel (16 color) with RLE compression image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_4_RLE
N		#define GDISP_NEED_IMAGE_BMP_4_RLE	TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 8 bits per pixel (256 color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_8
N		#define GDISP_NEED_IMAGE_BMP_8		TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 8 bits per pixel (256 color) with RLE compression image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_8_RLE
N		#define GDISP_NEED_IMAGE_BMP_8_RLE	TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 16 bits per pixel (65536 color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_16
N		#define GDISP_NEED_IMAGE_BMP_16		TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 24 bits per pixel (true-color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_24
N		#define GDISP_NEED_IMAGE_BMP_24		TRUE
N	#endif
N	/**
N	 * @brief   Is BMP 32 bits per pixel (true-color) image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_BMP_32
N		#define GDISP_NEED_IMAGE_BMP_32		TRUE
N	#endif
N/**
N * @}
N *
N * @name    GDISP PNG Image Options
N * @pre		GDISP_NEED_IMAGE and GDISP_NEED_IMAGE_PNG must be TRUE
N * @{
N */
N	/**
N	 * @brief   Is PNG Interlaced image decoding required.
N	 * @details	Defaults to FALSE
N	 * @note	Currently not supported due to the complex decoding and display requirements
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_INTERLACED
N		#define GDISP_NEED_IMAGE_PNG_INTERLACED			FALSE
N	#endif
N	/**
N	 * @brief   Is PNG image transparency processed.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_TRANSPARENCY
N		#define GDISP_NEED_IMAGE_PNG_TRANSPARENCY		TRUE
N	#endif
N	/**
N	 * @brief   Is PNG background data processed.
N	 * @details	Defaults to TRUE
N	 * @note	If the background is specified in the image file and this define is TRUE,
N	 * 			that background color is used for transparency and alpha blending.
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_BACKGROUND
N		#define GDISP_NEED_IMAGE_PNG_BACKGROUND			TRUE
N	#endif
N	/**
N	 * @brief   What is the cliff between non-blended alpha pixels being displayed or not.
N	 * @details	Range of 0 to 255
N	 * @note	If GDISP_NEED_IMAGE_PNG_BACKGROUND is TRUE and the PNG file contains a
N	 * 			background color then the pixel will be blended with the background color
N	 * 			according to the alpha.
N	 * 			If not then no blending occurs. The pixel will either be set or not.
N	 * 			Any alpha value greater or equal to this number will be displayed.
N	 * 			Anything less than this number is not displayed.
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_ALPHACLIFF
N		#define GDISP_NEED_IMAGE_PNG_ALPHACLIFF			32
N	#endif
N	/**
N	 * @brief   Is 1, 2 and 4 bit PNG palettized image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_PALETTE_124
N		#define GDISP_NEED_IMAGE_PNG_PALETTE_124		TRUE
N	#endif
N	/**
N	 * @brief   Is 8 bit PNG palettized image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_PALETTE_8
N		#define GDISP_NEED_IMAGE_PNG_PALETTE_8			TRUE
N	#endif
N	/**
N	 * @brief   Is 1,2 and 4 bit PNG grayscale image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_GRAYSCALE_124
N		#define GDISP_NEED_IMAGE_PNG_GRAYSCALE_124		TRUE
N	#endif
N	/**
N	 * @brief   Is 8 bit PNG grayscale image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_GRAYSCALE_8
N		#define GDISP_NEED_IMAGE_PNG_GRAYSCALE_8		TRUE
N	#endif
N	/**
N	 * @brief   Is 16 bit PNG grayscale image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_GRAYSCALE_16
N		#define GDISP_NEED_IMAGE_PNG_GRAYSCALE_16		TRUE
N	#endif
N	/**
N	 * @brief   Is 8 bit PNG grayscale with 8 bit alpha image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_GRAYALPHA_8
N		#define GDISP_NEED_IMAGE_PNG_GRAYALPHA_8		TRUE
N	#endif
N	/**
N	 * @brief   Is 16 bit PNG grayscale with 16 bit alpha image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
N		#define GDISP_NEED_IMAGE_PNG_GRAYALPHA_16		TRUE
N	#endif
N	/**
N	 * @brief   Is 8/8/8 bit PNG RGB image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_RGB_8
N		#define GDISP_NEED_IMAGE_PNG_RGB_8				TRUE
N	#endif
N	/**
N	 * @brief   Is 16/16/16 bit PNG RGB image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_RGB_16
N		#define GDISP_NEED_IMAGE_PNG_RGB_16				TRUE
N	#endif
N	/**
N	 * @brief   Is 8/8/8 bit PNG RGB with 8 bit alpha image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_RGBALPHA_8
N		#define GDISP_NEED_IMAGE_PNG_RGBALPHA_8			TRUE
N	#endif
N	/**
N	 * @brief   Is 16/16/16 bit PNG RGB with 16 bit alpha image decoding required.
N	 * @details	Defaults to TRUE
N	 */
N	#ifndef GDISP_NEED_IMAGE_PNG_RGBALPHA_16
N		#define GDISP_NEED_IMAGE_PNG_RGBALPHA_16		TRUE
N	#endif
N/**
N * @}
N *
N * @name	GDISP Text Rendering Options
N * @{
N */
N	/**
N	 * @brief	Enable advanced word-wrapping.
N	 * @details	Only has an effect with @p gdispGDrawStringBox() and @p gdispGFillStringBox()
N	 * @details Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_TEXT_WORDWRAP
N		#define GDISP_NEED_TEXT_WORDWRAP		FALSE
N	#endif
N	/**
N	 * @brief	Enable UTF-8 support for text rendering.
N	 * @details Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_UTF8
N		#define GDISP_NEED_UTF8					FALSE
N	#endif
N	/**
N	 * @brief	Enable kerning for font rendering (improves character placement).
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_TEXT_KERNING
N		#define GDISP_NEED_TEXT_KERNING			FALSE
N	#endif
N	/**
N	 * @brief	Enable antialiased font support
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GDISP_NEED_ANTIALIAS
N		#define GDISP_NEED_ANTIALIAS			FALSE
N	#endif
N/**
N * @}
N *
N * @name	GDISP Pixmap Options
N * @{
N */
N	#ifndef GDISP_NEED_PIXMAP_IMAGE
N		#define GDISP_NEED_PIXMAP_IMAGE			FALSE
N	#endif
N/**
N * @}
N *
N * @name    GDISP Optional Low Level Driver Defines
N * @{
N */
N	/**
N	 * @brief   Set the screen height and width.
N	 * @note	Ignored by some low level GDISP drivers, optional for others.
N	 * @note	Where these values are allowed, a default is always provided be the low level driver.
N	 * @note	The list of GDISP low level drivers that allow these to be set are...
N	 *				WIN32, SSD1289, SSD1963, TestStub
N	 */
N	/* #define GDISP_SCREEN_WIDTH		nnnn */
N	/* #define GDISP_SCREEN_HEIGHT		nnnn */
N	/**
N	 * @brief   Define which bus interface to use.
N	 * @details	Only required by the SSD1963 driver.
N	 * @note	This will be replaced eventually by board definition files
N	 */
N	// #define GDISP_USE_FSMC
N	// #define GDISP_USE_GPIO
N/** @} */
N
N#endif /* _GDISP_OPTIONS_H */
N/** @} */
N
L 170 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gwin/gwin_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gwin/gwin_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_options.h
N * @brief   GWIN sub-system options header file.
N *
N * @addtogroup GWIN
N * @brief	The GWIN module uses all the other modules (GDISP, GINPUT, GTIMER...) to
N *			form a complete GUI toolkit.
N * 
N * @{
N */
N
N#ifndef _GWIN_OPTIONS_H
N#define _GWIN_OPTIONS_H
N
N/**
N * @name    GWIN Functionality to be included
N * @{
N */
N	/**
N	 * @brief   Should window manager support be included
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_WINDOWMANAGER
N		#define GWIN_NEED_WINDOWMANAGER	FALSE
N	#endif
N	/**
N	 * @brief	Should the widget hierarchy be included. This provides parent-child features.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_CONTAINERS
N		#define GWIN_NEED_CONTAINERS	FALSE
N	#endif
N	/**
N	 * @brief   Should widget functions be included. Needed for any widget (eg Buttons, Sliders etc)
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_WIDGET
N		#define GWIN_NEED_WIDGET	FALSE
N	#endif
N	/**
N	 * @brief   The width of the rectangle that highlights a widget that is focused
N	 * @details	Defaults to 1
N	 */
N	#ifndef GWIN_FOCUS_HIGHLIGHT_WIDTH
N		#define GWIN_FOCUS_HIGHLIGHT_WIDTH 1
N	#endif
N	/**
N	 * @brief	Should the simple container be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_CONTAINER
N		#define GWIN_NEED_CONTAINER		FALSE
N	#endif
N	/**
N	 * @brief	Should the frame widget be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_FRAME
N		#define GWIN_NEED_FRAME		FALSE
N	#endif
N	/**
N	 * @brief   Should console functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_CONSOLE
N		#define GWIN_NEED_CONSOLE	FALSE
N	#endif
N	/**
N	 * @brief   Should graph functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_GRAPH
N		#define GWIN_NEED_GRAPH		FALSE
N	#endif
N	/**
N	 * @brief   Should gl3d functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_GL3D
N		#define GWIN_NEED_GL3D		FALSE
N	#endif
N	/**
N	 * @brief   Should button functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_BUTTON
N		#define GWIN_NEED_BUTTON	FALSE
N	#endif
N	/**
N	 * @brief   Should progressbar functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_PROGRESSBAR
N		#define GWIN_NEED_PROGRESSBAR	FALSE
N	#endif
N	/**
N	 * @brief   Should slider functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_SLIDER
N		#define GWIN_NEED_SLIDER	FALSE
N	#endif
N	/**
N	 * @brief   Should checkbox functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_CHECKBOX
N		#define GWIN_NEED_CHECKBOX	FALSE
N	#endif
N	/**
N	 * @brief   Should image functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_IMAGE
N		#define GWIN_NEED_IMAGE		FALSE
N	#endif
N	/**
N	 * @brief   Should label functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_LABEL
N		#define GWIN_NEED_LABEL		FALSE
N	#endif
N	/**
N	 * @brief   Should radio button functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_RADIO
N		#define GWIN_NEED_RADIO		FALSE
N	#endif
N	/**
N	 * @brief   Should list widget functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_LIST
N		#define GWIN_NEED_LIST		FALSE
N	#endif
N	/**
N	 * @brief   Should tabset functions be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_TABSET
N		#define GWIN_NEED_TABSET	FALSE
N	#endif
N	/**
N	 * @brief   Should the virtual keyboard be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_KEYBOARD
N		#define GWIN_NEED_KEYBOARD	FALSE
N	#endif
N	/**
N	 * @brief   Should the textedit widget be included.
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_TEXTEDIT
N		#define GWIN_NEED_TEXTEDIT	FALSE
N	#endif
N/**
N * @}
N *
N * @name    GWIN Optional Parameters
N * @{
N */
N	/**
N	 * @brief   Add a tag to each widget
N	 * @details	Defaults to FALSE
N	 * @note	Adds a tag member to each widget. Any events created include this tag.
N	 * 			The enables switch based application logic to detect the event source.
N	 */
N	#ifndef GWIN_WIDGET_TAGS
N		#define GWIN_WIDGET_TAGS		FALSE
N	#endif
N	/**
N	 * @brief   Use flat styling for controls rather than a 3D look
N	 * @details	Defaults to FALSE
N	 * @note	This may appear better on color-restricted displays
N	 * @note	Flat styling is less graphics and cpu intensive (marginally) than the default 3D look.
N	 */
N	#ifndef GWIN_FLAT_STYLING
N		#define GWIN_FLAT_STYLING		FALSE
N	#endif
N	/**
N	 * @brief	Don't use a timer for redrawing windows
N	 * @details	Defaults to FALSE
N	 * @note	Normally windows and widgets are redrawn on a timer. Setting this
N	 * 			option causes them to be redrawn immediately. Note that this can
N	 * 			cause extended blocking times on events and saves little code.
N	 * @note	If GWIN_NEED_WINDOWMANAGER is FALSE then this setting is ignored
N	 * 			as redrawing always occurs immediately.
N	 */
N	#ifndef GWIN_REDRAW_IMMEDIATE
N		#define GWIN_REDRAW_IMMEDIATE	FALSE
N	#endif
N	/**
N	 * @brief	Redraw all windows in a single operation
N	 * @details	Defaults to FALSE
N	 * @note	Windows are normally redraw one per gtimer cycle.
N	 * 			Setting this option causes all windows to be redrawn in
N	 * 			a single gtimer cycle. Note that this can
N	 * 			cause extended blocking times on the timer thread but may
N	 * 			speed up redraw slightly.
N	 * @note	This is only relevant if GWIN_REDRAW_IMMEDIATE is FALSE.
N	 * 			Everything always gets redrawn in a single operation if
N	 * 			GWIN_REDRAW_IMMEDIATE is TRUE.
N	 */
N	#ifndef GWIN_REDRAW_SINGLEOP
N		#define GWIN_REDRAW_SINGLEOP	FALSE
N	#endif
N	/**
N	 * @brief   Buttons should not insist the mouse is over the button on mouse release
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_BUTTON_LAZY_RELEASE
N		#define GWIN_BUTTON_LAZY_RELEASE		FALSE
N	#endif
N	/**
N	 * @brief	Should the content of the console be saved for redrawing.
N	 * @details	Defaults to FALSE
N	 * @details	If this feature is enabled, the contents of the console will be saved
N	 * 			as it is written. If a redraw is required it will be redrawn from the
N	 * 			history. Scrolling will also use the history buffer if it is turned on.
N	 * @note	Using this option allocates the amount of memory to store the
N	 * 			history based on the minimum character width in the current font
N	 * 			at the time the history is turned on. Using a fixed width font is a good
N	 * 			idea to minimize memory usage.
N	 * @note	If you change the size of the window or you change the font being displayed
N	 * 			you should turn off the history and then turn it back on in order to get
N	 * 			a new buffer of the correct size for the window/font combination. Strange
N	 * 			redrawing and scrolling effects can occur if the buffer is too small to
N	 * 			save a complete screen of data. Note the system tries to optimize storage
N	 * 			so this may only be evident in very limited situations eg with a console
N	 * 			with many characters in it.
N	 * @note	@p gwinConsoleSetBuffer() can be used to turn the history buffer off and on.
N	 */
N	#ifndef GWIN_CONSOLE_USE_HISTORY
N		#define GWIN_CONSOLE_USE_HISTORY		FALSE
N	#endif
N	/**
N	 * @brief	Use font width averaging for the history buffer allocation.
N	 * @details	Defaults to FALSE
N	 * @details	If this feature is enabled, the width one third of the way between
N	 * 			the font's character width minimum and maximum will be used instead
N	 * 			of the font's minimum width.
N	 * @note	This option reduces the memory allocation for a variable width font's
N	 * 			history buffer. Note that strange
N	 * 			redrawing and scrolling effects can occur if the buffer is too small to
N	 * 			save a complete screen of data. The system tries to optimize storage
N	 * 			so this may only be evident in very limited situations eg with a console
N	 * 			with many characters in it.
N	 */
N	#ifndef GWIN_CONSOLE_HISTORY_AVERAGING
N		#define GWIN_CONSOLE_HISTORY_AVERAGING	FALSE
N	#endif
N	/**
N	 * @brief	Should the history be turned on for all console windows when they are first created.
N	 * @details	Defaults to FALSE
N	 * @note	@p gwinConsoleSetBuffer() can be used to turn the history buffer off and on at
N	 * 			any time.
N	 */
N	#ifndef GWIN_CONSOLE_HISTORY_ATCREATE
N		#define GWIN_CONSOLE_HISTORY_ATCREATE	FALSE
N	#endif
N	/**
N	 * @brief   Console Windows need floating point support in @p gwinPrintf
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_CONSOLE_USE_FLOAT
N		#define GWIN_CONSOLE_USE_FLOAT			FALSE
N	#endif
N	/**
N	 * @brief   Console windows support escape sequences to control display
N	 * @details	Defaults to FALSE
N	 *
N	 * @note
N	 * 		Currently supported:
N	 * 			ESC color		Change subsequent text color
N	 * 							color:	"0" = black, "1" = red, "2" = green, "3" = yellow, "4" = blue,
N	 * 									"5" = magenta, "6" = cyan, "7" = white
N	 * 			ESC C			Revert subsequent text color to the window default
N	 * 			ESC u			Turn on underline
N	 * 			ESC U			Turn off underline
N	 * 			ESC b			Turn on bold
N	 * 			ESC B			Turn off bold
N	 * 			ESC J			Clear the window
N	 */
N	#ifndef GWIN_CONSOLE_ESCSEQ
N		#define GWIN_CONSOLE_ESCSEQ				FALSE
N	#endif
N	/**
N	 * @brief   Console Windows need BaseStreamSequential support (ChibiOS only)
N	 * @details	Defaults to FALSE
N	 * @note	To use the ChibiOS basestream functions such as chprintf()
N	 * 			for printing in a console window you need to set this option to
N	 * 			TRUE in your gfxconf.h and include in your application source file...
N	 * 			\#include "chprintf.h"
N	 * 			In your makefile, as part of your list of C source files, include
N	 * 			${CHIBIOS}/os/various/chprintf.c
N	 */
N	#ifndef GWIN_CONSOLE_USE_BASESTREAM
N		#define GWIN_CONSOLE_USE_BASESTREAM		FALSE
N	#endif
N	/**
N	 * @brief   Image windows can optionally support animated images
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_IMAGE_ANIMATION
N		#define GWIN_NEED_IMAGE_ANIMATION		FALSE
N	#endif
N	/**
N	 * @brief	Enable the API to use attributes in the label widget
N	 * @details	Defaults to FALSE
N	 * @note	Using this feature is discouraged. The proper (and faster as well
N	 *			as more efficient) way is to use two separate labels.
N	 */
N	#ifndef GWIN_LABEL_ATTRIBUTE
N	 	#define GWIN_LABEL_ATTRIBUTE			FALSE
N	#endif
N	/**
N	 * @brief	Enable the API to use images in items in the list widget
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_NEED_LIST_IMAGES
N	 	#define GWIN_NEED_LIST_IMAGES			FALSE
N	#endif
N	/**
N	 * @brief	Enable the API to automatically increment the progressbar over time
N	 * @details	Defaults to FALSE
N	 */
N	#ifndef GWIN_PROGRESSBAR_AUTO
N	 	#define GWIN_PROGRESSBAR_AUTO			FALSE
N	#endif
N	/**
N	 * @brief	Should the slider avoid snapping to a fixed position when the mouse is released
N	 * @details	Defaults to FALSE
N	 * @note	If FALSE the slider will snap to the closest set-able position when the
N	 * 			mouse is released. If TRUE it will maintain the position the
N	 * 			mouse was released at, except when at the minimum and maximum slider values.
N	 */
N	#ifndef GWIN_SLIDER_NOSNAP
N	 	#define GWIN_SLIDER_NOSNAP				FALSE
N	#endif
N	/**
N	 * @brief	The number of pixels of dead-band at each end of the slider
N	 * @details	Defaults to 5
N	 * @note	A dead-band is required because fingers can often cannot
N	 * 			accurately control the slider peg at the edges of the slider
N	 */
N	#ifndef GWIN_SLIDER_DEAD_BAND
N		#define GWIN_SLIDER_DEAD_BAND			5
N	#endif
N	/**
N	 * @brief	How many toggles it takes to go from minimum to maximum value on a slider
N	 * @details	Defaults to 20
N	 * @note	When the slider is being operated by a toggle device this setting describes
N	 * 			how many toggles are required to go from end to end.
N	 */
N	#ifndef GWIN_SLIDER_TOGGLE_INC
N		#define GWIN_SLIDER_TOGGLE_INC			20
N	#endif
N	/**
N	 * @brief	The height in pixels of a row of tabs in a tabset
N	 * @details	Defaults to 18
N	 */
N	#ifndef GWIN_TABSET_TABHEIGHT
N		#define GWIN_TABSET_TABHEIGHT			18
N	#endif
N	/**
N	 * @brief	Should flashing of widgets be supported
N	 * @details	Defaults to FALSE
N	 * @pre		Requires GWIN_NEED_WINDOWMANAGER to be TRUE
N	 */
N	#ifndef GWIN_NEED_FLASHING
N		#define GWIN_NEED_FLASHING				FALSE
N	#endif
N	/**
N	 * @brief	What is the period for the flashing timer
N	 * @details	Defaults to 250 milliseconds
N	 */
N	#ifndef GWIN_FLASHING_PERIOD
N		#define GWIN_FLASHING_PERIOD			250
N	#endif
N	/**
N	 * @brief	The default keyboard layout for the virtual gwin keyboard
N	 * @details	Defaults to VirtualKeyboardLayout_English1
N	 */
N	#ifndef GWIN_KEYBOARD_DEFAULT_LAYOUT
N		#define GWIN_KEYBOARD_DEFAULT_LAYOUT	VirtualKeyboard_English1
N	#endif
N/**
N * @}
N *
N * @name    GWIN Virtual Keyboard Layouts
N * @brief	One or more of these may be defined. They will only be created if GWIN_NEED_KEYBOARD is TRUE.
N * @{
N */
N	/**
N	 * @brief	The default keyboard layout for the virtual gwin keyboard
N	 * @details	Defaults to VirtualKeyboardLayout_English1
N	 */
N	#ifndef GWIN_NEED_KEYBOARD_ENGLISH1
N		#define GWIN_NEED_KEYBOARD_ENGLISH1		TRUE
N	#endif
N/** @} */
N
N#endif /* _GWIN_OPTIONS_H */
N/** @} */
L 171 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/ginput/ginput_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/ginput/ginput_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_options.h
N * @brief   GINPUT sub-system options header file.
N *
N * @addtogroup GINPUT
N * @{
N */
N
N#ifndef _GINPUT_OPTIONS_H
N#define _GINPUT_OPTIONS_H
N
N/**
N * @name    GINPUT Functionality to be included
N * @{
N */
N	/**
N	 * @brief   Should mouse/touch functions be included.
N	 * @details	Defaults to FALSE
N	 * @note	Also add a mouse/touch hardware driver to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/ginput/touch/MCU/driver.mk
N	 */
N	#ifndef GINPUT_NEED_MOUSE
N		#define GINPUT_NEED_MOUSE		FALSE
N	#endif
N	/**
N	 * @brief   Should keyboard functions be included.
N	 * @details	Defaults to FALSE
N	 * @note	Also add a keyboard hardware driver to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/ginput/keyboard/XXXX/driver.mk
N	 */
N	#ifndef GINPUT_NEED_KEYBOARD
N		#define GINPUT_NEED_KEYBOARD	FALSE
N	#endif
N	/**
N	 * @brief   Should hardware toggle/switch/button functions be included.
N	 * @details	Defaults to FALSE
N	 * @note	Also add a toggle hardware driver to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/ginput/toggle/Pal/driver.mk
N	 */
N	#ifndef GINPUT_NEED_TOGGLE
N		#define GINPUT_NEED_TOGGLE		FALSE
N	#endif
N	/**
N	 * @brief   Should analog dial functions be included.
N	 * @details	Defaults to FALSE
N	 * @note	Also add a dial hardware driver to your makefile.
N	 * 			Eg.
N	 * 				include $(GFXLIB)/drivers/ginput/dial/analog/driver.mk
N	 */
N	#ifndef GINPUT_NEED_DIAL
N		#define GINPUT_NEED_DIAL		FALSE
N	#endif
N/**
N * @}
N *
N * @name    GINPUT Optional Sizing Parameters
N * @{
N */
N/**
N * @}
N *
N * @name    GINPUT Optional Low Level Driver Defines
N * @{
N */
N	/**
N	 * @brief   Start touch devices without loading or running calibration.
N	 * @details	Defaults to FALSE
N	 * @note	This is used if you want to manually control the initial calibration
N	 * 			process. In practice this is only useful for a touch driver test program.
N	 */
N	#ifndef GINPUT_TOUCH_STARTRAW
N		#define GINPUT_TOUCH_STARTRAW					FALSE
N	#endif
N 	/**
N	 * @brief   Turn off the touch calibration GUI.
N	 * @details	Defaults to FALSE
N	 * @note	Turning off the calibration GUI just turns off the manual calibration
N	 * 			process. Readings may still be calibrated if calibration data
N	 * 			can be loaded.
N	 * @note	Calibration requires a lot of code. If your device doesn't require it
N	 * 			using this option can save a lot of space.
N	 */
N	#ifndef GINPUT_TOUCH_NOCALIBRATE_GUI
N		#define GINPUT_TOUCH_NOCALIBRATE_GUI			FALSE
N	#endif
N	/**
N	 * @brief   Turn off all touch calibration support.
N	 * @details	Defaults to FALSE
N	 * @note	With this set to TRUE touch readings will not be calibrated.
N	 * @note	This automatically turns off the calibration GUI too!
N	 * @note	Calibration requires a lot of code. If your device doesn't require it
N	 * 			using this option can save a lot of space.
N	 */
N	#ifndef GINPUT_TOUCH_NOCALIBRATE
N		#define GINPUT_TOUCH_NOCALIBRATE				FALSE
N	#endif
N	/**
N	 * @brief   Turn off all touch support.
N	 * @details	Defaults to FALSE
N	 * @note	This automatically turns off all calibration and the calibration GUI too!
N	 * @note	Touch device handling requires a lot of code. If your device doesn't require it
N	 * 			using this option can save a lot of space.
N	 */
N	#ifndef GINPUT_TOUCH_NOTOUCH
N		#define GINPUT_TOUCH_NOTOUCH					FALSE
N	#endif
N	/**
N	 * @brief   Milliseconds between mouse polls.
N	 * @details	Defaults to 25 milliseconds
N	 * @note	How often mice should be polled. More often leads to smoother mouse movement
N	 * 			but increases CPU usage.
N	 */
N	#ifndef GINPUT_MOUSE_POLL_PERIOD
N		#define GINPUT_MOUSE_POLL_PERIOD				25
N	#endif
N
N	/**
N	 * @brief   Maximum length of CLICK in milliseconds
N	 * @details	Defaults to 300 milliseconds
N	 * @note	Mouse down to Mouse up times greater than this are not clicks.
N	 */
N	#ifndef GINPUT_MOUSE_CLICK_TIME
N		#define GINPUT_MOUSE_CLICK_TIME					300
N	#endif
N	/**
N	 * @brief   Milliseconds to generate a CXTCLICK on a touch device.
N	 * @details	Defaults to 500 milliseconds
N	 * @note	If you hold the touch down for longer than this a CXTCLICK is generated
N	 * 			but only on a touch device.
N	 */
N	#ifndef GINPUT_TOUCH_CXTCLICK_TIME
N		#define GINPUT_TOUCH_CXTCLICK_TIME				500
N	#endif
N   /**
N     * @brief   There is a user supplied routine to load mouse calibration data
N	 * @details	Defaults to FALSE
N     * @note    If TRUE the user must supply the @p LoadMouseCalibration() routine.
N     */
N	#ifndef GINPUT_TOUCH_USER_CALIBRATION_LOAD
N		#define GINPUT_TOUCH_USER_CALIBRATION_LOAD		FALSE
N	#endif
N   /**
N     * @brief   There is a user supplied routine to save mouse calibration data
N	 * @details	Defaults to FALSE
N     * @note    If TRUE the user must supply the @p SaveMouseCalibration() routine.
N     */
N	#ifndef GINPUT_TOUCH_USER_CALIBRATION_SAVE
N		#define GINPUT_TOUCH_USER_CALIBRATION_SAVE		FALSE
N	#endif
N	#if defined(__DOXYGEN__)
X	#if 0L
S	   /**
S		 * @brief   Define multiple static mice
S		 * @details	When not defined the system automatically detects a single linked mouse driver
S		 * @note	The references to GMOUSEVMT_Win32 in the definition would be replaced
S		 * 			by the names of the VMT for each of the static mice you want to
S		 * 			include.
S		 * @note	Dynamic mice associated automatically with a display eg Win32, X or GFXnet
S		 * 			do not need to be specified in this list as the associated display driver will register
S		 * 			them automatically as the display is created.
S		 */
S		#define GMOUSE_DRIVER_LIST						GMOUSEVMT_Win32, GMOUSEVMT_Win32
N	#endif
N	/**
N	 * @brief   Milliseconds between keyboard polls.
N	 * @details	Defaults to 200 milliseconds
N	 * @note	How often keyboards should be polled.
N	 */
N	#ifndef GINPUT_KEYBOARD_POLL_PERIOD
N		#define GINPUT_KEYBOARD_POLL_PERIOD				200
N	#endif
N	#if defined(__DOXYGEN__)
X	#if 0L
S	   /**
S		 * @brief   Define multiple static keyboards
S		 * @details	When not defined the system automatically detects a single linked keyboard driver
S		 * @note	The references to GKEYBOARDVMT_Win32 in the definition would be replaced
S		 * 			by the names of the VMT for each of the static keyboards you want to
S		 * 			include.
S		 * @note	Dynamic keyboards associated automatically with a display eg Win32, X or GFXnet
S		 * 			do not need to be specified in this list as the display driver will register
S		 * 			them automatically as the display is created.
S		 */
S		#define GKEYBOARD_DRIVER_LIST					GMOUSEVMT_Win32, GMOUSEVMT_Win32
N	#endif
N   /**
N     * @brief   Turn off the layout engine.
N	 * @details	When defined the layout engine is removed from the code and characters
N	 * 			are passed directly from the keyboard driver to the application.
N	 * @note	Turning off the layout engine just saves code if it is not needed.
N     */
N	#ifndef GKEYBOARD_LAYOUT_OFF
N		#define GKEYBOARD_LAYOUT_OFF					FALSE
N	#endif
N	/**
N	 * @brief   Various Keyboard Layouts that can be included.
N	 * @details	A keyboard layout controls conversion of scancodes to characters
N	 * 			and enables one keyboard to have multiple language mappings.
N	 * @note	Defining a layout does not make it active. The keyboard driver
N	 * 			must have it active as the default or the application must
N	 * 			use @p ginputSetKeyboardLayout() to set the active layout.
N	 * @note	Multiple layouts can be included but only one will be active
N	 * 			at a time (per keyboard).
N	 * @{
N	 */
N	#ifndef GKEYBOARD_LAYOUT_SCANCODE2_US
N		#define GKEYBOARD_LAYOUT_SCANCODE2_US			FALSE				// US Keyboard using the ScanCode 2 set.
N	#endif
N	/** @} */
N/** @} */
N
N#endif /* _GINPUT_OPTIONS_H */
N/** @} */
L 172 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gadc/gadc_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gadc/gadc_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gadc/gadc_options.h
N * @brief   GADC - Periodic ADC subsystem options header file.
N *
N * @addtogroup GADC
N * @{
N */
N
N#ifndef _GADC_OPTIONS_H
N#define _GADC_OPTIONS_H
N
N/**
N * @name    GADC Functionality to be included
N * @{
N */
N/**
N * @}
N *
N * @name    GADC Optional Sizing Parameters
N * @{
N */
N	/**
N	 * @brief   The maximum GADC sample rate
N	 * @details	Defaults to 44000
N	 * @note	This value must be less than half the maximum sample rate allowed by the CPU.
N	 * 			This is to ensure there is time between high speed samples to perform low
N	 * 			speed device sampling.
N	 */
N	#ifndef GADC_MAX_HIGH_SPEED_SAMPLERATE
N		#define GADC_MAX_HIGH_SPEED_SAMPLERATE	44000
N	#endif
N/** @} */
N
N#endif /* _GADC_OPTIONS_H */
N/** @} */
L 173 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gaudio/gaudio_options.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gaudio/gaudio_options.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gaudio/gaudio_options.h
N * @brief   GAUDIO - Audio subsystem options header file.
N *
N * @addtogroup GAUDIO
N * @{
N */
N
N#ifndef _GAUDIO_OPTIONS_H
N#define _GAUDIO_OPTIONS_H
N
N/**
N * @name    GAUDIO Functionality to be included
N * @{
N */
N	/**
N	 * @brief	Audio Play capability is needed
N	 */
N	#ifndef GAUDIO_NEED_PLAY
N		#define GAUDIO_NEED_PLAY			FALSE
N	#endif
N	/**
N	 * @brief	Audio Recording capability is needed
N	 */
N	#ifndef GAUDIO_NEED_RECORD
N		#define GAUDIO_NEED_RECORD			FALSE
N	#endif
N/**
N * @}
N *
N * @name    GAUDIO Optional Sizing Parameters
N * @{
N */
N/** @} */
N
N#endif /* _GAUDIO_OPTIONS_H */
N/** @} */
L 174 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N
N/**
N * Interdependency safety checks on the sub-systems.
N * These must be in dependency order.
N *
N */
N#ifndef GFX_DISPLAY_RULE_WARNINGS
S	#define GFX_DISPLAY_RULE_WARNINGS	FALSE
N#endif
N#include "src/gwin/gwin_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gwin/gwin_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_rules.h
N * @brief   GWIN safety rules header file.
N *
N * @addtogroup GWIN
N * @{
N */
N
N#ifndef _GWIN_RULES_H
N#define _GWIN_RULES_H
N
N#if GFX_USE_GWIN
X#if 0
S	// Sub-system rules
S	#if !GFX_USE_GDISP
S		#error "GWIN: GFX_USE_GDISP must be TRUE when using GWIN"
S	#endif
S	#if !GDISP_NEED_CLIP
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GWIN: Drawing can occur outside the defined windows as GDISP_NEED_CLIP is FALSE"
S		#endif
S	#endif
S
S	// Objects require their super-class
S	#if GWIN_NEED_TABSET || GWIN_NEED_FRAME || GWIN_NEED_CONTAINER
S		#if !GWIN_NEED_CONTAINERS
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GWIN_NEED_CONTAINERS is required when a container is enabled. It has been turned on for you."
S			#endif
S			#undef GWIN_NEED_CONTAINERS
S			#define GWIN_NEED_CONTAINERS	TRUE
S		#endif
S	#endif
S	#if GWIN_NEED_BUTTON || GWIN_NEED_SLIDER || GWIN_NEED_CHECKBOX || GWIN_NEED_LABEL || GWIN_NEED_RADIO || GWIN_NEED_LIST || \
S		GWIN_NEED_IMAGE || GWIN_NEED_CHECKBOX || GWIN_NEED_PROGRESSBAR || GWIN_NEED_KEYBOARD || GWIN_NEED_TEXTEDIT
X	#if GWIN_NEED_BUTTON || GWIN_NEED_SLIDER || GWIN_NEED_CHECKBOX || GWIN_NEED_LABEL || GWIN_NEED_RADIO || GWIN_NEED_LIST || 		GWIN_NEED_IMAGE || GWIN_NEED_CHECKBOX || GWIN_NEED_PROGRESSBAR || GWIN_NEED_KEYBOARD || GWIN_NEED_TEXTEDIT
S		#if !GWIN_NEED_WIDGET
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GWIN_NEED_WIDGET is required when a widget is used. It has been turned on for you."
S			#endif
S			#undef GWIN_NEED_WIDGET
S			#define GWIN_NEED_WIDGET	TRUE
S		#endif
S	#endif
S
S	// Rules for the super-classes
S	#if GWIN_NEED_CONTAINERS
S		#if !GWIN_NEED_WIDGET
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GWIN_NEED_WIDGET is required when GWIN_NEED_CONTAINERS is enabled. It has been turned on for you."
S			#endif
S			#undef GWIN_NEED_WIDGET
S			#define GWIN_NEED_WIDGET	TRUE
S		#endif
S	#endif
S	#if GWIN_NEED_WIDGET
S		#if !GDISP_NEED_TEXT
S			#error "GWIN: GDISP_NEED_TEXT is required if GWIN_NEED_WIDGET is TRUE."
S		#endif
S		#if !GFX_USE_GINPUT
S			// This test also ensures that GFX_USE_GEVENT is set
S			#error "GWIN: GFX_USE_GINPUT (and one or more input sources) is required if GWIN_NEED_WIDGET is TRUE"
S		#endif
S		#if !GWIN_NEED_WINDOWMANAGER
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GWIN_NEED_WINDOWMANAGER is required if GWIN_NEED_WIDGET is TRUE. It has been turned on for you."
S			#endif
S			#undef GWIN_NEED_WINDOWMANAGER
S			#define GWIN_NEED_WINDOWMANAGER	TRUE
S		#endif
S		#if !GDISP_NEED_MULTITHREAD
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GDISP_NEED_MULTITHREAD is required if GWIN_NEED_WIDGET is TRUE. It has been turned on for you"
S			#endif
S			#undef GDISP_NEED_MULTITHREAD
S			#define GDISP_NEED_MULTITHREAD	TRUE
S		#endif
S	#endif
S	#if GWIN_NEED_WINDOWMANAGER
S		#if !GFX_USE_GQUEUE || !GQUEUE_NEED_ASYNC
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GFX_USE_GQUEUE and GQUEUE_NEED_ASYNC is required if GWIN_NEED_WINDOWMANAGER is TRUE. It has been turned on for you."
S			#endif
S			#undef GFX_USE_GQUEUE
S			#undef GQUEUE_NEED_ASYNC
S			#define GFX_USE_GQUEUE		TRUE
S			#define GQUEUE_NEED_ASYNC	TRUE
S		#endif
S		#if !GFX_USE_GTIMER
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GFX_USE_GTIMER is required if GWIN_NEED_WINDOWMANAGER is TRUE. It has been turned on for you."
S			#endif
S			#undef GFX_USE_GTIMER
S			#define GFX_USE_GTIMER		TRUE
S		#endif
S	#endif
S
S	// Rules for individual objects
S	#if GWIN_NEED_LIST
S		#if !GDISP_NEED_TEXT
S			#error "GWIN: GDISP_NEED_TEXT is required when GWIN_NEED_LIST is TRUE."
S		#endif
S	#endif
S	#if GWIN_NEED_RADIO
S		#if !GDISP_NEED_CIRCLE
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GWIN: GDISP_NEED_CIRCLE should be set to TRUE for much nicer radio button widgets."
S			#endif
S		#endif
S	#endif
S	#if GWIN_NEED_IMAGE
S		#if !GDISP_NEED_IMAGE
S			#error "GWIN: GDISP_NEED_IMAGE is required when GWIN_NEED_IMAGE is TRUE."
S		#endif
S	#endif
S	#if GWIN_NEED_CONSOLE
S		#if !GDISP_NEED_TEXT
S			#error "GWIN: GDISP_NEED_TEXT is required if GWIN_NEED_CONSOLE is TRUE."
S		#endif
S	#endif
S	#if GWIN_NEED_TEXTEDIT
S		#if !GDISP_NEED_TEXT
S			#error "GWIN: GDISP_NEED_TEXT is required if GWIN_NEED_TEXTEDIT is TRUE."
S		#endif
S		#if !(GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD)
S			#error "GWIN: GINPUT_NEED_KEYBOARD or GWIN_NEED_KEYBOARD is required if GWIN_NEED_TEXTEDIT is TRUE."
S		#endif
S	#endif
N#endif
N
N#endif /* _GWIN_RULES_H */
N/** @} */
L 184 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/ginput/ginput_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/ginput/ginput_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_rules.h
N * @brief   GINPUT safety rules header file.
N *
N * @addtogroup GINPUT
N * @{
N */
N
N#ifndef _GINPUT_RULES_H
N#define _GINPUT_RULES_H
N
N#if GFX_USE_GINPUT
X#if 0
S	#if !GFX_USE_GEVENT
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GINPUT: GFX_USE_GEVENT is required if GFX_USE_GINPUT is TRUE. It has been turned on for you."
S		#endif
S		#undef GFX_USE_GEVENT
S		#define	GFX_USE_GEVENT		TRUE
S	#endif
S	#if !GFX_USE_GTIMER
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GINPUT: GFX_USE_GTIMER is required if GFX_USE_GINPUT is TRUE. It has been turned on for you."
S		#endif
S		#undef GFX_USE_GTIMER
S		#define	GFX_USE_GTIMER		TRUE
S	#endif
S	#if GINPUT_NEED_MOUSE
S		#if GINPUT_TOUCH_NOTOUCH
S			// No warning needed for this
S			#undef GINPUT_TOUCH_NOCALIBRATE
S			#define GINPUT_TOUCH_NOCALIBRATE	TRUE
S		#endif
S		#if GINPUT_TOUCH_NOCALIBRATE
S			// No warning needed for this
S			#undef GINPUT_TOUCH_NOCALIBRATE_GUI
S			#define GINPUT_TOUCH_NOCALIBRATE_GUI	TRUE
S		#endif
S		#if !GINPUT_TOUCH_NOTOUCH && GINPUT_MOUSE_CLICK_TIME > GINPUT_TOUCH_CXTCLICK_TIME
S			#error "GINPUT MOUSE: The GINPUT_MOUSE_CLICK_TIME must be <= GINPUT_TOUCH_CXTCLICK_TIME"
S		#endif
S	#endif
N#endif
N
N#endif /* _GINPUT_RULES_H */
N/** @} */
L 185 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gdisp/gdisp_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdisp/gdisp_rules.h
N * @brief   GDISP safety rules header file.
N *
N * @addtogroup GDISP
N * @{
N */
N
N#ifndef _GDISP_RULES_H
N#define _GDISP_RULES_H
N
N#if GFX_USE_GDISP
X#if -1
N	#if !GFX_USE_GDRIVER
X	#if ! -1
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GDISP: GFX_USE_GDRIVER is required. GFX_USE_GDRIVER has turned on for you."
S		#endif
S		#undef GFX_USE_GDRIVER
S		#define GFX_USE_GDRIVER				TRUE
N	#endif
N	#if defined(GDISP_DRIVER_LIST)
X	#if 0L
S        #if GDISP_TOTAL_DISPLAYS != 1
S            #error "GDISP Multiple Drivers: You can't specify both GDISP_TOTAL_DISPLAYS and GDISP_DRIVER_LIST"
S        #endif
S		#ifndef GDISP_PIXELFORMAT
S			#error "GDISP Multiple Drivers: You must specify a value for GDISP_PIXELFORMAT when using GDISP_DRIVER_LIST"
S		#endif
N	#endif
N	#if GDISP_NEED_AUTOFLUSH && GDISP_NEED_TIMERFLUSH
X	#if 0 && 0
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GDISP: Both GDISP_NEED_AUTOFLUSH and GDISP_NEED_TIMERFLUSH has been set. GDISP_NEED_TIMERFLUSH has been disabled for you."
S		#endif
S		#undef GDISP_NEED_TIMERFLUSH
S		#define GDISP_NEED_TIMERFLUSH		FALSE
N	#endif
N	#if GDISP_NEED_TIMERFLUSH
X	#if 0
S		#if GDISP_NEED_TIMERFLUSH < 50 || GDISP_NEED_TIMERFLUSH > 1200
S			#error "GDISP: GDISP_NEED_TIMERFLUSH has been set to an invalid value (FALSE, 50-1200)."
S		#endif
S		#if !GFX_USE_GTIMER
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GDISP: GDISP_NEED_TIMERFLUSH has been set but GFX_USE_GTIMER has not been set. It has been turned on for you."
S			#endif
S			#undef GFX_USE_GTIMER
S			#define GFX_USE_GTIMER				TRUE
S			#undef GDISP_NEED_MULTITHREAD
S			#define GDISP_NEED_MULTITHREAD		TRUE
S		#endif
N	#endif
N	#if GDISP_NEED_ANTIALIAS && !GDISP_NEED_PIXELREAD
X	#if 0 && !0
S		#if GDISP_HARDWARE_PIXELREAD
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GDISP: GDISP_NEED_ANTIALIAS has been set but GDISP_NEED_PIXELREAD has not. It has been turned on for you."
S			#endif
S			#undef GDISP_NEED_PIXELREAD
S			#define GDISP_NEED_PIXELREAD	TRUE
S		#else
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GDISP: GDISP_NEED_ANTIALIAS has been set but your hardware does not support reading back pixels. Anti-aliasing will only occur for filled characters."
S			#endif
S		#endif
N	#endif
N	#if (defined(GDISP_INCLUDE_FONT_SMALL) && GDISP_INCLUDE_FONT_SMALL) || (defined(GDISP_INCLUDE_FONT_LARGER) && GDISP_INCLUDE_FONT_LARGER)
X	#if (0L && GDISP_INCLUDE_FONT_SMALL) || (0L && GDISP_INCLUDE_FONT_LARGER)
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GDISP: An old font (Small or Larger) has been defined. A single default font of UI2 has been added instead."
S			#warning "GDISP: Please see <$(GFXLIB)/include/gdisp/fonts/fonts.h> for a list of available font names."
S		#endif
S		#undef GDISP_INCLUDE_FONT_UI2
S		#define GDISP_INCLUDE_FONT_UI2		TRUE
N	#endif
N	#if GDISP_NEED_IMAGE
X	#if 0
S		#if !GFX_USE_GFILE
S			#if GFX_DISPLAY_RULE_WARNINGS
S				#warning "GDISP: GFX_USE_GFILE is required when GDISP_NEED_IMAGE is TRUE. It has been turned on for you."
S			#endif
S			#undef GFX_USE_GFILE
S			#define GFX_USE_GFILE	TRUE
S		#endif
N	#endif
N#endif
N
N#endif /* _GDISP_RULES_H */
N/** @} */
L 186 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gaudio/gaudio_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gaudio/gaudio_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gaudio/gaudio_rules.h
N * @brief   GAUDIO safety rules header file.
N *
N * @addtogroup GAUDIO
N * @{
N */
N
N#ifndef _GAUDIO_RULES_H
N#define _GAUDIO_RULES_H
N
N#if GFX_USE_GAUDIO
X#if 0
S	#if !GAUDIO_NEED_PLAY && !GAUDIO_NEED_RECORD
S		#error "GAUDIO: GAUDIO_NEED_PLAY and/or GAUDIO_NEED_RECORD is required if GFX_USE_GAUDIO is TRUE"
S	#endif
S	#if !GFX_USE_GQUEUE
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GAUDIO: GFX_USE_GQUEUE is required if GFX_USE_GAUDIO is TRUE. It has been turned on for you."
S		#endif
S		#undef GFX_USE_GQUEUE
S		#define	GFX_USE_GQUEUE		TRUE
S	#endif
S	#if GAUDIO_NEED_PLAY && !GQUEUE_NEED_ASYNC
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GAUDIO: GQUEUE_NEED_ASYNC is required if GAUDIO_NEED_PLAY is TRUE. It has been turned on for you."
S		#endif
S		#undef GQUEUE_NEED_ASYNC
S		#define	GQUEUE_NEED_ASYNC		TRUE
S	#endif
S	#if !GQUEUE_NEED_GSYNC || !GQUEUE_NEED_BUFFERS
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GAUDIO: GQUEUE_NEED_BUFFERS and GQUEUE_NEED_GSYNC are required if GFX_USE_GAUDIO is TRUE. They have been turned on for you."
S		#endif
S		#undef GQUEUE_NEED_BUFFERS
S		#define	GQUEUE_NEED_BUFFERS		TRUE
S		#undef GQUEUE_NEED_GSYNC
S		#define	GQUEUE_NEED_GSYNC		TRUE
S	#endif
S	#if GFX_USE_GEVENT && !GFX_USE_GTIMER
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GAUDIO: GFX_USE_GTIMER is required if GFX_USE_GAUDIO and GFX_USE_GEVENT are TRUE. It has been turned on for you."
S		#endif
S		#undef GFX_USE_GTIMER
S		#define	GFX_USE_GTIMER		TRUE
S	#endif
N#endif
N
N#endif /* _GAUDIO_RULES_H */
N/** @} */
L 187 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gadc/gadc_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gadc/gadc_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gadc/gadc_rules.h
N * @brief   GADC safety rules header file.
N *
N * @addtogroup GADC
N * @{
N */
N
N#ifndef _GADC_RULES_H
N#define _GADC_RULES_H
N
N#if GFX_USE_GADC
X#if 0
S	#if !GFX_USE_GTIMER
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GADC: GFX_USE_GTIMER is required if GFX_USE_GADC is TRUE. It has been turned on for you."
S		#endif
S		#undef GFX_USE_GTIMER
S		#define	GFX_USE_GTIMER		TRUE
S	#endif
S	#if !GFX_USE_GQUEUE || !GQUEUE_NEED_GSYNC || !GQUEUE_NEED_BUFFERS
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GADC: GFX_USE_GQUEUE, GQUEUE_NEED_BUFFERS and GQUEUE_NEED_GSYNC are required if GFX_USE_GADC is TRUE. They have been turned on for you."
S		#endif
S		#undef GFX_USE_GQUEUE
S		#define	GFX_USE_GQUEUE		TRUE
S		#undef GQUEUE_NEED_BUFFERS
S		#define	GQUEUE_NEED_BUFFERS		TRUE
S		#undef GQUEUE_NEED_GSYNC
S		#define	GQUEUE_NEED_GSYNC		TRUE
S	#endif
N#endif
N
N#endif /* _GADC_RULES_H */
N/** @} */
L 188 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gevent/gevent_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gevent/gevent_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gevent/gevent_rules.h
N * @brief   GEVENT safety rules header file.
N *
N * @addtogroup GEVENT
N * @{
N */
N
N#ifndef _GEVENT_RULES_H
N#define _GEVENT_RULES_H
N
N#if GFX_USE_GEVENT
X#if 0
N#endif
N
N#endif /* _GEVENT_RULES_H */
N/** @} */
L 189 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtimer/gtimer_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtimer/gtimer_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtimer/gtimer_rules.h
N * @brief   GTIMER safety rules header file.
N *
N * @addtogroup GTIMER
N * @{
N */
N
N#ifndef _GTIMER_RULES_H
N#define _GTIMER_RULES_H
N
N#if GFX_USE_GTIMER
X#if 0
S	#if GFX_USE_GDISP && !GDISP_NEED_MULTITHREAD
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GTIMER: GDISP_NEED_MULTITHREAD has not been specified."
S			#warning "GTIMER: Make sure you are not performing any GDISP/GWIN drawing operations in the timer callback!"
S		#endif
S	#endif
N#endif
N
N#endif /* _GTIMER_RULES_H */
N/** @} */
L 190 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gqueue/gqueue_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gqueue/gqueue_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gqueue/gqueue_rules.h
N * @brief   GQUEUE safety rules header file.
N *
N * @addtogroup GQUEUE
N * @{
N */
N
N#ifndef _GQUEUE_RULES_H
N#define _GQUEUE_RULES_H
N
N#if GFX_USE_GQUEUE
X#if 0
S	#if GQUEUE_NEED_BUFFERS && !GQUEUE_NEED_GSYNC
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GQUEUE: GQUEUE_NEED_GSYNC is required if GQUEUE_NEED_BUFFERS is TRUE. It has been turned on for you."
S		#endif
S		#undef GQUEUE_NEED_GSYNC
S		#define	GQUEUE_NEED_GSYNC		TRUE
S	#endif
N#endif
N
N#endif /* _GQUEUE_RULES_H */
N/** @} */
L 191 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gmisc/gmisc_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gmisc/gmisc_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gmisc/gmisc_rules.h
N * @brief   GMISC safety rules header file.
N *
N * @addtogroup GMISC
N * @{
N */
N
N#ifndef _GMISC_RULES_H
N#define _GMISC_RULES_H
N
N#if GFX_USE_GMISC
X#if 0
N#endif
N
N#endif /* _GMISC_RULES_H */
N/** @} */
L 192 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtrans/gtrans_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtrans/gtrans_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtrans/gtrans_rules.h
N *
N * @addtogroup GTRANS
N * @{
N */
N
N#ifndef _GTRANS_RULES_H
N#define _GTRANS_RULES_H
N
N#if GFX_USE_GTRANS
X#if 0
N#endif
N
N#endif /* _GTRANS_RULES_H */
N/** @} */
L 193 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gfile/gfile_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gfile/gfile_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gfile/gfile_rules.h
N * @brief   GFILE safety rules header file.
N *
N * @addtogroup GFILE
N * @{
N */
N
N#ifndef _GFILE_RULES_H
N#define _GFILE_RULES_H
N
N#if GFX_USE_GFILE
X#if 0
S	#if GFILE_NEED_PETITFS && GFILE_NEED_FATFS
S		#error "GFILE: Both GFILE_NEED_PETITFS and GFILE_NEED_FATFS cannot both be turned on at the same time."
S	#endif
N#endif
N
N#endif /* _GFILE_RULES_H */
N/** @} */
L 194 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gdriver/gdriver_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdriver/gdriver_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdriver/gdriver_rules.h
N * @brief   GDRIVER safety rules header file.
N *
N * @addtogroup GFILE
N * @{
N */
N
N#ifndef _GDRIVER_RULES_H
N#define _GDRIVER_RULES_H
N
N#if GFX_USE_GDRIVER
X#if -1
N#endif
N
N#endif /* _GDRIVER_RULES_H */
N/** @} */
L 195 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gos/gos_rules.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_rules.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gos/gos_rules.h
N * @brief   GOS safety rules header file.
N *
N * @addtogroup GOS
N * @{
N */
N
N#ifndef _GOS_RULES_H
N#define _GOS_RULES_H
N
N#if !GFX_USE_OS_CHIBIOS && !GFX_USE_OS_WIN32 && !GFX_USE_OS_LINUX && !GFX_USE_OS_OSX && !GFX_USE_OS_RAW32 && !GFX_USE_OS_FREERTOS && !GFX_USE_OS_ECOS && !GFX_USE_OS_RAWRTOS && !GFX_USE_OS_ARDUINO && !GFX_USE_OS_CMSIS && !GFX_USE_OS_KEIL && !GFX_USE_OS_NIOS && !GFX_USE_OS_QT
X#if !0 && !0 && !0 && !0 && ! -1 && !0 && !0 && !0 && !0 && !0 && !0 && !0 && !0
S	#error "GOS: No operating system has been defined."
N#endif
N
N#if GFX_USE_OS_CHIBIOS + GFX_USE_OS_WIN32 + GFX_USE_OS_LINUX + GFX_USE_OS_OSX + GFX_USE_OS_RAW32 + GFX_USE_OS_FREERTOS + GFX_USE_OS_ECOS + GFX_USE_OS_RAWRTOS + GFX_USE_OS_ARDUINO + GFX_USE_OS_CMSIS + GFX_USE_OS_KEIL + GFX_USE_OS_NIOS + GFX_USE_OS_QT != 1 * TRUE
X#if 0 + 0 + 0 + 0 + -1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 != 1 * -1
S	#error "GOS: More than one operation system has been defined as TRUE."
N#endif
N
N#if GFX_FREERTOS_USE_TRACE && !GFX_USE_OS_FREERTOS
X#if 0 && !0
S 	#error "GOS: GFX_FREERTOS_USE_TRACE is only available for the FreeRTOS port."
N#endif
N
N#if GFX_EMULATE_MALLOC
X#if 0
S	#if GFX_USE_OS_WIN32 || GFX_USE_OS_LINUX || GFX_USE_OS_OSX || GFX_USE_OS_ECOS || \
S			(GFX_OS_HEAP_SIZE == 0 && (GFX_USE_OS_RAW32 || GFX_USE_OS_ARDUINO || GFX_USE_OS_CMSIS || GFX_USE_OS_KEIL))
X	#if GFX_USE_OS_WIN32 || GFX_USE_OS_LINUX || GFX_USE_OS_OSX || GFX_USE_OS_ECOS || 			(GFX_OS_HEAP_SIZE == 0 && (GFX_USE_OS_RAW32 || GFX_USE_OS_ARDUINO || GFX_USE_OS_CMSIS || GFX_USE_OS_KEIL))
S		#if GFX_DISPLAY_RULE_WARNINGS
S			#warning "GOS: Cannot emulate malloc as gfxAlloc() internally uses malloc on this platform"
S		#endif
S		#undef GFX_EMULATE_MALLOC
S		#define GFX_EMULATE_MALLOC	FALSE
S	#endif
N#endif
N
N#endif /* _GOS_RULES_H */
N/** @} */
L 196 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N
N/**
N *  Include the sub-system header files
N */
N#include "src/gos/gos.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gos/gos.h
N * @brief   GOS - Operating System Support header file
N *
N * @addtogroup GOS
N *
N * @brief	Module to build a uniform abstraction layer between uGFX and the underlying system
N *
N * @note	Some of the routines specified below may be implemented simply as
N * 			a macro to the real operating system call.
N * @{
N */
N
N#ifndef _GOS_H
N#define _GOS_H
N
N#if defined(__DOXYGEN__)
X#if 0L
S	/*===========================================================================*/
S	/* Type definitions                                                          */
S	/*===========================================================================*/
S
S	/**
S	 * @name	Various integer sizes
S	 * @note	Your platform may use slightly different definitions to these
S	 * @{
S	 */
S	typedef unsigned char	bool_t;
S	typedef char			int8_t;
S	typedef unsigned char	uint8_t;
S	typedef short			int16_t;
S	typedef unsigned short	uint16_t;
S	typedef long			int32_t;
S	typedef unsigned long	uint32_t;
S	/** @} */
S
S	/**
S	 * @name	Various platform (and operating system) dependent types
S	 * @note	Your platform may use slightly different definitions to these
S	 * @{
S	 */
S	typedef unsigned long	size_t;
S	typedef unsigned long	delaytime_t;
S	typedef unsigned long	systemticks_t;
S	typedef short			semcount_t;
S	typedef int				threadreturn_t;
S	typedef int				threadpriority_t;
S	/** @} */
S
S	/**
S	 * @brief	Declare a thread function
S	 *
S	 * @param[in] fnName	The name of the function
S	 * @param[in] param 	A custom parameter that is passed to the function
S	 */
S	#define DECLARE_THREAD_FUNCTION(fnName, param)	threadreturn_t fnName(void *param)
S
S	/**
S	 * @brief	Declare a thread stack
S	 *
S	 * @param[in] name 		The name of the stack
S	 * @param[in] sz 		The size of the stack
S	 */
S	#define DECLARE_THREAD_STACK(name, sz)			uint8_t name[sz];
S
S	/*
S	 * @brief	Return from a thread
S	 *
S	 * @details	Some underlying operating systems allow to return a value from a thread while others don't.
S	 *			For systems that don't allow to return a value from a thread function this call is simply ignored.
S	 *
S	 * @param[in] reval		The value which should be returned
S	 */
S	#define THREAD_RETURN(retval)					return retval
S
S	/**
S	 * @name	Various platform (and operating system) constants
S	 * @note	Your platform may use slightly different definitions to these
S	 * @{
S	 */
S	#define FALSE						0
S	#define TRUE						1
S	#define TIME_IMMEDIATE				0
S	#define TIME_INFINITE				((delaytime_t)-1)
S	#define MAX_SEMAPHORE_COUNT			((semcount_t)(((unsigned long)((semcount_t)(-1))) >> 1))
S	#define LOW_PRIORITY				0
S	#define NORMAL_PRIORITY				1
S	#define HIGH_PRIORITY				2
S	/** @} */
S
S	/**
S	 * @brief	A semaphore
S	 * @note	Your operating system will have a proper definition for this structure
S	 */
S	typedef struct {} gfxSem;
S
S	/**
S	 * @brief	A mutex
S	 * @note	Your operating system will have a proper definition for this structure
S	 */
S	typedef struct {} gfxMutex;
S
S	/**
S	 * @brief	A thread handle
S	 * @note	Your operating system will have a proper definition for this.
S	 */
S	typedef void * gfxThreadHandle;
S
S	/*===========================================================================*/
S	/* Function declarations.                                                    */
S	/*===========================================================================*/
S
S	#ifdef __cplusplus
S	extern "C" {
S	#endif
S
S	/**
S	 * @brief	Halt the GFX application due to an error.
S	 *
S	 * @param[in] msg	An optional debug message to show (Can be NULL)
S	 *
S	 * @api
S	 */
S	void gfxHalt(const char *msg);
S
S	/**
S	 * @brief	Exit the GFX application.
S	 *
S	 * @api
S	 */
S	void gfxExit(void);
S
S	/**
S	 * @brief	Allocate memory
S	 * @return	A pointer to the memory allocated or NULL if there is no more memory available
S	 *
S	 * @param[in] sz	The size in bytes of the area to allocate
S	 *
S	 * @api
S	 */
S	void *gfxAlloc(size_t sz);
S
S	/**
S	 * @brief	Re-allocate memory
S	 * @return	A pointer to the new memory area or NULL if there is no more memory available
S	 *
S	 * @param[in] ptr		The old memory area to be increased/decreased in size
S	 * @param[in] oldsz		The size in bytes of the old memory area
S	 * @param[in] newsz		The size in bytes of the new memory area
S	 *
S	 * @note		Some operating systems don't use the oldsz parameter as they implicitly know the size of
S	 * 				old memory area. The parameter must always be supplied however for API compatibility.
S	 * @note		gfxRealloc() can make the area smaller or larger but may have to return a different pointer.
S	 * 				If this occurs the new area contains a copy of the data from the old area. The old memory
S	 * 				pointer should not be used after this routine as the original area may have been freed.
S	 * @note		If there is insufficient memory to create the new memory region, NULL is returned and the
S	 * 				old memory area is left unchanged.
S	 *
S	 * @api
S	 */
S	void *gfxRealloc(void *ptr, size_t oldsz, size_t newsz);
S
S	/**
S	 * @brief	Free memory
S	 *
S	 * @param[in] ptr	The memory to free
S	 *
S	 * @api
S	 */
S	void gfxFree(void *ptr);
S
S	/**
S	 * @brief	Use gfxAlloc and gfxFree to implement malloc() and free()
S	 *
S	 * @note	Sometimes your application will include functions that
S	 * 			want to internally use malloc() and free(). As the default
S	 * 			implementations of these in your C library are almost
S	 * 			invariably incorrect for an embedded platform, this option
S	 * 			allows you to emulate those calls with gfxAlloc() and gfxFree().
S	 *			An example is the C library routine rand() which on many
S	 *			implementations internally uses malloc().
S	 *
S	 * @api
S	 */
S	#ifndef GFX_EMULATE_MALLOC
S		#define GFX_EMULATE_MALLOC			FALSE
S	#endif
S
S	/**
S	 * @brief	Yield the current thread
S	 * @details	Give up the rest of the current time slice for this thread in order to give other threads
S	 * 			a chance to run.
S	 *
S	 * @api
S	 */
S	void gfxYield(void);
S
S	/**
S	 * @brief	Put the current thread to sleep for the specified period in milliseconds
S	 *
S	 * @param[in] ms	The number milliseconds to sleep
S	 *
S	 * @note		Specifying TIME_IMMEDIATE will yield the current thread but return
S	 * 				on the next time slice.
S	 * @note		Specifying TIME_INFINITE will sleep forever.
S	 *
S	 * @api
S	 */
S	void gfxSleepMilliseconds(delaytime_t ms);
S
S	/**
S	 * @brief	Put the current thread to sleep for the specified period in microseconds
S	 *
S	 * @param[in] us	The number microseconds to sleep
S	 *
S	 * @note		Specifying TIME_IMMEDIATE will return immediately (no sleeping)
S	 * @note		Specifying TIME_INFINITE will sleep forever.
S	 *
S	 * @api
S	 */
S	void gfxSleepMicroseconds(delaytime_t us);
S
S	/**
S	 * @brief	Get the current operating system tick time
S	 * @return	The current tick time
S	 *
S	 * @note	A "tick" is an arbitrary period of time that the operating
S	 * 			system uses to mark time.
S	 * @note	The absolute value of this call is relatively meaningless. Its usefulness
S	 * 			is in calculating periods between two calls to this function.
S	 * @note	As the value from this function can wrap it is important that any periods are calculated
S	 * 			as t2 - t1 and then compared to the desired period rather than comparing
S	 * 			t1 + period to t2
S	 *
S	 * @api
S	 */
S	systemticks_t gfxSystemTicks(void);
S
S	/**
S	 * @brief	Convert a given number of millseconds to a number of operating system ticks
S	 * @return	The period in system ticks.
S	 *
S	 * @note	A "tick" is an arbitrary period of time that the operating
S	 * 			system uses to mark time.
S	 *
S	 * @param[in] ms	The number of millseconds
S	 *
S	 * @api
S	 */
S	systemticks_t gfxMillisecondsToTicks(delaytime_t ms);
S
S	/**
S	 * @brief	Lock the operating system to protect a sequence of code
S	 *
S	 * @note	Calling this will lock out all other threads from executing even at interrupt level
S	 * 			within the GFX system. On hardware this may be implemented as a disabling of interrupts,
S	 * 			however in an operating system which hides real interrupt level code it may simply use a
S	 * 			mutex lock.
S	 * @note	The thread MUST NOT block whilst the system is locked. It must execute in this state for
S	 * 			as short a period as possible as this can seriously affect interrupt latency on some
S	 * 			platforms.
S	 * @note	While locked only interrupt level (iclass) GFX routines may be called.
S	 *
S	 * @api
S	 */
S	void gfxSystemLock(void);
S
S	/**
S	 * @brief	Unlock the operating system previous locked by gfxSystemLock()
S	 *
S	 * @api
S	 */
S	void gfxSystemUnlock(void);
S
S	/**
S	 * @brief	Initialise a mutex to protect a region of code from other threads.
S	 *
S	 * @param[in]	pmutex	A pointer to the mutex
S	 *
S	 * @note	Whilst a counting semaphore with a limit of 1 can be used for similiar purposes
S	 * 			on many operating systems using a seperate mutex structure is more efficient.
S	 *
S	 * @api
S	 */
S	void gfxMutexInit(gfxMutex *pmutex);
S
S	/**
S	 * @brief	Destroy a Mutex.
S	 *
S	 * @param[in]	pmutex	A pointer to the mutex
S	 *
S	 * @api
S	 */
S	void gfxMutexDestroy(gfxMutex *pmutex);
S
S	/**
S	 * @brief	Enter the critical code region protected by the mutex.
S	 * @details	Blocks until there is no other thread in the critical region.
S	 *
S	 * @param[in]	pmutex	A pointer to the mutex
S	 *
S	 * @api
S	 */
S	void gfxMutexEnter(gfxMutex *pmutex);
S
S	/**
S	 * @brief	Exit the critical code region protected by the mutex.
S	 * @details	May cause another thread waiting on the mutex to now be placed into the run queue.
S	 *
S	 * @param[in]	pmutex	A pointer to the mutex
S	 *
S	 * @api
S	 */
S	void gfxMutexExit(gfxMutex *pmutex);
S
S	/**
S	 * @brief	Initialise a Counted Semaphore
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 * @param[in] val		The initial value of the semaphore
S	 * @param[in] limit		The maxmimum value of the semaphore
S	 *
S	 * @note	Operations defined for counted semaphores:
S	 * 				Signal: The semaphore counter is increased and if the result is non-positive then a waiting thread
S	 * 						 is queued for execution. Note that once the thread reaches "limit", further signals are
S	 * 						 ignored.
S	 * 				Wait: The semaphore counter is decreased and if the result becomes negative the thread is queued
S	 * 						in the semaphore and suspended.
S	 *
S	 * @api
S	 */
S	void gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit);
S
S	/**
S	 * @brief	Destroy a Counted Semaphore
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @note	Any threads waiting on the semaphore will be released
S	 *
S	 * @api
S	 */
S	void gfxSemDestroy(gfxSem *psem);
S
S	/**
S	 * @brief	Wait on a semaphore
S	 * @details	The semaphore counter is decreased and if the result becomes negative the thread waits for it to become
S	 * 				non-negative again
S	 * @return	FALSE if the wait timeout occurred otherwise TRUE
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 * @param[in] ms		The maximum time to wait for the semaphore
S	 *
S	 * @api
S	 */
S	bool_t gfxSemWait(gfxSem *psem, delaytime_t ms);
S
S	/**
S	 * @brief	Test if a wait on a semaphore can be satisfied immediately
S	 * @details	Equivalent to @p gfxSemWait(psem, TIME_IMMEDIATE) except it can be called at interrupt level
S	 * @return	FALSE if the wait would occur occurred otherwise TRUE
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @iclass
S	 * @api
S	 */
S	bool_t gfxSemWaitI(gfxSem *psem);
S
S	/**
S	 * @brief	Signal a semaphore
S	 * @details	The semaphore counter is increased and if the result is non-positive then a waiting thread
S	 * 						 is queued for execution. Note that once the thread reaches "limit", further signals are
S	 * 						 ignored.
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @api
S	 */
S	void gfxSemSignal(gfxSem *psem);
S
S	/**
S	 * @brief	Signal a semaphore
S	 * @details	The semaphore counter is increased and if the result is non-positive then a waiting thread
S	 * 						 is queued for execution. Note that once the thread reaches "limit", further signals are
S	 * 						 ignored.
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @iclass
S	 * @api
S	 */
S	void gfxSemSignalI(gfxSem *psem);
S
S	/**
S	 * @brief	Get the current semaphore count
S	 * @return	The current semaphore count
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @api
S	 */
S	semcount_t gfxSemCounter(gfxSem *psem);
S
S	/**
S	 * @brief	Get the current semaphore count
S	 * @return	The current semaphore count
S	 *
S	 * @param[in] psem		A pointer to the semaphore
S	 *
S	 * @iclass
S	 * @api
S	 */
S	semcount_t gfxSemCounterI(gfxSem *psem);
S
S	/**
S	 * @brief	Start a new thread.
S	 * @return	Returns a thread handle if the thread was started, NULL on an error
S	 *
S	 * @param[in]	stackarea	A pointer to the area for the new threads stack or NULL to dynamically allocate it
S	 * @param[in]	stacksz		The size of the thread stack. 0 means the default operating system size although this
S	 * 							is only valid when stackarea is dynamically allocated.
S	 * @param[in]	prio		The priority of the new thread
S	 * @param[in]	fn			The function the new thread will run
S	 * @param[in]	param		A parameter to pass the thread function.
S	 *
S	 * @api
S	 */
S	gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param);
S
S	/**
S	 * @brief	Wait for a thread to finish.
S	 * @return	Returns the thread exit code.
S	 *
S	 * @param[in]	thread		The Thread Handle
S	 *
S	 * @note		This will also close the thread handle as it is no longer useful
S	 * 				once the thread has ended.
S	 * @api
S	 */
S	threadreturn_t gfxThreadWait(gfxThreadHandle thread);
S
S	/**
S	 * @brief	Get the current thread handle.
S	 * @return	A thread handle
S	 *
S	 * @api
S	 */
S	gfxThreadHandle gfxThreadMe(void);
S
S	/**
S	 * @brief	Close the thread handle.
S	 *
S	 * @param[in]	thread		The Thread Handle
S	 *
S	 * @note	This does not affect the thread, it just closes our handle to the thread.
S	 *
S	 * @api
S	 */
S	void gfxThreadClose(gfxThreadHandle thread);
S
S	#ifdef __cplusplus
S	}
S	#endif
S
S/**
S * All the above was just for the doxygen documentation. All the implementation of the above
S * (without any of the documentation overheads) is in the files below.
S */
S#elif GFX_USE_OS_RAWRTOS
X#elif 0
S 	#include "gos_rawrtos.h"
S#elif GFX_USE_OS_CHIBIOS
X#elif 0
S	#include "gos_chibios.h"
S#elif GFX_USE_OS_FREERTOS
X#elif 0
S	#include "gos_freertos.h"
S#elif GFX_USE_OS_WIN32
X#elif 0
S	#include "gos_win32.h"
S#elif GFX_USE_OS_LINUX
X#elif 0
S	#include "gos_linux.h"
S#elif GFX_USE_OS_OSX
X#elif 0
S	#include "gos_osx.h"
N#elif GFX_USE_OS_RAW32
X#elif -1
N	#include "gos_raw32.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_raw32.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * The raw32 GOS implementation supports any 32 bit processor with or without an
N * 	underlying operating system. It uses cooperative multi-tasking. Be careful
N * 	when writing device drivers not to disturb the assumptions this creates by performing
N * 	call-backs to uGFX code unless you define the INTERRUPTS_OFF() and INTERRUPTS_ON() macros.
N * 	It still requires some C runtime library support...
N * 		enough startup to initialise the stack, interrupts, static data etc and call main().
N * 		setjmp() and longjmp()			- for threading
N * 		memcpy()						- for heap and threading
N * 		malloc(), realloc and free()	- if GOS_RAW_HEAP_SIZE == 0
N *
N * 	You must also define the following routines in your own code so that timing functions will work...
N * 		systemticks_t gfxSystemTicks(void);
N *		systemticks_t gfxMillisecondsToTicks(delaytime_t ms);
N */
N#ifndef _GOS_RAW32_H
N#define _GOS_RAW32_H
N
N#if GFX_USE_OS_RAW32
X#if -1
N
N/*===========================================================================*/
N/* Type definitions                                                          */
N/*===========================================================================*/
N
Ntypedef unsigned char	bool_t;
N
N#if __STDC_VERSION__ >= 199901L
X#if 199901L >= 199901L
N	#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060016
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 36 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_raw32.h" 2
N#elif defined(__GNUC__) || defined(__GNUG__)
S	typedef __INT8_TYPE__	int8_t;
S	typedef __UINT8_TYPE__	uint8_t;
S	typedef __INT16_TYPE__	int16_t;
S	typedef __UINT16_TYPE__	uint16_t;
S	typedef __INT32_TYPE__	int32_t;
S	typedef __UINT32_TYPE__	uint32_t;
S#else
S	typedef signed char		int8_t;
S	typedef unsigned char	uint8_t;
S	typedef signed short	int16_t;
S	typedef unsigned short	uint16_t;
S	typedef signed int		int32_t;
S	typedef unsigned int	uint32_t;
N#endif
N
N#if defined(__STDC__)
X#if 1L
N	#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060016
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 54 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_raw32.h" 2
N#else
S	typedef uint32_t		size_t;
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N	void gfxHalt(const char *msg);
N	void gfxExit(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N/*===========================================================================*/
N/* Use the generic thread handling and heap handling                         */
N/*===========================================================================*/
N
N#define GOS_NEED_X_THREADS	TRUE
N#define GOS_NEED_X_HEAP		TRUE
N
N#include "gos_x_threads.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_x_threads.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * This threading implementation supports most 32 bit processors with or without an
N * 	underlying operating system. It uses cooperative multi-tasking. Be careful
N * 	when writing device drivers not to disturb the assumptions this creates by performing
N * 	call-backs from interrupt handlers to uGFX code unless you define the INTERRUPTS_OFF()
N * 	and INTERRUPTS_ON() macros.
N * 	It still requires some C runtime library support for the setjmp implementation...
N * 		setjmp() and longjmp()			- for threading
N * 		memcpy()						- for heap and threading
N *
N * 	You must also define the following routines in your own code so that timing functions will work...
N * 		systemticks_t gfxSystemTicks(void);
N *		systemticks_t gfxMillisecondsToTicks(delaytime_t ms);
N */
N#ifndef _GOS_X_THREADS_H
N#define _GOS_X_THREADS_H
N
N#if GOS_NEED_X_THREADS
X#if -1
N
Ntypedef uint32_t		delaytime_t;
Ntypedef uint32_t		systemticks_t;
Ntypedef short			semcount_t;
Ntypedef int				threadreturn_t;
Ntypedef int				threadpriority_t;
N
N#define DECLARE_THREAD_FUNCTION(fnName, param)	threadreturn_t fnName(void *param)
N#define DECLARE_THREAD_STACK(name, sz)			uint8_t name[sz];
N#define THREAD_RETURN(retval)					return retval
N
N#define TIME_IMMEDIATE				0
N#define TIME_INFINITE				((delaytime_t)-1)
N#define MAX_SEMAPHORE_COUNT			0x7FFF
N#define LOW_PRIORITY				0
N#define NORMAL_PRIORITY				1
N#define HIGH_PRIORITY				2
N
Ntypedef struct {
N	semcount_t		cnt;
N	semcount_t		limit;
N} gfxSem;
N
Ntypedef uint32_t		gfxMutex;
Ntypedef void *			gfxThreadHandle;
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N	// Required timing functions - supplied by the user or the operating system
N	systemticks_t gfxSystemTicks(void);
N	systemticks_t gfxMillisecondsToTicks(delaytime_t ms);
N
N	// Sleep Functions
N	void gfxSleepMilliseconds(delaytime_t ms);
N	void gfxSleepMicroseconds(delaytime_t ms);
N	void gfxYield(void);
N
N	// System Locking
N	void gfxSystemLock(void);
N	void gfxSystemUnlock(void);
N
N	// Mutexes
N	void gfxMutexInit(gfxMutex *pmutex);
N	#define gfxMutexDestroy(pmutex)
N	void gfxMutexEnter(gfxMutex *pmutex);
N	void gfxMutexExit(gfxMutex *pmutex);
N
N	// Semaphores
N	void gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit);
N	#define gfxSemDestroy(psem)
N	bool_t gfxSemWait(gfxSem *psem, delaytime_t ms);
N	bool_t gfxSemWaitI(gfxSem *psem);
N	void gfxSemSignal(gfxSem *psem);
N	void gfxSemSignalI(gfxSem *psem);
N
N	// Deprecated Semaphore functions (they still work here)
N	#define gfxSemCounter(psem)			((psem)->cnt)
N	#define gfxSemCounterI(psem)		((psem)->cnt)
N
N	// Threads
N	gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param);
X	gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, threadreturn_t (*fn)(void *p), void *param);
N	#define gfxThreadClose(thread)
N	threadreturn_t gfxThreadWait(gfxThreadHandle thread);
N	gfxThreadHandle gfxThreadMe(void);
N
N	/** The following is not part of the public ugfx API has some operating systems
N	 * 	simply do not provide this capability.
N	 * 	For RAW32 we need it anyway so we might as well declare it here.
N	 */
N	void gfxThreadExit(threadreturn_t ret);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* GOS_NEED_X_THREADS */
N#endif /* _GOS_X_THREADS_H */
L 77 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_raw32.h" 2
N#include "gos_x_heap.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_x_heap.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#ifndef _GOS_X_HEAP_H
N#define _GOS_X_HEAP_H
N
N#if GOS_NEED_X_HEAP || defined(__DOXYGEN__)
X#if -1 || 0L
N
N/*===========================================================================*/
N/* Type definitions                                                          */
N/*===========================================================================*/
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N	#if GFX_OS_HEAP_SIZE != 0 || defined(__DOXYGEN__)
X	#if 0 != 0 || 0L
S		/**
S		 * @brief	Take a chunk of memory and add it to the available heap
S		 * @note	Memory added must obviously not already be on the heap.
S		 * @note	It is allowable to add multiple non-contiguous blocks of memory
S		 * 			to the heap. If however it is contiguous with a previously added block
S		 * 			it will get merged with the existing block in order to allow
S		 * 			allocations that span the boundary.
S		 * @pre		GFX_OS_HEAP_SIZE != 0 and an operating system that uses the
S		 * 			internal ugfx heap allocator rather than its own allocator.
S		 */
S		void gfxAddHeapBlock(void *ptr, size_t sz);
N	#endif
N
N	void *gfxAlloc(size_t sz);
N	void *gfxRealloc(void *ptr, size_t oldsz, size_t newsz);
N	void gfxFree(void *ptr);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* GOS_NEED_X_HEAP */
N#endif /* _GOS_X_HEAP_H */
L 78 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos_raw32.h" 2
N
N#endif /* GFX_USE_OS_RAW32 */
N#endif /* _GOS_RAW32_H */
L 490 "..\..\..\..\..\..\external\ugfx\src\../src/gos/gos.h" 2
N#elif GFX_USE_OS_ECOS
S	#include "gos_ecos.h"
S#elif GFX_USE_OS_ARDUINO
S	#include "gos_arduino.h"
S#elif GFX_USE_OS_CMSIS
S 	#include "gos_cmsis.h"
S#elif GFX_USE_OS_KEIL
S    #include "gos_keil.h"
S#elif GFX_USE_OS_NIOS
S    #include "gos_nios.h"
S#elif GFX_USE_OS_QT
S    #include "gos_qt.h"
S#else
S	#error "Your operating system is not supported yet"
N#endif
N
N#endif /* _GOS_H */
N/** @} */
L 201 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N//#include "src/gdriver/gdriver.h"			// This module is only included by source that needs it.
N#include "src/gfile/gfile.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gfile/gfile.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gfile/gfile.h
N * @brief   GFILE - File IO Routines header file.
N *
N * @addtogroup GFILE
N *
N * @brief	Module which contains operating system independent file I/O.
N *
N * @{
N */
N
N#ifndef _GFILE_H
N#define _GFILE_H
N
N#include "../../gfx.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gfile/../../gfx.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    gfx.h
N * @brief   GFX system header file.
N *
N * @addtogroup GFX
N *
N * @brief	Main module to glue all the others together
N *
N * @{
N */
N
N#ifndef _GFX_H
S#define _GFX_H
S
S/**
S * These two definitions below are required before anything else so that we can
S * turn module definitions off and on.
S */
S
S/**
S * @brief   Generic 'false' boolean constant.
S */
S#if !defined(FALSE) || defined(__DOXYGEN__)
S	#define FALSE       0
S#endif
S
S/**
S * @brief   Generic 'true' boolean constant.
S */
S#if !defined(TRUE) || defined(__DOXYGEN__)
S	#define TRUE        -1
S#endif
S
S/* gfxconf.h is the user's project configuration for the GFX system. */
S#include "gfxconf.h"
S
S/* Include Compiler and CPU support */
S#include "src/gfx_compilers.h"
S
S/**
S * @name    GFX sub-systems that can be turned on
S * @{
S */
S	/**
S	 * @brief   GFX Driver API
S	 * @details	Defaults to TRUE
S	 * @note	Not much useful can be done without a driver
S	 */
S	#ifndef GFX_USE_GDRIVER
S		#define GFX_USE_GDRIVER	TRUE
S	#endif
S	/**
S	 * @brief   GFX Graphics Display Basic API
S	 * @details	Defaults to FALSE
S	 * @note	Also add the specific hardware driver to your makefile.
S	 * 			Eg.  include $(GFXLIB)/drivers/gdisp/Nokia6610/driver.mk
S	 */
S	#ifndef GFX_USE_GDISP
S		#define GFX_USE_GDISP	FALSE
S	#endif
S	/**
S	 * @brief   GFX Graphics Windowing API
S	 * @details	Defaults to FALSE
S	 * @details	Extends the GDISP API to add the concept of graphic windows.
S	 * @note	Also supports high-level "window" objects such as console windows,
S	 * 			buttons, graphing etc
S	 */
S	#ifndef GFX_USE_GWIN
S		#define GFX_USE_GWIN	FALSE
S	#endif
S	/**
S	 * @brief   GFX Event API
S	 * @details	Defaults to FALSE
S	 * @details	Defines the concept of a "Source" that can send "Events" to "Listeners".
S	 */
S	#ifndef GFX_USE_GEVENT
S		#define GFX_USE_GEVENT	FALSE
S	#endif
S	/**
S	 * @brief   GFX Timer API
S	 * @details	Defaults to FALSE
S	 * @details	Provides thread context timers - both one-shot and periodic.
S	 */
S	#ifndef GFX_USE_GTIMER
S		#define GFX_USE_GTIMER	FALSE
S	#endif
S	/**
S	 * @brief   GFX Queue API
S	 * @details	Defaults to FALSE
S	 * @details	Provides queue management.
S	 */
S	#ifndef GFX_USE_GQUEUE
S		#define GFX_USE_GQUEUE	FALSE
S	#endif
S	/**
S	 * @brief   GFX Input Device API
S	 * @details	Defaults to FALSE
S	 * @note	Also add the specific hardware drivers to your makefile.
S	 * 			Eg.
S	 * 				include $(GFXLIB)/drivers/ginput/toggle/Pal/driver.mk
S	 * 			and...
S	 * 				include $(GFXLIB)/drivers/ginput/touch/MCU/driver.mk
S	 */
S	#ifndef GFX_USE_GINPUT
S		#define GFX_USE_GINPUT	FALSE
S	#endif
S	/**
S	 * @brief   GFX Generic Periodic ADC API
S	 * @details	Defaults to FALSE
S	 */
S	#ifndef GFX_USE_GADC
S		#define GFX_USE_GADC	FALSE
S	#endif
S	/**
S	 * @brief   GFX Audio API
S	 * @details	Defaults to FALSE
S	 * @note	Also add the specific hardware drivers to your makefile.
S	 * 			Eg.
S	 * 				include $(GFXLIB)/drivers/gaudio/GADC/driver.mk
S	 */
S	#ifndef GFX_USE_GAUDIO
S		#define GFX_USE_GAUDIO	FALSE
S	#endif
S	/**
S	 * @brief   GFX Miscellaneous Routines API
S	 * @details	Defaults to FALSE
S	 * @note	Turning this on without turning on any GMISC_NEED_xxx macros will result
S	 * 			in no extra code being compiled in. GMISC is made up from the sum of its
S	 * 			parts.
S	 */
S	#ifndef GFX_USE_GMISC
S		#define GFX_USE_GMISC	FALSE
S	#endif
S	/**
S	 * @brief   GFX File API
S	 * @details	Defaults to FALSE
S	 */
S	#ifndef GFX_USE_GFILE
S		#define GFX_USE_GFILE	FALSE
S	#endif
S	/**
S	 * @brief   GFX Translation Support API
S	 * @details	Defaults to FALSE
S	 */
S	#ifndef GFX_USE_GTRANS
S		#define GFX_USE_GTRANS	FALSE
S	#endif
S/** @} */
S
S/**
S * Get all the options for each sub-system.
S *
S */
S#include "src/gos/gos_options.h"
S#include "src/gdriver/gdriver_options.h"
S#include "src/gfile/gfile_options.h"
S#include "src/gmisc/gmisc_options.h"
S#include "src/gtrans/gtrans_options.h"
S#include "src/gqueue/gqueue_options.h"
S#include "src/gevent/gevent_options.h"
S#include "src/gtimer/gtimer_options.h"
S#include "src/gdisp/gdisp_options.h"
S#include "src/gwin/gwin_options.h"
S#include "src/ginput/ginput_options.h"
S#include "src/gadc/gadc_options.h"
S#include "src/gaudio/gaudio_options.h"
S
S/**
S * Interdependency safety checks on the sub-systems.
S * These must be in dependency order.
S *
S */
S#ifndef GFX_DISPLAY_RULE_WARNINGS
S	#define GFX_DISPLAY_RULE_WARNINGS	FALSE
S#endif
S#include "src/gwin/gwin_rules.h"
S#include "src/ginput/ginput_rules.h"
S#include "src/gdisp/gdisp_rules.h"
S#include "src/gaudio/gaudio_rules.h"
S#include "src/gadc/gadc_rules.h"
S#include "src/gevent/gevent_rules.h"
S#include "src/gtimer/gtimer_rules.h"
S#include "src/gqueue/gqueue_rules.h"
S#include "src/gmisc/gmisc_rules.h"
S#include "src/gtrans/gtrans_rules.h"
S#include "src/gfile/gfile_rules.h"
S#include "src/gdriver/gdriver_rules.h"
S#include "src/gos/gos_rules.h"
S
S/**
S *  Include the sub-system header files
S */
S#include "src/gos/gos.h"
S//#include "src/gdriver/gdriver.h"			// This module is only included by source that needs it.
S#include "src/gfile/gfile.h"
S#include "src/gmisc/gmisc.h"
S#include "src/gtrans/gtrans.h"
S#include "src/gqueue/gqueue.h"
S#include "src/gevent/gevent.h"
S#include "src/gtimer/gtimer.h"
S#include "src/gdisp/gdisp.h"
S#include "src/gwin/gwin.h"
S#include "src/ginput/ginput.h"
S#include "src/gadc/gadc.h"
S#include "src/gaudio/gaudio.h"
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S	/**
S	 * @brief	The one call to start it all
S	 *
S	 * @note	This will initialise each sub-system that has been turned on.
S	 * 			For example, if GFX_USE_GDISP is defined then display will be initialised
S	 * 			and cleared to black.
S	 * @note	If you define GFX_OS_NO_INIT as TRUE in your gfxconf.h file then ugfx doesn't try to
S	 * 			initialise the operating system for you when you call @p gfxInit().
S	 * @note	If you define GFX_OS_EXTRA_INIT_FUNCTION in your gfxconf.h file the macro is the
S	 * 			name of a void function with no parameters that is called immediately after
S	 * 			operating system initialisation (whether or not GFX_OS_NO_INIT is set).
S	 * @note	If you define GFX_OS_EXTRA_DEINIT_FUNCTION in your gfxconf.h file the macro is the
S	 * 			name of a void function with no parameters that is called immediately before
S	 * 			operating system de-initialisation (as ugfx is exiting).
S	 *
S	 * @api
S	 */
S	void gfxInit(void);
S
S	/**
S	 * @brief	The one call to end it all
S	 *
S	 * @note	This will de-initialise each sub-system that has been turned on.
S	 *
S	 * @api
S	 */
S	void gfxDeinit(void);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* _GFX_H */
N/** @} */
N
L 23 "..\..\..\..\..\..\external\ugfx\src\../src/gfile/gfile.h" 2
N
N#if GFX_USE_GFILE || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/*===========================================================================*/
S/* Type definitions                                                          */
S/*===========================================================================*/
S
S/**
S * @brief	A file pointer
S */
S
Stypedef struct GFILE GFILE;
Stypedef struct gfileList gfileList;
S
Sextern GFILE *gfileStdIn;
Sextern GFILE *gfileStdErr;
Sextern GFILE *gfileStdOut;
S
S/*===========================================================================*/
S/* External declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S	/**
S	 * @brief					Check if file exists
S	 * 
S	 * @param[in] fname			The file name
S	 * 
S	 * @return					TRUE if file exists, FALSE otherwise
S	 * 
S	 * @api
S	 */
S	bool_t		gfileExists(const char *fname);
S
S	/**
S	 * @brief					Delete file
S	 * 
S	 * @param[in] fname			The file name
S	 * 
S	 * @return					TRUE on success, FALSE otherwise
S	 * 
S	 * @api
S	 */
S	bool_t		gfileDelete(const char *fname);
S
S	/**
S	 * @brief					Get the size of a file
S	 * @note					Please use @p gfileGetSize() if the file is opened
S	 * 
S	 * @param[in] fname			The file name
S	 * 
S	 * @return					File size on success, -1 on error
S	 * 
S	 * @api
S	 */
S	long int	gfileGetFilesize(const char *fname);
S
S	/**
S	 * @brief					Rename file
S	 *
S	 * @param[in] oldname		The current file name
S	 * @param[in] newname		The new name of the file
S	 *
S	 * @return					TRUE on success, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t		gfileRename(const char *oldname, const char *newname);
S
S	/**
S	 * @brief					Open file
S	 * @details					A file must be opened before it can be accessed
S	 * @details					The resulting GFILE will be used for all functions that access the file.
S	 *
S	 * @param[in] fname			The file name
S	 * @param[in] mode			The mode.
S	 *
S	 * @return					Valid GFILE on success, 0 otherwise
S	 *
S	 * @note					The modes follow the c library fopen() standard.
S	 * 							The valid modes are:
S	 * 							<ul><li>r   - Open for read, the file must exist</li>
S	 * 								<li>w   - Open for write, the file is truncated if it exists</li>
S	 * 								<li>wx  - Open for write, the file must not exist</li>
S	 * 								<li>a   - Open for append, the file is truncated if it exists</li>
S	 * 								<li>ax  - Open for append, the file must not exists</li>
S	 * 							</ul>
S	 * 							The following flags can also be added to the above modes:<br/>
S	 * 							<ul><li>+   - Open for both read and write</li>
S	 * 								<li>b   - Open as a binary file rather than a text file</li>
S	 * 							</ul>
S	 * @note					Not all file-systems support all modes. For example, write
S	 * 							is not available with the ROM file-system. Similarly few platforms
S	 * 							distinguish between binary and text files.
S	 * @note					Even though binary vs. text is relevant only for a small number of platforms
S	 * 							the "b" flag should always be specified for binary files such as images.
S	 * 							This ensures portability to other platforms. The extra flag will be ignored
S	 * 							on platforms where it is not relevant.
S	 *
S	 * @api
S	 */	
S	GFILE *		gfileOpen(const char *fname, const char *mode);
S
S	/**
S	 * @brief					Close file
S	 * @details					Closes a file after is has been opened using @p gfileOpen()
S	 *
S	 * @param[in] f				The file
S	 *
S	 * @api
S	 */
S	void		gfileClose(GFILE *f);
S
S	/**
S	 * @brief					Read from file
S	 * @details					Reads a given amount of bytes from the file
S	 * @details					The read/write cursor will not be reset when calling this function
S	 *
S	 * @param[in] f				The file
S	 * @param[out] buf			The buffer in which to save the content that has been read from the file
S	 * @param[in] len			Amount of bytes to read
S	 *
S	 * @return					Amount of bytes read
S	 *
S	 * @api
S	 */
S	size_t		gfileRead(GFILE *f, void *buf, size_t len);
S
S	/**
S	 * @brief					Write to file
S	 * @details					Write a given amount of bytes to the file
S	 * @details					The read/write cursor will not be reset when calling this function
S	 *
S	 * @param[in] f				The file
S	 * @param[in] buf			The buffer which contains the content that will be written to the file
S	 * @param[in] len			Amount of bytes to write
S	 *
S	 * @return					Amount of bytes written
S	 *
S	 * @api
S	 */
S	size_t		gfileWrite(GFILE *f, const void *buf, size_t len);
S
S	/**
S	 * @brief					Get the current position of the read/write cursor
S	 *
S	 * @param[in] f				The file
S	 *
S	 * @return					The current position in the file
S	 *
S	 * @api
S	 */
S	long int	gfileGetPos(GFILE *f);
S
S	/**
S	 * @brief					Set the position of the read/write cursor
S	 *
S	 * @param[in] f				The file
S	 * @param[in] pos			The position to which the cursor will be set
S	 *
S	 * @return					TRUE on success, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t		gfileSetPos(GFILE *f, long int pos);
S
S	/**
S	 * @brief					Get the size of file
S	 * @note					Please use @p gfileGetFilesize() if the file is not opened
S	 *
S	 * @param[in] f				The file
S	 *
S	 * @return					The size of the file
S	 *
S	 * @api
S	 */
S	long int	gfileGetSize(GFILE *f);
S
S	/**
S	 * @brief					Check for EOF
S	 * @details					Checks if the cursor is at the end of the file
S	 *
S	 * @param[in] f				The file
S	 *
S	 * @return					TRUE if EOF, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t		gfileEOF(GFILE *f);
S
S	/**
S	 * @brief					Mount a logical drive (aka partition)
S	 *
S	 * @details					Not supported by every file system
S	 * @details					Currently just one drive at one is supported.
S	 *
S	 * @param[in] fs			The file system (F for FatFS)
S	 * @param[in] drive			The logical drive prefix
S	 *
S	 * @return					TRUE on success, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t gfileMount(char fs, const char *drive);
S
S	/**
S	 * @brief					Unmount a logical drive (aka partition)
S	 *
S	 * @details					Does have no effect if @p gfileMount() as been called before hand
S	 *
S	 * @param[in] fs			The file system (F for FatFS)
S	 * @param[in] drive			The logical drive prefix
S	 *
S	 * @return					TRUE on success, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t gfileUnmount(char fs, const char *drive);
S
S	/**
S	 * @brief					Syncs the file object (flushes the buffer)
S	 *
S	 * @details					Not supported by every file system
S	 *
S	 * @param[in] f				The file
S	 *
S	 * @return					TRUE on success, FALSE otherwise
S	 *
S	 * @api
S	 */
S	bool_t gfileSync(GFILE *f);
S
S	#if GFILE_NEED_FILELISTS || defined(__DOXYGEN__)
S		/**
S		 * @brief				Open a file list
S		 *
S		 * @param[in] fs		The file system (F for FatFS)
S		 * @param[in] path		Path information to pass to the file system
S		 * @param[in] dirs		Pass TRUE to get directories only, FALSE to get files only
S		 *
S		 * @return				A pointer to a file list on success, NULL otherwise
S		 *
S		 * @note				The path parameter is handled in a file-system specific way. It could be
S		 * 						treated as a directory name, it may be treated as a file pattern, or it
S		 * 						may be ignored. Passing NULL will always return the full list of files
S		 * 						in at least the top level directory.
S		 * @note				For file systems that do not support directories, passing TRUE for dirs
S		 * 						will return an error.
S		 * @note				You must call @p gfileCloseFileList() when you have finished with the
S		 * 						file list in order to free resources.
S		 *
S		 * @api
S		 */
S		gfileList *gfileOpenFileList(char fs, const char *path, bool_t dirs);
S
S		/**
S		 * @brief				Get the next file in a file list.
S		 *
S		 * @param[in] pfl		Pointer to a file list returned by @p gfileOpenFileList()
S		 *
S		 * @return				A pointer to a file (or directory) name. Returns NULL if there are no more.
S		 *
S		 * @note				The file name may contain the full directory path or may not depending
S		 * 						on how the file system treats directories.
S		 * @note				The returned buffer may be destroyed by the next call to any of
S		 * 						@p gfileOpenFileList(), @p gfileReadFileList() or @p gfileCloseFileList().
S		 * 						Do not use this pointer after one of those calls.
S		 *
S		 * @api
S		 */
S		const char *gfileReadFileList(gfileList *pfl);
S
S		/**
S		 * @brief				Close a file list.
S		 *
S		 * @param[in] pfl		Pointer to a file list returned by @p gfileOpenFileList()
S		 *
S		 * @api
S		 */
S		void gfileCloseFileList(gfileList *pfl);
S	#endif
S
S	#if (GFILE_NEED_CHIBIOSFS && GFX_USE_OS_CHIBIOS) || defined(__DOXYGEN__)
S		/**
S		 * @brief					Open file from a ChibiOS FileStream
S		 *
S		 * @param[in] FileStreamPtr	The BaseFileStream (ChibiOS V2) or FileStream (ChibiOS V3) to open as a GFILE
S		 * @param[in] mode			The mode.
S		 *
S		 * @return					Valid GFILE on success, 0 otherwise
S		 *
S		 * @note					The modes are the same modes as in @p gfileOpen(). The
S		 * 							open mode is NOT compared against the FileStream capabilities.
S		 * @note					Supported operations are: read, write, getpos, setpos, eof and getsize
S		 *
S		 * @api
S		 */
S		GFILE *		gfileOpenChibiOSFileStream(void *FileStreamPtr, const char *mode);
S		#define gfileOpenBaseFileStream(f,m)	gfileOpenChibiOSFileStream(f,m)
S	#endif
S
S	#if GFILE_NEED_MEMFS || defined(__DOXYGEN__)
S		/**
S		 * @brief					Open file from a memory pointer
S		 *
S		 * @param[in] memptr		The pointer to the memory
S		 * @param[in] mode			The mode.
S		 *
S		 * @return					Valid GFILE on success, 0 otherwise
S		 *
S		 * @note					The modes are the same modes as in @p gfileOpen(). Note there is
S		 * 							no concept of file-size. Be careful not to overwrite other memory or
S		 * 							to read from inaccessible sections of memory.
S		 * @note					Supported operations are: read, write, getpos, setpos
S		 *
S		 * @api
S		 */
S		GFILE *		gfileOpenMemory(void *memptr, const char *mode);
S	#endif
S
S	#if GFILE_NEED_STRINGS || defined(__DOXYGEN__)
S		/**
S		 * @brief					Open file from a null terminated C string
S		 *
S		 * @param[in] str			The pointer to the string or string buffer
S		 * @param[in] mode			The mode
S		 *
S		 * @return					Valid GFILE on success, 0 otherwise
S		 *
S		 * @note					The modes are the same modes as in @p gfileOpen(). Note there is
S		 * 							no concept of file-size. Be careful not to overwrite other memory or
S		 * 							to read from inaccessible sections of memory.
S		 * @note					Reading will return EOF when the NULL character is reached.
S		 * @note					Writing will always place a NULL in the next character effectively terminating the
S		 * 							string at the character just written.
S		 * @note					Supported operations are: read, write, append, getpos, setpos
S		 * @note					Be careful with setpos and getpos. They do not check for the end of the string.
S		 * @note					Reading and Writing will read/write a maximum of one character at a time.
S		 *
S		 * @api
S		 */
S		GFILE *		gfileOpenString(char *str, const char *mode);
S	#endif
S
S	#if GFILE_NEED_PRINTG || defined(__DOXYGEN__)
S		#include <stdarg.h>
S
S		int vfnprintg(GFILE *f, int maxlen, const char *fmt, va_list arg);
S		int fnprintg(GFILE *f, int maxlen, const char *fmt, ...);
S		#define vfprintg(f,m,a)			vfnprintg(f,0,m,a)
S		#define fprintg(f,m,...)		fnprintg(f,0,m,__VA_ARGS__)
S		#define vprintg(m,a)			vfnprintg(gfileStdOut,0,m,a)
S		#define printg(m,...)			fnprintg(gfileStdOut,0,m,__VA_ARGS__)
S
S		#if GFILE_NEED_STRINGS
S			int vsnprintg(char *buf, int maxlen, const char *fmt, va_list arg);
S			int snprintg(char *buf, int maxlen, const char *fmt, ...);
S			#define vsprintg(s,m,a)		vsnprintg(s,0,m,a)
S			#define sprintg(s,m,...)	snprintg(s,0,m,__VA_ARGS__)
S		#endif
S	#endif
S
S	#if GFILE_NEED_SCANG || defined(__DOXYGEN__)
S		#include <stdarg.h>
S
S		int vfscang(GFILE *f, const char *fmt, va_list arg);
S		int fscang(GFILE *f, const char *fmt, ...);
S		#define vscang(f,a)			vfscang(gfileStdIn,f,a)
S		#define scang(f,...)		fscang(gfileStdIn,f,__VA_ARGS__)
S
S		#if GFILE_NEED_STRINGS
S			int vsscang(const char *buf, const char *fmt, va_list arg);
S			int sscang(const char *buf, const char *fmt, ...);
S		#endif
S	#endif
S
S	#if GFILE_NEED_STDIO && !defined(GFILE_NEED_STDIO_MUST_BE_OFF)
S		// Needed routines and definitions
S		size_t gstdioRead(void * ptr, size_t size, size_t count, GFILE *f);
S		size_t gstdioWrite(const void * ptr, size_t size, size_t count, GFILE *f);
S		int gstdioGetpos(GFILE *f, long int *pos);
S		int gstdioSeek(GFILE *f, size_t offset, int origin);
S		#define SEEK_SET	0
S		#define SEEK_CUR	1
S		#define SEEK_END	2
S
S		// Stdio emulation
S		#define stdin					gfileStdIn
S		#define stdout					gfileStdOut
S		#define stderr					gfileStdErr
S		#define FOPEN_MAX				GFILE_MAX_GFILES
S		#define TMP_MAX					GFILE_MAX_GFILES
S		#define FILENAME_MAX			256						// Use a relatively small number for an embedded platform
S		#define L_tmpnam				FILENAME_MAX
S		#define P_tmpdir				"/tmp/"
S		#define FILE					GFILE
S		#define fopen(n,m)				gfileOpen(n,m)
S		#define fclose(f)				gfileClose(f)
S		#define fread(p,sz,cnt,f)		gstdioRead(p,sz,cnt,f)
S		#define fwrite(p,sz,cnt,f)		gstdioWrite(p,sz,cnt,f)
S		#define fseek(f,ofs,org)		gstdioSeek(f,ofs,org)
S		#define remove(n)				(!gfileDelete(n))
S		#define rename(o,n)				(!gfileRename(o,n))
S		#define fflush(f)				(0)
S		#define ftell(f)				gfileGetPos(f)
S		#define fpos_t					long int
S		#define fgetpos(f,pos)			gstdioGetpos(f,pos)
S		#define fsetpos(f, pos)			(!gfileSetPos(f, *pos))
S		#define rewind(f)				gfileSetPos(f, 0);
S		#define feof(f)					gfileEOF(f)
S		#define vfprintf(f,m,a)			vfnprintg(f,0,m,a)
S		#define fprintf(f,m,...)		fnprintg(f,0,m,__VA_ARGS__)
S		#define vprintf(m,a)			vfnprintg(gfileStdOut,0,m,a)
S		#define printf(m,...)			fnprintg(gfileStdOut,0,m,__VA_ARGS__)
S		#define vsnprintf(s,n,m,a)		vsnprintg(s,n,m,a)
S		#define snprintf(s,n,m,...)		snprintg(s,n,m,__VA_ARGS__)
S		#define vsprintf(s,m,a)			vsnprintg(s,0,m,a)
S		#define sprintf(s,m,...)		snprintg(s,0,m,__VA_ARGS__)
S
S		//TODO
S		//void clearerr ( FILE * stream );
S		//int ferror ( FILE * stream );
S		//FILE * tmpfile ( void );		// Auto-deleting
S		//char * tmpnam ( char * str );
S		//char * mktemp (char *template);
S		//FILE * freopen ( const char * filename, const char * mode, FILE * stream );
S		//setbuf
S		//setvbuf
S		//fflush
S		//fgetc
S		//fgets
S		//fputc
S		//fputs
S		//getc
S		//getchar
S		//puts
S		//ungetc
S		//void perror (const char * str);
S	#endif
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GFILE */
N
N#endif /* _GFILE_H */
N/** @} */
N
L 203 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gmisc/gmisc.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gmisc/gmisc.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gmisc/gmisc.h
N * @brief   GMISC - Miscellaneous Routines header file.
N *
N * @addtogroup GMISC
N *
N * @brief	Module which contains different features such as array conversions
N *
N * @{
N */
N
N#ifndef _GMISC_H
N#define _GMISC_H
N
N#include "../../gfx.h"
N
N/*===========================================================================*/
N/* Type definitions                                                          */
N/*===========================================================================*/
N
N// Forward definition
Ntypedef struct point point;
N
N/**
N * @brief	Sample data formats
N * @note	These are defined regardless of whether you use the GMISC module
N * 			or not as they are used in lots of places.
N */
Ntypedef enum ArrayDataFormat_e {
N	ARRAY_DATA_UNKNOWN = 0,
N	ARRAY_DATA_4BITUNSIGNED = 4,	ARRAY_DATA_4BITSIGNED = 5,
N	ARRAY_DATA_8BITUNSIGNED = 8,	ARRAY_DATA_8BITSIGNED = 9,
N	ARRAY_DATA_10BITUNSIGNED = 10,	ARRAY_DATA_10BITSIGNED = 11,
N	ARRAY_DATA_12BITUNSIGNED = 12,	ARRAY_DATA_12BITSIGNED = 13,
N	ARRAY_DATA_14BITUNSIGNED = 14,	ARRAY_DATA_14BITSIGNED = 15,
N	ARRAY_DATA_16BITUNSIGNED = 16,	ARRAY_DATA_16BITSIGNED = 17,
N	} ArrayDataFormat;
N
N/**
N * @brief	Is the sample data format a "signed" data format?
N */
N#define gfxSampleFormatIsSigned(fmt)	((fmt) & 1)
N
N/**
N * @brief	How many bits are in the sample data format
N */
N#define gfxSampleFormatBits(fmt)	((fmt) & ~1)
N
N/**
N * @brief   The type for a fixed point type.
N * @details	The top 16 bits are the integer component, the bottom 16 bits are the real component.
N */
Ntypedef int32_t	fixed;
N
N/**
N * @brief   Macros to convert to and from a fixed point.
N * @{
N */
N#define FIXED(x)			((fixed)(x)<<16)						/* @< integer to fixed */
N#define NONFIXED(x)			((x)>>16)								/* @< fixed to integer */
N#define FIXED0_5			32768									/* @< 0.5 as a fixed (used for rounding) */
N#define FP2FIXED(x)			((fixed)((x)*65536.0))					/* @< floating point to fixed */
N#define FIXED2FP(x)			((double)(x)/65536.0)					/* @< fixed to floating point */
N#define FIXEDMUL(a,b)		((fixed)((((long long)(a))*(b))>>16))	/* @< fixed,fixed multiplication */
N#define FIXEDMULINT(a,b)	((a)*(b))								/* @< integer,fixed multiplication */
N/** @} */
N
N/**
N * @brief   The famous number pi
N */
N#ifndef GFX_PI
N	#define GFX_PI	3.1415926535897932384626433832795028841971693993751
N#endif
N
N/**
N * @brief   pi as a fixed point
N */
N#define FIXED_PI	FP2FIXED(GFX_PI)
N
N/*===========================================================================*/
N/* External declarations.                                                    */
N/*===========================================================================*/
N
N#if GFX_USE_GMISC || defined(__DOXYGEN__)
X#if 0 || 0L
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S#if GMISC_NEED_ARRAYOPS || defined(__DOXYGEN__)
S	/**
S	 * @brief				Convert from one array format to another array format.
S	 * @pre					Requires GFX_USE_GMISC and GMISC_NEED_ARRAYOPS
S	 *
S	 * @param[in] srcfmt		The format of the source array
S	 * @param[in] src			The source array
S	 * @param[in] dstfmt		The format of the destination array
S	 * @param[in] dst			The dstination array
S	 * @param[in] cnt			The number of array elements to convert
S	 *
S	 * @note				Assumes the destination buffer is large enough for the resultant data.
S	 * @note				This routine is optimised to perform as fast as possible.
S	 * @note				No type checking is performed on the source format. It is assumed to
S	 * 						have only valid values eg. ARRAY_DATA_4BITSIGNED will have values
S	 * 							0000 -> 0111 for positive numbers and 1111 -> 1000 for negative numbers
S	 * 							Bits 5 -> 8 in the storage byte are treated in an undefined manner.
S	 * @note				If srcfmt or dstfmt is an unknown format, this routine does nothing
S	 * 						with no warning that something is wrong
S	 *
S	 * @api
S	 */
S	void gmiscArrayConvert(ArrayDataFormat srcfmt, void *src, ArrayDataFormat dstfmt, void *dst, size_t cnt);
S
S	#if 0
S		void gmiscArrayTranslate(ArrayDataFormat fmt, void *src, void *dst, size_t cnt, int trans);
S
S		void gmiscArrayMultiply(ArrayDataFormat fmt, void *src, void *dst, size_t cnt, int mult);
S
S		void gmiscArrayDivide(ArrayDataFormat fmt, void *src, void *dst, size_t cnt, int mdiv);
S
S		void gmiscArrayMultDiv(ArrayDataFormat fmt, void *src, void *dst, size_t cnt, int mult, int div);
S
S		void gmiscArrayAdd(ArrayDataFormat fmt, void *src1, void *src2, void *dst, size_t cnt);
S
S		void gmiscArrayAddNoOverflow(ArrayDataFormat fmt, void *src1, void *src2, void *dst, size_t cnt);
S	#endif
S#endif
S
S#if GMISC_NEED_FASTTRIG || defined(__DOXYGEN__)
S		extern const double sintabledouble[];
S
S		/**
S		 * @brief	Fast Table Based Trig functions
S		 * @return	A double in the range -1.0 .. 0.0 .. 1.0
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_FASTTRIG
S		 *
S		 * @param[in] degrees	The angle in degrees (not radians)
S		 *
S		 * @note	These functions use degrees rather than radians to describe the angle.
S		 *
S		 * @api
S		 * @{
S		 */
S		double fsin(int degrees);
S		double fcos(int degrees);
S		/** @}
S		 *
S		 * @brief	Fast Table Based Trig functions
S		 * @return	A double in the range -1.0 .. 0.0 .. 1.0
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_FASTTRIG
S		 *
S		 * @param[in] degrees	The angle in degrees 0 .. 359
S		 *
S		 * @note	These functions use degrees rather than radians to describe the angle.
S		 * @note	These functions are super fast but require the parameter to be in range.
S		 * 			Use the lowercase functions if the parameter may not be in range or if a
S		 * 			required trig function is not supported in this form.
S		 *
S		 * @api
S		 * @{
S		 */
S		#define FSIN(degrees) 	sintabledouble[degrees];
S		/** @} */
S#endif
S
S#if GMISC_NEED_FIXEDTRIG || defined(__DOXYGEN__)
S		extern const fixed sintablefixed[];
S
S		/**
S		 * @brief	Fast Table Based Trig functions
S		 * @return	A fixed point in the range -1.0 .. 0.0 .. 1.0
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_FIXEDTRIG
S		 *
S		 * @param[in] degrees	The angle in degrees (not radians)
S		 *
S		 * @note	These functions use degrees rather than radians to describe the angle.
S		 *
S		 * @api
S		 * @{
S		 */
S		fixed ffsin(int degrees);
S		fixed ffcos(int degrees);
S		/** @}
S		 *
S		 * @brief	Fast Table Based Trig functions
S		 * @return	A fixed point in the range -1.0 .. 0.0 .. 1.0
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_FIXEDTRIG
S		 *
S		 * @param[in] degrees	The angle in degrees 0 .. 359
S		 *
S		 * @note	These functions use degrees rather than radians to describe the angle.
S		 * @note	These functions are super fast but require the parameter to be in range.
S		 * 			Use the lowercase functions if the parameter may not be in range or if a
S		 * 			required trig function is not supported in this form.
S		 *
S		 * @api
S		 * @{
S		 */
S		#define FFSIN(degrees) 	sintablefixed[degrees];
S		/** @} */
S#endif
S
S#if GMISC_NEED_INVSQRT || defined(__DOXYGEN__)
S		/**
S		 * @brief	Fast inverse square root function (x^-1/2)
S		 * @return	The approximate inverse square root
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_INVSQRT
S		 *
S		 * @param[in] n	The number to find the inverse square root of
S		 *
S		 * @note	This function generates an approximate result. Higher accuracy (at the expense
S		 * 			of speed) can be obtained by modifying the source code (the necessary line
S		 * 			is already there - just commented out).
S		 * @note	This function relies on the internal machine format of a float and a long.
S		 * 			If your machine architecture is very unusual this function may not work.
S		 *
S		 * @api
S		 */
S		float invsqrt(float n);
S#endif
S
S#if GMISC_NEED_MATRIXFLOAT2D || defined(__DOXYGEN__)
S
S	/**
S	 * @brief	A matrix for doing 2D graphics using floats
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 */
S	typedef struct MatrixFloat2D {
S		float	a00, a01, a02;
S		float	a10, a11, a12;
S		float	a20, a21, a22;
S	} MatrixFloat2D;
S
S	/**
S	 * @brief	Apply the matrix to a set of points
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst	The destination array of points
S	 * @param[in] src	The source array of points
S	 * @param[in] m		The matrix to apply
S	 * @param[in] cnt	How many points are in the array
S	 *
S	 * @note	In-place matrix application is allowed ie. dst = src
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DApplyToPoints(point *dst, const point *src, const MatrixFloat2D *m, int cnt);
S
S	/**
S	 * @brief	Set the 2D matrix to the identity matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] m		The matrix to set to identity
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DSetIdentity(MatrixFloat2D *m);
S
S	/**
S	 * @brief	Multiple two 2D matrixes together
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst	The destination matrix
S	 * @param[in] src1	The first source matrix
S	 * @param[in] src2	The second source matrix
S	 *
S	 * @note	In-place matrix application is NOT allowed ie. dst != src1, dst != src2
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DMultiply(MatrixFloat2D *dst, const MatrixFloat2D *src1, const MatrixFloat2D *src2);
S
S	/**
S	 * @brief	Add an x,y translation to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] tx, ty	The x and y translation to apply
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DApplyTranslation(MatrixFloat2D *dst, const MatrixFloat2D *src, float tx, float ty);
S
S	/**
S	 * @brief	Add x,y scaling to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] sx, sy	The scaling to apply in the x and y direction. Negative numbers give reflection.
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DApplyScale(MatrixFloat2D *dst, const MatrixFloat2D *src, float sx, float sy);
S
S	/**
S	 * @brief	Add x,y shear to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] sx, sy	The shear to apply in the x and y direction.
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DApplyShear(MatrixFloat2D *dst, const MatrixFloat2D *src, float sx, float sy);
S
S	/**
S	 * @brief	Add rotation to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFLOAT2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] angle		The angle to apply in degrees (not radians).
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation.
S	 * @note	If GMISC_NEED_FASTTRIG is defined then the fast table sin and cos lookup's will be used
S	 * 			rather than the C library versions.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFloat2DApplyRotation(MatrixFloat2D *dst, const MatrixFloat2D *src, int angle);
S#endif
S
S#if GMISC_NEED_MATRIXFIXED2D || defined(__DOXYGEN__)
S
S	/**
S	 * @brief	A matrix for doing 2D graphics using fixed point maths
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 */
S	typedef struct MatrixFixed2D {
S		fixed	a00, a01, a02;
S		fixed	a10, a11, a12;
S		fixed	a20, a21, a22;
S	} MatrixFixed2D;
S
S	/**
S	 * @brief	Apply the matrix to a set of points
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] dst	The destination array of points
S	 * @param[in] src	The source array of points
S	 * @param[in] m		The matrix to apply
S	 * @param[in] cnt	How many points are in the array
S	 *
S	 * @note	In-place matrix application is allowed ie. dst = src
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DApplyToPoints(point *dst, const point *src, const MatrixFixed2D *m, int cnt);
S
S	/**
S	 * @brief	Set the 2D matrix to the identity matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] m		The matrix to set to identity
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DSetIdentity(MatrixFixed2D *m);
S
S	/**
S	 * @brief	Multiple two 2D matrixes together
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] dst	The destination matrix
S	 * @param[in] src1	The first source matrix
S	 * @param[in] src2	The second source matrix
S	 *
S	 * @note	In-place matrix application is NOT allowed ie. dst != src1, dst != src2
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DMultiply(MatrixFixed2D *dst, const MatrixFixed2D *src1, const MatrixFixed2D *src2);
S
S	/**
S	 * @brief	Add an x,y translation to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] tx, ty	The x and y translation to apply
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DApplyTranslation(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed tx, fixed ty);
S
S	/**
S	 * @brief	Add x,y scaling to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] sx, sy	The scaling to apply in the x and y direction. Negative numbers give reflection.
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DApplyScale(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed sx, fixed sy);
S
S	/**
S	 * @brief	Add x,y shear to a matrix
S	 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D
S	 *
S	 * @param[in] dst		The destination matrix
S	 * @param[in] src		The source matrix. Can be NULL
S	 * @param[in] sx, sy	The shear to apply in the x and y direction.
S	 *
S	 * @note	In-place matrix operation is NOT allowed ie. dst != src
S	 * @note	If no source matrix is provided, it is equivalent to applying the operation
S	 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S	 *
S	 * @api
S	 */
S	void gmiscMatrixFixed2DApplyShear(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed sx, fixed sy);
S
S	#if GMISC_NEED_FIXEDTRIG || defined(__DOXYGEN__)
S		/**
S		 * @brief	Add rotation to a matrix
S		 * @pre		Requires GFX_USE_GMISC and GMISC_NEED_MATRIXFIXED2D and GMISC_NEED_FIXEDTRIG
S		 *
S		 * @param[in] dst		The destination matrix
S		 * @param[in] src		The source matrix. Can be NULL
S		 * @param[in] angle		The angle to apply in degrees (not radians).
S		 *
S		 * @note	In-place matrix operation is NOT allowed ie. dst != src
S		 * @note	If no source matrix is provided, it is equivalent to applying the operation
S		 * 			to an identity matrix. It also is a much simpler operation requiring no multiplication.
S		 *
S		 * @api
S		 */
S		void gmiscMatrixFixed2DApplyRotation(MatrixFixed2D *dst, const MatrixFixed2D *src, int angle);
S	#endif
S#endif
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_MISC */
N
N#endif /* _GMISC_H */
N/** @} */
N
L 204 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtrans/gtrans.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtrans/gtrans.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtrans/gtrans.h
N *
N * @addtogroup GTRANS
N *
N * @brief	Module that allows changing the language of an application dynamically during run-time.
N *
N * @{
N */
N
N#ifndef _TRANS_H
N#define _TRANS_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GTRANS || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/**
S * @struct transTable
S * @brief A table containing translated strings.
S */
Stypedef struct transTable {
S	unsigned numEntries;    /**< The number of strings that this table contains */
S	const char** strings;	/**< The translated strings */
S} transTable;
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/**
S * @brief A wrapper macro to make writing and reading translatable applications easier.
S */
S#define gt(str) gtransString(str)
S
S/**
S * @brief Get the string of the current language specified by the string of the base language.
S *
S * @details This function will return the string of the current language that corresponds to
S *			the specified string in the base language.
S * @details This function uses strcmp() internally to compare strings.
S *
S * @param[in] string The string to translate.
S *
S * @return The corresponding string of the current language or the string passed as a parameter if it doesn't exist.
S */
Sconst char* gtransString(const char* string);
S
S/**
S * @brief Get the string at the specified index position of the current language.
S *
S * @details Getting translation strings is a lot faster using the index as an accessor rather
S *          than the string in the base language.
S *
S * @param[in] index The index of the string in the current language translation table.
S *
S * @return The string at the given index of the current language or 0 if it doesn't exist.
S */
Sconst char* gtransIndex(unsigned index);
S
S/**
S * @brief Set the base language.
S *
S * @details A translatable application needs to have a base language. All translations will
S *          be relative to this base language.
S *
S * @param[in] translation The translation table
S */
Svoid gtransSetBaseLanguage(const transTable* const translation);
S
S/**
S * @brief Set the current language.
S *
S * @details All translations will refer to the current language set by calling this function.
S *
S * @param[in] translation The translation table
S */
Svoid gtransSetLanguage(const transTable* const translation);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GTRANS */
N
N#endif /* _TRANS_H */
N/** @} */
L 205 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gqueue/gqueue.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gqueue/gqueue.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gqueue/gqueue.h
N * @brief   GQUEUE header file.
N *
N * @addtogroup GQUEUE
N *
N * @brief	Module which provides queue management (only internally used)
N *
N * @details	There are 3 types of queues:
N * 			<ul><li><b>Asynchronous Queues (ASync) </b> - Queue operations never block</li>
N * 				<li><b>Get Synchronous Queues (GSync) </b> - Queue Get operations block until something is placed in the Queue</li>
N * 				<li><b>Put Synchronous Queues (PSync)</b> - Queue Put operations block until the element is removed from the Queue</li>
N * 				<li><b>Fully Synchronous Queues (FSync)</b> - Queue GET and Put operations block</li>
N * 			</ul>
N * 			We need 4 types of queues even though fully synchronous queues support all operations including asynchronous
N * 			operations because fully synchronous queues have the highest storage requirements. The other queue types are
N * 			optimizations. Efficiency IS important to use (particularly RAM efficiency).
N * 			In practice we only implement ASync, GSync and FSync queues as PSync queues are of dubious value.
N * 			<br>
N * 			We also define GDataBuffer which is a data buffer that supports being queued.
N * @{
N */
N
N#ifndef _GQUEUE_H
N#define _GQUEUE_H
N
N#if GFX_USE_GQUEUE || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/**
S * @brief	A queue item
S * @{
S */
Stypedef struct gfxQueueASyncItem {
S	struct gfxQueueASyncItem	*next;
S} gfxQueueASyncItem, gfxQueueGSyncItem;
S
Stypedef struct gfxQueueFSyncItem {
S	struct gfxQueueFSyncItem	*next;
S	gfxSem						sem;
S} gfxQueueFSyncItem;
S/** @} */
S
S/**
S * @brief	A queue
S * @{
S */
Stypedef struct gfxQueueASync {
S	gfxQueueASyncItem	*head;
S	gfxQueueASyncItem	*tail;
S} gfxQueueASync;
S
Stypedef struct gfxQueueGSync {
S	gfxQueueGSyncItem	*head;
S	gfxQueueGSyncItem	*tail;
S	gfxSem				sem;
S} gfxQueueGSync;
S
Stypedef struct gfxQueueFSync {
S	gfxQueueFSyncItem	*head;
S	gfxQueueFSyncItem	*tail;
S	gfxSem				sem;
S} gfxQueueFSync;
S/** @} */
S
S/**
S * @brief	A Data Buffer Queue
S * @note	This structure is followed immediately by the data itself.
S * 			When allocating the buffers for the data put this structure
S * 			at the beginning of the buffer.
S */
Stypedef struct GDataBuffer {
S	gfxQueueGSyncItem	next;		// @< Used for queueing the buffers
S	size_t				size;		// @< The size of the buffer area following this structure (in bytes)
S	size_t				len;		// @< The length of the data in the buffer area (in bytes)
S} GDataBuffer;
S
S/*===========================================================================*/
S/* Function declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/**
S * @name	Initialisation functions
S * @brief	Initialise a queue.
S *
S * @param[in]	pqueue	A pointer to the queue
S *
S * @note	Whilst queues are normally FIFO, a GFX queue also supports push and pop operations.
S * 			A pop operation is the same as normal get from the queue but a push places the item
S * 			at the head of the queue instead of the tail (as a put would).
S *
S * @api
S * @{
S */
Svoid gfxQueueASyncInit(gfxQueueASync *pqueue);
Svoid gfxQueueGSyncInit(gfxQueueGSync *pqueue);
Svoid gfxQueueFSyncInit(gfxQueueFSync *pqueue);
S/** @} */
S
S/**
S * @name	Deinitialisation functions
S * @brief	De-Initialise a queue.
S *
S * @param[in]	pqueue	A pointer to the queue
S *
S * @api
S * @{
S */
S#define gfxQueueASyncDeinit(pqueue)
Svoid gfxQueueGSyncDeinit(gfxQueueGSync *pqueue);
Svoid gfxQueueFSyncDeinit(gfxQueueFSync *pqueue);
S/** @} */
S
S/**
S * @name	Get() Functions
S * @brief	Get an item from the head of the queue (and remove it from the queue).
S * @return	NULL if the timeout expires before an item is available
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	ms		The maxmimum time to wait for an item. For ASync queues this parameter is
S * 						not specified as TIME_IMMEDIATE is assumed.
S *
S * @note		The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
SgfxQueueASyncItem *gfxQueueASyncGet(gfxQueueASync *pqueue);
SgfxQueueASyncItem *gfxQueueASyncGetI(gfxQueueASync *pqueue);
SgfxQueueGSyncItem *gfxQueueGSyncGet(gfxQueueGSync *pqueue, delaytime_t ms);
SgfxQueueGSyncItem *gfxQueueGSyncGetI(gfxQueueGSync *pqueue);
SgfxQueueFSyncItem *gfxQueueFSyncGet(gfxQueueFSync *pqueue, delaytime_t ms);
S/** @} */
S
S/**
S * @name	Put() Functions
S * @brief	Put an item on the end of the queue.
S * @return	none for ASync and GSync queues; For FSync queues - FALSE on timeout, otherwise TRUE
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	pitem	A pointer to the queue item
S * @param[in]	ms		The maxmimum time to wait for an item to be removed from the queue (only for FSync queues)
S *
S * @note		FSync: Use a delay time of TIME_IMMEDIATE if you don't want to wait until the
S * 				item is removed from the queue. Note that even if the timeout occurs - the item
S * 				remains in the queue.
S * @note		The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
Svoid gfxQueueASyncPut(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueASyncPutI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueGSyncPut(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Svoid gfxQueueGSyncPutI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Sbool_t gfxQueueFSyncPut(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, delaytime_t ms);
S/** @} */
S
S/**
S * @name	Pop() Functions
S * @brief	Pop an item from the head of the queue (and remove it from the queue).
S * @details	This is exactly the same as the Get operation above.
S *
S * @api
S * @{
S */
S#define gfxQueueASyncPop(pqueue)			gfxQueueASyncGet(pqueue)
S#define gfxQueueASyncPopI(pqueue)			gfxQueueASyncGetI(pqueue)
S#define gfxQueueGSyncPop(pqueue, ms)		gfxQueueGSyncGet(pqueue, ms)
S#define gfxQueueFSyncPop(pqueue, ms)		gfxQueueFSyncGet(pqueue, ms)
S/** @} */
S
S/**
S * @name	Push() Functions
S * @brief	Push an item into the start of the queue.
S * @return	none for ASync and GSync queues; For FSync queues - FALSE on timeout, otherwise TRUE
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	pitem	A pointer to the queue item
S * @param[in]	ms		The maxmimum time to wait for an item to be popped (only for FSync queues)
S *
S * @note		FSync: Use a delay time of TIME_IMMEDIATE if you don't want to wait until the
S * 				item is removed from the queue. Note that even if the timeout occurs - the item
S * 				remains in the queue.
S * @note		The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
Svoid gfxQueueASyncPush(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueASyncPushI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueGSyncPush(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Svoid gfxQueueGSyncPushI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Sbool_t gfxQueueFSyncPush(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, delaytime_t ms);
S/** @} */
S
S/**
S * @name	Insert() Functions
S * @brief	Insert an item on the queue after the specified item.
S * @return	none for ASync and GSync queues; For FSync queues - FALSE on timeout, otherwise TRUE
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	pitem	A pointer to the queue item
S * @param[in]	pafter	A pointer to the queue item this new item must be inserted after. If NULL or
S * 							pafter can't be found in the queue, it puts the new item at the end of the queue.
S * @param[in]	ms		The maxmimum time to wait for an item to be removed from the queue (only for FSync queues)
S *
S * @note		FSync: Use a delay time of TIME_IMMEDIATE if you don't want to wait until the
S * 				item is removed from the queue. Note that even if the timeout occurs - the item
S * 				remains in the queue.
S * @note		The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
Svoid gfxQueueASyncInsert(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter);
Svoid gfxQueueASyncInsertI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter);
Svoid gfxQueueGSyncInsert(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem, gfxQueueASyncItem *pafter);
Svoid gfxQueueGSyncInsertI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem, gfxQueueASyncItem *pafter);
Sbool_t gfxQueueFSyncInsert(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, gfxQueueASyncItem *pafter, delaytime_t ms);
S/** @} */
S
S/**
S * @name	Remove() Functions
S * @brief	Remove an item from the queue.
S * @note	Removes the specified item from the queue where-ever it is in the queue
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	pitem	A pointer to the queue item
S *
S * @note	If the item isn't in the queue the routine just returns.
S * @note	If a process is waiting on the Put/Push operation for the item, that process
S * 			will be signaled.
S * @note	The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
Svoid gfxQueueASyncRemove(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueASyncRemoveI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem);
Svoid gfxQueueGSyncRemove(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Svoid gfxQueueGSyncRemoveI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem);
Svoid gfxQueueFSyncRemove(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem);
S/** @} */
S
S/**
S * @name	isEmpty() Functions
S * @brief	Is the queue empty?
S * @return	TRUE if the queue is empty
S *
S * @param[in]	pqueue	A pointer to the queue
S *
S * @note	The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
S#define gfxQueueASyncIsEmpty(pqueue)		((pqueue)->head == 0)
S#define gfxQueueASyncIsEmptyI(pqueue)		((pqueue)->head == 0)
S#define gfxQueueGSyncIsEmpty(pqueue)		((pqueue)->head == 0)
S#define gfxQueueGSyncIsEmptyI(pqueue)		((pqueue)->head == 0)
S#define gfxQueueFSyncIsEmpty(pqueue)		((pqueue)->head == 0)
S#define gfxQueueFSyncIsEmptyI(pqueue)		((pqueue)->head == 0)
S/** @} */
S
S/**
S * @name	IsInQueue() Functions
S * @brief	Is an item in the queue?
S * @return	TRUE if the item is in the queue?
S *
S * @param[in]	pqueue	A pointer to the queue
S * @param[in]	pitem	A pointer to the queue item
S *
S * @note	This operation may be expensive.
S * @note	The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
Sbool_t gfxQueueASyncIsIn(gfxQueueASync *pqueue, const gfxQueueASyncItem *pitem);
Sbool_t gfxQueueASyncIsInI(gfxQueueASync *pqueue, const gfxQueueASyncItem *pitem);
Sbool_t gfxQueueGSyncIsIn(gfxQueueGSync *pqueue, const gfxQueueGSyncItem *pitem);
Sbool_t gfxQueueGSyncIsInI(gfxQueueGSync *pqueue, const gfxQueueGSyncItem *pitem);
Sbool_t gfxQueueFSyncIsIn(gfxQueueFSync *pqueue, const gfxQueueFSyncItem *pitem);
Sbool_t gfxQueueFSyncIsInI(gfxQueueFSync *pqueue, const gfxQueueFSyncItem *pitem);
S/** @} */
S
S/**
S * @name	Peek() Functions
S * @brief	Get the first item from the head of the queue but do not remove it from the queue.
S * @return	NULL if no item is available.
S *
S * @param[in]	pqueue	A pointer to the queue
S *
S * @note	This call does not block.
S * @note	This can be used as the first call to iterate all the elements in the queue.
S * @note	As that item is still on the queue, it should be treated as read-only. It could
S * 			also be removed from the queue at any time by another thread (thereby altering the
S * 			queue item).
S * @note	The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
S#define gfxQueueASyncPeek(pqueue)	((const gfxQueueASyncItem *)((pqueue)->head))
S#define gfxQueueASyncPeekI(pqueue)	((const gfxQueueASyncItem *)((pqueue)->head))
S#define gfxQueueGSyncPeek(pqueue)	((const gfxQueueGSyncItem *)((pqueue)->head))
S#define gfxQueueGSyncPeekI(pqueue)	((const gfxQueueGSyncItem *)((pqueue)->head))
S#define gfxQueueFSyncPeek(pqueue)	((const gfxQueueFSyncItem *)((pqueue)->head))
S#define gfxQueueFSyncPeekI(pqueue)	((const gfxQueueFSyncItem *)((pqueue)->head))
S/** @} */
S
S/**
S * @name	Next() Functions
S * @brief	Get the next item in the queue (but do not remove it from the queue).
S * @return	NULL if no item is available.
S *
S * @param[in]	pitem	The previous item in the queue
S *
S * @note	This call does not block.
S * @note	This can be used as subsequent calls to iterate all the elements in the queue.
S * @note	As that item is still on the queue, it should be treated as read-only. It could
S * 			also be removed from the queue at any time by another thread (thereby altering the
S * 			queue item).
S * @note	The routines ending in "I" are interrupt/system/iclass level routines.
S *
S * @api
S * @{
S */
S#define gfxQueueASyncNext(pitem)	((const gfxQueueASyncItem *)((pitem)->next))
S#define gfxQueueASyncNextI(pitem)	((const gfxQueueASyncItem *)((pitem)->next))
S#define gfxQueueGSyncNext(pitem)	((const gfxQueueGSyncItem *)((pitem)->next))
S#define gfxQueueGSyncNextI(pitem)	((const gfxQueueGSyncItem *)((pitem)->next))
S#define gfxQueueFSyncNext(pitem)	((const gfxQueueFSyncItem *)((pitem)->next))
S#define gfxQueueFSyncNextI(pitem)	((const gfxQueueFSyncItem *)((pitem)->next))
S/** @} */
S
S/**
S * @name		BufferAlloc() Functions
S * @brief		Allocate some buffers and put them on the free list
S * @return		TRUE is it succeeded. FALSE on allocation failure.
S *
S * @param[in] num	The number of buffers to allocate
S * @param[in] size	The size (in bytes) of each buffer
S *
S * @api
S * @{
S */
Sbool_t gfxBufferAlloc(unsigned num, size_t size);
S/** @} */
S
S/**
S * @name		BufferIsAvailable() Functions
S * @brief		Is there one or more buffers currently available on the free list
S * @return		TRUE if there are buffers in the free list
S *
S * @api
S * @{
S */
Sbool_t gfxBufferIsAvailable(void);
S/** @} */
S
S/**
S * @name		BufferGet() Functions
S * @brief		Get a buffer from the free list
S * @return		A GDataBuffer pointer or NULL if the timeout is exceeded
S *
S * @param[in] ms	The maximum amount of time in milliseconds to wait for a buffer if one is not available.
S *
S * @api
S * @{
S */
SGDataBuffer *gfxBufferGet(delaytime_t ms);
SGDataBuffer *gfxBufferGetI(void);
S/** @} */
S
S/**
S * @name		BufferRelease() Functions
S * @brief		Release a buffer back to the free list
S *
S * @param[in] pd		The buffer to put (back) on the free-list.
S *
S * @note		This call should be used to return any buffers that were taken from
S * 				the free-list once they have been finished with. It can also be used
S * 				to put new buffers onto the free-list. Just make sure the "size" field
S * 				of the GDataBuffer structure has been filled in first.
S *
S * @api
S * @{
S */
Svoid gfxBufferRelease(GDataBuffer *pd);
Svoid gfxBufferReleaseI(GDataBuffer *pd);
S/** @} */
S
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GQUEUE */
N#endif /* _GQUEUE_H */
N/** @} */
L 206 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gevent/gevent.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gevent/gevent.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gevent/gevent.h
N *
N * @addtogroup GEVENT
N *
N * @brief		Module to build a complete many-to-many event system
N * 
N * @details		GEVENT provides a simple to use but yet powerful event
N *				system.
N *
N * @pre			GFX_USE_GEVENT must be set to TRUE in your gfxconf.h
N *
N * @{
N */
N#ifndef _GEVENT_H
N#define _GEVENT_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GEVENT || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/*===========================================================================*/
S/* Type definitions                                                          */
S/*===========================================================================*/
S
Stypedef uint16_t						GEventType;
S		#define GEVENT_NULL				0x0000				// Null Event - Do nothing
S		#define GEVENT_EXIT				0x0001				// The listener is being forced to exit (someone is destroying the listener)
S		
S		/* Other event types are allocated in ranges in their respective include files */
S		#define GEVENT_GINPUT_FIRST		0x0100				// GINPUT events range from 0x0100 to 0x01FF
S		#define GEVENT_GWIN_FIRST		0x0200				// GWIN events range from 0x0200 to 0x02FF
S		#define GEVENT_GADC_FIRST		0x0300				// GADC events range from 0x0300 to 0x033F
S		#define GEVENT_GAUDIO_FIRST		0x0340				// GAUDIO events range from 0x0340 to 0x037F
S		#define GEVENT_USER_FIRST		0x8000				// Any application defined events start at 0x8000
S
S// This object can be typecast to any GEventXxxxx type to allow any sub-system (or the application) to create events.
S//	The prerequisite is that the new status structure type starts with a field named 'type' of type 'GEventType'.
S//	The total status structure also must not exceed GEVENT_MAXIMUM_SIZE bytes.
S//	For example, this is used by GWIN button events, GINPUT data streams etc.
Stypedef union GEvent_u {
S	GEventType			type;								// The type of this event
S	char				pad[GEVENT_MAXIMUM_SIZE];			// This is here to allow static initialisation of GEventObject's in the application.
S} GEvent;
S
S// A special callback function
Stypedef void (*GEventCallbackFn)(void *param, GEvent *pe);
S
S// The Listener Object
Stypedef struct GListener {
S	gfxSem				waitqueue;			// Private: Semaphore for the listener to wait on.
S	uint16_t			flags;				// Private: Flags for operation
S	GEventCallbackFn	callback;			// Private: Call back Function
S	void				*param;				// Private: Parameter for the callback function.
S	GEvent				event;				// Public:  The event object into which the event information is stored.
S	} GListener;
S
S// The Source Object
Stypedef struct GSource_t			GSource, *GSourceHandle;	
S
S// This structure is passed to a source to describe a contender listener for sending the current event.
Stypedef struct GSourceListener_t {
S	GListener		*pListener;			// The listener
S	GSource			*pSource;			// The source
S	uint32_t		listenflags;		// The flags the listener passed when the source was assigned to it.
S	uint32_t		srcflags;			// For the source's exclusive use. Initialised as 0 for a new listener source assignment.
S	} GSourceListener;
S
S/*===========================================================================*/
S/* External declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/* How to listen for events (act as a Listener)...
S	1. Get handles for all the event sources you are interested in.
S	2. Initialise a listener
S	3. Attach sources to your listener.
S		- Sources can be attached or detached from a listener at any time.
S		- A source can be attached to more than one listener.
S	4. Loop on getting listener events
S	5. When finished detach all sources from the listener
S	
S	How to create events (act as a Source)...
S	1. Provide a funtion to the application that returns a GSourceHandle (which can be a pointer to whatever the source wants)
S	2. Whenever a possible event occurs call geventGetSourceListener to get a pointer to a GSourceListener.
S			This will return NULL when there are no more listeners.
S			For each listener	- check the flags to see if an event should be sent.
S								- use geventGetEvent() to get the event buffer supplied by the listener
S									and then call geventSendEvent to send the event.
S								- Note: geventGetEvent() may return FALSE to indicate the listener is currently not listening and
S									therefore no event should be sent. This situation enables the source to (optionally) flag
S									to the listener on its next wait that there have been missed events.
S								- Note: The GSourceListener pointer (and the GEvent buffer) are only valid between
S									the geventGetSourceListener call and either the geventSendEvent call or the next
S									geventGetSourceListener call.
S								- Note: All listeners must be processed for this event before anything else is processed.
S*/
S
S/*---------- Listener Functions --------------------------------------------*/
S
S/**
S * @brief	Create a Listener
S * @details	If insufficient resources are available it will either assert or return NULL
S *			depending on the value of GEVENT_ASSERT_NO_RESOURCE.
S *
S * @param[in] pl	A listener
S */
Svoid geventListenerInit(GListener *pl);
S
S/**
S * @brief 	Attach a source to a listener
S * @details	Flags are interpreted by the source when generating events for each listener.
S *			If this source is already assigned to the listener it will update the flags.
S *			If insufficient resources are available it will either assert or return FALSE
S *			depending on the value of GEVENT_ASSERT_NO_RESOURCE.
S *
S * @param[in] pl	The listener
S * @param[in] gsh	The source which has to be attached to the listener
S * @param[in] flags	The flags
S *
S * @return TRUE if succeeded, FALSE otherwise
S */
Sbool_t geventAttachSource(GListener *pl, GSourceHandle gsh, uint32_t flags);
S
S/**
S * @brief	Detach a source from a listener
S * @details	If gsh is NULL detach all sources from this listener and if there is still
S *			a thread waiting for events on this listener, it is sent the exit event.
S *
S * @param[in] pl	The listener
S * @param[in] gsh	The source
S */
Svoid geventDetachSource(GListener *pl, GSourceHandle gsh);
S
S/**
S * @brief	Wait for an event on a listener from an assigned source.
S * @details	The type of the event should be checked (pevent->type) and then pevent should
S *			be typecast to the actual event type if it needs to be processed.
S * 			timeout specifies the time to wait in system ticks.
S *			TIME_INFINITE means no timeout - wait forever for an event.
S *			TIME_IMMEDIATE means return immediately
S * @note	The returned GEvent is released when this routine is called again
S * 			or when optionally @p geventEventComplete() is called. Calling @p geventEventComplete()
S * 			allows the GEvent object to be reused earlier which can reduce missed events. The GEvent
S * 			object MUST NOT be used after this function is called (and is blocked waiting for the next
S * 			event) or after geventEventComplete() is called.
S *
S * @param[in] pl		The listener
S * @param[in] timeout	The timeout
S *
S * @return	NULL on timeout
S */
SGEvent *geventEventWait(GListener *pl, delaytime_t timeout);
S
S/**
S * @brief	Release the GEvent buffer associated with a listener.
S * @details	The GEvent returned by @p geventEventWait() is released.
S * @note	The GEvent pointer returned by @p geventEventWait() is released when @p geventEventWait()
S * 			is called again or when this function is called. The GEvent
S * 			object MUST NOT be used after this function is called.
S *
S * @param[in] pl		The listener
S */
Svoid geventEventComplete(GListener *pl);
S
S/* @brief	Register a callback for an event on a listener from an assigned source.
S * @details	The type of the event should be checked (pevent->type) and then pevent should be typecast to the
S *			actual event type if it needs to be processed.
S *
S * @params[in] pl		The Listener
S * @params[in] fn		The function to call back
S * @params[in] param	A parameter to pass the callback function
S *
S * @note	The GEvent buffer is valid only during the time of the callback. The callback MUST NOT save
S * 			a pointer to the buffer for use outside the callback.
S * @note	An existing callback function is de-registered by passing a NULL for 'fn'. Any existing
S * 			callback function is replaced. Any thread currently waiting using geventEventWait will be sent the exit event.
S * @note	Callbacks occur in a thread context but stack space must be kept to a minumum and
S * 			the callback must process quickly as all other events are performed on a single thread.
S * @note	In the callback function you should never call ANY event functions using your own GListener handle
S * 			as it WILL create a deadlock and lock the system up.
S * @note	Applications should not use this call - geventEventWait() is the preferred mechanism for an
S * 			application. This call is provided for GUI objects that may not have their own thread.
S */
Svoid geventRegisterCallback(GListener *pl, GEventCallbackFn fn, void *param);
S
S/*---------- Source Functions --------------------------------------------*/
S
S/**
S * @brief	Called by a source with a possible event to get a listener record.
S * @details	@p lastlr should be NULL on the first call and thereafter the result of the previous call.
S *
S * @param[in] gsh		The source handler
S * @param[in] lastlr	The source listener
S *
S * @return	NULL when there are no more listeners for this source
S */
SGSourceListener *geventGetSourceListener(GSourceHandle gsh, GSourceListener *lastlr);
S
S/**
S * @brief	Get the event buffer from the GSourceListener.
S * @details	A NULL return allows the source to record (perhaps in glr->scrflags) that the listener
S *			has missed events. This can then be notified as part of the next event for the listener.
S *			The buffer can only be accessed untill the next call to geventGetSourceListener
S *			or geventSendEvent
S *
S * @param[in] psl	The source listener
S *
S * @return	NULL if the listener is not currently listening.
S */
SGEvent *geventGetEventBuffer(GSourceListener *psl);
S
S/** 
S * @brief	Called by a source to indicate the listener's event buffer has been filled.
S * @details	After calling this function the source must not reference in fields in the GSourceListener or the event buffer.
S *
S * @param[in] psl	The source listener
S */
Svoid geventSendEvent(GSourceListener *psl);
S
S/**
S * @brief	Detach any listener that has this source attached
S *
S * @param[in] gsh	The source handle
S */
Svoid geventDetachSourceListeners(GSourceHandle gsh);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GEVENT */
N
N#endif /* _GEVENT_H */
N/** @} */
N
L 207 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gtimer/gtimer.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gtimer/gtimer.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gtimer/gtimer.h
N *
N * @addtogroup GTIMER
N *
N * @brief	Module which provides software based timers for user-space applications
N *
N * @details	The reason why ChibiOS/GFX has it's own timer abstraction is because
N *			virtual timers provided by ChibiOS/RT are interrupt context only.
N *			While great for what they are designed for, they make coding of the input
N *			drivers much more complex.
N *			For non-performance critical drivers like these input drivers,  it would also
N *			hog an in-ordinate amount of critical (interrupt locked) system time.
N *			This contrary to the goals of a real-time operating system. So a user-land
N *			(thread based) timer mechanism is also required.
N *
N * @pre		GFX_USE_GTIMER must be set to TRUE in your gfxconf.h
N *
N * @{
N */
N
N#ifndef _GTIMER_H
N#define _GTIMER_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GTIMER || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/*===========================================================================*/
S/* Type definitions                                                          */
S/*===========================================================================*/
S
S/* Data part of a static GTimer initialiser */
S#define _GTIMER_DATA() {0,0,0,0,0,0,0}
S
S/* Static GTimer initialiser */
S#define GTIMER_DECL(name) GTimer name = _GTIMER_DATA()
S
S/* A callback function (executed in a thread context) */
Stypedef void (*GTimerFunction)(void *param);
S
S/**
S * @brief	 A GTimer structure
S */
Stypedef struct GTimer_t {
S	GTimerFunction		fn;
S	void				*param;
S	systemticks_t		when;
S	systemticks_t		period;
S	uint16_t			flags;
S	struct GTimer_t		*next;
S	struct GTimer_t		*prev;
S} GTimer;
S
S/*===========================================================================*/
S/* External declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/**
S * @brief   Initialise a timer
S *
S * @param[in] pt 	Pointer to a GTimer structure
S *
S * @api
S */
Svoid gtimerInit(GTimer* pt);
S
S/**
S * @brief	Deinitialise a timer
S *
S * @param[in] pt	Pointer to a GTimer structure
S *
S * @api
S */
Svoid gtimerDeinit(GTimer* pt);
S
S/**
S * @brief   Set a timer going or alter its properties if it is already going.
S *
S * @param[in] pt	Pointer to a GTimer structure
S * @param[in] fn		The callback function
S * @param[in] param		The parameter to pass to the callback function
S * @param[in] periodic	Is the timer a periodic timer? FALSE is a once-only timer.
S * @param[in] millisec	The timer period. The following special values are allowed:
S *							TIME_IMMEDIATE	causes the callback function to be called asap.
S *											A periodic timer with this value will fire once only.
S *							TIME_INFINITE	never timeout (unless triggered by gtimerJab or gtimerJabI)
S *
S * @note				If the timer is already active its properties are updated with the new parameters.
S *						The current period will be immediately canceled (without the callback function being
S *						called) and the timer will be restart with the new timer properties.
S * @note				The callback function should be careful not to over-run the thread stack.
S *						Define a new value for the macro GTIME_THREAD_STACK_SIZE if you want to
S *						change the default size.
S * @note				The callback function should return as quickly as possible as all
S *						timer callbacks are performed by a single thread. If a callback function
S *						takes too long it could affect the timer response for other timers.
S * @note				A timer callback function is not a replacement for a dedicated thread if the
S *						function wants to perform computationally expensive stuff.
S * @note				As the callback function is called on GTIMER's thread, the function must make sure it uses
S *						appropriate synchronisation controls such as semaphores or mutexes around any data
S *						structures it shares with other threads such as the main application thread.
S *
S * @api
S */
Svoid gtimerStart(GTimer *pt, GTimerFunction fn, void *param, bool_t periodic, delaytime_t millisec);
S
S/**
S * @brief   Stop a timer (periodic or otherwise)
S *
S * @param[in] pt		Pointer to a GTimer structure
S *
S * @note				If the timer is not active this does nothing.
S *
S * @api
S */
Svoid gtimerStop(GTimer *pt);
S
S/**
S * @brief   Test if a timer is currently active
S *
S * @param[in] pt		Pointer to a GTimer structure
S *
S * @return	TRUE if active, FALSE otherwise
S *
S * @api
S */
Sbool_t gtimerIsActive(GTimer *pt);
S
S/**
S * @brief   			Jab a timer causing the current period to immediate expire
S * @details				The callback function will be called as soon as possible.
S *
S * @pre					Use from a normal thread context.
S *
S * @param[in] pt		Pointer to a GTimer structure
S *
S * @note				If the timer is not active this does nothing.
S * @note				Repeated Jabs before the callback function actually happens are ignored.
S *
S * @api
S */
Svoid gtimerJab(GTimer *pt);
S
S/**
S * @brief   			Jab a timer causing the current period to immediate expire
S * @details				The callback function will be called as soon as possible.
S *
S * @pre					Use from an interrupt routine context.
S *
S * @param[in] pt		Pointer to a GTimer structure
S *
S * @note				If the timer is not active this does nothing.
S * @note				Repeated Jabs before the callback function actually happens are ignored.
S *
S * @iclass
S * @api
S */
Svoid gtimerJabI(GTimer *pt);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GTIMER */
N
N#endif /* _GTIMER_H */
N/** @} */
N
L 208 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gdisp/gdisp.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdisp/gdisp.h
N * @brief   GDISP Graphic Driver subsystem header file.
N *
N * @addtogroup GDISP
N *
N * @brief		Module to interface graphic / pixel oriented displays
N *
N * @details		The GDISP module provides high level abstraction to interface pixel oriented graphic displays.
N *
N * @pre			GFX_USE_GDISP must be set to TRUE in gfxconf.h
N *
N * @note		Each drawing routine supports a gdispXXXX and a gdispGXXXX function. The difference is that the
N * 				gdispXXXX function does not require a display to be specified. Note there is a slight anomaly
N * 				in the naming with gdispGBlitArea() vs gdispBlitAreaEx() and gdispBlitArea(), the latter of
N * 				which is now deprecated.
N * @{
N */
N
N#ifndef _GDISP_H
N#define _GDISP_H
N
N#include "../../gfx.h"
N
N/* This type definition is defined here as it gets used in other gfx sub-systems even
N * if GFX_USE_GDISP is FALSE.
N */
N
N/**
N * @brief   The type for a coordinate or length on the screen.
N */
Ntypedef int16_t	coord_t;
N
N#if GFX_USE_GDISP || defined(__DOXYGEN__)
X#if -1 || 0L
N
N/*===========================================================================*/
N/* Type definitions                                                          */
N/*===========================================================================*/
N
N/**
N * @struct point
N * @brief   Type for a 2D point on the screen.
N */
Ntypedef struct point {
N	coord_t x;		/**< The x coordinate of the point. */
N	coord_t y;		/**< The y coordinate of the point. */
N} point, point_t;
N
N/**
N * @enum justify
N * @brief   Type for the text justification.
N */
Ntypedef enum justify {
N	justifyLeft = 0,		/**< Justify Left */
N	justifyCenter = 1,		/**< Justify Center */
N	justifyRight = 2		/**< Justify Right */
N} justify_t;
N
N/**
N * @enum fontmetric
N * @brief   Type for the font metric.
N */
Ntypedef enum fontmetric {
N	fontHeight,				/**< The height of the font */
N	fontDescendersHeight,	/**< The descenders height */
N	fontLineSpacing,		/**< The line spacing */
N	fontCharPadding,		/**< The char padding */
N	fontMinWidth,			/**< The minimum width */
N	fontMaxWidth,			/**< The maximum width */
N	fontBaselineX,			/**< The base line in x direction */
N	fontBaselineY			/**< The base line in y direction */
N} fontmetric_t;
N
N/**
N * @brief   The type of a font.
N */
Ntypedef const struct mf_font_s* font_t;
N
N/**
N * @enum 	orientation
N * @brief   Type for the screen orientation.
N * @note	GDISP_ROTATE_LANDSCAPE and GDISP_ROTATE_PORTRAIT are internally converted to the
N * 			most appropriate other orientation.
N */
Ntypedef enum orientation {
N	GDISP_ROTATE_0 = 0,				/**< Don't rotate. This is the displays native orientation. */
N	GDISP_ROTATE_90 = 90,			/**< Rotate by 90 degrees absolute to the native rotation. */
N	GDISP_ROTATE_180 = 180,			/**< Rotate by 180 degrees absolute to the native rotation. */
N	GDISP_ROTATE_270 = 270,			/**< Rotate by 270 degrees absolute to the native rotation. */
N	GDISP_ROTATE_PORTRAIT = 1000,	/**< Put the display into portrait mode. */
N	GDISP_ROTATE_LANDSCAPE = 1001	/**< Put the display into landscape mode. */
N} orientation_t;
N
N/**
N * @enum 	powermode
N * @brief   Type for the available power modes for the screen.
N */
Ntypedef enum powermode {
N	powerOff,						/**< Turn the display off. */
N	powerSleep,						/**< Put the display into sleep mode. */
N	powerDeepSleep,					/**< Put the display into deep-sleep mode. */
N	powerOn							/**< Turn the display on. */
N} powermode_t;
N
N/*
N * Our black box display structure.
N */
Ntypedef struct GDisplay		GDisplay;
N
N/**
N * @brief   The default screen to use for the gdispXXXX calls.
N * @note	This is set by default to the first display in the system. You can change
N * 			it by calling @p gdispSetDisplay().
N */
Nextern GDisplay	*GDISP;
N
N/*===========================================================================*/
N/* Constants.                                                                */
N/*===========================================================================*/
N
N/**
N * @brief   Driver Control Constants
N * @details	Unsupported control codes are ignored.
N * @note	The value parameter should always be typecast to (void *).
N * @note	There are some predefined and some specific to the low level driver.
N * @note	GDISP_CONTROL_POWER			- Takes a gdisp_powermode_t
N * 			GDISP_CONTROL_ORIENTATION	- Takes a gdisp_orientation_t
N * 			GDISP_CONTROL_BACKLIGHT -	 Takes an int from 0 to 100. For a driver
N * 											that only supports off/on anything other
N * 											than zero is on.
N * 			GDISP_CONTROL_CONTRAST		- Takes an int from 0 to 100.
N * 			GDISP_CONTROL_LLD			- Low level driver control constants start at
N * 											this value.
N */
N#define GDISP_CONTROL_POWER			0
N#define GDISP_CONTROL_ORIENTATION	1
N#define GDISP_CONTROL_BACKLIGHT		2
N#define GDISP_CONTROL_CONTRAST		3
N#define GDISP_CONTROL_LLD			1000
N
N/*===========================================================================*/
N/* Defines relating to the display hardware									 */
N/*===========================================================================*/
N
N#if !defined(GDISP_DRIVER_LIST)
X#if !0L
N	// Pull in the default hardware configuration for a single controller.
N	// If we have multiple controllers the settings must be set in the
N	// users gfxconf.h file.
N	// Use the compiler include path to find it
N	#include "gdisp_lld_config.h"
L 1 "..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer\gdisp_lld_config.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#ifndef _GDISP_LLD_CONFIG_H
N#define _GDISP_LLD_CONFIG_H
N
N#if GFX_USE_GDISP
X#if -1
N
N/*===========================================================================*/
N/* Driver hardware support.                                                  */
N/*===========================================================================*/
N
N#define GDISP_HARDWARE_DRAWPIXEL		TRUE
N#define GDISP_HARDWARE_PIXELREAD		TRUE
N#define GDISP_HARDWARE_CONTROL			TRUE
N
N// Any other support comes from the board file
N#include "board_framebuffer.h"
L 1 "..\..\..\..\none\board_framebuffer.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "LS013B7DH06.h"
L 1 "..\..\..\..\..\..\components\drivers_ext\LS013B7DH06\LS013B7DH06.h" 1
N#ifndef LS013B7DH06_H
N#define LS013B7DH06_H
N
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N#include "nrf_error.h"
L 1 "..\..\..\..\..\..\components\softdevice\s132\headers\nrf_error.h" 1
N/* 
N * Copyright (c) Nordic Semiconductor ASA
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N *   1. Redistributions of source code must retain the above copyright notice, this
N *   list of conditions and the following disclaimer.
N * 
N *   2. Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N * 
N *   3. Neither the name of Nordic Semiconductor ASA nor the names of other
N *   contributors to this software may be used to endorse or promote products
N *   derived from this software without specific prior written permission.
N * 
N *   4. This software must only be used in a processor manufactured by Nordic
N *   Semiconductor ASA, or in a processor manufactured by a third party that
N *   is used in combination with a processor manufactured by Nordic Semiconductor.
N * 
N * 
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */ 
N /**
N  @defgroup nrf_error SoftDevice Global Error Codes
N  @{
N   
N  @brief Global Error definitions
N*/
N
N/* Header guard */
N#ifndef NRF_ERROR_H__
N#define NRF_ERROR_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** @defgroup NRF_ERRORS_BASE Error Codes Base number definitions
N * @{ */
N#define NRF_ERROR_BASE_NUM      (0x0)       ///< Global error base
N#define NRF_ERROR_SDM_BASE_NUM  (0x1000)    ///< SDM error base
N#define NRF_ERROR_SOC_BASE_NUM  (0x2000)    ///< SoC error base
N#define NRF_ERROR_STK_BASE_NUM  (0x3000)    ///< STK error base
N/** @} */
N
N#define NRF_SUCCESS                           (NRF_ERROR_BASE_NUM + 0)  ///< Successful command
N#define NRF_ERROR_SVC_HANDLER_MISSING         (NRF_ERROR_BASE_NUM + 1)  ///< SVC handler is missing
N#define NRF_ERROR_SOFTDEVICE_NOT_ENABLED      (NRF_ERROR_BASE_NUM + 2)  ///< SoftDevice has not been enabled
N#define NRF_ERROR_INTERNAL                    (NRF_ERROR_BASE_NUM + 3)  ///< Internal Error
N#define NRF_ERROR_NO_MEM                      (NRF_ERROR_BASE_NUM + 4)  ///< No Memory for operation
N#define NRF_ERROR_NOT_FOUND                   (NRF_ERROR_BASE_NUM + 5)  ///< Not found
N#define NRF_ERROR_NOT_SUPPORTED               (NRF_ERROR_BASE_NUM + 6)  ///< Not supported
N#define NRF_ERROR_INVALID_PARAM               (NRF_ERROR_BASE_NUM + 7)  ///< Invalid Parameter
N#define NRF_ERROR_INVALID_STATE               (NRF_ERROR_BASE_NUM + 8)  ///< Invalid state, operation disallowed in this state
N#define NRF_ERROR_INVALID_LENGTH              (NRF_ERROR_BASE_NUM + 9)  ///< Invalid Length
N#define NRF_ERROR_INVALID_FLAGS               (NRF_ERROR_BASE_NUM + 10) ///< Invalid Flags
N#define NRF_ERROR_INVALID_DATA                (NRF_ERROR_BASE_NUM + 11) ///< Invalid Data
N#define NRF_ERROR_DATA_SIZE                   (NRF_ERROR_BASE_NUM + 12) ///< Invalid Data size
N#define NRF_ERROR_TIMEOUT                     (NRF_ERROR_BASE_NUM + 13) ///< Operation timed out
N#define NRF_ERROR_NULL                        (NRF_ERROR_BASE_NUM + 14) ///< Null Pointer
N#define NRF_ERROR_FORBIDDEN                   (NRF_ERROR_BASE_NUM + 15) ///< Forbidden Operation
N#define NRF_ERROR_INVALID_ADDR                (NRF_ERROR_BASE_NUM + 16) ///< Bad Memory Address
N#define NRF_ERROR_BUSY                        (NRF_ERROR_BASE_NUM + 17) ///< Busy
N#define NRF_ERROR_CONN_COUNT                  (NRF_ERROR_BASE_NUM + 18) ///< Maximum connection count exceeded.
N#define NRF_ERROR_RESOURCES                   (NRF_ERROR_BASE_NUM + 19) ///< Not enough resources for operation
N
N#ifdef __cplusplus
S}
N#endif
N#endif // NRF_ERROR_H__
N
N/**
N  @}
N*/
L 11 "..\..\..\..\..\..\components\drivers_ext\LS013B7DH06\LS013B7DH06.h" 2
N#include "nrf_drv_spi.h"
L 1 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 1
N/* Copyright (c) 2015 Nordic Semiconductor. All Rights Reserved.
N *
N * The information contained herein is property of Nordic Semiconductor ASA.
N * Terms and conditions of usage are described in detail in NORDIC
N * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
N *
N * Licensees are granted free, non-transferable use of the information. NO
N * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
N * the file.
N *
N */
N
N/**@file
N * @addtogroup nrf_spi Serial peripheral interface (SPI/SPIM)
N * @ingroup    nrf_drivers
N * @brief      Serial peripheral interface (SPI/SPIM) APIs.
N *
N */
N
N#ifndef NRF_DRV_SPI_H__
N#define NRF_DRV_SPI_H__
N
N#include "nordic_common.h"
L 1 "..\..\..\..\..\..\components\libraries\util\nordic_common.h" 1
N/* Copyright (c) 2008 Nordic Semiconductor. All Rights Reserved.
N *
N * The information contained herein is property of Nordic Semiconductor ASA.
N * Terms and conditions of usage are described in detail in NORDIC
N * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
N *
N * Licensees are granted free, non-transferable use of the information. NO
N * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
N * the file.
N */
N
N/** @file
N * @brief Common defines and macros for firmware developed by Nordic Semiconductor.
N */
N
N#ifndef NORDIC_COMMON_H__
N#define NORDIC_COMMON_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** The upper 8 bits of a 32 bit value */
N//lint -emacro(572,MSB) // Suppress warning 572 "Excessive shift value"
N#define MSB_32(a) (((a) & 0xFF000000) >> 24)
N/** The lower 8 bits (of a 32 bit value) */
N#define LSB_32(a) ((a) & 0x000000FF)
N
N/** The upper 8 bits of a 16 bit value */
N//lint -emacro(572,MSB_16) // Suppress warning 572 "Excessive shift value"
N#define MSB_16(a) (((a) & 0xFF00) >> 8)
N/** The lower 8 bits (of a 16 bit value) */
N#define LSB_16(a) ((a) & 0x00FF)
N
N/** Leaves the minimum of the two 32-bit arguments */
N/*lint -emacro(506, MIN) */ /* Suppress "Constant value Boolean */
N#define MIN(a, b) ((a) < (b) ? (a) : (b))
N/** Leaves the maximum of the two 32-bit arguments */
N/*lint -emacro(506, MAX) */ /* Suppress "Constant value Boolean */
N#define MAX(a, b) ((a) < (b) ? (b) : (a))
N
N/**@brief Concatenates two parameters.
N *
N * It realizes two level expansion to make it sure that all the parameters
N * are actually expanded before gluing them together.
N *
N * @param p1 First parameter to concatenating
N * @param p2 Second parameter to concatenating
N *
N * @return Two parameters glued together.
N *         They have to create correct C mnemonic in other case
N *         preprocessor error would be generated.
N *
N * @sa CONCAT_3
N */
N#define CONCAT_2(p1, p2)      CONCAT_2_(p1, p2)
N/** Auxiliary macro used by @ref CONCAT_2 */
N#define CONCAT_2_(p1, p2)     p1##p2
N
N/**@brief Concatenates three parameters.
N *
N * It realizes two level expansion to make it sure that all the parameters
N * are actually expanded before gluing them together.
N *
N * @param p1 First parameter to concatenating
N * @param p2 Second parameter to concatenating
N * @param p3 Third parameter to concatenating
N *
N * @return Three parameters glued together.
N *         They have to create correct C mnemonic in other case
N *         preprocessor error would be generated.
N *
N * @sa CONCAT_2
N */
N#define CONCAT_3(p1, p2, p3)  CONCAT_3_(p1, p2, p3)
N/** Auxiliary macro used by @ref CONCAT_3 */
N#define CONCAT_3_(p1, p2, p3) p1##p2##p3
N
N#define NUM_TO_STR_INTERNAL(val) #val
N/** Converts numeric value to string.
N */
N#define NUM_TO_STR(val) NUM_TO_STR_INTERNAL(val)
N
N/** Counts number of elements inside the array
N */
N#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
N
N/**@brief Set a bit in the uint32 word.
N *
N * @param[in] W  Word whose bit is being set.
N * @param[in] B  Bit number in the word to be set.
N */
N#define SET_BIT(W,B)  ((W) |= (uint32_t)(1U << (B)))
N
N
N/**@brief Clears a bit in the uint32 word.
N *
N * @param[in] W   Word whose bit is to be cleared.
N * @param[in] B   Bit number in the word to be cleared.
N */
N#define CLR_BIT(W, B) ((W) &= (~((uint32_t)1 << (B))))
N
N
N/**@brief Checks if a bit is set.
N *
N * @param[in] W   Word whose bit is to be checked.
N * @param[in] B   Bit number in the word to be checked.
N *
N * @retval 1 if bit is set.
N * @retval 0 if bit is not set.
N */
N#define IS_SET(W,B) (((W) >> (B)) & 1)
N
N#define BIT_0 0x01 /**< The value of bit 0 */
N#define BIT_1 0x02 /**< The value of bit 1 */
N#define BIT_2 0x04 /**< The value of bit 2 */
N#define BIT_3 0x08 /**< The value of bit 3 */
N#define BIT_4 0x10 /**< The value of bit 4 */
N#define BIT_5 0x20 /**< The value of bit 5 */
N#define BIT_6 0x40 /**< The value of bit 6 */
N#define BIT_7 0x80 /**< The value of bit 7 */
N#define BIT_8 0x0100 /**< The value of bit 8 */
N#define BIT_9 0x0200 /**< The value of bit 9 */
N#define BIT_10 0x0400 /**< The value of bit 10 */
N#define BIT_11 0x0800 /**< The value of bit 11 */
N#define BIT_12 0x1000 /**< The value of bit 12 */
N#define BIT_13 0x2000 /**< The value of bit 13 */
N#define BIT_14 0x4000 /**< The value of bit 14 */
N#define BIT_15 0x8000 /**< The value of bit 15 */
N#define BIT_16 0x00010000 /**< The value of bit 16 */
N#define BIT_17 0x00020000 /**< The value of bit 17 */
N#define BIT_18 0x00040000 /**< The value of bit 18 */
N#define BIT_19 0x00080000 /**< The value of bit 19 */
N#define BIT_20 0x00100000 /**< The value of bit 20 */
N#define BIT_21 0x00200000 /**< The value of bit 21 */
N#define BIT_22 0x00400000 /**< The value of bit 22 */
N#define BIT_23 0x00800000 /**< The value of bit 23 */
N#define BIT_24 0x01000000 /**< The value of bit 24 */
N#define BIT_25 0x02000000 /**< The value of bit 25 */
N#define BIT_26 0x04000000 /**< The value of bit 26 */
N#define BIT_27 0x08000000 /**< The value of bit 27 */
N#define BIT_28 0x10000000 /**< The value of bit 28 */
N#define BIT_29 0x20000000 /**< The value of bit 29 */
N#define BIT_30 0x40000000 /**< The value of bit 30 */
N#define BIT_31 0x80000000 /**< The value of bit 31 */
N
N#define UNUSED_VARIABLE(X)  ((void)(X))
N#define UNUSED_PARAMETER(X) UNUSED_VARIABLE(X)
N#define UNUSED_RETURN_VALUE(X) UNUSED_VARIABLE(X)
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NORDIC_COMMON_H__
L 24 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N#include "sdk_config.h"
L 1 "..\config\sdk_config.h" 1
N
N
N#ifndef SDK_CONFIG_H
N#define SDK_CONFIG_H
N// <<< Use Configuration Wizard in Context Menu >>>\n
N#ifdef USE_APP_CONFIG
S#include "app_config.h"
N#endif
N// <h> nRF_BLE 
N
N//==========================================================
N// <q> BLE_ADVERTISING_ENABLED  - ble_advertising - Advertising module
N 
N
N#ifndef BLE_ADVERTISING_ENABLED
N#define BLE_ADVERTISING_ENABLED 1
N#endif
N
N// <q> BLE_DTM_ENABLED  - ble_dtm - Module for testing RF/PHY using DTM commands
N 
N
N#ifndef BLE_DTM_ENABLED
N#define BLE_DTM_ENABLED 0
N#endif
N
N// <q> BLE_RACP_ENABLED  - ble_racp - Record Access Control Point library
N 
N
N#ifndef BLE_RACP_ENABLED
N#define BLE_RACP_ENABLED 0
N#endif
N
N// <q> NRF_BLE_QWR_ENABLED  - nrf_ble_qwr - Queued writes support module (prepare/execute write)
N 
N
N#ifndef NRF_BLE_QWR_ENABLED
N#define NRF_BLE_QWR_ENABLED 1
N#endif
N
N// <q> PEER_MANAGER_ENABLED  - peer_manager - Peer Manager
N 
N
N#ifndef PEER_MANAGER_ENABLED
N#define PEER_MANAGER_ENABLED 1
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_BLE_Services 
N
N//==========================================================
N// <q> BLE_ANCS_C_ENABLED  - ble_ancs_c - Apple Notification Service Client
N 
N
N#ifndef BLE_ANCS_C_ENABLED
N#define BLE_ANCS_C_ENABLED 0
N#endif
N
N// <q> BLE_ANS_C_ENABLED  - ble_ans_c - Alert Notification Service Client
N 
N
N#ifndef BLE_ANS_C_ENABLED
N#define BLE_ANS_C_ENABLED 0
N#endif
N
N// <q> BLE_BAS_C_ENABLED  - ble_bas_c - Battery Service Client
N 
N
N#ifndef BLE_BAS_C_ENABLED
N#define BLE_BAS_C_ENABLED 0
N#endif
N
N// <q> BLE_BAS_ENABLED  - ble_bas - Battery Service
N 
N
N#ifndef BLE_BAS_ENABLED
N#define BLE_BAS_ENABLED 1
N#endif
N
N// <q> BLE_CSCS_ENABLED  - ble_cscs - Cycling Speed and Cadence Service
N 
N
N#ifndef BLE_CSCS_ENABLED
N#define BLE_CSCS_ENABLED 0
N#endif
N
N// <q> BLE_CTS_C_ENABLED  - ble_cts_c - Current Time Service Client
N 
N
N#ifndef BLE_CTS_C_ENABLED
N#define BLE_CTS_C_ENABLED 0
N#endif
N
N// <q> BLE_DIS_ENABLED  - ble_dis - Device Information Service
N 
N
N#ifndef BLE_DIS_ENABLED
N#define BLE_DIS_ENABLED 0
N#endif
N
N// <q> BLE_GLS_ENABLED  - ble_gls - Glucose Service
N 
N
N#ifndef BLE_GLS_ENABLED
N#define BLE_GLS_ENABLED 0
N#endif
N
N// <q> BLE_HIDS_ENABLED  - ble_hids - Human Interface Device Service
N 
N
N#ifndef BLE_HIDS_ENABLED
N#define BLE_HIDS_ENABLED 0
N#endif
N
N// <q> BLE_HRS_C_ENABLED  - ble_hrs_c - Heart Rate Service Client
N 
N
N#ifndef BLE_HRS_C_ENABLED
N#define BLE_HRS_C_ENABLED 0
N#endif
N
N// <q> BLE_HRS_ENABLED  - ble_hrs - Heart Rate Service
N 
N
N#ifndef BLE_HRS_ENABLED
N#define BLE_HRS_ENABLED 1
N#endif
N
N// <q> BLE_HTS_ENABLED  - ble_hts - Health Thermometer Service
N 
N
N#ifndef BLE_HTS_ENABLED
N#define BLE_HTS_ENABLED 0
N#endif
N
N// <q> BLE_IAS_C_ENABLED  - ble_ias_c - Immediate Alert Service Client
N 
N
N#ifndef BLE_IAS_C_ENABLED
N#define BLE_IAS_C_ENABLED 0
N#endif
N
N// <q> BLE_IAS_ENABLED  - ble_ias - Immediate Alert Service
N 
N
N#ifndef BLE_IAS_ENABLED
N#define BLE_IAS_ENABLED 0
N#endif
N
N// <q> BLE_LBS_C_ENABLED  - ble_lbs_c - Nordic LED Button Service Client
N 
N
N#ifndef BLE_LBS_C_ENABLED
N#define BLE_LBS_C_ENABLED 0
N#endif
N
N// <q> BLE_LBS_ENABLED  - ble_lbs - LED Button Service
N 
N
N#ifndef BLE_LBS_ENABLED
N#define BLE_LBS_ENABLED 0
N#endif
N
N// <q> BLE_LLS_ENABLED  - ble_lls - Link Loss Service
N 
N
N#ifndef BLE_LLS_ENABLED
N#define BLE_LLS_ENABLED 0
N#endif
N
N// <q> BLE_NUS_C_ENABLED  - ble_nus_c - Nordic UART Central Service
N 
N
N#ifndef BLE_NUS_C_ENABLED
N#define BLE_NUS_C_ENABLED 0
N#endif
N
N// <q> BLE_NUS_ENABLED  - ble_nus - Nordic UART Service
N 
N
N#ifndef BLE_NUS_ENABLED
N#define BLE_NUS_ENABLED 0
N#endif
N
N// <q> BLE_RSCS_C_ENABLED  - ble_rscs_c - Running Speed and Cadence Client
N 
N
N#ifndef BLE_RSCS_C_ENABLED
N#define BLE_RSCS_C_ENABLED 0
N#endif
N
N// <q> BLE_RSCS_ENABLED  - ble_rscs - Running Speed and Cadence Service
N 
N
N#ifndef BLE_RSCS_ENABLED
N#define BLE_RSCS_ENABLED 0
N#endif
N
N// <q> BLE_TPS_ENABLED  - ble_tps - TX Power Service
N 
N
N#ifndef BLE_TPS_ENABLED
N#define BLE_TPS_ENABLED 0
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Drivers 
N
N//==========================================================
N// <e> ADC_ENABLED - nrf_drv_adc - Driver for ADC peripheral (nRF51)
N//==========================================================
N#ifndef ADC_ENABLED
N#define ADC_ENABLED 0
N#endif
N#if  ADC_ENABLED
X#if  0
S// <o> ADC_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef ADC_CONFIG_IRQ_PRIORITY
S#define ADC_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //ADC_ENABLED
N// </e>
N
N// <e> CLOCK_ENABLED - nrf_drv_clock - CLOCK peripheral driver
N//==========================================================
N#ifndef CLOCK_ENABLED
N#define CLOCK_ENABLED 1
N#endif
N#if  CLOCK_ENABLED
X#if  1
N// <o> CLOCK_CONFIG_XTAL_FREQ  - HF XTAL Frequency
N 
N// <0=> Default (64 MHz) 
N
N#ifndef CLOCK_CONFIG_XTAL_FREQ
N#define CLOCK_CONFIG_XTAL_FREQ 0
N#endif
N
N// <o> CLOCK_CONFIG_LF_SRC  - LF Clock Source
N 
N// <0=> RC 
N// <1=> XTAL 
N// <2=> Synth 
N
N#ifndef CLOCK_CONFIG_LF_SRC
N#define CLOCK_CONFIG_LF_SRC 1
N#endif
N
N// <o> CLOCK_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef CLOCK_CONFIG_IRQ_PRIORITY
N#define CLOCK_CONFIG_IRQ_PRIORITY 6
N#endif
N
N#endif //CLOCK_ENABLED
N// </e>
N
N// <e> COMP_ENABLED - nrf_drv_comp - COMP peripheral driver
N//==========================================================
N#ifndef COMP_ENABLED
N#define COMP_ENABLED 0
N#endif
N#if  COMP_ENABLED
X#if  0
S// <o> COMP_CONFIG_REF  - Reference voltage
S 
S// <0=> Internal 1.2V 
S// <1=> Internal 1.8V 
S// <2=> Internal 2.4V 
S// <4=> VDD 
S// <7=> ARef 
S
S#ifndef COMP_CONFIG_REF
S#define COMP_CONFIG_REF 1
S#endif
S
S// <o> COMP_CONFIG_MAIN_MODE  - Main mode
S 
S// <0=> Single ended 
S// <1=> Differential 
S
S#ifndef COMP_CONFIG_MAIN_MODE
S#define COMP_CONFIG_MAIN_MODE 0
S#endif
S
S// <o> COMP_CONFIG_SPEED_MODE  - Speed mode
S 
S// <0=> Low power 
S// <1=> Normal 
S// <2=> High speed 
S
S#ifndef COMP_CONFIG_SPEED_MODE
S#define COMP_CONFIG_SPEED_MODE 2
S#endif
S
S// <o> COMP_CONFIG_HYST  - Hystheresis
S 
S// <0=> No 
S// <1=> 50mV 
S
S#ifndef COMP_CONFIG_HYST
S#define COMP_CONFIG_HYST 0
S#endif
S
S// <o> COMP_CONFIG_ISOURCE  - Current Source
S 
S// <0=> Off 
S// <1=> 2.5 uA 
S// <2=> 5 uA 
S// <3=> 10 uA 
S
S#ifndef COMP_CONFIG_ISOURCE
S#define COMP_CONFIG_ISOURCE 0
S#endif
S
S// <o> COMP_CONFIG_INPUT  - Analog input
S 
S// <0=> 0 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef COMP_CONFIG_INPUT
S#define COMP_CONFIG_INPUT 0
S#endif
S
S// <o> COMP_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef COMP_CONFIG_IRQ_PRIORITY
S#define COMP_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //COMP_ENABLED
N// </e>
N
N// <q> EGU_ENABLED  - nrf_drv_swi - SWI(EGU) peripheral driver
N 
N
N#ifndef EGU_ENABLED
N#define EGU_ENABLED 0
N#endif
N
N// <e> GPIOTE_ENABLED - nrf_drv_gpiote - GPIOTE peripheral driver
N//==========================================================
N#ifndef GPIOTE_ENABLED
N#define GPIOTE_ENABLED 1
N#endif
N#if  GPIOTE_ENABLED
X#if  1
N// <o> GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS - Number of lower power input pins 
N#ifndef GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
N#define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 4
N#endif
N
N// <o> GPIOTE_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef GPIOTE_CONFIG_IRQ_PRIORITY
N#define GPIOTE_CONFIG_IRQ_PRIORITY 6
N#endif
N
N#endif //GPIOTE_ENABLED
N// </e>
N
N// <e> I2S_ENABLED - nrf_drv_i2s - I2S peripheral driver
N//==========================================================
N#ifndef I2S_ENABLED
N#define I2S_ENABLED 0
N#endif
N#if  I2S_ENABLED
X#if  0
S// <o> I2S_CONFIG_SCK_PIN - SCK pin  <0-31> 
S
S
S#ifndef I2S_CONFIG_SCK_PIN
S#define I2S_CONFIG_SCK_PIN 31
S#endif
S
S// <o> I2S_CONFIG_LRCK_PIN - LRCK pin  <1-31> 
S
S
S#ifndef I2S_CONFIG_LRCK_PIN
S#define I2S_CONFIG_LRCK_PIN 30
S#endif
S
S// <o> I2S_CONFIG_MCK_PIN - MCK pin 
S#ifndef I2S_CONFIG_MCK_PIN
S#define I2S_CONFIG_MCK_PIN 255
S#endif
S
S// <o> I2S_CONFIG_SDOUT_PIN - SDOUT pin  <0-31> 
S
S
S#ifndef I2S_CONFIG_SDOUT_PIN
S#define I2S_CONFIG_SDOUT_PIN 29
S#endif
S
S// <o> I2S_CONFIG_SDIN_PIN - SDIN pin  <0-31> 
S
S
S#ifndef I2S_CONFIG_SDIN_PIN
S#define I2S_CONFIG_SDIN_PIN 28
S#endif
S
S// <o> I2S_CONFIG_MASTER  - Mode
S 
S// <0=> Master 
S// <1=> Slave 
S
S#ifndef I2S_CONFIG_MASTER
S#define I2S_CONFIG_MASTER 0
S#endif
S
S// <o> I2S_CONFIG_FORMAT  - Format
S 
S// <0=> I2S 
S// <1=> Aligned 
S
S#ifndef I2S_CONFIG_FORMAT
S#define I2S_CONFIG_FORMAT 0
S#endif
S
S// <o> I2S_CONFIG_ALIGN  - Alignment
S 
S// <0=> Left 
S// <1=> Right 
S
S#ifndef I2S_CONFIG_ALIGN
S#define I2S_CONFIG_ALIGN 0
S#endif
S
S// <o> I2S_CONFIG_SWIDTH  - Sample width (bits)
S 
S// <0=> 8 
S// <1=> 16 
S// <2=> 24 
S
S#ifndef I2S_CONFIG_SWIDTH
S#define I2S_CONFIG_SWIDTH 1
S#endif
S
S// <o> I2S_CONFIG_CHANNELS  - Channels
S 
S// <0=> Stereo 
S// <1=> Left 
S// <2=> Right 
S
S#ifndef I2S_CONFIG_CHANNELS
S#define I2S_CONFIG_CHANNELS 1
S#endif
S
S// <o> I2S_CONFIG_MCK_SETUP  - MCK behavior
S 
S// <0=> Disabled 
S// <2147483648=> 32MHz/2 
S// <1342177280=> 32MHz/3 
S// <1073741824=> 32MHz/4 
S// <805306368=> 32MHz/5 
S// <671088640=> 32MHz/6 
S// <536870912=> 32MHz/8 
S// <402653184=> 32MHz/10 
S// <369098752=> 32MHz/11 
S// <285212672=> 32MHz/15 
S// <268435456=> 32MHz/16 
S// <201326592=> 32MHz/21 
S// <184549376=> 32MHz/23 
S// <142606336=> 32MHz/30 
S// <138412032=> 32MHz/31 
S// <134217728=> 32MHz/32 
S// <100663296=> 32MHz/42 
S// <68157440=> 32MHz/63 
S// <34340864=> 32MHz/125 
S
S#ifndef I2S_CONFIG_MCK_SETUP
S#define I2S_CONFIG_MCK_SETUP 536870912
S#endif
S
S// <o> I2S_CONFIG_RATIO  - MCK/LRCK ratio
S 
S// <0=> 32x 
S// <1=> 48x 
S// <2=> 64x 
S// <3=> 96x 
S// <4=> 128x 
S// <5=> 192x 
S// <6=> 256x 
S// <7=> 384x 
S// <8=> 512x 
S
S#ifndef I2S_CONFIG_RATIO
S#define I2S_CONFIG_RATIO 2000
S#endif
S
S// <o> I2S_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef I2S_CONFIG_IRQ_PRIORITY
S#define I2S_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //I2S_ENABLED
N// </e>
N
N// <e> LPCOMP_ENABLED - nrf_drv_lpcomp - LPCOMP peripheral driver
N//==========================================================
N#ifndef LPCOMP_ENABLED
N#define LPCOMP_ENABLED 0
N#endif
N#if  LPCOMP_ENABLED
X#if  0
S// <o> LPCOMP_CONFIG_REFERENCE  - Reference voltage
S 
S// <0=> Supply 1/8 
S// <1=> Supply 2/8 
S// <2=> Supply 3/8 
S// <3=> Supply 4/8 
S// <4=> Supply 5/8 
S// <5=> Supply 6/8 
S// <6=> Supply 7/8 
S// <8=> Supply 1/16 (nRF52) 
S// <9=> Supply 3/16 (nRF52) 
S// <10=> Supply 5/16 (nRF52) 
S// <11=> Supply 7/16 (nRF52) 
S// <12=> Supply 9/16 (nRF52) 
S// <13=> Supply 11/16 (nRF52) 
S// <14=> Supply 13/16 (nRF52) 
S// <15=> Supply 15/16 (nRF52) 
S// <7=> External Ref 0 
S// <65543=> External Ref 1 
S
S#ifndef LPCOMP_CONFIG_REFERENCE
S#define LPCOMP_CONFIG_REFERENCE 3
S#endif
S
S// <o> LPCOMP_CONFIG_DETECTION  - Detection
S 
S// <0=> Crossing 
S// <1=> Up 
S// <2=> Down 
S
S#ifndef LPCOMP_CONFIG_DETECTION
S#define LPCOMP_CONFIG_DETECTION 2
S#endif
S
S// <o> LPCOMP_CONFIG_INPUT  - Analog input
S 
S// <0=> 0 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef LPCOMP_CONFIG_INPUT
S#define LPCOMP_CONFIG_INPUT 0
S#endif
S
S// <o> LPCOMP_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef LPCOMP_CONFIG_IRQ_PRIORITY
S#define LPCOMP_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //LPCOMP_ENABLED
N// </e>
N
N// <e> PDM_ENABLED - nrf_drv_pdm - PDM peripheral driver
N//==========================================================
N#ifndef PDM_ENABLED
N#define PDM_ENABLED 0
N#endif
N#if  PDM_ENABLED
X#if  0
S// <o> PDM_CONFIG_MODE  - Mode
S 
S// <0=> Stereo 
S// <1=> Mono 
S
S#ifndef PDM_CONFIG_MODE
S#define PDM_CONFIG_MODE 1
S#endif
S
S// <o> PDM_CONFIG_EDGE  - Edge
S 
S// <0=> Left falling 
S// <1=> Left rising 
S
S#ifndef PDM_CONFIG_EDGE
S#define PDM_CONFIG_EDGE 0
S#endif
S
S// <o> PDM_CONFIG_CLOCK_FREQ  - Clock frequency
S 
S// <134217728=> 1000k 
S// <138412032=> 1032k (default) 
S// <142606336=> 1067k 
S
S#ifndef PDM_CONFIG_CLOCK_FREQ
S#define PDM_CONFIG_CLOCK_FREQ 138412032
S#endif
S
S// <o> PDM_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef PDM_CONFIG_IRQ_PRIORITY
S#define PDM_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //PDM_ENABLED
N// </e>
N
N// <q> PERIPHERAL_RESOURCE_SHARING_ENABLED  - nrf_drv_common - Peripheral drivers common module
N 
N
N#ifndef PERIPHERAL_RESOURCE_SHARING_ENABLED
N#define PERIPHERAL_RESOURCE_SHARING_ENABLED 0
N#endif
N
N// <q> PPI_ENABLED  - nrf_drv_ppi - PPI peripheral driver
N 
N
N#ifndef PPI_ENABLED
N#define PPI_ENABLED 0
N#endif
N
N// <e> PWM_ENABLED - nrf_drv_pwm - PWM peripheral driver
N//==========================================================
N#ifndef PWM_ENABLED
N#define PWM_ENABLED 0
N#endif
N#if  PWM_ENABLED
X#if  0
S// <o> PWM_DEFAULT_CONFIG_OUT0_PIN - Out0 pin  <0-31> 
S
S
S#ifndef PWM_DEFAULT_CONFIG_OUT0_PIN
S#define PWM_DEFAULT_CONFIG_OUT0_PIN 31
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_OUT1_PIN - Out1 pin  <0-31> 
S
S
S#ifndef PWM_DEFAULT_CONFIG_OUT1_PIN
S#define PWM_DEFAULT_CONFIG_OUT1_PIN 31
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_OUT2_PIN - Out2 pin  <0-31> 
S
S
S#ifndef PWM_DEFAULT_CONFIG_OUT2_PIN
S#define PWM_DEFAULT_CONFIG_OUT2_PIN 31
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_OUT3_PIN - Out3 pin  <0-31> 
S
S
S#ifndef PWM_DEFAULT_CONFIG_OUT3_PIN
S#define PWM_DEFAULT_CONFIG_OUT3_PIN 31
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_BASE_CLOCK  - Base clock
S 
S// <0=> 16 MHz 
S// <1=> 8 MHz 
S// <2=> 4 MHz 
S// <3=> 2 MHz 
S// <4=> 1 MHz 
S// <5=> 500 kHz 
S// <6=> 250 kHz 
S// <7=> 125 MHz 
S
S#ifndef PWM_DEFAULT_CONFIG_BASE_CLOCK
S#define PWM_DEFAULT_CONFIG_BASE_CLOCK 4
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_COUNT_MODE  - Count mode
S 
S// <0=> Up 
S// <1=> Up and Down 
S
S#ifndef PWM_DEFAULT_CONFIG_COUNT_MODE
S#define PWM_DEFAULT_CONFIG_COUNT_MODE 0
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_TOP_VALUE - Top value 
S#ifndef PWM_DEFAULT_CONFIG_TOP_VALUE
S#define PWM_DEFAULT_CONFIG_TOP_VALUE 1000
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_LOAD_MODE  - Load mode
S 
S// <0=> Common 
S// <1=> Grouped 
S// <2=> Individual 
S// <3=> Waveform 
S
S#ifndef PWM_DEFAULT_CONFIG_LOAD_MODE
S#define PWM_DEFAULT_CONFIG_LOAD_MODE 0
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_STEP_MODE  - Step mode
S 
S// <0=> Auto 
S// <1=> Triggered 
S
S#ifndef PWM_DEFAULT_CONFIG_STEP_MODE
S#define PWM_DEFAULT_CONFIG_STEP_MODE 0
S#endif
S
S// <o> PWM_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef PWM_DEFAULT_CONFIG_IRQ_PRIORITY
S#define PWM_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <q> PWM0_ENABLED  - Enable PWM0 instance
S 
S
S#ifndef PWM0_ENABLED
S#define PWM0_ENABLED 0
S#endif
S
S// <q> PWM1_ENABLED  - Enable PWM1 instance
S 
S
S#ifndef PWM1_ENABLED
S#define PWM1_ENABLED 0
S#endif
S
S// <q> PWM2_ENABLED  - Enable PWM2 instance
S 
S
S#ifndef PWM2_ENABLED
S#define PWM2_ENABLED 0
S#endif
S
N#endif //PWM_ENABLED
N// </e>
N
N// <e> QDEC_ENABLED - nrf_drv_qdec - QDEC peripheral driver
N//==========================================================
N#ifndef QDEC_ENABLED
N#define QDEC_ENABLED 0
N#endif
N#if  QDEC_ENABLED
X#if  0
S// <o> QDEC_CONFIG_REPORTPER  - Report period
S 
S// <0=> 10 Samples 
S// <1=> 40 Samples 
S// <2=> 80 Samples 
S// <3=> 120 Samples 
S// <4=> 160 Samples 
S// <5=> 200 Samples 
S// <6=> 240 Samples 
S// <7=> 280 Samples 
S
S#ifndef QDEC_CONFIG_REPORTPER
S#define QDEC_CONFIG_REPORTPER 0
S#endif
S
S// <o> QDEC_CONFIG_SAMPLEPER  - Sample period
S 
S// <0=> 128 us 
S// <1=> 256 us 
S// <2=> 512 us 
S// <3=> 1024 us 
S// <4=> 2048 us 
S// <5=> 4096 us 
S// <6=> 8192 us 
S// <7=> 16384 us 
S
S#ifndef QDEC_CONFIG_SAMPLEPER
S#define QDEC_CONFIG_SAMPLEPER 7
S#endif
S
S// <o> QDEC_CONFIG_PIO_A - A pin  <0-31> 
S
S
S#ifndef QDEC_CONFIG_PIO_A
S#define QDEC_CONFIG_PIO_A 31
S#endif
S
S// <o> QDEC_CONFIG_PIO_B - B pin  <0-31> 
S
S
S#ifndef QDEC_CONFIG_PIO_B
S#define QDEC_CONFIG_PIO_B 31
S#endif
S
S// <o> QDEC_CONFIG_PIO_LED - LED pin  <0-31> 
S
S
S#ifndef QDEC_CONFIG_PIO_LED
S#define QDEC_CONFIG_PIO_LED 31
S#endif
S
S// <o> QDEC_CONFIG_LEDPRE - LED pre 
S#ifndef QDEC_CONFIG_LEDPRE
S#define QDEC_CONFIG_LEDPRE 511
S#endif
S
S// <o> QDEC_CONFIG_LEDPOL  - LED polarity
S 
S// <0=> Active low 
S// <1=> Active high 
S
S#ifndef QDEC_CONFIG_LEDPOL
S#define QDEC_CONFIG_LEDPOL 1
S#endif
S
S// <q> QDEC_CONFIG_DBFEN  - Debouncing enable
S 
S
S#ifndef QDEC_CONFIG_DBFEN
S#define QDEC_CONFIG_DBFEN 0
S#endif
S
S// <q> QDEC_CONFIG_SAMPLE_INTEN  - Sample ready interrupt enable
S 
S
S#ifndef QDEC_CONFIG_SAMPLE_INTEN
S#define QDEC_CONFIG_SAMPLE_INTEN 0
S#endif
S
S// <o> QDEC_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef QDEC_CONFIG_IRQ_PRIORITY
S#define QDEC_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //QDEC_ENABLED
N// </e>
N
N// <e> RNG_ENABLED - nrf_drv_rng - RNG peripheral driver
N//==========================================================
N#ifndef RNG_ENABLED
N#define RNG_ENABLED 0
N#endif
N#if  RNG_ENABLED
X#if  0
S// <q> RNG_CONFIG_ERROR_CORRECTION  - Error correction
S 
S
S#ifndef RNG_CONFIG_ERROR_CORRECTION
S#define RNG_CONFIG_ERROR_CORRECTION 0
S#endif
S
S// <o> RNG_CONFIG_POOL_SIZE - Pool size 
S#ifndef RNG_CONFIG_POOL_SIZE
S#define RNG_CONFIG_POOL_SIZE 8
S#endif
S
S// <o> RNG_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef RNG_CONFIG_IRQ_PRIORITY
S#define RNG_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //RNG_ENABLED
N// </e>
N
N// <e> RTC_ENABLED - nrf_drv_rtc - RTC peripheral driver
N//==========================================================
N#ifndef RTC_ENABLED
N#define RTC_ENABLED 0
N#endif
N#if  RTC_ENABLED
X#if  0
S// <o> RTC_DEFAULT_CONFIG_FREQUENCY - Frequency  <16-32768> 
S
S
S#ifndef RTC_DEFAULT_CONFIG_FREQUENCY
S#define RTC_DEFAULT_CONFIG_FREQUENCY 32768
S#endif
S
S// <q> RTC_DEFAULT_CONFIG_RELIABLE  - Ensures safe compare event triggering
S 
S
S#ifndef RTC_DEFAULT_CONFIG_RELIABLE
S#define RTC_DEFAULT_CONFIG_RELIABLE 0
S#endif
S
S// <o> RTC_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef RTC_DEFAULT_CONFIG_IRQ_PRIORITY
S#define RTC_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <q> RTC0_ENABLED  - Enable RTC0 instance
S 
S
S#ifndef RTC0_ENABLED
S#define RTC0_ENABLED 0
S#endif
S
S// <q> RTC1_ENABLED  - Enable RTC1 instance
S 
S
S#ifndef RTC1_ENABLED
S#define RTC1_ENABLED 0
S#endif
S
S// <q> RTC2_ENABLED  - Enable RTC2 instance
S 
S
S#ifndef RTC2_ENABLED
S#define RTC2_ENABLED 0
S#endif
S
S// <o> NRF_MAXIMUM_LATENCY_US - Maximum possible time[us] in highest priority interrupt 
S#ifndef NRF_MAXIMUM_LATENCY_US
S#define NRF_MAXIMUM_LATENCY_US 2000
S#endif
S
N#endif //RTC_ENABLED
N// </e>
N
N// <e> SAADC_ENABLED - nrf_drv_saadc - SAADC peripheral driver
N//==========================================================
N#ifndef SAADC_ENABLED
N#define SAADC_ENABLED 0
N#endif
N#if  SAADC_ENABLED
X#if  0
S// <o> SAADC_CONFIG_RESOLUTION  - Resolution
S 
S// <0=> 8 bit 
S// <1=> 10 bit 
S// <2=> 12 bit 
S// <3=> 14 bit 
S
S#ifndef SAADC_CONFIG_RESOLUTION
S#define SAADC_CONFIG_RESOLUTION 1
S#endif
S
S// <o> SAADC_CONFIG_OVERSAMPLE  - Sample period
S 
S// <0=> Disabled 
S// <1=> 2x 
S// <2=> 4x 
S// <3=> 8x 
S// <4=> 16x 
S// <5=> 32x 
S// <6=> 64x 
S// <7=> 128x 
S// <8=> 256x 
S
S#ifndef SAADC_CONFIG_OVERSAMPLE
S#define SAADC_CONFIG_OVERSAMPLE 0
S#endif
S
S// <q> SAADC_CONFIG_LP_MODE  - Enabling low power mode
S 
S
S#ifndef SAADC_CONFIG_LP_MODE
S#define SAADC_CONFIG_LP_MODE 0
S#endif
S
S// <o> SAADC_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef SAADC_CONFIG_IRQ_PRIORITY
S#define SAADC_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //SAADC_ENABLED
N// </e>
N
N// <e> SPIS_ENABLED - nrf_drv_spis - SPI Slave driver
N//==========================================================
N#ifndef SPIS_ENABLED
N#define SPIS_ENABLED 0
N#endif
N#if  SPIS_ENABLED
X#if  0
S// <o> SPIS_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef SPIS_DEFAULT_CONFIG_IRQ_PRIORITY
S#define SPIS_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <o> SPIS_DEFAULT_MODE  - Mode
S 
S// <0=> MODE_0 
S// <1=> MODE_1 
S// <2=> MODE_2 
S// <3=> MODE_3 
S
S#ifndef SPIS_DEFAULT_MODE
S#define SPIS_DEFAULT_MODE 0
S#endif
S
S// <o> SPIS_DEFAULT_BIT_ORDER  - SPIS default bit order
S 
S// <0=> MSB first 
S// <1=> LSB first 
S
S#ifndef SPIS_DEFAULT_BIT_ORDER
S#define SPIS_DEFAULT_BIT_ORDER 0
S#endif
S
S// <o> SPIS_DEFAULT_DEF - SPIS default DEF character  <0-255> 
S
S
S#ifndef SPIS_DEFAULT_DEF
S#define SPIS_DEFAULT_DEF 255
S#endif
S
S// <o> SPIS_DEFAULT_ORC - SPIS default ORC character  <0-255> 
S
S
S#ifndef SPIS_DEFAULT_ORC
S#define SPIS_DEFAULT_ORC 255
S#endif
S
S// <q> SPIS0_ENABLED  - Enable SPIS0 instance
S 
S
S#ifndef SPIS0_ENABLED
S#define SPIS0_ENABLED 0
S#endif
S
S// <q> SPIS1_ENABLED  - Enable SPIS1 instance
S 
S
S#ifndef SPIS1_ENABLED
S#define SPIS1_ENABLED 0
S#endif
S
S// <q> SPIS2_ENABLED  - Enable SPIS2 instance
S 
S
S#ifndef SPIS2_ENABLED
S#define SPIS2_ENABLED 0
S#endif
S
N#endif //SPIS_ENABLED
N// </e>
N
N// <e> SPI_ENABLED - nrf_drv_spi - SPI/SPIM peripheral driver
N//==========================================================
N#ifndef SPI_ENABLED
N#define SPI_ENABLED 1
N#endif
N#if  SPI_ENABLED
X#if  1
N// <e> SPI_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef SPI_CONFIG_LOG_ENABLED
N#define SPI_CONFIG_LOG_ENABLED 0
N#endif
N#if  SPI_CONFIG_LOG_ENABLED
X#if  0
S// <o> SPI_CONFIG_LOG_LEVEL  - Default Severity level
S 
S// <0=> Off 
S// <1=> Error 
S// <2=> Warning 
S// <3=> Info 
S// <4=> Debug 
S
S#ifndef SPI_CONFIG_LOG_LEVEL
S#define SPI_CONFIG_LOG_LEVEL 3
S#endif
S
S// <o> SPI_CONFIG_INFO_COLOR  - ANSI escape code prefix.
S 
S// <0=> Default 
S// <1=> Black 
S// <2=> Red 
S// <3=> Green 
S// <4=> Yellow 
S// <5=> Blue 
S// <6=> Magenta 
S// <7=> Cyan 
S// <8=> White 
S
S#ifndef SPI_CONFIG_INFO_COLOR
S#define SPI_CONFIG_INFO_COLOR 0
S#endif
S
S// <o> SPI_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
S 
S// <0=> Default 
S// <1=> Black 
S// <2=> Red 
S// <3=> Green 
S// <4=> Yellow 
S// <5=> Blue 
S// <6=> Magenta 
S// <7=> Cyan 
S// <8=> White 
S
S#ifndef SPI_CONFIG_DEBUG_COLOR
S#define SPI_CONFIG_DEBUG_COLOR 0
S#endif
S
N#endif //SPI_CONFIG_LOG_ENABLED
N// </e>
N
N// <o> SPI_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef SPI_DEFAULT_CONFIG_IRQ_PRIORITY
N#define SPI_DEFAULT_CONFIG_IRQ_PRIORITY 6
N#endif
N
N// <e> SPI0_ENABLED - Enable SPI0 instance
N//==========================================================
N#ifndef SPI0_ENABLED
N#define SPI0_ENABLED 1
N#endif
N#if  SPI0_ENABLED
X#if  1
N// <q> SPI0_USE_EASY_DMA  - Use EasyDMA
N 
N
N#ifndef SPI0_USE_EASY_DMA
N#define SPI0_USE_EASY_DMA 0
N#endif
N
N// <o> SPI_SCK_PIN - Pin number  <0-31> 
N
N
N#ifndef SPI0_SCK_PIN
N#define SPI0_SCK_PIN 25
N#endif
N
N// <o> SPI_MISO_PIN - Pin number  <0-31> 
N
N
N#ifndef SPI0_MISO_PIN
N#define SPI0_MISO_PIN 26
N#endif
N
N// <o> SPI_MOSI_PIN - Pin number  <0-31> 
N
N
N#ifndef SPI0_MOSI_PIN
N#define SPI0_MOSI_PIN 23
N#endif
N
N// <o> SPI_SS_PIN - Pin number  <0-31> 
N
N
N#ifndef SPI0_SS_PIN
N#define SPI0_SS_PIN 24
N#endif
N#endif //SPI0_ENABLED
N// </e>
N
N// <e> SPI1_ENABLED - Enable SPI1 instance
N//==========================================================
N#ifndef SPI1_ENABLED
N#define SPI1_ENABLED 0
N#endif
N#if  SPI1_ENABLED
X#if  0
S// <q> SPI1_USE_EASY_DMA  - Use EasyDMA
S 
S
S#ifndef SPI1_USE_EASY_DMA
S#define SPI1_USE_EASY_DMA 1
S#endif
S
N#endif //SPI1_ENABLED
N// </e>
N
N// <e> SPI2_ENABLED - Enable SPI2 instance
N//==========================================================
N#ifndef SPI2_ENABLED
N#define SPI2_ENABLED 0
N#endif
N#if  SPI2_ENABLED
X#if  0
S// <q> SPI2_USE_EASY_DMA  - Use EasyDMA
S 
S
S#ifndef SPI2_USE_EASY_DMA
S#define SPI2_USE_EASY_DMA 1
S#endif
S
N#endif //SPI2_ENABLED
N// </e>
N
N#endif //SPI_ENABLED
N// </e>
N
N// <e> TIMER_ENABLED - nrf_drv_timer - TIMER periperal driver
N//==========================================================
N#ifndef TIMER_ENABLED
N#define TIMER_ENABLED 0
N#endif
N#if  TIMER_ENABLED
X#if  0
S// <o> TIMER_DEFAULT_CONFIG_FREQUENCY  - Timer frequency if in Timer mode
S 
S// <0=> 16 MHz 
S// <1=> 8 MHz 
S// <2=> 4 MHz 
S// <3=> 2 MHz 
S// <4=> 1 MHz 
S// <5=> 500 kHz 
S// <6=> 250 kHz 
S// <7=> 125 kHz 
S// <8=> 62.5 kHz 
S// <9=> 31.25 kHz 
S
S#ifndef TIMER_DEFAULT_CONFIG_FREQUENCY
S#define TIMER_DEFAULT_CONFIG_FREQUENCY 0
S#endif
S
S// <o> TIMER_DEFAULT_CONFIG_MODE  - Timer mode or operation
S 
S// <0=> Timer 
S// <1=> Counter 
S
S#ifndef TIMER_DEFAULT_CONFIG_MODE
S#define TIMER_DEFAULT_CONFIG_MODE 0
S#endif
S
S// <o> TIMER_DEFAULT_CONFIG_BIT_WIDTH  - Timer counter bit width
S 
S// <0=> 16 bit 
S// <1=> 8 bit 
S// <2=> 24 bit 
S// <3=> 32 bit 
S
S#ifndef TIMER_DEFAULT_CONFIG_BIT_WIDTH
S#define TIMER_DEFAULT_CONFIG_BIT_WIDTH 0
S#endif
S
S// <o> TIMER_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef TIMER_DEFAULT_CONFIG_IRQ_PRIORITY
S#define TIMER_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <q> TIMER0_ENABLED  - Enable TIMER0 instance
S 
S
S#ifndef TIMER0_ENABLED
S#define TIMER0_ENABLED 0
S#endif
S
S// <q> TIMER1_ENABLED  - Enable TIMER1 instance
S 
S
S#ifndef TIMER1_ENABLED
S#define TIMER1_ENABLED 0
S#endif
S
S// <q> TIMER2_ENABLED  - Enable TIMER2 instance
S 
S
S#ifndef TIMER2_ENABLED
S#define TIMER2_ENABLED 0
S#endif
S
S// <q> TIMER3_ENABLED  - Enable TIMER3 instance
S 
S
S#ifndef TIMER3_ENABLED
S#define TIMER3_ENABLED 0
S#endif
S
S// <q> TIMER4_ENABLED  - Enable TIMER4 instance
S 
S
S#ifndef TIMER4_ENABLED
S#define TIMER4_ENABLED 0
S#endif
S
N#endif //TIMER_ENABLED
N// </e>
N
N// <e> TWIS_ENABLED - nrf_drv_twis - TWIS peripheral driver
N//==========================================================
N#ifndef TWIS_ENABLED
N#define TWIS_ENABLED 0
N#endif
N#if  TWIS_ENABLED
X#if  0
S// <o> TWIS_DEFAULT_CONFIG_ADDR0 - Address0 
S#ifndef TWIS_DEFAULT_CONFIG_ADDR0
S#define TWIS_DEFAULT_CONFIG_ADDR0 0
S#endif
S
S// <o> TWIS_DEFAULT_CONFIG_ADDR1 - Address1 
S#ifndef TWIS_DEFAULT_CONFIG_ADDR1
S#define TWIS_DEFAULT_CONFIG_ADDR1 0
S#endif
S
S// <o> TWIS_DEFAULT_CONFIG_SCL_PULL  - SCL pin pull configuration
S 
S// <0=> Disabled 
S// <1=> Pull down 
S// <3=> Pull up 
S
S#ifndef TWIS_DEFAULT_CONFIG_SCL_PULL
S#define TWIS_DEFAULT_CONFIG_SCL_PULL 0
S#endif
S
S// <o> TWIS_DEFAULT_CONFIG_SDA_PULL  - SDA pin pull configuration
S 
S// <0=> Disabled 
S// <1=> Pull down 
S// <3=> Pull up 
S
S#ifndef TWIS_DEFAULT_CONFIG_SDA_PULL
S#define TWIS_DEFAULT_CONFIG_SDA_PULL 0
S#endif
S
S// <o> TWIS_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef TWIS_DEFAULT_CONFIG_IRQ_PRIORITY
S#define TWIS_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <q> TWIS0_ENABLED  - Enable TWIS0 instance
S 
S
S#ifndef TWIS0_ENABLED
S#define TWIS0_ENABLED 0
S#endif
S
S// <q> TWIS1_ENABLED  - Enable TWIS1 instance
S 
S
S#ifndef TWIS1_ENABLED
S#define TWIS1_ENABLED 0
S#endif
S
S// <q> TWIS_ASSUME_INIT_AFTER_RESET_ONLY  - Assume that any instance would be initialized only once
S 
S
S// <i> Optimization flag. Registers used by TWIS are shared by other peripherals. Normally, during initialization driver tries to clear all registers to known state before doing the initialization itself. This gives initialization safe procedure, no matter when it would be called. If you activate TWIS only once and do never uninitialize it - set this flag to 1 what gives more optimal code.
S
S#ifndef TWIS_ASSUME_INIT_AFTER_RESET_ONLY
S#define TWIS_ASSUME_INIT_AFTER_RESET_ONLY 0
S#endif
S
S// <q> TWIS_NO_SYNC_MODE  - Remove support for synchronous mode
S 
S
S// <i> Synchronous mode would be used in specific situations. And it uses some additional code and data memory to safely process state machine by polling it in status functions. If this functionality is not required it may be disabled to free some resources.
S
S#ifndef TWIS_NO_SYNC_MODE
S#define TWIS_NO_SYNC_MODE 0
S#endif
S
N#endif //TWIS_ENABLED
N// </e>
N
N// <e> TWI_ENABLED - nrf_drv_twi - TWI/TWIM peripheral driver
N//==========================================================
N#ifndef TWI_ENABLED
N#define TWI_ENABLED 0
N#endif
N#if  TWI_ENABLED
X#if  0
S// <o> TWI_DEFAULT_CONFIG_FREQUENCY  - Frequency
S 
S// <26738688=> 100k 
S// <67108864=> 250k 
S// <104857600=> 400k 
S
S#ifndef TWI_DEFAULT_CONFIG_FREQUENCY
S#define TWI_DEFAULT_CONFIG_FREQUENCY 26738688
S#endif
S
S// <q> TWI_DEFAULT_CONFIG_CLR_BUS_INIT  - Enables bus clearing procedure during init
S 
S
S#ifndef TWI_DEFAULT_CONFIG_CLR_BUS_INIT
S#define TWI_DEFAULT_CONFIG_CLR_BUS_INIT 0
S#endif
S
S// <q> TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT  - Enables bus holding after uninit
S 
S
S#ifndef TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT
S#define TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT 0
S#endif
S
S// <o> TWI_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef TWI_DEFAULT_CONFIG_IRQ_PRIORITY
S#define TWI_DEFAULT_CONFIG_IRQ_PRIORITY 6
S#endif
S
S// <e> TWI0_ENABLED - Enable TWI0 instance
S//==========================================================
S#ifndef TWI0_ENABLED
S#define TWI0_ENABLED 0
S#endif
S#if  TWI0_ENABLED
S// <q> TWI0_USE_EASY_DMA  - Use EasyDMA (if present)
S 
S
S#ifndef TWI0_USE_EASY_DMA
S#define TWI0_USE_EASY_DMA 0
S#endif
S
S#endif //TWI0_ENABLED
S// </e>
S
S// <e> TWI1_ENABLED - Enable TWI1 instance
S//==========================================================
S#ifndef TWI1_ENABLED
S#define TWI1_ENABLED 0
S#endif
S#if  TWI1_ENABLED
S// <q> TWI1_USE_EASY_DMA  - Use EasyDMA (if present)
S 
S
S#ifndef TWI1_USE_EASY_DMA
S#define TWI1_USE_EASY_DMA 0
S#endif
S
S#endif //TWI1_ENABLED
S// </e>
S
N#endif //TWI_ENABLED
N// </e>
N
N// <e> UART_ENABLED - nrf_drv_uart - UART/UARTE peripheral driver
N//==========================================================
N#ifndef UART_ENABLED
N#define UART_ENABLED 1
N#endif
N#if  UART_ENABLED
X#if  1
N// <o> UART_DEFAULT_CONFIG_HWFC  - Hardware Flow Control
N 
N// <0=> Disabled 
N// <1=> Enabled 
N
N#ifndef UART_DEFAULT_CONFIG_HWFC
N#define UART_DEFAULT_CONFIG_HWFC 0
N#endif
N
N// <o> UART_DEFAULT_CONFIG_PARITY  - Parity
N 
N// <0=> Excluded 
N// <14=> Included 
N
N#ifndef UART_DEFAULT_CONFIG_PARITY
N#define UART_DEFAULT_CONFIG_PARITY 0
N#endif
N
N// <o> UART_DEFAULT_CONFIG_BAUDRATE  - Default Baudrate
N 
N// <323584=> 1200 baud 
N// <643072=> 2400 baud 
N// <1290240=> 4800 baud 
N// <2576384=> 9600 baud 
N// <3862528=> 14400 baud 
N// <5152768=> 19200 baud 
N// <7716864=> 28800 baud 
N// <10289152=> 38400 baud 
N// <15400960=> 57600 baud 
N// <20615168=> 76800 baud 
N// <30801920=> 115200 baud 
N// <61865984=> 230400 baud 
N// <67108864=> 250000 baud 
N// <121634816=> 460800 baud 
N// <251658240=> 921600 baud 
N// <268435456=> 57600 baud 
N
N#ifndef UART_DEFAULT_CONFIG_BAUDRATE
N#define UART_DEFAULT_CONFIG_BAUDRATE 30801920
N#endif
N
N// <o> UART_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef UART_DEFAULT_CONFIG_IRQ_PRIORITY
N#define UART_DEFAULT_CONFIG_IRQ_PRIORITY 6
N#endif
N
N// <q> UART0_CONFIG_USE_EASY_DMA  - Default setting for using EasyDMA
N 
N
N#ifndef UART0_CONFIG_USE_EASY_DMA
N#define UART0_CONFIG_USE_EASY_DMA 1
N#endif
N
N// <q> UART_EASY_DMA_SUPPORT  - Driver supporting EasyDMA
N 
N
N#ifndef UART_EASY_DMA_SUPPORT
N#define UART_EASY_DMA_SUPPORT 1
N#endif
N
N// <q> UART_LEGACY_SUPPORT  - Driver supporting Legacy mode
N 
N
N#ifndef UART_LEGACY_SUPPORT
N#define UART_LEGACY_SUPPORT 1
N#endif
N
N#endif //UART_ENABLED
N// </e>
N
N// <e> WDT_ENABLED - nrf_drv_wdt - WDT peripheral driver
N//==========================================================
N#ifndef WDT_ENABLED
N#define WDT_ENABLED 0
N#endif
N#if  WDT_ENABLED
X#if  0
S// <o> WDT_CONFIG_BEHAVIOUR  - WDT behavior in CPU SLEEP or HALT mode
S 
S// <1=> Run in SLEEP, Pause in HALT 
S// <8=> Pause in SLEEP, Run in HALT 
S// <9=> Run in SLEEP and HALT 
S// <0=> Pause in SLEEP and HALT 
S
S#ifndef WDT_CONFIG_BEHAVIOUR
S#define WDT_CONFIG_BEHAVIOUR 1
S#endif
S
S// <o> WDT_CONFIG_RELOAD_VALUE - Reload value  <15-4294967295> 
S
S
S#ifndef WDT_CONFIG_RELOAD_VALUE
S#define WDT_CONFIG_RELOAD_VALUE 2000
S#endif
S
S// <o> WDT_CONFIG_IRQ_PRIORITY  - Interrupt priority
S 
S
S// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
S// <0=> 0 (highest) 
S// <1=> 1 
S// <2=> 2 
S// <3=> 3 
S// <4=> 4 
S// <5=> 5 
S// <6=> 6 
S// <7=> 7 
S
S#ifndef WDT_CONFIG_IRQ_PRIORITY
S#define WDT_CONFIG_IRQ_PRIORITY 6
S#endif
S
N#endif //WDT_ENABLED
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Libraries 
N
N//==========================================================
N// <q> APP_FIFO_ENABLED  - app_fifo - Software FIFO implementation
N 
N 
N#define APPL_LOG app_trace_log  
N
N#ifndef APP_FIFO_ENABLED
N#define APP_FIFO_ENABLED 1
N#endif
N
N// <q> APP_MAILBOX_ENABLED  - app_mailbox - Thread safe mailbox
N 
N
N#ifndef APP_MAILBOX_ENABLED
N#define APP_MAILBOX_ENABLED 0
N#endif
N
N// <q> APP_PWM_ENABLED  - app_pwm - PWM functionality
N 
N
N#ifndef APP_PWM_ENABLED
N#define APP_PWM_ENABLED 0
N#endif
N
N// <e> APP_SCHEDULER_ENABLED - app_scheduler - Events scheduler
N//==========================================================
N#ifndef APP_SCHEDULER_ENABLED
N#define APP_SCHEDULER_ENABLED 0
N#endif
N#if  APP_SCHEDULER_ENABLED
X#if  0
S// <q> APP_SCHEDULER_WITH_PAUSE  - Enabling pause feature
S 
S
S#ifndef APP_SCHEDULER_WITH_PAUSE
S#define APP_SCHEDULER_WITH_PAUSE 0
S#endif
S
S// <q> APP_SCHEDULER_WITH_PROFILER  - Enabling scheduler profiling
S 
S
S#ifndef APP_SCHEDULER_WITH_PROFILER
S#define APP_SCHEDULER_WITH_PROFILER 0
S#endif
S
N#endif //APP_SCHEDULER_ENABLED
N// </e>
N
N// <e> APP_TIMER_ENABLED - app_timer - Application timer functionality
N//==========================================================
N#ifndef APP_TIMER_ENABLED
N#define APP_TIMER_ENABLED 1
N#endif
N#if  APP_TIMER_ENABLED
X#if  1
N// <q> APP_TIMER_WITH_PROFILER  - Enable app_timer profiling
N 
N
N#ifndef APP_TIMER_WITH_PROFILER
N#define APP_TIMER_WITH_PROFILER 0
N#endif
N
N// <q> APP_TIMER_KEEPS_RTC_ACTIVE  - Enable RTC always on
N 
N
N// <i> If option is enabled RTC is kept running even if there is no active timers.
N// <i> This option can be used when app_timer is used for timestamping.
N
N#ifndef APP_TIMER_KEEPS_RTC_ACTIVE
N#define APP_TIMER_KEEPS_RTC_ACTIVE 0
N#endif
N
N#endif //APP_TIMER_ENABLED
N// </e>
N
N// <q> APP_TWI_ENABLED  - app_twi - TWI transaction manager
N 
N
N#ifndef APP_TWI_ENABLED
N#define APP_TWI_ENABLED 0
N#endif
N
N// <e> APP_UART_ENABLED - app_uart - UART driver
N//==========================================================
N#ifndef APP_UART_ENABLED
N#define APP_UART_ENABLED 0
N#endif
N#if  APP_UART_ENABLED
X#if  0
S// <o> APP_UART_DRIVER_INSTANCE  - UART instance used
S 
S// <0=> 0 
S
S#ifndef APP_UART_DRIVER_INSTANCE
S#define APP_UART_DRIVER_INSTANCE 0
S#endif
S
N#endif //APP_UART_ENABLED
N// </e>
N
N// <q> BUTTON_ENABLED  - app_button - buttons handling module
N 
N
N#ifndef BUTTON_ENABLED
N#define BUTTON_ENABLED 1
N#endif
N
N// <q> CRC16_ENABLED  - crc16 - CRC16 calculation routines
N 
N
N#ifndef CRC16_ENABLED
N#define CRC16_ENABLED 1
N#endif
N
N// <q> CRC32_ENABLED  - crc32 - CRC32 calculation routines
N 
N
N#ifndef CRC32_ENABLED
N#define CRC32_ENABLED 0
N#endif
N
N// <q> ECC_ENABLED  - ecc - Elliptic Curve Cryptography Library
N 
N
N#ifndef ECC_ENABLED
N#define ECC_ENABLED 0
N#endif
N
N// <e> FDS_ENABLED - fds - Flash data storage module
N//==========================================================
N#ifndef FDS_ENABLED
N#define FDS_ENABLED 1
N#endif
N#if  FDS_ENABLED
X#if  1
N// <o> FDS_OP_QUEUE_SIZE - Size of the internal queue. 
N#ifndef FDS_OP_QUEUE_SIZE
N#define FDS_OP_QUEUE_SIZE 4
N#endif
N
N// <o> FDS_CHUNK_QUEUE_SIZE - Determines how many @ref fds_record_chunk_t structures can be buffered at any time. 
N#ifndef FDS_CHUNK_QUEUE_SIZE
N#define FDS_CHUNK_QUEUE_SIZE 8
N#endif
N
N// <o> FDS_MAX_USERS - Maximum number of callbacks that can be registered. 
N#ifndef FDS_MAX_USERS
N#define FDS_MAX_USERS 8
N#endif
N
N// <o> FDS_VIRTUAL_PAGES - Number of virtual flash pages to use. 
N// <i> One of the virtual pages is reserved by the system for garbage collection.
N// <i> Therefore, the minimum is two virtual pages: one page to store data and
N// <i> one page to be used by the system for garbage collection. The total amount
N// <i> of flash memory that is used by FDS amounts to @ref FDS_VIRTUAL_PAGES
N// <i> @ref FDS_VIRTUAL_PAGE_SIZE * 4 bytes.
N
N#ifndef FDS_VIRTUAL_PAGES
N#define FDS_VIRTUAL_PAGES 3
N#endif
N
N// <o> FDS_VIRTUAL_PAGE_SIZE  - The size of a virtual page of flash memory, expressed in number of 4-byte words.
N 
N
N// <i> By default, a virtual page is the same size as a physical page.
N// <i> The size of a virtual page must be a multiple of the size of a physical page.
N// <1024=> 1024 
N// <2048=> 2048 
N
N#ifndef FDS_VIRTUAL_PAGE_SIZE
N#define FDS_VIRTUAL_PAGE_SIZE 1024
N#endif
N
N#endif //FDS_ENABLED
N// </e>
N
N// <e> FSTORAGE_ENABLED - fstorage - Flash storage module
N//==========================================================
N#ifndef FSTORAGE_ENABLED
N#define FSTORAGE_ENABLED 1
N#endif
N#if  FSTORAGE_ENABLED
X#if  1
N// <o> FS_QUEUE_SIZE - Configures the size of the internal queue. 
N// <i> Increase this if there are many users, or if it is likely that many
N// <i> operation will be queued at once without waiting for the previous operations
N// <i> to complete. In general, increase the queue size if you frequently receive
N// <i> @ref FS_ERR_QUEUE_FULL errors when calling @ref fs_store or @ref fs_erase.
N
N#ifndef FS_QUEUE_SIZE
N#define FS_QUEUE_SIZE 4
N#endif
N
N// <o> FS_OP_MAX_RETRIES - Number attempts to execute an operation if the SoftDevice fails. 
N// <i> Increase this value if events return the @ref FS_ERR_OPERATION_TIMEOUT
N// <i> error often. The SoftDevice may fail to schedule flash access due to high BLE activity.
N
N#ifndef FS_OP_MAX_RETRIES
N#define FS_OP_MAX_RETRIES 3
N#endif
N
N// <o> FS_MAX_WRITE_SIZE_WORDS - Maximum number of words to be written to flash in a single operation. 
N// <i> Tweaking this value can increase the chances of the SoftDevice being
N// <i> able to fit flash operations in between radio activity. This value is bound by the
N// <i> maximum number of words which the SoftDevice can write to flash in a single call to
N// <i> @ref sd_flash_write, which is 256 words for nRF51 ICs and 1024 words for nRF52 ICs.
N
N#ifndef FS_MAX_WRITE_SIZE_WORDS
N#define FS_MAX_WRITE_SIZE_WORDS 1024
N#endif
N
N#endif //FSTORAGE_ENABLED
N// </e>
N
N// <q> HARDFAULT_HANDLER_ENABLED  - hardfault_default - HardFault default handler for debugging and release
N 
N
N#ifndef HARDFAULT_HANDLER_ENABLED
N#define HARDFAULT_HANDLER_ENABLED 0
N#endif
N
N// <e> HCI_MEM_POOL_ENABLED - hci_mem_pool - memory pool implementation used by HCI
N//==========================================================
N#ifndef HCI_MEM_POOL_ENABLED
N#define HCI_MEM_POOL_ENABLED 0
N#endif
N#if  HCI_MEM_POOL_ENABLED
X#if  0
S// <o> HCI_TX_BUF_SIZE - TX buffer size in bytes. 
S#ifndef HCI_TX_BUF_SIZE
S#define HCI_TX_BUF_SIZE 600
S#endif
S
S// <o> HCI_RX_BUF_SIZE - RX buffer size in bytes. 
S#ifndef HCI_RX_BUF_SIZE
S#define HCI_RX_BUF_SIZE 600
S#endif
S
S// <o> HCI_RX_BUF_QUEUE_SIZE - RX buffer queue size. 
S#ifndef HCI_RX_BUF_QUEUE_SIZE
S#define HCI_RX_BUF_QUEUE_SIZE 4
S#endif
S
N#endif //HCI_MEM_POOL_ENABLED
N// </e>
N
N// <e> HCI_SLIP_ENABLED - hci_slip - SLIP protocol implementation used by HCI
N//==========================================================
N#ifndef HCI_SLIP_ENABLED
N#define HCI_SLIP_ENABLED 0
N#endif
N#if  HCI_SLIP_ENABLED
X#if  0
S// <o> HCI_UART_BAUDRATE  - Default Baudrate
S 
S// <323584=> 1200 baud 
S// <643072=> 2400 baud 
S// <1290240=> 4800 baud 
S// <2576384=> 9600 baud 
S// <3862528=> 14400 baud 
S// <5152768=> 19200 baud 
S// <7716864=> 28800 baud 
S// <10289152=> 38400 baud 
S// <15400960=> 57600 baud 
S// <20615168=> 76800 baud 
S// <30801920=> 115200 baud 
S// <61865984=> 230400 baud 
S// <67108864=> 250000 baud 
S// <121634816=> 460800 baud 
S// <251658240=> 921600 baud 
S// <268435456=> 57600 baud 
S
S#ifndef HCI_UART_BAUDRATE
S#define HCI_UART_BAUDRATE 30801920
S#endif
S
S// <o> HCI_UART_FLOW_CONTROL  - Hardware Flow Control
S 
S// <0=> Disabled 
S// <1=> Enabled 
S
S#ifndef HCI_UART_FLOW_CONTROL
S#define HCI_UART_FLOW_CONTROL 0
S#endif
S
S// <o> HCI_UART_RX_PIN - UART RX pin 
S#ifndef HCI_UART_RX_PIN
S#define HCI_UART_RX_PIN 8
S#endif
S
S// <o> HCI_UART_TX_PIN - UART TX pin 
S#ifndef HCI_UART_TX_PIN
S#define HCI_UART_TX_PIN 6
S#endif
S
S// <o> HCI_UART_RTS_PIN - UART RTS pin 
S#ifndef HCI_UART_RTS_PIN
S#define HCI_UART_RTS_PIN 5
S#endif
S
S// <o> HCI_UART_CTS_PIN - UART CTS pin 
S#ifndef HCI_UART_CTS_PIN
S#define HCI_UART_CTS_PIN 7
S#endif
S
N#endif //HCI_SLIP_ENABLED
N// </e>
N
N// <e> HCI_TRANSPORT_ENABLED - hci_transport - HCI transport
N//==========================================================
N#ifndef HCI_TRANSPORT_ENABLED
N#define HCI_TRANSPORT_ENABLED 0
N#endif
N#if  HCI_TRANSPORT_ENABLED
X#if  0
S// <o> HCI_MAX_PACKET_SIZE_IN_BITS - Maximum size of a single application packet in bits. 
S#ifndef HCI_MAX_PACKET_SIZE_IN_BITS
S#define HCI_MAX_PACKET_SIZE_IN_BITS 8000
S#endif
S
N#endif //HCI_TRANSPORT_ENABLED
N// </e>
N
N// <q> LED_SOFTBLINK_ENABLED  - led_softblink - led_softblink module
N 
N
N#ifndef LED_SOFTBLINK_ENABLED
N#define LED_SOFTBLINK_ENABLED 0
N#endif
N
N// <q> LOW_POWER_PWM_ENABLED  - low_power_pwm - low_power_pwm module
N 
N
N#ifndef LOW_POWER_PWM_ENABLED
N#define LOW_POWER_PWM_ENABLED 0
N#endif
N
N// <e> MEM_MANAGER_ENABLED - mem_manager - Dynamic memory allocator
N//==========================================================
N#ifndef MEM_MANAGER_ENABLED
N#define MEM_MANAGER_ENABLED 0
N#endif
N#if  MEM_MANAGER_ENABLED
X#if  0
S// <o> MEMORY_MANAGER_SMALL_BLOCK_COUNT - Size of each memory blocks identified as 'small' block.  <0-255> 
S
S
S#ifndef MEMORY_MANAGER_SMALL_BLOCK_COUNT
S#define MEMORY_MANAGER_SMALL_BLOCK_COUNT 1
S#endif
S
S// <o> MEMORY_MANAGER_SMALL_BLOCK_SIZE -  Size of each memory blocks identified as 'small' block. 
S// <i>  Size of each memory blocks identified as 'small' block. Memory block are recommended to be word-sized.
S
S#ifndef MEMORY_MANAGER_SMALL_BLOCK_SIZE
S#define MEMORY_MANAGER_SMALL_BLOCK_SIZE 32
S#endif
S
S// <o> MEMORY_MANAGER_MEDIUM_BLOCK_COUNT - Size of each memory blocks identified as 'medium' block.  <0-255> 
S
S
S#ifndef MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
S#define MEMORY_MANAGER_MEDIUM_BLOCK_COUNT 0
S#endif
S
S// <o> MEMORY_MANAGER_MEDIUM_BLOCK_SIZE -  Size of each memory blocks identified as 'medium' block. 
S// <i>  Size of each memory blocks identified as 'medium' block. Memory block are recommended to be word-sized.
S
S#ifndef MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
S#define MEMORY_MANAGER_MEDIUM_BLOCK_SIZE 256
S#endif
S
S// <o> MEMORY_MANAGER_LARGE_BLOCK_COUNT - Size of each memory blocks identified as 'large' block.  <0-255> 
S
S
S#ifndef MEMORY_MANAGER_LARGE_BLOCK_COUNT
S#define MEMORY_MANAGER_LARGE_BLOCK_COUNT 0
S#endif
S
S// <o> MEMORY_MANAGER_LARGE_BLOCK_SIZE -  Size of each memory blocks identified as 'large' block. 
S// <i>  Size of each memory blocks identified as 'large' block. Memory block are recommended to be word-sized.
S
S#ifndef MEMORY_MANAGER_LARGE_BLOCK_SIZE
S#define MEMORY_MANAGER_LARGE_BLOCK_SIZE 256
S#endif
S
S// <q> MEM_MANAGER_ENABLE_LOGS  - Enable debug trace in the module.
S 
S
S#ifndef MEM_MANAGER_ENABLE_LOGS
S#define MEM_MANAGER_ENABLE_LOGS 0
S#endif
S
S// <q> MEM_MANAGER_DISABLE_API_PARAM_CHECK  - Disable API parameter checks in the module.
S 
S
S#ifndef MEM_MANAGER_DISABLE_API_PARAM_CHECK
S#define MEM_MANAGER_DISABLE_API_PARAM_CHECK 0
S#endif
S
N#endif //MEM_MANAGER_ENABLED
N// </e>
N
N// <e> NRF_CSENSE_ENABLED - nrf_csense - nrf_csense module
N//==========================================================
N#ifndef NRF_CSENSE_ENABLED
N#define NRF_CSENSE_ENABLED 0
N#endif
N#if  NRF_CSENSE_ENABLED
X#if  0
S// <o> NRF_CSENSE_PAD_HYSTERESIS - Minimal value of change to decide that pad was touched. 
S#ifndef NRF_CSENSE_PAD_HYSTERESIS
S#define NRF_CSENSE_PAD_HYSTERESIS 15
S#endif
S
S// <o> NRF_CSENSE_PAD_DEVIATION - Minimal value measured on pad to take its value while calculating step. 
S#ifndef NRF_CSENSE_PAD_DEVIATION
S#define NRF_CSENSE_PAD_DEVIATION 70
S#endif
S
S// <o> NRF_CSENSE_MIN_PAD_VALUE - Minimum normalized value on pad to take its value into account. 
S#ifndef NRF_CSENSE_MIN_PAD_VALUE
S#define NRF_CSENSE_MIN_PAD_VALUE 20
S#endif
S
S// <o> NRF_CSENSE_MAX_PADS_NUMBER - Maximum number of pads used for one instance. 
S#ifndef NRF_CSENSE_MAX_PADS_NUMBER
S#define NRF_CSENSE_MAX_PADS_NUMBER 20
S#endif
S
S// <o> NRF_CSENSE_MAX_VALUE - Maximum normalized value got from measurement. 
S#ifndef NRF_CSENSE_MAX_VALUE
S#define NRF_CSENSE_MAX_VALUE 1000
S#endif
S
S// <o> NRF_CSENSE_OUTPUT_PIN - Output pin used by lower module. 
S// <i> This is only used when running on NRF51.
S
S#ifndef NRF_CSENSE_OUTPUT_PIN
S#define NRF_CSENSE_OUTPUT_PIN 30
S#endif
S
N#endif //NRF_CSENSE_ENABLED
N// </e>
N
N// <e> NRF_DRV_CSENSE_ENABLED - nrf_drv_csense - Capacitive sensor module
N//==========================================================
N#ifndef NRF_DRV_CSENSE_ENABLED
N#define NRF_DRV_CSENSE_ENABLED 0
N#endif
N#if  NRF_DRV_CSENSE_ENABLED
X#if  0
S// <o> TIMER0_FOR_CSENSE - First TIMER instance used by the driver (except nRF51) 
S#ifndef TIMER0_FOR_CSENSE
S#define TIMER0_FOR_CSENSE 1
S#endif
S
S// <o> TIMER1_FOR_CSENSE - Second TIMER instance used by the driver (except nRF51) 
S#ifndef TIMER1_FOR_CSENSE
S#define TIMER1_FOR_CSENSE 2
S#endif
S
S// <o> MEASUREMENT_PERIOD - Single measurement period. 
S// <i> Time of single measurement can be calculated as T = (1/2)*MEASUREMENT_PERIOD*(1/f_OSC) where f_OSC = I_SOURCE / (2C*(VUP-VDOWN) ). I_SOURCE, VUP and VDOWN are values used to initialize COMP and C is capacitance of used pad.
S
S#ifndef MEASUREMENT_PERIOD
S#define MEASUREMENT_PERIOD 20
S#endif
S
N#endif //NRF_DRV_CSENSE_ENABLED
N// </e>
N
N// <q> SLIP_ENABLED  - slip - SLIP encoding decoding
N 
N
N#ifndef SLIP_ENABLED
N#define SLIP_ENABLED 0
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Log 
N
N//==========================================================
N// <e> NRF_LOG_ENABLED - nrf_log - Logging
N//==========================================================
N#ifndef NRF_LOG_ENABLED
N#define NRF_LOG_ENABLED 0
N#endif
N#if  NRF_LOG_ENABLED
X#if  0
S// <e> NRF_LOG_USES_COLORS - If enabled then ANSI escape code for colors is prefixed to every string
S//==========================================================
S#ifndef NRF_LOG_USES_COLORS
S#define NRF_LOG_USES_COLORS 0
S#endif
S#if  NRF_LOG_USES_COLORS
S// <o> NRF_LOG_COLOR_DEFAULT  - ANSI escape code prefix.
S 
S// <0=> Default 
S// <1=> Black 
S// <2=> Red 
S// <3=> Green 
S// <4=> Yellow 
S// <5=> Blue 
S// <6=> Magenta 
S// <7=> Cyan 
S// <8=> White 
S
S#ifndef NRF_LOG_COLOR_DEFAULT
S#define NRF_LOG_COLOR_DEFAULT 0
S#endif
S
S// <o> NRF_LOG_ERROR_COLOR  - ANSI escape code prefix.
S 
S// <0=> Default 
S// <1=> Black 
S// <2=> Red 
S// <3=> Green 
S// <4=> Yellow 
S// <5=> Blue 
S// <6=> Magenta 
S// <7=> Cyan 
S// <8=> White 
S
S#ifndef NRF_LOG_ERROR_COLOR
S#define NRF_LOG_ERROR_COLOR 0
S#endif
S
S// <o> NRF_LOG_WARNING_COLOR  - ANSI escape code prefix.
S 
S// <0=> Default 
S// <1=> Black 
S// <2=> Red 
S// <3=> Green 
S// <4=> Yellow 
S// <5=> Blue 
S// <6=> Magenta 
S// <7=> Cyan 
S// <8=> White 
S
S#ifndef NRF_LOG_WARNING_COLOR
S#define NRF_LOG_WARNING_COLOR 0
S#endif
S
S#endif //NRF_LOG_USES_COLORS
S// </e>
S
S// <o> NRF_LOG_DEFAULT_LEVEL  - Default Severity level
S 
S// <0=> Off 
S// <1=> Error 
S// <2=> Warning 
S// <3=> Info 
S// <4=> Debug 
S
S#ifndef NRF_LOG_DEFAULT_LEVEL
S#define NRF_LOG_DEFAULT_LEVEL 3
S#endif
S
S// <e> NRF_LOG_DEFERRED - Enable deffered logger.
S
S// <i> Log data is buffered and can be processed in idle.
S//==========================================================
S#ifndef NRF_LOG_DEFERRED
S#define NRF_LOG_DEFERRED 1
S#endif
S#if  NRF_LOG_DEFERRED
S// <o> NRF_LOG_DEFERRED_BUFSIZE - Size of the buffer for logs in words. 
S// <i> Must be power of 2
S
S#ifndef NRF_LOG_DEFERRED_BUFSIZE
S#define NRF_LOG_DEFERRED_BUFSIZE 256
S#endif
S
S#endif //NRF_LOG_DEFERRED
S// </e>
S
S// <q> NRF_LOG_USES_TIMESTAMP  - Enable timestamping
S 
S
S// <i> Function for getting the timestamp is provided by the user
S
S#ifndef NRF_LOG_USES_TIMESTAMP
S#define NRF_LOG_USES_TIMESTAMP 0
S#endif
S
N#endif //NRF_LOG_ENABLED
N// </e>
N
N// <h> nrf_log_backend - Logging sink
N
N//==========================================================
N// <o> NRF_LOG_BACKEND_MAX_STRING_LENGTH - Buffer for storing single output string 
N// <i> Logger backend RAM usage is determined by this value.
N
N#ifndef NRF_LOG_BACKEND_MAX_STRING_LENGTH
N#define NRF_LOG_BACKEND_MAX_STRING_LENGTH 256
N#endif
N
N// <o> NRF_LOG_TIMESTAMP_DIGITS - Number of digits for timestamp 
N// <i> If higher resolution timestamp source is used it might be needed to increase that
N
N#ifndef NRF_LOG_TIMESTAMP_DIGITS
N#define NRF_LOG_TIMESTAMP_DIGITS 8
N#endif
N
N// <e> NRF_LOG_BACKEND_SERIAL_USES_UART - If enabled data is printed over UART
N//==========================================================
N#ifndef NRF_LOG_BACKEND_SERIAL_USES_UART
N#define NRF_LOG_BACKEND_SERIAL_USES_UART 1
N#endif
N#if  NRF_LOG_BACKEND_SERIAL_USES_UART
X#if  1
N// <o> NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE  - Default Baudrate
N 
N// <323584=> 1200 baud 
N// <643072=> 2400 baud 
N// <1290240=> 4800 baud 
N// <2576384=> 9600 baud 
N// <3862528=> 14400 baud 
N// <5152768=> 19200 baud 
N// <7716864=> 28800 baud 
N// <10289152=> 38400 baud 
N// <15400960=> 57600 baud 
N// <20615168=> 76800 baud 
N// <30801920=> 115200 baud 
N// <61865984=> 230400 baud 
N// <67108864=> 250000 baud 
N// <121634816=> 460800 baud 
N// <251658240=> 921600 baud 
N// <268435456=> 57600 baud 
N
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE
N#define NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE 30801920
N#endif
N
N// <o> NRF_LOG_BACKEND_SERIAL_UART_TX_PIN - UART TX pin 
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_TX_PIN
N#define NRF_LOG_BACKEND_SERIAL_UART_TX_PIN 6
N#endif
N
N// <o> NRF_LOG_BACKEND_SERIAL_UART_RX_PIN - UART RX pin 
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_RX_PIN
N#define NRF_LOG_BACKEND_SERIAL_UART_RX_PIN 8
N#endif
N
N// <o> NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN - UART RTS pin 
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN
N#define NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN 5
N#endif
N
N// <o> NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN - UART CTS pin 
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN
N#define NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN 7
N#endif
N
N// <o> NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL  - Hardware Flow Control
N 
N// <0=> Disabled 
N// <1=> Enabled 
N
N#ifndef NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL
N#define NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL 0
N#endif
N
N// <o> NRF_LOG_BACKEND_UART_INSTANCE  - UART instance used
N 
N// <0=> 0 
N
N#ifndef NRF_LOG_BACKEND_UART_INSTANCE
N#define NRF_LOG_BACKEND_UART_INSTANCE 0
N#endif
N
N#endif //NRF_LOG_BACKEND_SERIAL_USES_UART
N// </e>
N
N// <q> NRF_LOG_BACKEND_SERIAL_USES_RTT  - If enabled data is printed using RTT
N 
N
N#ifndef NRF_LOG_BACKEND_SERIAL_USES_RTT
N#define NRF_LOG_BACKEND_SERIAL_USES_RTT 0
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// <<< end of configuration section >>>
N#endif //SDK_CONFIG_H
N
L 25 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N#include "nrf_peripherals.h"
L 1 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_peripherals.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N
N#ifndef NRF_PERIPHERALS_H
N#define NRF_PERIPHERALS_H
N
N/*lint ++flb "Enter library region */
N
N#ifdef NRF51422
S#include "nrf51422_peripherals.h"
N#endif
N
N#ifdef NRF51802
S#include "nrf51802_peripherals.h"
N#endif
N
N#ifdef NRF51822
S#include "nrf51822_peripherals.h"
N#endif
N
N#ifdef NRF52832
N#include "nrf52832_peripherals.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52832_peripherals.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef _NRF52832_PERIPHERALS_H
N#define _NRF52832_PERIPHERALS_H
N
N
N/* Floating Point Unit */
N#define FPU_PRESENT
N#define FPU_COUNT 1
N
N/* Systick timer */
N#define SYSTICK_PRESENT
N#define SYSTICK_COUNT 1
N
N/* Software Interrupts */
N#define SWI_PRESENT
N#define SWI_COUNT 6
N
N/* Memory Watch Unit */
N#define MWU_PRESENT
N#define MWU_COUNT 1
N
N/* GPIO */
N#define GPIO_PRESENT
N#define GPIO_COUNT 1
N
N#define P0_PIN_NUM 32
N
N/* MPU and BPROT */
N#define BPROT_PRESENT
N
N#define BPROT_REGIONS_SIZE 4096
N#define BPROT_REGIONS_NUM 128
N
N/* Radio */
N#define RADIO_PRESENT
N#define RADIO_COUNT 1
N
N/* Accelerated Address Resolver */
N#define AAR_PRESENT
N#define AAR_COUNT 1
N
N#define AAR_MAX_IRK_NUM 16
N
N/* AES Electronic CodeBook mode encryption */
N#define ECB_PRESENT
N#define ECB_COUNT 1
N
N/* AES CCM mode encryption */
N#define CCM_PRESENT
N#define CCM_COUNT 1
N
N/* NFC Tag */
N#define NFCT_PRESENT
N#define NFCT_COUNT 1
N
N/* Peripheral to Peripheral Interconnect */
N#define PPI_PRESENT
N#define PPI_COUNT 1
N
N#define PPI_CH_NUM 20
N#define PPI_GROUP_NUM 6
N#define PPI_FEATURE_FORKS_PRESENT
N
N/* Event Generator Unit */
N#define EGU_PRESENT
N#define EGU_COUNT 6
N
N#define EGU0_CH_NUM 16
N#define EGU1_CH_NUM 16
N#define EGU2_CH_NUM 16
N#define EGU3_CH_NUM 16
N#define EGU4_CH_NUM 16
N#define EGU5_CH_NUM 16
N
N/* Timer/Counter */
N#define TIMER_PRESENT
N#define TIMER_COUNT 5
N
N#define TIMER0_MAX_SIZE 32
N#define TIMER1_MAX_SIZE 32
N#define TIMER2_MAX_SIZE 32
N#define TIMER3_MAX_SIZE 32
N#define TIMER4_MAX_SIZE 32
N
N#define TIMER0_CC_NUM 4
N#define TIMER1_CC_NUM 4
N#define TIMER2_CC_NUM 4
N#define TIMER3_CC_NUM 6
N#define TIMER4_CC_NUM 6
N
N/* Real Time Counter */
N#define RTC_PRESENT
N#define RTC_COUNT 3
N
N#define RTC0_CC_NUM 3
N#define RTC1_CC_NUM 4
N#define RTC2_CC_NUM 4
N
N/* RNG */
N#define RNG_PRESENT
N#define RNG_COUNT 1
N
N/* Watchdog Timer */
N#define WDT_PRESENT
N#define WDT_COUNT 1
N
N/* Temperature Sensor */
N#define TEMP_PRESENT
N#define TEMP_COUNT 1
N
N/* Serial Peripheral Interface Master */
N#define SPI_PRESENT
N#define SPI_COUNT 3
N
N/* Serial Peripheral Interface Master with DMA */
N#define SPIM_PRESENT
N#define SPIM_COUNT 3
N
N/* Serial Peripheral Interface Slave with DMA*/
N#define SPIS_PRESENT
N#define SPIS_COUNT 3
N
N/* Two Wire Interface Master */
N#define TWI_PRESENT
N#define TWI_COUNT 2
N
N/* Two Wire Interface Master with DMA */
N#define TWIM_PRESENT
N#define TWIM_COUNT 2
N
N/* Two Wire Interface Slave with DMA */
N#define TWIS_PRESENT
N#define TWIS_COUNT 2
N
N/* Universal Asynchronous Receiver-Transmitter */
N#define UART_PRESENT
N#define UART_COUNT 1
N
N/* Universal Asynchronous Receiver-Transmitter with DMA */
N#define UARTE_PRESENT
N#define UARTE_COUNT 1
N
N/* Quadrature Decoder */
N#define QDEC_PRESENT
N#define QDEC_COUNT 1
N
N/* Successive Approximation Analog to Digital Converter */
N#define SAADC_PRESENT
N#define SAADC_COUNT 1
N
N/* GPIO Tasks and Events */
N#define GPIOTE_PRESENT
N#define GPIOTE_COUNT 1
N
N#define GPIOTE_CH_NUM 8
N
N#define GPIOTE_FEATURE_SET_PRESENT
N#define GPIOTE_FEATURE_CLR_PRESENT
N
N/* Low Power Comparator */
N#define LPCOMP_PRESENT
N#define LPCOMP_COUNT 1
N
N#define LPCOMP_REFSEL_RESOLUTION 16
N
N/* Comparator */
N#define COMP_PRESENT
N#define COMP_COUNT 1
N
N/* Pulse Width Modulator */
N#define PWM_PRESENT
N#define PWM_COUNT 3
N
N#define PWM0_CH_NUM 4
N#define PWM1_CH_NUM 4
N#define PWM2_CH_NUM 4
N
N/* Pulse Density Modulator */
N#define PDM_PRESENT
N#define PDM_COUNT 1
N
N/* Inter-IC Sound Interface */
N#define I2S_PRESENT
N#define I2S_COUNT 1
N
N
N#endif      // _NRF52832_PERIPHERALS_H
L 50 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_peripherals.h" 2
N#endif
N
N
N/*lint --flb "Leave library region" */
N
N#endif /* NRF_PERIPHERALS_H */
N
L 26 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N#include "nrf_spi.h"
L 1 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_spi.h" 1
N/* Copyright (c) 2015 Nordic Semiconductor. All Rights Reserved.
N *
N * The information contained herein is property of Nordic Semiconductor ASA.
N * Terms and conditions of usage are described in detail in NORDIC
N * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
N *
N * Licensees are granted free, non-transferable use of the information. NO
N * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
N * the file.
N *
N */
N
N/**
N * @defgroup nrf_spi_hal SPI HAL
N * @{
N * @ingroup nrf_spi
N *
N * @brief Hardware access layer for accessing the SPI peripheral.
N */
N
N#ifndef NRF_SPI_H__
N#define NRF_SPI_H__
N
N#include <stddef.h>
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060016
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 26 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_spi.h" 2
N#include <stdint.h>
N
N#include "nrf.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef NRF_H
N#define NRF_H
N
N/* MDK version */
N#define MDK_MAJOR_VERSION   8
N#define MDK_MINOR_VERSION   9
N#define MDK_MICRO_VERSION   0
N
N#if defined(_WIN32)
X#if 0L
S    /* Do not include nrf51 specific files when building for PC host */
S#elif defined(__unix)
X#elif 0L
S    /* Do not include nrf51 specific files when building for PC host */
S#elif defined(__APPLE__)
X#elif 0L
S    /* Do not include nrf51 specific files when building for PC host */
N#else
N
N    /* Family selection for family includes. */
N    #if defined (NRF51)
X    #if 0L
S        #include "nrf51.h"
S        #include "nrf51_bitfields.h"
S        #include "nrf51_deprecated.h"
N    #elif defined (NRF52)
X    #elif 1L
N        #include "nrf52.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52.h" 1
N
N/****************************************************************************************************//**
N * @file     nrf52.h
N *
N * @brief    CMSIS Cortex-M4 Peripheral Access Layer Header File for
N *           nrf52 from Nordic Semiconductor.
N *
N * @version  V1
N * @date     30. September 2016
N *
N * @note     Generated with SVDConv V2.81d 
N *           from CMSIS SVD File 'nrf52.svd' Version 1,
N *
N * @par      Copyright (c) 2016, Nordic Semiconductor ASA
N *           All rights reserved.
N *           
N *           Redistribution and use in source and binary forms, with or without
N *           modification, are permitted provided that the following conditions are met:
N *           
N *           * Redistributions of source code must retain the above copyright notice, this
N *           list of conditions and the following disclaimer.
N *           
N *           * Redistributions in binary form must reproduce the above copyright notice,
N *           this list of conditions and the following disclaimer in the documentation
N *           and/or other materials provided with the distribution.
N *           
N *           * Neither the name of Nordic Semiconductor ASA nor the names of its
N *           contributors may be used to endorse or promote products derived from
N *           this software without specific prior written permission.
N *           
N *           THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N *           AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N *           IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N *           DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N *           FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N *           DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N *           SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N *           CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N *           OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N *           OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *           
N *
N *******************************************************************************************************/
N
N
N
N/** @addtogroup Nordic Semiconductor
N  * @{
N  */
N
N/** @addtogroup nrf52
N  * @{
N  */
N
N#ifndef NRF52_H
N#define NRF52_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/* -------------------------  Interrupt Number Definition  ------------------------ */
N
Ntypedef enum {
N/* -------------------  Cortex-M4 Processor Exceptions Numbers  ------------------- */
N  Reset_IRQn                    = -15,              /*!<   1  Reset Vector, invoked on Power up and warm reset                 */
N  NonMaskableInt_IRQn           = -14,              /*!<   2  Non maskable Interrupt, cannot be stopped or preempted           */
N  HardFault_IRQn                = -13,              /*!<   3  Hard Fault, all classes of Fault                                 */
N  MemoryManagement_IRQn         = -12,              /*!<   4  Memory Management, MPU mismatch, including Access Violation
N                                                         and No Match                                                          */
N  BusFault_IRQn                 = -11,              /*!<   5  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
N                                                         related Fault                                                         */
N  UsageFault_IRQn               = -10,              /*!<   6  Usage Fault, i.e. Undef Instruction, Illegal State Transition    */
N  SVCall_IRQn                   =  -5,              /*!<  11  System Service Call via SVC instruction                          */
N  DebugMonitor_IRQn             =  -4,              /*!<  12  Debug Monitor                                                    */
N  PendSV_IRQn                   =  -2,              /*!<  14  Pendable request for system service                              */
N  SysTick_IRQn                  =  -1,              /*!<  15  System Tick Timer                                                */
N/* ----------------------  nrf52 Specific Interrupt Numbers  ---------------------- */
N  POWER_CLOCK_IRQn              =   0,              /*!<   0  POWER_CLOCK                                                      */
N  RADIO_IRQn                    =   1,              /*!<   1  RADIO                                                            */
N  UARTE0_UART0_IRQn             =   2,              /*!<   2  UARTE0_UART0                                                     */
N  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn=   3,      /*!<   3  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0                                */
N  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn=   4,      /*!<   4  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1                                */
N  NFCT_IRQn                     =   5,              /*!<   5  NFCT                                                             */
N  GPIOTE_IRQn                   =   6,              /*!<   6  GPIOTE                                                           */
N  SAADC_IRQn                    =   7,              /*!<   7  SAADC                                                            */
N  TIMER0_IRQn                   =   8,              /*!<   8  TIMER0                                                           */
N  TIMER1_IRQn                   =   9,              /*!<   9  TIMER1                                                           */
N  TIMER2_IRQn                   =  10,              /*!<  10  TIMER2                                                           */
N  RTC0_IRQn                     =  11,              /*!<  11  RTC0                                                             */
N  TEMP_IRQn                     =  12,              /*!<  12  TEMP                                                             */
N  RNG_IRQn                      =  13,              /*!<  13  RNG                                                              */
N  ECB_IRQn                      =  14,              /*!<  14  ECB                                                              */
N  CCM_AAR_IRQn                  =  15,              /*!<  15  CCM_AAR                                                          */
N  WDT_IRQn                      =  16,              /*!<  16  WDT                                                              */
N  RTC1_IRQn                     =  17,              /*!<  17  RTC1                                                             */
N  QDEC_IRQn                     =  18,              /*!<  18  QDEC                                                             */
N  COMP_LPCOMP_IRQn              =  19,              /*!<  19  COMP_LPCOMP                                                      */
N  SWI0_EGU0_IRQn                =  20,              /*!<  20  SWI0_EGU0                                                        */
N  SWI1_EGU1_IRQn                =  21,              /*!<  21  SWI1_EGU1                                                        */
N  SWI2_EGU2_IRQn                =  22,              /*!<  22  SWI2_EGU2                                                        */
N  SWI3_EGU3_IRQn                =  23,              /*!<  23  SWI3_EGU3                                                        */
N  SWI4_EGU4_IRQn                =  24,              /*!<  24  SWI4_EGU4                                                        */
N  SWI5_EGU5_IRQn                =  25,              /*!<  25  SWI5_EGU5                                                        */
N  TIMER3_IRQn                   =  26,              /*!<  26  TIMER3                                                           */
N  TIMER4_IRQn                   =  27,              /*!<  27  TIMER4                                                           */
N  PWM0_IRQn                     =  28,              /*!<  28  PWM0                                                             */
N  PDM_IRQn                      =  29,              /*!<  29  PDM                                                              */
N  MWU_IRQn                      =  32,              /*!<  32  MWU                                                              */
N  PWM1_IRQn                     =  33,              /*!<  33  PWM1                                                             */
N  PWM2_IRQn                     =  34,              /*!<  34  PWM2                                                             */
N  SPIM2_SPIS2_SPI2_IRQn         =  35,              /*!<  35  SPIM2_SPIS2_SPI2                                                 */
N  RTC2_IRQn                     =  36,              /*!<  36  RTC2                                                             */
N  I2S_IRQn                      =  37,              /*!<  37  I2S                                                              */
N  FPU_IRQn                      =  38               /*!<  38  FPU                                                              */
N} IRQn_Type;
N
N
N/** @addtogroup Configuration_of_CMSIS
N  * @{
N  */
N
N
N/* ================================================================================ */
N/* ================      Processor and Core Peripheral Section     ================ */
N/* ================================================================================ */
N
N/* ----------------Configuration of the Cortex-M4 Processor and Core Peripherals---------------- */
N#define __CM4_REV                 0x0001            /*!< Cortex-M4 Core Revision                                               */
N#define __MPU_PRESENT                  1            /*!< MPU present or not                                                    */
N#define __NVIC_PRIO_BITS               3            /*!< Number of Bits used for Priority Levels                               */
N#define __Vendor_SysTickConfig         0            /*!< Set to 1 if different SysTick Config is used                          */
N#define __FPU_PRESENT                  1            /*!< FPU present or not                                                    */
N/** @} */ /* End of group Configuration_of_CMSIS */
N
N#include "core_cm4.h"                               /*!< Cortex-M4 processor and core peripherals                              */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cm4.h" 1
N/**************************************************************************//**
N * @file     core_cm4.h
N * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060300 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM4_H_GENERIC
N#define __CORE_CM4_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M4
N  @{
N */
N
N/*  CMSIS CM4 definitions */
N#define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS HAL main version */
N#define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS HAL sub version */
N#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL version number */
X#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) |                                     __CM4_CMSIS_VERSION_SUB           )         
N
N#define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
S  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
S  #define __STATIC_INLINE  static __inline
S
S#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __ICCARM__ )
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __CSMC__ )
S  #define __packed
S  #define __ASM            _asm                                      /*!< asm keyword for COSMIC Compiler */
S  #define __INLINE         inline                                    /*!< inline keyword for COSMIC Compiler. Use -pc99 on compile line */
S  #define __STATIC_INLINE  static inline
S
S#else
S  #error Unknown compiler
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
N*/
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 1L
N    #if (__FPU_PRESENT == 1U)
X    #if (1 == 1U)
N      #define __FPU_USED       1U
N    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
N    #endif
N  #else
S    #define __FPU_USED         0U
N  #endif
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1U
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
N#endif
N
N#include "core_cmInstr.h"                /* Core Instruction Access */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060300 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS Cortex-M Core Function/Instruction Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060300 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1);
N}
N
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N
N#if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
X#if       ((0x04U) == 0x04U) || ((0x04U) == 0x07U)
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
X#if (1 == 1U) && (1U == 1U)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  return(__regfpscr);
N#else
S   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
X#if (1 == 1U) && (1U == 1U)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  __regfpscr = (fpscr);
N#endif
N}
N
N#endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    value  Value to rotate
N  \param [in]    value  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return(result);
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060300 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if (__CORTEX_M >= 0x04U)  /* only for Cortex-M4 and above */
X#if ((0x04U) >= 0x04U)   
N
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
N
N#endif /* (__CORTEX_M >= 0x04) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 54 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cmInstr.h" 2
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 211 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cm4.h" 2
N#include "core_cmFunc.h"                 /* Core Function Access */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060300 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N#endif /* __CORE_CMFUNC_H */
L 212 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cm4.h" 2
N#include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cmSimd.h" 1
N/**************************************************************************//**
N * @file     core_cmSimd.h
N * @brief    CMSIS Cortex-M SIMD Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060300 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMSIMD_H
N#define __CORE_CMSIMD_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CMSIMD_H */
L 213 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include\core_cm4.h" 2
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM4_H_DEPENDANT
N#define __CORE_CM4_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM4_REV
S    #define __CM4_REV               0x0000U
S    #warning "__CM4_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __FPU_PRESENT
S    #define __FPU_PRESENT             0U
S    #warning "__FPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          4U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M4 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N  - Core FPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N#define APSR_Q_Pos                         27U                                            /*!< APSR: Q Position */
N#define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR: Q Mask */
N
N#define APSR_GE_Pos                        16U                                            /*!< APSR: GE Position */
N#define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR: GE Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_Q_Pos                         27U                                            /*!< xPSR: Q Position */
N#define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR: Q Mask */
N
N#define xPSR_IT_Pos                        25U                                            /*!< xPSR: IT Position */
N#define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR: IT Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_GE_Pos                        16U                                            /*!< xPSR: GE Position */
N#define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR: GE Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_FPCA_Pos                    2U                                            /*!< CONTROL: FPCA Position */
N#define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONTROL: FPCA Mask */
N
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[8U];                
N        uint32_t RESERVED0[24U];
N  __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[8U];                
N        uint32_t RSERVED1[24U];
N  __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[8U];                
N        uint32_t RESERVED2[24U];
N  __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[8U];                
N        uint32_t RESERVED3[24U];
N  __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
X  volatile uint32_t IABR[8U];                
N        uint32_t RESERVED4[56U];
N  __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240U];                
N        uint32_t RESERVED5[644U];
N  __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
X  volatile  uint32_t STIR;                    
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N  __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12U];                
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N  __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
X  volatile uint32_t CFSR;                    
N  __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
X  volatile uint32_t HFSR;                    
N  __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
X  volatile uint32_t DFSR;                    
N  __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
X  volatile uint32_t MMFAR;                   
N  __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
X  volatile uint32_t BFAR;                    
N  __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
X  volatile uint32_t AFSR;                    
N  __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
X  volatile const  uint32_t PFR[2U];                 
N  __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
X  volatile const  uint32_t DFR;                     
N  __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
X  volatile const  uint32_t ADR;                     
N  __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
X  volatile const  uint32_t MMFR[4U];                
N  __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
X  volatile const  uint32_t ISAR[5U];                
N        uint32_t RESERVED0[5U];
N  __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
X  volatile uint32_t CPACR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Register Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* SCB Hard Fault Status Register Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N  \brief    Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
X  volatile const  uint32_t ICTR;                    
N  __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
X  volatile uint32_t ACTLR;                   
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: DISOOFP Position */
N#define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: DISOOFP Mask */
N
N#define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: DISFPCA Position */
N#define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: DISFPCA Mask */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __OM  union
X  volatile  union
N  {
N    __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
X    volatile  uint8_t    u8;                  
N    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
X    volatile  uint16_t   u16;                 
N    __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
X    volatile  uint32_t   u32;                 
N  }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
N        uint32_t RESERVED0[864U];
N  __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
X  volatile uint32_t TER;                     
N        uint32_t RESERVED1[15U];
N  __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
X  volatile uint32_t TPR;                     
N        uint32_t RESERVED2[15U];
N  __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
X  volatile uint32_t TCR;                     
N        uint32_t RESERVED3[29U];
N  __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
X  volatile  uint32_t IWR;                     
N  __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
X  volatile const  uint32_t IRR;                     
N  __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                    
N        uint32_t RESERVED4[43U];
N  __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
X  volatile  uint32_t LAR;                     
N  __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
X  volatile const  uint32_t LSR;                     
N        uint32_t RESERVED5[6U];
N  __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                    
N  __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                    
N  __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                    
N  __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                    
N  __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                    
N  __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                    
N  __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                    
N  __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                    
N  __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                    
N  __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                    
N  __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                    
N  __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                    
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1U                                            /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0U                                            /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
X  volatile uint32_t CYCCNT;                  
N  __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
X  volatile uint32_t CPICNT;                  
N  __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
X  volatile uint32_t EXCCNT;                  
N  __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
X  volatile uint32_t SLEEPCNT;                
N  __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
X  volatile uint32_t LSUCNT;                  
N  __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
X  volatile uint32_t FOLDCNT;                 
N  __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
X  volatile const  uint32_t PCSR;                    
N  __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
X  volatile uint32_t COMP0;                   
N  __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
X  volatile uint32_t MASK0;                   
N  __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
X  volatile uint32_t FUNCTION0;               
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
X  volatile uint32_t COMP1;                   
N  __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
X  volatile uint32_t MASK1;                   
N  __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
X  volatile uint32_t FUNCTION1;               
N        uint32_t RESERVED1[1U];
N  __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
X  volatile uint32_t COMP2;                   
N  __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
X  volatile uint32_t MASK2;                   
N  __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
X  volatile uint32_t FUNCTION2;               
N        uint32_t RESERVED2[1U];
N  __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
X  volatile uint32_t COMP3;                   
N  __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
X  volatile uint32_t MASK3;                   
N  __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
X  volatile uint32_t FUNCTION3;               
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N  \brief    Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
X  volatile uint32_t SSPSR;                   
N  __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                   
N        uint32_t RESERVED0[2U];
N  __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                    
N        uint32_t RESERVED1[55U];
N  __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                    
N        uint32_t RESERVED2[131U];
N  __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                    
N  __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                    
N  __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                    
N        uint32_t RESERVED3[759U];
N  __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                 
N  __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                   
N  __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;               
N        uint32_t RESERVED4[1U];
N  __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;               
N  __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                   
N  __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                  
N        uint32_t RESERVED5[39U];
N  __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                
N  __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                
N        uint32_t RESERVED7[8U];
N  __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                   
N  __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                 
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N#define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEVTYPE: SubType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N  \brief    Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
X  volatile const  uint32_t TYPE;                    
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
X  volatile uint32_t RNR;                     
N  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
X  volatile uint32_t RBAR;                    
N  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
X  volatile uint32_t RASR;                    
N  __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
X  volatile uint32_t RBAR_A1;                 
N  __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                 
N  __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
X  volatile uint32_t RBAR_A2;                 
N  __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                 
N  __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
X  volatile uint32_t RBAR_A3;                 
N  __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                 
N} MPU_Type;
N
N/* MPU Type Register Definitions */
N#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register Definitions */
N#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register Definitions */
N#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register Definitions */
N#define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register Definitions */
N#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N#if (__FPU_PRESENT == 1U)
X#if (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_FPU     Floating Point Unit (FPU)
N  \brief    Type definitions for the Floating Point Unit (FPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Floating Point Unit (FPU).
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register */
X  volatile uint32_t FPCCR;                   
N  __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register */
X  volatile uint32_t FPCAR;                   
N  __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register */
X  volatile uint32_t FPDSCR;                  
N  __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 */
X  volatile const  uint32_t MVFR0;                   
N  __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 */
X  volatile const  uint32_t MVFR1;                   
N} FPU_Type;
N
N/* Floating-Point Context Control Register Definitions */
N#define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCCR: ASPEN bit Position */
N#define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCCR: ASPEN bit Mask */
N
N#define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCCR: LSPEN Position */
N#define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCCR: LSPEN bit Mask */
N
N#define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCCR: MONRDY Position */
N#define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCCR: MONRDY bit Mask */
N
N#define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCCR: BFRDY Position */
N#define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCCR: BFRDY bit Mask */
N
N#define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCCR: MMRDY Position */
N#define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCCR: MMRDY bit Mask */
N
N#define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCCR: HFRDY Position */
N#define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCCR: HFRDY bit Mask */
N
N#define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCCR: processor mode bit Position */
N#define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCCR: processor mode active bit Mask */
N
N#define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCCR: privilege level bit Position */
N#define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCCR: privilege level bit Mask */
N
N#define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCCR: Lazy state preservation active bit Position */
N#define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCCR: Lazy state preservation active bit Mask */
N
N/* Floating-Point Context Address Register Definitions */
N#define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCAR: ADDRESS bit Position */
N#define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCAR: ADDRESS bit Mask */
N
N/* Floating-Point Default Status Control Register Definitions */
N#define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDSCR: AHP bit Position */
N#define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDSCR: AHP bit Mask */
N
N#define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDSCR: DN bit Position */
N#define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDSCR: DN bit Mask */
N
N#define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDSCR: FZ bit Position */
N#define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDSCR: FZ bit Mask */
N
N#define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDSCR: RMode bit Position */
N#define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDSCR: RMode bit Mask */
N
N/* Media and FP Feature Register 0 Definitions */
N#define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR0: FP rounding modes bits Position */
N#define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR0: FP rounding modes bits Mask */
N
N#define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR0: Short vectors bits Position */
N#define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR0: Short vectors bits Mask */
N
N#define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR0: Square root bits Position */
N#define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR0: Square root bits Mask */
N
N#define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR0: Divide bits Position */
N#define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR0: Divide bits Mask */
N
N#define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR0: FP exception trapping bits Position */
N#define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR0: FP exception trapping bits Mask */
N
N#define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR0: Double-precision bits Position */
N#define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR0: Double-precision bits Mask */
N
N#define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR0: Single-precision bits Position */
N#define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR0: Single-precision bits Mask */
N
N#define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR0: A_SIMD registers bits Position */
N#define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR0: A_SIMD registers bits Mask */
N
N/* Media and FP Feature Register 1 Definitions */
N#define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR1: FP fused MAC bits Position */
N#define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR1: FP fused MAC bits Mask */
N
N#define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR1: FP HPFP bits Position */
N#define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR1: FP HPFP bits Mask */
N
N#define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR1: D_NaN mode bits Position */
N#define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR1: D_NaN mode bits Mask */
N
N#define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR1: FtZ mode bits Position */
N#define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR1: FtZ mode bits Mask */
N
N/*@} end of group CMSIS_FPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Type definitions for the Core Debug Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
X  volatile uint32_t DHCSR;                   
N  __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
X  volatile  uint32_t DCRSR;                   
N  __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
X  volatile uint32_t DCRDR;                   
N  __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                   
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register Definitions */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register Definitions */
N#define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register Definitions */
N#define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M4 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct */
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N#if (__FPU_PRESENT == 1U)
X#if (1 == 1U)
N  #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
N  #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N/**
N  \brief   Set Priority Grouping
N  \details Sets the priority grouping field using the required unlock sequence.
N           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N           Only values from 0..7 are used.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
X  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));  
N  reg_value  =  (reg_value                                   |
N                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FAUL << 16U) |
N                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/**
N  \brief   Get Priority Grouping
N  \details Reads the priority grouping field from the NVIC Interrupt Controller.
N  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
X  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
N}
N
N
N/**
N  \brief   Enable External Interrupt
N  \details Enables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Disable External Interrupt
N  \details Disables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of an external interrupt.
N  \param [in]      IRQn  Interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of an external interrupt.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Active Interrupt
N  \details Reads the active register in NVIC and returns the active bit.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not active.
N  \return             1  Interrupt status is active.
N */
N__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of an interrupt.
N  \note    The priority cannot be set for every core interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) < 0)
N  {
N    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N  else
N  {
N    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of an interrupt.
N           The interrupt number can be positive to specify an external (device specific) interrupt,
N           or negative to specify an internal (core) interrupt.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) < 0)
N  {
N    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
N  }
N  else
N  {
N    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - 3)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = (uint32_t)((0x5FAUL << 16U)    |
N                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
N                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
X                            (1UL << 2U)    );          
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0U)
X#if (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_core_DebugFunctions ITM Functions
N  \brief    Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                    /*!< External variable to receive characters. */
N#define                 ITM_RXBUFFER_EMPTY   0x5AA55AA5U /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/**
N  \brief   ITM Send Character
N  \details Transmits a character via the ITM channel 0, and
N           \li Just returns when no debugger is connected that has booked the output.
N           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N  \param [in]     ch  Character to transmit.
N  \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
X  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&       
N      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
X      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL               ) != 0UL)   )      
N  {
N    while (ITM->PORT[0U].u32 == 0UL)
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
N    {
N      __NOP();
X      __nop();
N    }
N    ITM->PORT[0U].u8 = (uint8_t)ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
N  }
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Receive Character
N  \details Inputs a character via the external variable \ref ITM_RxBuffer.
N  \return             Received character.
N  \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void)
Xstatic __inline int32_t ITM_ReceiveChar (void)
N{
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer != 0x5AA55AA5U)
N  {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = 0x5AA55AA5U;        
N  }
N
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Check Character
N  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N  \return          0  No character available.
N  \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void)
Xstatic __inline int32_t ITM_CheckChar (void)
N{
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer == 0x5AA55AA5U)
N  {
N    return (0);                              /* no character available */
N  }
N  else
N  {
N    return (1);                              /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 138 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52.h" 2
N#include "system_nrf52.h"                           /*!< nrf52 System                                                          */
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\system_nrf52.h" 1
N/* Copyright (c) 2012 ARM LIMITED
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of ARM nor the names of its contributors may be used to
N *     endorse or promote products derived from this software without specific
N *     prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef SYSTEM_NRF52_H
N#define SYSTEM_NRF52_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N
Nextern uint32_t SystemCoreClock;    /*!< System Clock Frequency (Core Clock)  */
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemCoreClock variable.
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock 
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* SYSTEM_NRF52_H */
L 139 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52.h" 2
N
N
N/* ================================================================================ */
N/* ================       Device Specific Peripheral Section       ================ */
N/* ================================================================================ */
N
N
N/** @addtogroup Device_Peripheral_Registers
N  * @{
N  */
N
N
N/* -------------------  Start of section using anonymous unions  ------------------ */
N#if defined(__CC_ARM)
X#if 1L
N  #pragma push
N  #pragma anon_unions
N#elif defined(__ICCARM__)
S  #pragma language=extended
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S/* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning 586
S#else
S  #warning Not supported compiler type
N#endif
N
N
Ntypedef struct {
N  __I  uint32_t  PART;                              /*!< Part code                                                             */
X  volatile const  uint32_t  PART;                               
N  __I  uint32_t  VARIANT;                           /*!< Part Variant, Hardware version and Production configuration           */
X  volatile const  uint32_t  VARIANT;                            
N  __I  uint32_t  PACKAGE;                           /*!< Package option                                                        */
X  volatile const  uint32_t  PACKAGE;                            
N  __I  uint32_t  RAM;                               /*!< RAM variant                                                           */
X  volatile const  uint32_t  RAM;                                
N  __I  uint32_t  FLASH;                             /*!< Flash variant                                                         */
X  volatile const  uint32_t  FLASH;                              
N  __IO uint32_t  UNUSED0[3];                        /*!< Description collection[0]: Unspecified                                */
X  volatile uint32_t  UNUSED0[3];                         
N} FICR_INFO_Type;
N
Ntypedef struct {
N  __I  uint32_t  A0;                                /*!< Slope definition A0.                                                  */
X  volatile const  uint32_t  A0;                                 
N  __I  uint32_t  A1;                                /*!< Slope definition A1.                                                  */
X  volatile const  uint32_t  A1;                                 
N  __I  uint32_t  A2;                                /*!< Slope definition A2.                                                  */
X  volatile const  uint32_t  A2;                                 
N  __I  uint32_t  A3;                                /*!< Slope definition A3.                                                  */
X  volatile const  uint32_t  A3;                                 
N  __I  uint32_t  A4;                                /*!< Slope definition A4.                                                  */
X  volatile const  uint32_t  A4;                                 
N  __I  uint32_t  A5;                                /*!< Slope definition A5.                                                  */
X  volatile const  uint32_t  A5;                                 
N  __I  uint32_t  B0;                                /*!< y-intercept B0.                                                       */
X  volatile const  uint32_t  B0;                                 
N  __I  uint32_t  B1;                                /*!< y-intercept B1.                                                       */
X  volatile const  uint32_t  B1;                                 
N  __I  uint32_t  B2;                                /*!< y-intercept B2.                                                       */
X  volatile const  uint32_t  B2;                                 
N  __I  uint32_t  B3;                                /*!< y-intercept B3.                                                       */
X  volatile const  uint32_t  B3;                                 
N  __I  uint32_t  B4;                                /*!< y-intercept B4.                                                       */
X  volatile const  uint32_t  B4;                                 
N  __I  uint32_t  B5;                                /*!< y-intercept B5.                                                       */
X  volatile const  uint32_t  B5;                                 
N  __I  uint32_t  T0;                                /*!< Segment end T0.                                                       */
X  volatile const  uint32_t  T0;                                 
N  __I  uint32_t  T1;                                /*!< Segment end T1.                                                       */
X  volatile const  uint32_t  T1;                                 
N  __I  uint32_t  T2;                                /*!< Segment end T2.                                                       */
X  volatile const  uint32_t  T2;                                 
N  __I  uint32_t  T3;                                /*!< Segment end T3.                                                       */
X  volatile const  uint32_t  T3;                                 
N  __I  uint32_t  T4;                                /*!< Segment end T4.                                                       */
X  volatile const  uint32_t  T4;                                 
N} FICR_TEMP_Type;
N
Ntypedef struct {
N  __I  uint32_t  TAGHEADER0;                        /*!< Default header for NFC Tag. Software can read these values to
X  volatile const  uint32_t  TAGHEADER0;                        
N                                                         populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.            */
N  __I  uint32_t  TAGHEADER1;                        /*!< Default header for NFC Tag. Software can read these values to
X  volatile const  uint32_t  TAGHEADER1;                        
N                                                         populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.            */
N  __I  uint32_t  TAGHEADER2;                        /*!< Default header for NFC Tag. Software can read these values to
X  volatile const  uint32_t  TAGHEADER2;                        
N                                                         populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.            */
N  __I  uint32_t  TAGHEADER3;                        /*!< Default header for NFC Tag. Software can read these values to
X  volatile const  uint32_t  TAGHEADER3;                        
N                                                         populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST.            */
N} FICR_NFC_Type;
N
Ntypedef struct {
N  __IO uint32_t  POWER;                             /*!< Description cluster[0]: RAM0 power control register                   */
X  volatile uint32_t  POWER;                              
N  __O  uint32_t  POWERSET;                          /*!< Description cluster[0]: RAM0 power control set register               */
X  volatile  uint32_t  POWERSET;                           
N  __O  uint32_t  POWERCLR;                          /*!< Description cluster[0]: RAM0 power control clear register             */
X  volatile  uint32_t  POWERCLR;                           
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N} POWER_RAM_Type;
N
Ntypedef struct {
N  __IO uint32_t  RTS;                               /*!< Pin select for RTS signal                                             */
X  volatile uint32_t  RTS;                                
N  __IO uint32_t  TXD;                               /*!< Pin select for TXD signal                                             */
X  volatile uint32_t  TXD;                                
N  __IO uint32_t  CTS;                               /*!< Pin select for CTS signal                                             */
X  volatile uint32_t  CTS;                                
N  __IO uint32_t  RXD;                               /*!< Pin select for RXD signal                                             */
X  volatile uint32_t  RXD;                                
N} UARTE_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in receive buffer                             */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N} UARTE_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in transmit buffer                            */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N} UARTE_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  SCK;                               /*!< Pin select for SCK                                                    */
X  volatile uint32_t  SCK;                                
N  __IO uint32_t  MOSI;                              /*!< Pin select for MOSI signal                                            */
X  volatile uint32_t  MOSI;                               
N  __IO uint32_t  MISO;                              /*!< Pin select for MISO signal                                            */
X  volatile uint32_t  MISO;                               
N} SPIM_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in receive buffer                             */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N  __IO uint32_t  LIST;                              /*!< EasyDMA list type                                                     */
X  volatile uint32_t  LIST;                               
N} SPIM_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in transmit buffer                            */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N  __IO uint32_t  LIST;                              /*!< EasyDMA list type                                                     */
X  volatile uint32_t  LIST;                               
N} SPIM_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  SCK;                               /*!< Pin select for SCK                                                    */
X  volatile uint32_t  SCK;                                
N  __IO uint32_t  MISO;                              /*!< Pin select for MISO signal                                            */
X  volatile uint32_t  MISO;                               
N  __IO uint32_t  MOSI;                              /*!< Pin select for MOSI signal                                            */
X  volatile uint32_t  MOSI;                               
N  __IO uint32_t  CSN;                               /*!< Pin select for CSN signal                                             */
X  volatile uint32_t  CSN;                                
N} SPIS_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< RXD data pointer                                                      */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in receive buffer                             */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes received in last granted transaction                  */
X  volatile const  uint32_t  AMOUNT;                             
N} SPIS_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< TXD data pointer                                                      */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in transmit buffer                            */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transmitted in last granted transaction               */
X  volatile const  uint32_t  AMOUNT;                             
N} SPIS_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  SCL;                               /*!< Pin select for SCL signal                                             */
X  volatile uint32_t  SCL;                                
N  __IO uint32_t  SDA;                               /*!< Pin select for SDA signal                                             */
X  volatile uint32_t  SDA;                                
N} TWIM_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in receive buffer                             */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N  __IO uint32_t  LIST;                              /*!< EasyDMA list type                                                     */
X  volatile uint32_t  LIST;                               
N} TWIM_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in transmit buffer                            */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last transaction                   */
X  volatile const  uint32_t  AMOUNT;                             
N  __IO uint32_t  LIST;                              /*!< EasyDMA list type                                                     */
X  volatile uint32_t  LIST;                               
N} TWIM_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  SCL;                               /*!< Pin select for SCL signal                                             */
X  volatile uint32_t  SCL;                                
N  __IO uint32_t  SDA;                               /*!< Pin select for SDA signal                                             */
X  volatile uint32_t  SDA;                                
N} TWIS_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< RXD Data pointer                                                      */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in RXD buffer                                 */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last RXD transaction               */
X  volatile const  uint32_t  AMOUNT;                             
N} TWIS_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< TXD Data pointer                                                      */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of bytes in TXD buffer                                 */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of bytes transferred in the last TXD transaction               */
X  volatile const  uint32_t  AMOUNT;                             
N} TWIS_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  SCK;                               /*!< Pin select for SCK                                                    */
X  volatile uint32_t  SCK;                                
N  __IO uint32_t  MOSI;                              /*!< Pin select for MOSI                                                   */
X  volatile uint32_t  MOSI;                               
N  __IO uint32_t  MISO;                              /*!< Pin select for MISO                                                   */
X  volatile uint32_t  MISO;                               
N} SPI_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  RX;                                /*!< Result of last incoming frames                                        */
X  volatile uint32_t  RX;                                 
N} NFCT_FRAMESTATUS_Type;
N
Ntypedef struct {
N  __IO uint32_t  FRAMECONFIG;                       /*!< Configuration of outgoing frames                                      */
X  volatile uint32_t  FRAMECONFIG;                        
N  __IO uint32_t  AMOUNT;                            /*!< Size of outgoing frame                                                */
X  volatile uint32_t  AMOUNT;                             
N} NFCT_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  FRAMECONFIG;                       /*!< Configuration of incoming frames                                      */
X  volatile uint32_t  FRAMECONFIG;                        
N  __I  uint32_t  AMOUNT;                            /*!< Size of last incoming frame                                           */
X  volatile const  uint32_t  AMOUNT;                             
N} NFCT_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  LIMITH;                            /*!< Description cluster[0]: Last results is equal or above CH[0].LIMIT.HIGH */
X  volatile uint32_t  LIMITH;                             
N  __IO uint32_t  LIMITL;                            /*!< Description cluster[0]: Last results is equal or below CH[0].LIMIT.LOW */
X  volatile uint32_t  LIMITL;                             
N} SAADC_EVENTS_CH_Type;
N
Ntypedef struct {
N  __IO uint32_t  PSELP;                             /*!< Description cluster[0]: Input positive pin selection for CH[0]        */
X  volatile uint32_t  PSELP;                              
N  __IO uint32_t  PSELN;                             /*!< Description cluster[0]: Input negative pin selection for CH[0]        */
X  volatile uint32_t  PSELN;                              
N  __IO uint32_t  CONFIG;                            /*!< Description cluster[0]: Input configuration for CH[0]                 */
X  volatile uint32_t  CONFIG;                             
N  __IO uint32_t  LIMIT;                             /*!< Description cluster[0]: High/low limits for event monitoring
X  volatile uint32_t  LIMIT;                             
N                                                         a channel                                                             */
N} SAADC_CH_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Data pointer                                                          */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Maximum number of buffer words to transfer                            */
X  volatile uint32_t  MAXCNT;                             
N  __I  uint32_t  AMOUNT;                            /*!< Number of buffer words transferred since last START                   */
X  volatile const  uint32_t  AMOUNT;                             
N} SAADC_RESULT_Type;
N
Ntypedef struct {
N  __IO uint32_t  LED;                               /*!< Pin select for LED signal                                             */
X  volatile uint32_t  LED;                                
N  __IO uint32_t  A;                                 /*!< Pin select for A signal                                               */
X  volatile uint32_t  A;                                  
N  __IO uint32_t  B;                                 /*!< Pin select for B signal                                               */
X  volatile uint32_t  B;                                  
N} QDEC_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Description cluster[0]: Beginning address in Data RAM of this
X  volatile uint32_t  PTR;                               
N                                                         sequence                                                              */
N  __IO uint32_t  CNT;                               /*!< Description cluster[0]: Amount of values (duty cycles) in this
X  volatile uint32_t  CNT;                               
N                                                         sequence                                                              */
N  __IO uint32_t  REFRESH;                           /*!< Description cluster[0]: Amount of additional PWM periods between
X  volatile uint32_t  REFRESH;                           
N                                                         samples loaded into compare register                                  */
N  __IO uint32_t  ENDDELAY;                          /*!< Description cluster[0]: Time added after the sequence                 */
X  volatile uint32_t  ENDDELAY;                           
N  __I  uint32_t  RESERVED1[4];
X  volatile const  uint32_t  RESERVED1[4];
N} PWM_SEQ_Type;
N
Ntypedef struct {
N  __IO uint32_t  OUT[4];                            /*!< Description collection[0]: Output pin select for PWM channel
X  volatile uint32_t  OUT[4];                            
N                                                         0                                                                     */
N} PWM_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  CLK;                               /*!< Pin number configuration for PDM CLK signal                           */
X  volatile uint32_t  CLK;                                
N  __IO uint32_t  DIN;                               /*!< Pin number configuration for PDM DIN signal                           */
X  volatile uint32_t  DIN;                                
N} PDM_PSEL_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< RAM address pointer to write samples to with EasyDMA                  */
X  volatile uint32_t  PTR;                                
N  __IO uint32_t  MAXCNT;                            /*!< Number of samples to allocate memory for in EasyDMA mode              */
X  volatile uint32_t  MAXCNT;                             
N} PDM_SAMPLE_Type;
N
Ntypedef struct {
N  __O  uint32_t  EN;                                /*!< Description cluster[0]: Enable channel group 0                        */
X  volatile  uint32_t  EN;                                 
N  __O  uint32_t  DIS;                               /*!< Description cluster[0]: Disable channel group 0                       */
X  volatile  uint32_t  DIS;                                
N} PPI_TASKS_CHG_Type;
N
Ntypedef struct {
N  __IO uint32_t  EEP;                               /*!< Description cluster[0]: Channel 0 event end-point                     */
X  volatile uint32_t  EEP;                                
N  __IO uint32_t  TEP;                               /*!< Description cluster[0]: Channel 0 task end-point                      */
X  volatile uint32_t  TEP;                                
N} PPI_CH_Type;
N
Ntypedef struct {
N  __IO uint32_t  TEP;                               /*!< Description cluster[0]: Channel 0 task end-point                      */
X  volatile uint32_t  TEP;                                
N} PPI_FORK_Type;
N
Ntypedef struct {
N  __IO uint32_t  WA;                                /*!< Description cluster[0]: Write access to region 0 detected             */
X  volatile uint32_t  WA;                                 
N  __IO uint32_t  RA;                                /*!< Description cluster[0]: Read access to region 0 detected              */
X  volatile uint32_t  RA;                                 
N} MWU_EVENTS_REGION_Type;
N
Ntypedef struct {
N  __IO uint32_t  WA;                                /*!< Description cluster[0]: Write access to peripheral region 0
X  volatile uint32_t  WA;                                
N                                                         detected                                                              */
N  __IO uint32_t  RA;                                /*!< Description cluster[0]: Read access to peripheral region 0 detected   */
X  volatile uint32_t  RA;                                 
N} MWU_EVENTS_PREGION_Type;
N
Ntypedef struct {
N  __IO uint32_t  SUBSTATWA;                         /*!< Description cluster[0]: Source of event/interrupt in region
X  volatile uint32_t  SUBSTATWA;                         
N                                                         0, write access detected while corresponding subregion was enabled
N                                                          for watching                                                         */
N  __IO uint32_t  SUBSTATRA;                         /*!< Description cluster[0]: Source of event/interrupt in region
X  volatile uint32_t  SUBSTATRA;                         
N                                                         0, read access detected while corresponding subregion was enabled
N                                                          for watching                                                         */
N} MWU_PERREGION_Type;
N
Ntypedef struct {
N  __IO uint32_t  START;                             /*!< Description cluster[0]: Start address for region 0                    */
X  volatile uint32_t  START;                              
N  __IO uint32_t  END;                               /*!< Description cluster[0]: End address of region 0                       */
X  volatile uint32_t  END;                                
N  __I  uint32_t  RESERVED2[2];
X  volatile const  uint32_t  RESERVED2[2];
N} MWU_REGION_Type;
N
Ntypedef struct {
N  __I  uint32_t  START;                             /*!< Description cluster[0]: Reserved for future use                       */
X  volatile const  uint32_t  START;                              
N  __I  uint32_t  END;                               /*!< Description cluster[0]: Reserved for future use                       */
X  volatile const  uint32_t  END;                                
N  __IO uint32_t  SUBS;                              /*!< Description cluster[0]: Subregions of region 0                        */
X  volatile uint32_t  SUBS;                               
N  __I  uint32_t  RESERVED3;
X  volatile const  uint32_t  RESERVED3;
N} MWU_PREGION_Type;
N
Ntypedef struct {
N  __IO uint32_t  MODE;                              /*!< I2S mode.                                                             */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  RXEN;                              /*!< Reception (RX) enable.                                                */
X  volatile uint32_t  RXEN;                               
N  __IO uint32_t  TXEN;                              /*!< Transmission (TX) enable.                                             */
X  volatile uint32_t  TXEN;                               
N  __IO uint32_t  MCKEN;                             /*!< Master clock generator enable.                                        */
X  volatile uint32_t  MCKEN;                              
N  __IO uint32_t  MCKFREQ;                           /*!< Master clock generator frequency.                                     */
X  volatile uint32_t  MCKFREQ;                            
N  __IO uint32_t  RATIO;                             /*!< MCK / LRCK ratio.                                                     */
X  volatile uint32_t  RATIO;                              
N  __IO uint32_t  SWIDTH;                            /*!< Sample width.                                                         */
X  volatile uint32_t  SWIDTH;                             
N  __IO uint32_t  ALIGN;                             /*!< Alignment of sample within a frame.                                   */
X  volatile uint32_t  ALIGN;                              
N  __IO uint32_t  FORMAT;                            /*!< Frame format.                                                         */
X  volatile uint32_t  FORMAT;                             
N  __IO uint32_t  CHANNELS;                          /*!< Enable channels.                                                      */
X  volatile uint32_t  CHANNELS;                           
N} I2S_CONFIG_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Receive buffer RAM start address.                                     */
X  volatile uint32_t  PTR;                                
N} I2S_RXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  PTR;                               /*!< Transmit buffer RAM start address.                                    */
X  volatile uint32_t  PTR;                                
N} I2S_TXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  MAXCNT;                            /*!< Size of RXD and TXD buffers.                                          */
X  volatile uint32_t  MAXCNT;                             
N} I2S_RXTXD_Type;
N
Ntypedef struct {
N  __IO uint32_t  MCK;                               /*!< Pin select for MCK signal.                                            */
X  volatile uint32_t  MCK;                                
N  __IO uint32_t  SCK;                               /*!< Pin select for SCK signal.                                            */
X  volatile uint32_t  SCK;                                
N  __IO uint32_t  LRCK;                              /*!< Pin select for LRCK signal.                                           */
X  volatile uint32_t  LRCK;                               
N  __IO uint32_t  SDIN;                              /*!< Pin select for SDIN signal.                                           */
X  volatile uint32_t  SDIN;                               
N  __IO uint32_t  SDOUT;                             /*!< Pin select for SDOUT signal.                                          */
X  volatile uint32_t  SDOUT;                              
N} I2S_PSEL_Type;
N
N
N/* ================================================================================ */
N/* ================                      FICR                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Factory Information Configuration Registers (FICR)
N  */
N
Ntypedef struct {                                    /*!< FICR Structure                                                        */
N  __I  uint32_t  RESERVED0[4];
X  volatile const  uint32_t  RESERVED0[4];
N  __I  uint32_t  CODEPAGESIZE;                      /*!< Code memory page size                                                 */
X  volatile const  uint32_t  CODEPAGESIZE;                       
N  __I  uint32_t  CODESIZE;                          /*!< Code memory size                                                      */
X  volatile const  uint32_t  CODESIZE;                           
N  __I  uint32_t  RESERVED1[18];
X  volatile const  uint32_t  RESERVED1[18];
N  __I  uint32_t  DEVICEID[2];                       /*!< Description collection[0]: Device identifier                          */
X  volatile const  uint32_t  DEVICEID[2];                        
N  __I  uint32_t  RESERVED2[6];
X  volatile const  uint32_t  RESERVED2[6];
N  __I  uint32_t  ER[4];                             /*!< Description collection[0]: Encryption Root, word 0                    */
X  volatile const  uint32_t  ER[4];                              
N  __I  uint32_t  IR[4];                             /*!< Description collection[0]: Identity Root, word 0                      */
X  volatile const  uint32_t  IR[4];                              
N  __I  uint32_t  DEVICEADDRTYPE;                    /*!< Device address type                                                   */
X  volatile const  uint32_t  DEVICEADDRTYPE;                     
N  __I  uint32_t  DEVICEADDR[2];                     /*!< Description collection[0]: Device address 0                           */
X  volatile const  uint32_t  DEVICEADDR[2];                      
N  __I  uint32_t  RESERVED3[21];
X  volatile const  uint32_t  RESERVED3[21];
N  FICR_INFO_Type INFO;                              /*!< Device info                                                           */
N  __I  uint32_t  RESERVED4[185];
X  volatile const  uint32_t  RESERVED4[185];
N  FICR_TEMP_Type TEMP;                              /*!< Registers storing factory TEMP module linearization coefficients      */
N  __I  uint32_t  RESERVED5[2];
X  volatile const  uint32_t  RESERVED5[2];
N  FICR_NFC_Type NFC;                                /*!< Unspecified                                                           */
N} NRF_FICR_Type;
N
N
N/* ================================================================================ */
N/* ================                      UICR                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief User Information Configuration Registers (UICR)
N  */
N
Ntypedef struct {                                    /*!< UICR Structure                                                        */
N  __IO uint32_t  UNUSED0;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED0;                            
N  __IO uint32_t  UNUSED1;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED1;                            
N  __IO uint32_t  UNUSED2;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED2;                            
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N  __IO uint32_t  UNUSED3;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED3;                            
N  __IO uint32_t  NRFFW[15];                         /*!< Description collection[0]: Reserved for Nordic firmware design        */
X  volatile uint32_t  NRFFW[15];                          
N  __IO uint32_t  NRFHW[12];                         /*!< Description collection[0]: Reserved for Nordic hardware design        */
X  volatile uint32_t  NRFHW[12];                          
N  __IO uint32_t  CUSTOMER[32];                      /*!< Description collection[0]: Reserved for customer                      */
X  volatile uint32_t  CUSTOMER[32];                       
N  __I  uint32_t  RESERVED1[64];
X  volatile const  uint32_t  RESERVED1[64];
N  __IO uint32_t  PSELRESET[2];                      /*!< Description collection[0]: Mapping of the nRESET function (see
X  volatile uint32_t  PSELRESET[2];                      
N                                                         POWER chapter for details)                                            */
N  __IO uint32_t  APPROTECT;                         /*!< Access Port protection                                                */
X  volatile uint32_t  APPROTECT;                          
N  __IO uint32_t  NFCPINS;                           /*!< Setting of pins dedicated to NFC functionality: NFC antenna
X  volatile uint32_t  NFCPINS;                           
N                                                         or GPIO                                                               */
N} NRF_UICR_Type;
N
N
N/* ================================================================================ */
N/* ================                      BPROT                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Block Protect (BPROT)
N  */
N
Ntypedef struct {                                    /*!< BPROT Structure                                                       */
N  __I  uint32_t  RESERVED0[384];
X  volatile const  uint32_t  RESERVED0[384];
N  __IO uint32_t  CONFIG0;                           /*!< Block protect configuration register 0                                */
X  volatile uint32_t  CONFIG0;                            
N  __IO uint32_t  CONFIG1;                           /*!< Block protect configuration register 1                                */
X  volatile uint32_t  CONFIG1;                            
N  __IO uint32_t  DISABLEINDEBUG;                    /*!< Disable protection mechanism in debug interface mode                  */
X  volatile uint32_t  DISABLEINDEBUG;                     
N  __IO uint32_t  UNUSED0;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED0;                            
N  __IO uint32_t  CONFIG2;                           /*!< Block protect configuration register 2                                */
X  volatile uint32_t  CONFIG2;                            
N  __IO uint32_t  CONFIG3;                           /*!< Block protect configuration register 3                                */
X  volatile uint32_t  CONFIG3;                            
N} NRF_BPROT_Type;
N
N
N/* ================================================================================ */
N/* ================                      POWER                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Power control (POWER)
N  */
N
Ntypedef struct {                                    /*!< POWER Structure                                                       */
N  __I  uint32_t  RESERVED0[30];
X  volatile const  uint32_t  RESERVED0[30];
N  __O  uint32_t  TASKS_CONSTLAT;                    /*!< Enable constant latency mode                                          */
X  volatile  uint32_t  TASKS_CONSTLAT;                     
N  __O  uint32_t  TASKS_LOWPWR;                      /*!< Enable low power mode (variable latency)                              */
X  volatile  uint32_t  TASKS_LOWPWR;                       
N  __I  uint32_t  RESERVED1[34];
X  volatile const  uint32_t  RESERVED1[34];
N  __IO uint32_t  EVENTS_POFWARN;                    /*!< Power failure warning                                                 */
X  volatile uint32_t  EVENTS_POFWARN;                     
N  __I  uint32_t  RESERVED2[2];
X  volatile const  uint32_t  RESERVED2[2];
N  __IO uint32_t  EVENTS_SLEEPENTER;                 /*!< CPU entered WFI/WFE sleep                                             */
X  volatile uint32_t  EVENTS_SLEEPENTER;                  
N  __IO uint32_t  EVENTS_SLEEPEXIT;                  /*!< CPU exited WFI/WFE sleep                                              */
X  volatile uint32_t  EVENTS_SLEEPEXIT;                   
N  __I  uint32_t  RESERVED3[122];
X  volatile const  uint32_t  RESERVED3[122];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED4[61];
X  volatile const  uint32_t  RESERVED4[61];
N  __IO uint32_t  RESETREAS;                         /*!< Reset reason                                                          */
X  volatile uint32_t  RESETREAS;                          
N  __I  uint32_t  RESERVED5[9];
X  volatile const  uint32_t  RESERVED5[9];
N  __I  uint32_t  RAMSTATUS;                         /*!< Deprecated register - RAM status register                             */
X  volatile const  uint32_t  RAMSTATUS;                          
N  __I  uint32_t  RESERVED6[53];
X  volatile const  uint32_t  RESERVED6[53];
N  __O  uint32_t  SYSTEMOFF;                         /*!< System OFF register                                                   */
X  volatile  uint32_t  SYSTEMOFF;                          
N  __I  uint32_t  RESERVED7[3];
X  volatile const  uint32_t  RESERVED7[3];
N  __IO uint32_t  POFCON;                            /*!< Power failure comparator configuration                                */
X  volatile uint32_t  POFCON;                             
N  __I  uint32_t  RESERVED8[2];
X  volatile const  uint32_t  RESERVED8[2];
N  __IO uint32_t  GPREGRET;                          /*!< General purpose retention register                                    */
X  volatile uint32_t  GPREGRET;                           
N  __IO uint32_t  GPREGRET2;                         /*!< General purpose retention register                                    */
X  volatile uint32_t  GPREGRET2;                          
N  __IO uint32_t  RAMON;                             /*!< Deprecated register - RAM on/off register (this register is
X  volatile uint32_t  RAMON;                             
N                                                         retained)                                                             */
N  __I  uint32_t  RESERVED9[11];
X  volatile const  uint32_t  RESERVED9[11];
N  __IO uint32_t  RAMONB;                            /*!< Deprecated register - RAM on/off register (this register is
X  volatile uint32_t  RAMONB;                            
N                                                         retained)                                                             */
N  __I  uint32_t  RESERVED10[8];
X  volatile const  uint32_t  RESERVED10[8];
N  __IO uint32_t  DCDCEN;                            /*!< DC/DC enable register                                                 */
X  volatile uint32_t  DCDCEN;                             
N  __I  uint32_t  RESERVED11[225];
X  volatile const  uint32_t  RESERVED11[225];
N  POWER_RAM_Type RAM[8];                            /*!< Unspecified                                                           */
N} NRF_POWER_Type;
N
N
N/* ================================================================================ */
N/* ================                      CLOCK                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Clock control (CLOCK)
N  */
N
Ntypedef struct {                                    /*!< CLOCK Structure                                                       */
N  __O  uint32_t  TASKS_HFCLKSTART;                  /*!< Start HFCLK crystal oscillator                                        */
X  volatile  uint32_t  TASKS_HFCLKSTART;                   
N  __O  uint32_t  TASKS_HFCLKSTOP;                   /*!< Stop HFCLK crystal oscillator                                         */
X  volatile  uint32_t  TASKS_HFCLKSTOP;                    
N  __O  uint32_t  TASKS_LFCLKSTART;                  /*!< Start LFCLK source                                                    */
X  volatile  uint32_t  TASKS_LFCLKSTART;                   
N  __O  uint32_t  TASKS_LFCLKSTOP;                   /*!< Stop LFCLK source                                                     */
X  volatile  uint32_t  TASKS_LFCLKSTOP;                    
N  __O  uint32_t  TASKS_CAL;                         /*!< Start calibration of LFRC oscillator                                  */
X  volatile  uint32_t  TASKS_CAL;                          
N  __O  uint32_t  TASKS_CTSTART;                     /*!< Start calibration timer                                               */
X  volatile  uint32_t  TASKS_CTSTART;                      
N  __O  uint32_t  TASKS_CTSTOP;                      /*!< Stop calibration timer                                                */
X  volatile  uint32_t  TASKS_CTSTOP;                       
N  __I  uint32_t  RESERVED0[57];
X  volatile const  uint32_t  RESERVED0[57];
N  __IO uint32_t  EVENTS_HFCLKSTARTED;               /*!< HFCLK oscillator started                                              */
X  volatile uint32_t  EVENTS_HFCLKSTARTED;                
N  __IO uint32_t  EVENTS_LFCLKSTARTED;               /*!< LFCLK started                                                         */
X  volatile uint32_t  EVENTS_LFCLKSTARTED;                
N  __I  uint32_t  RESERVED1;
X  volatile const  uint32_t  RESERVED1;
N  __IO uint32_t  EVENTS_DONE;                       /*!< Calibration of LFCLK RC oscillator complete event                     */
X  volatile uint32_t  EVENTS_DONE;                        
N  __IO uint32_t  EVENTS_CTTO;                       /*!< Calibration timer timeout                                             */
X  volatile uint32_t  EVENTS_CTTO;                        
N  __I  uint32_t  RESERVED2[124];
X  volatile const  uint32_t  RESERVED2[124];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[63];
X  volatile const  uint32_t  RESERVED3[63];
N  __I  uint32_t  HFCLKRUN;                          /*!< Status indicating that HFCLKSTART task has been triggered             */
X  volatile const  uint32_t  HFCLKRUN;                           
N  __I  uint32_t  HFCLKSTAT;                         /*!< HFCLK status                                                          */
X  volatile const  uint32_t  HFCLKSTAT;                          
N  __I  uint32_t  RESERVED4;
X  volatile const  uint32_t  RESERVED4;
N  __I  uint32_t  LFCLKRUN;                          /*!< Status indicating that LFCLKSTART task has been triggered             */
X  volatile const  uint32_t  LFCLKRUN;                           
N  __I  uint32_t  LFCLKSTAT;                         /*!< LFCLK status                                                          */
X  volatile const  uint32_t  LFCLKSTAT;                          
N  __I  uint32_t  LFCLKSRCCOPY;                      /*!< Copy of LFCLKSRC register, set when LFCLKSTART task was triggered     */
X  volatile const  uint32_t  LFCLKSRCCOPY;                       
N  __I  uint32_t  RESERVED5[62];
X  volatile const  uint32_t  RESERVED5[62];
N  __IO uint32_t  LFCLKSRC;                          /*!< Clock source for the LFCLK                                            */
X  volatile uint32_t  LFCLKSRC;                           
N  __I  uint32_t  RESERVED6[7];
X  volatile const  uint32_t  RESERVED6[7];
N  __IO uint32_t  CTIV;                              /*!< Calibration timer interval                                            */
X  volatile uint32_t  CTIV;                               
N  __I  uint32_t  RESERVED7[8];
X  volatile const  uint32_t  RESERVED7[8];
N  __IO uint32_t  TRACECONFIG;                       /*!< Clocking options for the Trace Port debug interface                   */
X  volatile uint32_t  TRACECONFIG;                        
N} NRF_CLOCK_Type;
N
N
N/* ================================================================================ */
N/* ================                      RADIO                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief 2.4 GHz Radio (RADIO)
N  */
N
Ntypedef struct {                                    /*!< RADIO Structure                                                       */
N  __O  uint32_t  TASKS_TXEN;                        /*!< Enable RADIO in TX mode                                               */
X  volatile  uint32_t  TASKS_TXEN;                         
N  __O  uint32_t  TASKS_RXEN;                        /*!< Enable RADIO in RX mode                                               */
X  volatile  uint32_t  TASKS_RXEN;                         
N  __O  uint32_t  TASKS_START;                       /*!< Start RADIO                                                           */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop RADIO                                                            */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_DISABLE;                     /*!< Disable RADIO                                                         */
X  volatile  uint32_t  TASKS_DISABLE;                      
N  __O  uint32_t  TASKS_RSSISTART;                   /*!< Start the RSSI and take one single sample of the receive signal
X  volatile  uint32_t  TASKS_RSSISTART;                   
N                                                         strength.                                                             */
N  __O  uint32_t  TASKS_RSSISTOP;                    /*!< Stop the RSSI measurement                                             */
X  volatile  uint32_t  TASKS_RSSISTOP;                     
N  __O  uint32_t  TASKS_BCSTART;                     /*!< Start the bit counter                                                 */
X  volatile  uint32_t  TASKS_BCSTART;                      
N  __O  uint32_t  TASKS_BCSTOP;                      /*!< Stop the bit counter                                                  */
X  volatile  uint32_t  TASKS_BCSTOP;                       
N  __I  uint32_t  RESERVED0[55];
X  volatile const  uint32_t  RESERVED0[55];
N  __IO uint32_t  EVENTS_READY;                      /*!< RADIO has ramped up and is ready to be started                        */
X  volatile uint32_t  EVENTS_READY;                       
N  __IO uint32_t  EVENTS_ADDRESS;                    /*!< Address sent or received                                              */
X  volatile uint32_t  EVENTS_ADDRESS;                     
N  __IO uint32_t  EVENTS_PAYLOAD;                    /*!< Packet payload sent or received                                       */
X  volatile uint32_t  EVENTS_PAYLOAD;                     
N  __IO uint32_t  EVENTS_END;                        /*!< Packet sent or received                                               */
X  volatile uint32_t  EVENTS_END;                         
N  __IO uint32_t  EVENTS_DISABLED;                   /*!< RADIO has been disabled                                               */
X  volatile uint32_t  EVENTS_DISABLED;                    
N  __IO uint32_t  EVENTS_DEVMATCH;                   /*!< A device address match occurred on the last received packet           */
X  volatile uint32_t  EVENTS_DEVMATCH;                    
N  __IO uint32_t  EVENTS_DEVMISS;                    /*!< No device address match occurred on the last received packet          */
X  volatile uint32_t  EVENTS_DEVMISS;                     
N  __IO uint32_t  EVENTS_RSSIEND;                    /*!< Sampling of receive signal strength complete.                         */
X  volatile uint32_t  EVENTS_RSSIEND;                     
N  __I  uint32_t  RESERVED1[2];
X  volatile const  uint32_t  RESERVED1[2];
N  __IO uint32_t  EVENTS_BCMATCH;                    /*!< Bit counter reached bit count value.                                  */
X  volatile uint32_t  EVENTS_BCMATCH;                     
N  __I  uint32_t  RESERVED2;
X  volatile const  uint32_t  RESERVED2;
N  __IO uint32_t  EVENTS_CRCOK;                      /*!< Packet received with CRC ok                                           */
X  volatile uint32_t  EVENTS_CRCOK;                       
N  __IO uint32_t  EVENTS_CRCERROR;                   /*!< Packet received with CRC error                                        */
X  volatile uint32_t  EVENTS_CRCERROR;                    
N  __I  uint32_t  RESERVED3[50];
X  volatile const  uint32_t  RESERVED3[50];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED4[64];
X  volatile const  uint32_t  RESERVED4[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED5[61];
X  volatile const  uint32_t  RESERVED5[61];
N  __I  uint32_t  CRCSTATUS;                         /*!< CRC status                                                            */
X  volatile const  uint32_t  CRCSTATUS;                          
N  __I  uint32_t  RESERVED6;
X  volatile const  uint32_t  RESERVED6;
N  __I  uint32_t  RXMATCH;                           /*!< Received address                                                      */
X  volatile const  uint32_t  RXMATCH;                            
N  __I  uint32_t  RXCRC;                             /*!< CRC field of previously received packet                               */
X  volatile const  uint32_t  RXCRC;                              
N  __I  uint32_t  DAI;                               /*!< Device address match index                                            */
X  volatile const  uint32_t  DAI;                                
N  __I  uint32_t  RESERVED7[60];
X  volatile const  uint32_t  RESERVED7[60];
N  __IO uint32_t  PACKETPTR;                         /*!< Packet pointer                                                        */
X  volatile uint32_t  PACKETPTR;                          
N  __IO uint32_t  FREQUENCY;                         /*!< Frequency                                                             */
X  volatile uint32_t  FREQUENCY;                          
N  __IO uint32_t  TXPOWER;                           /*!< Output power                                                          */
X  volatile uint32_t  TXPOWER;                            
N  __IO uint32_t  MODE;                              /*!< Data rate and modulation                                              */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  PCNF0;                             /*!< Packet configuration register 0                                       */
X  volatile uint32_t  PCNF0;                              
N  __IO uint32_t  PCNF1;                             /*!< Packet configuration register 1                                       */
X  volatile uint32_t  PCNF1;                              
N  __IO uint32_t  BASE0;                             /*!< Base address 0                                                        */
X  volatile uint32_t  BASE0;                              
N  __IO uint32_t  BASE1;                             /*!< Base address 1                                                        */
X  volatile uint32_t  BASE1;                              
N  __IO uint32_t  PREFIX0;                           /*!< Prefixes bytes for logical addresses 0-3                              */
X  volatile uint32_t  PREFIX0;                            
N  __IO uint32_t  PREFIX1;                           /*!< Prefixes bytes for logical addresses 4-7                              */
X  volatile uint32_t  PREFIX1;                            
N  __IO uint32_t  TXADDRESS;                         /*!< Transmit address select                                               */
X  volatile uint32_t  TXADDRESS;                          
N  __IO uint32_t  RXADDRESSES;                       /*!< Receive address select                                                */
X  volatile uint32_t  RXADDRESSES;                        
N  __IO uint32_t  CRCCNF;                            /*!< CRC configuration                                                     */
X  volatile uint32_t  CRCCNF;                             
N  __IO uint32_t  CRCPOLY;                           /*!< CRC polynomial                                                        */
X  volatile uint32_t  CRCPOLY;                            
N  __IO uint32_t  CRCINIT;                           /*!< CRC initial value                                                     */
X  volatile uint32_t  CRCINIT;                            
N  __IO uint32_t  UNUSED0;                           /*!< Unspecified                                                           */
X  volatile uint32_t  UNUSED0;                            
N  __IO uint32_t  TIFS;                              /*!< Inter Frame Spacing in us                                             */
X  volatile uint32_t  TIFS;                               
N  __I  uint32_t  RSSISAMPLE;                        /*!< RSSI sample                                                           */
X  volatile const  uint32_t  RSSISAMPLE;                         
N  __I  uint32_t  RESERVED8;
X  volatile const  uint32_t  RESERVED8;
N  __I  uint32_t  STATE;                             /*!< Current radio state                                                   */
X  volatile const  uint32_t  STATE;                              
N  __IO uint32_t  DATAWHITEIV;                       /*!< Data whitening initial value                                          */
X  volatile uint32_t  DATAWHITEIV;                        
N  __I  uint32_t  RESERVED9[2];
X  volatile const  uint32_t  RESERVED9[2];
N  __IO uint32_t  BCC;                               /*!< Bit counter compare                                                   */
X  volatile uint32_t  BCC;                                
N  __I  uint32_t  RESERVED10[39];
X  volatile const  uint32_t  RESERVED10[39];
N  __IO uint32_t  DAB[8];                            /*!< Description collection[0]: Device address base segment 0              */
X  volatile uint32_t  DAB[8];                             
N  __IO uint32_t  DAP[8];                            /*!< Description collection[0]: Device address prefix 0                    */
X  volatile uint32_t  DAP[8];                             
N  __IO uint32_t  DACNF;                             /*!< Device address match configuration                                    */
X  volatile uint32_t  DACNF;                              
N  __I  uint32_t  RESERVED11[3];
X  volatile const  uint32_t  RESERVED11[3];
N  __IO uint32_t  MODECNF0;                          /*!< Radio mode configuration register 0                                   */
X  volatile uint32_t  MODECNF0;                           
N  __I  uint32_t  RESERVED12[618];
X  volatile const  uint32_t  RESERVED12[618];
N  __IO uint32_t  POWER;                             /*!< Peripheral power control                                              */
X  volatile uint32_t  POWER;                              
N} NRF_RADIO_Type;
N
N
N/* ================================================================================ */
N/* ================                      UARTE                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief UART with EasyDMA (UARTE)
N  */
N
Ntypedef struct {                                    /*!< UARTE Structure                                                       */
N  __O  uint32_t  TASKS_STARTRX;                     /*!< Start UART receiver                                                   */
X  volatile  uint32_t  TASKS_STARTRX;                      
N  __O  uint32_t  TASKS_STOPRX;                      /*!< Stop UART receiver                                                    */
X  volatile  uint32_t  TASKS_STOPRX;                       
N  __O  uint32_t  TASKS_STARTTX;                     /*!< Start UART transmitter                                                */
X  volatile  uint32_t  TASKS_STARTTX;                      
N  __O  uint32_t  TASKS_STOPTX;                      /*!< Stop UART transmitter                                                 */
X  volatile  uint32_t  TASKS_STOPTX;                       
N  __I  uint32_t  RESERVED0[7];
X  volatile const  uint32_t  RESERVED0[7];
N  __O  uint32_t  TASKS_FLUSHRX;                     /*!< Flush RX FIFO into RX buffer                                          */
X  volatile  uint32_t  TASKS_FLUSHRX;                      
N  __I  uint32_t  RESERVED1[52];
X  volatile const  uint32_t  RESERVED1[52];
N  __IO uint32_t  EVENTS_CTS;                        /*!< CTS is activated (set low). Clear To Send.                            */
X  volatile uint32_t  EVENTS_CTS;                         
N  __IO uint32_t  EVENTS_NCTS;                       /*!< CTS is deactivated (set high). Not Clear To Send.                     */
X  volatile uint32_t  EVENTS_NCTS;                        
N  __IO uint32_t  EVENTS_RXDRDY;                     /*!< Data received in RXD (but potentially not yet transferred to
X  volatile uint32_t  EVENTS_RXDRDY;                     
N                                                         Data RAM)                                                             */
N  __I  uint32_t  RESERVED2;
X  volatile const  uint32_t  RESERVED2;
N  __IO uint32_t  EVENTS_ENDRX;                      /*!< Receive buffer is filled up                                           */
X  volatile uint32_t  EVENTS_ENDRX;                       
N  __I  uint32_t  RESERVED3[2];
X  volatile const  uint32_t  RESERVED3[2];
N  __IO uint32_t  EVENTS_TXDRDY;                     /*!< Data sent from TXD                                                    */
X  volatile uint32_t  EVENTS_TXDRDY;                      
N  __IO uint32_t  EVENTS_ENDTX;                      /*!< Last TX byte transmitted                                              */
X  volatile uint32_t  EVENTS_ENDTX;                       
N  __IO uint32_t  EVENTS_ERROR;                      /*!< Error detected                                                        */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED4[7];
X  volatile const  uint32_t  RESERVED4[7];
N  __IO uint32_t  EVENTS_RXTO;                       /*!< Receiver timeout                                                      */
X  volatile uint32_t  EVENTS_RXTO;                        
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  EVENTS_RXSTARTED;                  /*!< UART receiver has started                                             */
X  volatile uint32_t  EVENTS_RXSTARTED;                   
N  __IO uint32_t  EVENTS_TXSTARTED;                  /*!< UART transmitter has started                                          */
X  volatile uint32_t  EVENTS_TXSTARTED;                   
N  __I  uint32_t  RESERVED6;
X  volatile const  uint32_t  RESERVED6;
N  __IO uint32_t  EVENTS_TXSTOPPED;                  /*!< Transmitter stopped                                                   */
X  volatile uint32_t  EVENTS_TXSTOPPED;                   
N  __I  uint32_t  RESERVED7[41];
X  volatile const  uint32_t  RESERVED7[41];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED8[63];
X  volatile const  uint32_t  RESERVED8[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED9[93];
X  volatile const  uint32_t  RESERVED9[93];
N  __IO uint32_t  ERRORSRC;                          /*!< Error source                                                          */
X  volatile uint32_t  ERRORSRC;                           
N  __I  uint32_t  RESERVED10[31];
X  volatile const  uint32_t  RESERVED10[31];
N  __IO uint32_t  ENABLE;                            /*!< Enable UART                                                           */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED11;
X  volatile const  uint32_t  RESERVED11;
N  UARTE_PSEL_Type PSEL;                             /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED12[3];
X  volatile const  uint32_t  RESERVED12[3];
N  __IO uint32_t  BAUDRATE;                          /*!< Baud rate. Accuracy depends on the HFCLK source selected.             */
X  volatile uint32_t  BAUDRATE;                           
N  __I  uint32_t  RESERVED13[3];
X  volatile const  uint32_t  RESERVED13[3];
N  UARTE_RXD_Type RXD;                               /*!< RXD EasyDMA channel                                                   */
N  __I  uint32_t  RESERVED14;
X  volatile const  uint32_t  RESERVED14;
N  UARTE_TXD_Type TXD;                               /*!< TXD EasyDMA channel                                                   */
N  __I  uint32_t  RESERVED15[7];
X  volatile const  uint32_t  RESERVED15[7];
N  __IO uint32_t  CONFIG;                            /*!< Configuration of parity and hardware flow control                     */
X  volatile uint32_t  CONFIG;                             
N} NRF_UARTE_Type;
N
N
N/* ================================================================================ */
N/* ================                      UART                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Universal Asynchronous Receiver/Transmitter (UART)
N  */
N
Ntypedef struct {                                    /*!< UART Structure                                                        */
N  __O  uint32_t  TASKS_STARTRX;                     /*!< Start UART receiver                                                   */
X  volatile  uint32_t  TASKS_STARTRX;                      
N  __O  uint32_t  TASKS_STOPRX;                      /*!< Stop UART receiver                                                    */
X  volatile  uint32_t  TASKS_STOPRX;                       
N  __O  uint32_t  TASKS_STARTTX;                     /*!< Start UART transmitter                                                */
X  volatile  uint32_t  TASKS_STARTTX;                      
N  __O  uint32_t  TASKS_STOPTX;                      /*!< Stop UART transmitter                                                 */
X  volatile  uint32_t  TASKS_STOPTX;                       
N  __I  uint32_t  RESERVED0[3];
X  volatile const  uint32_t  RESERVED0[3];
N  __O  uint32_t  TASKS_SUSPEND;                     /*!< Suspend UART                                                          */
X  volatile  uint32_t  TASKS_SUSPEND;                      
N  __I  uint32_t  RESERVED1[56];
X  volatile const  uint32_t  RESERVED1[56];
N  __IO uint32_t  EVENTS_CTS;                        /*!< CTS is activated (set low). Clear To Send.                            */
X  volatile uint32_t  EVENTS_CTS;                         
N  __IO uint32_t  EVENTS_NCTS;                       /*!< CTS is deactivated (set high). Not Clear To Send.                     */
X  volatile uint32_t  EVENTS_NCTS;                        
N  __IO uint32_t  EVENTS_RXDRDY;                     /*!< Data received in RXD                                                  */
X  volatile uint32_t  EVENTS_RXDRDY;                      
N  __I  uint32_t  RESERVED2[4];
X  volatile const  uint32_t  RESERVED2[4];
N  __IO uint32_t  EVENTS_TXDRDY;                     /*!< Data sent from TXD                                                    */
X  volatile uint32_t  EVENTS_TXDRDY;                      
N  __I  uint32_t  RESERVED3;
X  volatile const  uint32_t  RESERVED3;
N  __IO uint32_t  EVENTS_ERROR;                      /*!< Error detected                                                        */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED4[7];
X  volatile const  uint32_t  RESERVED4[7];
N  __IO uint32_t  EVENTS_RXTO;                       /*!< Receiver timeout                                                      */
X  volatile uint32_t  EVENTS_RXTO;                        
N  __I  uint32_t  RESERVED5[46];
X  volatile const  uint32_t  RESERVED5[46];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED6[64];
X  volatile const  uint32_t  RESERVED6[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED7[93];
X  volatile const  uint32_t  RESERVED7[93];
N  __IO uint32_t  ERRORSRC;                          /*!< Error source                                                          */
X  volatile uint32_t  ERRORSRC;                           
N  __I  uint32_t  RESERVED8[31];
X  volatile const  uint32_t  RESERVED8[31];
N  __IO uint32_t  ENABLE;                            /*!< Enable UART                                                           */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED9;
X  volatile const  uint32_t  RESERVED9;
N  __IO uint32_t  PSELRTS;                           /*!< Pin select for RTS                                                    */
X  volatile uint32_t  PSELRTS;                            
N  __IO uint32_t  PSELTXD;                           /*!< Pin select for TXD                                                    */
X  volatile uint32_t  PSELTXD;                            
N  __IO uint32_t  PSELCTS;                           /*!< Pin select for CTS                                                    */
X  volatile uint32_t  PSELCTS;                            
N  __IO uint32_t  PSELRXD;                           /*!< Pin select for RXD                                                    */
X  volatile uint32_t  PSELRXD;                            
N  __I  uint32_t  RXD;                               /*!< RXD register                                                          */
X  volatile const  uint32_t  RXD;                                
N  __O  uint32_t  TXD;                               /*!< TXD register                                                          */
X  volatile  uint32_t  TXD;                                
N  __I  uint32_t  RESERVED10;
X  volatile const  uint32_t  RESERVED10;
N  __IO uint32_t  BAUDRATE;                          /*!< Baud rate                                                             */
X  volatile uint32_t  BAUDRATE;                           
N  __I  uint32_t  RESERVED11[17];
X  volatile const  uint32_t  RESERVED11[17];
N  __IO uint32_t  CONFIG;                            /*!< Configuration of parity and hardware flow control                     */
X  volatile uint32_t  CONFIG;                             
N} NRF_UART_Type;
N
N
N/* ================================================================================ */
N/* ================                      SPIM                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Serial Peripheral Interface Master with EasyDMA 0 (SPIM)
N  */
N
Ntypedef struct {                                    /*!< SPIM Structure                                                        */
N  __I  uint32_t  RESERVED0[4];
X  volatile const  uint32_t  RESERVED0[4];
N  __O  uint32_t  TASKS_START;                       /*!< Start SPI transaction                                                 */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop SPI transaction                                                  */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED1;
X  volatile const  uint32_t  RESERVED1;
N  __O  uint32_t  TASKS_SUSPEND;                     /*!< Suspend SPI transaction                                               */
X  volatile  uint32_t  TASKS_SUSPEND;                      
N  __O  uint32_t  TASKS_RESUME;                      /*!< Resume SPI transaction                                                */
X  volatile  uint32_t  TASKS_RESUME;                       
N  __I  uint32_t  RESERVED2[56];
X  volatile const  uint32_t  RESERVED2[56];
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< SPI transaction has stopped                                           */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __I  uint32_t  RESERVED3[2];
X  volatile const  uint32_t  RESERVED3[2];
N  __IO uint32_t  EVENTS_ENDRX;                      /*!< End of RXD buffer reached                                             */
X  volatile uint32_t  EVENTS_ENDRX;                       
N  __I  uint32_t  RESERVED4;
X  volatile const  uint32_t  RESERVED4;
N  __IO uint32_t  EVENTS_END;                        /*!< End of RXD buffer and TXD buffer reached                              */
X  volatile uint32_t  EVENTS_END;                         
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  EVENTS_ENDTX;                      /*!< End of TXD buffer reached                                             */
X  volatile uint32_t  EVENTS_ENDTX;                       
N  __I  uint32_t  RESERVED6[10];
X  volatile const  uint32_t  RESERVED6[10];
N  __IO uint32_t  EVENTS_STARTED;                    /*!< Transaction started                                                   */
X  volatile uint32_t  EVENTS_STARTED;                     
N  __I  uint32_t  RESERVED7[44];
X  volatile const  uint32_t  RESERVED7[44];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED8[64];
X  volatile const  uint32_t  RESERVED8[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED9[125];
X  volatile const  uint32_t  RESERVED9[125];
N  __IO uint32_t  ENABLE;                            /*!< Enable SPIM                                                           */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED10;
X  volatile const  uint32_t  RESERVED10;
N  SPIM_PSEL_Type PSEL;                              /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED11[4];
X  volatile const  uint32_t  RESERVED11[4];
N  __IO uint32_t  FREQUENCY;                         /*!< SPI frequency                                                         */
X  volatile uint32_t  FREQUENCY;                          
N  __I  uint32_t  RESERVED12[3];
X  volatile const  uint32_t  RESERVED12[3];
N  SPIM_RXD_Type RXD;                                /*!< RXD EasyDMA channel                                                   */
N  SPIM_TXD_Type TXD;                                /*!< TXD EasyDMA channel                                                   */
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N  __I  uint32_t  RESERVED13[26];
X  volatile const  uint32_t  RESERVED13[26];
N  __IO uint32_t  ORC;                               /*!< Over-read character. Character clocked out in case and over-read
X  volatile uint32_t  ORC;                               
N                                                         of the TXD buffer.                                                    */
N} NRF_SPIM_Type;
N
N
N/* ================================================================================ */
N/* ================                      SPIS                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief SPI Slave 0 (SPIS)
N  */
N
Ntypedef struct {                                    /*!< SPIS Structure                                                        */
N  __I  uint32_t  RESERVED0[9];
X  volatile const  uint32_t  RESERVED0[9];
N  __O  uint32_t  TASKS_ACQUIRE;                     /*!< Acquire SPI semaphore                                                 */
X  volatile  uint32_t  TASKS_ACQUIRE;                      
N  __O  uint32_t  TASKS_RELEASE;                     /*!< Release SPI semaphore, enabling the SPI slave to acquire it           */
X  volatile  uint32_t  TASKS_RELEASE;                      
N  __I  uint32_t  RESERVED1[54];
X  volatile const  uint32_t  RESERVED1[54];
N  __IO uint32_t  EVENTS_END;                        /*!< Granted transaction completed                                         */
X  volatile uint32_t  EVENTS_END;                         
N  __I  uint32_t  RESERVED2[2];
X  volatile const  uint32_t  RESERVED2[2];
N  __IO uint32_t  EVENTS_ENDRX;                      /*!< End of RXD buffer reached                                             */
X  volatile uint32_t  EVENTS_ENDRX;                       
N  __I  uint32_t  RESERVED3[5];
X  volatile const  uint32_t  RESERVED3[5];
N  __IO uint32_t  EVENTS_ACQUIRED;                   /*!< Semaphore acquired                                                    */
X  volatile uint32_t  EVENTS_ACQUIRED;                    
N  __I  uint32_t  RESERVED4[53];
X  volatile const  uint32_t  RESERVED4[53];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED5[64];
X  volatile const  uint32_t  RESERVED5[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED6[61];
X  volatile const  uint32_t  RESERVED6[61];
N  __I  uint32_t  SEMSTAT;                           /*!< Semaphore status register                                             */
X  volatile const  uint32_t  SEMSTAT;                            
N  __I  uint32_t  RESERVED7[15];
X  volatile const  uint32_t  RESERVED7[15];
N  __IO uint32_t  STATUS;                            /*!< Status from last transaction                                          */
X  volatile uint32_t  STATUS;                             
N  __I  uint32_t  RESERVED8[47];
X  volatile const  uint32_t  RESERVED8[47];
N  __IO uint32_t  ENABLE;                            /*!< Enable SPI slave                                                      */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED9;
X  volatile const  uint32_t  RESERVED9;
N  SPIS_PSEL_Type PSEL;                              /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED10[7];
X  volatile const  uint32_t  RESERVED10[7];
N  SPIS_RXD_Type RXD;                                /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED11;
X  volatile const  uint32_t  RESERVED11;
N  SPIS_TXD_Type TXD;                                /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED12;
X  volatile const  uint32_t  RESERVED12;
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N  __I  uint32_t  RESERVED13;
X  volatile const  uint32_t  RESERVED13;
N  __IO uint32_t  DEF;                               /*!< Default character. Character clocked out in case of an ignored
X  volatile uint32_t  DEF;                               
N                                                         transaction.                                                          */
N  __I  uint32_t  RESERVED14[24];
X  volatile const  uint32_t  RESERVED14[24];
N  __IO uint32_t  ORC;                               /*!< Over-read character                                                   */
X  volatile uint32_t  ORC;                                
N} NRF_SPIS_Type;
N
N
N/* ================================================================================ */
N/* ================                      TWIM                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief I2C compatible Two-Wire Master Interface with EasyDMA 0 (TWIM)
N  */
N
Ntypedef struct {                                    /*!< TWIM Structure                                                        */
N  __O  uint32_t  TASKS_STARTRX;                     /*!< Start TWI receive sequence                                            */
X  volatile  uint32_t  TASKS_STARTRX;                      
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N  __O  uint32_t  TASKS_STARTTX;                     /*!< Start TWI transmit sequence                                           */
X  volatile  uint32_t  TASKS_STARTTX;                      
N  __I  uint32_t  RESERVED1[2];
X  volatile const  uint32_t  RESERVED1[2];
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop TWI transaction. Must be issued while the TWI master is
X  volatile  uint32_t  TASKS_STOP;                        
N                                                         not suspended.                                                        */
N  __I  uint32_t  RESERVED2;
X  volatile const  uint32_t  RESERVED2;
N  __O  uint32_t  TASKS_SUSPEND;                     /*!< Suspend TWI transaction                                               */
X  volatile  uint32_t  TASKS_SUSPEND;                      
N  __O  uint32_t  TASKS_RESUME;                      /*!< Resume TWI transaction                                                */
X  volatile  uint32_t  TASKS_RESUME;                       
N  __I  uint32_t  RESERVED3[56];
X  volatile const  uint32_t  RESERVED3[56];
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< TWI stopped                                                           */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __I  uint32_t  RESERVED4[7];
X  volatile const  uint32_t  RESERVED4[7];
N  __IO uint32_t  EVENTS_ERROR;                      /*!< TWI error                                                             */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED5[8];
X  volatile const  uint32_t  RESERVED5[8];
N  __IO uint32_t  EVENTS_SUSPENDED;                  /*!< Last byte has been sent out after the SUSPEND task has been
X  volatile uint32_t  EVENTS_SUSPENDED;                  
N                                                         issued, TWI traffic is now suspended.                                 */
N  __IO uint32_t  EVENTS_RXSTARTED;                  /*!< Receive sequence started                                              */
X  volatile uint32_t  EVENTS_RXSTARTED;                   
N  __IO uint32_t  EVENTS_TXSTARTED;                  /*!< Transmit sequence started                                             */
X  volatile uint32_t  EVENTS_TXSTARTED;                   
N  __I  uint32_t  RESERVED6[2];
X  volatile const  uint32_t  RESERVED6[2];
N  __IO uint32_t  EVENTS_LASTRX;                     /*!< Byte boundary, starting to receive the last byte                      */
X  volatile uint32_t  EVENTS_LASTRX;                      
N  __IO uint32_t  EVENTS_LASTTX;                     /*!< Byte boundary, starting to transmit the last byte                     */
X  volatile uint32_t  EVENTS_LASTTX;                      
N  __I  uint32_t  RESERVED7[39];
X  volatile const  uint32_t  RESERVED7[39];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED8[63];
X  volatile const  uint32_t  RESERVED8[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED9[110];
X  volatile const  uint32_t  RESERVED9[110];
N  __IO uint32_t  ERRORSRC;                          /*!< Error source                                                          */
X  volatile uint32_t  ERRORSRC;                           
N  __I  uint32_t  RESERVED10[14];
X  volatile const  uint32_t  RESERVED10[14];
N  __IO uint32_t  ENABLE;                            /*!< Enable TWIM                                                           */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED11;
X  volatile const  uint32_t  RESERVED11;
N  TWIM_PSEL_Type PSEL;                              /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED12[5];
X  volatile const  uint32_t  RESERVED12[5];
N  __IO uint32_t  FREQUENCY;                         /*!< TWI frequency                                                         */
X  volatile uint32_t  FREQUENCY;                          
N  __I  uint32_t  RESERVED13[3];
X  volatile const  uint32_t  RESERVED13[3];
N  TWIM_RXD_Type RXD;                                /*!< RXD EasyDMA channel                                                   */
N  TWIM_TXD_Type TXD;                                /*!< TXD EasyDMA channel                                                   */
N  __I  uint32_t  RESERVED14[13];
X  volatile const  uint32_t  RESERVED14[13];
N  __IO uint32_t  ADDRESS;                           /*!< Address used in the TWI transfer                                      */
X  volatile uint32_t  ADDRESS;                            
N} NRF_TWIM_Type;
N
N
N/* ================================================================================ */
N/* ================                      TWIS                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief I2C compatible Two-Wire Slave Interface with EasyDMA 0 (TWIS)
N  */
N
Ntypedef struct {                                    /*!< TWIS Structure                                                        */
N  __I  uint32_t  RESERVED0[5];
X  volatile const  uint32_t  RESERVED0[5];
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop TWI transaction                                                  */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED1;
X  volatile const  uint32_t  RESERVED1;
N  __O  uint32_t  TASKS_SUSPEND;                     /*!< Suspend TWI transaction                                               */
X  volatile  uint32_t  TASKS_SUSPEND;                      
N  __O  uint32_t  TASKS_RESUME;                      /*!< Resume TWI transaction                                                */
X  volatile  uint32_t  TASKS_RESUME;                       
N  __I  uint32_t  RESERVED2[3];
X  volatile const  uint32_t  RESERVED2[3];
N  __O  uint32_t  TASKS_PREPARERX;                   /*!< Prepare the TWI slave to respond to a write command                   */
X  volatile  uint32_t  TASKS_PREPARERX;                    
N  __O  uint32_t  TASKS_PREPARETX;                   /*!< Prepare the TWI slave to respond to a read command                    */
X  volatile  uint32_t  TASKS_PREPARETX;                    
N  __I  uint32_t  RESERVED3[51];
X  volatile const  uint32_t  RESERVED3[51];
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< TWI stopped                                                           */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __I  uint32_t  RESERVED4[7];
X  volatile const  uint32_t  RESERVED4[7];
N  __IO uint32_t  EVENTS_ERROR;                      /*!< TWI error                                                             */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED5[9];
X  volatile const  uint32_t  RESERVED5[9];
N  __IO uint32_t  EVENTS_RXSTARTED;                  /*!< Receive sequence started                                              */
X  volatile uint32_t  EVENTS_RXSTARTED;                   
N  __IO uint32_t  EVENTS_TXSTARTED;                  /*!< Transmit sequence started                                             */
X  volatile uint32_t  EVENTS_TXSTARTED;                   
N  __I  uint32_t  RESERVED6[4];
X  volatile const  uint32_t  RESERVED6[4];
N  __IO uint32_t  EVENTS_WRITE;                      /*!< Write command received                                                */
X  volatile uint32_t  EVENTS_WRITE;                       
N  __IO uint32_t  EVENTS_READ;                       /*!< Read command received                                                 */
X  volatile uint32_t  EVENTS_READ;                        
N  __I  uint32_t  RESERVED7[37];
X  volatile const  uint32_t  RESERVED7[37];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED8[63];
X  volatile const  uint32_t  RESERVED8[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED9[113];
X  volatile const  uint32_t  RESERVED9[113];
N  __IO uint32_t  ERRORSRC;                          /*!< Error source                                                          */
X  volatile uint32_t  ERRORSRC;                           
N  __I  uint32_t  MATCH;                             /*!< Status register indicating which address had a match                  */
X  volatile const  uint32_t  MATCH;                              
N  __I  uint32_t  RESERVED10[10];
X  volatile const  uint32_t  RESERVED10[10];
N  __IO uint32_t  ENABLE;                            /*!< Enable TWIS                                                           */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED11;
X  volatile const  uint32_t  RESERVED11;
N  TWIS_PSEL_Type PSEL;                              /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED12[9];
X  volatile const  uint32_t  RESERVED12[9];
N  TWIS_RXD_Type RXD;                                /*!< RXD EasyDMA channel                                                   */
N  __I  uint32_t  RESERVED13;
X  volatile const  uint32_t  RESERVED13;
N  TWIS_TXD_Type TXD;                                /*!< TXD EasyDMA channel                                                   */
N  __I  uint32_t  RESERVED14[14];
X  volatile const  uint32_t  RESERVED14[14];
N  __IO uint32_t  ADDRESS[2];                        /*!< Description collection[0]: TWI slave address 0                        */
X  volatile uint32_t  ADDRESS[2];                         
N  __I  uint32_t  RESERVED15;
X  volatile const  uint32_t  RESERVED15;
N  __IO uint32_t  CONFIG;                            /*!< Configuration register for the address match mechanism                */
X  volatile uint32_t  CONFIG;                             
N  __I  uint32_t  RESERVED16[10];
X  volatile const  uint32_t  RESERVED16[10];
N  __IO uint32_t  ORC;                               /*!< Over-read character. Character sent out in case of an over-read
X  volatile uint32_t  ORC;                               
N                                                         of the transmit buffer.                                               */
N} NRF_TWIS_Type;
N
N
N/* ================================================================================ */
N/* ================                       SPI                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Serial Peripheral Interface 0 (SPI)
N  */
N
Ntypedef struct {                                    /*!< SPI Structure                                                         */
N  __I  uint32_t  RESERVED0[66];
X  volatile const  uint32_t  RESERVED0[66];
N  __IO uint32_t  EVENTS_READY;                      /*!< TXD byte sent and RXD byte received                                   */
X  volatile uint32_t  EVENTS_READY;                       
N  __I  uint32_t  RESERVED1[126];
X  volatile const  uint32_t  RESERVED1[126];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[125];
X  volatile const  uint32_t  RESERVED2[125];
N  __IO uint32_t  ENABLE;                            /*!< Enable SPI                                                            */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED3;
X  volatile const  uint32_t  RESERVED3;
N  SPI_PSEL_Type PSEL;                               /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED4;
X  volatile const  uint32_t  RESERVED4;
N  __I  uint32_t  RXD;                               /*!< RXD register                                                          */
X  volatile const  uint32_t  RXD;                                
N  __IO uint32_t  TXD;                               /*!< TXD register                                                          */
X  volatile uint32_t  TXD;                                
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  FREQUENCY;                         /*!< SPI frequency                                                         */
X  volatile uint32_t  FREQUENCY;                          
N  __I  uint32_t  RESERVED6[11];
X  volatile const  uint32_t  RESERVED6[11];
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N} NRF_SPI_Type;
N
N
N/* ================================================================================ */
N/* ================                       TWI                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief I2C compatible Two-Wire Interface 0 (TWI)
N  */
N
Ntypedef struct {                                    /*!< TWI Structure                                                         */
N  __O  uint32_t  TASKS_STARTRX;                     /*!< Start TWI receive sequence                                            */
X  volatile  uint32_t  TASKS_STARTRX;                      
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N  __O  uint32_t  TASKS_STARTTX;                     /*!< Start TWI transmit sequence                                           */
X  volatile  uint32_t  TASKS_STARTTX;                      
N  __I  uint32_t  RESERVED1[2];
X  volatile const  uint32_t  RESERVED1[2];
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop TWI transaction                                                  */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED2;
X  volatile const  uint32_t  RESERVED2;
N  __O  uint32_t  TASKS_SUSPEND;                     /*!< Suspend TWI transaction                                               */
X  volatile  uint32_t  TASKS_SUSPEND;                      
N  __O  uint32_t  TASKS_RESUME;                      /*!< Resume TWI transaction                                                */
X  volatile  uint32_t  TASKS_RESUME;                       
N  __I  uint32_t  RESERVED3[56];
X  volatile const  uint32_t  RESERVED3[56];
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< TWI stopped                                                           */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __IO uint32_t  EVENTS_RXDREADY;                   /*!< TWI RXD byte received                                                 */
X  volatile uint32_t  EVENTS_RXDREADY;                    
N  __I  uint32_t  RESERVED4[4];
X  volatile const  uint32_t  RESERVED4[4];
N  __IO uint32_t  EVENTS_TXDSENT;                    /*!< TWI TXD byte sent                                                     */
X  volatile uint32_t  EVENTS_TXDSENT;                     
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  EVENTS_ERROR;                      /*!< TWI error                                                             */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED6[4];
X  volatile const  uint32_t  RESERVED6[4];
N  __IO uint32_t  EVENTS_BB;                         /*!< TWI byte boundary, generated before each byte that is sent or
X  volatile uint32_t  EVENTS_BB;                         
N                                                         received                                                              */
N  __I  uint32_t  RESERVED7[3];
X  volatile const  uint32_t  RESERVED7[3];
N  __IO uint32_t  EVENTS_SUSPENDED;                  /*!< TWI entered the suspended state                                       */
X  volatile uint32_t  EVENTS_SUSPENDED;                   
N  __I  uint32_t  RESERVED8[45];
X  volatile const  uint32_t  RESERVED8[45];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED9[64];
X  volatile const  uint32_t  RESERVED9[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED10[110];
X  volatile const  uint32_t  RESERVED10[110];
N  __IO uint32_t  ERRORSRC;                          /*!< Error source                                                          */
X  volatile uint32_t  ERRORSRC;                           
N  __I  uint32_t  RESERVED11[14];
X  volatile const  uint32_t  RESERVED11[14];
N  __IO uint32_t  ENABLE;                            /*!< Enable TWI                                                            */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED12;
X  volatile const  uint32_t  RESERVED12;
N  __IO uint32_t  PSELSCL;                           /*!< Pin select for SCL                                                    */
X  volatile uint32_t  PSELSCL;                            
N  __IO uint32_t  PSELSDA;                           /*!< Pin select for SDA                                                    */
X  volatile uint32_t  PSELSDA;                            
N  __I  uint32_t  RESERVED13[2];
X  volatile const  uint32_t  RESERVED13[2];
N  __I  uint32_t  RXD;                               /*!< RXD register                                                          */
X  volatile const  uint32_t  RXD;                                
N  __IO uint32_t  TXD;                               /*!< TXD register                                                          */
X  volatile uint32_t  TXD;                                
N  __I  uint32_t  RESERVED14;
X  volatile const  uint32_t  RESERVED14;
N  __IO uint32_t  FREQUENCY;                         /*!< TWI frequency                                                         */
X  volatile uint32_t  FREQUENCY;                          
N  __I  uint32_t  RESERVED15[24];
X  volatile const  uint32_t  RESERVED15[24];
N  __IO uint32_t  ADDRESS;                           /*!< Address used in the TWI transfer                                      */
X  volatile uint32_t  ADDRESS;                            
N} NRF_TWI_Type;
N
N
N/* ================================================================================ */
N/* ================                      NFCT                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief NFC-A compatible radio (NFCT)
N  */
N
Ntypedef struct {                                    /*!< NFCT Structure                                                        */
N  __O  uint32_t  TASKS_ACTIVATE;                    /*!< Activate NFC peripheral for incoming and outgoing frames, change
X  volatile  uint32_t  TASKS_ACTIVATE;                    
N                                                         state to activated                                                    */
N  __O  uint32_t  TASKS_DISABLE;                     /*!< Disable NFC peripheral                                                */
X  volatile  uint32_t  TASKS_DISABLE;                      
N  __O  uint32_t  TASKS_SENSE;                       /*!< Enable NFC sense field mode, change state to sense mode               */
X  volatile  uint32_t  TASKS_SENSE;                        
N  __O  uint32_t  TASKS_STARTTX;                     /*!< Start transmission of a outgoing frame, change state to transmit      */
X  volatile  uint32_t  TASKS_STARTTX;                      
N  __I  uint32_t  RESERVED0[3];
X  volatile const  uint32_t  RESERVED0[3];
N  __O  uint32_t  TASKS_ENABLERXDATA;                /*!< Initializes the EasyDMA for receive.                                  */
X  volatile  uint32_t  TASKS_ENABLERXDATA;                 
N  __I  uint32_t  RESERVED1;
X  volatile const  uint32_t  RESERVED1;
N  __O  uint32_t  TASKS_GOIDLE;                      /*!< Force state machine to IDLE state                                     */
X  volatile  uint32_t  TASKS_GOIDLE;                       
N  __O  uint32_t  TASKS_GOSLEEP;                     /*!< Force state machine to SLEEP_A state                                  */
X  volatile  uint32_t  TASKS_GOSLEEP;                      
N  __I  uint32_t  RESERVED2[53];
X  volatile const  uint32_t  RESERVED2[53];
N  __IO uint32_t  EVENTS_READY;                      /*!< The NFC peripheral is ready to receive and send frames                */
X  volatile uint32_t  EVENTS_READY;                       
N  __IO uint32_t  EVENTS_FIELDDETECTED;              /*!< Remote NFC field detected                                             */
X  volatile uint32_t  EVENTS_FIELDDETECTED;               
N  __IO uint32_t  EVENTS_FIELDLOST;                  /*!< Remote NFC field lost                                                 */
X  volatile uint32_t  EVENTS_FIELDLOST;                   
N  __IO uint32_t  EVENTS_TXFRAMESTART;               /*!< Marks the start of the first symbol of a transmitted frame            */
X  volatile uint32_t  EVENTS_TXFRAMESTART;                
N  __IO uint32_t  EVENTS_TXFRAMEEND;                 /*!< Marks the end of the last transmitted on-air symbol of a frame        */
X  volatile uint32_t  EVENTS_TXFRAMEEND;                  
N  __IO uint32_t  EVENTS_RXFRAMESTART;               /*!< Marks the end of the first symbol of a received frame                 */
X  volatile uint32_t  EVENTS_RXFRAMESTART;                
N  __IO uint32_t  EVENTS_RXFRAMEEND;                 /*!< Received data have been checked (CRC, parity) and transferred
X  volatile uint32_t  EVENTS_RXFRAMEEND;                 
N                                                         to RAM, and EasyDMA has ended accessing the RX buffer                 */
N  __IO uint32_t  EVENTS_ERROR;                      /*!< NFC error reported. The ERRORSTATUS register contains details
X  volatile uint32_t  EVENTS_ERROR;                      
N                                                         on the source of the error.                                           */
N  __I  uint32_t  RESERVED3[2];
X  volatile const  uint32_t  RESERVED3[2];
N  __IO uint32_t  EVENTS_RXERROR;                    /*!< NFC RX frame error reported. The FRAMESTATUS.RX register contains
X  volatile uint32_t  EVENTS_RXERROR;                    
N                                                         details on the source of the error.                                   */
N  __IO uint32_t  EVENTS_ENDRX;                      /*!< RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full.      */
X  volatile uint32_t  EVENTS_ENDRX;                       
N  __IO uint32_t  EVENTS_ENDTX;                      /*!< Transmission of data in RAM has ended, and EasyDMA has ended
X  volatile uint32_t  EVENTS_ENDTX;                      
N                                                         accessing the TX buffer                                               */
N  __I  uint32_t  RESERVED4;
X  volatile const  uint32_t  RESERVED4;
N  __IO uint32_t  EVENTS_AUTOCOLRESSTARTED;          /*!< Auto collision resolution process has started                         */
X  volatile uint32_t  EVENTS_AUTOCOLRESSTARTED;           
N  __I  uint32_t  RESERVED5[3];
X  volatile const  uint32_t  RESERVED5[3];
N  __IO uint32_t  EVENTS_COLLISION;                  /*!< NFC Auto collision resolution error reported.                         */
X  volatile uint32_t  EVENTS_COLLISION;                   
N  __IO uint32_t  EVENTS_SELECTED;                   /*!< NFC Auto collision resolution successfully completed                  */
X  volatile uint32_t  EVENTS_SELECTED;                    
N  __IO uint32_t  EVENTS_STARTED;                    /*!< EasyDMA is ready to receive or send frames.                           */
X  volatile uint32_t  EVENTS_STARTED;                     
N  __I  uint32_t  RESERVED6[43];
X  volatile const  uint32_t  RESERVED6[43];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED7[63];
X  volatile const  uint32_t  RESERVED7[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED8[62];
X  volatile const  uint32_t  RESERVED8[62];
N  __IO uint32_t  ERRORSTATUS;                       /*!< NFC Error Status register                                             */
X  volatile uint32_t  ERRORSTATUS;                        
N  __I  uint32_t  RESERVED9;
X  volatile const  uint32_t  RESERVED9;
N  NFCT_FRAMESTATUS_Type FRAMESTATUS;                /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED10[8];
X  volatile const  uint32_t  RESERVED10[8];
N  __I  uint32_t  CURRENTLOADCTRL;                   /*!< Current value driven to the NFC Load Control                          */
X  volatile const  uint32_t  CURRENTLOADCTRL;                    
N  __I  uint32_t  RESERVED11[2];
X  volatile const  uint32_t  RESERVED11[2];
N  __I  uint32_t  FIELDPRESENT;                      /*!< Indicates the presence or not of a valid field                        */
X  volatile const  uint32_t  FIELDPRESENT;                       
N  __I  uint32_t  RESERVED12[49];
X  volatile const  uint32_t  RESERVED12[49];
N  __IO uint32_t  FRAMEDELAYMIN;                     /*!< Minimum frame delay                                                   */
X  volatile uint32_t  FRAMEDELAYMIN;                      
N  __IO uint32_t  FRAMEDELAYMAX;                     /*!< Maximum frame delay                                                   */
X  volatile uint32_t  FRAMEDELAYMAX;                      
N  __IO uint32_t  FRAMEDELAYMODE;                    /*!< Configuration register for the Frame Delay Timer                      */
X  volatile uint32_t  FRAMEDELAYMODE;                     
N  __IO uint32_t  PACKETPTR;                         /*!< Packet pointer for TXD and RXD data storage in Data RAM               */
X  volatile uint32_t  PACKETPTR;                          
N  __IO uint32_t  MAXLEN;                            /*!< Size of allocated for TXD and RXD data storage buffer in Data
X  volatile uint32_t  MAXLEN;                            
N                                                         RAM                                                                   */
N  NFCT_TXD_Type TXD;                                /*!< Unspecified                                                           */
N  NFCT_RXD_Type RXD;                                /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED13[26];
X  volatile const  uint32_t  RESERVED13[26];
N  __IO uint32_t  NFCID1_LAST;                       /*!< Last NFCID1 part (4, 7 or 10 bytes ID)                                */
X  volatile uint32_t  NFCID1_LAST;                        
N  __IO uint32_t  NFCID1_2ND_LAST;                   /*!< Second last NFCID1 part (7 or 10 bytes ID)                            */
X  volatile uint32_t  NFCID1_2ND_LAST;                    
N  __IO uint32_t  NFCID1_3RD_LAST;                   /*!< Third last NFCID1 part (10 bytes ID)                                  */
X  volatile uint32_t  NFCID1_3RD_LAST;                    
N  __I  uint32_t  RESERVED14;
X  volatile const  uint32_t  RESERVED14;
N  __IO uint32_t  SENSRES;                           /*!< NFC-A SENS_RES auto-response settings                                 */
X  volatile uint32_t  SENSRES;                            
N  __IO uint32_t  SELRES;                            /*!< NFC-A SEL_RES auto-response settings                                  */
X  volatile uint32_t  SELRES;                             
N} NRF_NFCT_Type;
N
N
N/* ================================================================================ */
N/* ================                     GPIOTE                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief GPIO Tasks and Events (GPIOTE)
N  */
N
Ntypedef struct {                                    /*!< GPIOTE Structure                                                      */
N  __O  uint32_t  TASKS_OUT[8];                      /*!< Description collection[0]: Task for writing to pin specified
X  volatile  uint32_t  TASKS_OUT[8];                      
N                                                         in CONFIG[0].PSEL. Action on pin is configured in CONFIG[0].POLARITY. */
N  __I  uint32_t  RESERVED0[4];
X  volatile const  uint32_t  RESERVED0[4];
N  __O  uint32_t  TASKS_SET[8];                      /*!< Description collection[0]: Task for writing to pin specified
X  volatile  uint32_t  TASKS_SET[8];                      
N                                                         in CONFIG[0].PSEL. Action on pin is to set it high.                   */
N  __I  uint32_t  RESERVED1[4];
X  volatile const  uint32_t  RESERVED1[4];
N  __O  uint32_t  TASKS_CLR[8];                      /*!< Description collection[0]: Task for writing to pin specified
X  volatile  uint32_t  TASKS_CLR[8];                      
N                                                         in CONFIG[0].PSEL. Action on pin is to set it low.                    */
N  __I  uint32_t  RESERVED2[32];
X  volatile const  uint32_t  RESERVED2[32];
N  __IO uint32_t  EVENTS_IN[8];                      /*!< Description collection[0]: Event generated from pin specified
X  volatile uint32_t  EVENTS_IN[8];                      
N                                                         in CONFIG[0].PSEL                                                     */
N  __I  uint32_t  RESERVED3[23];
X  volatile const  uint32_t  RESERVED3[23];
N  __IO uint32_t  EVENTS_PORT;                       /*!< Event generated from multiple input GPIO pins with SENSE mechanism
X  volatile uint32_t  EVENTS_PORT;                       
N                                                         enabled                                                               */
N  __I  uint32_t  RESERVED4[97];
X  volatile const  uint32_t  RESERVED4[97];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED5[129];
X  volatile const  uint32_t  RESERVED5[129];
N  __IO uint32_t  CONFIG[8];                         /*!< Description collection[0]: Configuration for OUT[n], SET[n]
X  volatile uint32_t  CONFIG[8];                         
N                                                         and CLR[n] tasks and IN[n] event                                      */
N} NRF_GPIOTE_Type;
N
N
N/* ================================================================================ */
N/* ================                      SAADC                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Analog to Digital Converter (SAADC)
N  */
N
Ntypedef struct {                                    /*!< SAADC Structure                                                       */
N  __O  uint32_t  TASKS_START;                       /*!< Start the ADC and prepare the result buffer in RAM                    */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_SAMPLE;                      /*!< Take one ADC sample, if scan is enabled all channels are sampled      */
X  volatile  uint32_t  TASKS_SAMPLE;                       
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop the ADC and terminate any on-going conversion                    */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_CALIBRATEOFFSET;             /*!< Starts offset auto-calibration                                        */
X  volatile  uint32_t  TASKS_CALIBRATEOFFSET;              
N  __I  uint32_t  RESERVED0[60];
X  volatile const  uint32_t  RESERVED0[60];
N  __IO uint32_t  EVENTS_STARTED;                    /*!< The ADC has started                                                   */
X  volatile uint32_t  EVENTS_STARTED;                     
N  __IO uint32_t  EVENTS_END;                        /*!< The ADC has filled up the Result buffer                               */
X  volatile uint32_t  EVENTS_END;                         
N  __IO uint32_t  EVENTS_DONE;                       /*!< A conversion task has been completed. Depending on the mode,
X  volatile uint32_t  EVENTS_DONE;                       
N                                                         multiple conversions might be needed for a result to be transferred
N                                                          to RAM.                                                              */
N  __IO uint32_t  EVENTS_RESULTDONE;                 /*!< A result is ready to get transferred to RAM.                          */
X  volatile uint32_t  EVENTS_RESULTDONE;                  
N  __IO uint32_t  EVENTS_CALIBRATEDONE;              /*!< Calibration is complete                                               */
X  volatile uint32_t  EVENTS_CALIBRATEDONE;               
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< The ADC has stopped                                                   */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  SAADC_EVENTS_CH_Type EVENTS_CH[8];                /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED1[106];
X  volatile const  uint32_t  RESERVED1[106];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[61];
X  volatile const  uint32_t  RESERVED2[61];
N  __I  uint32_t  STATUS;                            /*!< Status                                                                */
X  volatile const  uint32_t  STATUS;                             
N  __I  uint32_t  RESERVED3[63];
X  volatile const  uint32_t  RESERVED3[63];
N  __IO uint32_t  ENABLE;                            /*!< Enable or disable ADC                                                 */
X  volatile uint32_t  ENABLE;                             
N  __I  uint32_t  RESERVED4[3];
X  volatile const  uint32_t  RESERVED4[3];
N  SAADC_CH_Type CH[8];                              /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED5[24];
X  volatile const  uint32_t  RESERVED5[24];
N  __IO uint32_t  RESOLUTION;                        /*!< Resolution configuration                                              */
X  volatile uint32_t  RESOLUTION;                         
N  __IO uint32_t  OVERSAMPLE;                        /*!< Oversampling configuration. OVERSAMPLE should not be combined
X  volatile uint32_t  OVERSAMPLE;                        
N                                                         with SCAN. The RESOLUTION is applied before averaging, thus
N                                                          for high OVERSAMPLE a higher RESOLUTION should be used.              */
N  __IO uint32_t  SAMPLERATE;                        /*!< Controls normal or continuous sample rate                             */
X  volatile uint32_t  SAMPLERATE;                         
N  __I  uint32_t  RESERVED6[12];
X  volatile const  uint32_t  RESERVED6[12];
N  SAADC_RESULT_Type RESULT;                         /*!< RESULT EasyDMA channel                                                */
N} NRF_SAADC_Type;
N
N
N/* ================================================================================ */
N/* ================                      TIMER                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Timer/Counter 0 (TIMER)
N  */
N
Ntypedef struct {                                    /*!< TIMER Structure                                                       */
N  __O  uint32_t  TASKS_START;                       /*!< Start Timer                                                           */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop Timer                                                            */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_COUNT;                       /*!< Increment Timer (Counter mode only)                                   */
X  volatile  uint32_t  TASKS_COUNT;                        
N  __O  uint32_t  TASKS_CLEAR;                       /*!< Clear time                                                            */
X  volatile  uint32_t  TASKS_CLEAR;                        
N  __O  uint32_t  TASKS_SHUTDOWN;                    /*!< Deprecated register - Shut down timer                                 */
X  volatile  uint32_t  TASKS_SHUTDOWN;                     
N  __I  uint32_t  RESERVED0[11];
X  volatile const  uint32_t  RESERVED0[11];
N  __O  uint32_t  TASKS_CAPTURE[6];                  /*!< Description collection[0]: Capture Timer value to CC[0] register      */
X  volatile  uint32_t  TASKS_CAPTURE[6];                   
N  __I  uint32_t  RESERVED1[58];
X  volatile const  uint32_t  RESERVED1[58];
N  __IO uint32_t  EVENTS_COMPARE[6];                 /*!< Description collection[0]: Compare event on CC[0] match               */
X  volatile uint32_t  EVENTS_COMPARE[6];                  
N  __I  uint32_t  RESERVED2[42];
X  volatile const  uint32_t  RESERVED2[42];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED3[64];
X  volatile const  uint32_t  RESERVED3[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED4[126];
X  volatile const  uint32_t  RESERVED4[126];
N  __IO uint32_t  MODE;                              /*!< Timer mode selection                                                  */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  BITMODE;                           /*!< Configure the number of bits used by the TIMER                        */
X  volatile uint32_t  BITMODE;                            
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  PRESCALER;                         /*!< Timer prescaler register                                              */
X  volatile uint32_t  PRESCALER;                          
N  __I  uint32_t  RESERVED6[11];
X  volatile const  uint32_t  RESERVED6[11];
N  __IO uint32_t  CC[6];                             /*!< Description collection[0]: Capture/Compare register 0                 */
X  volatile uint32_t  CC[6];                              
N} NRF_TIMER_Type;
N
N
N/* ================================================================================ */
N/* ================                       RTC                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Real time counter 0 (RTC)
N  */
N
Ntypedef struct {                                    /*!< RTC Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Start RTC COUNTER                                                     */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop RTC COUNTER                                                      */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_CLEAR;                       /*!< Clear RTC COUNTER                                                     */
X  volatile  uint32_t  TASKS_CLEAR;                        
N  __O  uint32_t  TASKS_TRIGOVRFLW;                  /*!< Set COUNTER to 0xFFFFF0                                               */
X  volatile  uint32_t  TASKS_TRIGOVRFLW;                   
N  __I  uint32_t  RESERVED0[60];
X  volatile const  uint32_t  RESERVED0[60];
N  __IO uint32_t  EVENTS_TICK;                       /*!< Event on COUNTER increment                                            */
X  volatile uint32_t  EVENTS_TICK;                        
N  __IO uint32_t  EVENTS_OVRFLW;                     /*!< Event on COUNTER overflow                                             */
X  volatile uint32_t  EVENTS_OVRFLW;                      
N  __I  uint32_t  RESERVED1[14];
X  volatile const  uint32_t  RESERVED1[14];
N  __IO uint32_t  EVENTS_COMPARE[4];                 /*!< Description collection[0]: Compare event on CC[0] match               */
X  volatile uint32_t  EVENTS_COMPARE[4];                  
N  __I  uint32_t  RESERVED2[109];
X  volatile const  uint32_t  RESERVED2[109];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[13];
X  volatile const  uint32_t  RESERVED3[13];
N  __IO uint32_t  EVTEN;                             /*!< Enable or disable event routing                                       */
X  volatile uint32_t  EVTEN;                              
N  __IO uint32_t  EVTENSET;                          /*!< Enable event routing                                                  */
X  volatile uint32_t  EVTENSET;                           
N  __IO uint32_t  EVTENCLR;                          /*!< Disable event routing                                                 */
X  volatile uint32_t  EVTENCLR;                           
N  __I  uint32_t  RESERVED4[110];
X  volatile const  uint32_t  RESERVED4[110];
N  __I  uint32_t  COUNTER;                           /*!< Current COUNTER value                                                 */
X  volatile const  uint32_t  COUNTER;                            
N  __IO uint32_t  PRESCALER;                         /*!< 12 bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).Must
X  volatile uint32_t  PRESCALER;                         
N                                                         be written when RTC is stopped                                        */
N  __I  uint32_t  RESERVED5[13];
X  volatile const  uint32_t  RESERVED5[13];
N  __IO uint32_t  CC[4];                             /*!< Description collection[0]: Compare register 0                         */
X  volatile uint32_t  CC[4];                              
N} NRF_RTC_Type;
N
N
N/* ================================================================================ */
N/* ================                      TEMP                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Temperature Sensor (TEMP)
N  */
N
Ntypedef struct {                                    /*!< TEMP Structure                                                        */
N  __O  uint32_t  TASKS_START;                       /*!< Start temperature measurement                                         */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop temperature measurement                                          */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED0[62];
X  volatile const  uint32_t  RESERVED0[62];
N  __IO uint32_t  EVENTS_DATARDY;                    /*!< Temperature measurement complete, data ready                          */
X  volatile uint32_t  EVENTS_DATARDY;                     
N  __I  uint32_t  RESERVED1[128];
X  volatile const  uint32_t  RESERVED1[128];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[127];
X  volatile const  uint32_t  RESERVED2[127];
N  __I  int32_t   TEMP;                              /*!< Temperature in degC (0.25deg steps)                                   */
X  volatile const  int32_t   TEMP;                               
N  __I  uint32_t  RESERVED3[5];
X  volatile const  uint32_t  RESERVED3[5];
N  __IO uint32_t  A0;                                /*!< Slope of 1st piece wise linear function                               */
X  volatile uint32_t  A0;                                 
N  __IO uint32_t  A1;                                /*!< Slope of 2nd piece wise linear function                               */
X  volatile uint32_t  A1;                                 
N  __IO uint32_t  A2;                                /*!< Slope of 3rd piece wise linear function                               */
X  volatile uint32_t  A2;                                 
N  __IO uint32_t  A3;                                /*!< Slope of 4th piece wise linear function                               */
X  volatile uint32_t  A3;                                 
N  __IO uint32_t  A4;                                /*!< Slope of 5th piece wise linear function                               */
X  volatile uint32_t  A4;                                 
N  __IO uint32_t  A5;                                /*!< Slope of 6th piece wise linear function                               */
X  volatile uint32_t  A5;                                 
N  __I  uint32_t  RESERVED4[2];
X  volatile const  uint32_t  RESERVED4[2];
N  __IO uint32_t  B0;                                /*!< y-intercept of 1st piece wise linear function                         */
X  volatile uint32_t  B0;                                 
N  __IO uint32_t  B1;                                /*!< y-intercept of 2nd piece wise linear function                         */
X  volatile uint32_t  B1;                                 
N  __IO uint32_t  B2;                                /*!< y-intercept of 3rd piece wise linear function                         */
X  volatile uint32_t  B2;                                 
N  __IO uint32_t  B3;                                /*!< y-intercept of 4th piece wise linear function                         */
X  volatile uint32_t  B3;                                 
N  __IO uint32_t  B4;                                /*!< y-intercept of 5th piece wise linear function                         */
X  volatile uint32_t  B4;                                 
N  __IO uint32_t  B5;                                /*!< y-intercept of 6th piece wise linear function                         */
X  volatile uint32_t  B5;                                 
N  __I  uint32_t  RESERVED5[2];
X  volatile const  uint32_t  RESERVED5[2];
N  __IO uint32_t  T0;                                /*!< End point of 1st piece wise linear function                           */
X  volatile uint32_t  T0;                                 
N  __IO uint32_t  T1;                                /*!< End point of 2nd piece wise linear function                           */
X  volatile uint32_t  T1;                                 
N  __IO uint32_t  T2;                                /*!< End point of 3rd piece wise linear function                           */
X  volatile uint32_t  T2;                                 
N  __IO uint32_t  T3;                                /*!< End point of 4th piece wise linear function                           */
X  volatile uint32_t  T3;                                 
N  __IO uint32_t  T4;                                /*!< End point of 5th piece wise linear function                           */
X  volatile uint32_t  T4;                                 
N} NRF_TEMP_Type;
N
N
N/* ================================================================================ */
N/* ================                       RNG                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Random Number Generator (RNG)
N  */
N
Ntypedef struct {                                    /*!< RNG Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Task starting the random number generator                             */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Task stopping the random number generator                             */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED0[62];
X  volatile const  uint32_t  RESERVED0[62];
N  __IO uint32_t  EVENTS_VALRDY;                     /*!< Event being generated for every new random number written to
X  volatile uint32_t  EVENTS_VALRDY;                     
N                                                         the VALUE register                                                    */
N  __I  uint32_t  RESERVED1[63];
X  volatile const  uint32_t  RESERVED1[63];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED2[64];
X  volatile const  uint32_t  RESERVED2[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[126];
X  volatile const  uint32_t  RESERVED3[126];
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N  __I  uint32_t  VALUE;                             /*!< Output random number                                                  */
X  volatile const  uint32_t  VALUE;                              
N} NRF_RNG_Type;
N
N
N/* ================================================================================ */
N/* ================                       ECB                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief AES ECB Mode Encryption (ECB)
N  */
N
Ntypedef struct {                                    /*!< ECB Structure                                                         */
N  __O  uint32_t  TASKS_STARTECB;                    /*!< Start ECB block encrypt                                               */
X  volatile  uint32_t  TASKS_STARTECB;                     
N  __O  uint32_t  TASKS_STOPECB;                     /*!< Abort a possible executing ECB operation                              */
X  volatile  uint32_t  TASKS_STOPECB;                      
N  __I  uint32_t  RESERVED0[62];
X  volatile const  uint32_t  RESERVED0[62];
N  __IO uint32_t  EVENTS_ENDECB;                     /*!< ECB block encrypt complete                                            */
X  volatile uint32_t  EVENTS_ENDECB;                      
N  __IO uint32_t  EVENTS_ERRORECB;                   /*!< ECB block encrypt aborted because of a STOPECB task or due to
X  volatile uint32_t  EVENTS_ERRORECB;                   
N                                                         an error                                                              */
N  __I  uint32_t  RESERVED1[127];
X  volatile const  uint32_t  RESERVED1[127];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[126];
X  volatile const  uint32_t  RESERVED2[126];
N  __IO uint32_t  ECBDATAPTR;                        /*!< ECB block encrypt memory pointers                                     */
X  volatile uint32_t  ECBDATAPTR;                         
N} NRF_ECB_Type;
N
N
N/* ================================================================================ */
N/* ================                       CCM                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief AES CCM Mode Encryption (CCM)
N  */
N
Ntypedef struct {                                    /*!< CCM Structure                                                         */
N  __O  uint32_t  TASKS_KSGEN;                       /*!< Start generation of key-stream. This operation will stop by
X  volatile  uint32_t  TASKS_KSGEN;                       
N                                                         itself when completed.                                                */
N  __O  uint32_t  TASKS_CRYPT;                       /*!< Start encryption/decryption. This operation will stop by itself
X  volatile  uint32_t  TASKS_CRYPT;                       
N                                                         when completed.                                                       */
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop encryption/decryption                                            */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED0[61];
X  volatile const  uint32_t  RESERVED0[61];
N  __IO uint32_t  EVENTS_ENDKSGEN;                   /*!< Key-stream generation complete                                        */
X  volatile uint32_t  EVENTS_ENDKSGEN;                    
N  __IO uint32_t  EVENTS_ENDCRYPT;                   /*!< Encrypt/decrypt complete                                              */
X  volatile uint32_t  EVENTS_ENDCRYPT;                    
N  __IO uint32_t  EVENTS_ERROR;                      /*!< CCM error event                                                       */
X  volatile uint32_t  EVENTS_ERROR;                       
N  __I  uint32_t  RESERVED1[61];
X  volatile const  uint32_t  RESERVED1[61];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED2[64];
X  volatile const  uint32_t  RESERVED2[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[61];
X  volatile const  uint32_t  RESERVED3[61];
N  __I  uint32_t  MICSTATUS;                         /*!< MIC check result                                                      */
X  volatile const  uint32_t  MICSTATUS;                          
N  __I  uint32_t  RESERVED4[63];
X  volatile const  uint32_t  RESERVED4[63];
N  __IO uint32_t  ENABLE;                            /*!< Enable                                                                */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  MODE;                              /*!< Operation mode                                                        */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  CNFPTR;                            /*!< Pointer to data structure holding AES key and NONCE vector            */
X  volatile uint32_t  CNFPTR;                             
N  __IO uint32_t  INPTR;                             /*!< Input pointer                                                         */
X  volatile uint32_t  INPTR;                              
N  __IO uint32_t  OUTPTR;                            /*!< Output pointer                                                        */
X  volatile uint32_t  OUTPTR;                             
N  __IO uint32_t  SCRATCHPTR;                        /*!< Pointer to data area used for temporary storage                       */
X  volatile uint32_t  SCRATCHPTR;                         
N} NRF_CCM_Type;
N
N
N/* ================================================================================ */
N/* ================                       AAR                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Accelerated Address Resolver (AAR)
N  */
N
Ntypedef struct {                                    /*!< AAR Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Start resolving addresses based on IRKs specified in the IRK
X  volatile  uint32_t  TASKS_START;                       
N                                                         data structure                                                        */
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop resolving addresses                                              */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED1[61];
X  volatile const  uint32_t  RESERVED1[61];
N  __IO uint32_t  EVENTS_END;                        /*!< Address resolution procedure complete                                 */
X  volatile uint32_t  EVENTS_END;                         
N  __IO uint32_t  EVENTS_RESOLVED;                   /*!< Address resolved                                                      */
X  volatile uint32_t  EVENTS_RESOLVED;                    
N  __IO uint32_t  EVENTS_NOTRESOLVED;                /*!< Address not resolved                                                  */
X  volatile uint32_t  EVENTS_NOTRESOLVED;                 
N  __I  uint32_t  RESERVED2[126];
X  volatile const  uint32_t  RESERVED2[126];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[61];
X  volatile const  uint32_t  RESERVED3[61];
N  __I  uint32_t  STATUS;                            /*!< Resolution status                                                     */
X  volatile const  uint32_t  STATUS;                             
N  __I  uint32_t  RESERVED4[63];
X  volatile const  uint32_t  RESERVED4[63];
N  __IO uint32_t  ENABLE;                            /*!< Enable AAR                                                            */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  NIRK;                              /*!< Number of IRKs                                                        */
X  volatile uint32_t  NIRK;                               
N  __IO uint32_t  IRKPTR;                            /*!< Pointer to IRK data structure                                         */
X  volatile uint32_t  IRKPTR;                             
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  __IO uint32_t  ADDRPTR;                           /*!< Pointer to the resolvable address                                     */
X  volatile uint32_t  ADDRPTR;                            
N  __IO uint32_t  SCRATCHPTR;                        /*!< Pointer to data area used for temporary storage                       */
X  volatile uint32_t  SCRATCHPTR;                         
N} NRF_AAR_Type;
N
N
N/* ================================================================================ */
N/* ================                       WDT                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Watchdog Timer (WDT)
N  */
N
Ntypedef struct {                                    /*!< WDT Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Start the watchdog                                                    */
X  volatile  uint32_t  TASKS_START;                        
N  __I  uint32_t  RESERVED0[63];
X  volatile const  uint32_t  RESERVED0[63];
N  __IO uint32_t  EVENTS_TIMEOUT;                    /*!< Watchdog timeout                                                      */
X  volatile uint32_t  EVENTS_TIMEOUT;                     
N  __I  uint32_t  RESERVED1[128];
X  volatile const  uint32_t  RESERVED1[128];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[61];
X  volatile const  uint32_t  RESERVED2[61];
N  __I  uint32_t  RUNSTATUS;                         /*!< Run status                                                            */
X  volatile const  uint32_t  RUNSTATUS;                          
N  __I  uint32_t  REQSTATUS;                         /*!< Request status                                                        */
X  volatile const  uint32_t  REQSTATUS;                          
N  __I  uint32_t  RESERVED3[63];
X  volatile const  uint32_t  RESERVED3[63];
N  __IO uint32_t  CRV;                               /*!< Counter reload value                                                  */
X  volatile uint32_t  CRV;                                
N  __IO uint32_t  RREN;                              /*!< Enable register for reload request registers                          */
X  volatile uint32_t  RREN;                               
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N  __I  uint32_t  RESERVED4[60];
X  volatile const  uint32_t  RESERVED4[60];
N  __O  uint32_t  RR[8];                             /*!< Description collection[0]: Reload request 0                           */
X  volatile  uint32_t  RR[8];                              
N} NRF_WDT_Type;
N
N
N/* ================================================================================ */
N/* ================                      QDEC                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Quadrature Decoder (QDEC)
N  */
N
Ntypedef struct {                                    /*!< QDEC Structure                                                        */
N  __O  uint32_t  TASKS_START;                       /*!< Task starting the quadrature decoder                                  */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Task stopping the quadrature decoder                                  */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_READCLRACC;                  /*!< Read and clear ACC and ACCDBL                                         */
X  volatile  uint32_t  TASKS_READCLRACC;                   
N  __O  uint32_t  TASKS_RDCLRACC;                    /*!< Read and clear ACC                                                    */
X  volatile  uint32_t  TASKS_RDCLRACC;                     
N  __O  uint32_t  TASKS_RDCLRDBL;                    /*!< Read and clear ACCDBL                                                 */
X  volatile  uint32_t  TASKS_RDCLRDBL;                     
N  __I  uint32_t  RESERVED0[59];
X  volatile const  uint32_t  RESERVED0[59];
N  __IO uint32_t  EVENTS_SAMPLERDY;                  /*!< Event being generated for every new sample value written to
X  volatile uint32_t  EVENTS_SAMPLERDY;                  
N                                                         the SAMPLE register                                                   */
N  __IO uint32_t  EVENTS_REPORTRDY;                  /*!< Non-null report ready                                                 */
X  volatile uint32_t  EVENTS_REPORTRDY;                   
N  __IO uint32_t  EVENTS_ACCOF;                      /*!< ACC or ACCDBL register overflow                                       */
X  volatile uint32_t  EVENTS_ACCOF;                       
N  __IO uint32_t  EVENTS_DBLRDY;                     /*!< Double displacement(s) detected                                       */
X  volatile uint32_t  EVENTS_DBLRDY;                      
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< QDEC has been stopped                                                 */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __I  uint32_t  RESERVED1[59];
X  volatile const  uint32_t  RESERVED1[59];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED2[64];
X  volatile const  uint32_t  RESERVED2[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[125];
X  volatile const  uint32_t  RESERVED3[125];
N  __IO uint32_t  ENABLE;                            /*!< Enable the quadrature decoder                                         */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  LEDPOL;                            /*!< LED output pin polarity                                               */
X  volatile uint32_t  LEDPOL;                             
N  __IO uint32_t  SAMPLEPER;                         /*!< Sample period                                                         */
X  volatile uint32_t  SAMPLEPER;                          
N  __I  int32_t   SAMPLE;                            /*!< Motion sample value                                                   */
X  volatile const  int32_t   SAMPLE;                             
N  __IO uint32_t  REPORTPER;                         /*!< Number of samples to be taken before REPORTRDY and DBLRDY events
X  volatile uint32_t  REPORTPER;                         
N                                                         can be generated                                                      */
N  __I  int32_t   ACC;                               /*!< Register accumulating the valid transitions                           */
X  volatile const  int32_t   ACC;                                
N  __I  int32_t   ACCREAD;                           /*!< Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC
X  volatile const  int32_t   ACCREAD;                           
N                                                         task                                                                  */
N  QDEC_PSEL_Type PSEL;                              /*!< Unspecified                                                           */
N  __IO uint32_t  DBFEN;                             /*!< Enable input debounce filters                                         */
X  volatile uint32_t  DBFEN;                              
N  __I  uint32_t  RESERVED4[5];
X  volatile const  uint32_t  RESERVED4[5];
N  __IO uint32_t  LEDPRE;                            /*!< Time period the LED is switched ON prior to sampling                  */
X  volatile uint32_t  LEDPRE;                             
N  __I  uint32_t  ACCDBL;                            /*!< Register accumulating the number of detected double transitions       */
X  volatile const  uint32_t  ACCDBL;                             
N  __I  uint32_t  ACCDBLREAD;                        /*!< Snapshot of the ACCDBL, updated by the READCLRACC or RDCLRDBL
X  volatile const  uint32_t  ACCDBLREAD;                        
N                                                         task                                                                  */
N} NRF_QDEC_Type;
N
N
N/* ================================================================================ */
N/* ================                      COMP                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Comparator (COMP)
N  */
N
Ntypedef struct {                                    /*!< COMP Structure                                                        */
N  __O  uint32_t  TASKS_START;                       /*!< Start comparator                                                      */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop comparator                                                       */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_SAMPLE;                      /*!< Sample comparator value                                               */
X  volatile  uint32_t  TASKS_SAMPLE;                       
N  __I  uint32_t  RESERVED0[61];
X  volatile const  uint32_t  RESERVED0[61];
N  __IO uint32_t  EVENTS_READY;                      /*!< COMP is ready and output is valid                                     */
X  volatile uint32_t  EVENTS_READY;                       
N  __IO uint32_t  EVENTS_DOWN;                       /*!< Downward crossing                                                     */
X  volatile uint32_t  EVENTS_DOWN;                        
N  __IO uint32_t  EVENTS_UP;                         /*!< Upward crossing                                                       */
X  volatile uint32_t  EVENTS_UP;                          
N  __IO uint32_t  EVENTS_CROSS;                      /*!< Downward or upward crossing                                           */
X  volatile uint32_t  EVENTS_CROSS;                       
N  __I  uint32_t  RESERVED1[60];
X  volatile const  uint32_t  RESERVED1[60];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED2[63];
X  volatile const  uint32_t  RESERVED2[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[61];
X  volatile const  uint32_t  RESERVED3[61];
N  __I  uint32_t  RESULT;                            /*!< Compare result                                                        */
X  volatile const  uint32_t  RESULT;                             
N  __I  uint32_t  RESERVED4[63];
X  volatile const  uint32_t  RESERVED4[63];
N  __IO uint32_t  ENABLE;                            /*!< COMP enable                                                           */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  PSEL;                              /*!< Pin select                                                            */
X  volatile uint32_t  PSEL;                               
N  __IO uint32_t  REFSEL;                            /*!< Reference source select                                               */
X  volatile uint32_t  REFSEL;                             
N  __IO uint32_t  EXTREFSEL;                         /*!< External reference select                                             */
X  volatile uint32_t  EXTREFSEL;                          
N  __I  uint32_t  RESERVED5[8];
X  volatile const  uint32_t  RESERVED5[8];
N  __IO uint32_t  TH;                                /*!< Threshold configuration for hysteresis unit                           */
X  volatile uint32_t  TH;                                 
N  __IO uint32_t  MODE;                              /*!< Mode configuration                                                    */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  HYST;                              /*!< Comparator hysteresis enable                                          */
X  volatile uint32_t  HYST;                               
N  __IO uint32_t  ISOURCE;                           /*!< Current source select on analog input                                 */
X  volatile uint32_t  ISOURCE;                            
N} NRF_COMP_Type;
N
N
N/* ================================================================================ */
N/* ================                     LPCOMP                     ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Low Power Comparator (LPCOMP)
N  */
N
Ntypedef struct {                                    /*!< LPCOMP Structure                                                      */
N  __O  uint32_t  TASKS_START;                       /*!< Start comparator                                                      */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stop comparator                                                       */
X  volatile  uint32_t  TASKS_STOP;                         
N  __O  uint32_t  TASKS_SAMPLE;                      /*!< Sample comparator value                                               */
X  volatile  uint32_t  TASKS_SAMPLE;                       
N  __I  uint32_t  RESERVED0[61];
X  volatile const  uint32_t  RESERVED0[61];
N  __IO uint32_t  EVENTS_READY;                      /*!< LPCOMP is ready and output is valid                                   */
X  volatile uint32_t  EVENTS_READY;                       
N  __IO uint32_t  EVENTS_DOWN;                       /*!< Downward crossing                                                     */
X  volatile uint32_t  EVENTS_DOWN;                        
N  __IO uint32_t  EVENTS_UP;                         /*!< Upward crossing                                                       */
X  volatile uint32_t  EVENTS_UP;                          
N  __IO uint32_t  EVENTS_CROSS;                      /*!< Downward or upward crossing                                           */
X  volatile uint32_t  EVENTS_CROSS;                       
N  __I  uint32_t  RESERVED1[60];
X  volatile const  uint32_t  RESERVED1[60];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED2[64];
X  volatile const  uint32_t  RESERVED2[64];
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[61];
X  volatile const  uint32_t  RESERVED3[61];
N  __I  uint32_t  RESULT;                            /*!< Compare result                                                        */
X  volatile const  uint32_t  RESULT;                             
N  __I  uint32_t  RESERVED4[63];
X  volatile const  uint32_t  RESERVED4[63];
N  __IO uint32_t  ENABLE;                            /*!< Enable LPCOMP                                                         */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  PSEL;                              /*!< Input pin select                                                      */
X  volatile uint32_t  PSEL;                               
N  __IO uint32_t  REFSEL;                            /*!< Reference select                                                      */
X  volatile uint32_t  REFSEL;                             
N  __IO uint32_t  EXTREFSEL;                         /*!< External reference select                                             */
X  volatile uint32_t  EXTREFSEL;                          
N  __I  uint32_t  RESERVED5[4];
X  volatile const  uint32_t  RESERVED5[4];
N  __IO uint32_t  ANADETECT;                         /*!< Analog detect configuration                                           */
X  volatile uint32_t  ANADETECT;                          
N  __I  uint32_t  RESERVED6[5];
X  volatile const  uint32_t  RESERVED6[5];
N  __IO uint32_t  HYST;                              /*!< Comparator hysteresis enable                                          */
X  volatile uint32_t  HYST;                               
N} NRF_LPCOMP_Type;
N
N
N/* ================================================================================ */
N/* ================                       SWI                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Software interrupt 0 (SWI)
N  */
N
Ntypedef struct {                                    /*!< SWI Structure                                                         */
N  __I  uint32_t  UNUSED;                            /*!< Unused.                                                               */
X  volatile const  uint32_t  UNUSED;                             
N} NRF_SWI_Type;
N
N
N/* ================================================================================ */
N/* ================                       EGU                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Event Generator Unit 0 (EGU)
N  */
N
Ntypedef struct {                                    /*!< EGU Structure                                                         */
N  __O  uint32_t  TASKS_TRIGGER[16];                 /*!< Description collection[0]: Trigger 0 for triggering the corresponding
X  volatile  uint32_t  TASKS_TRIGGER[16];                 
N                                                         TRIGGERED[0] event                                                    */
N  __I  uint32_t  RESERVED0[48];
X  volatile const  uint32_t  RESERVED0[48];
N  __IO uint32_t  EVENTS_TRIGGERED[16];              /*!< Description collection[0]: Event number 0 generated by triggering
X  volatile uint32_t  EVENTS_TRIGGERED[16];              
N                                                         the corresponding TRIGGER[0] task                                     */
N  __I  uint32_t  RESERVED1[112];
X  volatile const  uint32_t  RESERVED1[112];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N} NRF_EGU_Type;
N
N
N/* ================================================================================ */
N/* ================                       PWM                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Pulse Width Modulation Unit 0 (PWM)
N  */
N
Ntypedef struct {                                    /*!< PWM Structure                                                         */
N  __I  uint32_t  RESERVED0;
X  volatile const  uint32_t  RESERVED0;
N  __O  uint32_t  TASKS_STOP;                        /*!< Stops PWM pulse generation on all channels at the end of current
X  volatile  uint32_t  TASKS_STOP;                        
N                                                         PWM period, and stops sequence playback                               */
N  __O  uint32_t  TASKS_SEQSTART[2];                 /*!< Description collection[0]: Loads the first PWM value on all
X  volatile  uint32_t  TASKS_SEQSTART[2];                 
N                                                         enabled channels from sequence 0, and starts playing that sequence
N                                                          at the rate defined in SEQ[0]REFRESH and/or DECODER.MODE. Causes
N                                                          PWM generation to start it was not running.                          */
N  __O  uint32_t  TASKS_NEXTSTEP;                    /*!< Steps by one value in the current sequence on all enabled channels
X  volatile  uint32_t  TASKS_NEXTSTEP;                    
N                                                         if DECODER.MODE=NextStep. Does not cause PWM generation to start
N                                                          it was not running.                                                  */
N  __I  uint32_t  RESERVED1[60];
X  volatile const  uint32_t  RESERVED1[60];
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< Response to STOP task, emitted when PWM pulses are no longer
X  volatile uint32_t  EVENTS_STOPPED;                    
N                                                         generated                                                             */
N  __IO uint32_t  EVENTS_SEQSTARTED[2];              /*!< Description collection[0]: First PWM period started on sequence
X  volatile uint32_t  EVENTS_SEQSTARTED[2];              
N                                                         0                                                                     */
N  __IO uint32_t  EVENTS_SEQEND[2];                  /*!< Description collection[0]: Emitted at end of every sequence
X  volatile uint32_t  EVENTS_SEQEND[2];                  
N                                                         0, when last value from RAM has been applied to wave counter          */
N  __IO uint32_t  EVENTS_PWMPERIODEND;               /*!< Emitted at the end of each PWM period                                 */
X  volatile uint32_t  EVENTS_PWMPERIODEND;                
N  __IO uint32_t  EVENTS_LOOPSDONE;                  /*!< Concatenated sequences have been played the amount of times
X  volatile uint32_t  EVENTS_LOOPSDONE;                  
N                                                         defined in LOOP.CNT                                                   */
N  __I  uint32_t  RESERVED2[56];
X  volatile const  uint32_t  RESERVED2[56];
N  __IO uint32_t  SHORTS;                            /*!< Shortcut register                                                     */
X  volatile uint32_t  SHORTS;                             
N  __I  uint32_t  RESERVED3[63];
X  volatile const  uint32_t  RESERVED3[63];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED4[125];
X  volatile const  uint32_t  RESERVED4[125];
N  __IO uint32_t  ENABLE;                            /*!< PWM module enable register                                            */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  MODE;                              /*!< Selects operating mode of the wave counter                            */
X  volatile uint32_t  MODE;                               
N  __IO uint32_t  COUNTERTOP;                        /*!< Value up to which the pulse generator counter counts                  */
X  volatile uint32_t  COUNTERTOP;                         
N  __IO uint32_t  PRESCALER;                         /*!< Configuration for PWM_CLK                                             */
X  volatile uint32_t  PRESCALER;                          
N  __IO uint32_t  DECODER;                           /*!< Configuration of the decoder                                          */
X  volatile uint32_t  DECODER;                            
N  __IO uint32_t  LOOP;                              /*!< Amount of playback of a loop                                          */
X  volatile uint32_t  LOOP;                               
N  __I  uint32_t  RESERVED5[2];
X  volatile const  uint32_t  RESERVED5[2];
N  PWM_SEQ_Type SEQ[2];                              /*!< Unspecified                                                           */
N  PWM_PSEL_Type PSEL;                               /*!< Unspecified                                                           */
N} NRF_PWM_Type;
N
N
N/* ================================================================================ */
N/* ================                       PDM                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Pulse Density Modulation (Digital Microphone) Interface (PDM)
N  */
N
Ntypedef struct {                                    /*!< PDM Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Starts continuous PDM transfer                                        */
X  volatile  uint32_t  TASKS_START;                        
N  __O  uint32_t  TASKS_STOP;                        /*!< Stops PDM transfer                                                    */
X  volatile  uint32_t  TASKS_STOP;                         
N  __I  uint32_t  RESERVED0[62];
X  volatile const  uint32_t  RESERVED0[62];
N  __IO uint32_t  EVENTS_STARTED;                    /*!< PDM transfer has started                                              */
X  volatile uint32_t  EVENTS_STARTED;                     
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< PDM transfer has finished                                             */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __IO uint32_t  EVENTS_END;                        /*!< The PDM has written the last sample specified by SAMPLE.MAXCNT
X  volatile uint32_t  EVENTS_END;                        
N                                                         (or the last sample after a STOP task has been received) to
N                                                          Data RAM                                                             */
N  __I  uint32_t  RESERVED1[125];
X  volatile const  uint32_t  RESERVED1[125];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED2[125];
X  volatile const  uint32_t  RESERVED2[125];
N  __IO uint32_t  ENABLE;                            /*!< PDM module enable register                                            */
X  volatile uint32_t  ENABLE;                             
N  __IO uint32_t  PDMCLKCTRL;                        /*!< PDM clock generator control                                           */
X  volatile uint32_t  PDMCLKCTRL;                         
N  __IO uint32_t  MODE;                              /*!< Defines the routing of the connected PDM microphones' signals         */
X  volatile uint32_t  MODE;                               
N  __I  uint32_t  RESERVED3[3];
X  volatile const  uint32_t  RESERVED3[3];
N  __IO uint32_t  GAINL;                             /*!< Left output gain adjustment                                           */
X  volatile uint32_t  GAINL;                              
N  __IO uint32_t  GAINR;                             /*!< Right output gain adjustment                                          */
X  volatile uint32_t  GAINR;                              
N  __I  uint32_t  RESERVED4[8];
X  volatile const  uint32_t  RESERVED4[8];
N  PDM_PSEL_Type PSEL;                               /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED5[6];
X  volatile const  uint32_t  RESERVED5[6];
N  PDM_SAMPLE_Type SAMPLE;                           /*!< Unspecified                                                           */
N} NRF_PDM_Type;
N
N
N/* ================================================================================ */
N/* ================                      NVMC                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Non Volatile Memory Controller (NVMC)
N  */
N
Ntypedef struct {                                    /*!< NVMC Structure                                                        */
N  __I  uint32_t  RESERVED0[256];
X  volatile const  uint32_t  RESERVED0[256];
N  __I  uint32_t  READY;                             /*!< Ready flag                                                            */
X  volatile const  uint32_t  READY;                              
N  __I  uint32_t  RESERVED1[64];
X  volatile const  uint32_t  RESERVED1[64];
N  __IO uint32_t  CONFIG;                            /*!< Configuration register                                                */
X  volatile uint32_t  CONFIG;                             
N  
N  union {
N    __IO uint32_t  ERASEPCR1;                       /*!< Deprecated register - Register for erasing a page in Code area.
X    volatile uint32_t  ERASEPCR1;                       
N                                                         Equivalent to ERASEPAGE.                                              */
N    __IO uint32_t  ERASEPAGE;                       /*!< Register for erasing a page in Code area                              */
X    volatile uint32_t  ERASEPAGE;                        
N  };
N  __IO uint32_t  ERASEALL;                          /*!< Register for erasing all non-volatile user memory                     */
X  volatile uint32_t  ERASEALL;                           
N  __IO uint32_t  ERASEPCR0;                         /*!< Deprecated register - Register for erasing a page in Code area.
X  volatile uint32_t  ERASEPCR0;                         
N                                                         Equivalent to ERASEPAGE.                                              */
N  __IO uint32_t  ERASEUICR;                         /*!< Register for erasing User Information Configuration Registers         */
X  volatile uint32_t  ERASEUICR;                          
N  __I  uint32_t  RESERVED2[10];
X  volatile const  uint32_t  RESERVED2[10];
N  __IO uint32_t  ICACHECNF;                         /*!< I-Code cache configuration register.                                  */
X  volatile uint32_t  ICACHECNF;                          
N  __I  uint32_t  RESERVED3;
X  volatile const  uint32_t  RESERVED3;
N  __IO uint32_t  IHIT;                              /*!< I-Code cache hit counter.                                             */
X  volatile uint32_t  IHIT;                               
N  __IO uint32_t  IMISS;                             /*!< I-Code cache miss counter.                                            */
X  volatile uint32_t  IMISS;                              
N} NRF_NVMC_Type;
N
N
N/* ================================================================================ */
N/* ================                       PPI                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Programmable Peripheral Interconnect (PPI)
N  */
N
Ntypedef struct {                                    /*!< PPI Structure                                                         */
N  PPI_TASKS_CHG_Type TASKS_CHG[6];                  /*!< Channel group tasks                                                   */
N  __I  uint32_t  RESERVED0[308];
X  volatile const  uint32_t  RESERVED0[308];
N  __IO uint32_t  CHEN;                              /*!< Channel enable register                                               */
X  volatile uint32_t  CHEN;                               
N  __IO uint32_t  CHENSET;                           /*!< Channel enable set register                                           */
X  volatile uint32_t  CHENSET;                            
N  __IO uint32_t  CHENCLR;                           /*!< Channel enable clear register                                         */
X  volatile uint32_t  CHENCLR;                            
N  __I  uint32_t  RESERVED1;
X  volatile const  uint32_t  RESERVED1;
N  PPI_CH_Type CH[20];                               /*!< PPI Channel                                                           */
N  __I  uint32_t  RESERVED2[148];
X  volatile const  uint32_t  RESERVED2[148];
N  __IO uint32_t  CHG[6];                            /*!< Description collection[0]: Channel group 0                            */
X  volatile uint32_t  CHG[6];                             
N  __I  uint32_t  RESERVED3[62];
X  volatile const  uint32_t  RESERVED3[62];
N  PPI_FORK_Type FORK[32];                           /*!< Fork                                                                  */
N} NRF_PPI_Type;
N
N
N/* ================================================================================ */
N/* ================                       MWU                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Memory Watch Unit (MWU)
N  */
N
Ntypedef struct {                                    /*!< MWU Structure                                                         */
N  __I  uint32_t  RESERVED0[64];
X  volatile const  uint32_t  RESERVED0[64];
N  MWU_EVENTS_REGION_Type EVENTS_REGION[4];          /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED1[16];
X  volatile const  uint32_t  RESERVED1[16];
N  MWU_EVENTS_PREGION_Type EVENTS_PREGION[2];        /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED2[100];
X  volatile const  uint32_t  RESERVED2[100];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[5];
X  volatile const  uint32_t  RESERVED3[5];
N  __IO uint32_t  NMIEN;                             /*!< Enable or disable non-maskable interrupt                              */
X  volatile uint32_t  NMIEN;                              
N  __IO uint32_t  NMIENSET;                          /*!< Enable non-maskable interrupt                                         */
X  volatile uint32_t  NMIENSET;                           
N  __IO uint32_t  NMIENCLR;                          /*!< Disable non-maskable interrupt                                        */
X  volatile uint32_t  NMIENCLR;                           
N  __I  uint32_t  RESERVED4[53];
X  volatile const  uint32_t  RESERVED4[53];
N  MWU_PERREGION_Type PERREGION[2];                  /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED5[64];
X  volatile const  uint32_t  RESERVED5[64];
N  __IO uint32_t  REGIONEN;                          /*!< Enable/disable regions watch                                          */
X  volatile uint32_t  REGIONEN;                           
N  __IO uint32_t  REGIONENSET;                       /*!< Enable regions watch                                                  */
X  volatile uint32_t  REGIONENSET;                        
N  __IO uint32_t  REGIONENCLR;                       /*!< Disable regions watch                                                 */
X  volatile uint32_t  REGIONENCLR;                        
N  __I  uint32_t  RESERVED6[57];
X  volatile const  uint32_t  RESERVED6[57];
N  MWU_REGION_Type REGION[4];                        /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED7[32];
X  volatile const  uint32_t  RESERVED7[32];
N  MWU_PREGION_Type PREGION[2];                      /*!< Unspecified                                                           */
N} NRF_MWU_Type;
N
N
N/* ================================================================================ */
N/* ================                       I2S                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief Inter-IC Sound (I2S)
N  */
N
Ntypedef struct {                                    /*!< I2S Structure                                                         */
N  __O  uint32_t  TASKS_START;                       /*!< Starts continuous I2S transfer. Also starts MCK generator when
X  volatile  uint32_t  TASKS_START;                       
N                                                         this is enabled.                                                      */
N  __O  uint32_t  TASKS_STOP;                        /*!< Stops I2S transfer. Also stops MCK generator. Triggering this
X  volatile  uint32_t  TASKS_STOP;                        
N                                                         task will cause the {event:STOPPED} event to be generated.            */
N  __I  uint32_t  RESERVED0[63];
X  volatile const  uint32_t  RESERVED0[63];
N  __IO uint32_t  EVENTS_RXPTRUPD;                   /*!< The RXD.PTR register has been copied to internal double-buffers.
X  volatile uint32_t  EVENTS_RXPTRUPD;                   
N                                                         When the I2S module is started and RX is enabled, this event
N                                                          will be generated for every RXTXD.MAXCNT words that are received
N                                                          on the SDIN pin.                                                     */
N  __IO uint32_t  EVENTS_STOPPED;                    /*!< I2S transfer stopped.                                                 */
X  volatile uint32_t  EVENTS_STOPPED;                     
N  __I  uint32_t  RESERVED1[2];
X  volatile const  uint32_t  RESERVED1[2];
N  __IO uint32_t  EVENTS_TXPTRUPD;                   /*!< The TDX.PTR register has been copied to internal double-buffers.
X  volatile uint32_t  EVENTS_TXPTRUPD;                   
N                                                         When the I2S module is started and TX is enabled, this event
N                                                          will be generated for every RXTXD.MAXCNT words that are sent
N                                                          on the SDOUT pin.                                                    */
N  __I  uint32_t  RESERVED2[122];
X  volatile const  uint32_t  RESERVED2[122];
N  __IO uint32_t  INTEN;                             /*!< Enable or disable interrupt                                           */
X  volatile uint32_t  INTEN;                              
N  __IO uint32_t  INTENSET;                          /*!< Enable interrupt                                                      */
X  volatile uint32_t  INTENSET;                           
N  __IO uint32_t  INTENCLR;                          /*!< Disable interrupt                                                     */
X  volatile uint32_t  INTENCLR;                           
N  __I  uint32_t  RESERVED3[125];
X  volatile const  uint32_t  RESERVED3[125];
N  __IO uint32_t  ENABLE;                            /*!< Enable I2S module.                                                    */
X  volatile uint32_t  ENABLE;                             
N  I2S_CONFIG_Type CONFIG;                           /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED4[3];
X  volatile const  uint32_t  RESERVED4[3];
N  I2S_RXD_Type RXD;                                 /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED5;
X  volatile const  uint32_t  RESERVED5;
N  I2S_TXD_Type TXD;                                 /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED6[3];
X  volatile const  uint32_t  RESERVED6[3];
N  I2S_RXTXD_Type RXTXD;                             /*!< Unspecified                                                           */
N  __I  uint32_t  RESERVED7[3];
X  volatile const  uint32_t  RESERVED7[3];
N  I2S_PSEL_Type PSEL;                               /*!< Unspecified                                                           */
N} NRF_I2S_Type;
N
N
N/* ================================================================================ */
N/* ================                       FPU                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief FPU (FPU)
N  */
N
Ntypedef struct {                                    /*!< FPU Structure                                                         */
N  __I  uint32_t  UNUSED;                            /*!< Unused.                                                               */
X  volatile const  uint32_t  UNUSED;                             
N} NRF_FPU_Type;
N
N
N/* ================================================================================ */
N/* ================                      GPIO                      ================ */
N/* ================================================================================ */
N
N
N/**
N  * @brief GPIO Port 1 (GPIO)
N  */
N
Ntypedef struct {                                    /*!< GPIO Structure                                                        */
N  __I  uint32_t  RESERVED0[321];
X  volatile const  uint32_t  RESERVED0[321];
N  __IO uint32_t  OUT;                               /*!< Write GPIO port                                                       */
X  volatile uint32_t  OUT;                                
N  __IO uint32_t  OUTSET;                            /*!< Set individual bits in GPIO port                                      */
X  volatile uint32_t  OUTSET;                             
N  __IO uint32_t  OUTCLR;                            /*!< Clear individual bits in GPIO port                                    */
X  volatile uint32_t  OUTCLR;                             
N  __I  uint32_t  IN;                                /*!< Read GPIO port                                                        */
X  volatile const  uint32_t  IN;                                 
N  __IO uint32_t  DIR;                               /*!< Direction of GPIO pins                                                */
X  volatile uint32_t  DIR;                                
N  __IO uint32_t  DIRSET;                            /*!< DIR set register                                                      */
X  volatile uint32_t  DIRSET;                             
N  __IO uint32_t  DIRCLR;                            /*!< DIR clear register                                                    */
X  volatile uint32_t  DIRCLR;                             
N  __IO uint32_t  LATCH;                             /*!< Latch register indicating what GPIO pins that have met the criteria
X  volatile uint32_t  LATCH;                             
N                                                         set in the PIN_CNF[n].SENSE registers                                 */
N  __IO uint32_t  DETECTMODE;                        /*!< Select between default DETECT signal behaviour and LDETECT mode       */
X  volatile uint32_t  DETECTMODE;                         
N  __I  uint32_t  RESERVED1[118];
X  volatile const  uint32_t  RESERVED1[118];
N  __IO uint32_t  PIN_CNF[32];                       /*!< Description collection[0]: Configuration of GPIO pins                 */
X  volatile uint32_t  PIN_CNF[32];                        
N} NRF_GPIO_Type;
N
N
N/* --------------------  End of section using anonymous unions  ------------------- */
N#if defined(__CC_ARM)
X#if 1L
N  #pragma pop
N#elif defined(__ICCARM__)
S  /* leave anonymous unions enabled */
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning restore
S#else
S  #warning Not supported compiler type
N#endif
N
N
N
N
N/* ================================================================================ */
N/* ================              Peripheral memory map             ================ */
N/* ================================================================================ */
N
N#define NRF_FICR_BASE                   0x10000000UL
N#define NRF_UICR_BASE                   0x10001000UL
N#define NRF_BPROT_BASE                  0x40000000UL
N#define NRF_POWER_BASE                  0x40000000UL
N#define NRF_CLOCK_BASE                  0x40000000UL
N#define NRF_RADIO_BASE                  0x40001000UL
N#define NRF_UARTE0_BASE                 0x40002000UL
N#define NRF_UART0_BASE                  0x40002000UL
N#define NRF_SPIM0_BASE                  0x40003000UL
N#define NRF_SPIS0_BASE                  0x40003000UL
N#define NRF_TWIM0_BASE                  0x40003000UL
N#define NRF_TWIS0_BASE                  0x40003000UL
N#define NRF_SPI0_BASE                   0x40003000UL
N#define NRF_TWI0_BASE                   0x40003000UL
N#define NRF_SPIM1_BASE                  0x40004000UL
N#define NRF_SPIS1_BASE                  0x40004000UL
N#define NRF_TWIM1_BASE                  0x40004000UL
N#define NRF_TWIS1_BASE                  0x40004000UL
N#define NRF_SPI1_BASE                   0x40004000UL
N#define NRF_TWI1_BASE                   0x40004000UL
N#define NRF_NFCT_BASE                   0x40005000UL
N#define NRF_GPIOTE_BASE                 0x40006000UL
N#define NRF_SAADC_BASE                  0x40007000UL
N#define NRF_TIMER0_BASE                 0x40008000UL
N#define NRF_TIMER1_BASE                 0x40009000UL
N#define NRF_TIMER2_BASE                 0x4000A000UL
N#define NRF_RTC0_BASE                   0x4000B000UL
N#define NRF_TEMP_BASE                   0x4000C000UL
N#define NRF_RNG_BASE                    0x4000D000UL
N#define NRF_ECB_BASE                    0x4000E000UL
N#define NRF_CCM_BASE                    0x4000F000UL
N#define NRF_AAR_BASE                    0x4000F000UL
N#define NRF_WDT_BASE                    0x40010000UL
N#define NRF_RTC1_BASE                   0x40011000UL
N#define NRF_QDEC_BASE                   0x40012000UL
N#define NRF_COMP_BASE                   0x40013000UL
N#define NRF_LPCOMP_BASE                 0x40013000UL
N#define NRF_SWI0_BASE                   0x40014000UL
N#define NRF_EGU0_BASE                   0x40014000UL
N#define NRF_SWI1_BASE                   0x40015000UL
N#define NRF_EGU1_BASE                   0x40015000UL
N#define NRF_SWI2_BASE                   0x40016000UL
N#define NRF_EGU2_BASE                   0x40016000UL
N#define NRF_SWI3_BASE                   0x40017000UL
N#define NRF_EGU3_BASE                   0x40017000UL
N#define NRF_SWI4_BASE                   0x40018000UL
N#define NRF_EGU4_BASE                   0x40018000UL
N#define NRF_SWI5_BASE                   0x40019000UL
N#define NRF_EGU5_BASE                   0x40019000UL
N#define NRF_TIMER3_BASE                 0x4001A000UL
N#define NRF_TIMER4_BASE                 0x4001B000UL
N#define NRF_PWM0_BASE                   0x4001C000UL
N#define NRF_PDM_BASE                    0x4001D000UL
N#define NRF_NVMC_BASE                   0x4001E000UL
N#define NRF_PPI_BASE                    0x4001F000UL
N#define NRF_MWU_BASE                    0x40020000UL
N#define NRF_PWM1_BASE                   0x40021000UL
N#define NRF_PWM2_BASE                   0x40022000UL
N#define NRF_SPIM2_BASE                  0x40023000UL
N#define NRF_SPIS2_BASE                  0x40023000UL
N#define NRF_SPI2_BASE                   0x40023000UL
N#define NRF_RTC2_BASE                   0x40024000UL
N#define NRF_I2S_BASE                    0x40025000UL
N#define NRF_FPU_BASE                    0x40026000UL
N#define NRF_P0_BASE                     0x50000000UL
N
N
N/* ================================================================================ */
N/* ================             Peripheral declaration             ================ */
N/* ================================================================================ */
N
N#define NRF_FICR                        ((NRF_FICR_Type           *) NRF_FICR_BASE)
N#define NRF_UICR                        ((NRF_UICR_Type           *) NRF_UICR_BASE)
N#define NRF_BPROT                       ((NRF_BPROT_Type          *) NRF_BPROT_BASE)
N#define NRF_POWER                       ((NRF_POWER_Type          *) NRF_POWER_BASE)
N#define NRF_CLOCK                       ((NRF_CLOCK_Type          *) NRF_CLOCK_BASE)
N#define NRF_RADIO                       ((NRF_RADIO_Type          *) NRF_RADIO_BASE)
N#define NRF_UARTE0                      ((NRF_UARTE_Type          *) NRF_UARTE0_BASE)
N#define NRF_UART0                       ((NRF_UART_Type           *) NRF_UART0_BASE)
N#define NRF_SPIM0                       ((NRF_SPIM_Type           *) NRF_SPIM0_BASE)
N#define NRF_SPIS0                       ((NRF_SPIS_Type           *) NRF_SPIS0_BASE)
N#define NRF_TWIM0                       ((NRF_TWIM_Type           *) NRF_TWIM0_BASE)
N#define NRF_TWIS0                       ((NRF_TWIS_Type           *) NRF_TWIS0_BASE)
N#define NRF_SPI0                        ((NRF_SPI_Type            *) NRF_SPI0_BASE)
N#define NRF_TWI0                        ((NRF_TWI_Type            *) NRF_TWI0_BASE)
N#define NRF_SPIM1                       ((NRF_SPIM_Type           *) NRF_SPIM1_BASE)
N#define NRF_SPIS1                       ((NRF_SPIS_Type           *) NRF_SPIS1_BASE)
N#define NRF_TWIM1                       ((NRF_TWIM_Type           *) NRF_TWIM1_BASE)
N#define NRF_TWIS1                       ((NRF_TWIS_Type           *) NRF_TWIS1_BASE)
N#define NRF_SPI1                        ((NRF_SPI_Type            *) NRF_SPI1_BASE)
N#define NRF_TWI1                        ((NRF_TWI_Type            *) NRF_TWI1_BASE)
N#define NRF_NFCT                        ((NRF_NFCT_Type           *) NRF_NFCT_BASE)
N#define NRF_GPIOTE                      ((NRF_GPIOTE_Type         *) NRF_GPIOTE_BASE)
N#define NRF_SAADC                       ((NRF_SAADC_Type          *) NRF_SAADC_BASE)
N#define NRF_TIMER0                      ((NRF_TIMER_Type          *) NRF_TIMER0_BASE)
N#define NRF_TIMER1                      ((NRF_TIMER_Type          *) NRF_TIMER1_BASE)
N#define NRF_TIMER2                      ((NRF_TIMER_Type          *) NRF_TIMER2_BASE)
N#define NRF_RTC0                        ((NRF_RTC_Type            *) NRF_RTC0_BASE)
N#define NRF_TEMP                        ((NRF_TEMP_Type           *) NRF_TEMP_BASE)
N#define NRF_RNG                         ((NRF_RNG_Type            *) NRF_RNG_BASE)
N#define NRF_ECB                         ((NRF_ECB_Type            *) NRF_ECB_BASE)
N#define NRF_CCM                         ((NRF_CCM_Type            *) NRF_CCM_BASE)
N#define NRF_AAR                         ((NRF_AAR_Type            *) NRF_AAR_BASE)
N#define NRF_WDT                         ((NRF_WDT_Type            *) NRF_WDT_BASE)
N#define NRF_RTC1                        ((NRF_RTC_Type            *) NRF_RTC1_BASE)
N#define NRF_QDEC                        ((NRF_QDEC_Type           *) NRF_QDEC_BASE)
N#define NRF_COMP                        ((NRF_COMP_Type           *) NRF_COMP_BASE)
N#define NRF_LPCOMP                      ((NRF_LPCOMP_Type         *) NRF_LPCOMP_BASE)
N#define NRF_SWI0                        ((NRF_SWI_Type            *) NRF_SWI0_BASE)
N#define NRF_EGU0                        ((NRF_EGU_Type            *) NRF_EGU0_BASE)
N#define NRF_SWI1                        ((NRF_SWI_Type            *) NRF_SWI1_BASE)
N#define NRF_EGU1                        ((NRF_EGU_Type            *) NRF_EGU1_BASE)
N#define NRF_SWI2                        ((NRF_SWI_Type            *) NRF_SWI2_BASE)
N#define NRF_EGU2                        ((NRF_EGU_Type            *) NRF_EGU2_BASE)
N#define NRF_SWI3                        ((NRF_SWI_Type            *) NRF_SWI3_BASE)
N#define NRF_EGU3                        ((NRF_EGU_Type            *) NRF_EGU3_BASE)
N#define NRF_SWI4                        ((NRF_SWI_Type            *) NRF_SWI4_BASE)
N#define NRF_EGU4                        ((NRF_EGU_Type            *) NRF_EGU4_BASE)
N#define NRF_SWI5                        ((NRF_SWI_Type            *) NRF_SWI5_BASE)
N#define NRF_EGU5                        ((NRF_EGU_Type            *) NRF_EGU5_BASE)
N#define NRF_TIMER3                      ((NRF_TIMER_Type          *) NRF_TIMER3_BASE)
N#define NRF_TIMER4                      ((NRF_TIMER_Type          *) NRF_TIMER4_BASE)
N#define NRF_PWM0                        ((NRF_PWM_Type            *) NRF_PWM0_BASE)
N#define NRF_PDM                         ((NRF_PDM_Type            *) NRF_PDM_BASE)
N#define NRF_NVMC                        ((NRF_NVMC_Type           *) NRF_NVMC_BASE)
N#define NRF_PPI                         ((NRF_PPI_Type            *) NRF_PPI_BASE)
N#define NRF_MWU                         ((NRF_MWU_Type            *) NRF_MWU_BASE)
N#define NRF_PWM1                        ((NRF_PWM_Type            *) NRF_PWM1_BASE)
N#define NRF_PWM2                        ((NRF_PWM_Type            *) NRF_PWM2_BASE)
N#define NRF_SPIM2                       ((NRF_SPIM_Type           *) NRF_SPIM2_BASE)
N#define NRF_SPIS2                       ((NRF_SPIS_Type           *) NRF_SPIS2_BASE)
N#define NRF_SPI2                        ((NRF_SPI_Type            *) NRF_SPI2_BASE)
N#define NRF_RTC2                        ((NRF_RTC_Type            *) NRF_RTC2_BASE)
N#define NRF_I2S                         ((NRF_I2S_Type            *) NRF_I2S_BASE)
N#define NRF_FPU                         ((NRF_FPU_Type            *) NRF_FPU_BASE)
N#define NRF_P0                          ((NRF_GPIO_Type           *) NRF_P0_BASE)
N
N
N/** @} */ /* End of group Device_Peripheral_Registers */
N/** @} */ /* End of group nrf52 */
N/** @} */ /* End of group Nordic Semiconductor */
N
N#ifdef __cplusplus
S}
N#endif
N
N
N#endif  /* nrf52_H */
N
L 54 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 2
N        #include "nrf52_bitfields.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52_bitfields.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef __NRF52_BITS_H
N#define __NRF52_BITS_H
N
N/*lint ++flb "Enter library region" */
N
N/* Peripheral: AAR */
N/* Description: Accelerated Address Resolver */
N
N/* Register: AAR_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 2 : Write '1' to Enable interrupt for NOTRESOLVED event */
N#define AAR_INTENSET_NOTRESOLVED_Pos (2UL) /*!< Position of NOTRESOLVED field. */
N#define AAR_INTENSET_NOTRESOLVED_Msk (0x1UL << AAR_INTENSET_NOTRESOLVED_Pos) /*!< Bit mask of NOTRESOLVED field. */
N#define AAR_INTENSET_NOTRESOLVED_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENSET_NOTRESOLVED_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENSET_NOTRESOLVED_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for RESOLVED event */
N#define AAR_INTENSET_RESOLVED_Pos (1UL) /*!< Position of RESOLVED field. */
N#define AAR_INTENSET_RESOLVED_Msk (0x1UL << AAR_INTENSET_RESOLVED_Pos) /*!< Bit mask of RESOLVED field. */
N#define AAR_INTENSET_RESOLVED_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENSET_RESOLVED_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENSET_RESOLVED_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for END event */
N#define AAR_INTENSET_END_Pos (0UL) /*!< Position of END field. */
N#define AAR_INTENSET_END_Msk (0x1UL << AAR_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define AAR_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Register: AAR_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 2 : Write '1' to Disable interrupt for NOTRESOLVED event */
N#define AAR_INTENCLR_NOTRESOLVED_Pos (2UL) /*!< Position of NOTRESOLVED field. */
N#define AAR_INTENCLR_NOTRESOLVED_Msk (0x1UL << AAR_INTENCLR_NOTRESOLVED_Pos) /*!< Bit mask of NOTRESOLVED field. */
N#define AAR_INTENCLR_NOTRESOLVED_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENCLR_NOTRESOLVED_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENCLR_NOTRESOLVED_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for RESOLVED event */
N#define AAR_INTENCLR_RESOLVED_Pos (1UL) /*!< Position of RESOLVED field. */
N#define AAR_INTENCLR_RESOLVED_Msk (0x1UL << AAR_INTENCLR_RESOLVED_Pos) /*!< Bit mask of RESOLVED field. */
N#define AAR_INTENCLR_RESOLVED_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENCLR_RESOLVED_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENCLR_RESOLVED_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for END event */
N#define AAR_INTENCLR_END_Pos (0UL) /*!< Position of END field. */
N#define AAR_INTENCLR_END_Msk (0x1UL << AAR_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define AAR_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define AAR_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define AAR_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Register: AAR_STATUS */
N/* Description: Resolution status */
N
N/* Bits 3..0 : The IRK that was used last time an address was resolved */
N#define AAR_STATUS_STATUS_Pos (0UL) /*!< Position of STATUS field. */
N#define AAR_STATUS_STATUS_Msk (0xFUL << AAR_STATUS_STATUS_Pos) /*!< Bit mask of STATUS field. */
N
N/* Register: AAR_ENABLE */
N/* Description: Enable AAR */
N
N/* Bits 1..0 : Enable or disable AAR */
N#define AAR_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define AAR_ENABLE_ENABLE_Msk (0x3UL << AAR_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define AAR_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define AAR_ENABLE_ENABLE_Enabled (3UL) /*!< Enable */
N
N/* Register: AAR_NIRK */
N/* Description: Number of IRKs */
N
N/* Bits 4..0 : Number of Identity root keys available in the IRK data structure */
N#define AAR_NIRK_NIRK_Pos (0UL) /*!< Position of NIRK field. */
N#define AAR_NIRK_NIRK_Msk (0x1FUL << AAR_NIRK_NIRK_Pos) /*!< Bit mask of NIRK field. */
N
N/* Register: AAR_IRKPTR */
N/* Description: Pointer to IRK data structure */
N
N/* Bits 31..0 : Pointer to the IRK data structure */
N#define AAR_IRKPTR_IRKPTR_Pos (0UL) /*!< Position of IRKPTR field. */
N#define AAR_IRKPTR_IRKPTR_Msk (0xFFFFFFFFUL << AAR_IRKPTR_IRKPTR_Pos) /*!< Bit mask of IRKPTR field. */
N
N/* Register: AAR_ADDRPTR */
N/* Description: Pointer to the resolvable address */
N
N/* Bits 31..0 : Pointer to the resolvable address (6-bytes) */
N#define AAR_ADDRPTR_ADDRPTR_Pos (0UL) /*!< Position of ADDRPTR field. */
N#define AAR_ADDRPTR_ADDRPTR_Msk (0xFFFFFFFFUL << AAR_ADDRPTR_ADDRPTR_Pos) /*!< Bit mask of ADDRPTR field. */
N
N/* Register: AAR_SCRATCHPTR */
N/* Description: Pointer to data area used for temporary storage */
N
N/* Bits 31..0 : Pointer to a scratch data area used for temporary storage during resolution.A space of minimum 3 bytes must be reserved. */
N#define AAR_SCRATCHPTR_SCRATCHPTR_Pos (0UL) /*!< Position of SCRATCHPTR field. */
N#define AAR_SCRATCHPTR_SCRATCHPTR_Msk (0xFFFFFFFFUL << AAR_SCRATCHPTR_SCRATCHPTR_Pos) /*!< Bit mask of SCRATCHPTR field. */
N
N
N/* Peripheral: BPROT */
N/* Description: Block Protect */
N
N/* Register: BPROT_CONFIG0 */
N/* Description: Block protect configuration register 0 */
N
N/* Bit 31 : Enable protection for region 31. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION31_Pos (31UL) /*!< Position of REGION31 field. */
N#define BPROT_CONFIG0_REGION31_Msk (0x1UL << BPROT_CONFIG0_REGION31_Pos) /*!< Bit mask of REGION31 field. */
N#define BPROT_CONFIG0_REGION31_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION31_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 30 : Enable protection for region 30. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION30_Pos (30UL) /*!< Position of REGION30 field. */
N#define BPROT_CONFIG0_REGION30_Msk (0x1UL << BPROT_CONFIG0_REGION30_Pos) /*!< Bit mask of REGION30 field. */
N#define BPROT_CONFIG0_REGION30_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION30_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 29 : Enable protection for region 29. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION29_Pos (29UL) /*!< Position of REGION29 field. */
N#define BPROT_CONFIG0_REGION29_Msk (0x1UL << BPROT_CONFIG0_REGION29_Pos) /*!< Bit mask of REGION29 field. */
N#define BPROT_CONFIG0_REGION29_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION29_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 28 : Enable protection for region 28. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION28_Pos (28UL) /*!< Position of REGION28 field. */
N#define BPROT_CONFIG0_REGION28_Msk (0x1UL << BPROT_CONFIG0_REGION28_Pos) /*!< Bit mask of REGION28 field. */
N#define BPROT_CONFIG0_REGION28_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION28_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 27 : Enable protection for region 27. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION27_Pos (27UL) /*!< Position of REGION27 field. */
N#define BPROT_CONFIG0_REGION27_Msk (0x1UL << BPROT_CONFIG0_REGION27_Pos) /*!< Bit mask of REGION27 field. */
N#define BPROT_CONFIG0_REGION27_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION27_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 26 : Enable protection for region 26. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION26_Pos (26UL) /*!< Position of REGION26 field. */
N#define BPROT_CONFIG0_REGION26_Msk (0x1UL << BPROT_CONFIG0_REGION26_Pos) /*!< Bit mask of REGION26 field. */
N#define BPROT_CONFIG0_REGION26_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION26_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 25 : Enable protection for region 25. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION25_Pos (25UL) /*!< Position of REGION25 field. */
N#define BPROT_CONFIG0_REGION25_Msk (0x1UL << BPROT_CONFIG0_REGION25_Pos) /*!< Bit mask of REGION25 field. */
N#define BPROT_CONFIG0_REGION25_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION25_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 24 : Enable protection for region 24. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION24_Pos (24UL) /*!< Position of REGION24 field. */
N#define BPROT_CONFIG0_REGION24_Msk (0x1UL << BPROT_CONFIG0_REGION24_Pos) /*!< Bit mask of REGION24 field. */
N#define BPROT_CONFIG0_REGION24_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION24_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 23 : Enable protection for region 23. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION23_Pos (23UL) /*!< Position of REGION23 field. */
N#define BPROT_CONFIG0_REGION23_Msk (0x1UL << BPROT_CONFIG0_REGION23_Pos) /*!< Bit mask of REGION23 field. */
N#define BPROT_CONFIG0_REGION23_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION23_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 22 : Enable protection for region 22. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION22_Pos (22UL) /*!< Position of REGION22 field. */
N#define BPROT_CONFIG0_REGION22_Msk (0x1UL << BPROT_CONFIG0_REGION22_Pos) /*!< Bit mask of REGION22 field. */
N#define BPROT_CONFIG0_REGION22_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION22_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 21 : Enable protection for region 21. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION21_Pos (21UL) /*!< Position of REGION21 field. */
N#define BPROT_CONFIG0_REGION21_Msk (0x1UL << BPROT_CONFIG0_REGION21_Pos) /*!< Bit mask of REGION21 field. */
N#define BPROT_CONFIG0_REGION21_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION21_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 20 : Enable protection for region 20. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION20_Pos (20UL) /*!< Position of REGION20 field. */
N#define BPROT_CONFIG0_REGION20_Msk (0x1UL << BPROT_CONFIG0_REGION20_Pos) /*!< Bit mask of REGION20 field. */
N#define BPROT_CONFIG0_REGION20_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION20_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 19 : Enable protection for region 19. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION19_Pos (19UL) /*!< Position of REGION19 field. */
N#define BPROT_CONFIG0_REGION19_Msk (0x1UL << BPROT_CONFIG0_REGION19_Pos) /*!< Bit mask of REGION19 field. */
N#define BPROT_CONFIG0_REGION19_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION19_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 18 : Enable protection for region 18. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION18_Pos (18UL) /*!< Position of REGION18 field. */
N#define BPROT_CONFIG0_REGION18_Msk (0x1UL << BPROT_CONFIG0_REGION18_Pos) /*!< Bit mask of REGION18 field. */
N#define BPROT_CONFIG0_REGION18_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION18_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 17 : Enable protection for region 17. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION17_Pos (17UL) /*!< Position of REGION17 field. */
N#define BPROT_CONFIG0_REGION17_Msk (0x1UL << BPROT_CONFIG0_REGION17_Pos) /*!< Bit mask of REGION17 field. */
N#define BPROT_CONFIG0_REGION17_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION17_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 16 : Enable protection for region 16. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION16_Pos (16UL) /*!< Position of REGION16 field. */
N#define BPROT_CONFIG0_REGION16_Msk (0x1UL << BPROT_CONFIG0_REGION16_Pos) /*!< Bit mask of REGION16 field. */
N#define BPROT_CONFIG0_REGION16_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION16_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 15 : Enable protection for region 15. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION15_Pos (15UL) /*!< Position of REGION15 field. */
N#define BPROT_CONFIG0_REGION15_Msk (0x1UL << BPROT_CONFIG0_REGION15_Pos) /*!< Bit mask of REGION15 field. */
N#define BPROT_CONFIG0_REGION15_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION15_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 14 : Enable protection for region 14. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION14_Pos (14UL) /*!< Position of REGION14 field. */
N#define BPROT_CONFIG0_REGION14_Msk (0x1UL << BPROT_CONFIG0_REGION14_Pos) /*!< Bit mask of REGION14 field. */
N#define BPROT_CONFIG0_REGION14_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION14_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 13 : Enable protection for region 13. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION13_Pos (13UL) /*!< Position of REGION13 field. */
N#define BPROT_CONFIG0_REGION13_Msk (0x1UL << BPROT_CONFIG0_REGION13_Pos) /*!< Bit mask of REGION13 field. */
N#define BPROT_CONFIG0_REGION13_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION13_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 12 : Enable protection for region 12. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION12_Pos (12UL) /*!< Position of REGION12 field. */
N#define BPROT_CONFIG0_REGION12_Msk (0x1UL << BPROT_CONFIG0_REGION12_Pos) /*!< Bit mask of REGION12 field. */
N#define BPROT_CONFIG0_REGION12_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION12_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 11 : Enable protection for region 11. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION11_Pos (11UL) /*!< Position of REGION11 field. */
N#define BPROT_CONFIG0_REGION11_Msk (0x1UL << BPROT_CONFIG0_REGION11_Pos) /*!< Bit mask of REGION11 field. */
N#define BPROT_CONFIG0_REGION11_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION11_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 10 : Enable protection for region 10. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION10_Pos (10UL) /*!< Position of REGION10 field. */
N#define BPROT_CONFIG0_REGION10_Msk (0x1UL << BPROT_CONFIG0_REGION10_Pos) /*!< Bit mask of REGION10 field. */
N#define BPROT_CONFIG0_REGION10_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION10_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 9 : Enable protection for region 9. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION9_Pos (9UL) /*!< Position of REGION9 field. */
N#define BPROT_CONFIG0_REGION9_Msk (0x1UL << BPROT_CONFIG0_REGION9_Pos) /*!< Bit mask of REGION9 field. */
N#define BPROT_CONFIG0_REGION9_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION9_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 8 : Enable protection for region 8. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION8_Pos (8UL) /*!< Position of REGION8 field. */
N#define BPROT_CONFIG0_REGION8_Msk (0x1UL << BPROT_CONFIG0_REGION8_Pos) /*!< Bit mask of REGION8 field. */
N#define BPROT_CONFIG0_REGION8_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION8_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 7 : Enable protection for region 7. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION7_Pos (7UL) /*!< Position of REGION7 field. */
N#define BPROT_CONFIG0_REGION7_Msk (0x1UL << BPROT_CONFIG0_REGION7_Pos) /*!< Bit mask of REGION7 field. */
N#define BPROT_CONFIG0_REGION7_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION7_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 6 : Enable protection for region 6. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION6_Pos (6UL) /*!< Position of REGION6 field. */
N#define BPROT_CONFIG0_REGION6_Msk (0x1UL << BPROT_CONFIG0_REGION6_Pos) /*!< Bit mask of REGION6 field. */
N#define BPROT_CONFIG0_REGION6_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION6_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 5 : Enable protection for region 5. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION5_Pos (5UL) /*!< Position of REGION5 field. */
N#define BPROT_CONFIG0_REGION5_Msk (0x1UL << BPROT_CONFIG0_REGION5_Pos) /*!< Bit mask of REGION5 field. */
N#define BPROT_CONFIG0_REGION5_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION5_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 4 : Enable protection for region 4. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION4_Pos (4UL) /*!< Position of REGION4 field. */
N#define BPROT_CONFIG0_REGION4_Msk (0x1UL << BPROT_CONFIG0_REGION4_Pos) /*!< Bit mask of REGION4 field. */
N#define BPROT_CONFIG0_REGION4_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION4_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 3 : Enable protection for region 3. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION3_Pos (3UL) /*!< Position of REGION3 field. */
N#define BPROT_CONFIG0_REGION3_Msk (0x1UL << BPROT_CONFIG0_REGION3_Pos) /*!< Bit mask of REGION3 field. */
N#define BPROT_CONFIG0_REGION3_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION3_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 2 : Enable protection for region 2. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION2_Pos (2UL) /*!< Position of REGION2 field. */
N#define BPROT_CONFIG0_REGION2_Msk (0x1UL << BPROT_CONFIG0_REGION2_Pos) /*!< Bit mask of REGION2 field. */
N#define BPROT_CONFIG0_REGION2_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION2_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 1 : Enable protection for region 1. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION1_Pos (1UL) /*!< Position of REGION1 field. */
N#define BPROT_CONFIG0_REGION1_Msk (0x1UL << BPROT_CONFIG0_REGION1_Pos) /*!< Bit mask of REGION1 field. */
N#define BPROT_CONFIG0_REGION1_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION1_Enabled (1UL) /*!< Protection enable */
N
N/* Bit 0 : Enable protection for region 0. Write '0' has no effect. */
N#define BPROT_CONFIG0_REGION0_Pos (0UL) /*!< Position of REGION0 field. */
N#define BPROT_CONFIG0_REGION0_Msk (0x1UL << BPROT_CONFIG0_REGION0_Pos) /*!< Bit mask of REGION0 field. */
N#define BPROT_CONFIG0_REGION0_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG0_REGION0_Enabled (1UL) /*!< Protection enable */
N
N/* Register: BPROT_CONFIG1 */
N/* Description: Block protect configuration register 1 */
N
N/* Bit 31 : Enable protection for region 63. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION63_Pos (31UL) /*!< Position of REGION63 field. */
N#define BPROT_CONFIG1_REGION63_Msk (0x1UL << BPROT_CONFIG1_REGION63_Pos) /*!< Bit mask of REGION63 field. */
N#define BPROT_CONFIG1_REGION63_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION63_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 30 : Enable protection for region 62. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION62_Pos (30UL) /*!< Position of REGION62 field. */
N#define BPROT_CONFIG1_REGION62_Msk (0x1UL << BPROT_CONFIG1_REGION62_Pos) /*!< Bit mask of REGION62 field. */
N#define BPROT_CONFIG1_REGION62_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION62_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 29 : Enable protection for region 61. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION61_Pos (29UL) /*!< Position of REGION61 field. */
N#define BPROT_CONFIG1_REGION61_Msk (0x1UL << BPROT_CONFIG1_REGION61_Pos) /*!< Bit mask of REGION61 field. */
N#define BPROT_CONFIG1_REGION61_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION61_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 28 : Enable protection for region 60. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION60_Pos (28UL) /*!< Position of REGION60 field. */
N#define BPROT_CONFIG1_REGION60_Msk (0x1UL << BPROT_CONFIG1_REGION60_Pos) /*!< Bit mask of REGION60 field. */
N#define BPROT_CONFIG1_REGION60_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION60_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 27 : Enable protection for region 59. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION59_Pos (27UL) /*!< Position of REGION59 field. */
N#define BPROT_CONFIG1_REGION59_Msk (0x1UL << BPROT_CONFIG1_REGION59_Pos) /*!< Bit mask of REGION59 field. */
N#define BPROT_CONFIG1_REGION59_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION59_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 26 : Enable protection for region 58. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION58_Pos (26UL) /*!< Position of REGION58 field. */
N#define BPROT_CONFIG1_REGION58_Msk (0x1UL << BPROT_CONFIG1_REGION58_Pos) /*!< Bit mask of REGION58 field. */
N#define BPROT_CONFIG1_REGION58_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION58_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 25 : Enable protection for region 57. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION57_Pos (25UL) /*!< Position of REGION57 field. */
N#define BPROT_CONFIG1_REGION57_Msk (0x1UL << BPROT_CONFIG1_REGION57_Pos) /*!< Bit mask of REGION57 field. */
N#define BPROT_CONFIG1_REGION57_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION57_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 24 : Enable protection for region 56. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION56_Pos (24UL) /*!< Position of REGION56 field. */
N#define BPROT_CONFIG1_REGION56_Msk (0x1UL << BPROT_CONFIG1_REGION56_Pos) /*!< Bit mask of REGION56 field. */
N#define BPROT_CONFIG1_REGION56_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION56_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 23 : Enable protection for region 55. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION55_Pos (23UL) /*!< Position of REGION55 field. */
N#define BPROT_CONFIG1_REGION55_Msk (0x1UL << BPROT_CONFIG1_REGION55_Pos) /*!< Bit mask of REGION55 field. */
N#define BPROT_CONFIG1_REGION55_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION55_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 22 : Enable protection for region 54. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION54_Pos (22UL) /*!< Position of REGION54 field. */
N#define BPROT_CONFIG1_REGION54_Msk (0x1UL << BPROT_CONFIG1_REGION54_Pos) /*!< Bit mask of REGION54 field. */
N#define BPROT_CONFIG1_REGION54_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION54_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 21 : Enable protection for region 53. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION53_Pos (21UL) /*!< Position of REGION53 field. */
N#define BPROT_CONFIG1_REGION53_Msk (0x1UL << BPROT_CONFIG1_REGION53_Pos) /*!< Bit mask of REGION53 field. */
N#define BPROT_CONFIG1_REGION53_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION53_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 20 : Enable protection for region 52. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION52_Pos (20UL) /*!< Position of REGION52 field. */
N#define BPROT_CONFIG1_REGION52_Msk (0x1UL << BPROT_CONFIG1_REGION52_Pos) /*!< Bit mask of REGION52 field. */
N#define BPROT_CONFIG1_REGION52_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION52_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 19 : Enable protection for region 51. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION51_Pos (19UL) /*!< Position of REGION51 field. */
N#define BPROT_CONFIG1_REGION51_Msk (0x1UL << BPROT_CONFIG1_REGION51_Pos) /*!< Bit mask of REGION51 field. */
N#define BPROT_CONFIG1_REGION51_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION51_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 18 : Enable protection for region 50. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION50_Pos (18UL) /*!< Position of REGION50 field. */
N#define BPROT_CONFIG1_REGION50_Msk (0x1UL << BPROT_CONFIG1_REGION50_Pos) /*!< Bit mask of REGION50 field. */
N#define BPROT_CONFIG1_REGION50_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION50_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 17 : Enable protection for region 49. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION49_Pos (17UL) /*!< Position of REGION49 field. */
N#define BPROT_CONFIG1_REGION49_Msk (0x1UL << BPROT_CONFIG1_REGION49_Pos) /*!< Bit mask of REGION49 field. */
N#define BPROT_CONFIG1_REGION49_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION49_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 16 : Enable protection for region 48. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION48_Pos (16UL) /*!< Position of REGION48 field. */
N#define BPROT_CONFIG1_REGION48_Msk (0x1UL << BPROT_CONFIG1_REGION48_Pos) /*!< Bit mask of REGION48 field. */
N#define BPROT_CONFIG1_REGION48_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION48_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 15 : Enable protection for region 47. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION47_Pos (15UL) /*!< Position of REGION47 field. */
N#define BPROT_CONFIG1_REGION47_Msk (0x1UL << BPROT_CONFIG1_REGION47_Pos) /*!< Bit mask of REGION47 field. */
N#define BPROT_CONFIG1_REGION47_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION47_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 14 : Enable protection for region 46. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION46_Pos (14UL) /*!< Position of REGION46 field. */
N#define BPROT_CONFIG1_REGION46_Msk (0x1UL << BPROT_CONFIG1_REGION46_Pos) /*!< Bit mask of REGION46 field. */
N#define BPROT_CONFIG1_REGION46_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION46_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 13 : Enable protection for region 45. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION45_Pos (13UL) /*!< Position of REGION45 field. */
N#define BPROT_CONFIG1_REGION45_Msk (0x1UL << BPROT_CONFIG1_REGION45_Pos) /*!< Bit mask of REGION45 field. */
N#define BPROT_CONFIG1_REGION45_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION45_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 12 : Enable protection for region 44. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION44_Pos (12UL) /*!< Position of REGION44 field. */
N#define BPROT_CONFIG1_REGION44_Msk (0x1UL << BPROT_CONFIG1_REGION44_Pos) /*!< Bit mask of REGION44 field. */
N#define BPROT_CONFIG1_REGION44_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION44_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 11 : Enable protection for region 43. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION43_Pos (11UL) /*!< Position of REGION43 field. */
N#define BPROT_CONFIG1_REGION43_Msk (0x1UL << BPROT_CONFIG1_REGION43_Pos) /*!< Bit mask of REGION43 field. */
N#define BPROT_CONFIG1_REGION43_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION43_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 10 : Enable protection for region 42. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION42_Pos (10UL) /*!< Position of REGION42 field. */
N#define BPROT_CONFIG1_REGION42_Msk (0x1UL << BPROT_CONFIG1_REGION42_Pos) /*!< Bit mask of REGION42 field. */
N#define BPROT_CONFIG1_REGION42_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION42_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 9 : Enable protection for region 41. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION41_Pos (9UL) /*!< Position of REGION41 field. */
N#define BPROT_CONFIG1_REGION41_Msk (0x1UL << BPROT_CONFIG1_REGION41_Pos) /*!< Bit mask of REGION41 field. */
N#define BPROT_CONFIG1_REGION41_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION41_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 8 : Enable protection for region 40. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION40_Pos (8UL) /*!< Position of REGION40 field. */
N#define BPROT_CONFIG1_REGION40_Msk (0x1UL << BPROT_CONFIG1_REGION40_Pos) /*!< Bit mask of REGION40 field. */
N#define BPROT_CONFIG1_REGION40_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION40_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 7 : Enable protection for region 39. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION39_Pos (7UL) /*!< Position of REGION39 field. */
N#define BPROT_CONFIG1_REGION39_Msk (0x1UL << BPROT_CONFIG1_REGION39_Pos) /*!< Bit mask of REGION39 field. */
N#define BPROT_CONFIG1_REGION39_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION39_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 6 : Enable protection for region 38. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION38_Pos (6UL) /*!< Position of REGION38 field. */
N#define BPROT_CONFIG1_REGION38_Msk (0x1UL << BPROT_CONFIG1_REGION38_Pos) /*!< Bit mask of REGION38 field. */
N#define BPROT_CONFIG1_REGION38_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION38_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 5 : Enable protection for region 37. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION37_Pos (5UL) /*!< Position of REGION37 field. */
N#define BPROT_CONFIG1_REGION37_Msk (0x1UL << BPROT_CONFIG1_REGION37_Pos) /*!< Bit mask of REGION37 field. */
N#define BPROT_CONFIG1_REGION37_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION37_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 4 : Enable protection for region 36. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION36_Pos (4UL) /*!< Position of REGION36 field. */
N#define BPROT_CONFIG1_REGION36_Msk (0x1UL << BPROT_CONFIG1_REGION36_Pos) /*!< Bit mask of REGION36 field. */
N#define BPROT_CONFIG1_REGION36_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION36_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 3 : Enable protection for region 35. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION35_Pos (3UL) /*!< Position of REGION35 field. */
N#define BPROT_CONFIG1_REGION35_Msk (0x1UL << BPROT_CONFIG1_REGION35_Pos) /*!< Bit mask of REGION35 field. */
N#define BPROT_CONFIG1_REGION35_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION35_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 2 : Enable protection for region 34. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION34_Pos (2UL) /*!< Position of REGION34 field. */
N#define BPROT_CONFIG1_REGION34_Msk (0x1UL << BPROT_CONFIG1_REGION34_Pos) /*!< Bit mask of REGION34 field. */
N#define BPROT_CONFIG1_REGION34_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION34_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 1 : Enable protection for region 33. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION33_Pos (1UL) /*!< Position of REGION33 field. */
N#define BPROT_CONFIG1_REGION33_Msk (0x1UL << BPROT_CONFIG1_REGION33_Pos) /*!< Bit mask of REGION33 field. */
N#define BPROT_CONFIG1_REGION33_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION33_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 0 : Enable protection for region 32. Write '0' has no effect. */
N#define BPROT_CONFIG1_REGION32_Pos (0UL) /*!< Position of REGION32 field. */
N#define BPROT_CONFIG1_REGION32_Msk (0x1UL << BPROT_CONFIG1_REGION32_Pos) /*!< Bit mask of REGION32 field. */
N#define BPROT_CONFIG1_REGION32_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG1_REGION32_Enabled (1UL) /*!< Protection enabled */
N
N/* Register: BPROT_DISABLEINDEBUG */
N/* Description: Disable protection mechanism in debug interface mode */
N
N/* Bit 0 : Disable the protection mechanism for NVM regions while in debug interface mode. This register will only disable the protection mechanism if the device is in debug interface mode. */
N#define BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Pos (0UL) /*!< Position of DISABLEINDEBUG field. */
N#define BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Msk (0x1UL << BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Pos) /*!< Bit mask of DISABLEINDEBUG field. */
N#define BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Enabled (0UL) /*!< Enable in debug */
N#define BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Disabled (1UL) /*!< Disable in debug */
N
N/* Register: BPROT_CONFIG2 */
N/* Description: Block protect configuration register 2 */
N
N/* Bit 31 : Enable protection for region 95. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION95_Pos (31UL) /*!< Position of REGION95 field. */
N#define BPROT_CONFIG2_REGION95_Msk (0x1UL << BPROT_CONFIG2_REGION95_Pos) /*!< Bit mask of REGION95 field. */
N#define BPROT_CONFIG2_REGION95_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION95_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 30 : Enable protection for region 94. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION94_Pos (30UL) /*!< Position of REGION94 field. */
N#define BPROT_CONFIG2_REGION94_Msk (0x1UL << BPROT_CONFIG2_REGION94_Pos) /*!< Bit mask of REGION94 field. */
N#define BPROT_CONFIG2_REGION94_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION94_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 29 : Enable protection for region 93. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION93_Pos (29UL) /*!< Position of REGION93 field. */
N#define BPROT_CONFIG2_REGION93_Msk (0x1UL << BPROT_CONFIG2_REGION93_Pos) /*!< Bit mask of REGION93 field. */
N#define BPROT_CONFIG2_REGION93_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION93_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 28 : Enable protection for region 92. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION92_Pos (28UL) /*!< Position of REGION92 field. */
N#define BPROT_CONFIG2_REGION92_Msk (0x1UL << BPROT_CONFIG2_REGION92_Pos) /*!< Bit mask of REGION92 field. */
N#define BPROT_CONFIG2_REGION92_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION92_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 27 : Enable protection for region 91. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION91_Pos (27UL) /*!< Position of REGION91 field. */
N#define BPROT_CONFIG2_REGION91_Msk (0x1UL << BPROT_CONFIG2_REGION91_Pos) /*!< Bit mask of REGION91 field. */
N#define BPROT_CONFIG2_REGION91_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION91_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 26 : Enable protection for region 90. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION90_Pos (26UL) /*!< Position of REGION90 field. */
N#define BPROT_CONFIG2_REGION90_Msk (0x1UL << BPROT_CONFIG2_REGION90_Pos) /*!< Bit mask of REGION90 field. */
N#define BPROT_CONFIG2_REGION90_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION90_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 25 : Enable protection for region 89. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION89_Pos (25UL) /*!< Position of REGION89 field. */
N#define BPROT_CONFIG2_REGION89_Msk (0x1UL << BPROT_CONFIG2_REGION89_Pos) /*!< Bit mask of REGION89 field. */
N#define BPROT_CONFIG2_REGION89_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION89_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 24 : Enable protection for region 88. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION88_Pos (24UL) /*!< Position of REGION88 field. */
N#define BPROT_CONFIG2_REGION88_Msk (0x1UL << BPROT_CONFIG2_REGION88_Pos) /*!< Bit mask of REGION88 field. */
N#define BPROT_CONFIG2_REGION88_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION88_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 23 : Enable protection for region 87. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION87_Pos (23UL) /*!< Position of REGION87 field. */
N#define BPROT_CONFIG2_REGION87_Msk (0x1UL << BPROT_CONFIG2_REGION87_Pos) /*!< Bit mask of REGION87 field. */
N#define BPROT_CONFIG2_REGION87_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION87_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 22 : Enable protection for region 86. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION86_Pos (22UL) /*!< Position of REGION86 field. */
N#define BPROT_CONFIG2_REGION86_Msk (0x1UL << BPROT_CONFIG2_REGION86_Pos) /*!< Bit mask of REGION86 field. */
N#define BPROT_CONFIG2_REGION86_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION86_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 21 : Enable protection for region 85. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION85_Pos (21UL) /*!< Position of REGION85 field. */
N#define BPROT_CONFIG2_REGION85_Msk (0x1UL << BPROT_CONFIG2_REGION85_Pos) /*!< Bit mask of REGION85 field. */
N#define BPROT_CONFIG2_REGION85_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION85_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 20 : Enable protection for region 84. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION84_Pos (20UL) /*!< Position of REGION84 field. */
N#define BPROT_CONFIG2_REGION84_Msk (0x1UL << BPROT_CONFIG2_REGION84_Pos) /*!< Bit mask of REGION84 field. */
N#define BPROT_CONFIG2_REGION84_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION84_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 19 : Enable protection for region 83. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION83_Pos (19UL) /*!< Position of REGION83 field. */
N#define BPROT_CONFIG2_REGION83_Msk (0x1UL << BPROT_CONFIG2_REGION83_Pos) /*!< Bit mask of REGION83 field. */
N#define BPROT_CONFIG2_REGION83_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION83_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 18 : Enable protection for region 82. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION82_Pos (18UL) /*!< Position of REGION82 field. */
N#define BPROT_CONFIG2_REGION82_Msk (0x1UL << BPROT_CONFIG2_REGION82_Pos) /*!< Bit mask of REGION82 field. */
N#define BPROT_CONFIG2_REGION82_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION82_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 17 : Enable protection for region 81. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION81_Pos (17UL) /*!< Position of REGION81 field. */
N#define BPROT_CONFIG2_REGION81_Msk (0x1UL << BPROT_CONFIG2_REGION81_Pos) /*!< Bit mask of REGION81 field. */
N#define BPROT_CONFIG2_REGION81_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION81_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 16 : Enable protection for region 80. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION80_Pos (16UL) /*!< Position of REGION80 field. */
N#define BPROT_CONFIG2_REGION80_Msk (0x1UL << BPROT_CONFIG2_REGION80_Pos) /*!< Bit mask of REGION80 field. */
N#define BPROT_CONFIG2_REGION80_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION80_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 15 : Enable protection for region 79. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION79_Pos (15UL) /*!< Position of REGION79 field. */
N#define BPROT_CONFIG2_REGION79_Msk (0x1UL << BPROT_CONFIG2_REGION79_Pos) /*!< Bit mask of REGION79 field. */
N#define BPROT_CONFIG2_REGION79_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION79_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 14 : Enable protection for region 78. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION78_Pos (14UL) /*!< Position of REGION78 field. */
N#define BPROT_CONFIG2_REGION78_Msk (0x1UL << BPROT_CONFIG2_REGION78_Pos) /*!< Bit mask of REGION78 field. */
N#define BPROT_CONFIG2_REGION78_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION78_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 13 : Enable protection for region 77. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION77_Pos (13UL) /*!< Position of REGION77 field. */
N#define BPROT_CONFIG2_REGION77_Msk (0x1UL << BPROT_CONFIG2_REGION77_Pos) /*!< Bit mask of REGION77 field. */
N#define BPROT_CONFIG2_REGION77_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION77_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 12 : Enable protection for region 76. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION76_Pos (12UL) /*!< Position of REGION76 field. */
N#define BPROT_CONFIG2_REGION76_Msk (0x1UL << BPROT_CONFIG2_REGION76_Pos) /*!< Bit mask of REGION76 field. */
N#define BPROT_CONFIG2_REGION76_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION76_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 11 : Enable protection for region 75. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION75_Pos (11UL) /*!< Position of REGION75 field. */
N#define BPROT_CONFIG2_REGION75_Msk (0x1UL << BPROT_CONFIG2_REGION75_Pos) /*!< Bit mask of REGION75 field. */
N#define BPROT_CONFIG2_REGION75_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION75_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 10 : Enable protection for region 74. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION74_Pos (10UL) /*!< Position of REGION74 field. */
N#define BPROT_CONFIG2_REGION74_Msk (0x1UL << BPROT_CONFIG2_REGION74_Pos) /*!< Bit mask of REGION74 field. */
N#define BPROT_CONFIG2_REGION74_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION74_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 9 : Enable protection for region 73. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION73_Pos (9UL) /*!< Position of REGION73 field. */
N#define BPROT_CONFIG2_REGION73_Msk (0x1UL << BPROT_CONFIG2_REGION73_Pos) /*!< Bit mask of REGION73 field. */
N#define BPROT_CONFIG2_REGION73_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION73_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 8 : Enable protection for region 72. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION72_Pos (8UL) /*!< Position of REGION72 field. */
N#define BPROT_CONFIG2_REGION72_Msk (0x1UL << BPROT_CONFIG2_REGION72_Pos) /*!< Bit mask of REGION72 field. */
N#define BPROT_CONFIG2_REGION72_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION72_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 7 : Enable protection for region 71. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION71_Pos (7UL) /*!< Position of REGION71 field. */
N#define BPROT_CONFIG2_REGION71_Msk (0x1UL << BPROT_CONFIG2_REGION71_Pos) /*!< Bit mask of REGION71 field. */
N#define BPROT_CONFIG2_REGION71_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION71_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 6 : Enable protection for region 70. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION70_Pos (6UL) /*!< Position of REGION70 field. */
N#define BPROT_CONFIG2_REGION70_Msk (0x1UL << BPROT_CONFIG2_REGION70_Pos) /*!< Bit mask of REGION70 field. */
N#define BPROT_CONFIG2_REGION70_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION70_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 5 : Enable protection for region 69. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION69_Pos (5UL) /*!< Position of REGION69 field. */
N#define BPROT_CONFIG2_REGION69_Msk (0x1UL << BPROT_CONFIG2_REGION69_Pos) /*!< Bit mask of REGION69 field. */
N#define BPROT_CONFIG2_REGION69_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION69_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 4 : Enable protection for region 68. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION68_Pos (4UL) /*!< Position of REGION68 field. */
N#define BPROT_CONFIG2_REGION68_Msk (0x1UL << BPROT_CONFIG2_REGION68_Pos) /*!< Bit mask of REGION68 field. */
N#define BPROT_CONFIG2_REGION68_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION68_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 3 : Enable protection for region 67. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION67_Pos (3UL) /*!< Position of REGION67 field. */
N#define BPROT_CONFIG2_REGION67_Msk (0x1UL << BPROT_CONFIG2_REGION67_Pos) /*!< Bit mask of REGION67 field. */
N#define BPROT_CONFIG2_REGION67_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION67_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 2 : Enable protection for region 66. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION66_Pos (2UL) /*!< Position of REGION66 field. */
N#define BPROT_CONFIG2_REGION66_Msk (0x1UL << BPROT_CONFIG2_REGION66_Pos) /*!< Bit mask of REGION66 field. */
N#define BPROT_CONFIG2_REGION66_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION66_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 1 : Enable protection for region 65. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION65_Pos (1UL) /*!< Position of REGION65 field. */
N#define BPROT_CONFIG2_REGION65_Msk (0x1UL << BPROT_CONFIG2_REGION65_Pos) /*!< Bit mask of REGION65 field. */
N#define BPROT_CONFIG2_REGION65_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION65_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 0 : Enable protection for region 64. Write '0' has no effect. */
N#define BPROT_CONFIG2_REGION64_Pos (0UL) /*!< Position of REGION64 field. */
N#define BPROT_CONFIG2_REGION64_Msk (0x1UL << BPROT_CONFIG2_REGION64_Pos) /*!< Bit mask of REGION64 field. */
N#define BPROT_CONFIG2_REGION64_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG2_REGION64_Enabled (1UL) /*!< Protection enabled */
N
N/* Register: BPROT_CONFIG3 */
N/* Description: Block protect configuration register 3 */
N
N/* Bit 31 : Enable protection for region 127. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION127_Pos (31UL) /*!< Position of REGION127 field. */
N#define BPROT_CONFIG3_REGION127_Msk (0x1UL << BPROT_CONFIG3_REGION127_Pos) /*!< Bit mask of REGION127 field. */
N#define BPROT_CONFIG3_REGION127_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION127_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 30 : Enable protection for region 126. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION126_Pos (30UL) /*!< Position of REGION126 field. */
N#define BPROT_CONFIG3_REGION126_Msk (0x1UL << BPROT_CONFIG3_REGION126_Pos) /*!< Bit mask of REGION126 field. */
N#define BPROT_CONFIG3_REGION126_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION126_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 29 : Enable protection for region 125. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION125_Pos (29UL) /*!< Position of REGION125 field. */
N#define BPROT_CONFIG3_REGION125_Msk (0x1UL << BPROT_CONFIG3_REGION125_Pos) /*!< Bit mask of REGION125 field. */
N#define BPROT_CONFIG3_REGION125_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION125_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 28 : Enable protection for region 124. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION124_Pos (28UL) /*!< Position of REGION124 field. */
N#define BPROT_CONFIG3_REGION124_Msk (0x1UL << BPROT_CONFIG3_REGION124_Pos) /*!< Bit mask of REGION124 field. */
N#define BPROT_CONFIG3_REGION124_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION124_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 27 : Enable protection for region 123. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION123_Pos (27UL) /*!< Position of REGION123 field. */
N#define BPROT_CONFIG3_REGION123_Msk (0x1UL << BPROT_CONFIG3_REGION123_Pos) /*!< Bit mask of REGION123 field. */
N#define BPROT_CONFIG3_REGION123_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION123_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 26 : Enable protection for region 122. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION122_Pos (26UL) /*!< Position of REGION122 field. */
N#define BPROT_CONFIG3_REGION122_Msk (0x1UL << BPROT_CONFIG3_REGION122_Pos) /*!< Bit mask of REGION122 field. */
N#define BPROT_CONFIG3_REGION122_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION122_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 25 : Enable protection for region 121. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION121_Pos (25UL) /*!< Position of REGION121 field. */
N#define BPROT_CONFIG3_REGION121_Msk (0x1UL << BPROT_CONFIG3_REGION121_Pos) /*!< Bit mask of REGION121 field. */
N#define BPROT_CONFIG3_REGION121_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION121_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 24 : Enable protection for region 120. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION120_Pos (24UL) /*!< Position of REGION120 field. */
N#define BPROT_CONFIG3_REGION120_Msk (0x1UL << BPROT_CONFIG3_REGION120_Pos) /*!< Bit mask of REGION120 field. */
N#define BPROT_CONFIG3_REGION120_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION120_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 23 : Enable protection for region 119. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION119_Pos (23UL) /*!< Position of REGION119 field. */
N#define BPROT_CONFIG3_REGION119_Msk (0x1UL << BPROT_CONFIG3_REGION119_Pos) /*!< Bit mask of REGION119 field. */
N#define BPROT_CONFIG3_REGION119_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION119_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 22 : Enable protection for region 118. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION118_Pos (22UL) /*!< Position of REGION118 field. */
N#define BPROT_CONFIG3_REGION118_Msk (0x1UL << BPROT_CONFIG3_REGION118_Pos) /*!< Bit mask of REGION118 field. */
N#define BPROT_CONFIG3_REGION118_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION118_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 21 : Enable protection for region 117. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION117_Pos (21UL) /*!< Position of REGION117 field. */
N#define BPROT_CONFIG3_REGION117_Msk (0x1UL << BPROT_CONFIG3_REGION117_Pos) /*!< Bit mask of REGION117 field. */
N#define BPROT_CONFIG3_REGION117_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION117_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 20 : Enable protection for region 116. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION116_Pos (20UL) /*!< Position of REGION116 field. */
N#define BPROT_CONFIG3_REGION116_Msk (0x1UL << BPROT_CONFIG3_REGION116_Pos) /*!< Bit mask of REGION116 field. */
N#define BPROT_CONFIG3_REGION116_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION116_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 19 : Enable protection for region 115. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION115_Pos (19UL) /*!< Position of REGION115 field. */
N#define BPROT_CONFIG3_REGION115_Msk (0x1UL << BPROT_CONFIG3_REGION115_Pos) /*!< Bit mask of REGION115 field. */
N#define BPROT_CONFIG3_REGION115_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION115_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 18 : Enable protection for region 114. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION114_Pos (18UL) /*!< Position of REGION114 field. */
N#define BPROT_CONFIG3_REGION114_Msk (0x1UL << BPROT_CONFIG3_REGION114_Pos) /*!< Bit mask of REGION114 field. */
N#define BPROT_CONFIG3_REGION114_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION114_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 17 : Enable protection for region 113. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION113_Pos (17UL) /*!< Position of REGION113 field. */
N#define BPROT_CONFIG3_REGION113_Msk (0x1UL << BPROT_CONFIG3_REGION113_Pos) /*!< Bit mask of REGION113 field. */
N#define BPROT_CONFIG3_REGION113_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION113_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 16 : Enable protection for region 112. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION112_Pos (16UL) /*!< Position of REGION112 field. */
N#define BPROT_CONFIG3_REGION112_Msk (0x1UL << BPROT_CONFIG3_REGION112_Pos) /*!< Bit mask of REGION112 field. */
N#define BPROT_CONFIG3_REGION112_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION112_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 15 : Enable protection for region 111. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION111_Pos (15UL) /*!< Position of REGION111 field. */
N#define BPROT_CONFIG3_REGION111_Msk (0x1UL << BPROT_CONFIG3_REGION111_Pos) /*!< Bit mask of REGION111 field. */
N#define BPROT_CONFIG3_REGION111_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION111_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 14 : Enable protection for region 110. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION110_Pos (14UL) /*!< Position of REGION110 field. */
N#define BPROT_CONFIG3_REGION110_Msk (0x1UL << BPROT_CONFIG3_REGION110_Pos) /*!< Bit mask of REGION110 field. */
N#define BPROT_CONFIG3_REGION110_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION110_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 13 : Enable protection for region 109. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION109_Pos (13UL) /*!< Position of REGION109 field. */
N#define BPROT_CONFIG3_REGION109_Msk (0x1UL << BPROT_CONFIG3_REGION109_Pos) /*!< Bit mask of REGION109 field. */
N#define BPROT_CONFIG3_REGION109_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION109_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 12 : Enable protection for region 108. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION108_Pos (12UL) /*!< Position of REGION108 field. */
N#define BPROT_CONFIG3_REGION108_Msk (0x1UL << BPROT_CONFIG3_REGION108_Pos) /*!< Bit mask of REGION108 field. */
N#define BPROT_CONFIG3_REGION108_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION108_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 11 : Enable protection for region 107. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION107_Pos (11UL) /*!< Position of REGION107 field. */
N#define BPROT_CONFIG3_REGION107_Msk (0x1UL << BPROT_CONFIG3_REGION107_Pos) /*!< Bit mask of REGION107 field. */
N#define BPROT_CONFIG3_REGION107_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION107_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 10 : Enable protection for region 106. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION106_Pos (10UL) /*!< Position of REGION106 field. */
N#define BPROT_CONFIG3_REGION106_Msk (0x1UL << BPROT_CONFIG3_REGION106_Pos) /*!< Bit mask of REGION106 field. */
N#define BPROT_CONFIG3_REGION106_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION106_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 9 : Enable protection for region 105. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION105_Pos (9UL) /*!< Position of REGION105 field. */
N#define BPROT_CONFIG3_REGION105_Msk (0x1UL << BPROT_CONFIG3_REGION105_Pos) /*!< Bit mask of REGION105 field. */
N#define BPROT_CONFIG3_REGION105_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION105_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 8 : Enable protection for region 104. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION104_Pos (8UL) /*!< Position of REGION104 field. */
N#define BPROT_CONFIG3_REGION104_Msk (0x1UL << BPROT_CONFIG3_REGION104_Pos) /*!< Bit mask of REGION104 field. */
N#define BPROT_CONFIG3_REGION104_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION104_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 7 : Enable protection for region 103. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION103_Pos (7UL) /*!< Position of REGION103 field. */
N#define BPROT_CONFIG3_REGION103_Msk (0x1UL << BPROT_CONFIG3_REGION103_Pos) /*!< Bit mask of REGION103 field. */
N#define BPROT_CONFIG3_REGION103_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION103_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 6 : Enable protection for region 102. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION102_Pos (6UL) /*!< Position of REGION102 field. */
N#define BPROT_CONFIG3_REGION102_Msk (0x1UL << BPROT_CONFIG3_REGION102_Pos) /*!< Bit mask of REGION102 field. */
N#define BPROT_CONFIG3_REGION102_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION102_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 5 : Enable protection for region 101. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION101_Pos (5UL) /*!< Position of REGION101 field. */
N#define BPROT_CONFIG3_REGION101_Msk (0x1UL << BPROT_CONFIG3_REGION101_Pos) /*!< Bit mask of REGION101 field. */
N#define BPROT_CONFIG3_REGION101_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION101_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 4 : Enable protection for region 100. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION100_Pos (4UL) /*!< Position of REGION100 field. */
N#define BPROT_CONFIG3_REGION100_Msk (0x1UL << BPROT_CONFIG3_REGION100_Pos) /*!< Bit mask of REGION100 field. */
N#define BPROT_CONFIG3_REGION100_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION100_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 3 : Enable protection for region 99. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION99_Pos (3UL) /*!< Position of REGION99 field. */
N#define BPROT_CONFIG3_REGION99_Msk (0x1UL << BPROT_CONFIG3_REGION99_Pos) /*!< Bit mask of REGION99 field. */
N#define BPROT_CONFIG3_REGION99_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION99_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 2 : Enable protection for region 98. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION98_Pos (2UL) /*!< Position of REGION98 field. */
N#define BPROT_CONFIG3_REGION98_Msk (0x1UL << BPROT_CONFIG3_REGION98_Pos) /*!< Bit mask of REGION98 field. */
N#define BPROT_CONFIG3_REGION98_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION98_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 1 : Enable protection for region 97. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION97_Pos (1UL) /*!< Position of REGION97 field. */
N#define BPROT_CONFIG3_REGION97_Msk (0x1UL << BPROT_CONFIG3_REGION97_Pos) /*!< Bit mask of REGION97 field. */
N#define BPROT_CONFIG3_REGION97_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION97_Enabled (1UL) /*!< Protection enabled */
N
N/* Bit 0 : Enable protection for region 96. Write '0' has no effect. */
N#define BPROT_CONFIG3_REGION96_Pos (0UL) /*!< Position of REGION96 field. */
N#define BPROT_CONFIG3_REGION96_Msk (0x1UL << BPROT_CONFIG3_REGION96_Pos) /*!< Bit mask of REGION96 field. */
N#define BPROT_CONFIG3_REGION96_Disabled (0UL) /*!< Protection disabled */
N#define BPROT_CONFIG3_REGION96_Enabled (1UL) /*!< Protection enabled */
N
N
N/* Peripheral: CCM */
N/* Description: AES CCM Mode Encryption */
N
N/* Register: CCM_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 0 : Shortcut between ENDKSGEN event and CRYPT task */
N#define CCM_SHORTS_ENDKSGEN_CRYPT_Pos (0UL) /*!< Position of ENDKSGEN_CRYPT field. */
N#define CCM_SHORTS_ENDKSGEN_CRYPT_Msk (0x1UL << CCM_SHORTS_ENDKSGEN_CRYPT_Pos) /*!< Bit mask of ENDKSGEN_CRYPT field. */
N#define CCM_SHORTS_ENDKSGEN_CRYPT_Disabled (0UL) /*!< Disable shortcut */
N#define CCM_SHORTS_ENDKSGEN_CRYPT_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: CCM_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 2 : Write '1' to Enable interrupt for ERROR event */
N#define CCM_INTENSET_ERROR_Pos (2UL) /*!< Position of ERROR field. */
N#define CCM_INTENSET_ERROR_Msk (0x1UL << CCM_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define CCM_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for ENDCRYPT event */
N#define CCM_INTENSET_ENDCRYPT_Pos (1UL) /*!< Position of ENDCRYPT field. */
N#define CCM_INTENSET_ENDCRYPT_Msk (0x1UL << CCM_INTENSET_ENDCRYPT_Pos) /*!< Bit mask of ENDCRYPT field. */
N#define CCM_INTENSET_ENDCRYPT_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENSET_ENDCRYPT_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENSET_ENDCRYPT_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for ENDKSGEN event */
N#define CCM_INTENSET_ENDKSGEN_Pos (0UL) /*!< Position of ENDKSGEN field. */
N#define CCM_INTENSET_ENDKSGEN_Msk (0x1UL << CCM_INTENSET_ENDKSGEN_Pos) /*!< Bit mask of ENDKSGEN field. */
N#define CCM_INTENSET_ENDKSGEN_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENSET_ENDKSGEN_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENSET_ENDKSGEN_Set (1UL) /*!< Enable */
N
N/* Register: CCM_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 2 : Write '1' to Disable interrupt for ERROR event */
N#define CCM_INTENCLR_ERROR_Pos (2UL) /*!< Position of ERROR field. */
N#define CCM_INTENCLR_ERROR_Msk (0x1UL << CCM_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define CCM_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for ENDCRYPT event */
N#define CCM_INTENCLR_ENDCRYPT_Pos (1UL) /*!< Position of ENDCRYPT field. */
N#define CCM_INTENCLR_ENDCRYPT_Msk (0x1UL << CCM_INTENCLR_ENDCRYPT_Pos) /*!< Bit mask of ENDCRYPT field. */
N#define CCM_INTENCLR_ENDCRYPT_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENCLR_ENDCRYPT_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENCLR_ENDCRYPT_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for ENDKSGEN event */
N#define CCM_INTENCLR_ENDKSGEN_Pos (0UL) /*!< Position of ENDKSGEN field. */
N#define CCM_INTENCLR_ENDKSGEN_Msk (0x1UL << CCM_INTENCLR_ENDKSGEN_Pos) /*!< Bit mask of ENDKSGEN field. */
N#define CCM_INTENCLR_ENDKSGEN_Disabled (0UL) /*!< Read: Disabled */
N#define CCM_INTENCLR_ENDKSGEN_Enabled (1UL) /*!< Read: Enabled */
N#define CCM_INTENCLR_ENDKSGEN_Clear (1UL) /*!< Disable */
N
N/* Register: CCM_MICSTATUS */
N/* Description: MIC check result */
N
N/* Bit 0 : The result of the MIC check performed during the previous decryption operation */
N#define CCM_MICSTATUS_MICSTATUS_Pos (0UL) /*!< Position of MICSTATUS field. */
N#define CCM_MICSTATUS_MICSTATUS_Msk (0x1UL << CCM_MICSTATUS_MICSTATUS_Pos) /*!< Bit mask of MICSTATUS field. */
N#define CCM_MICSTATUS_MICSTATUS_CheckFailed (0UL) /*!< MIC check failed */
N#define CCM_MICSTATUS_MICSTATUS_CheckPassed (1UL) /*!< MIC check passed */
N
N/* Register: CCM_ENABLE */
N/* Description: Enable */
N
N/* Bits 1..0 : Enable or disable CCM */
N#define CCM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define CCM_ENABLE_ENABLE_Msk (0x3UL << CCM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define CCM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define CCM_ENABLE_ENABLE_Enabled (2UL) /*!< Enable */
N
N/* Register: CCM_MODE */
N/* Description: Operation mode */
N
N/* Bit 24 : Packet length configuration */
N#define CCM_MODE_LENGTH_Pos (24UL) /*!< Position of LENGTH field. */
N#define CCM_MODE_LENGTH_Msk (0x1UL << CCM_MODE_LENGTH_Pos) /*!< Bit mask of LENGTH field. */
N#define CCM_MODE_LENGTH_Default (0UL) /*!< Default length. Effective length of LENGTH field is 5-bit */
N#define CCM_MODE_LENGTH_Extended (1UL) /*!< Extended length. Effective length of LENGTH field is 8-bit */
N
N/* Bit 16 : Data rate that the CCM shall run in synch with */
N#define CCM_MODE_DATARATE_Pos (16UL) /*!< Position of DATARATE field. */
N#define CCM_MODE_DATARATE_Msk (0x1UL << CCM_MODE_DATARATE_Pos) /*!< Bit mask of DATARATE field. */
N#define CCM_MODE_DATARATE_1Mbit (0UL) /*!< In synch with 1 Mbit data rate */
N#define CCM_MODE_DATARATE_2Mbit (1UL) /*!< In synch with 2 Mbit data rate */
N
N/* Bit 0 : The mode of operation to be used */
N#define CCM_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
N#define CCM_MODE_MODE_Msk (0x1UL << CCM_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
N#define CCM_MODE_MODE_Encryption (0UL) /*!< AES CCM packet encryption mode */
N#define CCM_MODE_MODE_Decryption (1UL) /*!< AES CCM packet decryption mode */
N
N/* Register: CCM_CNFPTR */
N/* Description: Pointer to data structure holding AES key and NONCE vector */
N
N/* Bits 31..0 : Pointer to the data structure holding the AES key and the CCM NONCE vector (see Table 1 CCM data structure overview) */
N#define CCM_CNFPTR_CNFPTR_Pos (0UL) /*!< Position of CNFPTR field. */
N#define CCM_CNFPTR_CNFPTR_Msk (0xFFFFFFFFUL << CCM_CNFPTR_CNFPTR_Pos) /*!< Bit mask of CNFPTR field. */
N
N/* Register: CCM_INPTR */
N/* Description: Input pointer */
N
N/* Bits 31..0 : Input pointer */
N#define CCM_INPTR_INPTR_Pos (0UL) /*!< Position of INPTR field. */
N#define CCM_INPTR_INPTR_Msk (0xFFFFFFFFUL << CCM_INPTR_INPTR_Pos) /*!< Bit mask of INPTR field. */
N
N/* Register: CCM_OUTPTR */
N/* Description: Output pointer */
N
N/* Bits 31..0 : Output pointer */
N#define CCM_OUTPTR_OUTPTR_Pos (0UL) /*!< Position of OUTPTR field. */
N#define CCM_OUTPTR_OUTPTR_Msk (0xFFFFFFFFUL << CCM_OUTPTR_OUTPTR_Pos) /*!< Bit mask of OUTPTR field. */
N
N/* Register: CCM_SCRATCHPTR */
N/* Description: Pointer to data area used for temporary storage */
N
N/* Bits 31..0 : Pointer to a scratch data area used for temporary storage during key-stream generation, MIC generation and encryption/decryption. */
N#define CCM_SCRATCHPTR_SCRATCHPTR_Pos (0UL) /*!< Position of SCRATCHPTR field. */
N#define CCM_SCRATCHPTR_SCRATCHPTR_Msk (0xFFFFFFFFUL << CCM_SCRATCHPTR_SCRATCHPTR_Pos) /*!< Bit mask of SCRATCHPTR field. */
N
N
N/* Peripheral: CLOCK */
N/* Description: Clock control */
N
N/* Register: CLOCK_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 4 : Write '1' to Enable interrupt for CTTO event */
N#define CLOCK_INTENSET_CTTO_Pos (4UL) /*!< Position of CTTO field. */
N#define CLOCK_INTENSET_CTTO_Msk (0x1UL << CLOCK_INTENSET_CTTO_Pos) /*!< Bit mask of CTTO field. */
N#define CLOCK_INTENSET_CTTO_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENSET_CTTO_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENSET_CTTO_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for DONE event */
N#define CLOCK_INTENSET_DONE_Pos (3UL) /*!< Position of DONE field. */
N#define CLOCK_INTENSET_DONE_Msk (0x1UL << CLOCK_INTENSET_DONE_Pos) /*!< Bit mask of DONE field. */
N#define CLOCK_INTENSET_DONE_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENSET_DONE_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENSET_DONE_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for LFCLKSTARTED event */
N#define CLOCK_INTENSET_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
N#define CLOCK_INTENSET_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
N#define CLOCK_INTENSET_LFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENSET_LFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENSET_LFCLKSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for HFCLKSTARTED event */
N#define CLOCK_INTENSET_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
N#define CLOCK_INTENSET_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
N#define CLOCK_INTENSET_HFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENSET_HFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENSET_HFCLKSTARTED_Set (1UL) /*!< Enable */
N
N/* Register: CLOCK_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 4 : Write '1' to Disable interrupt for CTTO event */
N#define CLOCK_INTENCLR_CTTO_Pos (4UL) /*!< Position of CTTO field. */
N#define CLOCK_INTENCLR_CTTO_Msk (0x1UL << CLOCK_INTENCLR_CTTO_Pos) /*!< Bit mask of CTTO field. */
N#define CLOCK_INTENCLR_CTTO_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENCLR_CTTO_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENCLR_CTTO_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for DONE event */
N#define CLOCK_INTENCLR_DONE_Pos (3UL) /*!< Position of DONE field. */
N#define CLOCK_INTENCLR_DONE_Msk (0x1UL << CLOCK_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field. */
N#define CLOCK_INTENCLR_DONE_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENCLR_DONE_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENCLR_DONE_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for LFCLKSTARTED event */
N#define CLOCK_INTENCLR_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
N#define CLOCK_INTENCLR_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
N#define CLOCK_INTENCLR_LFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENCLR_LFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENCLR_LFCLKSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for HFCLKSTARTED event */
N#define CLOCK_INTENCLR_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
N#define CLOCK_INTENCLR_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
N#define CLOCK_INTENCLR_HFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define CLOCK_INTENCLR_HFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define CLOCK_INTENCLR_HFCLKSTARTED_Clear (1UL) /*!< Disable */
N
N/* Register: CLOCK_HFCLKRUN */
N/* Description: Status indicating that HFCLKSTART task has been triggered */
N
N/* Bit 0 : HFCLKSTART task triggered or not */
N#define CLOCK_HFCLKRUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
N#define CLOCK_HFCLKRUN_STATUS_Msk (0x1UL << CLOCK_HFCLKRUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
N#define CLOCK_HFCLKRUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
N#define CLOCK_HFCLKRUN_STATUS_Triggered (1UL) /*!< Task triggered */
N
N/* Register: CLOCK_HFCLKSTAT */
N/* Description: HFCLK status */
N
N/* Bit 16 : HFCLK state */
N#define CLOCK_HFCLKSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
N#define CLOCK_HFCLKSTAT_STATE_Msk (0x1UL << CLOCK_HFCLKSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
N#define CLOCK_HFCLKSTAT_STATE_NotRunning (0UL) /*!< HFCLK not running */
N#define CLOCK_HFCLKSTAT_STATE_Running (1UL) /*!< HFCLK running */
N
N/* Bit 0 : Source of HFCLK */
N#define CLOCK_HFCLKSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
N#define CLOCK_HFCLKSTAT_SRC_Msk (0x1UL << CLOCK_HFCLKSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
N#define CLOCK_HFCLKSTAT_SRC_RC (0UL) /*!< 64 MHz internal oscillator (HFINT) */
N#define CLOCK_HFCLKSTAT_SRC_Xtal (1UL) /*!< 64 MHz crystal oscillator (HFXO) */
N
N/* Register: CLOCK_LFCLKRUN */
N/* Description: Status indicating that LFCLKSTART task has been triggered */
N
N/* Bit 0 : LFCLKSTART task triggered or not */
N#define CLOCK_LFCLKRUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
N#define CLOCK_LFCLKRUN_STATUS_Msk (0x1UL << CLOCK_LFCLKRUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
N#define CLOCK_LFCLKRUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
N#define CLOCK_LFCLKRUN_STATUS_Triggered (1UL) /*!< Task triggered */
N
N/* Register: CLOCK_LFCLKSTAT */
N/* Description: LFCLK status */
N
N/* Bit 16 : LFCLK state */
N#define CLOCK_LFCLKSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
N#define CLOCK_LFCLKSTAT_STATE_Msk (0x1UL << CLOCK_LFCLKSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
N#define CLOCK_LFCLKSTAT_STATE_NotRunning (0UL) /*!< LFCLK not running */
N#define CLOCK_LFCLKSTAT_STATE_Running (1UL) /*!< LFCLK running */
N
N/* Bits 1..0 : Source of LFCLK */
N#define CLOCK_LFCLKSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
N#define CLOCK_LFCLKSTAT_SRC_Msk (0x3UL << CLOCK_LFCLKSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
N#define CLOCK_LFCLKSTAT_SRC_RC (0UL) /*!< 32.768 kHz RC oscillator */
N#define CLOCK_LFCLKSTAT_SRC_Xtal (1UL) /*!< 32.768 kHz crystal oscillator */
N#define CLOCK_LFCLKSTAT_SRC_Synth (2UL) /*!< 32.768 kHz synthesized from HFCLK */
N
N/* Register: CLOCK_LFCLKSRCCOPY */
N/* Description: Copy of LFCLKSRC register, set when LFCLKSTART task was triggered */
N
N/* Bits 1..0 : Clock source */
N#define CLOCK_LFCLKSRCCOPY_SRC_Pos (0UL) /*!< Position of SRC field. */
N#define CLOCK_LFCLKSRCCOPY_SRC_Msk (0x3UL << CLOCK_LFCLKSRCCOPY_SRC_Pos) /*!< Bit mask of SRC field. */
N#define CLOCK_LFCLKSRCCOPY_SRC_RC (0UL) /*!< 32.768 kHz RC oscillator */
N#define CLOCK_LFCLKSRCCOPY_SRC_Xtal (1UL) /*!< 32.768 kHz crystal oscillator */
N#define CLOCK_LFCLKSRCCOPY_SRC_Synth (2UL) /*!< 32.768 kHz synthesized from HFCLK */
N
N/* Register: CLOCK_LFCLKSRC */
N/* Description: Clock source for the LFCLK */
N
N/* Bit 17 : Enable or disable external source for LFCLK */
N#define CLOCK_LFCLKSRC_EXTERNAL_Pos (17UL) /*!< Position of EXTERNAL field. */
N#define CLOCK_LFCLKSRC_EXTERNAL_Msk (0x1UL << CLOCK_LFCLKSRC_EXTERNAL_Pos) /*!< Bit mask of EXTERNAL field. */
N#define CLOCK_LFCLKSRC_EXTERNAL_Disabled (0UL) /*!< Disable external source (use with Xtal) */
N#define CLOCK_LFCLKSRC_EXTERNAL_Enabled (1UL) /*!< Enable use of external source instead of Xtal (SRC needs to be set to Xtal) */
N
N/* Bit 16 : Enable or disable bypass of LFCLK crystal oscillator with external clock source */
N#define CLOCK_LFCLKSRC_BYPASS_Pos (16UL) /*!< Position of BYPASS field. */
N#define CLOCK_LFCLKSRC_BYPASS_Msk (0x1UL << CLOCK_LFCLKSRC_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
N#define CLOCK_LFCLKSRC_BYPASS_Disabled (0UL) /*!< Disable (use with Xtal or low-swing external source) */
N#define CLOCK_LFCLKSRC_BYPASS_Enabled (1UL) /*!< Enable (use with rail-to-rail external source) */
N
N/* Bits 1..0 : Clock source */
N#define CLOCK_LFCLKSRC_SRC_Pos (0UL) /*!< Position of SRC field. */
N#define CLOCK_LFCLKSRC_SRC_Msk (0x3UL << CLOCK_LFCLKSRC_SRC_Pos) /*!< Bit mask of SRC field. */
N#define CLOCK_LFCLKSRC_SRC_RC (0UL) /*!< 32.768 kHz RC oscillator */
N#define CLOCK_LFCLKSRC_SRC_Xtal (1UL) /*!< 32.768 kHz crystal oscillator */
N#define CLOCK_LFCLKSRC_SRC_Synth (2UL) /*!< 32.768 kHz synthesized from HFCLK */
N
N/* Register: CLOCK_CTIV */
N/* Description: Calibration timer interval */
N
N/* Bits 6..0 : Calibration timer interval in multiple of 0.25 seconds. Range: 0.25 seconds to 31.75 seconds. */
N#define CLOCK_CTIV_CTIV_Pos (0UL) /*!< Position of CTIV field. */
N#define CLOCK_CTIV_CTIV_Msk (0x7FUL << CLOCK_CTIV_CTIV_Pos) /*!< Bit mask of CTIV field. */
N
N/* Register: CLOCK_TRACECONFIG */
N/* Description: Clocking options for the Trace Port debug interface */
N
N/* Bits 17..16 : Pin multiplexing of trace signals. */
N#define CLOCK_TRACECONFIG_TRACEMUX_Pos (16UL) /*!< Position of TRACEMUX field. */
N#define CLOCK_TRACECONFIG_TRACEMUX_Msk (0x3UL << CLOCK_TRACECONFIG_TRACEMUX_Pos) /*!< Bit mask of TRACEMUX field. */
N#define CLOCK_TRACECONFIG_TRACEMUX_GPIO (0UL) /*!< GPIOs multiplexed onto all trace-pins */
N#define CLOCK_TRACECONFIG_TRACEMUX_Serial (1UL) /*!< SWO multiplexed onto P0.18, GPIO multiplexed onto other trace pins */
N#define CLOCK_TRACECONFIG_TRACEMUX_Parallel (2UL) /*!< TRACECLK and TRACEDATA multiplexed onto P0.20, P0.18, P0.16, P0.15 and P0.14. */
N
N/* Bits 1..0 : Speed of Trace Port clock. Note that the TRACECLK pin will output this clock divided by two. */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_Pos (0UL) /*!< Position of TRACEPORTSPEED field. */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_Msk (0x3UL << CLOCK_TRACECONFIG_TRACEPORTSPEED_Pos) /*!< Bit mask of TRACEPORTSPEED field. */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_32MHz (0UL) /*!< 32 MHz Trace Port clock (TRACECLK = 16 MHz) */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_16MHz (1UL) /*!< 16 MHz Trace Port clock (TRACECLK = 8 MHz) */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_8MHz (2UL) /*!< 8 MHz Trace Port clock (TRACECLK = 4 MHz) */
N#define CLOCK_TRACECONFIG_TRACEPORTSPEED_4MHz (3UL) /*!< 4 MHz Trace Port clock (TRACECLK = 2 MHz) */
N
N
N/* Peripheral: COMP */
N/* Description: Comparator */
N
N/* Register: COMP_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 4 : Shortcut between CROSS event and STOP task */
N#define COMP_SHORTS_CROSS_STOP_Pos (4UL) /*!< Position of CROSS_STOP field. */
N#define COMP_SHORTS_CROSS_STOP_Msk (0x1UL << COMP_SHORTS_CROSS_STOP_Pos) /*!< Bit mask of CROSS_STOP field. */
N#define COMP_SHORTS_CROSS_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define COMP_SHORTS_CROSS_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between UP event and STOP task */
N#define COMP_SHORTS_UP_STOP_Pos (3UL) /*!< Position of UP_STOP field. */
N#define COMP_SHORTS_UP_STOP_Msk (0x1UL << COMP_SHORTS_UP_STOP_Pos) /*!< Bit mask of UP_STOP field. */
N#define COMP_SHORTS_UP_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define COMP_SHORTS_UP_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between DOWN event and STOP task */
N#define COMP_SHORTS_DOWN_STOP_Pos (2UL) /*!< Position of DOWN_STOP field. */
N#define COMP_SHORTS_DOWN_STOP_Msk (0x1UL << COMP_SHORTS_DOWN_STOP_Pos) /*!< Bit mask of DOWN_STOP field. */
N#define COMP_SHORTS_DOWN_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define COMP_SHORTS_DOWN_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between READY event and STOP task */
N#define COMP_SHORTS_READY_STOP_Pos (1UL) /*!< Position of READY_STOP field. */
N#define COMP_SHORTS_READY_STOP_Msk (0x1UL << COMP_SHORTS_READY_STOP_Pos) /*!< Bit mask of READY_STOP field. */
N#define COMP_SHORTS_READY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define COMP_SHORTS_READY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between READY event and SAMPLE task */
N#define COMP_SHORTS_READY_SAMPLE_Pos (0UL) /*!< Position of READY_SAMPLE field. */
N#define COMP_SHORTS_READY_SAMPLE_Msk (0x1UL << COMP_SHORTS_READY_SAMPLE_Pos) /*!< Bit mask of READY_SAMPLE field. */
N#define COMP_SHORTS_READY_SAMPLE_Disabled (0UL) /*!< Disable shortcut */
N#define COMP_SHORTS_READY_SAMPLE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: COMP_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 3 : Enable or disable interrupt for CROSS event */
N#define COMP_INTEN_CROSS_Pos (3UL) /*!< Position of CROSS field. */
N#define COMP_INTEN_CROSS_Msk (0x1UL << COMP_INTEN_CROSS_Pos) /*!< Bit mask of CROSS field. */
N#define COMP_INTEN_CROSS_Disabled (0UL) /*!< Disable */
N#define COMP_INTEN_CROSS_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for UP event */
N#define COMP_INTEN_UP_Pos (2UL) /*!< Position of UP field. */
N#define COMP_INTEN_UP_Msk (0x1UL << COMP_INTEN_UP_Pos) /*!< Bit mask of UP field. */
N#define COMP_INTEN_UP_Disabled (0UL) /*!< Disable */
N#define COMP_INTEN_UP_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for DOWN event */
N#define COMP_INTEN_DOWN_Pos (1UL) /*!< Position of DOWN field. */
N#define COMP_INTEN_DOWN_Msk (0x1UL << COMP_INTEN_DOWN_Pos) /*!< Bit mask of DOWN field. */
N#define COMP_INTEN_DOWN_Disabled (0UL) /*!< Disable */
N#define COMP_INTEN_DOWN_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for READY event */
N#define COMP_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
N#define COMP_INTEN_READY_Msk (0x1UL << COMP_INTEN_READY_Pos) /*!< Bit mask of READY field. */
N#define COMP_INTEN_READY_Disabled (0UL) /*!< Disable */
N#define COMP_INTEN_READY_Enabled (1UL) /*!< Enable */
N
N/* Register: COMP_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 3 : Write '1' to Enable interrupt for CROSS event */
N#define COMP_INTENSET_CROSS_Pos (3UL) /*!< Position of CROSS field. */
N#define COMP_INTENSET_CROSS_Msk (0x1UL << COMP_INTENSET_CROSS_Pos) /*!< Bit mask of CROSS field. */
N#define COMP_INTENSET_CROSS_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENSET_CROSS_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENSET_CROSS_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for UP event */
N#define COMP_INTENSET_UP_Pos (2UL) /*!< Position of UP field. */
N#define COMP_INTENSET_UP_Msk (0x1UL << COMP_INTENSET_UP_Pos) /*!< Bit mask of UP field. */
N#define COMP_INTENSET_UP_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENSET_UP_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENSET_UP_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for DOWN event */
N#define COMP_INTENSET_DOWN_Pos (1UL) /*!< Position of DOWN field. */
N#define COMP_INTENSET_DOWN_Msk (0x1UL << COMP_INTENSET_DOWN_Pos) /*!< Bit mask of DOWN field. */
N#define COMP_INTENSET_DOWN_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENSET_DOWN_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENSET_DOWN_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for READY event */
N#define COMP_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
N#define COMP_INTENSET_READY_Msk (0x1UL << COMP_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
N#define COMP_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENSET_READY_Set (1UL) /*!< Enable */
N
N/* Register: COMP_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 3 : Write '1' to Disable interrupt for CROSS event */
N#define COMP_INTENCLR_CROSS_Pos (3UL) /*!< Position of CROSS field. */
N#define COMP_INTENCLR_CROSS_Msk (0x1UL << COMP_INTENCLR_CROSS_Pos) /*!< Bit mask of CROSS field. */
N#define COMP_INTENCLR_CROSS_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENCLR_CROSS_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENCLR_CROSS_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for UP event */
N#define COMP_INTENCLR_UP_Pos (2UL) /*!< Position of UP field. */
N#define COMP_INTENCLR_UP_Msk (0x1UL << COMP_INTENCLR_UP_Pos) /*!< Bit mask of UP field. */
N#define COMP_INTENCLR_UP_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENCLR_UP_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENCLR_UP_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for DOWN event */
N#define COMP_INTENCLR_DOWN_Pos (1UL) /*!< Position of DOWN field. */
N#define COMP_INTENCLR_DOWN_Msk (0x1UL << COMP_INTENCLR_DOWN_Pos) /*!< Bit mask of DOWN field. */
N#define COMP_INTENCLR_DOWN_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENCLR_DOWN_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENCLR_DOWN_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for READY event */
N#define COMP_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
N#define COMP_INTENCLR_READY_Msk (0x1UL << COMP_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
N#define COMP_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
N#define COMP_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
N#define COMP_INTENCLR_READY_Clear (1UL) /*!< Disable */
N
N/* Register: COMP_RESULT */
N/* Description: Compare result */
N
N/* Bit 0 : Result of last compare. Decision point SAMPLE task. */
N#define COMP_RESULT_RESULT_Pos (0UL) /*!< Position of RESULT field. */
N#define COMP_RESULT_RESULT_Msk (0x1UL << COMP_RESULT_RESULT_Pos) /*!< Bit mask of RESULT field. */
N#define COMP_RESULT_RESULT_Below (0UL) /*!< Input voltage is below the threshold (VIN+ &lt; VIN-) */
N#define COMP_RESULT_RESULT_Above (1UL) /*!< Input voltage is above the threshold (VIN+ &gt; VIN-) */
N
N/* Register: COMP_ENABLE */
N/* Description: COMP enable */
N
N/* Bits 1..0 : Enable or disable COMP */
N#define COMP_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define COMP_ENABLE_ENABLE_Msk (0x3UL << COMP_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define COMP_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define COMP_ENABLE_ENABLE_Enabled (2UL) /*!< Enable */
N
N/* Register: COMP_PSEL */
N/* Description: Pin select */
N
N/* Bits 2..0 : Analog pin select */
N#define COMP_PSEL_PSEL_Pos (0UL) /*!< Position of PSEL field. */
N#define COMP_PSEL_PSEL_Msk (0x7UL << COMP_PSEL_PSEL_Pos) /*!< Bit mask of PSEL field. */
N#define COMP_PSEL_PSEL_AnalogInput0 (0UL) /*!< AIN0 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput1 (1UL) /*!< AIN1 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput2 (2UL) /*!< AIN2 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput3 (3UL) /*!< AIN3 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput4 (4UL) /*!< AIN4 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput5 (5UL) /*!< AIN5 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput6 (6UL) /*!< AIN6 selected as analog input */
N#define COMP_PSEL_PSEL_AnalogInput7 (7UL) /*!< AIN7 selected as analog input */
N
N/* Register: COMP_REFSEL */
N/* Description: Reference source select */
N
N/* Bits 2..0 : Reference select */
N#define COMP_REFSEL_REFSEL_Pos (0UL) /*!< Position of REFSEL field. */
N#define COMP_REFSEL_REFSEL_Msk (0x7UL << COMP_REFSEL_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
N#define COMP_REFSEL_REFSEL_Int1V2 (0UL) /*!< VREF = internal 1.2 V reference (VDD &gt;= 1.7 V) */
N#define COMP_REFSEL_REFSEL_Int1V8 (1UL) /*!< VREF = internal 1.8 V reference (VDD &gt;= VREF + 0.2 V) */
N#define COMP_REFSEL_REFSEL_Int2V4 (2UL) /*!< VREF = internal 2.4 V reference (VDD &gt;= VREF + 0.2 V) */
N#define COMP_REFSEL_REFSEL_VDD (4UL) /*!< VREF = VDD */
N#define COMP_REFSEL_REFSEL_ARef (7UL) /*!< VREF = AREF (VDD &gt;= VREF &gt;= AREFMIN) */
N
N/* Register: COMP_EXTREFSEL */
N/* Description: External reference select */
N
N/* Bit 0 : External analog reference select */
N#define COMP_EXTREFSEL_EXTREFSEL_Pos (0UL) /*!< Position of EXTREFSEL field. */
N#define COMP_EXTREFSEL_EXTREFSEL_Msk (0x1UL << COMP_EXTREFSEL_EXTREFSEL_Pos) /*!< Bit mask of EXTREFSEL field. */
N#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference0 (0UL) /*!< Use AIN0 as external analog reference */
N#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference1 (1UL) /*!< Use AIN1 as external analog reference */
N
N/* Register: COMP_TH */
N/* Description: Threshold configuration for hysteresis unit */
N
N/* Bits 13..8 : VUP = (THUP+1)/64*VREF */
N#define COMP_TH_THUP_Pos (8UL) /*!< Position of THUP field. */
N#define COMP_TH_THUP_Msk (0x3FUL << COMP_TH_THUP_Pos) /*!< Bit mask of THUP field. */
N
N/* Bits 5..0 : VDOWN = (THDOWN+1)/64*VREF */
N#define COMP_TH_THDOWN_Pos (0UL) /*!< Position of THDOWN field. */
N#define COMP_TH_THDOWN_Msk (0x3FUL << COMP_TH_THDOWN_Pos) /*!< Bit mask of THDOWN field. */
N
N/* Register: COMP_MODE */
N/* Description: Mode configuration */
N
N/* Bit 8 : Main operation mode */
N#define COMP_MODE_MAIN_Pos (8UL) /*!< Position of MAIN field. */
N#define COMP_MODE_MAIN_Msk (0x1UL << COMP_MODE_MAIN_Pos) /*!< Bit mask of MAIN field. */
N#define COMP_MODE_MAIN_SE (0UL) /*!< Single ended mode */
N#define COMP_MODE_MAIN_Diff (1UL) /*!< Differential mode */
N
N/* Bits 1..0 : Speed and power mode */
N#define COMP_MODE_SP_Pos (0UL) /*!< Position of SP field. */
N#define COMP_MODE_SP_Msk (0x3UL << COMP_MODE_SP_Pos) /*!< Bit mask of SP field. */
N#define COMP_MODE_SP_Low (0UL) /*!< Low power mode */
N#define COMP_MODE_SP_Normal (1UL) /*!< Normal mode */
N#define COMP_MODE_SP_High (2UL) /*!< High speed mode */
N
N/* Register: COMP_HYST */
N/* Description: Comparator hysteresis enable */
N
N/* Bit 0 : Comparator hysteresis */
N#define COMP_HYST_HYST_Pos (0UL) /*!< Position of HYST field. */
N#define COMP_HYST_HYST_Msk (0x1UL << COMP_HYST_HYST_Pos) /*!< Bit mask of HYST field. */
N#define COMP_HYST_HYST_NoHyst (0UL) /*!< Comparator hysteresis disabled */
N#define COMP_HYST_HYST_Hyst50mV (1UL) /*!< Comparator hysteresis enabled */
N
N/* Register: COMP_ISOURCE */
N/* Description: Current source select on analog input */
N
N/* Bits 1..0 : Comparator hysteresis */
N#define COMP_ISOURCE_ISOURCE_Pos (0UL) /*!< Position of ISOURCE field. */
N#define COMP_ISOURCE_ISOURCE_Msk (0x3UL << COMP_ISOURCE_ISOURCE_Pos) /*!< Bit mask of ISOURCE field. */
N#define COMP_ISOURCE_ISOURCE_Off (0UL) /*!< Current source disabled */
N#define COMP_ISOURCE_ISOURCE_Ien2mA5 (1UL) /*!< Current source enabled (+/- 2.5 uA) */
N#define COMP_ISOURCE_ISOURCE_Ien5mA (2UL) /*!< Current source enabled (+/- 5 uA) */
N#define COMP_ISOURCE_ISOURCE_Ien10mA (3UL) /*!< Current source enabled (+/- 10 uA) */
N
N
N/* Peripheral: ECB */
N/* Description: AES ECB Mode Encryption */
N
N/* Register: ECB_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 1 : Write '1' to Enable interrupt for ERRORECB event */
N#define ECB_INTENSET_ERRORECB_Pos (1UL) /*!< Position of ERRORECB field. */
N#define ECB_INTENSET_ERRORECB_Msk (0x1UL << ECB_INTENSET_ERRORECB_Pos) /*!< Bit mask of ERRORECB field. */
N#define ECB_INTENSET_ERRORECB_Disabled (0UL) /*!< Read: Disabled */
N#define ECB_INTENSET_ERRORECB_Enabled (1UL) /*!< Read: Enabled */
N#define ECB_INTENSET_ERRORECB_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for ENDECB event */
N#define ECB_INTENSET_ENDECB_Pos (0UL) /*!< Position of ENDECB field. */
N#define ECB_INTENSET_ENDECB_Msk (0x1UL << ECB_INTENSET_ENDECB_Pos) /*!< Bit mask of ENDECB field. */
N#define ECB_INTENSET_ENDECB_Disabled (0UL) /*!< Read: Disabled */
N#define ECB_INTENSET_ENDECB_Enabled (1UL) /*!< Read: Enabled */
N#define ECB_INTENSET_ENDECB_Set (1UL) /*!< Enable */
N
N/* Register: ECB_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 1 : Write '1' to Disable interrupt for ERRORECB event */
N#define ECB_INTENCLR_ERRORECB_Pos (1UL) /*!< Position of ERRORECB field. */
N#define ECB_INTENCLR_ERRORECB_Msk (0x1UL << ECB_INTENCLR_ERRORECB_Pos) /*!< Bit mask of ERRORECB field. */
N#define ECB_INTENCLR_ERRORECB_Disabled (0UL) /*!< Read: Disabled */
N#define ECB_INTENCLR_ERRORECB_Enabled (1UL) /*!< Read: Enabled */
N#define ECB_INTENCLR_ERRORECB_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for ENDECB event */
N#define ECB_INTENCLR_ENDECB_Pos (0UL) /*!< Position of ENDECB field. */
N#define ECB_INTENCLR_ENDECB_Msk (0x1UL << ECB_INTENCLR_ENDECB_Pos) /*!< Bit mask of ENDECB field. */
N#define ECB_INTENCLR_ENDECB_Disabled (0UL) /*!< Read: Disabled */
N#define ECB_INTENCLR_ENDECB_Enabled (1UL) /*!< Read: Enabled */
N#define ECB_INTENCLR_ENDECB_Clear (1UL) /*!< Disable */
N
N/* Register: ECB_ECBDATAPTR */
N/* Description: ECB block encrypt memory pointers */
N
N/* Bits 31..0 : Pointer to the ECB data structure (see Table 1 ECB data structure overview) */
N#define ECB_ECBDATAPTR_ECBDATAPTR_Pos (0UL) /*!< Position of ECBDATAPTR field. */
N#define ECB_ECBDATAPTR_ECBDATAPTR_Msk (0xFFFFFFFFUL << ECB_ECBDATAPTR_ECBDATAPTR_Pos) /*!< Bit mask of ECBDATAPTR field. */
N
N
N/* Peripheral: EGU */
N/* Description: Event Generator Unit 0 */
N
N/* Register: EGU_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 15 : Enable or disable interrupt for TRIGGERED[15] event */
N#define EGU_INTEN_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
N#define EGU_INTEN_TRIGGERED15_Msk (0x1UL << EGU_INTEN_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
N#define EGU_INTEN_TRIGGERED15_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED15_Enabled (1UL) /*!< Enable */
N
N/* Bit 14 : Enable or disable interrupt for TRIGGERED[14] event */
N#define EGU_INTEN_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
N#define EGU_INTEN_TRIGGERED14_Msk (0x1UL << EGU_INTEN_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
N#define EGU_INTEN_TRIGGERED14_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED14_Enabled (1UL) /*!< Enable */
N
N/* Bit 13 : Enable or disable interrupt for TRIGGERED[13] event */
N#define EGU_INTEN_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
N#define EGU_INTEN_TRIGGERED13_Msk (0x1UL << EGU_INTEN_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
N#define EGU_INTEN_TRIGGERED13_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED13_Enabled (1UL) /*!< Enable */
N
N/* Bit 12 : Enable or disable interrupt for TRIGGERED[12] event */
N#define EGU_INTEN_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
N#define EGU_INTEN_TRIGGERED12_Msk (0x1UL << EGU_INTEN_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
N#define EGU_INTEN_TRIGGERED12_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED12_Enabled (1UL) /*!< Enable */
N
N/* Bit 11 : Enable or disable interrupt for TRIGGERED[11] event */
N#define EGU_INTEN_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
N#define EGU_INTEN_TRIGGERED11_Msk (0x1UL << EGU_INTEN_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
N#define EGU_INTEN_TRIGGERED11_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED11_Enabled (1UL) /*!< Enable */
N
N/* Bit 10 : Enable or disable interrupt for TRIGGERED[10] event */
N#define EGU_INTEN_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
N#define EGU_INTEN_TRIGGERED10_Msk (0x1UL << EGU_INTEN_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
N#define EGU_INTEN_TRIGGERED10_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED10_Enabled (1UL) /*!< Enable */
N
N/* Bit 9 : Enable or disable interrupt for TRIGGERED[9] event */
N#define EGU_INTEN_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
N#define EGU_INTEN_TRIGGERED9_Msk (0x1UL << EGU_INTEN_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
N#define EGU_INTEN_TRIGGERED9_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED9_Enabled (1UL) /*!< Enable */
N
N/* Bit 8 : Enable or disable interrupt for TRIGGERED[8] event */
N#define EGU_INTEN_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
N#define EGU_INTEN_TRIGGERED8_Msk (0x1UL << EGU_INTEN_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
N#define EGU_INTEN_TRIGGERED8_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED8_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable interrupt for TRIGGERED[7] event */
N#define EGU_INTEN_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
N#define EGU_INTEN_TRIGGERED7_Msk (0x1UL << EGU_INTEN_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
N#define EGU_INTEN_TRIGGERED7_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED7_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable interrupt for TRIGGERED[6] event */
N#define EGU_INTEN_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
N#define EGU_INTEN_TRIGGERED6_Msk (0x1UL << EGU_INTEN_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
N#define EGU_INTEN_TRIGGERED6_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED6_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable interrupt for TRIGGERED[5] event */
N#define EGU_INTEN_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
N#define EGU_INTEN_TRIGGERED5_Msk (0x1UL << EGU_INTEN_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
N#define EGU_INTEN_TRIGGERED5_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED5_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for TRIGGERED[4] event */
N#define EGU_INTEN_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
N#define EGU_INTEN_TRIGGERED4_Msk (0x1UL << EGU_INTEN_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
N#define EGU_INTEN_TRIGGERED4_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED4_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable interrupt for TRIGGERED[3] event */
N#define EGU_INTEN_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
N#define EGU_INTEN_TRIGGERED3_Msk (0x1UL << EGU_INTEN_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
N#define EGU_INTEN_TRIGGERED3_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED3_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for TRIGGERED[2] event */
N#define EGU_INTEN_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
N#define EGU_INTEN_TRIGGERED2_Msk (0x1UL << EGU_INTEN_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
N#define EGU_INTEN_TRIGGERED2_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED2_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for TRIGGERED[1] event */
N#define EGU_INTEN_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
N#define EGU_INTEN_TRIGGERED1_Msk (0x1UL << EGU_INTEN_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
N#define EGU_INTEN_TRIGGERED1_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED1_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for TRIGGERED[0] event */
N#define EGU_INTEN_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
N#define EGU_INTEN_TRIGGERED0_Msk (0x1UL << EGU_INTEN_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
N#define EGU_INTEN_TRIGGERED0_Disabled (0UL) /*!< Disable */
N#define EGU_INTEN_TRIGGERED0_Enabled (1UL) /*!< Enable */
N
N/* Register: EGU_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 15 : Write '1' to Enable interrupt for TRIGGERED[15] event */
N#define EGU_INTENSET_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
N#define EGU_INTENSET_TRIGGERED15_Msk (0x1UL << EGU_INTENSET_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
N#define EGU_INTENSET_TRIGGERED15_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED15_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED15_Set (1UL) /*!< Enable */
N
N/* Bit 14 : Write '1' to Enable interrupt for TRIGGERED[14] event */
N#define EGU_INTENSET_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
N#define EGU_INTENSET_TRIGGERED14_Msk (0x1UL << EGU_INTENSET_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
N#define EGU_INTENSET_TRIGGERED14_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED14_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED14_Set (1UL) /*!< Enable */
N
N/* Bit 13 : Write '1' to Enable interrupt for TRIGGERED[13] event */
N#define EGU_INTENSET_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
N#define EGU_INTENSET_TRIGGERED13_Msk (0x1UL << EGU_INTENSET_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
N#define EGU_INTENSET_TRIGGERED13_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED13_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED13_Set (1UL) /*!< Enable */
N
N/* Bit 12 : Write '1' to Enable interrupt for TRIGGERED[12] event */
N#define EGU_INTENSET_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
N#define EGU_INTENSET_TRIGGERED12_Msk (0x1UL << EGU_INTENSET_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
N#define EGU_INTENSET_TRIGGERED12_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED12_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED12_Set (1UL) /*!< Enable */
N
N/* Bit 11 : Write '1' to Enable interrupt for TRIGGERED[11] event */
N#define EGU_INTENSET_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
N#define EGU_INTENSET_TRIGGERED11_Msk (0x1UL << EGU_INTENSET_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
N#define EGU_INTENSET_TRIGGERED11_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED11_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED11_Set (1UL) /*!< Enable */
N
N/* Bit 10 : Write '1' to Enable interrupt for TRIGGERED[10] event */
N#define EGU_INTENSET_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
N#define EGU_INTENSET_TRIGGERED10_Msk (0x1UL << EGU_INTENSET_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
N#define EGU_INTENSET_TRIGGERED10_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED10_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED10_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for TRIGGERED[9] event */
N#define EGU_INTENSET_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
N#define EGU_INTENSET_TRIGGERED9_Msk (0x1UL << EGU_INTENSET_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
N#define EGU_INTENSET_TRIGGERED9_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED9_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED9_Set (1UL) /*!< Enable */
N
N/* Bit 8 : Write '1' to Enable interrupt for TRIGGERED[8] event */
N#define EGU_INTENSET_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
N#define EGU_INTENSET_TRIGGERED8_Msk (0x1UL << EGU_INTENSET_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
N#define EGU_INTENSET_TRIGGERED8_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED8_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED8_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for TRIGGERED[7] event */
N#define EGU_INTENSET_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
N#define EGU_INTENSET_TRIGGERED7_Msk (0x1UL << EGU_INTENSET_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
N#define EGU_INTENSET_TRIGGERED7_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED7_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED7_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for TRIGGERED[6] event */
N#define EGU_INTENSET_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
N#define EGU_INTENSET_TRIGGERED6_Msk (0x1UL << EGU_INTENSET_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
N#define EGU_INTENSET_TRIGGERED6_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED6_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED6_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for TRIGGERED[5] event */
N#define EGU_INTENSET_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
N#define EGU_INTENSET_TRIGGERED5_Msk (0x1UL << EGU_INTENSET_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
N#define EGU_INTENSET_TRIGGERED5_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED5_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED5_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for TRIGGERED[4] event */
N#define EGU_INTENSET_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
N#define EGU_INTENSET_TRIGGERED4_Msk (0x1UL << EGU_INTENSET_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
N#define EGU_INTENSET_TRIGGERED4_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED4_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED4_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for TRIGGERED[3] event */
N#define EGU_INTENSET_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
N#define EGU_INTENSET_TRIGGERED3_Msk (0x1UL << EGU_INTENSET_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
N#define EGU_INTENSET_TRIGGERED3_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED3_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED3_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for TRIGGERED[2] event */
N#define EGU_INTENSET_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
N#define EGU_INTENSET_TRIGGERED2_Msk (0x1UL << EGU_INTENSET_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
N#define EGU_INTENSET_TRIGGERED2_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED2_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED2_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for TRIGGERED[1] event */
N#define EGU_INTENSET_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
N#define EGU_INTENSET_TRIGGERED1_Msk (0x1UL << EGU_INTENSET_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
N#define EGU_INTENSET_TRIGGERED1_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED1_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED1_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for TRIGGERED[0] event */
N#define EGU_INTENSET_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
N#define EGU_INTENSET_TRIGGERED0_Msk (0x1UL << EGU_INTENSET_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
N#define EGU_INTENSET_TRIGGERED0_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENSET_TRIGGERED0_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENSET_TRIGGERED0_Set (1UL) /*!< Enable */
N
N/* Register: EGU_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 15 : Write '1' to Disable interrupt for TRIGGERED[15] event */
N#define EGU_INTENCLR_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
N#define EGU_INTENCLR_TRIGGERED15_Msk (0x1UL << EGU_INTENCLR_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
N#define EGU_INTENCLR_TRIGGERED15_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED15_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED15_Clear (1UL) /*!< Disable */
N
N/* Bit 14 : Write '1' to Disable interrupt for TRIGGERED[14] event */
N#define EGU_INTENCLR_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
N#define EGU_INTENCLR_TRIGGERED14_Msk (0x1UL << EGU_INTENCLR_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
N#define EGU_INTENCLR_TRIGGERED14_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED14_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED14_Clear (1UL) /*!< Disable */
N
N/* Bit 13 : Write '1' to Disable interrupt for TRIGGERED[13] event */
N#define EGU_INTENCLR_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
N#define EGU_INTENCLR_TRIGGERED13_Msk (0x1UL << EGU_INTENCLR_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
N#define EGU_INTENCLR_TRIGGERED13_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED13_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED13_Clear (1UL) /*!< Disable */
N
N/* Bit 12 : Write '1' to Disable interrupt for TRIGGERED[12] event */
N#define EGU_INTENCLR_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
N#define EGU_INTENCLR_TRIGGERED12_Msk (0x1UL << EGU_INTENCLR_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
N#define EGU_INTENCLR_TRIGGERED12_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED12_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED12_Clear (1UL) /*!< Disable */
N
N/* Bit 11 : Write '1' to Disable interrupt for TRIGGERED[11] event */
N#define EGU_INTENCLR_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
N#define EGU_INTENCLR_TRIGGERED11_Msk (0x1UL << EGU_INTENCLR_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
N#define EGU_INTENCLR_TRIGGERED11_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED11_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED11_Clear (1UL) /*!< Disable */
N
N/* Bit 10 : Write '1' to Disable interrupt for TRIGGERED[10] event */
N#define EGU_INTENCLR_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
N#define EGU_INTENCLR_TRIGGERED10_Msk (0x1UL << EGU_INTENCLR_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
N#define EGU_INTENCLR_TRIGGERED10_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED10_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED10_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for TRIGGERED[9] event */
N#define EGU_INTENCLR_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
N#define EGU_INTENCLR_TRIGGERED9_Msk (0x1UL << EGU_INTENCLR_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
N#define EGU_INTENCLR_TRIGGERED9_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED9_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED9_Clear (1UL) /*!< Disable */
N
N/* Bit 8 : Write '1' to Disable interrupt for TRIGGERED[8] event */
N#define EGU_INTENCLR_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
N#define EGU_INTENCLR_TRIGGERED8_Msk (0x1UL << EGU_INTENCLR_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
N#define EGU_INTENCLR_TRIGGERED8_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED8_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED8_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for TRIGGERED[7] event */
N#define EGU_INTENCLR_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
N#define EGU_INTENCLR_TRIGGERED7_Msk (0x1UL << EGU_INTENCLR_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
N#define EGU_INTENCLR_TRIGGERED7_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED7_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED7_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for TRIGGERED[6] event */
N#define EGU_INTENCLR_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
N#define EGU_INTENCLR_TRIGGERED6_Msk (0x1UL << EGU_INTENCLR_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
N#define EGU_INTENCLR_TRIGGERED6_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED6_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED6_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for TRIGGERED[5] event */
N#define EGU_INTENCLR_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
N#define EGU_INTENCLR_TRIGGERED5_Msk (0x1UL << EGU_INTENCLR_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
N#define EGU_INTENCLR_TRIGGERED5_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED5_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED5_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for TRIGGERED[4] event */
N#define EGU_INTENCLR_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
N#define EGU_INTENCLR_TRIGGERED4_Msk (0x1UL << EGU_INTENCLR_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
N#define EGU_INTENCLR_TRIGGERED4_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED4_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED4_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for TRIGGERED[3] event */
N#define EGU_INTENCLR_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
N#define EGU_INTENCLR_TRIGGERED3_Msk (0x1UL << EGU_INTENCLR_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
N#define EGU_INTENCLR_TRIGGERED3_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED3_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED3_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for TRIGGERED[2] event */
N#define EGU_INTENCLR_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
N#define EGU_INTENCLR_TRIGGERED2_Msk (0x1UL << EGU_INTENCLR_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
N#define EGU_INTENCLR_TRIGGERED2_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED2_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED2_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for TRIGGERED[1] event */
N#define EGU_INTENCLR_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
N#define EGU_INTENCLR_TRIGGERED1_Msk (0x1UL << EGU_INTENCLR_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
N#define EGU_INTENCLR_TRIGGERED1_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED1_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED1_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for TRIGGERED[0] event */
N#define EGU_INTENCLR_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
N#define EGU_INTENCLR_TRIGGERED0_Msk (0x1UL << EGU_INTENCLR_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
N#define EGU_INTENCLR_TRIGGERED0_Disabled (0UL) /*!< Read: Disabled */
N#define EGU_INTENCLR_TRIGGERED0_Enabled (1UL) /*!< Read: Enabled */
N#define EGU_INTENCLR_TRIGGERED0_Clear (1UL) /*!< Disable */
N
N
N/* Peripheral: FICR */
N/* Description: Factory Information Configuration Registers */
N
N/* Register: FICR_CODEPAGESIZE */
N/* Description: Code memory page size */
N
N/* Bits 31..0 : Code memory page size */
N#define FICR_CODEPAGESIZE_CODEPAGESIZE_Pos (0UL) /*!< Position of CODEPAGESIZE field. */
N#define FICR_CODEPAGESIZE_CODEPAGESIZE_Msk (0xFFFFFFFFUL << FICR_CODEPAGESIZE_CODEPAGESIZE_Pos) /*!< Bit mask of CODEPAGESIZE field. */
N
N/* Register: FICR_CODESIZE */
N/* Description: Code memory size */
N
N/* Bits 31..0 : Code memory size in number of pages */
N#define FICR_CODESIZE_CODESIZE_Pos (0UL) /*!< Position of CODESIZE field. */
N#define FICR_CODESIZE_CODESIZE_Msk (0xFFFFFFFFUL << FICR_CODESIZE_CODESIZE_Pos) /*!< Bit mask of CODESIZE field. */
N
N/* Register: FICR_DEVICEID */
N/* Description: Description collection[0]:  Device identifier */
N
N/* Bits 31..0 : 64 bit unique device identifier */
N#define FICR_DEVICEID_DEVICEID_Pos (0UL) /*!< Position of DEVICEID field. */
N#define FICR_DEVICEID_DEVICEID_Msk (0xFFFFFFFFUL << FICR_DEVICEID_DEVICEID_Pos) /*!< Bit mask of DEVICEID field. */
N
N/* Register: FICR_ER */
N/* Description: Description collection[0]:  Encryption Root, word 0 */
N
N/* Bits 31..0 : Encryption Root, word n */
N#define FICR_ER_ER_Pos (0UL) /*!< Position of ER field. */
N#define FICR_ER_ER_Msk (0xFFFFFFFFUL << FICR_ER_ER_Pos) /*!< Bit mask of ER field. */
N
N/* Register: FICR_IR */
N/* Description: Description collection[0]:  Identity Root, word 0 */
N
N/* Bits 31..0 : Identity Root, word n */
N#define FICR_IR_IR_Pos (0UL) /*!< Position of IR field. */
N#define FICR_IR_IR_Msk (0xFFFFFFFFUL << FICR_IR_IR_Pos) /*!< Bit mask of IR field. */
N
N/* Register: FICR_DEVICEADDRTYPE */
N/* Description: Device address type */
N
N/* Bit 0 : Device address type */
N#define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos (0UL) /*!< Position of DEVICEADDRTYPE field. */
N#define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk (0x1UL << FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos) /*!< Bit mask of DEVICEADDRTYPE field. */
N#define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public (0UL) /*!< Public address */
N#define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random (1UL) /*!< Random address */
N
N/* Register: FICR_DEVICEADDR */
N/* Description: Description collection[0]:  Device address 0 */
N
N/* Bits 31..0 : 48 bit device address */
N#define FICR_DEVICEADDR_DEVICEADDR_Pos (0UL) /*!< Position of DEVICEADDR field. */
N#define FICR_DEVICEADDR_DEVICEADDR_Msk (0xFFFFFFFFUL << FICR_DEVICEADDR_DEVICEADDR_Pos) /*!< Bit mask of DEVICEADDR field. */
N
N/* Register: FICR_INFO_PART */
N/* Description: Part code */
N
N/* Bits 31..0 : Part code */
N#define FICR_INFO_PART_PART_Pos (0UL) /*!< Position of PART field. */
N#define FICR_INFO_PART_PART_Msk (0xFFFFFFFFUL << FICR_INFO_PART_PART_Pos) /*!< Bit mask of PART field. */
N#define FICR_INFO_PART_PART_N52832 (0x52832UL) /*!< nRF52832 */
N#define FICR_INFO_PART_PART_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */
N
N/* Register: FICR_INFO_VARIANT */
N/* Description: Part Variant, Hardware version and Production configuration */
N
N/* Bits 31..0 : Part Variant, Hardware version and Production configuration, encoded as ASCII */
N#define FICR_INFO_VARIANT_VARIANT_Pos (0UL) /*!< Position of VARIANT field. */
N#define FICR_INFO_VARIANT_VARIANT_Msk (0xFFFFFFFFUL << FICR_INFO_VARIANT_VARIANT_Pos) /*!< Bit mask of VARIANT field. */
N#define FICR_INFO_VARIANT_VARIANT_AAAA (0x41414141UL) /*!< AAAA */
N#define FICR_INFO_VARIANT_VARIANT_AAAB (0x41414142UL) /*!< AAAB */
N#define FICR_INFO_VARIANT_VARIANT_AABA (0x41414241UL) /*!< AABA */
N#define FICR_INFO_VARIANT_VARIANT_AABB (0x41414242UL) /*!< AABB */
N#define FICR_INFO_VARIANT_VARIANT_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */
N
N/* Register: FICR_INFO_PACKAGE */
N/* Description: Package option */
N
N/* Bits 31..0 : Package option */
N#define FICR_INFO_PACKAGE_PACKAGE_Pos (0UL) /*!< Position of PACKAGE field. */
N#define FICR_INFO_PACKAGE_PACKAGE_Msk (0xFFFFFFFFUL << FICR_INFO_PACKAGE_PACKAGE_Pos) /*!< Bit mask of PACKAGE field. */
N#define FICR_INFO_PACKAGE_PACKAGE_QF (0x2000UL) /*!< QFxx - 48-pin QFN */
N#define FICR_INFO_PACKAGE_PACKAGE_CI (0x2001UL) /*!< CIxx - 7x8 WLCSP 56 balls */
N#define FICR_INFO_PACKAGE_PACKAGE_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */
N
N/* Register: FICR_INFO_RAM */
N/* Description: RAM variant */
N
N/* Bits 31..0 : RAM variant */
N#define FICR_INFO_RAM_RAM_Pos (0UL) /*!< Position of RAM field. */
N#define FICR_INFO_RAM_RAM_Msk (0xFFFFFFFFUL << FICR_INFO_RAM_RAM_Pos) /*!< Bit mask of RAM field. */
N#define FICR_INFO_RAM_RAM_K16 (0x10UL) /*!< 16 kByte RAM */
N#define FICR_INFO_RAM_RAM_K32 (0x20UL) /*!< 32 kByte RAM */
N#define FICR_INFO_RAM_RAM_K64 (0x40UL) /*!< 64 kByte RAM */
N#define FICR_INFO_RAM_RAM_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */
N
N/* Register: FICR_INFO_FLASH */
N/* Description: Flash variant */
N
N/* Bits 31..0 : Flash variant */
N#define FICR_INFO_FLASH_FLASH_Pos (0UL) /*!< Position of FLASH field. */
N#define FICR_INFO_FLASH_FLASH_Msk (0xFFFFFFFFUL << FICR_INFO_FLASH_FLASH_Pos) /*!< Bit mask of FLASH field. */
N#define FICR_INFO_FLASH_FLASH_K128 (0x80UL) /*!< 128 kByte FLASH */
N#define FICR_INFO_FLASH_FLASH_K256 (0x100UL) /*!< 256 kByte FLASH */
N#define FICR_INFO_FLASH_FLASH_K512 (0x200UL) /*!< 512 kByte FLASH */
N#define FICR_INFO_FLASH_FLASH_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */
N
N/* Register: FICR_TEMP_A0 */
N/* Description: Slope definition A0. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A0_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A0_A_Msk (0xFFFUL << FICR_TEMP_A0_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_A1 */
N/* Description: Slope definition A1. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A1_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A1_A_Msk (0xFFFUL << FICR_TEMP_A1_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_A2 */
N/* Description: Slope definition A2. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A2_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A2_A_Msk (0xFFFUL << FICR_TEMP_A2_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_A3 */
N/* Description: Slope definition A3. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A3_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A3_A_Msk (0xFFFUL << FICR_TEMP_A3_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_A4 */
N/* Description: Slope definition A4. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A4_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A4_A_Msk (0xFFFUL << FICR_TEMP_A4_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_A5 */
N/* Description: Slope definition A5. */
N
N/* Bits 11..0 : A (slope definition) register. */
N#define FICR_TEMP_A5_A_Pos (0UL) /*!< Position of A field. */
N#define FICR_TEMP_A5_A_Msk (0xFFFUL << FICR_TEMP_A5_A_Pos) /*!< Bit mask of A field. */
N
N/* Register: FICR_TEMP_B0 */
N/* Description: y-intercept B0. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B0_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B0_B_Msk (0x3FFFUL << FICR_TEMP_B0_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_B1 */
N/* Description: y-intercept B1. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B1_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B1_B_Msk (0x3FFFUL << FICR_TEMP_B1_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_B2 */
N/* Description: y-intercept B2. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B2_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B2_B_Msk (0x3FFFUL << FICR_TEMP_B2_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_B3 */
N/* Description: y-intercept B3. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B3_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B3_B_Msk (0x3FFFUL << FICR_TEMP_B3_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_B4 */
N/* Description: y-intercept B4. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B4_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B4_B_Msk (0x3FFFUL << FICR_TEMP_B4_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_B5 */
N/* Description: y-intercept B5. */
N
N/* Bits 13..0 : B (y-intercept) */
N#define FICR_TEMP_B5_B_Pos (0UL) /*!< Position of B field. */
N#define FICR_TEMP_B5_B_Msk (0x3FFFUL << FICR_TEMP_B5_B_Pos) /*!< Bit mask of B field. */
N
N/* Register: FICR_TEMP_T0 */
N/* Description: Segment end T0. */
N
N/* Bits 7..0 : T (segment end)register. */
N#define FICR_TEMP_T0_T_Pos (0UL) /*!< Position of T field. */
N#define FICR_TEMP_T0_T_Msk (0xFFUL << FICR_TEMP_T0_T_Pos) /*!< Bit mask of T field. */
N
N/* Register: FICR_TEMP_T1 */
N/* Description: Segment end T1. */
N
N/* Bits 7..0 : T (segment end)register. */
N#define FICR_TEMP_T1_T_Pos (0UL) /*!< Position of T field. */
N#define FICR_TEMP_T1_T_Msk (0xFFUL << FICR_TEMP_T1_T_Pos) /*!< Bit mask of T field. */
N
N/* Register: FICR_TEMP_T2 */
N/* Description: Segment end T2. */
N
N/* Bits 7..0 : T (segment end)register. */
N#define FICR_TEMP_T2_T_Pos (0UL) /*!< Position of T field. */
N#define FICR_TEMP_T2_T_Msk (0xFFUL << FICR_TEMP_T2_T_Pos) /*!< Bit mask of T field. */
N
N/* Register: FICR_TEMP_T3 */
N/* Description: Segment end T3. */
N
N/* Bits 7..0 : T (segment end)register. */
N#define FICR_TEMP_T3_T_Pos (0UL) /*!< Position of T field. */
N#define FICR_TEMP_T3_T_Msk (0xFFUL << FICR_TEMP_T3_T_Pos) /*!< Bit mask of T field. */
N
N/* Register: FICR_TEMP_T4 */
N/* Description: Segment end T4. */
N
N/* Bits 7..0 : T (segment end)register. */
N#define FICR_TEMP_T4_T_Pos (0UL) /*!< Position of T field. */
N#define FICR_TEMP_T4_T_Msk (0xFFUL << FICR_TEMP_T4_T_Pos) /*!< Bit mask of T field. */
N
N/* Register: FICR_NFC_TAGHEADER0 */
N/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */
N
N/* Bits 31..24 : Unique identifier byte 3 */
N#define FICR_NFC_TAGHEADER0_UD3_Pos (24UL) /*!< Position of UD3 field. */
N#define FICR_NFC_TAGHEADER0_UD3_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD3_Pos) /*!< Bit mask of UD3 field. */
N
N/* Bits 23..16 : Unique identifier byte 2 */
N#define FICR_NFC_TAGHEADER0_UD2_Pos (16UL) /*!< Position of UD2 field. */
N#define FICR_NFC_TAGHEADER0_UD2_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD2_Pos) /*!< Bit mask of UD2 field. */
N
N/* Bits 15..8 : Unique identifier byte 1 */
N#define FICR_NFC_TAGHEADER0_UD1_Pos (8UL) /*!< Position of UD1 field. */
N#define FICR_NFC_TAGHEADER0_UD1_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD1_Pos) /*!< Bit mask of UD1 field. */
N
N/* Bits 7..0 : Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F */
N#define FICR_NFC_TAGHEADER0_MFGID_Pos (0UL) /*!< Position of MFGID field. */
N#define FICR_NFC_TAGHEADER0_MFGID_Msk (0xFFUL << FICR_NFC_TAGHEADER0_MFGID_Pos) /*!< Bit mask of MFGID field. */
N
N/* Register: FICR_NFC_TAGHEADER1 */
N/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */
N
N/* Bits 31..24 : Unique identifier byte 7 */
N#define FICR_NFC_TAGHEADER1_UD7_Pos (24UL) /*!< Position of UD7 field. */
N#define FICR_NFC_TAGHEADER1_UD7_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD7_Pos) /*!< Bit mask of UD7 field. */
N
N/* Bits 23..16 : Unique identifier byte 6 */
N#define FICR_NFC_TAGHEADER1_UD6_Pos (16UL) /*!< Position of UD6 field. */
N#define FICR_NFC_TAGHEADER1_UD6_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD6_Pos) /*!< Bit mask of UD6 field. */
N
N/* Bits 15..8 : Unique identifier byte 5 */
N#define FICR_NFC_TAGHEADER1_UD5_Pos (8UL) /*!< Position of UD5 field. */
N#define FICR_NFC_TAGHEADER1_UD5_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD5_Pos) /*!< Bit mask of UD5 field. */
N
N/* Bits 7..0 : Unique identifier byte 4 */
N#define FICR_NFC_TAGHEADER1_UD4_Pos (0UL) /*!< Position of UD4 field. */
N#define FICR_NFC_TAGHEADER1_UD4_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD4_Pos) /*!< Bit mask of UD4 field. */
N
N/* Register: FICR_NFC_TAGHEADER2 */
N/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */
N
N/* Bits 31..24 : Unique identifier byte 11 */
N#define FICR_NFC_TAGHEADER2_UD11_Pos (24UL) /*!< Position of UD11 field. */
N#define FICR_NFC_TAGHEADER2_UD11_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD11_Pos) /*!< Bit mask of UD11 field. */
N
N/* Bits 23..16 : Unique identifier byte 10 */
N#define FICR_NFC_TAGHEADER2_UD10_Pos (16UL) /*!< Position of UD10 field. */
N#define FICR_NFC_TAGHEADER2_UD10_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD10_Pos) /*!< Bit mask of UD10 field. */
N
N/* Bits 15..8 : Unique identifier byte 9 */
N#define FICR_NFC_TAGHEADER2_UD9_Pos (8UL) /*!< Position of UD9 field. */
N#define FICR_NFC_TAGHEADER2_UD9_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD9_Pos) /*!< Bit mask of UD9 field. */
N
N/* Bits 7..0 : Unique identifier byte 8 */
N#define FICR_NFC_TAGHEADER2_UD8_Pos (0UL) /*!< Position of UD8 field. */
N#define FICR_NFC_TAGHEADER2_UD8_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD8_Pos) /*!< Bit mask of UD8 field. */
N
N/* Register: FICR_NFC_TAGHEADER3 */
N/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */
N
N/* Bits 31..24 : Unique identifier byte 15 */
N#define FICR_NFC_TAGHEADER3_UD15_Pos (24UL) /*!< Position of UD15 field. */
N#define FICR_NFC_TAGHEADER3_UD15_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD15_Pos) /*!< Bit mask of UD15 field. */
N
N/* Bits 23..16 : Unique identifier byte 14 */
N#define FICR_NFC_TAGHEADER3_UD14_Pos (16UL) /*!< Position of UD14 field. */
N#define FICR_NFC_TAGHEADER3_UD14_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD14_Pos) /*!< Bit mask of UD14 field. */
N
N/* Bits 15..8 : Unique identifier byte 13 */
N#define FICR_NFC_TAGHEADER3_UD13_Pos (8UL) /*!< Position of UD13 field. */
N#define FICR_NFC_TAGHEADER3_UD13_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD13_Pos) /*!< Bit mask of UD13 field. */
N
N/* Bits 7..0 : Unique identifier byte 12 */
N#define FICR_NFC_TAGHEADER3_UD12_Pos (0UL) /*!< Position of UD12 field. */
N#define FICR_NFC_TAGHEADER3_UD12_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD12_Pos) /*!< Bit mask of UD12 field. */
N
N
N/* Peripheral: GPIOTE */
N/* Description: GPIO Tasks and Events */
N
N/* Register: GPIOTE_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 31 : Write '1' to Enable interrupt for PORT event */
N#define GPIOTE_INTENSET_PORT_Pos (31UL) /*!< Position of PORT field. */
N#define GPIOTE_INTENSET_PORT_Msk (0x1UL << GPIOTE_INTENSET_PORT_Pos) /*!< Bit mask of PORT field. */
N#define GPIOTE_INTENSET_PORT_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_PORT_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_PORT_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for IN[7] event */
N#define GPIOTE_INTENSET_IN7_Pos (7UL) /*!< Position of IN7 field. */
N#define GPIOTE_INTENSET_IN7_Msk (0x1UL << GPIOTE_INTENSET_IN7_Pos) /*!< Bit mask of IN7 field. */
N#define GPIOTE_INTENSET_IN7_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN7_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN7_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for IN[6] event */
N#define GPIOTE_INTENSET_IN6_Pos (6UL) /*!< Position of IN6 field. */
N#define GPIOTE_INTENSET_IN6_Msk (0x1UL << GPIOTE_INTENSET_IN6_Pos) /*!< Bit mask of IN6 field. */
N#define GPIOTE_INTENSET_IN6_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN6_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN6_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for IN[5] event */
N#define GPIOTE_INTENSET_IN5_Pos (5UL) /*!< Position of IN5 field. */
N#define GPIOTE_INTENSET_IN5_Msk (0x1UL << GPIOTE_INTENSET_IN5_Pos) /*!< Bit mask of IN5 field. */
N#define GPIOTE_INTENSET_IN5_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN5_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN5_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for IN[4] event */
N#define GPIOTE_INTENSET_IN4_Pos (4UL) /*!< Position of IN4 field. */
N#define GPIOTE_INTENSET_IN4_Msk (0x1UL << GPIOTE_INTENSET_IN4_Pos) /*!< Bit mask of IN4 field. */
N#define GPIOTE_INTENSET_IN4_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN4_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN4_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for IN[3] event */
N#define GPIOTE_INTENSET_IN3_Pos (3UL) /*!< Position of IN3 field. */
N#define GPIOTE_INTENSET_IN3_Msk (0x1UL << GPIOTE_INTENSET_IN3_Pos) /*!< Bit mask of IN3 field. */
N#define GPIOTE_INTENSET_IN3_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN3_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN3_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for IN[2] event */
N#define GPIOTE_INTENSET_IN2_Pos (2UL) /*!< Position of IN2 field. */
N#define GPIOTE_INTENSET_IN2_Msk (0x1UL << GPIOTE_INTENSET_IN2_Pos) /*!< Bit mask of IN2 field. */
N#define GPIOTE_INTENSET_IN2_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN2_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN2_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for IN[1] event */
N#define GPIOTE_INTENSET_IN1_Pos (1UL) /*!< Position of IN1 field. */
N#define GPIOTE_INTENSET_IN1_Msk (0x1UL << GPIOTE_INTENSET_IN1_Pos) /*!< Bit mask of IN1 field. */
N#define GPIOTE_INTENSET_IN1_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN1_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN1_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for IN[0] event */
N#define GPIOTE_INTENSET_IN0_Pos (0UL) /*!< Position of IN0 field. */
N#define GPIOTE_INTENSET_IN0_Msk (0x1UL << GPIOTE_INTENSET_IN0_Pos) /*!< Bit mask of IN0 field. */
N#define GPIOTE_INTENSET_IN0_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENSET_IN0_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENSET_IN0_Set (1UL) /*!< Enable */
N
N/* Register: GPIOTE_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 31 : Write '1' to Disable interrupt for PORT event */
N#define GPIOTE_INTENCLR_PORT_Pos (31UL) /*!< Position of PORT field. */
N#define GPIOTE_INTENCLR_PORT_Msk (0x1UL << GPIOTE_INTENCLR_PORT_Pos) /*!< Bit mask of PORT field. */
N#define GPIOTE_INTENCLR_PORT_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_PORT_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_PORT_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for IN[7] event */
N#define GPIOTE_INTENCLR_IN7_Pos (7UL) /*!< Position of IN7 field. */
N#define GPIOTE_INTENCLR_IN7_Msk (0x1UL << GPIOTE_INTENCLR_IN7_Pos) /*!< Bit mask of IN7 field. */
N#define GPIOTE_INTENCLR_IN7_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN7_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN7_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for IN[6] event */
N#define GPIOTE_INTENCLR_IN6_Pos (6UL) /*!< Position of IN6 field. */
N#define GPIOTE_INTENCLR_IN6_Msk (0x1UL << GPIOTE_INTENCLR_IN6_Pos) /*!< Bit mask of IN6 field. */
N#define GPIOTE_INTENCLR_IN6_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN6_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN6_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for IN[5] event */
N#define GPIOTE_INTENCLR_IN5_Pos (5UL) /*!< Position of IN5 field. */
N#define GPIOTE_INTENCLR_IN5_Msk (0x1UL << GPIOTE_INTENCLR_IN5_Pos) /*!< Bit mask of IN5 field. */
N#define GPIOTE_INTENCLR_IN5_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN5_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN5_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for IN[4] event */
N#define GPIOTE_INTENCLR_IN4_Pos (4UL) /*!< Position of IN4 field. */
N#define GPIOTE_INTENCLR_IN4_Msk (0x1UL << GPIOTE_INTENCLR_IN4_Pos) /*!< Bit mask of IN4 field. */
N#define GPIOTE_INTENCLR_IN4_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN4_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN4_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for IN[3] event */
N#define GPIOTE_INTENCLR_IN3_Pos (3UL) /*!< Position of IN3 field. */
N#define GPIOTE_INTENCLR_IN3_Msk (0x1UL << GPIOTE_INTENCLR_IN3_Pos) /*!< Bit mask of IN3 field. */
N#define GPIOTE_INTENCLR_IN3_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN3_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN3_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for IN[2] event */
N#define GPIOTE_INTENCLR_IN2_Pos (2UL) /*!< Position of IN2 field. */
N#define GPIOTE_INTENCLR_IN2_Msk (0x1UL << GPIOTE_INTENCLR_IN2_Pos) /*!< Bit mask of IN2 field. */
N#define GPIOTE_INTENCLR_IN2_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN2_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN2_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for IN[1] event */
N#define GPIOTE_INTENCLR_IN1_Pos (1UL) /*!< Position of IN1 field. */
N#define GPIOTE_INTENCLR_IN1_Msk (0x1UL << GPIOTE_INTENCLR_IN1_Pos) /*!< Bit mask of IN1 field. */
N#define GPIOTE_INTENCLR_IN1_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN1_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN1_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for IN[0] event */
N#define GPIOTE_INTENCLR_IN0_Pos (0UL) /*!< Position of IN0 field. */
N#define GPIOTE_INTENCLR_IN0_Msk (0x1UL << GPIOTE_INTENCLR_IN0_Pos) /*!< Bit mask of IN0 field. */
N#define GPIOTE_INTENCLR_IN0_Disabled (0UL) /*!< Read: Disabled */
N#define GPIOTE_INTENCLR_IN0_Enabled (1UL) /*!< Read: Enabled */
N#define GPIOTE_INTENCLR_IN0_Clear (1UL) /*!< Disable */
N
N/* Register: GPIOTE_CONFIG */
N/* Description: Description collection[0]:  Configuration for OUT[n], SET[n] and CLR[n] tasks and IN[n] event */
N
N/* Bit 20 : When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode: No effect. */
N#define GPIOTE_CONFIG_OUTINIT_Pos (20UL) /*!< Position of OUTINIT field. */
N#define GPIOTE_CONFIG_OUTINIT_Msk (0x1UL << GPIOTE_CONFIG_OUTINIT_Pos) /*!< Bit mask of OUTINIT field. */
N#define GPIOTE_CONFIG_OUTINIT_Low (0UL) /*!< Task mode: Initial value of pin before task triggering is low */
N#define GPIOTE_CONFIG_OUTINIT_High (1UL) /*!< Task mode: Initial value of pin before task triggering is high */
N
N/* Bits 17..16 : When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event mode: Operation on input that shall trigger IN[n] event. */
N#define GPIOTE_CONFIG_POLARITY_Pos (16UL) /*!< Position of POLARITY field. */
N#define GPIOTE_CONFIG_POLARITY_Msk (0x3UL << GPIOTE_CONFIG_POLARITY_Pos) /*!< Bit mask of POLARITY field. */
N#define GPIOTE_CONFIG_POLARITY_None (0UL) /*!< Task mode: No effect on pin from OUT[n] task. Event mode: no IN[n] event generated on pin activity. */
N#define GPIOTE_CONFIG_POLARITY_LoToHi (1UL) /*!< Task mode: Set pin from OUT[n] task. Event mode: Generate IN[n] event when rising edge on pin. */
N#define GPIOTE_CONFIG_POLARITY_HiToLo (2UL) /*!< Task mode: Clear pin from OUT[n] task. Event mode: Generate IN[n] event when falling edge on pin. */
N#define GPIOTE_CONFIG_POLARITY_Toggle (3UL) /*!< Task mode: Toggle pin from OUT[n]. Event mode: Generate IN[n] when any change on pin. */
N
N/* Bits 12..8 : GPIO number associated with SET[n], CLR[n] and OUT[n] tasks and IN[n] event */
N#define GPIOTE_CONFIG_PSEL_Pos (8UL) /*!< Position of PSEL field. */
N#define GPIOTE_CONFIG_PSEL_Msk (0x1FUL << GPIOTE_CONFIG_PSEL_Pos) /*!< Bit mask of PSEL field. */
N
N/* Bits 1..0 : Mode */
N#define GPIOTE_CONFIG_MODE_Pos (0UL) /*!< Position of MODE field. */
N#define GPIOTE_CONFIG_MODE_Msk (0x3UL << GPIOTE_CONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
N#define GPIOTE_CONFIG_MODE_Disabled (0UL) /*!< Disabled. Pin specified by PSEL will not be acquired by the GPIOTE module. */
N#define GPIOTE_CONFIG_MODE_Event (1UL) /*!< Event mode */
N#define GPIOTE_CONFIG_MODE_Task (3UL) /*!< Task mode */
N
N
N/* Peripheral: I2S */
N/* Description: Inter-IC Sound */
N
N/* Register: I2S_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 5 : Enable or disable interrupt for TXPTRUPD event */
N#define I2S_INTEN_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
N#define I2S_INTEN_TXPTRUPD_Msk (0x1UL << I2S_INTEN_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
N#define I2S_INTEN_TXPTRUPD_Disabled (0UL) /*!< Disable */
N#define I2S_INTEN_TXPTRUPD_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for STOPPED event */
N#define I2S_INTEN_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
N#define I2S_INTEN_STOPPED_Msk (0x1UL << I2S_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define I2S_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define I2S_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for RXPTRUPD event */
N#define I2S_INTEN_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
N#define I2S_INTEN_RXPTRUPD_Msk (0x1UL << I2S_INTEN_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
N#define I2S_INTEN_RXPTRUPD_Disabled (0UL) /*!< Disable */
N#define I2S_INTEN_RXPTRUPD_Enabled (1UL) /*!< Enable */
N
N/* Register: I2S_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 5 : Write '1' to Enable interrupt for TXPTRUPD event */
N#define I2S_INTENSET_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
N#define I2S_INTENSET_TXPTRUPD_Msk (0x1UL << I2S_INTENSET_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
N#define I2S_INTENSET_TXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENSET_TXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENSET_TXPTRUPD_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for STOPPED event */
N#define I2S_INTENSET_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
N#define I2S_INTENSET_STOPPED_Msk (0x1UL << I2S_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define I2S_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for RXPTRUPD event */
N#define I2S_INTENSET_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
N#define I2S_INTENSET_RXPTRUPD_Msk (0x1UL << I2S_INTENSET_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
N#define I2S_INTENSET_RXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENSET_RXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENSET_RXPTRUPD_Set (1UL) /*!< Enable */
N
N/* Register: I2S_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 5 : Write '1' to Disable interrupt for TXPTRUPD event */
N#define I2S_INTENCLR_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
N#define I2S_INTENCLR_TXPTRUPD_Msk (0x1UL << I2S_INTENCLR_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
N#define I2S_INTENCLR_TXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENCLR_TXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENCLR_TXPTRUPD_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for STOPPED event */
N#define I2S_INTENCLR_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
N#define I2S_INTENCLR_STOPPED_Msk (0x1UL << I2S_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define I2S_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for RXPTRUPD event */
N#define I2S_INTENCLR_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
N#define I2S_INTENCLR_RXPTRUPD_Msk (0x1UL << I2S_INTENCLR_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
N#define I2S_INTENCLR_RXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
N#define I2S_INTENCLR_RXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
N#define I2S_INTENCLR_RXPTRUPD_Clear (1UL) /*!< Disable */
N
N/* Register: I2S_ENABLE */
N/* Description: Enable I2S module. */
N
N/* Bit 0 : Enable I2S module. */
N#define I2S_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define I2S_ENABLE_ENABLE_Msk (0x1UL << I2S_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define I2S_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define I2S_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
N
N/* Register: I2S_CONFIG_MODE */
N/* Description: I2S mode. */
N
N/* Bit 0 : I2S mode. */
N#define I2S_CONFIG_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
N#define I2S_CONFIG_MODE_MODE_Msk (0x1UL << I2S_CONFIG_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
N#define I2S_CONFIG_MODE_MODE_Master (0UL) /*!< Master mode. SCK and LRCK generated from internal master clcok (MCK) and output on pins defined by PSEL.xxx. */
N#define I2S_CONFIG_MODE_MODE_Slave (1UL) /*!< Slave mode. SCK and LRCK generated by external master and received on pins defined by PSEL.xxx */
N
N/* Register: I2S_CONFIG_RXEN */
N/* Description: Reception (RX) enable. */
N
N/* Bit 0 : Reception (RX) enable. */
N#define I2S_CONFIG_RXEN_RXEN_Pos (0UL) /*!< Position of RXEN field. */
N#define I2S_CONFIG_RXEN_RXEN_Msk (0x1UL << I2S_CONFIG_RXEN_RXEN_Pos) /*!< Bit mask of RXEN field. */
N#define I2S_CONFIG_RXEN_RXEN_Disabled (0UL) /*!< Reception disabled and now data will be written to the RXD.PTR address. */
N#define I2S_CONFIG_RXEN_RXEN_Enabled (1UL) /*!< Reception enabled. */
N
N/* Register: I2S_CONFIG_TXEN */
N/* Description: Transmission (TX) enable. */
N
N/* Bit 0 : Transmission (TX) enable. */
N#define I2S_CONFIG_TXEN_TXEN_Pos (0UL) /*!< Position of TXEN field. */
N#define I2S_CONFIG_TXEN_TXEN_Msk (0x1UL << I2S_CONFIG_TXEN_TXEN_Pos) /*!< Bit mask of TXEN field. */
N#define I2S_CONFIG_TXEN_TXEN_Disabled (0UL) /*!< Transmission disabled and now data will be read from the RXD.TXD address. */
N#define I2S_CONFIG_TXEN_TXEN_Enabled (1UL) /*!< Transmission enabled. */
N
N/* Register: I2S_CONFIG_MCKEN */
N/* Description: Master clock generator enable. */
N
N/* Bit 0 : Master clock generator enable. */
N#define I2S_CONFIG_MCKEN_MCKEN_Pos (0UL) /*!< Position of MCKEN field. */
N#define I2S_CONFIG_MCKEN_MCKEN_Msk (0x1UL << I2S_CONFIG_MCKEN_MCKEN_Pos) /*!< Bit mask of MCKEN field. */
N#define I2S_CONFIG_MCKEN_MCKEN_Disabled (0UL) /*!< Master clock generator disabled and PSEL.MCK not connected(available as GPIO). */
N#define I2S_CONFIG_MCKEN_MCKEN_Enabled (1UL) /*!< Master clock generator running and MCK output on PSEL.MCK. */
N
N/* Register: I2S_CONFIG_MCKFREQ */
N/* Description: Master clock generator frequency. */
N
N/* Bits 31..0 : Master clock generator frequency. */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_Pos (0UL) /*!< Position of MCKFREQ field. */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_Msk (0xFFFFFFFFUL << I2S_CONFIG_MCKFREQ_MCKFREQ_Pos) /*!< Bit mask of MCKFREQ field. */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV125 (0x020C0000UL) /*!< 32 MHz / 125 = 0.256 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV63 (0x04100000UL) /*!< 32 MHz / 63 = 0.5079365 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV42 (0x06000000UL) /*!< 32 MHz / 42 = 0.7619048 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV32 (0x08000000UL) /*!< 32 MHz / 32 = 1.0 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV31 (0x08400000UL) /*!< 32 MHz / 31 = 1.0322581 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV30 (0x08800000UL) /*!< 32 MHz / 30 = 1.0666667 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV23 (0x0B000000UL) /*!< 32 MHz / 23 = 1.3913043 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV21 (0x0C000000UL) /*!< 32 MHz / 21 = 1.5238095 */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV16 (0x10000000UL) /*!< 32 MHz / 16 = 2.0 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV15 (0x11000000UL) /*!< 32 MHz / 15 = 2.1333333 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV11 (0x16000000UL) /*!< 32 MHz / 11 = 2.9090909 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV10 (0x18000000UL) /*!< 32 MHz / 10 = 3.2 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV8 (0x20000000UL) /*!< 32 MHz / 8 = 4.0 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV6 (0x28000000UL) /*!< 32 MHz / 6 = 5.3333333 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV5 (0x30000000UL) /*!< 32 MHz / 5 = 6.4 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV4 (0x40000000UL) /*!< 32 MHz / 4 = 8.0 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV3 (0x50000000UL) /*!< 32 MHz / 3 = 10.6666667 MHz */
N#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV2 (0x80000000UL) /*!< 32 MHz / 2 = 16.0 MHz */
N
N/* Register: I2S_CONFIG_RATIO */
N/* Description: MCK / LRCK ratio. */
N
N/* Bits 3..0 : MCK / LRCK ratio. */
N#define I2S_CONFIG_RATIO_RATIO_Pos (0UL) /*!< Position of RATIO field. */
N#define I2S_CONFIG_RATIO_RATIO_Msk (0xFUL << I2S_CONFIG_RATIO_RATIO_Pos) /*!< Bit mask of RATIO field. */
N#define I2S_CONFIG_RATIO_RATIO_32X (0UL) /*!< LRCK = MCK / 32 */
N#define I2S_CONFIG_RATIO_RATIO_48X (1UL) /*!< LRCK = MCK / 48 */
N#define I2S_CONFIG_RATIO_RATIO_64X (2UL) /*!< LRCK = MCK / 64 */
N#define I2S_CONFIG_RATIO_RATIO_96X (3UL) /*!< LRCK = MCK / 96 */
N#define I2S_CONFIG_RATIO_RATIO_128X (4UL) /*!< LRCK = MCK / 128 */
N#define I2S_CONFIG_RATIO_RATIO_192X (5UL) /*!< LRCK = MCK / 192 */
N#define I2S_CONFIG_RATIO_RATIO_256X (6UL) /*!< LRCK = MCK / 256 */
N#define I2S_CONFIG_RATIO_RATIO_384X (7UL) /*!< LRCK = MCK / 384 */
N#define I2S_CONFIG_RATIO_RATIO_512X (8UL) /*!< LRCK = MCK / 512 */
N
N/* Register: I2S_CONFIG_SWIDTH */
N/* Description: Sample width. */
N
N/* Bits 1..0 : Sample width. */
N#define I2S_CONFIG_SWIDTH_SWIDTH_Pos (0UL) /*!< Position of SWIDTH field. */
N#define I2S_CONFIG_SWIDTH_SWIDTH_Msk (0x3UL << I2S_CONFIG_SWIDTH_SWIDTH_Pos) /*!< Bit mask of SWIDTH field. */
N#define I2S_CONFIG_SWIDTH_SWIDTH_8Bit (0UL) /*!< 8 bit. */
N#define I2S_CONFIG_SWIDTH_SWIDTH_16Bit (1UL) /*!< 16 bit. */
N#define I2S_CONFIG_SWIDTH_SWIDTH_24Bit (2UL) /*!< 24 bit. */
N
N/* Register: I2S_CONFIG_ALIGN */
N/* Description: Alignment of sample within a frame. */
N
N/* Bit 0 : Alignment of sample within a frame. */
N#define I2S_CONFIG_ALIGN_ALIGN_Pos (0UL) /*!< Position of ALIGN field. */
N#define I2S_CONFIG_ALIGN_ALIGN_Msk (0x1UL << I2S_CONFIG_ALIGN_ALIGN_Pos) /*!< Bit mask of ALIGN field. */
N#define I2S_CONFIG_ALIGN_ALIGN_Left (0UL) /*!< Left-aligned. */
N#define I2S_CONFIG_ALIGN_ALIGN_Right (1UL) /*!< Right-aligned. */
N
N/* Register: I2S_CONFIG_FORMAT */
N/* Description: Frame format. */
N
N/* Bit 0 : Frame format. */
N#define I2S_CONFIG_FORMAT_FORMAT_Pos (0UL) /*!< Position of FORMAT field. */
N#define I2S_CONFIG_FORMAT_FORMAT_Msk (0x1UL << I2S_CONFIG_FORMAT_FORMAT_Pos) /*!< Bit mask of FORMAT field. */
N#define I2S_CONFIG_FORMAT_FORMAT_I2S (0UL) /*!< Original I2S format. */
N#define I2S_CONFIG_FORMAT_FORMAT_Aligned (1UL) /*!< Alternate (left- or right-aligned) format. */
N
N/* Register: I2S_CONFIG_CHANNELS */
N/* Description: Enable channels. */
N
N/* Bits 1..0 : Enable channels. */
N#define I2S_CONFIG_CHANNELS_CHANNELS_Pos (0UL) /*!< Position of CHANNELS field. */
N#define I2S_CONFIG_CHANNELS_CHANNELS_Msk (0x3UL << I2S_CONFIG_CHANNELS_CHANNELS_Pos) /*!< Bit mask of CHANNELS field. */
N#define I2S_CONFIG_CHANNELS_CHANNELS_Stereo (0UL) /*!< Stereo. */
N#define I2S_CONFIG_CHANNELS_CHANNELS_Left (1UL) /*!< Left only. */
N#define I2S_CONFIG_CHANNELS_CHANNELS_Right (2UL) /*!< Right only. */
N
N/* Register: I2S_RXD_PTR */
N/* Description: Receive buffer RAM start address. */
N
N/* Bits 31..0 : Receive buffer Data RAM start address. When receiving, words containing samples will be written to this address. This address is a word aligned Data RAM address. */
N#define I2S_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define I2S_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << I2S_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: I2S_TXD_PTR */
N/* Description: Transmit buffer RAM start address. */
N
N/* Bits 31..0 : Transmit buffer Data RAM start address. When transmitting, words containing samples will be fetched from this address. This address is a word aligned Data RAM address. */
N#define I2S_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define I2S_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << I2S_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: I2S_RXTXD_MAXCNT */
N/* Description: Size of RXD and TXD buffers. */
N
N/* Bits 13..0 : Size of RXD and TXD buffers in number of 32 bit words. */
N#define I2S_RXTXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define I2S_RXTXD_MAXCNT_MAXCNT_Msk (0x3FFFUL << I2S_RXTXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: I2S_PSEL_MCK */
N/* Description: Pin select for MCK signal. */
N
N/* Bit 31 : Connection */
N#define I2S_PSEL_MCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define I2S_PSEL_MCK_CONNECT_Msk (0x1UL << I2S_PSEL_MCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define I2S_PSEL_MCK_CONNECT_Connected (0UL) /*!< Connect */
N#define I2S_PSEL_MCK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define I2S_PSEL_MCK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define I2S_PSEL_MCK_PIN_Msk (0x1FUL << I2S_PSEL_MCK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: I2S_PSEL_SCK */
N/* Description: Pin select for SCK signal. */
N
N/* Bit 31 : Connection */
N#define I2S_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define I2S_PSEL_SCK_CONNECT_Msk (0x1UL << I2S_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define I2S_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
N#define I2S_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define I2S_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define I2S_PSEL_SCK_PIN_Msk (0x1FUL << I2S_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: I2S_PSEL_LRCK */
N/* Description: Pin select for LRCK signal. */
N
N/* Bit 31 : Connection */
N#define I2S_PSEL_LRCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define I2S_PSEL_LRCK_CONNECT_Msk (0x1UL << I2S_PSEL_LRCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define I2S_PSEL_LRCK_CONNECT_Connected (0UL) /*!< Connect */
N#define I2S_PSEL_LRCK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define I2S_PSEL_LRCK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define I2S_PSEL_LRCK_PIN_Msk (0x1FUL << I2S_PSEL_LRCK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: I2S_PSEL_SDIN */
N/* Description: Pin select for SDIN signal. */
N
N/* Bit 31 : Connection */
N#define I2S_PSEL_SDIN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define I2S_PSEL_SDIN_CONNECT_Msk (0x1UL << I2S_PSEL_SDIN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define I2S_PSEL_SDIN_CONNECT_Connected (0UL) /*!< Connect */
N#define I2S_PSEL_SDIN_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define I2S_PSEL_SDIN_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define I2S_PSEL_SDIN_PIN_Msk (0x1FUL << I2S_PSEL_SDIN_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: I2S_PSEL_SDOUT */
N/* Description: Pin select for SDOUT signal. */
N
N/* Bit 31 : Connection */
N#define I2S_PSEL_SDOUT_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define I2S_PSEL_SDOUT_CONNECT_Msk (0x1UL << I2S_PSEL_SDOUT_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define I2S_PSEL_SDOUT_CONNECT_Connected (0UL) /*!< Connect */
N#define I2S_PSEL_SDOUT_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define I2S_PSEL_SDOUT_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define I2S_PSEL_SDOUT_PIN_Msk (0x1FUL << I2S_PSEL_SDOUT_PIN_Pos) /*!< Bit mask of PIN field. */
N
N
N/* Peripheral: LPCOMP */
N/* Description: Low Power Comparator */
N
N/* Register: LPCOMP_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 4 : Shortcut between CROSS event and STOP task */
N#define LPCOMP_SHORTS_CROSS_STOP_Pos (4UL) /*!< Position of CROSS_STOP field. */
N#define LPCOMP_SHORTS_CROSS_STOP_Msk (0x1UL << LPCOMP_SHORTS_CROSS_STOP_Pos) /*!< Bit mask of CROSS_STOP field. */
N#define LPCOMP_SHORTS_CROSS_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define LPCOMP_SHORTS_CROSS_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between UP event and STOP task */
N#define LPCOMP_SHORTS_UP_STOP_Pos (3UL) /*!< Position of UP_STOP field. */
N#define LPCOMP_SHORTS_UP_STOP_Msk (0x1UL << LPCOMP_SHORTS_UP_STOP_Pos) /*!< Bit mask of UP_STOP field. */
N#define LPCOMP_SHORTS_UP_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define LPCOMP_SHORTS_UP_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between DOWN event and STOP task */
N#define LPCOMP_SHORTS_DOWN_STOP_Pos (2UL) /*!< Position of DOWN_STOP field. */
N#define LPCOMP_SHORTS_DOWN_STOP_Msk (0x1UL << LPCOMP_SHORTS_DOWN_STOP_Pos) /*!< Bit mask of DOWN_STOP field. */
N#define LPCOMP_SHORTS_DOWN_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define LPCOMP_SHORTS_DOWN_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between READY event and STOP task */
N#define LPCOMP_SHORTS_READY_STOP_Pos (1UL) /*!< Position of READY_STOP field. */
N#define LPCOMP_SHORTS_READY_STOP_Msk (0x1UL << LPCOMP_SHORTS_READY_STOP_Pos) /*!< Bit mask of READY_STOP field. */
N#define LPCOMP_SHORTS_READY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define LPCOMP_SHORTS_READY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between READY event and SAMPLE task */
N#define LPCOMP_SHORTS_READY_SAMPLE_Pos (0UL) /*!< Position of READY_SAMPLE field. */
N#define LPCOMP_SHORTS_READY_SAMPLE_Msk (0x1UL << LPCOMP_SHORTS_READY_SAMPLE_Pos) /*!< Bit mask of READY_SAMPLE field. */
N#define LPCOMP_SHORTS_READY_SAMPLE_Disabled (0UL) /*!< Disable shortcut */
N#define LPCOMP_SHORTS_READY_SAMPLE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: LPCOMP_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 3 : Write '1' to Enable interrupt for CROSS event */
N#define LPCOMP_INTENSET_CROSS_Pos (3UL) /*!< Position of CROSS field. */
N#define LPCOMP_INTENSET_CROSS_Msk (0x1UL << LPCOMP_INTENSET_CROSS_Pos) /*!< Bit mask of CROSS field. */
N#define LPCOMP_INTENSET_CROSS_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENSET_CROSS_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENSET_CROSS_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for UP event */
N#define LPCOMP_INTENSET_UP_Pos (2UL) /*!< Position of UP field. */
N#define LPCOMP_INTENSET_UP_Msk (0x1UL << LPCOMP_INTENSET_UP_Pos) /*!< Bit mask of UP field. */
N#define LPCOMP_INTENSET_UP_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENSET_UP_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENSET_UP_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for DOWN event */
N#define LPCOMP_INTENSET_DOWN_Pos (1UL) /*!< Position of DOWN field. */
N#define LPCOMP_INTENSET_DOWN_Msk (0x1UL << LPCOMP_INTENSET_DOWN_Pos) /*!< Bit mask of DOWN field. */
N#define LPCOMP_INTENSET_DOWN_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENSET_DOWN_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENSET_DOWN_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for READY event */
N#define LPCOMP_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
N#define LPCOMP_INTENSET_READY_Msk (0x1UL << LPCOMP_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
N#define LPCOMP_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENSET_READY_Set (1UL) /*!< Enable */
N
N/* Register: LPCOMP_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 3 : Write '1' to Disable interrupt for CROSS event */
N#define LPCOMP_INTENCLR_CROSS_Pos (3UL) /*!< Position of CROSS field. */
N#define LPCOMP_INTENCLR_CROSS_Msk (0x1UL << LPCOMP_INTENCLR_CROSS_Pos) /*!< Bit mask of CROSS field. */
N#define LPCOMP_INTENCLR_CROSS_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENCLR_CROSS_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENCLR_CROSS_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for UP event */
N#define LPCOMP_INTENCLR_UP_Pos (2UL) /*!< Position of UP field. */
N#define LPCOMP_INTENCLR_UP_Msk (0x1UL << LPCOMP_INTENCLR_UP_Pos) /*!< Bit mask of UP field. */
N#define LPCOMP_INTENCLR_UP_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENCLR_UP_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENCLR_UP_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for DOWN event */
N#define LPCOMP_INTENCLR_DOWN_Pos (1UL) /*!< Position of DOWN field. */
N#define LPCOMP_INTENCLR_DOWN_Msk (0x1UL << LPCOMP_INTENCLR_DOWN_Pos) /*!< Bit mask of DOWN field. */
N#define LPCOMP_INTENCLR_DOWN_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENCLR_DOWN_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENCLR_DOWN_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for READY event */
N#define LPCOMP_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
N#define LPCOMP_INTENCLR_READY_Msk (0x1UL << LPCOMP_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
N#define LPCOMP_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
N#define LPCOMP_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
N#define LPCOMP_INTENCLR_READY_Clear (1UL) /*!< Disable */
N
N/* Register: LPCOMP_RESULT */
N/* Description: Compare result */
N
N/* Bit 0 : Result of last compare. Decision point SAMPLE task. */
N#define LPCOMP_RESULT_RESULT_Pos (0UL) /*!< Position of RESULT field. */
N#define LPCOMP_RESULT_RESULT_Msk (0x1UL << LPCOMP_RESULT_RESULT_Pos) /*!< Bit mask of RESULT field. */
N#define LPCOMP_RESULT_RESULT_Below (0UL) /*!< Input voltage is below the reference threshold (VIN+ &lt; VIN-). */
N#define LPCOMP_RESULT_RESULT_Above (1UL) /*!< Input voltage is above the reference threshold (VIN+ &gt; VIN-). */
N
N/* Register: LPCOMP_ENABLE */
N/* Description: Enable LPCOMP */
N
N/* Bits 1..0 : Enable or disable LPCOMP */
N#define LPCOMP_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define LPCOMP_ENABLE_ENABLE_Msk (0x3UL << LPCOMP_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define LPCOMP_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define LPCOMP_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
N
N/* Register: LPCOMP_PSEL */
N/* Description: Input pin select */
N
N/* Bits 2..0 : Analog pin select */
N#define LPCOMP_PSEL_PSEL_Pos (0UL) /*!< Position of PSEL field. */
N#define LPCOMP_PSEL_PSEL_Msk (0x7UL << LPCOMP_PSEL_PSEL_Pos) /*!< Bit mask of PSEL field. */
N#define LPCOMP_PSEL_PSEL_AnalogInput0 (0UL) /*!< AIN0 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput1 (1UL) /*!< AIN1 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput2 (2UL) /*!< AIN2 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput3 (3UL) /*!< AIN3 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput4 (4UL) /*!< AIN4 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput5 (5UL) /*!< AIN5 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput6 (6UL) /*!< AIN6 selected as analog input */
N#define LPCOMP_PSEL_PSEL_AnalogInput7 (7UL) /*!< AIN7 selected as analog input */
N
N/* Register: LPCOMP_REFSEL */
N/* Description: Reference select */
N
N/* Bits 3..0 : Reference select */
N#define LPCOMP_REFSEL_REFSEL_Pos (0UL) /*!< Position of REFSEL field. */
N#define LPCOMP_REFSEL_REFSEL_Msk (0xFUL << LPCOMP_REFSEL_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
N#define LPCOMP_REFSEL_REFSEL_Ref1_8Vdd (0UL) /*!< VDD * 1/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref2_8Vdd (1UL) /*!< VDD * 2/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref3_8Vdd (2UL) /*!< VDD * 3/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref4_8Vdd (3UL) /*!< VDD * 4/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref5_8Vdd (4UL) /*!< VDD * 5/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref6_8Vdd (5UL) /*!< VDD * 6/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref7_8Vdd (6UL) /*!< VDD * 7/8 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_ARef (7UL) /*!< External analog reference selected */
N#define LPCOMP_REFSEL_REFSEL_Ref1_16Vdd (8UL) /*!< VDD * 1/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref3_16Vdd (9UL) /*!< VDD * 3/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref5_16Vdd (10UL) /*!< VDD * 5/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref7_16Vdd (11UL) /*!< VDD * 7/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref9_16Vdd (12UL) /*!< VDD * 9/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref11_16Vdd (13UL) /*!< VDD * 11/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref13_16Vdd (14UL) /*!< VDD * 13/16 selected as reference */
N#define LPCOMP_REFSEL_REFSEL_Ref15_16Vdd (15UL) /*!< VDD * 15/16 selected as reference */
N
N/* Register: LPCOMP_EXTREFSEL */
N/* Description: External reference select */
N
N/* Bit 0 : External analog reference select */
N#define LPCOMP_EXTREFSEL_EXTREFSEL_Pos (0UL) /*!< Position of EXTREFSEL field. */
N#define LPCOMP_EXTREFSEL_EXTREFSEL_Msk (0x1UL << LPCOMP_EXTREFSEL_EXTREFSEL_Pos) /*!< Bit mask of EXTREFSEL field. */
N#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0 (0UL) /*!< Use AIN0 as external analog reference */
N#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1 (1UL) /*!< Use AIN1 as external analog reference */
N
N/* Register: LPCOMP_ANADETECT */
N/* Description: Analog detect configuration */
N
N/* Bits 1..0 : Analog detect configuration */
N#define LPCOMP_ANADETECT_ANADETECT_Pos (0UL) /*!< Position of ANADETECT field. */
N#define LPCOMP_ANADETECT_ANADETECT_Msk (0x3UL << LPCOMP_ANADETECT_ANADETECT_Pos) /*!< Bit mask of ANADETECT field. */
N#define LPCOMP_ANADETECT_ANADETECT_Cross (0UL) /*!< Generate ANADETECT on crossing, both upward crossing and downward crossing */
N#define LPCOMP_ANADETECT_ANADETECT_Up (1UL) /*!< Generate ANADETECT on upward crossing only */
N#define LPCOMP_ANADETECT_ANADETECT_Down (2UL) /*!< Generate ANADETECT on downward crossing only */
N
N/* Register: LPCOMP_HYST */
N/* Description: Comparator hysteresis enable */
N
N/* Bit 0 : Comparator hysteresis enable */
N#define LPCOMP_HYST_HYST_Pos (0UL) /*!< Position of HYST field. */
N#define LPCOMP_HYST_HYST_Msk (0x1UL << LPCOMP_HYST_HYST_Pos) /*!< Bit mask of HYST field. */
N#define LPCOMP_HYST_HYST_NoHyst (0UL) /*!< Comparator hysteresis disabled */
N#define LPCOMP_HYST_HYST_Hyst50mV (1UL) /*!< Comparator hysteresis disabled (typ. 50 mV) */
N
N
N/* Peripheral: MWU */
N/* Description: Memory Watch Unit */
N
N/* Register: MWU_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 27 : Enable or disable interrupt for PREGION[1].RA event */
N#define MWU_INTEN_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_INTEN_PREGION1RA_Msk (0x1UL << MWU_INTEN_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_INTEN_PREGION1RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_PREGION1RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 26 : Enable or disable interrupt for PREGION[1].WA event */
N#define MWU_INTEN_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_INTEN_PREGION1WA_Msk (0x1UL << MWU_INTEN_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_INTEN_PREGION1WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_PREGION1WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 25 : Enable or disable interrupt for PREGION[0].RA event */
N#define MWU_INTEN_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_INTEN_PREGION0RA_Msk (0x1UL << MWU_INTEN_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_INTEN_PREGION0RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_PREGION0RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 24 : Enable or disable interrupt for PREGION[0].WA event */
N#define MWU_INTEN_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_INTEN_PREGION0WA_Msk (0x1UL << MWU_INTEN_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_INTEN_PREGION0WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_PREGION0WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable interrupt for REGION[3].RA event */
N#define MWU_INTEN_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_INTEN_REGION3RA_Msk (0x1UL << MWU_INTEN_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_INTEN_REGION3RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION3RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable interrupt for REGION[3].WA event */
N#define MWU_INTEN_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_INTEN_REGION3WA_Msk (0x1UL << MWU_INTEN_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_INTEN_REGION3WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION3WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable interrupt for REGION[2].RA event */
N#define MWU_INTEN_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_INTEN_REGION2RA_Msk (0x1UL << MWU_INTEN_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_INTEN_REGION2RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION2RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for REGION[2].WA event */
N#define MWU_INTEN_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_INTEN_REGION2WA_Msk (0x1UL << MWU_INTEN_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_INTEN_REGION2WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION2WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable interrupt for REGION[1].RA event */
N#define MWU_INTEN_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_INTEN_REGION1RA_Msk (0x1UL << MWU_INTEN_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_INTEN_REGION1RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION1RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for REGION[1].WA event */
N#define MWU_INTEN_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_INTEN_REGION1WA_Msk (0x1UL << MWU_INTEN_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_INTEN_REGION1WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION1WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for REGION[0].RA event */
N#define MWU_INTEN_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_INTEN_REGION0RA_Msk (0x1UL << MWU_INTEN_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_INTEN_REGION0RA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION0RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for REGION[0].WA event */
N#define MWU_INTEN_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_INTEN_REGION0WA_Msk (0x1UL << MWU_INTEN_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_INTEN_REGION0WA_Disabled (0UL) /*!< Disable */
N#define MWU_INTEN_REGION0WA_Enabled (1UL) /*!< Enable */
N
N/* Register: MWU_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 27 : Write '1' to Enable interrupt for PREGION[1].RA event */
N#define MWU_INTENSET_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_INTENSET_PREGION1RA_Msk (0x1UL << MWU_INTENSET_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_INTENSET_PREGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_PREGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_PREGION1RA_Set (1UL) /*!< Enable */
N
N/* Bit 26 : Write '1' to Enable interrupt for PREGION[1].WA event */
N#define MWU_INTENSET_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_INTENSET_PREGION1WA_Msk (0x1UL << MWU_INTENSET_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_INTENSET_PREGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_PREGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_PREGION1WA_Set (1UL) /*!< Enable */
N
N/* Bit 25 : Write '1' to Enable interrupt for PREGION[0].RA event */
N#define MWU_INTENSET_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_INTENSET_PREGION0RA_Msk (0x1UL << MWU_INTENSET_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_INTENSET_PREGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_PREGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_PREGION0RA_Set (1UL) /*!< Enable */
N
N/* Bit 24 : Write '1' to Enable interrupt for PREGION[0].WA event */
N#define MWU_INTENSET_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_INTENSET_PREGION0WA_Msk (0x1UL << MWU_INTENSET_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_INTENSET_PREGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_PREGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_PREGION0WA_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for REGION[3].RA event */
N#define MWU_INTENSET_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_INTENSET_REGION3RA_Msk (0x1UL << MWU_INTENSET_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_INTENSET_REGION3RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION3RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION3RA_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for REGION[3].WA event */
N#define MWU_INTENSET_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_INTENSET_REGION3WA_Msk (0x1UL << MWU_INTENSET_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_INTENSET_REGION3WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION3WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION3WA_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for REGION[2].RA event */
N#define MWU_INTENSET_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_INTENSET_REGION2RA_Msk (0x1UL << MWU_INTENSET_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_INTENSET_REGION2RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION2RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION2RA_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for REGION[2].WA event */
N#define MWU_INTENSET_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_INTENSET_REGION2WA_Msk (0x1UL << MWU_INTENSET_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_INTENSET_REGION2WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION2WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION2WA_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for REGION[1].RA event */
N#define MWU_INTENSET_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_INTENSET_REGION1RA_Msk (0x1UL << MWU_INTENSET_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_INTENSET_REGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION1RA_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for REGION[1].WA event */
N#define MWU_INTENSET_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_INTENSET_REGION1WA_Msk (0x1UL << MWU_INTENSET_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_INTENSET_REGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION1WA_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for REGION[0].RA event */
N#define MWU_INTENSET_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_INTENSET_REGION0RA_Msk (0x1UL << MWU_INTENSET_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_INTENSET_REGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION0RA_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for REGION[0].WA event */
N#define MWU_INTENSET_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_INTENSET_REGION0WA_Msk (0x1UL << MWU_INTENSET_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_INTENSET_REGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENSET_REGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENSET_REGION0WA_Set (1UL) /*!< Enable */
N
N/* Register: MWU_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 27 : Write '1' to Disable interrupt for PREGION[1].RA event */
N#define MWU_INTENCLR_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_INTENCLR_PREGION1RA_Msk (0x1UL << MWU_INTENCLR_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_INTENCLR_PREGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_PREGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_PREGION1RA_Clear (1UL) /*!< Disable */
N
N/* Bit 26 : Write '1' to Disable interrupt for PREGION[1].WA event */
N#define MWU_INTENCLR_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_INTENCLR_PREGION1WA_Msk (0x1UL << MWU_INTENCLR_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_INTENCLR_PREGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_PREGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_PREGION1WA_Clear (1UL) /*!< Disable */
N
N/* Bit 25 : Write '1' to Disable interrupt for PREGION[0].RA event */
N#define MWU_INTENCLR_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_INTENCLR_PREGION0RA_Msk (0x1UL << MWU_INTENCLR_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_INTENCLR_PREGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_PREGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_PREGION0RA_Clear (1UL) /*!< Disable */
N
N/* Bit 24 : Write '1' to Disable interrupt for PREGION[0].WA event */
N#define MWU_INTENCLR_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_INTENCLR_PREGION0WA_Msk (0x1UL << MWU_INTENCLR_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_INTENCLR_PREGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_PREGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_PREGION0WA_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for REGION[3].RA event */
N#define MWU_INTENCLR_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_INTENCLR_REGION3RA_Msk (0x1UL << MWU_INTENCLR_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_INTENCLR_REGION3RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION3RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION3RA_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for REGION[3].WA event */
N#define MWU_INTENCLR_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_INTENCLR_REGION3WA_Msk (0x1UL << MWU_INTENCLR_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_INTENCLR_REGION3WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION3WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION3WA_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for REGION[2].RA event */
N#define MWU_INTENCLR_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_INTENCLR_REGION2RA_Msk (0x1UL << MWU_INTENCLR_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_INTENCLR_REGION2RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION2RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION2RA_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for REGION[2].WA event */
N#define MWU_INTENCLR_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_INTENCLR_REGION2WA_Msk (0x1UL << MWU_INTENCLR_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_INTENCLR_REGION2WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION2WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION2WA_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for REGION[1].RA event */
N#define MWU_INTENCLR_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_INTENCLR_REGION1RA_Msk (0x1UL << MWU_INTENCLR_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_INTENCLR_REGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION1RA_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for REGION[1].WA event */
N#define MWU_INTENCLR_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_INTENCLR_REGION1WA_Msk (0x1UL << MWU_INTENCLR_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_INTENCLR_REGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION1WA_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for REGION[0].RA event */
N#define MWU_INTENCLR_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_INTENCLR_REGION0RA_Msk (0x1UL << MWU_INTENCLR_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_INTENCLR_REGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION0RA_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for REGION[0].WA event */
N#define MWU_INTENCLR_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_INTENCLR_REGION0WA_Msk (0x1UL << MWU_INTENCLR_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_INTENCLR_REGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_INTENCLR_REGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_INTENCLR_REGION0WA_Clear (1UL) /*!< Disable */
N
N/* Register: MWU_NMIEN */
N/* Description: Enable or disable non-maskable interrupt */
N
N/* Bit 27 : Enable or disable non-maskable interrupt for PREGION[1].RA event */
N#define MWU_NMIEN_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_NMIEN_PREGION1RA_Msk (0x1UL << MWU_NMIEN_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_NMIEN_PREGION1RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_PREGION1RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 26 : Enable or disable non-maskable interrupt for PREGION[1].WA event */
N#define MWU_NMIEN_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_NMIEN_PREGION1WA_Msk (0x1UL << MWU_NMIEN_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_NMIEN_PREGION1WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_PREGION1WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 25 : Enable or disable non-maskable interrupt for PREGION[0].RA event */
N#define MWU_NMIEN_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_NMIEN_PREGION0RA_Msk (0x1UL << MWU_NMIEN_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_NMIEN_PREGION0RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_PREGION0RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 24 : Enable or disable non-maskable interrupt for PREGION[0].WA event */
N#define MWU_NMIEN_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_NMIEN_PREGION0WA_Msk (0x1UL << MWU_NMIEN_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_NMIEN_PREGION0WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_PREGION0WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable non-maskable interrupt for REGION[3].RA event */
N#define MWU_NMIEN_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_NMIEN_REGION3RA_Msk (0x1UL << MWU_NMIEN_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_NMIEN_REGION3RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION3RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable non-maskable interrupt for REGION[3].WA event */
N#define MWU_NMIEN_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_NMIEN_REGION3WA_Msk (0x1UL << MWU_NMIEN_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_NMIEN_REGION3WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION3WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable non-maskable interrupt for REGION[2].RA event */
N#define MWU_NMIEN_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_NMIEN_REGION2RA_Msk (0x1UL << MWU_NMIEN_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_NMIEN_REGION2RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION2RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable non-maskable interrupt for REGION[2].WA event */
N#define MWU_NMIEN_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_NMIEN_REGION2WA_Msk (0x1UL << MWU_NMIEN_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_NMIEN_REGION2WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION2WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable non-maskable interrupt for REGION[1].RA event */
N#define MWU_NMIEN_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_NMIEN_REGION1RA_Msk (0x1UL << MWU_NMIEN_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_NMIEN_REGION1RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION1RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable non-maskable interrupt for REGION[1].WA event */
N#define MWU_NMIEN_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_NMIEN_REGION1WA_Msk (0x1UL << MWU_NMIEN_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_NMIEN_REGION1WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION1WA_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable non-maskable interrupt for REGION[0].RA event */
N#define MWU_NMIEN_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_NMIEN_REGION0RA_Msk (0x1UL << MWU_NMIEN_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_NMIEN_REGION0RA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION0RA_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable non-maskable interrupt for REGION[0].WA event */
N#define MWU_NMIEN_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_NMIEN_REGION0WA_Msk (0x1UL << MWU_NMIEN_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_NMIEN_REGION0WA_Disabled (0UL) /*!< Disable */
N#define MWU_NMIEN_REGION0WA_Enabled (1UL) /*!< Enable */
N
N/* Register: MWU_NMIENSET */
N/* Description: Enable non-maskable interrupt */
N
N/* Bit 27 : Write '1' to Enable non-maskable interrupt for PREGION[1].RA event */
N#define MWU_NMIENSET_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_NMIENSET_PREGION1RA_Msk (0x1UL << MWU_NMIENSET_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_NMIENSET_PREGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_PREGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_PREGION1RA_Set (1UL) /*!< Enable */
N
N/* Bit 26 : Write '1' to Enable non-maskable interrupt for PREGION[1].WA event */
N#define MWU_NMIENSET_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_NMIENSET_PREGION1WA_Msk (0x1UL << MWU_NMIENSET_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_NMIENSET_PREGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_PREGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_PREGION1WA_Set (1UL) /*!< Enable */
N
N/* Bit 25 : Write '1' to Enable non-maskable interrupt for PREGION[0].RA event */
N#define MWU_NMIENSET_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_NMIENSET_PREGION0RA_Msk (0x1UL << MWU_NMIENSET_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_NMIENSET_PREGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_PREGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_PREGION0RA_Set (1UL) /*!< Enable */
N
N/* Bit 24 : Write '1' to Enable non-maskable interrupt for PREGION[0].WA event */
N#define MWU_NMIENSET_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_NMIENSET_PREGION0WA_Msk (0x1UL << MWU_NMIENSET_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_NMIENSET_PREGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_PREGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_PREGION0WA_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable non-maskable interrupt for REGION[3].RA event */
N#define MWU_NMIENSET_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_NMIENSET_REGION3RA_Msk (0x1UL << MWU_NMIENSET_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_NMIENSET_REGION3RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION3RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION3RA_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable non-maskable interrupt for REGION[3].WA event */
N#define MWU_NMIENSET_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_NMIENSET_REGION3WA_Msk (0x1UL << MWU_NMIENSET_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_NMIENSET_REGION3WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION3WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION3WA_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable non-maskable interrupt for REGION[2].RA event */
N#define MWU_NMIENSET_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_NMIENSET_REGION2RA_Msk (0x1UL << MWU_NMIENSET_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_NMIENSET_REGION2RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION2RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION2RA_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable non-maskable interrupt for REGION[2].WA event */
N#define MWU_NMIENSET_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_NMIENSET_REGION2WA_Msk (0x1UL << MWU_NMIENSET_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_NMIENSET_REGION2WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION2WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION2WA_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable non-maskable interrupt for REGION[1].RA event */
N#define MWU_NMIENSET_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_NMIENSET_REGION1RA_Msk (0x1UL << MWU_NMIENSET_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_NMIENSET_REGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION1RA_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable non-maskable interrupt for REGION[1].WA event */
N#define MWU_NMIENSET_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_NMIENSET_REGION1WA_Msk (0x1UL << MWU_NMIENSET_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_NMIENSET_REGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION1WA_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable non-maskable interrupt for REGION[0].RA event */
N#define MWU_NMIENSET_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_NMIENSET_REGION0RA_Msk (0x1UL << MWU_NMIENSET_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_NMIENSET_REGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION0RA_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable non-maskable interrupt for REGION[0].WA event */
N#define MWU_NMIENSET_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_NMIENSET_REGION0WA_Msk (0x1UL << MWU_NMIENSET_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_NMIENSET_REGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENSET_REGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENSET_REGION0WA_Set (1UL) /*!< Enable */
N
N/* Register: MWU_NMIENCLR */
N/* Description: Disable non-maskable interrupt */
N
N/* Bit 27 : Write '1' to Disable non-maskable interrupt for PREGION[1].RA event */
N#define MWU_NMIENCLR_PREGION1RA_Pos (27UL) /*!< Position of PREGION1RA field. */
N#define MWU_NMIENCLR_PREGION1RA_Msk (0x1UL << MWU_NMIENCLR_PREGION1RA_Pos) /*!< Bit mask of PREGION1RA field. */
N#define MWU_NMIENCLR_PREGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_PREGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_PREGION1RA_Clear (1UL) /*!< Disable */
N
N/* Bit 26 : Write '1' to Disable non-maskable interrupt for PREGION[1].WA event */
N#define MWU_NMIENCLR_PREGION1WA_Pos (26UL) /*!< Position of PREGION1WA field. */
N#define MWU_NMIENCLR_PREGION1WA_Msk (0x1UL << MWU_NMIENCLR_PREGION1WA_Pos) /*!< Bit mask of PREGION1WA field. */
N#define MWU_NMIENCLR_PREGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_PREGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_PREGION1WA_Clear (1UL) /*!< Disable */
N
N/* Bit 25 : Write '1' to Disable non-maskable interrupt for PREGION[0].RA event */
N#define MWU_NMIENCLR_PREGION0RA_Pos (25UL) /*!< Position of PREGION0RA field. */
N#define MWU_NMIENCLR_PREGION0RA_Msk (0x1UL << MWU_NMIENCLR_PREGION0RA_Pos) /*!< Bit mask of PREGION0RA field. */
N#define MWU_NMIENCLR_PREGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_PREGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_PREGION0RA_Clear (1UL) /*!< Disable */
N
N/* Bit 24 : Write '1' to Disable non-maskable interrupt for PREGION[0].WA event */
N#define MWU_NMIENCLR_PREGION0WA_Pos (24UL) /*!< Position of PREGION0WA field. */
N#define MWU_NMIENCLR_PREGION0WA_Msk (0x1UL << MWU_NMIENCLR_PREGION0WA_Pos) /*!< Bit mask of PREGION0WA field. */
N#define MWU_NMIENCLR_PREGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_PREGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_PREGION0WA_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable non-maskable interrupt for REGION[3].RA event */
N#define MWU_NMIENCLR_REGION3RA_Pos (7UL) /*!< Position of REGION3RA field. */
N#define MWU_NMIENCLR_REGION3RA_Msk (0x1UL << MWU_NMIENCLR_REGION3RA_Pos) /*!< Bit mask of REGION3RA field. */
N#define MWU_NMIENCLR_REGION3RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION3RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION3RA_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable non-maskable interrupt for REGION[3].WA event */
N#define MWU_NMIENCLR_REGION3WA_Pos (6UL) /*!< Position of REGION3WA field. */
N#define MWU_NMIENCLR_REGION3WA_Msk (0x1UL << MWU_NMIENCLR_REGION3WA_Pos) /*!< Bit mask of REGION3WA field. */
N#define MWU_NMIENCLR_REGION3WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION3WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION3WA_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable non-maskable interrupt for REGION[2].RA event */
N#define MWU_NMIENCLR_REGION2RA_Pos (5UL) /*!< Position of REGION2RA field. */
N#define MWU_NMIENCLR_REGION2RA_Msk (0x1UL << MWU_NMIENCLR_REGION2RA_Pos) /*!< Bit mask of REGION2RA field. */
N#define MWU_NMIENCLR_REGION2RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION2RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION2RA_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable non-maskable interrupt for REGION[2].WA event */
N#define MWU_NMIENCLR_REGION2WA_Pos (4UL) /*!< Position of REGION2WA field. */
N#define MWU_NMIENCLR_REGION2WA_Msk (0x1UL << MWU_NMIENCLR_REGION2WA_Pos) /*!< Bit mask of REGION2WA field. */
N#define MWU_NMIENCLR_REGION2WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION2WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION2WA_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable non-maskable interrupt for REGION[1].RA event */
N#define MWU_NMIENCLR_REGION1RA_Pos (3UL) /*!< Position of REGION1RA field. */
N#define MWU_NMIENCLR_REGION1RA_Msk (0x1UL << MWU_NMIENCLR_REGION1RA_Pos) /*!< Bit mask of REGION1RA field. */
N#define MWU_NMIENCLR_REGION1RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION1RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION1RA_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable non-maskable interrupt for REGION[1].WA event */
N#define MWU_NMIENCLR_REGION1WA_Pos (2UL) /*!< Position of REGION1WA field. */
N#define MWU_NMIENCLR_REGION1WA_Msk (0x1UL << MWU_NMIENCLR_REGION1WA_Pos) /*!< Bit mask of REGION1WA field. */
N#define MWU_NMIENCLR_REGION1WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION1WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION1WA_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable non-maskable interrupt for REGION[0].RA event */
N#define MWU_NMIENCLR_REGION0RA_Pos (1UL) /*!< Position of REGION0RA field. */
N#define MWU_NMIENCLR_REGION0RA_Msk (0x1UL << MWU_NMIENCLR_REGION0RA_Pos) /*!< Bit mask of REGION0RA field. */
N#define MWU_NMIENCLR_REGION0RA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION0RA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION0RA_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable non-maskable interrupt for REGION[0].WA event */
N#define MWU_NMIENCLR_REGION0WA_Pos (0UL) /*!< Position of REGION0WA field. */
N#define MWU_NMIENCLR_REGION0WA_Msk (0x1UL << MWU_NMIENCLR_REGION0WA_Pos) /*!< Bit mask of REGION0WA field. */
N#define MWU_NMIENCLR_REGION0WA_Disabled (0UL) /*!< Read: Disabled */
N#define MWU_NMIENCLR_REGION0WA_Enabled (1UL) /*!< Read: Enabled */
N#define MWU_NMIENCLR_REGION0WA_Clear (1UL) /*!< Disable */
N
N/* Register: MWU_PERREGION_SUBSTATWA */
N/* Description: Description cluster[0]:  Source of event/interrupt in region 0, write access detected while corresponding subregion was enabled for watching */
N
N/* Bit 31 : Subregion 31 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR31_Pos (31UL) /*!< Position of SR31 field. */
N#define MWU_PERREGION_SUBSTATWA_SR31_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR31_Pos) /*!< Bit mask of SR31 field. */
N#define MWU_PERREGION_SUBSTATWA_SR31_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR31_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 30 : Subregion 30 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR30_Pos (30UL) /*!< Position of SR30 field. */
N#define MWU_PERREGION_SUBSTATWA_SR30_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR30_Pos) /*!< Bit mask of SR30 field. */
N#define MWU_PERREGION_SUBSTATWA_SR30_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR30_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 29 : Subregion 29 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR29_Pos (29UL) /*!< Position of SR29 field. */
N#define MWU_PERREGION_SUBSTATWA_SR29_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR29_Pos) /*!< Bit mask of SR29 field. */
N#define MWU_PERREGION_SUBSTATWA_SR29_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR29_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 28 : Subregion 28 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR28_Pos (28UL) /*!< Position of SR28 field. */
N#define MWU_PERREGION_SUBSTATWA_SR28_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR28_Pos) /*!< Bit mask of SR28 field. */
N#define MWU_PERREGION_SUBSTATWA_SR28_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR28_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 27 : Subregion 27 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR27_Pos (27UL) /*!< Position of SR27 field. */
N#define MWU_PERREGION_SUBSTATWA_SR27_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR27_Pos) /*!< Bit mask of SR27 field. */
N#define MWU_PERREGION_SUBSTATWA_SR27_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR27_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 26 : Subregion 26 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR26_Pos (26UL) /*!< Position of SR26 field. */
N#define MWU_PERREGION_SUBSTATWA_SR26_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR26_Pos) /*!< Bit mask of SR26 field. */
N#define MWU_PERREGION_SUBSTATWA_SR26_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR26_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 25 : Subregion 25 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR25_Pos (25UL) /*!< Position of SR25 field. */
N#define MWU_PERREGION_SUBSTATWA_SR25_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR25_Pos) /*!< Bit mask of SR25 field. */
N#define MWU_PERREGION_SUBSTATWA_SR25_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR25_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 24 : Subregion 24 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR24_Pos (24UL) /*!< Position of SR24 field. */
N#define MWU_PERREGION_SUBSTATWA_SR24_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR24_Pos) /*!< Bit mask of SR24 field. */
N#define MWU_PERREGION_SUBSTATWA_SR24_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR24_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 23 : Subregion 23 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR23_Pos (23UL) /*!< Position of SR23 field. */
N#define MWU_PERREGION_SUBSTATWA_SR23_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR23_Pos) /*!< Bit mask of SR23 field. */
N#define MWU_PERREGION_SUBSTATWA_SR23_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR23_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 22 : Subregion 22 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR22_Pos (22UL) /*!< Position of SR22 field. */
N#define MWU_PERREGION_SUBSTATWA_SR22_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR22_Pos) /*!< Bit mask of SR22 field. */
N#define MWU_PERREGION_SUBSTATWA_SR22_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR22_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 21 : Subregion 21 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR21_Pos (21UL) /*!< Position of SR21 field. */
N#define MWU_PERREGION_SUBSTATWA_SR21_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR21_Pos) /*!< Bit mask of SR21 field. */
N#define MWU_PERREGION_SUBSTATWA_SR21_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR21_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 20 : Subregion 20 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR20_Pos (20UL) /*!< Position of SR20 field. */
N#define MWU_PERREGION_SUBSTATWA_SR20_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR20_Pos) /*!< Bit mask of SR20 field. */
N#define MWU_PERREGION_SUBSTATWA_SR20_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR20_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 19 : Subregion 19 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR19_Pos (19UL) /*!< Position of SR19 field. */
N#define MWU_PERREGION_SUBSTATWA_SR19_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR19_Pos) /*!< Bit mask of SR19 field. */
N#define MWU_PERREGION_SUBSTATWA_SR19_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR19_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 18 : Subregion 18 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR18_Pos (18UL) /*!< Position of SR18 field. */
N#define MWU_PERREGION_SUBSTATWA_SR18_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR18_Pos) /*!< Bit mask of SR18 field. */
N#define MWU_PERREGION_SUBSTATWA_SR18_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR18_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 17 : Subregion 17 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR17_Pos (17UL) /*!< Position of SR17 field. */
N#define MWU_PERREGION_SUBSTATWA_SR17_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR17_Pos) /*!< Bit mask of SR17 field. */
N#define MWU_PERREGION_SUBSTATWA_SR17_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR17_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 16 : Subregion 16 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR16_Pos (16UL) /*!< Position of SR16 field. */
N#define MWU_PERREGION_SUBSTATWA_SR16_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR16_Pos) /*!< Bit mask of SR16 field. */
N#define MWU_PERREGION_SUBSTATWA_SR16_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR16_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 15 : Subregion 15 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR15_Pos (15UL) /*!< Position of SR15 field. */
N#define MWU_PERREGION_SUBSTATWA_SR15_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR15_Pos) /*!< Bit mask of SR15 field. */
N#define MWU_PERREGION_SUBSTATWA_SR15_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR15_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 14 : Subregion 14 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR14_Pos (14UL) /*!< Position of SR14 field. */
N#define MWU_PERREGION_SUBSTATWA_SR14_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR14_Pos) /*!< Bit mask of SR14 field. */
N#define MWU_PERREGION_SUBSTATWA_SR14_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR14_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 13 : Subregion 13 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR13_Pos (13UL) /*!< Position of SR13 field. */
N#define MWU_PERREGION_SUBSTATWA_SR13_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR13_Pos) /*!< Bit mask of SR13 field. */
N#define MWU_PERREGION_SUBSTATWA_SR13_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR13_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 12 : Subregion 12 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR12_Pos (12UL) /*!< Position of SR12 field. */
N#define MWU_PERREGION_SUBSTATWA_SR12_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR12_Pos) /*!< Bit mask of SR12 field. */
N#define MWU_PERREGION_SUBSTATWA_SR12_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR12_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 11 : Subregion 11 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR11_Pos (11UL) /*!< Position of SR11 field. */
N#define MWU_PERREGION_SUBSTATWA_SR11_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR11_Pos) /*!< Bit mask of SR11 field. */
N#define MWU_PERREGION_SUBSTATWA_SR11_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR11_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 10 : Subregion 10 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR10_Pos (10UL) /*!< Position of SR10 field. */
N#define MWU_PERREGION_SUBSTATWA_SR10_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR10_Pos) /*!< Bit mask of SR10 field. */
N#define MWU_PERREGION_SUBSTATWA_SR10_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR10_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 9 : Subregion 9 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR9_Pos (9UL) /*!< Position of SR9 field. */
N#define MWU_PERREGION_SUBSTATWA_SR9_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR9_Pos) /*!< Bit mask of SR9 field. */
N#define MWU_PERREGION_SUBSTATWA_SR9_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR9_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 8 : Subregion 8 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR8_Pos (8UL) /*!< Position of SR8 field. */
N#define MWU_PERREGION_SUBSTATWA_SR8_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR8_Pos) /*!< Bit mask of SR8 field. */
N#define MWU_PERREGION_SUBSTATWA_SR8_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR8_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 7 : Subregion 7 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR7_Pos (7UL) /*!< Position of SR7 field. */
N#define MWU_PERREGION_SUBSTATWA_SR7_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR7_Pos) /*!< Bit mask of SR7 field. */
N#define MWU_PERREGION_SUBSTATWA_SR7_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR7_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 6 : Subregion 6 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR6_Pos (6UL) /*!< Position of SR6 field. */
N#define MWU_PERREGION_SUBSTATWA_SR6_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR6_Pos) /*!< Bit mask of SR6 field. */
N#define MWU_PERREGION_SUBSTATWA_SR6_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR6_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 5 : Subregion 5 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR5_Pos (5UL) /*!< Position of SR5 field. */
N#define MWU_PERREGION_SUBSTATWA_SR5_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR5_Pos) /*!< Bit mask of SR5 field. */
N#define MWU_PERREGION_SUBSTATWA_SR5_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR5_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 4 : Subregion 4 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR4_Pos (4UL) /*!< Position of SR4 field. */
N#define MWU_PERREGION_SUBSTATWA_SR4_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR4_Pos) /*!< Bit mask of SR4 field. */
N#define MWU_PERREGION_SUBSTATWA_SR4_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR4_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 3 : Subregion 3 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR3_Pos (3UL) /*!< Position of SR3 field. */
N#define MWU_PERREGION_SUBSTATWA_SR3_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR3_Pos) /*!< Bit mask of SR3 field. */
N#define MWU_PERREGION_SUBSTATWA_SR3_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR3_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 2 : Subregion 2 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR2_Pos (2UL) /*!< Position of SR2 field. */
N#define MWU_PERREGION_SUBSTATWA_SR2_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR2_Pos) /*!< Bit mask of SR2 field. */
N#define MWU_PERREGION_SUBSTATWA_SR2_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR2_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 1 : Subregion 1 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR1_Pos (1UL) /*!< Position of SR1 field. */
N#define MWU_PERREGION_SUBSTATWA_SR1_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR1_Pos) /*!< Bit mask of SR1 field. */
N#define MWU_PERREGION_SUBSTATWA_SR1_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR1_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Bit 0 : Subregion 0 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATWA_SR0_Pos (0UL) /*!< Position of SR0 field. */
N#define MWU_PERREGION_SUBSTATWA_SR0_Msk (0x1UL << MWU_PERREGION_SUBSTATWA_SR0_Pos) /*!< Bit mask of SR0 field. */
N#define MWU_PERREGION_SUBSTATWA_SR0_NoAccess (0UL) /*!< No write access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATWA_SR0_Access (1UL) /*!< Write access(es) occurred in this subregion */
N
N/* Register: MWU_PERREGION_SUBSTATRA */
N/* Description: Description cluster[0]:  Source of event/interrupt in region 0, read access detected while corresponding subregion was enabled for watching */
N
N/* Bit 31 : Subregion 31 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR31_Pos (31UL) /*!< Position of SR31 field. */
N#define MWU_PERREGION_SUBSTATRA_SR31_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR31_Pos) /*!< Bit mask of SR31 field. */
N#define MWU_PERREGION_SUBSTATRA_SR31_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR31_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 30 : Subregion 30 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR30_Pos (30UL) /*!< Position of SR30 field. */
N#define MWU_PERREGION_SUBSTATRA_SR30_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR30_Pos) /*!< Bit mask of SR30 field. */
N#define MWU_PERREGION_SUBSTATRA_SR30_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR30_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 29 : Subregion 29 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR29_Pos (29UL) /*!< Position of SR29 field. */
N#define MWU_PERREGION_SUBSTATRA_SR29_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR29_Pos) /*!< Bit mask of SR29 field. */
N#define MWU_PERREGION_SUBSTATRA_SR29_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR29_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 28 : Subregion 28 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR28_Pos (28UL) /*!< Position of SR28 field. */
N#define MWU_PERREGION_SUBSTATRA_SR28_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR28_Pos) /*!< Bit mask of SR28 field. */
N#define MWU_PERREGION_SUBSTATRA_SR28_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR28_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 27 : Subregion 27 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR27_Pos (27UL) /*!< Position of SR27 field. */
N#define MWU_PERREGION_SUBSTATRA_SR27_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR27_Pos) /*!< Bit mask of SR27 field. */
N#define MWU_PERREGION_SUBSTATRA_SR27_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR27_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 26 : Subregion 26 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR26_Pos (26UL) /*!< Position of SR26 field. */
N#define MWU_PERREGION_SUBSTATRA_SR26_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR26_Pos) /*!< Bit mask of SR26 field. */
N#define MWU_PERREGION_SUBSTATRA_SR26_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR26_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 25 : Subregion 25 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR25_Pos (25UL) /*!< Position of SR25 field. */
N#define MWU_PERREGION_SUBSTATRA_SR25_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR25_Pos) /*!< Bit mask of SR25 field. */
N#define MWU_PERREGION_SUBSTATRA_SR25_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR25_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 24 : Subregion 24 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR24_Pos (24UL) /*!< Position of SR24 field. */
N#define MWU_PERREGION_SUBSTATRA_SR24_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR24_Pos) /*!< Bit mask of SR24 field. */
N#define MWU_PERREGION_SUBSTATRA_SR24_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR24_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 23 : Subregion 23 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR23_Pos (23UL) /*!< Position of SR23 field. */
N#define MWU_PERREGION_SUBSTATRA_SR23_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR23_Pos) /*!< Bit mask of SR23 field. */
N#define MWU_PERREGION_SUBSTATRA_SR23_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR23_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 22 : Subregion 22 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR22_Pos (22UL) /*!< Position of SR22 field. */
N#define MWU_PERREGION_SUBSTATRA_SR22_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR22_Pos) /*!< Bit mask of SR22 field. */
N#define MWU_PERREGION_SUBSTATRA_SR22_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR22_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 21 : Subregion 21 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR21_Pos (21UL) /*!< Position of SR21 field. */
N#define MWU_PERREGION_SUBSTATRA_SR21_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR21_Pos) /*!< Bit mask of SR21 field. */
N#define MWU_PERREGION_SUBSTATRA_SR21_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR21_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 20 : Subregion 20 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR20_Pos (20UL) /*!< Position of SR20 field. */
N#define MWU_PERREGION_SUBSTATRA_SR20_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR20_Pos) /*!< Bit mask of SR20 field. */
N#define MWU_PERREGION_SUBSTATRA_SR20_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR20_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 19 : Subregion 19 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR19_Pos (19UL) /*!< Position of SR19 field. */
N#define MWU_PERREGION_SUBSTATRA_SR19_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR19_Pos) /*!< Bit mask of SR19 field. */
N#define MWU_PERREGION_SUBSTATRA_SR19_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR19_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 18 : Subregion 18 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR18_Pos (18UL) /*!< Position of SR18 field. */
N#define MWU_PERREGION_SUBSTATRA_SR18_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR18_Pos) /*!< Bit mask of SR18 field. */
N#define MWU_PERREGION_SUBSTATRA_SR18_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR18_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 17 : Subregion 17 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR17_Pos (17UL) /*!< Position of SR17 field. */
N#define MWU_PERREGION_SUBSTATRA_SR17_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR17_Pos) /*!< Bit mask of SR17 field. */
N#define MWU_PERREGION_SUBSTATRA_SR17_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR17_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 16 : Subregion 16 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR16_Pos (16UL) /*!< Position of SR16 field. */
N#define MWU_PERREGION_SUBSTATRA_SR16_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR16_Pos) /*!< Bit mask of SR16 field. */
N#define MWU_PERREGION_SUBSTATRA_SR16_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR16_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 15 : Subregion 15 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR15_Pos (15UL) /*!< Position of SR15 field. */
N#define MWU_PERREGION_SUBSTATRA_SR15_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR15_Pos) /*!< Bit mask of SR15 field. */
N#define MWU_PERREGION_SUBSTATRA_SR15_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR15_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 14 : Subregion 14 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR14_Pos (14UL) /*!< Position of SR14 field. */
N#define MWU_PERREGION_SUBSTATRA_SR14_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR14_Pos) /*!< Bit mask of SR14 field. */
N#define MWU_PERREGION_SUBSTATRA_SR14_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR14_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 13 : Subregion 13 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR13_Pos (13UL) /*!< Position of SR13 field. */
N#define MWU_PERREGION_SUBSTATRA_SR13_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR13_Pos) /*!< Bit mask of SR13 field. */
N#define MWU_PERREGION_SUBSTATRA_SR13_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR13_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 12 : Subregion 12 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR12_Pos (12UL) /*!< Position of SR12 field. */
N#define MWU_PERREGION_SUBSTATRA_SR12_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR12_Pos) /*!< Bit mask of SR12 field. */
N#define MWU_PERREGION_SUBSTATRA_SR12_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR12_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 11 : Subregion 11 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR11_Pos (11UL) /*!< Position of SR11 field. */
N#define MWU_PERREGION_SUBSTATRA_SR11_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR11_Pos) /*!< Bit mask of SR11 field. */
N#define MWU_PERREGION_SUBSTATRA_SR11_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR11_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 10 : Subregion 10 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR10_Pos (10UL) /*!< Position of SR10 field. */
N#define MWU_PERREGION_SUBSTATRA_SR10_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR10_Pos) /*!< Bit mask of SR10 field. */
N#define MWU_PERREGION_SUBSTATRA_SR10_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR10_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 9 : Subregion 9 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR9_Pos (9UL) /*!< Position of SR9 field. */
N#define MWU_PERREGION_SUBSTATRA_SR9_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR9_Pos) /*!< Bit mask of SR9 field. */
N#define MWU_PERREGION_SUBSTATRA_SR9_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR9_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 8 : Subregion 8 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR8_Pos (8UL) /*!< Position of SR8 field. */
N#define MWU_PERREGION_SUBSTATRA_SR8_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR8_Pos) /*!< Bit mask of SR8 field. */
N#define MWU_PERREGION_SUBSTATRA_SR8_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR8_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 7 : Subregion 7 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR7_Pos (7UL) /*!< Position of SR7 field. */
N#define MWU_PERREGION_SUBSTATRA_SR7_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR7_Pos) /*!< Bit mask of SR7 field. */
N#define MWU_PERREGION_SUBSTATRA_SR7_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR7_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 6 : Subregion 6 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR6_Pos (6UL) /*!< Position of SR6 field. */
N#define MWU_PERREGION_SUBSTATRA_SR6_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR6_Pos) /*!< Bit mask of SR6 field. */
N#define MWU_PERREGION_SUBSTATRA_SR6_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR6_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 5 : Subregion 5 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR5_Pos (5UL) /*!< Position of SR5 field. */
N#define MWU_PERREGION_SUBSTATRA_SR5_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR5_Pos) /*!< Bit mask of SR5 field. */
N#define MWU_PERREGION_SUBSTATRA_SR5_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR5_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 4 : Subregion 4 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR4_Pos (4UL) /*!< Position of SR4 field. */
N#define MWU_PERREGION_SUBSTATRA_SR4_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR4_Pos) /*!< Bit mask of SR4 field. */
N#define MWU_PERREGION_SUBSTATRA_SR4_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR4_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 3 : Subregion 3 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR3_Pos (3UL) /*!< Position of SR3 field. */
N#define MWU_PERREGION_SUBSTATRA_SR3_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR3_Pos) /*!< Bit mask of SR3 field. */
N#define MWU_PERREGION_SUBSTATRA_SR3_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR3_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 2 : Subregion 2 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR2_Pos (2UL) /*!< Position of SR2 field. */
N#define MWU_PERREGION_SUBSTATRA_SR2_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR2_Pos) /*!< Bit mask of SR2 field. */
N#define MWU_PERREGION_SUBSTATRA_SR2_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR2_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 1 : Subregion 1 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR1_Pos (1UL) /*!< Position of SR1 field. */
N#define MWU_PERREGION_SUBSTATRA_SR1_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR1_Pos) /*!< Bit mask of SR1 field. */
N#define MWU_PERREGION_SUBSTATRA_SR1_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR1_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Bit 0 : Subregion 0 in region 0 (write '1' to clear) */
N#define MWU_PERREGION_SUBSTATRA_SR0_Pos (0UL) /*!< Position of SR0 field. */
N#define MWU_PERREGION_SUBSTATRA_SR0_Msk (0x1UL << MWU_PERREGION_SUBSTATRA_SR0_Pos) /*!< Bit mask of SR0 field. */
N#define MWU_PERREGION_SUBSTATRA_SR0_NoAccess (0UL) /*!< No read access occurred in this subregion */
N#define MWU_PERREGION_SUBSTATRA_SR0_Access (1UL) /*!< Read access(es) occurred in this subregion */
N
N/* Register: MWU_REGIONEN */
N/* Description: Enable/disable regions watch */
N
N/* Bit 27 : Enable/disable read access watch in PREGION[1] */
N#define MWU_REGIONEN_PRGN1RA_Pos (27UL) /*!< Position of PRGN1RA field. */
N#define MWU_REGIONEN_PRGN1RA_Msk (0x1UL << MWU_REGIONEN_PRGN1RA_Pos) /*!< Bit mask of PRGN1RA field. */
N#define MWU_REGIONEN_PRGN1RA_Disable (0UL) /*!< Disable read access watch in this PREGION */
N#define MWU_REGIONEN_PRGN1RA_Enable (1UL) /*!< Enable read access watch in this PREGION */
N
N/* Bit 26 : Enable/disable write access watch in PREGION[1] */
N#define MWU_REGIONEN_PRGN1WA_Pos (26UL) /*!< Position of PRGN1WA field. */
N#define MWU_REGIONEN_PRGN1WA_Msk (0x1UL << MWU_REGIONEN_PRGN1WA_Pos) /*!< Bit mask of PRGN1WA field. */
N#define MWU_REGIONEN_PRGN1WA_Disable (0UL) /*!< Disable write access watch in this PREGION */
N#define MWU_REGIONEN_PRGN1WA_Enable (1UL) /*!< Enable write access watch in this PREGION */
N
N/* Bit 25 : Enable/disable read access watch in PREGION[0] */
N#define MWU_REGIONEN_PRGN0RA_Pos (25UL) /*!< Position of PRGN0RA field. */
N#define MWU_REGIONEN_PRGN0RA_Msk (0x1UL << MWU_REGIONEN_PRGN0RA_Pos) /*!< Bit mask of PRGN0RA field. */
N#define MWU_REGIONEN_PRGN0RA_Disable (0UL) /*!< Disable read access watch in this PREGION */
N#define MWU_REGIONEN_PRGN0RA_Enable (1UL) /*!< Enable read access watch in this PREGION */
N
N/* Bit 24 : Enable/disable write access watch in PREGION[0] */
N#define MWU_REGIONEN_PRGN0WA_Pos (24UL) /*!< Position of PRGN0WA field. */
N#define MWU_REGIONEN_PRGN0WA_Msk (0x1UL << MWU_REGIONEN_PRGN0WA_Pos) /*!< Bit mask of PRGN0WA field. */
N#define MWU_REGIONEN_PRGN0WA_Disable (0UL) /*!< Disable write access watch in this PREGION */
N#define MWU_REGIONEN_PRGN0WA_Enable (1UL) /*!< Enable write access watch in this PREGION */
N
N/* Bit 7 : Enable/disable read access watch in region[3] */
N#define MWU_REGIONEN_RGN3RA_Pos (7UL) /*!< Position of RGN3RA field. */
N#define MWU_REGIONEN_RGN3RA_Msk (0x1UL << MWU_REGIONEN_RGN3RA_Pos) /*!< Bit mask of RGN3RA field. */
N#define MWU_REGIONEN_RGN3RA_Disable (0UL) /*!< Disable read access watch in this region */
N#define MWU_REGIONEN_RGN3RA_Enable (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 6 : Enable/disable write access watch in region[3] */
N#define MWU_REGIONEN_RGN3WA_Pos (6UL) /*!< Position of RGN3WA field. */
N#define MWU_REGIONEN_RGN3WA_Msk (0x1UL << MWU_REGIONEN_RGN3WA_Pos) /*!< Bit mask of RGN3WA field. */
N#define MWU_REGIONEN_RGN3WA_Disable (0UL) /*!< Disable write access watch in this region */
N#define MWU_REGIONEN_RGN3WA_Enable (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 5 : Enable/disable read access watch in region[2] */
N#define MWU_REGIONEN_RGN2RA_Pos (5UL) /*!< Position of RGN2RA field. */
N#define MWU_REGIONEN_RGN2RA_Msk (0x1UL << MWU_REGIONEN_RGN2RA_Pos) /*!< Bit mask of RGN2RA field. */
N#define MWU_REGIONEN_RGN2RA_Disable (0UL) /*!< Disable read access watch in this region */
N#define MWU_REGIONEN_RGN2RA_Enable (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 4 : Enable/disable write access watch in region[2] */
N#define MWU_REGIONEN_RGN2WA_Pos (4UL) /*!< Position of RGN2WA field. */
N#define MWU_REGIONEN_RGN2WA_Msk (0x1UL << MWU_REGIONEN_RGN2WA_Pos) /*!< Bit mask of RGN2WA field. */
N#define MWU_REGIONEN_RGN2WA_Disable (0UL) /*!< Disable write access watch in this region */
N#define MWU_REGIONEN_RGN2WA_Enable (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 3 : Enable/disable read access watch in region[1] */
N#define MWU_REGIONEN_RGN1RA_Pos (3UL) /*!< Position of RGN1RA field. */
N#define MWU_REGIONEN_RGN1RA_Msk (0x1UL << MWU_REGIONEN_RGN1RA_Pos) /*!< Bit mask of RGN1RA field. */
N#define MWU_REGIONEN_RGN1RA_Disable (0UL) /*!< Disable read access watch in this region */
N#define MWU_REGIONEN_RGN1RA_Enable (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 2 : Enable/disable write access watch in region[1] */
N#define MWU_REGIONEN_RGN1WA_Pos (2UL) /*!< Position of RGN1WA field. */
N#define MWU_REGIONEN_RGN1WA_Msk (0x1UL << MWU_REGIONEN_RGN1WA_Pos) /*!< Bit mask of RGN1WA field. */
N#define MWU_REGIONEN_RGN1WA_Disable (0UL) /*!< Disable write access watch in this region */
N#define MWU_REGIONEN_RGN1WA_Enable (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 1 : Enable/disable read access watch in region[0] */
N#define MWU_REGIONEN_RGN0RA_Pos (1UL) /*!< Position of RGN0RA field. */
N#define MWU_REGIONEN_RGN0RA_Msk (0x1UL << MWU_REGIONEN_RGN0RA_Pos) /*!< Bit mask of RGN0RA field. */
N#define MWU_REGIONEN_RGN0RA_Disable (0UL) /*!< Disable read access watch in this region */
N#define MWU_REGIONEN_RGN0RA_Enable (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 0 : Enable/disable write access watch in region[0] */
N#define MWU_REGIONEN_RGN0WA_Pos (0UL) /*!< Position of RGN0WA field. */
N#define MWU_REGIONEN_RGN0WA_Msk (0x1UL << MWU_REGIONEN_RGN0WA_Pos) /*!< Bit mask of RGN0WA field. */
N#define MWU_REGIONEN_RGN0WA_Disable (0UL) /*!< Disable write access watch in this region */
N#define MWU_REGIONEN_RGN0WA_Enable (1UL) /*!< Enable write access watch in this region */
N
N/* Register: MWU_REGIONENSET */
N/* Description: Enable regions watch */
N
N/* Bit 27 : Enable read access watch in PREGION[1] */
N#define MWU_REGIONENSET_PRGN1RA_Pos (27UL) /*!< Position of PRGN1RA field. */
N#define MWU_REGIONENSET_PRGN1RA_Msk (0x1UL << MWU_REGIONENSET_PRGN1RA_Pos) /*!< Bit mask of PRGN1RA field. */
N#define MWU_REGIONENSET_PRGN1RA_Disabled (0UL) /*!< Read access watch in this PREGION is disabled */
N#define MWU_REGIONENSET_PRGN1RA_Enabled (1UL) /*!< Read access watch in this PREGION is enabled */
N#define MWU_REGIONENSET_PRGN1RA_Set (1UL) /*!< Enable read access watch in this PREGION */
N
N/* Bit 26 : Enable write access watch in PREGION[1] */
N#define MWU_REGIONENSET_PRGN1WA_Pos (26UL) /*!< Position of PRGN1WA field. */
N#define MWU_REGIONENSET_PRGN1WA_Msk (0x1UL << MWU_REGIONENSET_PRGN1WA_Pos) /*!< Bit mask of PRGN1WA field. */
N#define MWU_REGIONENSET_PRGN1WA_Disabled (0UL) /*!< Write access watch in this PREGION is disabled */
N#define MWU_REGIONENSET_PRGN1WA_Enabled (1UL) /*!< Write access watch in this PREGION is enabled */
N#define MWU_REGIONENSET_PRGN1WA_Set (1UL) /*!< Enable write access watch in this PREGION */
N
N/* Bit 25 : Enable read access watch in PREGION[0] */
N#define MWU_REGIONENSET_PRGN0RA_Pos (25UL) /*!< Position of PRGN0RA field. */
N#define MWU_REGIONENSET_PRGN0RA_Msk (0x1UL << MWU_REGIONENSET_PRGN0RA_Pos) /*!< Bit mask of PRGN0RA field. */
N#define MWU_REGIONENSET_PRGN0RA_Disabled (0UL) /*!< Read access watch in this PREGION is disabled */
N#define MWU_REGIONENSET_PRGN0RA_Enabled (1UL) /*!< Read access watch in this PREGION is enabled */
N#define MWU_REGIONENSET_PRGN0RA_Set (1UL) /*!< Enable read access watch in this PREGION */
N
N/* Bit 24 : Enable write access watch in PREGION[0] */
N#define MWU_REGIONENSET_PRGN0WA_Pos (24UL) /*!< Position of PRGN0WA field. */
N#define MWU_REGIONENSET_PRGN0WA_Msk (0x1UL << MWU_REGIONENSET_PRGN0WA_Pos) /*!< Bit mask of PRGN0WA field. */
N#define MWU_REGIONENSET_PRGN0WA_Disabled (0UL) /*!< Write access watch in this PREGION is disabled */
N#define MWU_REGIONENSET_PRGN0WA_Enabled (1UL) /*!< Write access watch in this PREGION is enabled */
N#define MWU_REGIONENSET_PRGN0WA_Set (1UL) /*!< Enable write access watch in this PREGION */
N
N/* Bit 7 : Enable read access watch in region[3] */
N#define MWU_REGIONENSET_RGN3RA_Pos (7UL) /*!< Position of RGN3RA field. */
N#define MWU_REGIONENSET_RGN3RA_Msk (0x1UL << MWU_REGIONENSET_RGN3RA_Pos) /*!< Bit mask of RGN3RA field. */
N#define MWU_REGIONENSET_RGN3RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN3RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN3RA_Set (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 6 : Enable write access watch in region[3] */
N#define MWU_REGIONENSET_RGN3WA_Pos (6UL) /*!< Position of RGN3WA field. */
N#define MWU_REGIONENSET_RGN3WA_Msk (0x1UL << MWU_REGIONENSET_RGN3WA_Pos) /*!< Bit mask of RGN3WA field. */
N#define MWU_REGIONENSET_RGN3WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN3WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN3WA_Set (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 5 : Enable read access watch in region[2] */
N#define MWU_REGIONENSET_RGN2RA_Pos (5UL) /*!< Position of RGN2RA field. */
N#define MWU_REGIONENSET_RGN2RA_Msk (0x1UL << MWU_REGIONENSET_RGN2RA_Pos) /*!< Bit mask of RGN2RA field. */
N#define MWU_REGIONENSET_RGN2RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN2RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN2RA_Set (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 4 : Enable write access watch in region[2] */
N#define MWU_REGIONENSET_RGN2WA_Pos (4UL) /*!< Position of RGN2WA field. */
N#define MWU_REGIONENSET_RGN2WA_Msk (0x1UL << MWU_REGIONENSET_RGN2WA_Pos) /*!< Bit mask of RGN2WA field. */
N#define MWU_REGIONENSET_RGN2WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN2WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN2WA_Set (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 3 : Enable read access watch in region[1] */
N#define MWU_REGIONENSET_RGN1RA_Pos (3UL) /*!< Position of RGN1RA field. */
N#define MWU_REGIONENSET_RGN1RA_Msk (0x1UL << MWU_REGIONENSET_RGN1RA_Pos) /*!< Bit mask of RGN1RA field. */
N#define MWU_REGIONENSET_RGN1RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN1RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN1RA_Set (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 2 : Enable write access watch in region[1] */
N#define MWU_REGIONENSET_RGN1WA_Pos (2UL) /*!< Position of RGN1WA field. */
N#define MWU_REGIONENSET_RGN1WA_Msk (0x1UL << MWU_REGIONENSET_RGN1WA_Pos) /*!< Bit mask of RGN1WA field. */
N#define MWU_REGIONENSET_RGN1WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN1WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN1WA_Set (1UL) /*!< Enable write access watch in this region */
N
N/* Bit 1 : Enable read access watch in region[0] */
N#define MWU_REGIONENSET_RGN0RA_Pos (1UL) /*!< Position of RGN0RA field. */
N#define MWU_REGIONENSET_RGN0RA_Msk (0x1UL << MWU_REGIONENSET_RGN0RA_Pos) /*!< Bit mask of RGN0RA field. */
N#define MWU_REGIONENSET_RGN0RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN0RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN0RA_Set (1UL) /*!< Enable read access watch in this region */
N
N/* Bit 0 : Enable write access watch in region[0] */
N#define MWU_REGIONENSET_RGN0WA_Pos (0UL) /*!< Position of RGN0WA field. */
N#define MWU_REGIONENSET_RGN0WA_Msk (0x1UL << MWU_REGIONENSET_RGN0WA_Pos) /*!< Bit mask of RGN0WA field. */
N#define MWU_REGIONENSET_RGN0WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENSET_RGN0WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENSET_RGN0WA_Set (1UL) /*!< Enable write access watch in this region */
N
N/* Register: MWU_REGIONENCLR */
N/* Description: Disable regions watch */
N
N/* Bit 27 : Disable read access watch in PREGION[1] */
N#define MWU_REGIONENCLR_PRGN1RA_Pos (27UL) /*!< Position of PRGN1RA field. */
N#define MWU_REGIONENCLR_PRGN1RA_Msk (0x1UL << MWU_REGIONENCLR_PRGN1RA_Pos) /*!< Bit mask of PRGN1RA field. */
N#define MWU_REGIONENCLR_PRGN1RA_Disabled (0UL) /*!< Read access watch in this PREGION is disabled */
N#define MWU_REGIONENCLR_PRGN1RA_Enabled (1UL) /*!< Read access watch in this PREGION is enabled */
N#define MWU_REGIONENCLR_PRGN1RA_Clear (1UL) /*!< Disable read access watch in this PREGION */
N
N/* Bit 26 : Disable write access watch in PREGION[1] */
N#define MWU_REGIONENCLR_PRGN1WA_Pos (26UL) /*!< Position of PRGN1WA field. */
N#define MWU_REGIONENCLR_PRGN1WA_Msk (0x1UL << MWU_REGIONENCLR_PRGN1WA_Pos) /*!< Bit mask of PRGN1WA field. */
N#define MWU_REGIONENCLR_PRGN1WA_Disabled (0UL) /*!< Write access watch in this PREGION is disabled */
N#define MWU_REGIONENCLR_PRGN1WA_Enabled (1UL) /*!< Write access watch in this PREGION is enabled */
N#define MWU_REGIONENCLR_PRGN1WA_Clear (1UL) /*!< Disable write access watch in this PREGION */
N
N/* Bit 25 : Disable read access watch in PREGION[0] */
N#define MWU_REGIONENCLR_PRGN0RA_Pos (25UL) /*!< Position of PRGN0RA field. */
N#define MWU_REGIONENCLR_PRGN0RA_Msk (0x1UL << MWU_REGIONENCLR_PRGN0RA_Pos) /*!< Bit mask of PRGN0RA field. */
N#define MWU_REGIONENCLR_PRGN0RA_Disabled (0UL) /*!< Read access watch in this PREGION is disabled */
N#define MWU_REGIONENCLR_PRGN0RA_Enabled (1UL) /*!< Read access watch in this PREGION is enabled */
N#define MWU_REGIONENCLR_PRGN0RA_Clear (1UL) /*!< Disable read access watch in this PREGION */
N
N/* Bit 24 : Disable write access watch in PREGION[0] */
N#define MWU_REGIONENCLR_PRGN0WA_Pos (24UL) /*!< Position of PRGN0WA field. */
N#define MWU_REGIONENCLR_PRGN0WA_Msk (0x1UL << MWU_REGIONENCLR_PRGN0WA_Pos) /*!< Bit mask of PRGN0WA field. */
N#define MWU_REGIONENCLR_PRGN0WA_Disabled (0UL) /*!< Write access watch in this PREGION is disabled */
N#define MWU_REGIONENCLR_PRGN0WA_Enabled (1UL) /*!< Write access watch in this PREGION is enabled */
N#define MWU_REGIONENCLR_PRGN0WA_Clear (1UL) /*!< Disable write access watch in this PREGION */
N
N/* Bit 7 : Disable read access watch in region[3] */
N#define MWU_REGIONENCLR_RGN3RA_Pos (7UL) /*!< Position of RGN3RA field. */
N#define MWU_REGIONENCLR_RGN3RA_Msk (0x1UL << MWU_REGIONENCLR_RGN3RA_Pos) /*!< Bit mask of RGN3RA field. */
N#define MWU_REGIONENCLR_RGN3RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN3RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN3RA_Clear (1UL) /*!< Disable read access watch in this region */
N
N/* Bit 6 : Disable write access watch in region[3] */
N#define MWU_REGIONENCLR_RGN3WA_Pos (6UL) /*!< Position of RGN3WA field. */
N#define MWU_REGIONENCLR_RGN3WA_Msk (0x1UL << MWU_REGIONENCLR_RGN3WA_Pos) /*!< Bit mask of RGN3WA field. */
N#define MWU_REGIONENCLR_RGN3WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN3WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN3WA_Clear (1UL) /*!< Disable write access watch in this region */
N
N/* Bit 5 : Disable read access watch in region[2] */
N#define MWU_REGIONENCLR_RGN2RA_Pos (5UL) /*!< Position of RGN2RA field. */
N#define MWU_REGIONENCLR_RGN2RA_Msk (0x1UL << MWU_REGIONENCLR_RGN2RA_Pos) /*!< Bit mask of RGN2RA field. */
N#define MWU_REGIONENCLR_RGN2RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN2RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN2RA_Clear (1UL) /*!< Disable read access watch in this region */
N
N/* Bit 4 : Disable write access watch in region[2] */
N#define MWU_REGIONENCLR_RGN2WA_Pos (4UL) /*!< Position of RGN2WA field. */
N#define MWU_REGIONENCLR_RGN2WA_Msk (0x1UL << MWU_REGIONENCLR_RGN2WA_Pos) /*!< Bit mask of RGN2WA field. */
N#define MWU_REGIONENCLR_RGN2WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN2WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN2WA_Clear (1UL) /*!< Disable write access watch in this region */
N
N/* Bit 3 : Disable read access watch in region[1] */
N#define MWU_REGIONENCLR_RGN1RA_Pos (3UL) /*!< Position of RGN1RA field. */
N#define MWU_REGIONENCLR_RGN1RA_Msk (0x1UL << MWU_REGIONENCLR_RGN1RA_Pos) /*!< Bit mask of RGN1RA field. */
N#define MWU_REGIONENCLR_RGN1RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN1RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN1RA_Clear (1UL) /*!< Disable read access watch in this region */
N
N/* Bit 2 : Disable write access watch in region[1] */
N#define MWU_REGIONENCLR_RGN1WA_Pos (2UL) /*!< Position of RGN1WA field. */
N#define MWU_REGIONENCLR_RGN1WA_Msk (0x1UL << MWU_REGIONENCLR_RGN1WA_Pos) /*!< Bit mask of RGN1WA field. */
N#define MWU_REGIONENCLR_RGN1WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN1WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN1WA_Clear (1UL) /*!< Disable write access watch in this region */
N
N/* Bit 1 : Disable read access watch in region[0] */
N#define MWU_REGIONENCLR_RGN0RA_Pos (1UL) /*!< Position of RGN0RA field. */
N#define MWU_REGIONENCLR_RGN0RA_Msk (0x1UL << MWU_REGIONENCLR_RGN0RA_Pos) /*!< Bit mask of RGN0RA field. */
N#define MWU_REGIONENCLR_RGN0RA_Disabled (0UL) /*!< Read access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN0RA_Enabled (1UL) /*!< Read access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN0RA_Clear (1UL) /*!< Disable read access watch in this region */
N
N/* Bit 0 : Disable write access watch in region[0] */
N#define MWU_REGIONENCLR_RGN0WA_Pos (0UL) /*!< Position of RGN0WA field. */
N#define MWU_REGIONENCLR_RGN0WA_Msk (0x1UL << MWU_REGIONENCLR_RGN0WA_Pos) /*!< Bit mask of RGN0WA field. */
N#define MWU_REGIONENCLR_RGN0WA_Disabled (0UL) /*!< Write access watch in this region is disabled */
N#define MWU_REGIONENCLR_RGN0WA_Enabled (1UL) /*!< Write access watch in this region is enabled */
N#define MWU_REGIONENCLR_RGN0WA_Clear (1UL) /*!< Disable write access watch in this region */
N
N/* Register: MWU_REGION_START */
N/* Description: Description cluster[0]:  Start address for region 0 */
N
N/* Bits 31..0 : Start address for region */
N#define MWU_REGION_START_START_Pos (0UL) /*!< Position of START field. */
N#define MWU_REGION_START_START_Msk (0xFFFFFFFFUL << MWU_REGION_START_START_Pos) /*!< Bit mask of START field. */
N
N/* Register: MWU_REGION_END */
N/* Description: Description cluster[0]:  End address of region 0 */
N
N/* Bits 31..0 : End address of region. */
N#define MWU_REGION_END_END_Pos (0UL) /*!< Position of END field. */
N#define MWU_REGION_END_END_Msk (0xFFFFFFFFUL << MWU_REGION_END_END_Pos) /*!< Bit mask of END field. */
N
N/* Register: MWU_PREGION_START */
N/* Description: Description cluster[0]:  Reserved for future use */
N
N/* Bits 31..0 : Reserved for future use */
N#define MWU_PREGION_START_START_Pos (0UL) /*!< Position of START field. */
N#define MWU_PREGION_START_START_Msk (0xFFFFFFFFUL << MWU_PREGION_START_START_Pos) /*!< Bit mask of START field. */
N
N/* Register: MWU_PREGION_END */
N/* Description: Description cluster[0]:  Reserved for future use */
N
N/* Bits 31..0 : Reserved for future use */
N#define MWU_PREGION_END_END_Pos (0UL) /*!< Position of END field. */
N#define MWU_PREGION_END_END_Msk (0xFFFFFFFFUL << MWU_PREGION_END_END_Pos) /*!< Bit mask of END field. */
N
N/* Register: MWU_PREGION_SUBS */
N/* Description: Description cluster[0]:  Subregions of region 0 */
N
N/* Bit 31 : Include or exclude subregion 31 in region */
N#define MWU_PREGION_SUBS_SR31_Pos (31UL) /*!< Position of SR31 field. */
N#define MWU_PREGION_SUBS_SR31_Msk (0x1UL << MWU_PREGION_SUBS_SR31_Pos) /*!< Bit mask of SR31 field. */
N#define MWU_PREGION_SUBS_SR31_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR31_Include (1UL) /*!< Include */
N
N/* Bit 30 : Include or exclude subregion 30 in region */
N#define MWU_PREGION_SUBS_SR30_Pos (30UL) /*!< Position of SR30 field. */
N#define MWU_PREGION_SUBS_SR30_Msk (0x1UL << MWU_PREGION_SUBS_SR30_Pos) /*!< Bit mask of SR30 field. */
N#define MWU_PREGION_SUBS_SR30_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR30_Include (1UL) /*!< Include */
N
N/* Bit 29 : Include or exclude subregion 29 in region */
N#define MWU_PREGION_SUBS_SR29_Pos (29UL) /*!< Position of SR29 field. */
N#define MWU_PREGION_SUBS_SR29_Msk (0x1UL << MWU_PREGION_SUBS_SR29_Pos) /*!< Bit mask of SR29 field. */
N#define MWU_PREGION_SUBS_SR29_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR29_Include (1UL) /*!< Include */
N
N/* Bit 28 : Include or exclude subregion 28 in region */
N#define MWU_PREGION_SUBS_SR28_Pos (28UL) /*!< Position of SR28 field. */
N#define MWU_PREGION_SUBS_SR28_Msk (0x1UL << MWU_PREGION_SUBS_SR28_Pos) /*!< Bit mask of SR28 field. */
N#define MWU_PREGION_SUBS_SR28_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR28_Include (1UL) /*!< Include */
N
N/* Bit 27 : Include or exclude subregion 27 in region */
N#define MWU_PREGION_SUBS_SR27_Pos (27UL) /*!< Position of SR27 field. */
N#define MWU_PREGION_SUBS_SR27_Msk (0x1UL << MWU_PREGION_SUBS_SR27_Pos) /*!< Bit mask of SR27 field. */
N#define MWU_PREGION_SUBS_SR27_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR27_Include (1UL) /*!< Include */
N
N/* Bit 26 : Include or exclude subregion 26 in region */
N#define MWU_PREGION_SUBS_SR26_Pos (26UL) /*!< Position of SR26 field. */
N#define MWU_PREGION_SUBS_SR26_Msk (0x1UL << MWU_PREGION_SUBS_SR26_Pos) /*!< Bit mask of SR26 field. */
N#define MWU_PREGION_SUBS_SR26_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR26_Include (1UL) /*!< Include */
N
N/* Bit 25 : Include or exclude subregion 25 in region */
N#define MWU_PREGION_SUBS_SR25_Pos (25UL) /*!< Position of SR25 field. */
N#define MWU_PREGION_SUBS_SR25_Msk (0x1UL << MWU_PREGION_SUBS_SR25_Pos) /*!< Bit mask of SR25 field. */
N#define MWU_PREGION_SUBS_SR25_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR25_Include (1UL) /*!< Include */
N
N/* Bit 24 : Include or exclude subregion 24 in region */
N#define MWU_PREGION_SUBS_SR24_Pos (24UL) /*!< Position of SR24 field. */
N#define MWU_PREGION_SUBS_SR24_Msk (0x1UL << MWU_PREGION_SUBS_SR24_Pos) /*!< Bit mask of SR24 field. */
N#define MWU_PREGION_SUBS_SR24_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR24_Include (1UL) /*!< Include */
N
N/* Bit 23 : Include or exclude subregion 23 in region */
N#define MWU_PREGION_SUBS_SR23_Pos (23UL) /*!< Position of SR23 field. */
N#define MWU_PREGION_SUBS_SR23_Msk (0x1UL << MWU_PREGION_SUBS_SR23_Pos) /*!< Bit mask of SR23 field. */
N#define MWU_PREGION_SUBS_SR23_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR23_Include (1UL) /*!< Include */
N
N/* Bit 22 : Include or exclude subregion 22 in region */
N#define MWU_PREGION_SUBS_SR22_Pos (22UL) /*!< Position of SR22 field. */
N#define MWU_PREGION_SUBS_SR22_Msk (0x1UL << MWU_PREGION_SUBS_SR22_Pos) /*!< Bit mask of SR22 field. */
N#define MWU_PREGION_SUBS_SR22_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR22_Include (1UL) /*!< Include */
N
N/* Bit 21 : Include or exclude subregion 21 in region */
N#define MWU_PREGION_SUBS_SR21_Pos (21UL) /*!< Position of SR21 field. */
N#define MWU_PREGION_SUBS_SR21_Msk (0x1UL << MWU_PREGION_SUBS_SR21_Pos) /*!< Bit mask of SR21 field. */
N#define MWU_PREGION_SUBS_SR21_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR21_Include (1UL) /*!< Include */
N
N/* Bit 20 : Include or exclude subregion 20 in region */
N#define MWU_PREGION_SUBS_SR20_Pos (20UL) /*!< Position of SR20 field. */
N#define MWU_PREGION_SUBS_SR20_Msk (0x1UL << MWU_PREGION_SUBS_SR20_Pos) /*!< Bit mask of SR20 field. */
N#define MWU_PREGION_SUBS_SR20_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR20_Include (1UL) /*!< Include */
N
N/* Bit 19 : Include or exclude subregion 19 in region */
N#define MWU_PREGION_SUBS_SR19_Pos (19UL) /*!< Position of SR19 field. */
N#define MWU_PREGION_SUBS_SR19_Msk (0x1UL << MWU_PREGION_SUBS_SR19_Pos) /*!< Bit mask of SR19 field. */
N#define MWU_PREGION_SUBS_SR19_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR19_Include (1UL) /*!< Include */
N
N/* Bit 18 : Include or exclude subregion 18 in region */
N#define MWU_PREGION_SUBS_SR18_Pos (18UL) /*!< Position of SR18 field. */
N#define MWU_PREGION_SUBS_SR18_Msk (0x1UL << MWU_PREGION_SUBS_SR18_Pos) /*!< Bit mask of SR18 field. */
N#define MWU_PREGION_SUBS_SR18_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR18_Include (1UL) /*!< Include */
N
N/* Bit 17 : Include or exclude subregion 17 in region */
N#define MWU_PREGION_SUBS_SR17_Pos (17UL) /*!< Position of SR17 field. */
N#define MWU_PREGION_SUBS_SR17_Msk (0x1UL << MWU_PREGION_SUBS_SR17_Pos) /*!< Bit mask of SR17 field. */
N#define MWU_PREGION_SUBS_SR17_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR17_Include (1UL) /*!< Include */
N
N/* Bit 16 : Include or exclude subregion 16 in region */
N#define MWU_PREGION_SUBS_SR16_Pos (16UL) /*!< Position of SR16 field. */
N#define MWU_PREGION_SUBS_SR16_Msk (0x1UL << MWU_PREGION_SUBS_SR16_Pos) /*!< Bit mask of SR16 field. */
N#define MWU_PREGION_SUBS_SR16_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR16_Include (1UL) /*!< Include */
N
N/* Bit 15 : Include or exclude subregion 15 in region */
N#define MWU_PREGION_SUBS_SR15_Pos (15UL) /*!< Position of SR15 field. */
N#define MWU_PREGION_SUBS_SR15_Msk (0x1UL << MWU_PREGION_SUBS_SR15_Pos) /*!< Bit mask of SR15 field. */
N#define MWU_PREGION_SUBS_SR15_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR15_Include (1UL) /*!< Include */
N
N/* Bit 14 : Include or exclude subregion 14 in region */
N#define MWU_PREGION_SUBS_SR14_Pos (14UL) /*!< Position of SR14 field. */
N#define MWU_PREGION_SUBS_SR14_Msk (0x1UL << MWU_PREGION_SUBS_SR14_Pos) /*!< Bit mask of SR14 field. */
N#define MWU_PREGION_SUBS_SR14_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR14_Include (1UL) /*!< Include */
N
N/* Bit 13 : Include or exclude subregion 13 in region */
N#define MWU_PREGION_SUBS_SR13_Pos (13UL) /*!< Position of SR13 field. */
N#define MWU_PREGION_SUBS_SR13_Msk (0x1UL << MWU_PREGION_SUBS_SR13_Pos) /*!< Bit mask of SR13 field. */
N#define MWU_PREGION_SUBS_SR13_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR13_Include (1UL) /*!< Include */
N
N/* Bit 12 : Include or exclude subregion 12 in region */
N#define MWU_PREGION_SUBS_SR12_Pos (12UL) /*!< Position of SR12 field. */
N#define MWU_PREGION_SUBS_SR12_Msk (0x1UL << MWU_PREGION_SUBS_SR12_Pos) /*!< Bit mask of SR12 field. */
N#define MWU_PREGION_SUBS_SR12_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR12_Include (1UL) /*!< Include */
N
N/* Bit 11 : Include or exclude subregion 11 in region */
N#define MWU_PREGION_SUBS_SR11_Pos (11UL) /*!< Position of SR11 field. */
N#define MWU_PREGION_SUBS_SR11_Msk (0x1UL << MWU_PREGION_SUBS_SR11_Pos) /*!< Bit mask of SR11 field. */
N#define MWU_PREGION_SUBS_SR11_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR11_Include (1UL) /*!< Include */
N
N/* Bit 10 : Include or exclude subregion 10 in region */
N#define MWU_PREGION_SUBS_SR10_Pos (10UL) /*!< Position of SR10 field. */
N#define MWU_PREGION_SUBS_SR10_Msk (0x1UL << MWU_PREGION_SUBS_SR10_Pos) /*!< Bit mask of SR10 field. */
N#define MWU_PREGION_SUBS_SR10_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR10_Include (1UL) /*!< Include */
N
N/* Bit 9 : Include or exclude subregion 9 in region */
N#define MWU_PREGION_SUBS_SR9_Pos (9UL) /*!< Position of SR9 field. */
N#define MWU_PREGION_SUBS_SR9_Msk (0x1UL << MWU_PREGION_SUBS_SR9_Pos) /*!< Bit mask of SR9 field. */
N#define MWU_PREGION_SUBS_SR9_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR9_Include (1UL) /*!< Include */
N
N/* Bit 8 : Include or exclude subregion 8 in region */
N#define MWU_PREGION_SUBS_SR8_Pos (8UL) /*!< Position of SR8 field. */
N#define MWU_PREGION_SUBS_SR8_Msk (0x1UL << MWU_PREGION_SUBS_SR8_Pos) /*!< Bit mask of SR8 field. */
N#define MWU_PREGION_SUBS_SR8_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR8_Include (1UL) /*!< Include */
N
N/* Bit 7 : Include or exclude subregion 7 in region */
N#define MWU_PREGION_SUBS_SR7_Pos (7UL) /*!< Position of SR7 field. */
N#define MWU_PREGION_SUBS_SR7_Msk (0x1UL << MWU_PREGION_SUBS_SR7_Pos) /*!< Bit mask of SR7 field. */
N#define MWU_PREGION_SUBS_SR7_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR7_Include (1UL) /*!< Include */
N
N/* Bit 6 : Include or exclude subregion 6 in region */
N#define MWU_PREGION_SUBS_SR6_Pos (6UL) /*!< Position of SR6 field. */
N#define MWU_PREGION_SUBS_SR6_Msk (0x1UL << MWU_PREGION_SUBS_SR6_Pos) /*!< Bit mask of SR6 field. */
N#define MWU_PREGION_SUBS_SR6_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR6_Include (1UL) /*!< Include */
N
N/* Bit 5 : Include or exclude subregion 5 in region */
N#define MWU_PREGION_SUBS_SR5_Pos (5UL) /*!< Position of SR5 field. */
N#define MWU_PREGION_SUBS_SR5_Msk (0x1UL << MWU_PREGION_SUBS_SR5_Pos) /*!< Bit mask of SR5 field. */
N#define MWU_PREGION_SUBS_SR5_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR5_Include (1UL) /*!< Include */
N
N/* Bit 4 : Include or exclude subregion 4 in region */
N#define MWU_PREGION_SUBS_SR4_Pos (4UL) /*!< Position of SR4 field. */
N#define MWU_PREGION_SUBS_SR4_Msk (0x1UL << MWU_PREGION_SUBS_SR4_Pos) /*!< Bit mask of SR4 field. */
N#define MWU_PREGION_SUBS_SR4_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR4_Include (1UL) /*!< Include */
N
N/* Bit 3 : Include or exclude subregion 3 in region */
N#define MWU_PREGION_SUBS_SR3_Pos (3UL) /*!< Position of SR3 field. */
N#define MWU_PREGION_SUBS_SR3_Msk (0x1UL << MWU_PREGION_SUBS_SR3_Pos) /*!< Bit mask of SR3 field. */
N#define MWU_PREGION_SUBS_SR3_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR3_Include (1UL) /*!< Include */
N
N/* Bit 2 : Include or exclude subregion 2 in region */
N#define MWU_PREGION_SUBS_SR2_Pos (2UL) /*!< Position of SR2 field. */
N#define MWU_PREGION_SUBS_SR2_Msk (0x1UL << MWU_PREGION_SUBS_SR2_Pos) /*!< Bit mask of SR2 field. */
N#define MWU_PREGION_SUBS_SR2_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR2_Include (1UL) /*!< Include */
N
N/* Bit 1 : Include or exclude subregion 1 in region */
N#define MWU_PREGION_SUBS_SR1_Pos (1UL) /*!< Position of SR1 field. */
N#define MWU_PREGION_SUBS_SR1_Msk (0x1UL << MWU_PREGION_SUBS_SR1_Pos) /*!< Bit mask of SR1 field. */
N#define MWU_PREGION_SUBS_SR1_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR1_Include (1UL) /*!< Include */
N
N/* Bit 0 : Include or exclude subregion 0 in region */
N#define MWU_PREGION_SUBS_SR0_Pos (0UL) /*!< Position of SR0 field. */
N#define MWU_PREGION_SUBS_SR0_Msk (0x1UL << MWU_PREGION_SUBS_SR0_Pos) /*!< Bit mask of SR0 field. */
N#define MWU_PREGION_SUBS_SR0_Exclude (0UL) /*!< Exclude */
N#define MWU_PREGION_SUBS_SR0_Include (1UL) /*!< Include */
N
N
N/* Peripheral: NFCT */
N/* Description: NFC-A compatible radio */
N
N/* Register: NFCT_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 1 : Shortcut between FIELDLOST event and SENSE task */
N#define NFCT_SHORTS_FIELDLOST_SENSE_Pos (1UL) /*!< Position of FIELDLOST_SENSE field. */
N#define NFCT_SHORTS_FIELDLOST_SENSE_Msk (0x1UL << NFCT_SHORTS_FIELDLOST_SENSE_Pos) /*!< Bit mask of FIELDLOST_SENSE field. */
N#define NFCT_SHORTS_FIELDLOST_SENSE_Disabled (0UL) /*!< Disable shortcut */
N#define NFCT_SHORTS_FIELDLOST_SENSE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between FIELDDETECTED event and ACTIVATE task */
N#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos (0UL) /*!< Position of FIELDDETECTED_ACTIVATE field. */
N#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk (0x1UL << NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos) /*!< Bit mask of FIELDDETECTED_ACTIVATE field. */
N#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Disabled (0UL) /*!< Disable shortcut */
N#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: NFCT_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 20 : Enable or disable interrupt for STARTED event */
N#define NFCT_INTEN_STARTED_Pos (20UL) /*!< Position of STARTED field. */
N#define NFCT_INTEN_STARTED_Msk (0x1UL << NFCT_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define NFCT_INTEN_STARTED_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_STARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 19 : Enable or disable interrupt for SELECTED event */
N#define NFCT_INTEN_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
N#define NFCT_INTEN_SELECTED_Msk (0x1UL << NFCT_INTEN_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
N#define NFCT_INTEN_SELECTED_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_SELECTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 18 : Enable or disable interrupt for COLLISION event */
N#define NFCT_INTEN_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
N#define NFCT_INTEN_COLLISION_Msk (0x1UL << NFCT_INTEN_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
N#define NFCT_INTEN_COLLISION_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_COLLISION_Enabled (1UL) /*!< Enable */
N
N/* Bit 14 : Enable or disable interrupt for AUTOCOLRESSTARTED event */
N#define NFCT_INTEN_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
N#define NFCT_INTEN_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTEN_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
N#define NFCT_INTEN_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 12 : Enable or disable interrupt for ENDTX event */
N#define NFCT_INTEN_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
N#define NFCT_INTEN_ENDTX_Msk (0x1UL << NFCT_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define NFCT_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_ENDTX_Enabled (1UL) /*!< Enable */
N
N/* Bit 11 : Enable or disable interrupt for ENDRX event */
N#define NFCT_INTEN_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
N#define NFCT_INTEN_ENDRX_Msk (0x1UL << NFCT_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define NFCT_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_ENDRX_Enabled (1UL) /*!< Enable */
N
N/* Bit 10 : Enable or disable interrupt for RXERROR event */
N#define NFCT_INTEN_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
N#define NFCT_INTEN_RXERROR_Msk (0x1UL << NFCT_INTEN_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
N#define NFCT_INTEN_RXERROR_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_RXERROR_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable interrupt for ERROR event */
N#define NFCT_INTEN_ERROR_Pos (7UL) /*!< Position of ERROR field. */
N#define NFCT_INTEN_ERROR_Msk (0x1UL << NFCT_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define NFCT_INTEN_ERROR_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_ERROR_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable interrupt for RXFRAMEEND event */
N#define NFCT_INTEN_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
N#define NFCT_INTEN_RXFRAMEEND_Msk (0x1UL << NFCT_INTEN_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
N#define NFCT_INTEN_RXFRAMEEND_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_RXFRAMEEND_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable interrupt for RXFRAMESTART event */
N#define NFCT_INTEN_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
N#define NFCT_INTEN_RXFRAMESTART_Msk (0x1UL << NFCT_INTEN_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
N#define NFCT_INTEN_RXFRAMESTART_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_RXFRAMESTART_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for TXFRAMEEND event */
N#define NFCT_INTEN_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
N#define NFCT_INTEN_TXFRAMEEND_Msk (0x1UL << NFCT_INTEN_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
N#define NFCT_INTEN_TXFRAMEEND_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_TXFRAMEEND_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable interrupt for TXFRAMESTART event */
N#define NFCT_INTEN_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
N#define NFCT_INTEN_TXFRAMESTART_Msk (0x1UL << NFCT_INTEN_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
N#define NFCT_INTEN_TXFRAMESTART_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_TXFRAMESTART_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for FIELDLOST event */
N#define NFCT_INTEN_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
N#define NFCT_INTEN_FIELDLOST_Msk (0x1UL << NFCT_INTEN_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
N#define NFCT_INTEN_FIELDLOST_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_FIELDLOST_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for FIELDDETECTED event */
N#define NFCT_INTEN_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
N#define NFCT_INTEN_FIELDDETECTED_Msk (0x1UL << NFCT_INTEN_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
N#define NFCT_INTEN_FIELDDETECTED_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_FIELDDETECTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for READY event */
N#define NFCT_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
N#define NFCT_INTEN_READY_Msk (0x1UL << NFCT_INTEN_READY_Pos) /*!< Bit mask of READY field. */
N#define NFCT_INTEN_READY_Disabled (0UL) /*!< Disable */
N#define NFCT_INTEN_READY_Enabled (1UL) /*!< Enable */
N
N/* Register: NFCT_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 20 : Write '1' to Enable interrupt for STARTED event */
N#define NFCT_INTENSET_STARTED_Pos (20UL) /*!< Position of STARTED field. */
N#define NFCT_INTENSET_STARTED_Msk (0x1UL << NFCT_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define NFCT_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_STARTED_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for SELECTED event */
N#define NFCT_INTENSET_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
N#define NFCT_INTENSET_SELECTED_Msk (0x1UL << NFCT_INTENSET_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
N#define NFCT_INTENSET_SELECTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_SELECTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_SELECTED_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable interrupt for COLLISION event */
N#define NFCT_INTENSET_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
N#define NFCT_INTENSET_COLLISION_Msk (0x1UL << NFCT_INTENSET_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
N#define NFCT_INTENSET_COLLISION_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_COLLISION_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_COLLISION_Set (1UL) /*!< Enable */
N
N/* Bit 14 : Write '1' to Enable interrupt for AUTOCOLRESSTARTED event */
N#define NFCT_INTENSET_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
N#define NFCT_INTENSET_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
N#define NFCT_INTENSET_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_AUTOCOLRESSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 12 : Write '1' to Enable interrupt for ENDTX event */
N#define NFCT_INTENSET_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
N#define NFCT_INTENSET_ENDTX_Msk (0x1UL << NFCT_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define NFCT_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_ENDTX_Set (1UL) /*!< Enable */
N
N/* Bit 11 : Write '1' to Enable interrupt for ENDRX event */
N#define NFCT_INTENSET_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
N#define NFCT_INTENSET_ENDRX_Msk (0x1UL << NFCT_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define NFCT_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_ENDRX_Set (1UL) /*!< Enable */
N
N/* Bit 10 : Write '1' to Enable interrupt for RXERROR event */
N#define NFCT_INTENSET_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
N#define NFCT_INTENSET_RXERROR_Msk (0x1UL << NFCT_INTENSET_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
N#define NFCT_INTENSET_RXERROR_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_RXERROR_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_RXERROR_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for ERROR event */
N#define NFCT_INTENSET_ERROR_Pos (7UL) /*!< Position of ERROR field. */
N#define NFCT_INTENSET_ERROR_Msk (0x1UL << NFCT_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define NFCT_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for RXFRAMEEND event */
N#define NFCT_INTENSET_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
N#define NFCT_INTENSET_RXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
N#define NFCT_INTENSET_RXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_RXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_RXFRAMEEND_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for RXFRAMESTART event */
N#define NFCT_INTENSET_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
N#define NFCT_INTENSET_RXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
N#define NFCT_INTENSET_RXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_RXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_RXFRAMESTART_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for TXFRAMEEND event */
N#define NFCT_INTENSET_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
N#define NFCT_INTENSET_TXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
N#define NFCT_INTENSET_TXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_TXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_TXFRAMEEND_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for TXFRAMESTART event */
N#define NFCT_INTENSET_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
N#define NFCT_INTENSET_TXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
N#define NFCT_INTENSET_TXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_TXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_TXFRAMESTART_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for FIELDLOST event */
N#define NFCT_INTENSET_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
N#define NFCT_INTENSET_FIELDLOST_Msk (0x1UL << NFCT_INTENSET_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
N#define NFCT_INTENSET_FIELDLOST_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_FIELDLOST_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_FIELDLOST_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for FIELDDETECTED event */
N#define NFCT_INTENSET_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
N#define NFCT_INTENSET_FIELDDETECTED_Msk (0x1UL << NFCT_INTENSET_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
N#define NFCT_INTENSET_FIELDDETECTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_FIELDDETECTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_FIELDDETECTED_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for READY event */
N#define NFCT_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
N#define NFCT_INTENSET_READY_Msk (0x1UL << NFCT_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
N#define NFCT_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENSET_READY_Set (1UL) /*!< Enable */
N
N/* Register: NFCT_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 20 : Write '1' to Disable interrupt for STARTED event */
N#define NFCT_INTENCLR_STARTED_Pos (20UL) /*!< Position of STARTED field. */
N#define NFCT_INTENCLR_STARTED_Msk (0x1UL << NFCT_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define NFCT_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_STARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for SELECTED event */
N#define NFCT_INTENCLR_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
N#define NFCT_INTENCLR_SELECTED_Msk (0x1UL << NFCT_INTENCLR_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
N#define NFCT_INTENCLR_SELECTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_SELECTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_SELECTED_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable interrupt for COLLISION event */
N#define NFCT_INTENCLR_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
N#define NFCT_INTENCLR_COLLISION_Msk (0x1UL << NFCT_INTENCLR_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
N#define NFCT_INTENCLR_COLLISION_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_COLLISION_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_COLLISION_Clear (1UL) /*!< Disable */
N
N/* Bit 14 : Write '1' to Disable interrupt for AUTOCOLRESSTARTED event */
N#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
N#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
N#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 12 : Write '1' to Disable interrupt for ENDTX event */
N#define NFCT_INTENCLR_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
N#define NFCT_INTENCLR_ENDTX_Msk (0x1UL << NFCT_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define NFCT_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */
N
N/* Bit 11 : Write '1' to Disable interrupt for ENDRX event */
N#define NFCT_INTENCLR_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
N#define NFCT_INTENCLR_ENDRX_Msk (0x1UL << NFCT_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define NFCT_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */
N
N/* Bit 10 : Write '1' to Disable interrupt for RXERROR event */
N#define NFCT_INTENCLR_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
N#define NFCT_INTENCLR_RXERROR_Msk (0x1UL << NFCT_INTENCLR_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
N#define NFCT_INTENCLR_RXERROR_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_RXERROR_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_RXERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for ERROR event */
N#define NFCT_INTENCLR_ERROR_Pos (7UL) /*!< Position of ERROR field. */
N#define NFCT_INTENCLR_ERROR_Msk (0x1UL << NFCT_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define NFCT_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for RXFRAMEEND event */
N#define NFCT_INTENCLR_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
N#define NFCT_INTENCLR_RXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
N#define NFCT_INTENCLR_RXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_RXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_RXFRAMEEND_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for RXFRAMESTART event */
N#define NFCT_INTENCLR_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
N#define NFCT_INTENCLR_RXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
N#define NFCT_INTENCLR_RXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_RXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_RXFRAMESTART_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for TXFRAMEEND event */
N#define NFCT_INTENCLR_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
N#define NFCT_INTENCLR_TXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
N#define NFCT_INTENCLR_TXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_TXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_TXFRAMEEND_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for TXFRAMESTART event */
N#define NFCT_INTENCLR_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
N#define NFCT_INTENCLR_TXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
N#define NFCT_INTENCLR_TXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_TXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_TXFRAMESTART_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for FIELDLOST event */
N#define NFCT_INTENCLR_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
N#define NFCT_INTENCLR_FIELDLOST_Msk (0x1UL << NFCT_INTENCLR_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
N#define NFCT_INTENCLR_FIELDLOST_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_FIELDLOST_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_FIELDLOST_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for FIELDDETECTED event */
N#define NFCT_INTENCLR_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
N#define NFCT_INTENCLR_FIELDDETECTED_Msk (0x1UL << NFCT_INTENCLR_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
N#define NFCT_INTENCLR_FIELDDETECTED_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_FIELDDETECTED_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_FIELDDETECTED_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for READY event */
N#define NFCT_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
N#define NFCT_INTENCLR_READY_Msk (0x1UL << NFCT_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
N#define NFCT_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
N#define NFCT_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
N#define NFCT_INTENCLR_READY_Clear (1UL) /*!< Disable */
N
N/* Register: NFCT_ERRORSTATUS */
N/* Description: NFC Error Status register */
N
N/* Bit 3 : Field level is too low at min load resistance */
N#define NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Pos (3UL) /*!< Position of NFCFIELDTOOWEAK field. */
N#define NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Msk (0x1UL << NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Pos) /*!< Bit mask of NFCFIELDTOOWEAK field. */
N
N/* Bit 2 : Field level is too high at max load resistance */
N#define NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Pos (2UL) /*!< Position of NFCFIELDTOOSTRONG field. */
N#define NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Msk (0x1UL << NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Pos) /*!< Bit mask of NFCFIELDTOOSTRONG field. */
N
N/* Bit 0 : No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX */
N#define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos (0UL) /*!< Position of FRAMEDELAYTIMEOUT field. */
N#define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk (0x1UL << NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos) /*!< Bit mask of FRAMEDELAYTIMEOUT field. */
N
N/* Register: NFCT_FRAMESTATUS_RX */
N/* Description: Result of last incoming frames */
N
N/* Bit 3 : Overrun detected */
N#define NFCT_FRAMESTATUS_RX_OVERRUN_Pos (3UL) /*!< Position of OVERRUN field. */
N#define NFCT_FRAMESTATUS_RX_OVERRUN_Msk (0x1UL << NFCT_FRAMESTATUS_RX_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
N#define NFCT_FRAMESTATUS_RX_OVERRUN_NoOverrun (0UL) /*!< No overrun detected */
N#define NFCT_FRAMESTATUS_RX_OVERRUN_Overrun (1UL) /*!< Overrun error */
N
N/* Bit 2 : Parity status of received frame */
N#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos (2UL) /*!< Position of PARITYSTATUS field. */
N#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk (0x1UL << NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos) /*!< Bit mask of PARITYSTATUS field. */
N#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityOK (0UL) /*!< Frame received with parity OK */
N#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityError (1UL) /*!< Frame received with parity error */
N
N/* Bit 0 : No valid End of Frame detected */
N#define NFCT_FRAMESTATUS_RX_CRCERROR_Pos (0UL) /*!< Position of CRCERROR field. */
N#define NFCT_FRAMESTATUS_RX_CRCERROR_Msk (0x1UL << NFCT_FRAMESTATUS_RX_CRCERROR_Pos) /*!< Bit mask of CRCERROR field. */
N#define NFCT_FRAMESTATUS_RX_CRCERROR_CRCCorrect (0UL) /*!< Valid CRC detected */
N#define NFCT_FRAMESTATUS_RX_CRCERROR_CRCError (1UL) /*!< CRC received does not match local check */
N
N/* Register: NFCT_CURRENTLOADCTRL */
N/* Description: Current value driven to the NFC Load Control */
N
N/* Bits 5..0 : Current value driven to the NFC Load Control */
N#define NFCT_CURRENTLOADCTRL_CURRENTLOADCTRL_Pos (0UL) /*!< Position of CURRENTLOADCTRL field. */
N#define NFCT_CURRENTLOADCTRL_CURRENTLOADCTRL_Msk (0x3FUL << NFCT_CURRENTLOADCTRL_CURRENTLOADCTRL_Pos) /*!< Bit mask of CURRENTLOADCTRL field. */
N
N/* Register: NFCT_FIELDPRESENT */
N/* Description: Indicates the presence or not of a valid field */
N
N/* Bit 1 : Indicates if the low level has locked to the field */
N#define NFCT_FIELDPRESENT_LOCKDETECT_Pos (1UL) /*!< Position of LOCKDETECT field. */
N#define NFCT_FIELDPRESENT_LOCKDETECT_Msk (0x1UL << NFCT_FIELDPRESENT_LOCKDETECT_Pos) /*!< Bit mask of LOCKDETECT field. */
N#define NFCT_FIELDPRESENT_LOCKDETECT_NotLocked (0UL) /*!< Not locked to field */
N#define NFCT_FIELDPRESENT_LOCKDETECT_Locked (1UL) /*!< Locked to field */
N
N/* Bit 0 : Indicates the presence or not of a valid field. Available only in the activated state. */
N#define NFCT_FIELDPRESENT_FIELDPRESENT_Pos (0UL) /*!< Position of FIELDPRESENT field. */
N#define NFCT_FIELDPRESENT_FIELDPRESENT_Msk (0x1UL << NFCT_FIELDPRESENT_FIELDPRESENT_Pos) /*!< Bit mask of FIELDPRESENT field. */
N#define NFCT_FIELDPRESENT_FIELDPRESENT_NoField (0UL) /*!< No valid field detected */
N#define NFCT_FIELDPRESENT_FIELDPRESENT_FieldPresent (1UL) /*!< Valid field detected */
N
N/* Register: NFCT_FRAMEDELAYMIN */
N/* Description: Minimum frame delay */
N
N/* Bits 15..0 : Minimum frame delay in number of 13.56 MHz clocks */
N#define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos (0UL) /*!< Position of FRAMEDELAYMIN field. */
N#define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk (0xFFFFUL << NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos) /*!< Bit mask of FRAMEDELAYMIN field. */
N
N/* Register: NFCT_FRAMEDELAYMAX */
N/* Description: Maximum frame delay */
N
N/* Bits 15..0 : Maximum frame delay in number of 13.56 MHz clocks */
N#define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos (0UL) /*!< Position of FRAMEDELAYMAX field. */
N#define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk (0xFFFFUL << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos) /*!< Bit mask of FRAMEDELAYMAX field. */
N
N/* Register: NFCT_FRAMEDELAYMODE */
N/* Description: Configuration register for the Frame Delay Timer */
N
N/* Bits 1..0 : Configuration register for the Frame Delay Timer */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos (0UL) /*!< Position of FRAMEDELAYMODE field. */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk (0x3UL << NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos) /*!< Bit mask of FRAMEDELAYMODE field. */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun (0UL) /*!< Transmission is independent of frame timer and will start when the STARTTX task is triggered. No timeout. */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window (1UL) /*!< Frame is transmitted between FRAMEDELAYMIN and FRAMEDELAYMAX */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal (2UL) /*!< Frame is transmitted exactly at FRAMEDELAYMAX */
N#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid (3UL) /*!< Frame is transmitted on a bit grid between FRAMEDELAYMIN and FRAMEDELAYMAX */
N
N/* Register: NFCT_PACKETPTR */
N/* Description: Packet pointer for TXD and RXD data storage in Data RAM */
N
N/* Bits 31..0 : Packet pointer for TXD and RXD data storage in Data RAM. This address is a byte aligned RAM address. */
N#define NFCT_PACKETPTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define NFCT_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << NFCT_PACKETPTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: NFCT_MAXLEN */
N/* Description: Size of allocated for TXD and RXD data storage buffer in Data RAM */
N
N/* Bits 8..0 : Size of allocated for TXD and RXD data storage buffer in Data RAM */
N#define NFCT_MAXLEN_MAXLEN_Pos (0UL) /*!< Position of MAXLEN field. */
N#define NFCT_MAXLEN_MAXLEN_Msk (0x1FFUL << NFCT_MAXLEN_MAXLEN_Pos) /*!< Bit mask of MAXLEN field. */
N
N/* Register: NFCT_TXD_FRAMECONFIG */
N/* Description: Configuration of outgoing frames */
N
N/* Bit 4 : CRC mode for outgoing frames */
N#define NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos (4UL) /*!< Position of CRCMODETX field. */
N#define NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos) /*!< Bit mask of CRCMODETX field. */
N#define NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX (0UL) /*!< CRC is not added to the frame */
N#define NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX (1UL) /*!< 16 bit CRC added to the frame based on all the data read from RAM that is used in the frame */
N
N/* Bit 2 : Adding SoF or not in TX frames */
N#define NFCT_TXD_FRAMECONFIG_SOF_Pos (2UL) /*!< Position of SOF field. */
N#define NFCT_TXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_SOF_Pos) /*!< Bit mask of SOF field. */
N#define NFCT_TXD_FRAMECONFIG_SOF_NoSoF (0UL) /*!< Start of Frame symbol not added */
N#define NFCT_TXD_FRAMECONFIG_SOF_SoF (1UL) /*!< Start of Frame symbol added */
N
N/* Bit 1 : Discarding unused bits in start or at end of a Frame */
N#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos (1UL) /*!< Position of DISCARDMODE field. */
N#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos) /*!< Bit mask of DISCARDMODE field. */
N#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd (0UL) /*!< Unused bits is discarded at end of frame */
N#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart (1UL) /*!< Unused bits is discarded at start of frame */
N
N/* Bit 0 : Adding parity or not in the frame */
N#define NFCT_TXD_FRAMECONFIG_PARITY_Pos (0UL) /*!< Position of PARITY field. */
N#define NFCT_TXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define NFCT_TXD_FRAMECONFIG_PARITY_NoParity (0UL) /*!< Parity is not added in TX frames */
N#define NFCT_TXD_FRAMECONFIG_PARITY_Parity (1UL) /*!< Parity is added TX frames */
N
N/* Register: NFCT_TXD_AMOUNT */
N/* Description: Size of outgoing frame */
N
N/* Bits 11..3 : Number of complete bytes that shall be included in the frame, excluding CRC, parity and framing */
N#define NFCT_TXD_AMOUNT_TXDATABYTES_Pos (3UL) /*!< Position of TXDATABYTES field. */
N#define NFCT_TXD_AMOUNT_TXDATABYTES_Msk (0x1FFUL << NFCT_TXD_AMOUNT_TXDATABYTES_Pos) /*!< Bit mask of TXDATABYTES field. */
N
N/* Bits 2..0 : Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding parity bit). */
N#define NFCT_TXD_AMOUNT_TXDATABITS_Pos (0UL) /*!< Position of TXDATABITS field. */
N#define NFCT_TXD_AMOUNT_TXDATABITS_Msk (0x7UL << NFCT_TXD_AMOUNT_TXDATABITS_Pos) /*!< Bit mask of TXDATABITS field. */
N
N/* Register: NFCT_RXD_FRAMECONFIG */
N/* Description: Configuration of incoming frames */
N
N/* Bit 4 : CRC mode for incoming frames */
N#define NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos (4UL) /*!< Position of CRCMODERX field. */
N#define NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos) /*!< Bit mask of CRCMODERX field. */
N#define NFCT_RXD_FRAMECONFIG_CRCMODERX_NoCRCRX (0UL) /*!< CRC is not expected in RX frames */
N#define NFCT_RXD_FRAMECONFIG_CRCMODERX_CRC16RX (1UL) /*!< Last 16 bits in RX frame is CRC, CRC is checked and CRCSTATUS updated */
N
N/* Bit 2 : SoF expected or not in RX frames */
N#define NFCT_RXD_FRAMECONFIG_SOF_Pos (2UL) /*!< Position of SOF field. */
N#define NFCT_RXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_SOF_Pos) /*!< Bit mask of SOF field. */
N#define NFCT_RXD_FRAMECONFIG_SOF_NoSoF (0UL) /*!< Start of Frame symbol is not expected in RX frames */
N#define NFCT_RXD_FRAMECONFIG_SOF_SoF (1UL) /*!< Start of Frame symbol is expected in RX frames */
N
N/* Bit 0 : Parity expected or not in RX frame */
N#define NFCT_RXD_FRAMECONFIG_PARITY_Pos (0UL) /*!< Position of PARITY field. */
N#define NFCT_RXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define NFCT_RXD_FRAMECONFIG_PARITY_NoParity (0UL) /*!< Parity is not expected in RX frames */
N#define NFCT_RXD_FRAMECONFIG_PARITY_Parity (1UL) /*!< Parity is expected in RX frames */
N
N/* Register: NFCT_RXD_AMOUNT */
N/* Description: Size of last incoming frame */
N
N/* Bits 11..3 : Number of complete bytes received in the frame (including CRC, but excluding parity and SoF/EoF framing) */
N#define NFCT_RXD_AMOUNT_RXDATABYTES_Pos (3UL) /*!< Position of RXDATABYTES field. */
N#define NFCT_RXD_AMOUNT_RXDATABYTES_Msk (0x1FFUL << NFCT_RXD_AMOUNT_RXDATABYTES_Pos) /*!< Bit mask of RXDATABYTES field. */
N
N/* Bits 2..0 : Number of bits in the last byte in the frame, if less than 8 (including CRC, but excluding parity and SoF/EoF framing). */
N#define NFCT_RXD_AMOUNT_RXDATABITS_Pos (0UL) /*!< Position of RXDATABITS field. */
N#define NFCT_RXD_AMOUNT_RXDATABITS_Msk (0x7UL << NFCT_RXD_AMOUNT_RXDATABITS_Pos) /*!< Bit mask of RXDATABITS field. */
N
N/* Register: NFCT_NFCID1_LAST */
N/* Description: Last NFCID1 part (4, 7 or 10 bytes ID) */
N
N/* Bits 31..24 : NFCID1 byte W */
N#define NFCT_NFCID1_LAST_NFCID1_W_Pos (24UL) /*!< Position of NFCID1_W field. */
N#define NFCT_NFCID1_LAST_NFCID1_W_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_W_Pos) /*!< Bit mask of NFCID1_W field. */
N
N/* Bits 23..16 : NFCID1 byte X */
N#define NFCT_NFCID1_LAST_NFCID1_X_Pos (16UL) /*!< Position of NFCID1_X field. */
N#define NFCT_NFCID1_LAST_NFCID1_X_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_X_Pos) /*!< Bit mask of NFCID1_X field. */
N
N/* Bits 15..8 : NFCID1 byte Y */
N#define NFCT_NFCID1_LAST_NFCID1_Y_Pos (8UL) /*!< Position of NFCID1_Y field. */
N#define NFCT_NFCID1_LAST_NFCID1_Y_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_Y_Pos) /*!< Bit mask of NFCID1_Y field. */
N
N/* Bits 7..0 : NFCID1 byte Z (very last byte sent) */
N#define NFCT_NFCID1_LAST_NFCID1_Z_Pos (0UL) /*!< Position of NFCID1_Z field. */
N#define NFCT_NFCID1_LAST_NFCID1_Z_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_Z_Pos) /*!< Bit mask of NFCID1_Z field. */
N
N/* Register: NFCT_NFCID1_2ND_LAST */
N/* Description: Second last NFCID1 part (7 or 10 bytes ID) */
N
N/* Bits 23..16 : NFCID1 byte T */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos (16UL) /*!< Position of NFCID1_T field. */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_T_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos) /*!< Bit mask of NFCID1_T field. */
N
N/* Bits 15..8 : NFCID1 byte U */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos (8UL) /*!< Position of NFCID1_U field. */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_U_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos) /*!< Bit mask of NFCID1_U field. */
N
N/* Bits 7..0 : NFCID1 byte V */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos (0UL) /*!< Position of NFCID1_V field. */
N#define NFCT_NFCID1_2ND_LAST_NFCID1_V_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos) /*!< Bit mask of NFCID1_V field. */
N
N/* Register: NFCT_NFCID1_3RD_LAST */
N/* Description: Third last NFCID1 part (10 bytes ID) */
N
N/* Bits 23..16 : NFCID1 byte Q */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos (16UL) /*!< Position of NFCID1_Q field. */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_Q_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos) /*!< Bit mask of NFCID1_Q field. */
N
N/* Bits 15..8 : NFCID1 byte R */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos (8UL) /*!< Position of NFCID1_R field. */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_R_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos) /*!< Bit mask of NFCID1_R field. */
N
N/* Bits 7..0 : NFCID1 byte S */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos (0UL) /*!< Position of NFCID1_S field. */
N#define NFCT_NFCID1_3RD_LAST_NFCID1_S_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos) /*!< Bit mask of NFCID1_S field. */
N
N/* Register: NFCT_SENSRES */
N/* Description: NFC-A SENS_RES auto-response settings */
N
N/* Bits 15..12 : Reserved for future use. Shall be 0. */
N#define NFCT_SENSRES_RFU74_Pos (12UL) /*!< Position of RFU74 field. */
N#define NFCT_SENSRES_RFU74_Msk (0xFUL << NFCT_SENSRES_RFU74_Pos) /*!< Bit mask of RFU74 field. */
N
N/* Bits 11..8 : Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
N#define NFCT_SENSRES_PLATFCONFIG_Pos (8UL) /*!< Position of PLATFCONFIG field. */
N#define NFCT_SENSRES_PLATFCONFIG_Msk (0xFUL << NFCT_SENSRES_PLATFCONFIG_Pos) /*!< Bit mask of PLATFCONFIG field. */
N
N/* Bits 7..6 : NFCID1 size. This value is used by the Auto collision resolution engine. */
N#define NFCT_SENSRES_NFCIDSIZE_Pos (6UL) /*!< Position of NFCIDSIZE field. */
N#define NFCT_SENSRES_NFCIDSIZE_Msk (0x3UL << NFCT_SENSRES_NFCIDSIZE_Pos) /*!< Bit mask of NFCIDSIZE field. */
N#define NFCT_SENSRES_NFCIDSIZE_NFCID1Single (0UL) /*!< NFCID1 size: single (4 bytes) */
N#define NFCT_SENSRES_NFCIDSIZE_NFCID1Double (1UL) /*!< NFCID1 size: double (7 bytes) */
N#define NFCT_SENSRES_NFCIDSIZE_NFCID1Triple (2UL) /*!< NFCID1 size: triple (10 bytes) */
N
N/* Bit 5 : Reserved for future use. Shall be 0. */
N#define NFCT_SENSRES_RFU5_Pos (5UL) /*!< Position of RFU5 field. */
N#define NFCT_SENSRES_RFU5_Msk (0x1UL << NFCT_SENSRES_RFU5_Pos) /*!< Bit mask of RFU5 field. */
N
N/* Bits 4..0 : Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
N#define NFCT_SENSRES_BITFRAMESDD_Pos (0UL) /*!< Position of BITFRAMESDD field. */
N#define NFCT_SENSRES_BITFRAMESDD_Msk (0x1FUL << NFCT_SENSRES_BITFRAMESDD_Pos) /*!< Bit mask of BITFRAMESDD field. */
N#define NFCT_SENSRES_BITFRAMESDD_SDD00000 (0UL) /*!< SDD pattern 00000 */
N#define NFCT_SENSRES_BITFRAMESDD_SDD00001 (1UL) /*!< SDD pattern 00001 */
N#define NFCT_SENSRES_BITFRAMESDD_SDD00010 (2UL) /*!< SDD pattern 00010 */
N#define NFCT_SENSRES_BITFRAMESDD_SDD00100 (4UL) /*!< SDD pattern 00100 */
N#define NFCT_SENSRES_BITFRAMESDD_SDD01000 (8UL) /*!< SDD pattern 01000 */
N#define NFCT_SENSRES_BITFRAMESDD_SDD10000 (16UL) /*!< SDD pattern 10000 */
N
N/* Register: NFCT_SELRES */
N/* Description: NFC-A SEL_RES auto-response settings */
N
N/* Bit 7 : Reserved for future use. Shall be 0. */
N#define NFCT_SELRES_RFU7_Pos (7UL) /*!< Position of RFU7 field. */
N#define NFCT_SELRES_RFU7_Msk (0x1UL << NFCT_SELRES_RFU7_Pos) /*!< Bit mask of RFU7 field. */
N
N/* Bits 6..5 : Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
N#define NFCT_SELRES_PROTOCOL_Pos (5UL) /*!< Position of PROTOCOL field. */
N#define NFCT_SELRES_PROTOCOL_Msk (0x3UL << NFCT_SELRES_PROTOCOL_Pos) /*!< Bit mask of PROTOCOL field. */
N
N/* Bits 4..3 : Reserved for future use. Shall be 0. */
N#define NFCT_SELRES_RFU43_Pos (3UL) /*!< Position of RFU43 field. */
N#define NFCT_SELRES_RFU43_Msk (0x3UL << NFCT_SELRES_RFU43_Pos) /*!< Bit mask of RFU43 field. */
N
N/* Bit 2 : Cascade bit (controlled by hardware, write has no effect) */
N#define NFCT_SELRES_CASCADE_Pos (2UL) /*!< Position of CASCADE field. */
N#define NFCT_SELRES_CASCADE_Msk (0x1UL << NFCT_SELRES_CASCADE_Pos) /*!< Bit mask of CASCADE field. */
N#define NFCT_SELRES_CASCADE_Complete (0UL) /*!< NFCID1 complete */
N#define NFCT_SELRES_CASCADE_NotComplete (1UL) /*!< NFCID1 not complete */
N
N/* Bits 1..0 : Reserved for future use. Shall be 0. */
N#define NFCT_SELRES_RFU10_Pos (0UL) /*!< Position of RFU10 field. */
N#define NFCT_SELRES_RFU10_Msk (0x3UL << NFCT_SELRES_RFU10_Pos) /*!< Bit mask of RFU10 field. */
N
N
N/* Peripheral: NVMC */
N/* Description: Non Volatile Memory Controller */
N
N/* Register: NVMC_READY */
N/* Description: Ready flag */
N
N/* Bit 0 : NVMC is ready or busy */
N#define NVMC_READY_READY_Pos (0UL) /*!< Position of READY field. */
N#define NVMC_READY_READY_Msk (0x1UL << NVMC_READY_READY_Pos) /*!< Bit mask of READY field. */
N#define NVMC_READY_READY_Busy (0UL) /*!< NVMC is busy (on-going write or erase operation) */
N#define NVMC_READY_READY_Ready (1UL) /*!< NVMC is ready */
N
N/* Register: NVMC_CONFIG */
N/* Description: Configuration register */
N
N/* Bits 1..0 : Program memory access mode. It is strongly recommended to only activate erase and write modes when they are actively used. Enabling write or erase will invalidate the cache and keep it invalidated. */
N#define NVMC_CONFIG_WEN_Pos (0UL) /*!< Position of WEN field. */
N#define NVMC_CONFIG_WEN_Msk (0x3UL << NVMC_CONFIG_WEN_Pos) /*!< Bit mask of WEN field. */
N#define NVMC_CONFIG_WEN_Ren (0UL) /*!< Read only access */
N#define NVMC_CONFIG_WEN_Wen (1UL) /*!< Write Enabled */
N#define NVMC_CONFIG_WEN_Een (2UL) /*!< Erase enabled */
N
N/* Register: NVMC_ERASEPAGE */
N/* Description: Register for erasing a page in Code area */
N
N/* Bits 31..0 : Register for starting erase of a page in Code area */
N#define NVMC_ERASEPAGE_ERASEPAGE_Pos (0UL) /*!< Position of ERASEPAGE field. */
N#define NVMC_ERASEPAGE_ERASEPAGE_Msk (0xFFFFFFFFUL << NVMC_ERASEPAGE_ERASEPAGE_Pos) /*!< Bit mask of ERASEPAGE field. */
N
N/* Register: NVMC_ERASEPCR1 */
N/* Description: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE. */
N
N/* Bits 31..0 : Register for erasing a page in Code area. Equivalent to ERASEPAGE. */
N#define NVMC_ERASEPCR1_ERASEPCR1_Pos (0UL) /*!< Position of ERASEPCR1 field. */
N#define NVMC_ERASEPCR1_ERASEPCR1_Msk (0xFFFFFFFFUL << NVMC_ERASEPCR1_ERASEPCR1_Pos) /*!< Bit mask of ERASEPCR1 field. */
N
N/* Register: NVMC_ERASEALL */
N/* Description: Register for erasing all non-volatile user memory */
N
N/* Bit 0 : Erase all non-volatile memory including UICR registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased. */
N#define NVMC_ERASEALL_ERASEALL_Pos (0UL) /*!< Position of ERASEALL field. */
N#define NVMC_ERASEALL_ERASEALL_Msk (0x1UL << NVMC_ERASEALL_ERASEALL_Pos) /*!< Bit mask of ERASEALL field. */
N#define NVMC_ERASEALL_ERASEALL_NoOperation (0UL) /*!< No operation */
N#define NVMC_ERASEALL_ERASEALL_Erase (1UL) /*!< Start chip erase */
N
N/* Register: NVMC_ERASEPCR0 */
N/* Description: Deprecated register -  Register for erasing a page in Code area. Equivalent to ERASEPAGE. */
N
N/* Bits 31..0 : Register for starting erase of a page in Code area. Equivalent to ERASEPAGE. */
N#define NVMC_ERASEPCR0_ERASEPCR0_Pos (0UL) /*!< Position of ERASEPCR0 field. */
N#define NVMC_ERASEPCR0_ERASEPCR0_Msk (0xFFFFFFFFUL << NVMC_ERASEPCR0_ERASEPCR0_Pos) /*!< Bit mask of ERASEPCR0 field. */
N
N/* Register: NVMC_ERASEUICR */
N/* Description: Register for erasing User Information Configuration Registers */
N
N/* Bit 0 : Register starting erase of all User Information Configuration Registers. Note that code erase has to be enabled by CONFIG.EEN before the UICR can be erased. */
N#define NVMC_ERASEUICR_ERASEUICR_Pos (0UL) /*!< Position of ERASEUICR field. */
N#define NVMC_ERASEUICR_ERASEUICR_Msk (0x1UL << NVMC_ERASEUICR_ERASEUICR_Pos) /*!< Bit mask of ERASEUICR field. */
N#define NVMC_ERASEUICR_ERASEUICR_NoOperation (0UL) /*!< No operation */
N#define NVMC_ERASEUICR_ERASEUICR_Erase (1UL) /*!< Start erase of UICR */
N
N/* Register: NVMC_ICACHECNF */
N/* Description: I-Code cache configuration register. */
N
N/* Bit 8 : Cache profiling enable */
N#define NVMC_ICACHECNF_CACHEPROFEN_Pos (8UL) /*!< Position of CACHEPROFEN field. */
N#define NVMC_ICACHECNF_CACHEPROFEN_Msk (0x1UL << NVMC_ICACHECNF_CACHEPROFEN_Pos) /*!< Bit mask of CACHEPROFEN field. */
N#define NVMC_ICACHECNF_CACHEPROFEN_Disabled (0UL) /*!< Disable cache profiling */
N#define NVMC_ICACHECNF_CACHEPROFEN_Enabled (1UL) /*!< Enable cache profiling */
N
N/* Bit 0 : Cache enable */
N#define NVMC_ICACHECNF_CACHEEN_Pos (0UL) /*!< Position of CACHEEN field. */
N#define NVMC_ICACHECNF_CACHEEN_Msk (0x1UL << NVMC_ICACHECNF_CACHEEN_Pos) /*!< Bit mask of CACHEEN field. */
N#define NVMC_ICACHECNF_CACHEEN_Disabled (0UL) /*!< Disable cache. Invalidates all cache entries. */
N#define NVMC_ICACHECNF_CACHEEN_Enabled (1UL) /*!< Enable cache */
N
N/* Register: NVMC_IHIT */
N/* Description: I-Code cache hit counter. */
N
N/* Bits 31..0 : Number of cache hits */
N#define NVMC_IHIT_HITS_Pos (0UL) /*!< Position of HITS field. */
N#define NVMC_IHIT_HITS_Msk (0xFFFFFFFFUL << NVMC_IHIT_HITS_Pos) /*!< Bit mask of HITS field. */
N
N/* Register: NVMC_IMISS */
N/* Description: I-Code cache miss counter. */
N
N/* Bits 31..0 : Number of cache misses */
N#define NVMC_IMISS_MISSES_Pos (0UL) /*!< Position of MISSES field. */
N#define NVMC_IMISS_MISSES_Msk (0xFFFFFFFFUL << NVMC_IMISS_MISSES_Pos) /*!< Bit mask of MISSES field. */
N
N
N/* Peripheral: GPIO */
N/* Description: GPIO Port 1 */
N
N/* Register: GPIO_OUT */
N/* Description: Write GPIO port */
N
N/* Bit 31 : Pin 31 */
N#define GPIO_OUT_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_OUT_PIN31_Msk (0x1UL << GPIO_OUT_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_OUT_PIN31_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN31_High (1UL) /*!< Pin driver is high */
N
N/* Bit 30 : Pin 30 */
N#define GPIO_OUT_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_OUT_PIN30_Msk (0x1UL << GPIO_OUT_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_OUT_PIN30_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN30_High (1UL) /*!< Pin driver is high */
N
N/* Bit 29 : Pin 29 */
N#define GPIO_OUT_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_OUT_PIN29_Msk (0x1UL << GPIO_OUT_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_OUT_PIN29_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN29_High (1UL) /*!< Pin driver is high */
N
N/* Bit 28 : Pin 28 */
N#define GPIO_OUT_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_OUT_PIN28_Msk (0x1UL << GPIO_OUT_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_OUT_PIN28_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN28_High (1UL) /*!< Pin driver is high */
N
N/* Bit 27 : Pin 27 */
N#define GPIO_OUT_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_OUT_PIN27_Msk (0x1UL << GPIO_OUT_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_OUT_PIN27_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN27_High (1UL) /*!< Pin driver is high */
N
N/* Bit 26 : Pin 26 */
N#define GPIO_OUT_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_OUT_PIN26_Msk (0x1UL << GPIO_OUT_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_OUT_PIN26_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN26_High (1UL) /*!< Pin driver is high */
N
N/* Bit 25 : Pin 25 */
N#define GPIO_OUT_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_OUT_PIN25_Msk (0x1UL << GPIO_OUT_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_OUT_PIN25_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN25_High (1UL) /*!< Pin driver is high */
N
N/* Bit 24 : Pin 24 */
N#define GPIO_OUT_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_OUT_PIN24_Msk (0x1UL << GPIO_OUT_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_OUT_PIN24_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN24_High (1UL) /*!< Pin driver is high */
N
N/* Bit 23 : Pin 23 */
N#define GPIO_OUT_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_OUT_PIN23_Msk (0x1UL << GPIO_OUT_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_OUT_PIN23_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN23_High (1UL) /*!< Pin driver is high */
N
N/* Bit 22 : Pin 22 */
N#define GPIO_OUT_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_OUT_PIN22_Msk (0x1UL << GPIO_OUT_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_OUT_PIN22_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN22_High (1UL) /*!< Pin driver is high */
N
N/* Bit 21 : Pin 21 */
N#define GPIO_OUT_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_OUT_PIN21_Msk (0x1UL << GPIO_OUT_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_OUT_PIN21_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN21_High (1UL) /*!< Pin driver is high */
N
N/* Bit 20 : Pin 20 */
N#define GPIO_OUT_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_OUT_PIN20_Msk (0x1UL << GPIO_OUT_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_OUT_PIN20_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN20_High (1UL) /*!< Pin driver is high */
N
N/* Bit 19 : Pin 19 */
N#define GPIO_OUT_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_OUT_PIN19_Msk (0x1UL << GPIO_OUT_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_OUT_PIN19_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN19_High (1UL) /*!< Pin driver is high */
N
N/* Bit 18 : Pin 18 */
N#define GPIO_OUT_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_OUT_PIN18_Msk (0x1UL << GPIO_OUT_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_OUT_PIN18_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN18_High (1UL) /*!< Pin driver is high */
N
N/* Bit 17 : Pin 17 */
N#define GPIO_OUT_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_OUT_PIN17_Msk (0x1UL << GPIO_OUT_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_OUT_PIN17_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN17_High (1UL) /*!< Pin driver is high */
N
N/* Bit 16 : Pin 16 */
N#define GPIO_OUT_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_OUT_PIN16_Msk (0x1UL << GPIO_OUT_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_OUT_PIN16_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN16_High (1UL) /*!< Pin driver is high */
N
N/* Bit 15 : Pin 15 */
N#define GPIO_OUT_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_OUT_PIN15_Msk (0x1UL << GPIO_OUT_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_OUT_PIN15_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN15_High (1UL) /*!< Pin driver is high */
N
N/* Bit 14 : Pin 14 */
N#define GPIO_OUT_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_OUT_PIN14_Msk (0x1UL << GPIO_OUT_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_OUT_PIN14_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN14_High (1UL) /*!< Pin driver is high */
N
N/* Bit 13 : Pin 13 */
N#define GPIO_OUT_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_OUT_PIN13_Msk (0x1UL << GPIO_OUT_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_OUT_PIN13_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN13_High (1UL) /*!< Pin driver is high */
N
N/* Bit 12 : Pin 12 */
N#define GPIO_OUT_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_OUT_PIN12_Msk (0x1UL << GPIO_OUT_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_OUT_PIN12_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN12_High (1UL) /*!< Pin driver is high */
N
N/* Bit 11 : Pin 11 */
N#define GPIO_OUT_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_OUT_PIN11_Msk (0x1UL << GPIO_OUT_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_OUT_PIN11_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN11_High (1UL) /*!< Pin driver is high */
N
N/* Bit 10 : Pin 10 */
N#define GPIO_OUT_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_OUT_PIN10_Msk (0x1UL << GPIO_OUT_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_OUT_PIN10_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN10_High (1UL) /*!< Pin driver is high */
N
N/* Bit 9 : Pin 9 */
N#define GPIO_OUT_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_OUT_PIN9_Msk (0x1UL << GPIO_OUT_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_OUT_PIN9_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN9_High (1UL) /*!< Pin driver is high */
N
N/* Bit 8 : Pin 8 */
N#define GPIO_OUT_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_OUT_PIN8_Msk (0x1UL << GPIO_OUT_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_OUT_PIN8_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN8_High (1UL) /*!< Pin driver is high */
N
N/* Bit 7 : Pin 7 */
N#define GPIO_OUT_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_OUT_PIN7_Msk (0x1UL << GPIO_OUT_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_OUT_PIN7_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN7_High (1UL) /*!< Pin driver is high */
N
N/* Bit 6 : Pin 6 */
N#define GPIO_OUT_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_OUT_PIN6_Msk (0x1UL << GPIO_OUT_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_OUT_PIN6_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN6_High (1UL) /*!< Pin driver is high */
N
N/* Bit 5 : Pin 5 */
N#define GPIO_OUT_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_OUT_PIN5_Msk (0x1UL << GPIO_OUT_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_OUT_PIN5_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN5_High (1UL) /*!< Pin driver is high */
N
N/* Bit 4 : Pin 4 */
N#define GPIO_OUT_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_OUT_PIN4_Msk (0x1UL << GPIO_OUT_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_OUT_PIN4_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN4_High (1UL) /*!< Pin driver is high */
N
N/* Bit 3 : Pin 3 */
N#define GPIO_OUT_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_OUT_PIN3_Msk (0x1UL << GPIO_OUT_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_OUT_PIN3_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN3_High (1UL) /*!< Pin driver is high */
N
N/* Bit 2 : Pin 2 */
N#define GPIO_OUT_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_OUT_PIN2_Msk (0x1UL << GPIO_OUT_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_OUT_PIN2_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN2_High (1UL) /*!< Pin driver is high */
N
N/* Bit 1 : Pin 1 */
N#define GPIO_OUT_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_OUT_PIN1_Msk (0x1UL << GPIO_OUT_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_OUT_PIN1_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN1_High (1UL) /*!< Pin driver is high */
N
N/* Bit 0 : Pin 0 */
N#define GPIO_OUT_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_OUT_PIN0_Msk (0x1UL << GPIO_OUT_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_OUT_PIN0_Low (0UL) /*!< Pin driver is low */
N#define GPIO_OUT_PIN0_High (1UL) /*!< Pin driver is high */
N
N/* Register: GPIO_OUTSET */
N/* Description: Set individual bits in GPIO port */
N
N/* Bit 31 : Pin 31 */
N#define GPIO_OUTSET_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_OUTSET_PIN31_Msk (0x1UL << GPIO_OUTSET_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_OUTSET_PIN31_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN31_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN31_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 30 : Pin 30 */
N#define GPIO_OUTSET_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_OUTSET_PIN30_Msk (0x1UL << GPIO_OUTSET_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_OUTSET_PIN30_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN30_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN30_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 29 : Pin 29 */
N#define GPIO_OUTSET_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_OUTSET_PIN29_Msk (0x1UL << GPIO_OUTSET_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_OUTSET_PIN29_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN29_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN29_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 28 : Pin 28 */
N#define GPIO_OUTSET_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_OUTSET_PIN28_Msk (0x1UL << GPIO_OUTSET_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_OUTSET_PIN28_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN28_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN28_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 27 : Pin 27 */
N#define GPIO_OUTSET_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_OUTSET_PIN27_Msk (0x1UL << GPIO_OUTSET_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_OUTSET_PIN27_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN27_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN27_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 26 : Pin 26 */
N#define GPIO_OUTSET_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_OUTSET_PIN26_Msk (0x1UL << GPIO_OUTSET_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_OUTSET_PIN26_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN26_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN26_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 25 : Pin 25 */
N#define GPIO_OUTSET_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_OUTSET_PIN25_Msk (0x1UL << GPIO_OUTSET_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_OUTSET_PIN25_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN25_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN25_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 24 : Pin 24 */
N#define GPIO_OUTSET_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_OUTSET_PIN24_Msk (0x1UL << GPIO_OUTSET_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_OUTSET_PIN24_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN24_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN24_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 23 : Pin 23 */
N#define GPIO_OUTSET_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_OUTSET_PIN23_Msk (0x1UL << GPIO_OUTSET_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_OUTSET_PIN23_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN23_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN23_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 22 : Pin 22 */
N#define GPIO_OUTSET_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_OUTSET_PIN22_Msk (0x1UL << GPIO_OUTSET_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_OUTSET_PIN22_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN22_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN22_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 21 : Pin 21 */
N#define GPIO_OUTSET_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_OUTSET_PIN21_Msk (0x1UL << GPIO_OUTSET_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_OUTSET_PIN21_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN21_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN21_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 20 : Pin 20 */
N#define GPIO_OUTSET_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_OUTSET_PIN20_Msk (0x1UL << GPIO_OUTSET_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_OUTSET_PIN20_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN20_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN20_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 19 : Pin 19 */
N#define GPIO_OUTSET_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_OUTSET_PIN19_Msk (0x1UL << GPIO_OUTSET_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_OUTSET_PIN19_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN19_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN19_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 18 : Pin 18 */
N#define GPIO_OUTSET_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_OUTSET_PIN18_Msk (0x1UL << GPIO_OUTSET_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_OUTSET_PIN18_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN18_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN18_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 17 : Pin 17 */
N#define GPIO_OUTSET_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_OUTSET_PIN17_Msk (0x1UL << GPIO_OUTSET_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_OUTSET_PIN17_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN17_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN17_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 16 : Pin 16 */
N#define GPIO_OUTSET_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_OUTSET_PIN16_Msk (0x1UL << GPIO_OUTSET_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_OUTSET_PIN16_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN16_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN16_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 15 : Pin 15 */
N#define GPIO_OUTSET_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_OUTSET_PIN15_Msk (0x1UL << GPIO_OUTSET_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_OUTSET_PIN15_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN15_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN15_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 14 : Pin 14 */
N#define GPIO_OUTSET_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_OUTSET_PIN14_Msk (0x1UL << GPIO_OUTSET_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_OUTSET_PIN14_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN14_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN14_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 13 : Pin 13 */
N#define GPIO_OUTSET_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_OUTSET_PIN13_Msk (0x1UL << GPIO_OUTSET_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_OUTSET_PIN13_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN13_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN13_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 12 : Pin 12 */
N#define GPIO_OUTSET_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_OUTSET_PIN12_Msk (0x1UL << GPIO_OUTSET_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_OUTSET_PIN12_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN12_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN12_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 11 : Pin 11 */
N#define GPIO_OUTSET_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_OUTSET_PIN11_Msk (0x1UL << GPIO_OUTSET_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_OUTSET_PIN11_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN11_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN11_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 10 : Pin 10 */
N#define GPIO_OUTSET_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_OUTSET_PIN10_Msk (0x1UL << GPIO_OUTSET_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_OUTSET_PIN10_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN10_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN10_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 9 : Pin 9 */
N#define GPIO_OUTSET_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_OUTSET_PIN9_Msk (0x1UL << GPIO_OUTSET_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_OUTSET_PIN9_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN9_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN9_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 8 : Pin 8 */
N#define GPIO_OUTSET_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_OUTSET_PIN8_Msk (0x1UL << GPIO_OUTSET_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_OUTSET_PIN8_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN8_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN8_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 7 : Pin 7 */
N#define GPIO_OUTSET_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_OUTSET_PIN7_Msk (0x1UL << GPIO_OUTSET_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_OUTSET_PIN7_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN7_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN7_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 6 : Pin 6 */
N#define GPIO_OUTSET_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_OUTSET_PIN6_Msk (0x1UL << GPIO_OUTSET_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_OUTSET_PIN6_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN6_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN6_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 5 : Pin 5 */
N#define GPIO_OUTSET_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_OUTSET_PIN5_Msk (0x1UL << GPIO_OUTSET_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_OUTSET_PIN5_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN5_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN5_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 4 : Pin 4 */
N#define GPIO_OUTSET_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_OUTSET_PIN4_Msk (0x1UL << GPIO_OUTSET_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_OUTSET_PIN4_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN4_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN4_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 3 : Pin 3 */
N#define GPIO_OUTSET_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_OUTSET_PIN3_Msk (0x1UL << GPIO_OUTSET_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_OUTSET_PIN3_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN3_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN3_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 2 : Pin 2 */
N#define GPIO_OUTSET_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_OUTSET_PIN2_Msk (0x1UL << GPIO_OUTSET_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_OUTSET_PIN2_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN2_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN2_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 1 : Pin 1 */
N#define GPIO_OUTSET_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_OUTSET_PIN1_Msk (0x1UL << GPIO_OUTSET_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_OUTSET_PIN1_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN1_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN1_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Bit 0 : Pin 0 */
N#define GPIO_OUTSET_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_OUTSET_PIN0_Msk (0x1UL << GPIO_OUTSET_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_OUTSET_PIN0_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTSET_PIN0_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTSET_PIN0_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */
N
N/* Register: GPIO_OUTCLR */
N/* Description: Clear individual bits in GPIO port */
N
N/* Bit 31 : Pin 31 */
N#define GPIO_OUTCLR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_OUTCLR_PIN31_Msk (0x1UL << GPIO_OUTCLR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_OUTCLR_PIN31_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN31_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN31_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 30 : Pin 30 */
N#define GPIO_OUTCLR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_OUTCLR_PIN30_Msk (0x1UL << GPIO_OUTCLR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_OUTCLR_PIN30_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN30_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN30_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 29 : Pin 29 */
N#define GPIO_OUTCLR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_OUTCLR_PIN29_Msk (0x1UL << GPIO_OUTCLR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_OUTCLR_PIN29_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN29_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN29_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 28 : Pin 28 */
N#define GPIO_OUTCLR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_OUTCLR_PIN28_Msk (0x1UL << GPIO_OUTCLR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_OUTCLR_PIN28_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN28_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN28_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 27 : Pin 27 */
N#define GPIO_OUTCLR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_OUTCLR_PIN27_Msk (0x1UL << GPIO_OUTCLR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_OUTCLR_PIN27_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN27_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN27_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 26 : Pin 26 */
N#define GPIO_OUTCLR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_OUTCLR_PIN26_Msk (0x1UL << GPIO_OUTCLR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_OUTCLR_PIN26_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN26_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN26_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 25 : Pin 25 */
N#define GPIO_OUTCLR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_OUTCLR_PIN25_Msk (0x1UL << GPIO_OUTCLR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_OUTCLR_PIN25_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN25_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN25_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 24 : Pin 24 */
N#define GPIO_OUTCLR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_OUTCLR_PIN24_Msk (0x1UL << GPIO_OUTCLR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_OUTCLR_PIN24_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN24_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN24_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 23 : Pin 23 */
N#define GPIO_OUTCLR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_OUTCLR_PIN23_Msk (0x1UL << GPIO_OUTCLR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_OUTCLR_PIN23_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN23_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN23_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 22 : Pin 22 */
N#define GPIO_OUTCLR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_OUTCLR_PIN22_Msk (0x1UL << GPIO_OUTCLR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_OUTCLR_PIN22_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN22_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN22_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 21 : Pin 21 */
N#define GPIO_OUTCLR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_OUTCLR_PIN21_Msk (0x1UL << GPIO_OUTCLR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_OUTCLR_PIN21_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN21_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN21_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 20 : Pin 20 */
N#define GPIO_OUTCLR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_OUTCLR_PIN20_Msk (0x1UL << GPIO_OUTCLR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_OUTCLR_PIN20_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN20_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN20_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 19 : Pin 19 */
N#define GPIO_OUTCLR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_OUTCLR_PIN19_Msk (0x1UL << GPIO_OUTCLR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_OUTCLR_PIN19_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN19_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN19_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 18 : Pin 18 */
N#define GPIO_OUTCLR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_OUTCLR_PIN18_Msk (0x1UL << GPIO_OUTCLR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_OUTCLR_PIN18_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN18_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN18_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 17 : Pin 17 */
N#define GPIO_OUTCLR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_OUTCLR_PIN17_Msk (0x1UL << GPIO_OUTCLR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_OUTCLR_PIN17_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN17_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN17_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 16 : Pin 16 */
N#define GPIO_OUTCLR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_OUTCLR_PIN16_Msk (0x1UL << GPIO_OUTCLR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_OUTCLR_PIN16_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN16_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN16_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 15 : Pin 15 */
N#define GPIO_OUTCLR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_OUTCLR_PIN15_Msk (0x1UL << GPIO_OUTCLR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_OUTCLR_PIN15_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN15_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN15_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 14 : Pin 14 */
N#define GPIO_OUTCLR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_OUTCLR_PIN14_Msk (0x1UL << GPIO_OUTCLR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_OUTCLR_PIN14_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN14_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN14_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 13 : Pin 13 */
N#define GPIO_OUTCLR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_OUTCLR_PIN13_Msk (0x1UL << GPIO_OUTCLR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_OUTCLR_PIN13_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN13_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN13_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 12 : Pin 12 */
N#define GPIO_OUTCLR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_OUTCLR_PIN12_Msk (0x1UL << GPIO_OUTCLR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_OUTCLR_PIN12_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN12_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN12_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 11 : Pin 11 */
N#define GPIO_OUTCLR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_OUTCLR_PIN11_Msk (0x1UL << GPIO_OUTCLR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_OUTCLR_PIN11_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN11_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN11_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 10 : Pin 10 */
N#define GPIO_OUTCLR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_OUTCLR_PIN10_Msk (0x1UL << GPIO_OUTCLR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_OUTCLR_PIN10_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN10_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN10_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 9 : Pin 9 */
N#define GPIO_OUTCLR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_OUTCLR_PIN9_Msk (0x1UL << GPIO_OUTCLR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_OUTCLR_PIN9_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN9_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN9_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 8 : Pin 8 */
N#define GPIO_OUTCLR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_OUTCLR_PIN8_Msk (0x1UL << GPIO_OUTCLR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_OUTCLR_PIN8_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN8_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN8_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 7 : Pin 7 */
N#define GPIO_OUTCLR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_OUTCLR_PIN7_Msk (0x1UL << GPIO_OUTCLR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_OUTCLR_PIN7_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN7_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN7_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 6 : Pin 6 */
N#define GPIO_OUTCLR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_OUTCLR_PIN6_Msk (0x1UL << GPIO_OUTCLR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_OUTCLR_PIN6_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN6_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN6_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 5 : Pin 5 */
N#define GPIO_OUTCLR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_OUTCLR_PIN5_Msk (0x1UL << GPIO_OUTCLR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_OUTCLR_PIN5_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN5_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN5_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 4 : Pin 4 */
N#define GPIO_OUTCLR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_OUTCLR_PIN4_Msk (0x1UL << GPIO_OUTCLR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_OUTCLR_PIN4_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN4_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN4_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 3 : Pin 3 */
N#define GPIO_OUTCLR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_OUTCLR_PIN3_Msk (0x1UL << GPIO_OUTCLR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_OUTCLR_PIN3_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN3_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN3_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 2 : Pin 2 */
N#define GPIO_OUTCLR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_OUTCLR_PIN2_Msk (0x1UL << GPIO_OUTCLR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_OUTCLR_PIN2_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN2_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN2_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 1 : Pin 1 */
N#define GPIO_OUTCLR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_OUTCLR_PIN1_Msk (0x1UL << GPIO_OUTCLR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_OUTCLR_PIN1_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN1_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN1_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Bit 0 : Pin 0 */
N#define GPIO_OUTCLR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_OUTCLR_PIN0_Msk (0x1UL << GPIO_OUTCLR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_OUTCLR_PIN0_Low (0UL) /*!< Read: pin driver is low */
N#define GPIO_OUTCLR_PIN0_High (1UL) /*!< Read: pin driver is high */
N#define GPIO_OUTCLR_PIN0_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */
N
N/* Register: GPIO_IN */
N/* Description: Read GPIO port */
N
N/* Bit 31 : Pin 31 */
N#define GPIO_IN_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_IN_PIN31_Msk (0x1UL << GPIO_IN_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_IN_PIN31_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN31_High (1UL) /*!< Pin input is high */
N
N/* Bit 30 : Pin 30 */
N#define GPIO_IN_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_IN_PIN30_Msk (0x1UL << GPIO_IN_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_IN_PIN30_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN30_High (1UL) /*!< Pin input is high */
N
N/* Bit 29 : Pin 29 */
N#define GPIO_IN_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_IN_PIN29_Msk (0x1UL << GPIO_IN_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_IN_PIN29_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN29_High (1UL) /*!< Pin input is high */
N
N/* Bit 28 : Pin 28 */
N#define GPIO_IN_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_IN_PIN28_Msk (0x1UL << GPIO_IN_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_IN_PIN28_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN28_High (1UL) /*!< Pin input is high */
N
N/* Bit 27 : Pin 27 */
N#define GPIO_IN_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_IN_PIN27_Msk (0x1UL << GPIO_IN_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_IN_PIN27_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN27_High (1UL) /*!< Pin input is high */
N
N/* Bit 26 : Pin 26 */
N#define GPIO_IN_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_IN_PIN26_Msk (0x1UL << GPIO_IN_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_IN_PIN26_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN26_High (1UL) /*!< Pin input is high */
N
N/* Bit 25 : Pin 25 */
N#define GPIO_IN_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_IN_PIN25_Msk (0x1UL << GPIO_IN_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_IN_PIN25_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN25_High (1UL) /*!< Pin input is high */
N
N/* Bit 24 : Pin 24 */
N#define GPIO_IN_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_IN_PIN24_Msk (0x1UL << GPIO_IN_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_IN_PIN24_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN24_High (1UL) /*!< Pin input is high */
N
N/* Bit 23 : Pin 23 */
N#define GPIO_IN_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_IN_PIN23_Msk (0x1UL << GPIO_IN_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_IN_PIN23_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN23_High (1UL) /*!< Pin input is high */
N
N/* Bit 22 : Pin 22 */
N#define GPIO_IN_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_IN_PIN22_Msk (0x1UL << GPIO_IN_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_IN_PIN22_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN22_High (1UL) /*!< Pin input is high */
N
N/* Bit 21 : Pin 21 */
N#define GPIO_IN_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_IN_PIN21_Msk (0x1UL << GPIO_IN_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_IN_PIN21_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN21_High (1UL) /*!< Pin input is high */
N
N/* Bit 20 : Pin 20 */
N#define GPIO_IN_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_IN_PIN20_Msk (0x1UL << GPIO_IN_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_IN_PIN20_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN20_High (1UL) /*!< Pin input is high */
N
N/* Bit 19 : Pin 19 */
N#define GPIO_IN_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_IN_PIN19_Msk (0x1UL << GPIO_IN_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_IN_PIN19_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN19_High (1UL) /*!< Pin input is high */
N
N/* Bit 18 : Pin 18 */
N#define GPIO_IN_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_IN_PIN18_Msk (0x1UL << GPIO_IN_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_IN_PIN18_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN18_High (1UL) /*!< Pin input is high */
N
N/* Bit 17 : Pin 17 */
N#define GPIO_IN_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_IN_PIN17_Msk (0x1UL << GPIO_IN_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_IN_PIN17_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN17_High (1UL) /*!< Pin input is high */
N
N/* Bit 16 : Pin 16 */
N#define GPIO_IN_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_IN_PIN16_Msk (0x1UL << GPIO_IN_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_IN_PIN16_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN16_High (1UL) /*!< Pin input is high */
N
N/* Bit 15 : Pin 15 */
N#define GPIO_IN_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_IN_PIN15_Msk (0x1UL << GPIO_IN_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_IN_PIN15_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN15_High (1UL) /*!< Pin input is high */
N
N/* Bit 14 : Pin 14 */
N#define GPIO_IN_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_IN_PIN14_Msk (0x1UL << GPIO_IN_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_IN_PIN14_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN14_High (1UL) /*!< Pin input is high */
N
N/* Bit 13 : Pin 13 */
N#define GPIO_IN_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_IN_PIN13_Msk (0x1UL << GPIO_IN_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_IN_PIN13_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN13_High (1UL) /*!< Pin input is high */
N
N/* Bit 12 : Pin 12 */
N#define GPIO_IN_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_IN_PIN12_Msk (0x1UL << GPIO_IN_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_IN_PIN12_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN12_High (1UL) /*!< Pin input is high */
N
N/* Bit 11 : Pin 11 */
N#define GPIO_IN_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_IN_PIN11_Msk (0x1UL << GPIO_IN_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_IN_PIN11_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN11_High (1UL) /*!< Pin input is high */
N
N/* Bit 10 : Pin 10 */
N#define GPIO_IN_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_IN_PIN10_Msk (0x1UL << GPIO_IN_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_IN_PIN10_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN10_High (1UL) /*!< Pin input is high */
N
N/* Bit 9 : Pin 9 */
N#define GPIO_IN_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_IN_PIN9_Msk (0x1UL << GPIO_IN_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_IN_PIN9_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN9_High (1UL) /*!< Pin input is high */
N
N/* Bit 8 : Pin 8 */
N#define GPIO_IN_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_IN_PIN8_Msk (0x1UL << GPIO_IN_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_IN_PIN8_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN8_High (1UL) /*!< Pin input is high */
N
N/* Bit 7 : Pin 7 */
N#define GPIO_IN_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_IN_PIN7_Msk (0x1UL << GPIO_IN_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_IN_PIN7_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN7_High (1UL) /*!< Pin input is high */
N
N/* Bit 6 : Pin 6 */
N#define GPIO_IN_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_IN_PIN6_Msk (0x1UL << GPIO_IN_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_IN_PIN6_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN6_High (1UL) /*!< Pin input is high */
N
N/* Bit 5 : Pin 5 */
N#define GPIO_IN_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_IN_PIN5_Msk (0x1UL << GPIO_IN_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_IN_PIN5_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN5_High (1UL) /*!< Pin input is high */
N
N/* Bit 4 : Pin 4 */
N#define GPIO_IN_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_IN_PIN4_Msk (0x1UL << GPIO_IN_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_IN_PIN4_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN4_High (1UL) /*!< Pin input is high */
N
N/* Bit 3 : Pin 3 */
N#define GPIO_IN_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_IN_PIN3_Msk (0x1UL << GPIO_IN_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_IN_PIN3_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN3_High (1UL) /*!< Pin input is high */
N
N/* Bit 2 : Pin 2 */
N#define GPIO_IN_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_IN_PIN2_Msk (0x1UL << GPIO_IN_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_IN_PIN2_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN2_High (1UL) /*!< Pin input is high */
N
N/* Bit 1 : Pin 1 */
N#define GPIO_IN_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_IN_PIN1_Msk (0x1UL << GPIO_IN_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_IN_PIN1_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN1_High (1UL) /*!< Pin input is high */
N
N/* Bit 0 : Pin 0 */
N#define GPIO_IN_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_IN_PIN0_Msk (0x1UL << GPIO_IN_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_IN_PIN0_Low (0UL) /*!< Pin input is low */
N#define GPIO_IN_PIN0_High (1UL) /*!< Pin input is high */
N
N/* Register: GPIO_DIR */
N/* Description: Direction of GPIO pins */
N
N/* Bit 31 : Pin 31 */
N#define GPIO_DIR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_DIR_PIN31_Msk (0x1UL << GPIO_DIR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_DIR_PIN31_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN31_Output (1UL) /*!< Pin set as output */
N
N/* Bit 30 : Pin 30 */
N#define GPIO_DIR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_DIR_PIN30_Msk (0x1UL << GPIO_DIR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_DIR_PIN30_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN30_Output (1UL) /*!< Pin set as output */
N
N/* Bit 29 : Pin 29 */
N#define GPIO_DIR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_DIR_PIN29_Msk (0x1UL << GPIO_DIR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_DIR_PIN29_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN29_Output (1UL) /*!< Pin set as output */
N
N/* Bit 28 : Pin 28 */
N#define GPIO_DIR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_DIR_PIN28_Msk (0x1UL << GPIO_DIR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_DIR_PIN28_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN28_Output (1UL) /*!< Pin set as output */
N
N/* Bit 27 : Pin 27 */
N#define GPIO_DIR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_DIR_PIN27_Msk (0x1UL << GPIO_DIR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_DIR_PIN27_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN27_Output (1UL) /*!< Pin set as output */
N
N/* Bit 26 : Pin 26 */
N#define GPIO_DIR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_DIR_PIN26_Msk (0x1UL << GPIO_DIR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_DIR_PIN26_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN26_Output (1UL) /*!< Pin set as output */
N
N/* Bit 25 : Pin 25 */
N#define GPIO_DIR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_DIR_PIN25_Msk (0x1UL << GPIO_DIR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_DIR_PIN25_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN25_Output (1UL) /*!< Pin set as output */
N
N/* Bit 24 : Pin 24 */
N#define GPIO_DIR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_DIR_PIN24_Msk (0x1UL << GPIO_DIR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_DIR_PIN24_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN24_Output (1UL) /*!< Pin set as output */
N
N/* Bit 23 : Pin 23 */
N#define GPIO_DIR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_DIR_PIN23_Msk (0x1UL << GPIO_DIR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_DIR_PIN23_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN23_Output (1UL) /*!< Pin set as output */
N
N/* Bit 22 : Pin 22 */
N#define GPIO_DIR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_DIR_PIN22_Msk (0x1UL << GPIO_DIR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_DIR_PIN22_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN22_Output (1UL) /*!< Pin set as output */
N
N/* Bit 21 : Pin 21 */
N#define GPIO_DIR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_DIR_PIN21_Msk (0x1UL << GPIO_DIR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_DIR_PIN21_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN21_Output (1UL) /*!< Pin set as output */
N
N/* Bit 20 : Pin 20 */
N#define GPIO_DIR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_DIR_PIN20_Msk (0x1UL << GPIO_DIR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_DIR_PIN20_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN20_Output (1UL) /*!< Pin set as output */
N
N/* Bit 19 : Pin 19 */
N#define GPIO_DIR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_DIR_PIN19_Msk (0x1UL << GPIO_DIR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_DIR_PIN19_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN19_Output (1UL) /*!< Pin set as output */
N
N/* Bit 18 : Pin 18 */
N#define GPIO_DIR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_DIR_PIN18_Msk (0x1UL << GPIO_DIR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_DIR_PIN18_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN18_Output (1UL) /*!< Pin set as output */
N
N/* Bit 17 : Pin 17 */
N#define GPIO_DIR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_DIR_PIN17_Msk (0x1UL << GPIO_DIR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_DIR_PIN17_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN17_Output (1UL) /*!< Pin set as output */
N
N/* Bit 16 : Pin 16 */
N#define GPIO_DIR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_DIR_PIN16_Msk (0x1UL << GPIO_DIR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_DIR_PIN16_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN16_Output (1UL) /*!< Pin set as output */
N
N/* Bit 15 : Pin 15 */
N#define GPIO_DIR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_DIR_PIN15_Msk (0x1UL << GPIO_DIR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_DIR_PIN15_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN15_Output (1UL) /*!< Pin set as output */
N
N/* Bit 14 : Pin 14 */
N#define GPIO_DIR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_DIR_PIN14_Msk (0x1UL << GPIO_DIR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_DIR_PIN14_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN14_Output (1UL) /*!< Pin set as output */
N
N/* Bit 13 : Pin 13 */
N#define GPIO_DIR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_DIR_PIN13_Msk (0x1UL << GPIO_DIR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_DIR_PIN13_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN13_Output (1UL) /*!< Pin set as output */
N
N/* Bit 12 : Pin 12 */
N#define GPIO_DIR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_DIR_PIN12_Msk (0x1UL << GPIO_DIR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_DIR_PIN12_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN12_Output (1UL) /*!< Pin set as output */
N
N/* Bit 11 : Pin 11 */
N#define GPIO_DIR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_DIR_PIN11_Msk (0x1UL << GPIO_DIR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_DIR_PIN11_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN11_Output (1UL) /*!< Pin set as output */
N
N/* Bit 10 : Pin 10 */
N#define GPIO_DIR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_DIR_PIN10_Msk (0x1UL << GPIO_DIR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_DIR_PIN10_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN10_Output (1UL) /*!< Pin set as output */
N
N/* Bit 9 : Pin 9 */
N#define GPIO_DIR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_DIR_PIN9_Msk (0x1UL << GPIO_DIR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_DIR_PIN9_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN9_Output (1UL) /*!< Pin set as output */
N
N/* Bit 8 : Pin 8 */
N#define GPIO_DIR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_DIR_PIN8_Msk (0x1UL << GPIO_DIR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_DIR_PIN8_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN8_Output (1UL) /*!< Pin set as output */
N
N/* Bit 7 : Pin 7 */
N#define GPIO_DIR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_DIR_PIN7_Msk (0x1UL << GPIO_DIR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_DIR_PIN7_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN7_Output (1UL) /*!< Pin set as output */
N
N/* Bit 6 : Pin 6 */
N#define GPIO_DIR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_DIR_PIN6_Msk (0x1UL << GPIO_DIR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_DIR_PIN6_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN6_Output (1UL) /*!< Pin set as output */
N
N/* Bit 5 : Pin 5 */
N#define GPIO_DIR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_DIR_PIN5_Msk (0x1UL << GPIO_DIR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_DIR_PIN5_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN5_Output (1UL) /*!< Pin set as output */
N
N/* Bit 4 : Pin 4 */
N#define GPIO_DIR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_DIR_PIN4_Msk (0x1UL << GPIO_DIR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_DIR_PIN4_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN4_Output (1UL) /*!< Pin set as output */
N
N/* Bit 3 : Pin 3 */
N#define GPIO_DIR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_DIR_PIN3_Msk (0x1UL << GPIO_DIR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_DIR_PIN3_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN3_Output (1UL) /*!< Pin set as output */
N
N/* Bit 2 : Pin 2 */
N#define GPIO_DIR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_DIR_PIN2_Msk (0x1UL << GPIO_DIR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_DIR_PIN2_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN2_Output (1UL) /*!< Pin set as output */
N
N/* Bit 1 : Pin 1 */
N#define GPIO_DIR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_DIR_PIN1_Msk (0x1UL << GPIO_DIR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_DIR_PIN1_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN1_Output (1UL) /*!< Pin set as output */
N
N/* Bit 0 : Pin 0 */
N#define GPIO_DIR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_DIR_PIN0_Msk (0x1UL << GPIO_DIR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_DIR_PIN0_Input (0UL) /*!< Pin set as input */
N#define GPIO_DIR_PIN0_Output (1UL) /*!< Pin set as output */
N
N/* Register: GPIO_DIRSET */
N/* Description: DIR set register */
N
N/* Bit 31 : Set as output pin 31 */
N#define GPIO_DIRSET_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_DIRSET_PIN31_Msk (0x1UL << GPIO_DIRSET_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_DIRSET_PIN31_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN31_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN31_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 30 : Set as output pin 30 */
N#define GPIO_DIRSET_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_DIRSET_PIN30_Msk (0x1UL << GPIO_DIRSET_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_DIRSET_PIN30_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN30_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN30_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 29 : Set as output pin 29 */
N#define GPIO_DIRSET_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_DIRSET_PIN29_Msk (0x1UL << GPIO_DIRSET_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_DIRSET_PIN29_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN29_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN29_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 28 : Set as output pin 28 */
N#define GPIO_DIRSET_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_DIRSET_PIN28_Msk (0x1UL << GPIO_DIRSET_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_DIRSET_PIN28_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN28_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN28_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 27 : Set as output pin 27 */
N#define GPIO_DIRSET_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_DIRSET_PIN27_Msk (0x1UL << GPIO_DIRSET_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_DIRSET_PIN27_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN27_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN27_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 26 : Set as output pin 26 */
N#define GPIO_DIRSET_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_DIRSET_PIN26_Msk (0x1UL << GPIO_DIRSET_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_DIRSET_PIN26_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN26_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN26_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 25 : Set as output pin 25 */
N#define GPIO_DIRSET_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_DIRSET_PIN25_Msk (0x1UL << GPIO_DIRSET_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_DIRSET_PIN25_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN25_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN25_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 24 : Set as output pin 24 */
N#define GPIO_DIRSET_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_DIRSET_PIN24_Msk (0x1UL << GPIO_DIRSET_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_DIRSET_PIN24_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN24_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN24_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 23 : Set as output pin 23 */
N#define GPIO_DIRSET_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_DIRSET_PIN23_Msk (0x1UL << GPIO_DIRSET_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_DIRSET_PIN23_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN23_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN23_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 22 : Set as output pin 22 */
N#define GPIO_DIRSET_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_DIRSET_PIN22_Msk (0x1UL << GPIO_DIRSET_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_DIRSET_PIN22_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN22_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN22_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 21 : Set as output pin 21 */
N#define GPIO_DIRSET_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_DIRSET_PIN21_Msk (0x1UL << GPIO_DIRSET_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_DIRSET_PIN21_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN21_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN21_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 20 : Set as output pin 20 */
N#define GPIO_DIRSET_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_DIRSET_PIN20_Msk (0x1UL << GPIO_DIRSET_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_DIRSET_PIN20_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN20_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN20_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 19 : Set as output pin 19 */
N#define GPIO_DIRSET_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_DIRSET_PIN19_Msk (0x1UL << GPIO_DIRSET_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_DIRSET_PIN19_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN19_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN19_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 18 : Set as output pin 18 */
N#define GPIO_DIRSET_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_DIRSET_PIN18_Msk (0x1UL << GPIO_DIRSET_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_DIRSET_PIN18_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN18_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN18_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 17 : Set as output pin 17 */
N#define GPIO_DIRSET_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_DIRSET_PIN17_Msk (0x1UL << GPIO_DIRSET_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_DIRSET_PIN17_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN17_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN17_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 16 : Set as output pin 16 */
N#define GPIO_DIRSET_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_DIRSET_PIN16_Msk (0x1UL << GPIO_DIRSET_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_DIRSET_PIN16_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN16_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN16_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 15 : Set as output pin 15 */
N#define GPIO_DIRSET_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_DIRSET_PIN15_Msk (0x1UL << GPIO_DIRSET_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_DIRSET_PIN15_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN15_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN15_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 14 : Set as output pin 14 */
N#define GPIO_DIRSET_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_DIRSET_PIN14_Msk (0x1UL << GPIO_DIRSET_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_DIRSET_PIN14_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN14_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN14_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 13 : Set as output pin 13 */
N#define GPIO_DIRSET_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_DIRSET_PIN13_Msk (0x1UL << GPIO_DIRSET_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_DIRSET_PIN13_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN13_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN13_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 12 : Set as output pin 12 */
N#define GPIO_DIRSET_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_DIRSET_PIN12_Msk (0x1UL << GPIO_DIRSET_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_DIRSET_PIN12_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN12_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN12_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 11 : Set as output pin 11 */
N#define GPIO_DIRSET_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_DIRSET_PIN11_Msk (0x1UL << GPIO_DIRSET_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_DIRSET_PIN11_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN11_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN11_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 10 : Set as output pin 10 */
N#define GPIO_DIRSET_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_DIRSET_PIN10_Msk (0x1UL << GPIO_DIRSET_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_DIRSET_PIN10_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN10_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN10_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 9 : Set as output pin 9 */
N#define GPIO_DIRSET_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_DIRSET_PIN9_Msk (0x1UL << GPIO_DIRSET_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_DIRSET_PIN9_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN9_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN9_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 8 : Set as output pin 8 */
N#define GPIO_DIRSET_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_DIRSET_PIN8_Msk (0x1UL << GPIO_DIRSET_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_DIRSET_PIN8_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN8_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN8_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 7 : Set as output pin 7 */
N#define GPIO_DIRSET_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_DIRSET_PIN7_Msk (0x1UL << GPIO_DIRSET_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_DIRSET_PIN7_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN7_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN7_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 6 : Set as output pin 6 */
N#define GPIO_DIRSET_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_DIRSET_PIN6_Msk (0x1UL << GPIO_DIRSET_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_DIRSET_PIN6_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN6_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN6_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 5 : Set as output pin 5 */
N#define GPIO_DIRSET_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_DIRSET_PIN5_Msk (0x1UL << GPIO_DIRSET_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_DIRSET_PIN5_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN5_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN5_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 4 : Set as output pin 4 */
N#define GPIO_DIRSET_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_DIRSET_PIN4_Msk (0x1UL << GPIO_DIRSET_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_DIRSET_PIN4_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN4_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN4_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 3 : Set as output pin 3 */
N#define GPIO_DIRSET_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_DIRSET_PIN3_Msk (0x1UL << GPIO_DIRSET_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_DIRSET_PIN3_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN3_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN3_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 2 : Set as output pin 2 */
N#define GPIO_DIRSET_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_DIRSET_PIN2_Msk (0x1UL << GPIO_DIRSET_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_DIRSET_PIN2_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN2_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN2_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 1 : Set as output pin 1 */
N#define GPIO_DIRSET_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_DIRSET_PIN1_Msk (0x1UL << GPIO_DIRSET_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_DIRSET_PIN1_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN1_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN1_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Bit 0 : Set as output pin 0 */
N#define GPIO_DIRSET_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_DIRSET_PIN0_Msk (0x1UL << GPIO_DIRSET_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_DIRSET_PIN0_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRSET_PIN0_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRSET_PIN0_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */
N
N/* Register: GPIO_DIRCLR */
N/* Description: DIR clear register */
N
N/* Bit 31 : Set as input pin 31 */
N#define GPIO_DIRCLR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_DIRCLR_PIN31_Msk (0x1UL << GPIO_DIRCLR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_DIRCLR_PIN31_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN31_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN31_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 30 : Set as input pin 30 */
N#define GPIO_DIRCLR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_DIRCLR_PIN30_Msk (0x1UL << GPIO_DIRCLR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_DIRCLR_PIN30_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN30_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN30_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 29 : Set as input pin 29 */
N#define GPIO_DIRCLR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_DIRCLR_PIN29_Msk (0x1UL << GPIO_DIRCLR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_DIRCLR_PIN29_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN29_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN29_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 28 : Set as input pin 28 */
N#define GPIO_DIRCLR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_DIRCLR_PIN28_Msk (0x1UL << GPIO_DIRCLR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_DIRCLR_PIN28_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN28_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN28_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 27 : Set as input pin 27 */
N#define GPIO_DIRCLR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_DIRCLR_PIN27_Msk (0x1UL << GPIO_DIRCLR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_DIRCLR_PIN27_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN27_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN27_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 26 : Set as input pin 26 */
N#define GPIO_DIRCLR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_DIRCLR_PIN26_Msk (0x1UL << GPIO_DIRCLR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_DIRCLR_PIN26_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN26_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN26_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 25 : Set as input pin 25 */
N#define GPIO_DIRCLR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_DIRCLR_PIN25_Msk (0x1UL << GPIO_DIRCLR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_DIRCLR_PIN25_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN25_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN25_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 24 : Set as input pin 24 */
N#define GPIO_DIRCLR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_DIRCLR_PIN24_Msk (0x1UL << GPIO_DIRCLR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_DIRCLR_PIN24_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN24_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN24_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 23 : Set as input pin 23 */
N#define GPIO_DIRCLR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_DIRCLR_PIN23_Msk (0x1UL << GPIO_DIRCLR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_DIRCLR_PIN23_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN23_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN23_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 22 : Set as input pin 22 */
N#define GPIO_DIRCLR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_DIRCLR_PIN22_Msk (0x1UL << GPIO_DIRCLR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_DIRCLR_PIN22_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN22_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN22_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 21 : Set as input pin 21 */
N#define GPIO_DIRCLR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_DIRCLR_PIN21_Msk (0x1UL << GPIO_DIRCLR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_DIRCLR_PIN21_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN21_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN21_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 20 : Set as input pin 20 */
N#define GPIO_DIRCLR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_DIRCLR_PIN20_Msk (0x1UL << GPIO_DIRCLR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_DIRCLR_PIN20_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN20_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN20_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 19 : Set as input pin 19 */
N#define GPIO_DIRCLR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_DIRCLR_PIN19_Msk (0x1UL << GPIO_DIRCLR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_DIRCLR_PIN19_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN19_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN19_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 18 : Set as input pin 18 */
N#define GPIO_DIRCLR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_DIRCLR_PIN18_Msk (0x1UL << GPIO_DIRCLR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_DIRCLR_PIN18_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN18_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN18_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 17 : Set as input pin 17 */
N#define GPIO_DIRCLR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_DIRCLR_PIN17_Msk (0x1UL << GPIO_DIRCLR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_DIRCLR_PIN17_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN17_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN17_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 16 : Set as input pin 16 */
N#define GPIO_DIRCLR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_DIRCLR_PIN16_Msk (0x1UL << GPIO_DIRCLR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_DIRCLR_PIN16_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN16_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN16_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 15 : Set as input pin 15 */
N#define GPIO_DIRCLR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_DIRCLR_PIN15_Msk (0x1UL << GPIO_DIRCLR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_DIRCLR_PIN15_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN15_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN15_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 14 : Set as input pin 14 */
N#define GPIO_DIRCLR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_DIRCLR_PIN14_Msk (0x1UL << GPIO_DIRCLR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_DIRCLR_PIN14_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN14_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN14_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 13 : Set as input pin 13 */
N#define GPIO_DIRCLR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_DIRCLR_PIN13_Msk (0x1UL << GPIO_DIRCLR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_DIRCLR_PIN13_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN13_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN13_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 12 : Set as input pin 12 */
N#define GPIO_DIRCLR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_DIRCLR_PIN12_Msk (0x1UL << GPIO_DIRCLR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_DIRCLR_PIN12_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN12_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN12_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 11 : Set as input pin 11 */
N#define GPIO_DIRCLR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_DIRCLR_PIN11_Msk (0x1UL << GPIO_DIRCLR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_DIRCLR_PIN11_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN11_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN11_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 10 : Set as input pin 10 */
N#define GPIO_DIRCLR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_DIRCLR_PIN10_Msk (0x1UL << GPIO_DIRCLR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_DIRCLR_PIN10_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN10_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN10_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 9 : Set as input pin 9 */
N#define GPIO_DIRCLR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_DIRCLR_PIN9_Msk (0x1UL << GPIO_DIRCLR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_DIRCLR_PIN9_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN9_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN9_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 8 : Set as input pin 8 */
N#define GPIO_DIRCLR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_DIRCLR_PIN8_Msk (0x1UL << GPIO_DIRCLR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_DIRCLR_PIN8_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN8_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN8_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 7 : Set as input pin 7 */
N#define GPIO_DIRCLR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_DIRCLR_PIN7_Msk (0x1UL << GPIO_DIRCLR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_DIRCLR_PIN7_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN7_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN7_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 6 : Set as input pin 6 */
N#define GPIO_DIRCLR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_DIRCLR_PIN6_Msk (0x1UL << GPIO_DIRCLR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_DIRCLR_PIN6_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN6_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN6_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 5 : Set as input pin 5 */
N#define GPIO_DIRCLR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_DIRCLR_PIN5_Msk (0x1UL << GPIO_DIRCLR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_DIRCLR_PIN5_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN5_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN5_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 4 : Set as input pin 4 */
N#define GPIO_DIRCLR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_DIRCLR_PIN4_Msk (0x1UL << GPIO_DIRCLR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_DIRCLR_PIN4_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN4_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN4_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 3 : Set as input pin 3 */
N#define GPIO_DIRCLR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_DIRCLR_PIN3_Msk (0x1UL << GPIO_DIRCLR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_DIRCLR_PIN3_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN3_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN3_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 2 : Set as input pin 2 */
N#define GPIO_DIRCLR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_DIRCLR_PIN2_Msk (0x1UL << GPIO_DIRCLR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_DIRCLR_PIN2_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN2_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN2_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 1 : Set as input pin 1 */
N#define GPIO_DIRCLR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_DIRCLR_PIN1_Msk (0x1UL << GPIO_DIRCLR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_DIRCLR_PIN1_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN1_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN1_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Bit 0 : Set as input pin 0 */
N#define GPIO_DIRCLR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_DIRCLR_PIN0_Msk (0x1UL << GPIO_DIRCLR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_DIRCLR_PIN0_Input (0UL) /*!< Read: pin set as input */
N#define GPIO_DIRCLR_PIN0_Output (1UL) /*!< Read: pin set as output */
N#define GPIO_DIRCLR_PIN0_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */
N
N/* Register: GPIO_LATCH */
N/* Description: Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers */
N
N/* Bit 31 : Status on whether PIN31 has met criteria set in PIN_CNF31.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
N#define GPIO_LATCH_PIN31_Msk (0x1UL << GPIO_LATCH_PIN31_Pos) /*!< Bit mask of PIN31 field. */
N#define GPIO_LATCH_PIN31_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN31_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 30 : Status on whether PIN30 has met criteria set in PIN_CNF30.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
N#define GPIO_LATCH_PIN30_Msk (0x1UL << GPIO_LATCH_PIN30_Pos) /*!< Bit mask of PIN30 field. */
N#define GPIO_LATCH_PIN30_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN30_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 29 : Status on whether PIN29 has met criteria set in PIN_CNF29.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
N#define GPIO_LATCH_PIN29_Msk (0x1UL << GPIO_LATCH_PIN29_Pos) /*!< Bit mask of PIN29 field. */
N#define GPIO_LATCH_PIN29_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN29_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 28 : Status on whether PIN28 has met criteria set in PIN_CNF28.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
N#define GPIO_LATCH_PIN28_Msk (0x1UL << GPIO_LATCH_PIN28_Pos) /*!< Bit mask of PIN28 field. */
N#define GPIO_LATCH_PIN28_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN28_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 27 : Status on whether PIN27 has met criteria set in PIN_CNF27.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
N#define GPIO_LATCH_PIN27_Msk (0x1UL << GPIO_LATCH_PIN27_Pos) /*!< Bit mask of PIN27 field. */
N#define GPIO_LATCH_PIN27_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN27_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 26 : Status on whether PIN26 has met criteria set in PIN_CNF26.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
N#define GPIO_LATCH_PIN26_Msk (0x1UL << GPIO_LATCH_PIN26_Pos) /*!< Bit mask of PIN26 field. */
N#define GPIO_LATCH_PIN26_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN26_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 25 : Status on whether PIN25 has met criteria set in PIN_CNF25.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
N#define GPIO_LATCH_PIN25_Msk (0x1UL << GPIO_LATCH_PIN25_Pos) /*!< Bit mask of PIN25 field. */
N#define GPIO_LATCH_PIN25_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN25_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 24 : Status on whether PIN24 has met criteria set in PIN_CNF24.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
N#define GPIO_LATCH_PIN24_Msk (0x1UL << GPIO_LATCH_PIN24_Pos) /*!< Bit mask of PIN24 field. */
N#define GPIO_LATCH_PIN24_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN24_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 23 : Status on whether PIN23 has met criteria set in PIN_CNF23.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
N#define GPIO_LATCH_PIN23_Msk (0x1UL << GPIO_LATCH_PIN23_Pos) /*!< Bit mask of PIN23 field. */
N#define GPIO_LATCH_PIN23_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN23_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 22 : Status on whether PIN22 has met criteria set in PIN_CNF22.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
N#define GPIO_LATCH_PIN22_Msk (0x1UL << GPIO_LATCH_PIN22_Pos) /*!< Bit mask of PIN22 field. */
N#define GPIO_LATCH_PIN22_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN22_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 21 : Status on whether PIN21 has met criteria set in PIN_CNF21.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
N#define GPIO_LATCH_PIN21_Msk (0x1UL << GPIO_LATCH_PIN21_Pos) /*!< Bit mask of PIN21 field. */
N#define GPIO_LATCH_PIN21_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN21_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 20 : Status on whether PIN20 has met criteria set in PIN_CNF20.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
N#define GPIO_LATCH_PIN20_Msk (0x1UL << GPIO_LATCH_PIN20_Pos) /*!< Bit mask of PIN20 field. */
N#define GPIO_LATCH_PIN20_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN20_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 19 : Status on whether PIN19 has met criteria set in PIN_CNF19.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
N#define GPIO_LATCH_PIN19_Msk (0x1UL << GPIO_LATCH_PIN19_Pos) /*!< Bit mask of PIN19 field. */
N#define GPIO_LATCH_PIN19_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN19_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 18 : Status on whether PIN18 has met criteria set in PIN_CNF18.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
N#define GPIO_LATCH_PIN18_Msk (0x1UL << GPIO_LATCH_PIN18_Pos) /*!< Bit mask of PIN18 field. */
N#define GPIO_LATCH_PIN18_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN18_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 17 : Status on whether PIN17 has met criteria set in PIN_CNF17.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
N#define GPIO_LATCH_PIN17_Msk (0x1UL << GPIO_LATCH_PIN17_Pos) /*!< Bit mask of PIN17 field. */
N#define GPIO_LATCH_PIN17_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN17_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 16 : Status on whether PIN16 has met criteria set in PIN_CNF16.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
N#define GPIO_LATCH_PIN16_Msk (0x1UL << GPIO_LATCH_PIN16_Pos) /*!< Bit mask of PIN16 field. */
N#define GPIO_LATCH_PIN16_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN16_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 15 : Status on whether PIN15 has met criteria set in PIN_CNF15.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
N#define GPIO_LATCH_PIN15_Msk (0x1UL << GPIO_LATCH_PIN15_Pos) /*!< Bit mask of PIN15 field. */
N#define GPIO_LATCH_PIN15_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN15_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 14 : Status on whether PIN14 has met criteria set in PIN_CNF14.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
N#define GPIO_LATCH_PIN14_Msk (0x1UL << GPIO_LATCH_PIN14_Pos) /*!< Bit mask of PIN14 field. */
N#define GPIO_LATCH_PIN14_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN14_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 13 : Status on whether PIN13 has met criteria set in PIN_CNF13.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
N#define GPIO_LATCH_PIN13_Msk (0x1UL << GPIO_LATCH_PIN13_Pos) /*!< Bit mask of PIN13 field. */
N#define GPIO_LATCH_PIN13_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN13_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 12 : Status on whether PIN12 has met criteria set in PIN_CNF12.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
N#define GPIO_LATCH_PIN12_Msk (0x1UL << GPIO_LATCH_PIN12_Pos) /*!< Bit mask of PIN12 field. */
N#define GPIO_LATCH_PIN12_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN12_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 11 : Status on whether PIN11 has met criteria set in PIN_CNF11.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
N#define GPIO_LATCH_PIN11_Msk (0x1UL << GPIO_LATCH_PIN11_Pos) /*!< Bit mask of PIN11 field. */
N#define GPIO_LATCH_PIN11_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN11_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 10 : Status on whether PIN10 has met criteria set in PIN_CNF10.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
N#define GPIO_LATCH_PIN10_Msk (0x1UL << GPIO_LATCH_PIN10_Pos) /*!< Bit mask of PIN10 field. */
N#define GPIO_LATCH_PIN10_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN10_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 9 : Status on whether PIN9 has met criteria set in PIN_CNF9.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
N#define GPIO_LATCH_PIN9_Msk (0x1UL << GPIO_LATCH_PIN9_Pos) /*!< Bit mask of PIN9 field. */
N#define GPIO_LATCH_PIN9_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN9_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 8 : Status on whether PIN8 has met criteria set in PIN_CNF8.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
N#define GPIO_LATCH_PIN8_Msk (0x1UL << GPIO_LATCH_PIN8_Pos) /*!< Bit mask of PIN8 field. */
N#define GPIO_LATCH_PIN8_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN8_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 7 : Status on whether PIN7 has met criteria set in PIN_CNF7.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
N#define GPIO_LATCH_PIN7_Msk (0x1UL << GPIO_LATCH_PIN7_Pos) /*!< Bit mask of PIN7 field. */
N#define GPIO_LATCH_PIN7_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN7_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 6 : Status on whether PIN6 has met criteria set in PIN_CNF6.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
N#define GPIO_LATCH_PIN6_Msk (0x1UL << GPIO_LATCH_PIN6_Pos) /*!< Bit mask of PIN6 field. */
N#define GPIO_LATCH_PIN6_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN6_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 5 : Status on whether PIN5 has met criteria set in PIN_CNF5.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
N#define GPIO_LATCH_PIN5_Msk (0x1UL << GPIO_LATCH_PIN5_Pos) /*!< Bit mask of PIN5 field. */
N#define GPIO_LATCH_PIN5_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN5_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 4 : Status on whether PIN4 has met criteria set in PIN_CNF4.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
N#define GPIO_LATCH_PIN4_Msk (0x1UL << GPIO_LATCH_PIN4_Pos) /*!< Bit mask of PIN4 field. */
N#define GPIO_LATCH_PIN4_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN4_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 3 : Status on whether PIN3 has met criteria set in PIN_CNF3.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
N#define GPIO_LATCH_PIN3_Msk (0x1UL << GPIO_LATCH_PIN3_Pos) /*!< Bit mask of PIN3 field. */
N#define GPIO_LATCH_PIN3_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN3_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 2 : Status on whether PIN2 has met criteria set in PIN_CNF2.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
N#define GPIO_LATCH_PIN2_Msk (0x1UL << GPIO_LATCH_PIN2_Pos) /*!< Bit mask of PIN2 field. */
N#define GPIO_LATCH_PIN2_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN2_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 1 : Status on whether PIN1 has met criteria set in PIN_CNF1.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
N#define GPIO_LATCH_PIN1_Msk (0x1UL << GPIO_LATCH_PIN1_Pos) /*!< Bit mask of PIN1 field. */
N#define GPIO_LATCH_PIN1_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN1_Latched (1UL) /*!< Criteria has been met */
N
N/* Bit 0 : Status on whether PIN0 has met criteria set in PIN_CNF0.SENSE register. Write '1' to clear. */
N#define GPIO_LATCH_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
N#define GPIO_LATCH_PIN0_Msk (0x1UL << GPIO_LATCH_PIN0_Pos) /*!< Bit mask of PIN0 field. */
N#define GPIO_LATCH_PIN0_NotLatched (0UL) /*!< Criteria has not been met */
N#define GPIO_LATCH_PIN0_Latched (1UL) /*!< Criteria has been met */
N
N/* Register: GPIO_DETECTMODE */
N/* Description: Select between default DETECT signal behaviour and LDETECT mode */
N
N/* Bit 0 : Select between default DETECT signal behaviour and LDETECT mode */
N#define GPIO_DETECTMODE_DETECTMODE_Pos (0UL) /*!< Position of DETECTMODE field. */
N#define GPIO_DETECTMODE_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_DETECTMODE_Pos) /*!< Bit mask of DETECTMODE field. */
N#define GPIO_DETECTMODE_DETECTMODE_Default (0UL) /*!< DETECT directly connected to PIN DETECT signals */
N#define GPIO_DETECTMODE_DETECTMODE_LDETECT (1UL) /*!< Use the latched LDETECT behaviour */
N
N/* Register: GPIO_PIN_CNF */
N/* Description: Description collection[0]:  Configuration of GPIO pins */
N
N/* Bits 17..16 : Pin sensing mechanism */
N#define GPIO_PIN_CNF_SENSE_Pos (16UL) /*!< Position of SENSE field. */
N#define GPIO_PIN_CNF_SENSE_Msk (0x3UL << GPIO_PIN_CNF_SENSE_Pos) /*!< Bit mask of SENSE field. */
N#define GPIO_PIN_CNF_SENSE_Disabled (0UL) /*!< Disabled */
N#define GPIO_PIN_CNF_SENSE_High (2UL) /*!< Sense for high level */
N#define GPIO_PIN_CNF_SENSE_Low (3UL) /*!< Sense for low level */
N
N/* Bits 10..8 : Drive configuration */
N#define GPIO_PIN_CNF_DRIVE_Pos (8UL) /*!< Position of DRIVE field. */
N#define GPIO_PIN_CNF_DRIVE_Msk (0x7UL << GPIO_PIN_CNF_DRIVE_Pos) /*!< Bit mask of DRIVE field. */
N#define GPIO_PIN_CNF_DRIVE_S0S1 (0UL) /*!< Standard '0', standard '1' */
N#define GPIO_PIN_CNF_DRIVE_H0S1 (1UL) /*!< High drive '0', standard '1' */
N#define GPIO_PIN_CNF_DRIVE_S0H1 (2UL) /*!< Standard '0', high drive '1' */
N#define GPIO_PIN_CNF_DRIVE_H0H1 (3UL) /*!< High drive '0', high 'drive '1'' */
N#define GPIO_PIN_CNF_DRIVE_D0S1 (4UL) /*!< Disconnect '0' standard '1' (normally used for wired-or connections) */
N#define GPIO_PIN_CNF_DRIVE_D0H1 (5UL) /*!< Disconnect '0', high drive '1' (normally used for wired-or connections) */
N#define GPIO_PIN_CNF_DRIVE_S0D1 (6UL) /*!< Standard '0'. disconnect '1' (normally used for wired-and connections) */
N#define GPIO_PIN_CNF_DRIVE_H0D1 (7UL) /*!< High drive '0', disconnect '1' (normally used for wired-and connections) */
N
N/* Bits 3..2 : Pull configuration */
N#define GPIO_PIN_CNF_PULL_Pos (2UL) /*!< Position of PULL field. */
N#define GPIO_PIN_CNF_PULL_Msk (0x3UL << GPIO_PIN_CNF_PULL_Pos) /*!< Bit mask of PULL field. */
N#define GPIO_PIN_CNF_PULL_Disabled (0UL) /*!< No pull */
N#define GPIO_PIN_CNF_PULL_Pulldown (1UL) /*!< Pull down on pin */
N#define GPIO_PIN_CNF_PULL_Pullup (3UL) /*!< Pull up on pin */
N
N/* Bit 1 : Connect or disconnect input buffer */
N#define GPIO_PIN_CNF_INPUT_Pos (1UL) /*!< Position of INPUT field. */
N#define GPIO_PIN_CNF_INPUT_Msk (0x1UL << GPIO_PIN_CNF_INPUT_Pos) /*!< Bit mask of INPUT field. */
N#define GPIO_PIN_CNF_INPUT_Connect (0UL) /*!< Connect input buffer */
N#define GPIO_PIN_CNF_INPUT_Disconnect (1UL) /*!< Disconnect input buffer */
N
N/* Bit 0 : Pin direction. Same physical register as DIR register */
N#define GPIO_PIN_CNF_DIR_Pos (0UL) /*!< Position of DIR field. */
N#define GPIO_PIN_CNF_DIR_Msk (0x1UL << GPIO_PIN_CNF_DIR_Pos) /*!< Bit mask of DIR field. */
N#define GPIO_PIN_CNF_DIR_Input (0UL) /*!< Configure pin as an input pin */
N#define GPIO_PIN_CNF_DIR_Output (1UL) /*!< Configure pin as an output pin */
N
N
N/* Peripheral: PDM */
N/* Description: Pulse Density Modulation (Digital Microphone) Interface */
N
N/* Register: PDM_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 2 : Enable or disable interrupt for END event */
N#define PDM_INTEN_END_Pos (2UL) /*!< Position of END field. */
N#define PDM_INTEN_END_Msk (0x1UL << PDM_INTEN_END_Pos) /*!< Bit mask of END field. */
N#define PDM_INTEN_END_Disabled (0UL) /*!< Disable */
N#define PDM_INTEN_END_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for STOPPED event */
N#define PDM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PDM_INTEN_STOPPED_Msk (0x1UL << PDM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PDM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define PDM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for STARTED event */
N#define PDM_INTEN_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define PDM_INTEN_STARTED_Msk (0x1UL << PDM_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define PDM_INTEN_STARTED_Disabled (0UL) /*!< Disable */
N#define PDM_INTEN_STARTED_Enabled (1UL) /*!< Enable */
N
N/* Register: PDM_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 2 : Write '1' to Enable interrupt for END event */
N#define PDM_INTENSET_END_Pos (2UL) /*!< Position of END field. */
N#define PDM_INTENSET_END_Msk (0x1UL << PDM_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define PDM_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define PDM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PDM_INTENSET_STOPPED_Msk (0x1UL << PDM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PDM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for STARTED event */
N#define PDM_INTENSET_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define PDM_INTENSET_STARTED_Msk (0x1UL << PDM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define PDM_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENSET_STARTED_Set (1UL) /*!< Enable */
N
N/* Register: PDM_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 2 : Write '1' to Disable interrupt for END event */
N#define PDM_INTENCLR_END_Pos (2UL) /*!< Position of END field. */
N#define PDM_INTENCLR_END_Msk (0x1UL << PDM_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define PDM_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define PDM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PDM_INTENCLR_STOPPED_Msk (0x1UL << PDM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PDM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for STARTED event */
N#define PDM_INTENCLR_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define PDM_INTENCLR_STARTED_Msk (0x1UL << PDM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define PDM_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define PDM_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define PDM_INTENCLR_STARTED_Clear (1UL) /*!< Disable */
N
N/* Register: PDM_ENABLE */
N/* Description: PDM module enable register */
N
N/* Bit 0 : Enable or disable PDM module */
N#define PDM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define PDM_ENABLE_ENABLE_Msk (0x1UL << PDM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define PDM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define PDM_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
N
N/* Register: PDM_PDMCLKCTRL */
N/* Description: PDM clock generator control */
N
N/* Bits 31..0 : PDM_CLK frequency */
N#define PDM_PDMCLKCTRL_FREQ_Pos (0UL) /*!< Position of FREQ field. */
N#define PDM_PDMCLKCTRL_FREQ_Msk (0xFFFFFFFFUL << PDM_PDMCLKCTRL_FREQ_Pos) /*!< Bit mask of FREQ field. */
N#define PDM_PDMCLKCTRL_FREQ_1000K (0x08000000UL) /*!< PDM_CLK = 32 MHz / 32 = 1.000 MHz */
N#define PDM_PDMCLKCTRL_FREQ_Default (0x08400000UL) /*!< PDM_CLK = 32 MHz / 31 = 1.032 MHz */
N#define PDM_PDMCLKCTRL_FREQ_1067K (0x08800000UL) /*!< PDM_CLK = 32 MHz / 30 = 1.067 MHz */
N
N/* Register: PDM_MODE */
N/* Description: Defines the routing of the connected PDM microphones' signals */
N
N/* Bit 1 : Defines on which PDM_CLK edge Left (or mono) is sampled */
N#define PDM_MODE_EDGE_Pos (1UL) /*!< Position of EDGE field. */
N#define PDM_MODE_EDGE_Msk (0x1UL << PDM_MODE_EDGE_Pos) /*!< Bit mask of EDGE field. */
N#define PDM_MODE_EDGE_LeftFalling (0UL) /*!< Left (or mono) is sampled on falling edge of PDM_CLK */
N#define PDM_MODE_EDGE_LeftRising (1UL) /*!< Left (or mono) is sampled on rising edge of PDM_CLK */
N
N/* Bit 0 : Mono or stereo operation */
N#define PDM_MODE_OPERATION_Pos (0UL) /*!< Position of OPERATION field. */
N#define PDM_MODE_OPERATION_Msk (0x1UL << PDM_MODE_OPERATION_Pos) /*!< Bit mask of OPERATION field. */
N#define PDM_MODE_OPERATION_Stereo (0UL) /*!< Sample and store one pair (Left + Right) of 16bit samples per RAM word R=[31:16]; L=[15:0] */
N#define PDM_MODE_OPERATION_Mono (1UL) /*!< Sample and store two successive Left samples (16 bit each) per RAM word L1=[31:16]; L0=[15:0] */
N
N/* Register: PDM_GAINL */
N/* Description: Left output gain adjustment */
N
N/* Bits 6..0 : Left output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) 0x00    -20 dB gain adjust 0x01  -19.5 dB gain adjust (...) 0x27   -0.5 dB gain adjust 0x28      0 dB gain adjust 0x29   +0.5 dB gain adjust (...) 0x4F  +19.5 dB gain adjust 0x50    +20 dB gain adjust */
N#define PDM_GAINL_GAINL_Pos (0UL) /*!< Position of GAINL field. */
N#define PDM_GAINL_GAINL_Msk (0x7FUL << PDM_GAINL_GAINL_Pos) /*!< Bit mask of GAINL field. */
N#define PDM_GAINL_GAINL_MinGain (0x00UL) /*!< -20dB gain adjustment (minimum) */
N#define PDM_GAINL_GAINL_DefaultGain (0x28UL) /*!< 0dB gain adjustment ('2500 RMS' requirement) */
N#define PDM_GAINL_GAINL_MaxGain (0x50UL) /*!< +20dB gain adjustment (maximum) */
N
N/* Register: PDM_GAINR */
N/* Description: Right output gain adjustment */
N
N/* Bits 7..0 : Right output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) */
N#define PDM_GAINR_GAINR_Pos (0UL) /*!< Position of GAINR field. */
N#define PDM_GAINR_GAINR_Msk (0xFFUL << PDM_GAINR_GAINR_Pos) /*!< Bit mask of GAINR field. */
N#define PDM_GAINR_GAINR_MinGain (0x00UL) /*!< -20dB gain adjustment (minimum) */
N#define PDM_GAINR_GAINR_DefaultGain (0x28UL) /*!< 0dB gain adjustment ('2500 RMS' requirement) */
N#define PDM_GAINR_GAINR_MaxGain (0x50UL) /*!< +20dB gain adjustment (maximum) */
N
N/* Register: PDM_PSEL_CLK */
N/* Description: Pin number configuration for PDM CLK signal */
N
N/* Bit 31 : Connection */
N#define PDM_PSEL_CLK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define PDM_PSEL_CLK_CONNECT_Msk (0x1UL << PDM_PSEL_CLK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define PDM_PSEL_CLK_CONNECT_Connected (0UL) /*!< Connect */
N#define PDM_PSEL_CLK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define PDM_PSEL_CLK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define PDM_PSEL_CLK_PIN_Msk (0x1FUL << PDM_PSEL_CLK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: PDM_PSEL_DIN */
N/* Description: Pin number configuration for PDM DIN signal */
N
N/* Bit 31 : Connection */
N#define PDM_PSEL_DIN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define PDM_PSEL_DIN_CONNECT_Msk (0x1UL << PDM_PSEL_DIN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define PDM_PSEL_DIN_CONNECT_Connected (0UL) /*!< Connect */
N#define PDM_PSEL_DIN_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define PDM_PSEL_DIN_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define PDM_PSEL_DIN_PIN_Msk (0x1FUL << PDM_PSEL_DIN_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: PDM_SAMPLE_PTR */
N/* Description: RAM address pointer to write samples to with EasyDMA */
N
N/* Bits 31..0 : Address to write PDM samples to over DMA */
N#define PDM_SAMPLE_PTR_SAMPLEPTR_Pos (0UL) /*!< Position of SAMPLEPTR field. */
N#define PDM_SAMPLE_PTR_SAMPLEPTR_Msk (0xFFFFFFFFUL << PDM_SAMPLE_PTR_SAMPLEPTR_Pos) /*!< Bit mask of SAMPLEPTR field. */
N
N/* Register: PDM_SAMPLE_MAXCNT */
N/* Description: Number of samples to allocate memory for in EasyDMA mode */
N
N/* Bits 14..0 : Length of DMA RAM allocation in number of samples */
N#define PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos (0UL) /*!< Position of BUFFSIZE field. */
N#define PDM_SAMPLE_MAXCNT_BUFFSIZE_Msk (0x7FFFUL << PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos) /*!< Bit mask of BUFFSIZE field. */
N
N
N/* Peripheral: POWER */
N/* Description: Power control */
N
N/* Register: POWER_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 6 : Write '1' to Enable interrupt for SLEEPEXIT event */
N#define POWER_INTENSET_SLEEPEXIT_Pos (6UL) /*!< Position of SLEEPEXIT field. */
N#define POWER_INTENSET_SLEEPEXIT_Msk (0x1UL << POWER_INTENSET_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field. */
N#define POWER_INTENSET_SLEEPEXIT_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENSET_SLEEPEXIT_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENSET_SLEEPEXIT_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for SLEEPENTER event */
N#define POWER_INTENSET_SLEEPENTER_Pos (5UL) /*!< Position of SLEEPENTER field. */
N#define POWER_INTENSET_SLEEPENTER_Msk (0x1UL << POWER_INTENSET_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field. */
N#define POWER_INTENSET_SLEEPENTER_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENSET_SLEEPENTER_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENSET_SLEEPENTER_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for POFWARN event */
N#define POWER_INTENSET_POFWARN_Pos (2UL) /*!< Position of POFWARN field. */
N#define POWER_INTENSET_POFWARN_Msk (0x1UL << POWER_INTENSET_POFWARN_Pos) /*!< Bit mask of POFWARN field. */
N#define POWER_INTENSET_POFWARN_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENSET_POFWARN_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENSET_POFWARN_Set (1UL) /*!< Enable */
N
N/* Register: POWER_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 6 : Write '1' to Disable interrupt for SLEEPEXIT event */
N#define POWER_INTENCLR_SLEEPEXIT_Pos (6UL) /*!< Position of SLEEPEXIT field. */
N#define POWER_INTENCLR_SLEEPEXIT_Msk (0x1UL << POWER_INTENCLR_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field. */
N#define POWER_INTENCLR_SLEEPEXIT_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENCLR_SLEEPEXIT_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENCLR_SLEEPEXIT_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for SLEEPENTER event */
N#define POWER_INTENCLR_SLEEPENTER_Pos (5UL) /*!< Position of SLEEPENTER field. */
N#define POWER_INTENCLR_SLEEPENTER_Msk (0x1UL << POWER_INTENCLR_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field. */
N#define POWER_INTENCLR_SLEEPENTER_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENCLR_SLEEPENTER_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENCLR_SLEEPENTER_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for POFWARN event */
N#define POWER_INTENCLR_POFWARN_Pos (2UL) /*!< Position of POFWARN field. */
N#define POWER_INTENCLR_POFWARN_Msk (0x1UL << POWER_INTENCLR_POFWARN_Pos) /*!< Bit mask of POFWARN field. */
N#define POWER_INTENCLR_POFWARN_Disabled (0UL) /*!< Read: Disabled */
N#define POWER_INTENCLR_POFWARN_Enabled (1UL) /*!< Read: Enabled */
N#define POWER_INTENCLR_POFWARN_Clear (1UL) /*!< Disable */
N
N/* Register: POWER_RESETREAS */
N/* Description: Reset reason */
N
N/* Bit 19 : Reset due to wake up from System OFF mode by NFC field detect */
N#define POWER_RESETREAS_NFC_Pos (19UL) /*!< Position of NFC field. */
N#define POWER_RESETREAS_NFC_Msk (0x1UL << POWER_RESETREAS_NFC_Pos) /*!< Bit mask of NFC field. */
N#define POWER_RESETREAS_NFC_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_NFC_Detected (1UL) /*!< Detected */
N
N/* Bit 18 : Reset due to wake up from System OFF mode when wakeup is triggered from entering into debug interface mode */
N#define POWER_RESETREAS_DIF_Pos (18UL) /*!< Position of DIF field. */
N#define POWER_RESETREAS_DIF_Msk (0x1UL << POWER_RESETREAS_DIF_Pos) /*!< Bit mask of DIF field. */
N#define POWER_RESETREAS_DIF_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_DIF_Detected (1UL) /*!< Detected */
N
N/* Bit 17 : Reset due to wake up from System OFF mode when wakeup is triggered from ANADETECT signal from LPCOMP */
N#define POWER_RESETREAS_LPCOMP_Pos (17UL) /*!< Position of LPCOMP field. */
N#define POWER_RESETREAS_LPCOMP_Msk (0x1UL << POWER_RESETREAS_LPCOMP_Pos) /*!< Bit mask of LPCOMP field. */
N#define POWER_RESETREAS_LPCOMP_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_LPCOMP_Detected (1UL) /*!< Detected */
N
N/* Bit 16 : Reset due to wake up from System OFF mode when wakeup is triggered from DETECT signal from GPIO */
N#define POWER_RESETREAS_OFF_Pos (16UL) /*!< Position of OFF field. */
N#define POWER_RESETREAS_OFF_Msk (0x1UL << POWER_RESETREAS_OFF_Pos) /*!< Bit mask of OFF field. */
N#define POWER_RESETREAS_OFF_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_OFF_Detected (1UL) /*!< Detected */
N
N/* Bit 3 : Reset from CPU lock-up detected */
N#define POWER_RESETREAS_LOCKUP_Pos (3UL) /*!< Position of LOCKUP field. */
N#define POWER_RESETREAS_LOCKUP_Msk (0x1UL << POWER_RESETREAS_LOCKUP_Pos) /*!< Bit mask of LOCKUP field. */
N#define POWER_RESETREAS_LOCKUP_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_LOCKUP_Detected (1UL) /*!< Detected */
N
N/* Bit 2 : Reset from soft reset detected */
N#define POWER_RESETREAS_SREQ_Pos (2UL) /*!< Position of SREQ field. */
N#define POWER_RESETREAS_SREQ_Msk (0x1UL << POWER_RESETREAS_SREQ_Pos) /*!< Bit mask of SREQ field. */
N#define POWER_RESETREAS_SREQ_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_SREQ_Detected (1UL) /*!< Detected */
N
N/* Bit 1 : Reset from watchdog detected */
N#define POWER_RESETREAS_DOG_Pos (1UL) /*!< Position of DOG field. */
N#define POWER_RESETREAS_DOG_Msk (0x1UL << POWER_RESETREAS_DOG_Pos) /*!< Bit mask of DOG field. */
N#define POWER_RESETREAS_DOG_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_DOG_Detected (1UL) /*!< Detected */
N
N/* Bit 0 : Reset from pin-reset detected */
N#define POWER_RESETREAS_RESETPIN_Pos (0UL) /*!< Position of RESETPIN field. */
N#define POWER_RESETREAS_RESETPIN_Msk (0x1UL << POWER_RESETREAS_RESETPIN_Pos) /*!< Bit mask of RESETPIN field. */
N#define POWER_RESETREAS_RESETPIN_NotDetected (0UL) /*!< Not detected */
N#define POWER_RESETREAS_RESETPIN_Detected (1UL) /*!< Detected */
N
N/* Register: POWER_RAMSTATUS */
N/* Description: Deprecated register -  RAM status register */
N
N/* Bit 3 : RAM block 3 is on or off/powering up */
N#define POWER_RAMSTATUS_RAMBLOCK3_Pos (3UL) /*!< Position of RAMBLOCK3 field. */
N#define POWER_RAMSTATUS_RAMBLOCK3_Msk (0x1UL << POWER_RAMSTATUS_RAMBLOCK3_Pos) /*!< Bit mask of RAMBLOCK3 field. */
N#define POWER_RAMSTATUS_RAMBLOCK3_Off (0UL) /*!< Off */
N#define POWER_RAMSTATUS_RAMBLOCK3_On (1UL) /*!< On */
N
N/* Bit 2 : RAM block 2 is on or off/powering up */
N#define POWER_RAMSTATUS_RAMBLOCK2_Pos (2UL) /*!< Position of RAMBLOCK2 field. */
N#define POWER_RAMSTATUS_RAMBLOCK2_Msk (0x1UL << POWER_RAMSTATUS_RAMBLOCK2_Pos) /*!< Bit mask of RAMBLOCK2 field. */
N#define POWER_RAMSTATUS_RAMBLOCK2_Off (0UL) /*!< Off */
N#define POWER_RAMSTATUS_RAMBLOCK2_On (1UL) /*!< On */
N
N/* Bit 1 : RAM block 1 is on or off/powering up */
N#define POWER_RAMSTATUS_RAMBLOCK1_Pos (1UL) /*!< Position of RAMBLOCK1 field. */
N#define POWER_RAMSTATUS_RAMBLOCK1_Msk (0x1UL << POWER_RAMSTATUS_RAMBLOCK1_Pos) /*!< Bit mask of RAMBLOCK1 field. */
N#define POWER_RAMSTATUS_RAMBLOCK1_Off (0UL) /*!< Off */
N#define POWER_RAMSTATUS_RAMBLOCK1_On (1UL) /*!< On */
N
N/* Bit 0 : RAM block 0 is on or off/powering up */
N#define POWER_RAMSTATUS_RAMBLOCK0_Pos (0UL) /*!< Position of RAMBLOCK0 field. */
N#define POWER_RAMSTATUS_RAMBLOCK0_Msk (0x1UL << POWER_RAMSTATUS_RAMBLOCK0_Pos) /*!< Bit mask of RAMBLOCK0 field. */
N#define POWER_RAMSTATUS_RAMBLOCK0_Off (0UL) /*!< Off */
N#define POWER_RAMSTATUS_RAMBLOCK0_On (1UL) /*!< On */
N
N/* Register: POWER_SYSTEMOFF */
N/* Description: System OFF register */
N
N/* Bit 0 : Enable System OFF mode */
N#define POWER_SYSTEMOFF_SYSTEMOFF_Pos (0UL) /*!< Position of SYSTEMOFF field. */
N#define POWER_SYSTEMOFF_SYSTEMOFF_Msk (0x1UL << POWER_SYSTEMOFF_SYSTEMOFF_Pos) /*!< Bit mask of SYSTEMOFF field. */
N#define POWER_SYSTEMOFF_SYSTEMOFF_Enter (1UL) /*!< Enable System OFF mode */
N
N/* Register: POWER_POFCON */
N/* Description: Power failure comparator configuration */
N
N/* Bits 4..1 : Power failure comparator threshold setting */
N#define POWER_POFCON_THRESHOLD_Pos (1UL) /*!< Position of THRESHOLD field. */
N#define POWER_POFCON_THRESHOLD_Msk (0xFUL << POWER_POFCON_THRESHOLD_Pos) /*!< Bit mask of THRESHOLD field. */
N#define POWER_POFCON_THRESHOLD_V17 (4UL) /*!< Set threshold to 1.7 V */
N#define POWER_POFCON_THRESHOLD_V18 (5UL) /*!< Set threshold to 1.8 V */
N#define POWER_POFCON_THRESHOLD_V19 (6UL) /*!< Set threshold to 1.9 V */
N#define POWER_POFCON_THRESHOLD_V20 (7UL) /*!< Set threshold to 2.0 V */
N#define POWER_POFCON_THRESHOLD_V21 (8UL) /*!< Set threshold to 2.1 V */
N#define POWER_POFCON_THRESHOLD_V22 (9UL) /*!< Set threshold to 2.2 V */
N#define POWER_POFCON_THRESHOLD_V23 (10UL) /*!< Set threshold to 2.3 V */
N#define POWER_POFCON_THRESHOLD_V24 (11UL) /*!< Set threshold to 2.4 V */
N#define POWER_POFCON_THRESHOLD_V25 (12UL) /*!< Set threshold to 2.5 V */
N#define POWER_POFCON_THRESHOLD_V26 (13UL) /*!< Set threshold to 2.6 V */
N#define POWER_POFCON_THRESHOLD_V27 (14UL) /*!< Set threshold to 2.7 V */
N#define POWER_POFCON_THRESHOLD_V28 (15UL) /*!< Set threshold to 2.8 V */
N
N/* Bit 0 : Enable or disable power failure comparator */
N#define POWER_POFCON_POF_Pos (0UL) /*!< Position of POF field. */
N#define POWER_POFCON_POF_Msk (0x1UL << POWER_POFCON_POF_Pos) /*!< Bit mask of POF field. */
N#define POWER_POFCON_POF_Disabled (0UL) /*!< Disable */
N#define POWER_POFCON_POF_Enabled (1UL) /*!< Enable */
N
N/* Register: POWER_GPREGRET */
N/* Description: General purpose retention register */
N
N/* Bits 7..0 : General purpose retention register */
N#define POWER_GPREGRET_GPREGRET_Pos (0UL) /*!< Position of GPREGRET field. */
N#define POWER_GPREGRET_GPREGRET_Msk (0xFFUL << POWER_GPREGRET_GPREGRET_Pos) /*!< Bit mask of GPREGRET field. */
N
N/* Register: POWER_GPREGRET2 */
N/* Description: General purpose retention register */
N
N/* Bits 7..0 : General purpose retention register */
N#define POWER_GPREGRET2_GPREGRET_Pos (0UL) /*!< Position of GPREGRET field. */
N#define POWER_GPREGRET2_GPREGRET_Msk (0xFFUL << POWER_GPREGRET2_GPREGRET_Pos) /*!< Bit mask of GPREGRET field. */
N
N/* Register: POWER_RAMON */
N/* Description: Deprecated register -  RAM on/off register (this register is retained) */
N
N/* Bit 17 : Keep retention on RAM block 1 when RAM block is switched off */
N#define POWER_RAMON_OFFRAM1_Pos (17UL) /*!< Position of OFFRAM1 field. */
N#define POWER_RAMON_OFFRAM1_Msk (0x1UL << POWER_RAMON_OFFRAM1_Pos) /*!< Bit mask of OFFRAM1 field. */
N#define POWER_RAMON_OFFRAM1_RAM1Off (0UL) /*!< Off */
N#define POWER_RAMON_OFFRAM1_RAM1On (1UL) /*!< On */
N
N/* Bit 16 : Keep retention on RAM block 0 when RAM block is switched off */
N#define POWER_RAMON_OFFRAM0_Pos (16UL) /*!< Position of OFFRAM0 field. */
N#define POWER_RAMON_OFFRAM0_Msk (0x1UL << POWER_RAMON_OFFRAM0_Pos) /*!< Bit mask of OFFRAM0 field. */
N#define POWER_RAMON_OFFRAM0_RAM0Off (0UL) /*!< Off */
N#define POWER_RAMON_OFFRAM0_RAM0On (1UL) /*!< On */
N
N/* Bit 1 : Keep RAM block 1 on or off in system ON Mode */
N#define POWER_RAMON_ONRAM1_Pos (1UL) /*!< Position of ONRAM1 field. */
N#define POWER_RAMON_ONRAM1_Msk (0x1UL << POWER_RAMON_ONRAM1_Pos) /*!< Bit mask of ONRAM1 field. */
N#define POWER_RAMON_ONRAM1_RAM1Off (0UL) /*!< Off */
N#define POWER_RAMON_ONRAM1_RAM1On (1UL) /*!< On */
N
N/* Bit 0 : Keep RAM block 0 on or off in system ON Mode */
N#define POWER_RAMON_ONRAM0_Pos (0UL) /*!< Position of ONRAM0 field. */
N#define POWER_RAMON_ONRAM0_Msk (0x1UL << POWER_RAMON_ONRAM0_Pos) /*!< Bit mask of ONRAM0 field. */
N#define POWER_RAMON_ONRAM0_RAM0Off (0UL) /*!< Off */
N#define POWER_RAMON_ONRAM0_RAM0On (1UL) /*!< On */
N
N/* Register: POWER_RAMONB */
N/* Description: Deprecated register -  RAM on/off register (this register is retained) */
N
N/* Bit 17 : Keep retention on RAM block 3 when RAM block is switched off */
N#define POWER_RAMONB_OFFRAM3_Pos (17UL) /*!< Position of OFFRAM3 field. */
N#define POWER_RAMONB_OFFRAM3_Msk (0x1UL << POWER_RAMONB_OFFRAM3_Pos) /*!< Bit mask of OFFRAM3 field. */
N#define POWER_RAMONB_OFFRAM3_RAM3Off (0UL) /*!< Off */
N#define POWER_RAMONB_OFFRAM3_RAM3On (1UL) /*!< On */
N
N/* Bit 16 : Keep retention on RAM block 2 when RAM block is switched off */
N#define POWER_RAMONB_OFFRAM2_Pos (16UL) /*!< Position of OFFRAM2 field. */
N#define POWER_RAMONB_OFFRAM2_Msk (0x1UL << POWER_RAMONB_OFFRAM2_Pos) /*!< Bit mask of OFFRAM2 field. */
N#define POWER_RAMONB_OFFRAM2_RAM2Off (0UL) /*!< Off */
N#define POWER_RAMONB_OFFRAM2_RAM2On (1UL) /*!< On */
N
N/* Bit 1 : Keep RAM block 3 on or off in system ON Mode */
N#define POWER_RAMONB_ONRAM3_Pos (1UL) /*!< Position of ONRAM3 field. */
N#define POWER_RAMONB_ONRAM3_Msk (0x1UL << POWER_RAMONB_ONRAM3_Pos) /*!< Bit mask of ONRAM3 field. */
N#define POWER_RAMONB_ONRAM3_RAM3Off (0UL) /*!< Off */
N#define POWER_RAMONB_ONRAM3_RAM3On (1UL) /*!< On */
N
N/* Bit 0 : Keep RAM block 2 on or off in system ON Mode */
N#define POWER_RAMONB_ONRAM2_Pos (0UL) /*!< Position of ONRAM2 field. */
N#define POWER_RAMONB_ONRAM2_Msk (0x1UL << POWER_RAMONB_ONRAM2_Pos) /*!< Bit mask of ONRAM2 field. */
N#define POWER_RAMONB_ONRAM2_RAM2Off (0UL) /*!< Off */
N#define POWER_RAMONB_ONRAM2_RAM2On (1UL) /*!< On */
N
N/* Register: POWER_DCDCEN */
N/* Description: DC/DC enable register */
N
N/* Bit 0 : Enable or disable DC/DC converter */
N#define POWER_DCDCEN_DCDCEN_Pos (0UL) /*!< Position of DCDCEN field. */
N#define POWER_DCDCEN_DCDCEN_Msk (0x1UL << POWER_DCDCEN_DCDCEN_Pos) /*!< Bit mask of DCDCEN field. */
N#define POWER_DCDCEN_DCDCEN_Disabled (0UL) /*!< Disable */
N#define POWER_DCDCEN_DCDCEN_Enabled (1UL) /*!< Enable */
N
N/* Register: POWER_RAM_POWER */
N/* Description: Description cluster[0]:  RAM0 power control register */
N
N/* Bit 17 : Keep retention on RAM section S1 when RAM section is in OFF */
N#define POWER_RAM_POWER_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
N#define POWER_RAM_POWER_S1RETENTION_Msk (0x1UL << POWER_RAM_POWER_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
N#define POWER_RAM_POWER_S1RETENTION_Off (0UL) /*!< Off */
N#define POWER_RAM_POWER_S1RETENTION_On (1UL) /*!< On */
N
N/* Bit 16 : Keep retention on RAM section S0 when RAM section is in OFF */
N#define POWER_RAM_POWER_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
N#define POWER_RAM_POWER_S0RETENTION_Msk (0x1UL << POWER_RAM_POWER_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
N#define POWER_RAM_POWER_S0RETENTION_Off (0UL) /*!< Off */
N#define POWER_RAM_POWER_S0RETENTION_On (1UL) /*!< On */
N
N/* Bit 1 : Keep RAM section S1 ON or OFF in System ON mode. */
N#define POWER_RAM_POWER_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
N#define POWER_RAM_POWER_S1POWER_Msk (0x1UL << POWER_RAM_POWER_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
N#define POWER_RAM_POWER_S1POWER_Off (0UL) /*!< Off */
N#define POWER_RAM_POWER_S1POWER_On (1UL) /*!< On */
N
N/* Bit 0 : Keep RAM section S0 ON or OFF in System ON mode. */
N#define POWER_RAM_POWER_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
N#define POWER_RAM_POWER_S0POWER_Msk (0x1UL << POWER_RAM_POWER_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
N#define POWER_RAM_POWER_S0POWER_Off (0UL) /*!< Off */
N#define POWER_RAM_POWER_S0POWER_On (1UL) /*!< On */
N
N/* Register: POWER_RAM_POWERSET */
N/* Description: Description cluster[0]:  RAM0 power control set register */
N
N/* Bit 17 : Keep retention on RAM section S1 when RAM section is switched off */
N#define POWER_RAM_POWERSET_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
N#define POWER_RAM_POWERSET_S1RETENTION_Msk (0x1UL << POWER_RAM_POWERSET_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
N#define POWER_RAM_POWERSET_S1RETENTION_On (1UL) /*!< On */
N
N/* Bit 16 : Keep retention on RAM section S0 when RAM section is switched off */
N#define POWER_RAM_POWERSET_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
N#define POWER_RAM_POWERSET_S0RETENTION_Msk (0x1UL << POWER_RAM_POWERSET_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
N#define POWER_RAM_POWERSET_S0RETENTION_On (1UL) /*!< On */
N
N/* Bit 1 : Keep RAM section S1 of RAM0 on or off in System ON mode */
N#define POWER_RAM_POWERSET_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
N#define POWER_RAM_POWERSET_S1POWER_Msk (0x1UL << POWER_RAM_POWERSET_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
N#define POWER_RAM_POWERSET_S1POWER_On (1UL) /*!< On */
N
N/* Bit 0 : Keep RAM section S0 of RAM0 on or off in System ON mode */
N#define POWER_RAM_POWERSET_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
N#define POWER_RAM_POWERSET_S0POWER_Msk (0x1UL << POWER_RAM_POWERSET_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
N#define POWER_RAM_POWERSET_S0POWER_On (1UL) /*!< On */
N
N/* Register: POWER_RAM_POWERCLR */
N/* Description: Description cluster[0]:  RAM0 power control clear register */
N
N/* Bit 17 : Keep retention on RAM section S1 when RAM section is switched off */
N#define POWER_RAM_POWERCLR_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
N#define POWER_RAM_POWERCLR_S1RETENTION_Msk (0x1UL << POWER_RAM_POWERCLR_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
N#define POWER_RAM_POWERCLR_S1RETENTION_Off (1UL) /*!< Off */
N
N/* Bit 16 : Keep retention on RAM section S0 when RAM section is switched off */
N#define POWER_RAM_POWERCLR_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
N#define POWER_RAM_POWERCLR_S0RETENTION_Msk (0x1UL << POWER_RAM_POWERCLR_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
N#define POWER_RAM_POWERCLR_S0RETENTION_Off (1UL) /*!< Off */
N
N/* Bit 1 : Keep RAM section S1 of RAM0 on or off in System ON mode */
N#define POWER_RAM_POWERCLR_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
N#define POWER_RAM_POWERCLR_S1POWER_Msk (0x1UL << POWER_RAM_POWERCLR_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
N#define POWER_RAM_POWERCLR_S1POWER_Off (1UL) /*!< Off */
N
N/* Bit 0 : Keep RAM section S0 of RAM0 on or off in System ON mode */
N#define POWER_RAM_POWERCLR_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
N#define POWER_RAM_POWERCLR_S0POWER_Msk (0x1UL << POWER_RAM_POWERCLR_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
N#define POWER_RAM_POWERCLR_S0POWER_Off (1UL) /*!< Off */
N
N
N/* Peripheral: PPI */
N/* Description: Programmable Peripheral Interconnect */
N
N/* Register: PPI_CHEN */
N/* Description: Channel enable register */
N
N/* Bit 31 : Enable or disable channel 31 */
N#define PPI_CHEN_CH31_Pos (31UL) /*!< Position of CH31 field. */
N#define PPI_CHEN_CH31_Msk (0x1UL << PPI_CHEN_CH31_Pos) /*!< Bit mask of CH31 field. */
N#define PPI_CHEN_CH31_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH31_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 30 : Enable or disable channel 30 */
N#define PPI_CHEN_CH30_Pos (30UL) /*!< Position of CH30 field. */
N#define PPI_CHEN_CH30_Msk (0x1UL << PPI_CHEN_CH30_Pos) /*!< Bit mask of CH30 field. */
N#define PPI_CHEN_CH30_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH30_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 29 : Enable or disable channel 29 */
N#define PPI_CHEN_CH29_Pos (29UL) /*!< Position of CH29 field. */
N#define PPI_CHEN_CH29_Msk (0x1UL << PPI_CHEN_CH29_Pos) /*!< Bit mask of CH29 field. */
N#define PPI_CHEN_CH29_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH29_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 28 : Enable or disable channel 28 */
N#define PPI_CHEN_CH28_Pos (28UL) /*!< Position of CH28 field. */
N#define PPI_CHEN_CH28_Msk (0x1UL << PPI_CHEN_CH28_Pos) /*!< Bit mask of CH28 field. */
N#define PPI_CHEN_CH28_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH28_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 27 : Enable or disable channel 27 */
N#define PPI_CHEN_CH27_Pos (27UL) /*!< Position of CH27 field. */
N#define PPI_CHEN_CH27_Msk (0x1UL << PPI_CHEN_CH27_Pos) /*!< Bit mask of CH27 field. */
N#define PPI_CHEN_CH27_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH27_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 26 : Enable or disable channel 26 */
N#define PPI_CHEN_CH26_Pos (26UL) /*!< Position of CH26 field. */
N#define PPI_CHEN_CH26_Msk (0x1UL << PPI_CHEN_CH26_Pos) /*!< Bit mask of CH26 field. */
N#define PPI_CHEN_CH26_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH26_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 25 : Enable or disable channel 25 */
N#define PPI_CHEN_CH25_Pos (25UL) /*!< Position of CH25 field. */
N#define PPI_CHEN_CH25_Msk (0x1UL << PPI_CHEN_CH25_Pos) /*!< Bit mask of CH25 field. */
N#define PPI_CHEN_CH25_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH25_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 24 : Enable or disable channel 24 */
N#define PPI_CHEN_CH24_Pos (24UL) /*!< Position of CH24 field. */
N#define PPI_CHEN_CH24_Msk (0x1UL << PPI_CHEN_CH24_Pos) /*!< Bit mask of CH24 field. */
N#define PPI_CHEN_CH24_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH24_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 23 : Enable or disable channel 23 */
N#define PPI_CHEN_CH23_Pos (23UL) /*!< Position of CH23 field. */
N#define PPI_CHEN_CH23_Msk (0x1UL << PPI_CHEN_CH23_Pos) /*!< Bit mask of CH23 field. */
N#define PPI_CHEN_CH23_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH23_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 22 : Enable or disable channel 22 */
N#define PPI_CHEN_CH22_Pos (22UL) /*!< Position of CH22 field. */
N#define PPI_CHEN_CH22_Msk (0x1UL << PPI_CHEN_CH22_Pos) /*!< Bit mask of CH22 field. */
N#define PPI_CHEN_CH22_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH22_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 21 : Enable or disable channel 21 */
N#define PPI_CHEN_CH21_Pos (21UL) /*!< Position of CH21 field. */
N#define PPI_CHEN_CH21_Msk (0x1UL << PPI_CHEN_CH21_Pos) /*!< Bit mask of CH21 field. */
N#define PPI_CHEN_CH21_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH21_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 20 : Enable or disable channel 20 */
N#define PPI_CHEN_CH20_Pos (20UL) /*!< Position of CH20 field. */
N#define PPI_CHEN_CH20_Msk (0x1UL << PPI_CHEN_CH20_Pos) /*!< Bit mask of CH20 field. */
N#define PPI_CHEN_CH20_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH20_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 19 : Enable or disable channel 19 */
N#define PPI_CHEN_CH19_Pos (19UL) /*!< Position of CH19 field. */
N#define PPI_CHEN_CH19_Msk (0x1UL << PPI_CHEN_CH19_Pos) /*!< Bit mask of CH19 field. */
N#define PPI_CHEN_CH19_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH19_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 18 : Enable or disable channel 18 */
N#define PPI_CHEN_CH18_Pos (18UL) /*!< Position of CH18 field. */
N#define PPI_CHEN_CH18_Msk (0x1UL << PPI_CHEN_CH18_Pos) /*!< Bit mask of CH18 field. */
N#define PPI_CHEN_CH18_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH18_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 17 : Enable or disable channel 17 */
N#define PPI_CHEN_CH17_Pos (17UL) /*!< Position of CH17 field. */
N#define PPI_CHEN_CH17_Msk (0x1UL << PPI_CHEN_CH17_Pos) /*!< Bit mask of CH17 field. */
N#define PPI_CHEN_CH17_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH17_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 16 : Enable or disable channel 16 */
N#define PPI_CHEN_CH16_Pos (16UL) /*!< Position of CH16 field. */
N#define PPI_CHEN_CH16_Msk (0x1UL << PPI_CHEN_CH16_Pos) /*!< Bit mask of CH16 field. */
N#define PPI_CHEN_CH16_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH16_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 15 : Enable or disable channel 15 */
N#define PPI_CHEN_CH15_Pos (15UL) /*!< Position of CH15 field. */
N#define PPI_CHEN_CH15_Msk (0x1UL << PPI_CHEN_CH15_Pos) /*!< Bit mask of CH15 field. */
N#define PPI_CHEN_CH15_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH15_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 14 : Enable or disable channel 14 */
N#define PPI_CHEN_CH14_Pos (14UL) /*!< Position of CH14 field. */
N#define PPI_CHEN_CH14_Msk (0x1UL << PPI_CHEN_CH14_Pos) /*!< Bit mask of CH14 field. */
N#define PPI_CHEN_CH14_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH14_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 13 : Enable or disable channel 13 */
N#define PPI_CHEN_CH13_Pos (13UL) /*!< Position of CH13 field. */
N#define PPI_CHEN_CH13_Msk (0x1UL << PPI_CHEN_CH13_Pos) /*!< Bit mask of CH13 field. */
N#define PPI_CHEN_CH13_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH13_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 12 : Enable or disable channel 12 */
N#define PPI_CHEN_CH12_Pos (12UL) /*!< Position of CH12 field. */
N#define PPI_CHEN_CH12_Msk (0x1UL << PPI_CHEN_CH12_Pos) /*!< Bit mask of CH12 field. */
N#define PPI_CHEN_CH12_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH12_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 11 : Enable or disable channel 11 */
N#define PPI_CHEN_CH11_Pos (11UL) /*!< Position of CH11 field. */
N#define PPI_CHEN_CH11_Msk (0x1UL << PPI_CHEN_CH11_Pos) /*!< Bit mask of CH11 field. */
N#define PPI_CHEN_CH11_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH11_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 10 : Enable or disable channel 10 */
N#define PPI_CHEN_CH10_Pos (10UL) /*!< Position of CH10 field. */
N#define PPI_CHEN_CH10_Msk (0x1UL << PPI_CHEN_CH10_Pos) /*!< Bit mask of CH10 field. */
N#define PPI_CHEN_CH10_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH10_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 9 : Enable or disable channel 9 */
N#define PPI_CHEN_CH9_Pos (9UL) /*!< Position of CH9 field. */
N#define PPI_CHEN_CH9_Msk (0x1UL << PPI_CHEN_CH9_Pos) /*!< Bit mask of CH9 field. */
N#define PPI_CHEN_CH9_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH9_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 8 : Enable or disable channel 8 */
N#define PPI_CHEN_CH8_Pos (8UL) /*!< Position of CH8 field. */
N#define PPI_CHEN_CH8_Msk (0x1UL << PPI_CHEN_CH8_Pos) /*!< Bit mask of CH8 field. */
N#define PPI_CHEN_CH8_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH8_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 7 : Enable or disable channel 7 */
N#define PPI_CHEN_CH7_Pos (7UL) /*!< Position of CH7 field. */
N#define PPI_CHEN_CH7_Msk (0x1UL << PPI_CHEN_CH7_Pos) /*!< Bit mask of CH7 field. */
N#define PPI_CHEN_CH7_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH7_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 6 : Enable or disable channel 6 */
N#define PPI_CHEN_CH6_Pos (6UL) /*!< Position of CH6 field. */
N#define PPI_CHEN_CH6_Msk (0x1UL << PPI_CHEN_CH6_Pos) /*!< Bit mask of CH6 field. */
N#define PPI_CHEN_CH6_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH6_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 5 : Enable or disable channel 5 */
N#define PPI_CHEN_CH5_Pos (5UL) /*!< Position of CH5 field. */
N#define PPI_CHEN_CH5_Msk (0x1UL << PPI_CHEN_CH5_Pos) /*!< Bit mask of CH5 field. */
N#define PPI_CHEN_CH5_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH5_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 4 : Enable or disable channel 4 */
N#define PPI_CHEN_CH4_Pos (4UL) /*!< Position of CH4 field. */
N#define PPI_CHEN_CH4_Msk (0x1UL << PPI_CHEN_CH4_Pos) /*!< Bit mask of CH4 field. */
N#define PPI_CHEN_CH4_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH4_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 3 : Enable or disable channel 3 */
N#define PPI_CHEN_CH3_Pos (3UL) /*!< Position of CH3 field. */
N#define PPI_CHEN_CH3_Msk (0x1UL << PPI_CHEN_CH3_Pos) /*!< Bit mask of CH3 field. */
N#define PPI_CHEN_CH3_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH3_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 2 : Enable or disable channel 2 */
N#define PPI_CHEN_CH2_Pos (2UL) /*!< Position of CH2 field. */
N#define PPI_CHEN_CH2_Msk (0x1UL << PPI_CHEN_CH2_Pos) /*!< Bit mask of CH2 field. */
N#define PPI_CHEN_CH2_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH2_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 1 : Enable or disable channel 1 */
N#define PPI_CHEN_CH1_Pos (1UL) /*!< Position of CH1 field. */
N#define PPI_CHEN_CH1_Msk (0x1UL << PPI_CHEN_CH1_Pos) /*!< Bit mask of CH1 field. */
N#define PPI_CHEN_CH1_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH1_Enabled (1UL) /*!< Enable channel */
N
N/* Bit 0 : Enable or disable channel 0 */
N#define PPI_CHEN_CH0_Pos (0UL) /*!< Position of CH0 field. */
N#define PPI_CHEN_CH0_Msk (0x1UL << PPI_CHEN_CH0_Pos) /*!< Bit mask of CH0 field. */
N#define PPI_CHEN_CH0_Disabled (0UL) /*!< Disable channel */
N#define PPI_CHEN_CH0_Enabled (1UL) /*!< Enable channel */
N
N/* Register: PPI_CHENSET */
N/* Description: Channel enable set register */
N
N/* Bit 31 : Channel 31 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH31_Pos (31UL) /*!< Position of CH31 field. */
N#define PPI_CHENSET_CH31_Msk (0x1UL << PPI_CHENSET_CH31_Pos) /*!< Bit mask of CH31 field. */
N#define PPI_CHENSET_CH31_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH31_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH31_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 30 : Channel 30 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH30_Pos (30UL) /*!< Position of CH30 field. */
N#define PPI_CHENSET_CH30_Msk (0x1UL << PPI_CHENSET_CH30_Pos) /*!< Bit mask of CH30 field. */
N#define PPI_CHENSET_CH30_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH30_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH30_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 29 : Channel 29 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH29_Pos (29UL) /*!< Position of CH29 field. */
N#define PPI_CHENSET_CH29_Msk (0x1UL << PPI_CHENSET_CH29_Pos) /*!< Bit mask of CH29 field. */
N#define PPI_CHENSET_CH29_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH29_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH29_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 28 : Channel 28 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH28_Pos (28UL) /*!< Position of CH28 field. */
N#define PPI_CHENSET_CH28_Msk (0x1UL << PPI_CHENSET_CH28_Pos) /*!< Bit mask of CH28 field. */
N#define PPI_CHENSET_CH28_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH28_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH28_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 27 : Channel 27 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH27_Pos (27UL) /*!< Position of CH27 field. */
N#define PPI_CHENSET_CH27_Msk (0x1UL << PPI_CHENSET_CH27_Pos) /*!< Bit mask of CH27 field. */
N#define PPI_CHENSET_CH27_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH27_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH27_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 26 : Channel 26 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH26_Pos (26UL) /*!< Position of CH26 field. */
N#define PPI_CHENSET_CH26_Msk (0x1UL << PPI_CHENSET_CH26_Pos) /*!< Bit mask of CH26 field. */
N#define PPI_CHENSET_CH26_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH26_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH26_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 25 : Channel 25 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH25_Pos (25UL) /*!< Position of CH25 field. */
N#define PPI_CHENSET_CH25_Msk (0x1UL << PPI_CHENSET_CH25_Pos) /*!< Bit mask of CH25 field. */
N#define PPI_CHENSET_CH25_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH25_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH25_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 24 : Channel 24 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH24_Pos (24UL) /*!< Position of CH24 field. */
N#define PPI_CHENSET_CH24_Msk (0x1UL << PPI_CHENSET_CH24_Pos) /*!< Bit mask of CH24 field. */
N#define PPI_CHENSET_CH24_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH24_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH24_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 23 : Channel 23 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH23_Pos (23UL) /*!< Position of CH23 field. */
N#define PPI_CHENSET_CH23_Msk (0x1UL << PPI_CHENSET_CH23_Pos) /*!< Bit mask of CH23 field. */
N#define PPI_CHENSET_CH23_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH23_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH23_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 22 : Channel 22 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH22_Pos (22UL) /*!< Position of CH22 field. */
N#define PPI_CHENSET_CH22_Msk (0x1UL << PPI_CHENSET_CH22_Pos) /*!< Bit mask of CH22 field. */
N#define PPI_CHENSET_CH22_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH22_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH22_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 21 : Channel 21 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH21_Pos (21UL) /*!< Position of CH21 field. */
N#define PPI_CHENSET_CH21_Msk (0x1UL << PPI_CHENSET_CH21_Pos) /*!< Bit mask of CH21 field. */
N#define PPI_CHENSET_CH21_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH21_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH21_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 20 : Channel 20 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH20_Pos (20UL) /*!< Position of CH20 field. */
N#define PPI_CHENSET_CH20_Msk (0x1UL << PPI_CHENSET_CH20_Pos) /*!< Bit mask of CH20 field. */
N#define PPI_CHENSET_CH20_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH20_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH20_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 19 : Channel 19 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH19_Pos (19UL) /*!< Position of CH19 field. */
N#define PPI_CHENSET_CH19_Msk (0x1UL << PPI_CHENSET_CH19_Pos) /*!< Bit mask of CH19 field. */
N#define PPI_CHENSET_CH19_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH19_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH19_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 18 : Channel 18 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH18_Pos (18UL) /*!< Position of CH18 field. */
N#define PPI_CHENSET_CH18_Msk (0x1UL << PPI_CHENSET_CH18_Pos) /*!< Bit mask of CH18 field. */
N#define PPI_CHENSET_CH18_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH18_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH18_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 17 : Channel 17 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH17_Pos (17UL) /*!< Position of CH17 field. */
N#define PPI_CHENSET_CH17_Msk (0x1UL << PPI_CHENSET_CH17_Pos) /*!< Bit mask of CH17 field. */
N#define PPI_CHENSET_CH17_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH17_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH17_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 16 : Channel 16 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH16_Pos (16UL) /*!< Position of CH16 field. */
N#define PPI_CHENSET_CH16_Msk (0x1UL << PPI_CHENSET_CH16_Pos) /*!< Bit mask of CH16 field. */
N#define PPI_CHENSET_CH16_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH16_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH16_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 15 : Channel 15 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH15_Pos (15UL) /*!< Position of CH15 field. */
N#define PPI_CHENSET_CH15_Msk (0x1UL << PPI_CHENSET_CH15_Pos) /*!< Bit mask of CH15 field. */
N#define PPI_CHENSET_CH15_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH15_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH15_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 14 : Channel 14 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH14_Pos (14UL) /*!< Position of CH14 field. */
N#define PPI_CHENSET_CH14_Msk (0x1UL << PPI_CHENSET_CH14_Pos) /*!< Bit mask of CH14 field. */
N#define PPI_CHENSET_CH14_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH14_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH14_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 13 : Channel 13 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH13_Pos (13UL) /*!< Position of CH13 field. */
N#define PPI_CHENSET_CH13_Msk (0x1UL << PPI_CHENSET_CH13_Pos) /*!< Bit mask of CH13 field. */
N#define PPI_CHENSET_CH13_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH13_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH13_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 12 : Channel 12 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH12_Pos (12UL) /*!< Position of CH12 field. */
N#define PPI_CHENSET_CH12_Msk (0x1UL << PPI_CHENSET_CH12_Pos) /*!< Bit mask of CH12 field. */
N#define PPI_CHENSET_CH12_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH12_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH12_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 11 : Channel 11 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH11_Pos (11UL) /*!< Position of CH11 field. */
N#define PPI_CHENSET_CH11_Msk (0x1UL << PPI_CHENSET_CH11_Pos) /*!< Bit mask of CH11 field. */
N#define PPI_CHENSET_CH11_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH11_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH11_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 10 : Channel 10 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH10_Pos (10UL) /*!< Position of CH10 field. */
N#define PPI_CHENSET_CH10_Msk (0x1UL << PPI_CHENSET_CH10_Pos) /*!< Bit mask of CH10 field. */
N#define PPI_CHENSET_CH10_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH10_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH10_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 9 : Channel 9 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH9_Pos (9UL) /*!< Position of CH9 field. */
N#define PPI_CHENSET_CH9_Msk (0x1UL << PPI_CHENSET_CH9_Pos) /*!< Bit mask of CH9 field. */
N#define PPI_CHENSET_CH9_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH9_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH9_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 8 : Channel 8 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH8_Pos (8UL) /*!< Position of CH8 field. */
N#define PPI_CHENSET_CH8_Msk (0x1UL << PPI_CHENSET_CH8_Pos) /*!< Bit mask of CH8 field. */
N#define PPI_CHENSET_CH8_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH8_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH8_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 7 : Channel 7 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH7_Pos (7UL) /*!< Position of CH7 field. */
N#define PPI_CHENSET_CH7_Msk (0x1UL << PPI_CHENSET_CH7_Pos) /*!< Bit mask of CH7 field. */
N#define PPI_CHENSET_CH7_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH7_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH7_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 6 : Channel 6 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH6_Pos (6UL) /*!< Position of CH6 field. */
N#define PPI_CHENSET_CH6_Msk (0x1UL << PPI_CHENSET_CH6_Pos) /*!< Bit mask of CH6 field. */
N#define PPI_CHENSET_CH6_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH6_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH6_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 5 : Channel 5 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH5_Pos (5UL) /*!< Position of CH5 field. */
N#define PPI_CHENSET_CH5_Msk (0x1UL << PPI_CHENSET_CH5_Pos) /*!< Bit mask of CH5 field. */
N#define PPI_CHENSET_CH5_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH5_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH5_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 4 : Channel 4 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH4_Pos (4UL) /*!< Position of CH4 field. */
N#define PPI_CHENSET_CH4_Msk (0x1UL << PPI_CHENSET_CH4_Pos) /*!< Bit mask of CH4 field. */
N#define PPI_CHENSET_CH4_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH4_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH4_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 3 : Channel 3 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH3_Pos (3UL) /*!< Position of CH3 field. */
N#define PPI_CHENSET_CH3_Msk (0x1UL << PPI_CHENSET_CH3_Pos) /*!< Bit mask of CH3 field. */
N#define PPI_CHENSET_CH3_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH3_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH3_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 2 : Channel 2 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH2_Pos (2UL) /*!< Position of CH2 field. */
N#define PPI_CHENSET_CH2_Msk (0x1UL << PPI_CHENSET_CH2_Pos) /*!< Bit mask of CH2 field. */
N#define PPI_CHENSET_CH2_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH2_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH2_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 1 : Channel 1 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH1_Pos (1UL) /*!< Position of CH1 field. */
N#define PPI_CHENSET_CH1_Msk (0x1UL << PPI_CHENSET_CH1_Pos) /*!< Bit mask of CH1 field. */
N#define PPI_CHENSET_CH1_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH1_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH1_Set (1UL) /*!< Write: Enable channel */
N
N/* Bit 0 : Channel 0 enable set register.  Writing '0' has no effect */
N#define PPI_CHENSET_CH0_Pos (0UL) /*!< Position of CH0 field. */
N#define PPI_CHENSET_CH0_Msk (0x1UL << PPI_CHENSET_CH0_Pos) /*!< Bit mask of CH0 field. */
N#define PPI_CHENSET_CH0_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENSET_CH0_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENSET_CH0_Set (1UL) /*!< Write: Enable channel */
N
N/* Register: PPI_CHENCLR */
N/* Description: Channel enable clear register */
N
N/* Bit 31 : Channel 31 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH31_Pos (31UL) /*!< Position of CH31 field. */
N#define PPI_CHENCLR_CH31_Msk (0x1UL << PPI_CHENCLR_CH31_Pos) /*!< Bit mask of CH31 field. */
N#define PPI_CHENCLR_CH31_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH31_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH31_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 30 : Channel 30 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH30_Pos (30UL) /*!< Position of CH30 field. */
N#define PPI_CHENCLR_CH30_Msk (0x1UL << PPI_CHENCLR_CH30_Pos) /*!< Bit mask of CH30 field. */
N#define PPI_CHENCLR_CH30_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH30_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH30_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 29 : Channel 29 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH29_Pos (29UL) /*!< Position of CH29 field. */
N#define PPI_CHENCLR_CH29_Msk (0x1UL << PPI_CHENCLR_CH29_Pos) /*!< Bit mask of CH29 field. */
N#define PPI_CHENCLR_CH29_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH29_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH29_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 28 : Channel 28 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH28_Pos (28UL) /*!< Position of CH28 field. */
N#define PPI_CHENCLR_CH28_Msk (0x1UL << PPI_CHENCLR_CH28_Pos) /*!< Bit mask of CH28 field. */
N#define PPI_CHENCLR_CH28_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH28_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH28_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 27 : Channel 27 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH27_Pos (27UL) /*!< Position of CH27 field. */
N#define PPI_CHENCLR_CH27_Msk (0x1UL << PPI_CHENCLR_CH27_Pos) /*!< Bit mask of CH27 field. */
N#define PPI_CHENCLR_CH27_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH27_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH27_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 26 : Channel 26 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH26_Pos (26UL) /*!< Position of CH26 field. */
N#define PPI_CHENCLR_CH26_Msk (0x1UL << PPI_CHENCLR_CH26_Pos) /*!< Bit mask of CH26 field. */
N#define PPI_CHENCLR_CH26_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH26_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH26_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 25 : Channel 25 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH25_Pos (25UL) /*!< Position of CH25 field. */
N#define PPI_CHENCLR_CH25_Msk (0x1UL << PPI_CHENCLR_CH25_Pos) /*!< Bit mask of CH25 field. */
N#define PPI_CHENCLR_CH25_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH25_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH25_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 24 : Channel 24 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH24_Pos (24UL) /*!< Position of CH24 field. */
N#define PPI_CHENCLR_CH24_Msk (0x1UL << PPI_CHENCLR_CH24_Pos) /*!< Bit mask of CH24 field. */
N#define PPI_CHENCLR_CH24_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH24_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH24_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 23 : Channel 23 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH23_Pos (23UL) /*!< Position of CH23 field. */
N#define PPI_CHENCLR_CH23_Msk (0x1UL << PPI_CHENCLR_CH23_Pos) /*!< Bit mask of CH23 field. */
N#define PPI_CHENCLR_CH23_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH23_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH23_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 22 : Channel 22 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH22_Pos (22UL) /*!< Position of CH22 field. */
N#define PPI_CHENCLR_CH22_Msk (0x1UL << PPI_CHENCLR_CH22_Pos) /*!< Bit mask of CH22 field. */
N#define PPI_CHENCLR_CH22_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH22_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH22_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 21 : Channel 21 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH21_Pos (21UL) /*!< Position of CH21 field. */
N#define PPI_CHENCLR_CH21_Msk (0x1UL << PPI_CHENCLR_CH21_Pos) /*!< Bit mask of CH21 field. */
N#define PPI_CHENCLR_CH21_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH21_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH21_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 20 : Channel 20 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH20_Pos (20UL) /*!< Position of CH20 field. */
N#define PPI_CHENCLR_CH20_Msk (0x1UL << PPI_CHENCLR_CH20_Pos) /*!< Bit mask of CH20 field. */
N#define PPI_CHENCLR_CH20_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH20_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH20_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 19 : Channel 19 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH19_Pos (19UL) /*!< Position of CH19 field. */
N#define PPI_CHENCLR_CH19_Msk (0x1UL << PPI_CHENCLR_CH19_Pos) /*!< Bit mask of CH19 field. */
N#define PPI_CHENCLR_CH19_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH19_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH19_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 18 : Channel 18 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH18_Pos (18UL) /*!< Position of CH18 field. */
N#define PPI_CHENCLR_CH18_Msk (0x1UL << PPI_CHENCLR_CH18_Pos) /*!< Bit mask of CH18 field. */
N#define PPI_CHENCLR_CH18_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH18_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH18_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 17 : Channel 17 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH17_Pos (17UL) /*!< Position of CH17 field. */
N#define PPI_CHENCLR_CH17_Msk (0x1UL << PPI_CHENCLR_CH17_Pos) /*!< Bit mask of CH17 field. */
N#define PPI_CHENCLR_CH17_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH17_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH17_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 16 : Channel 16 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH16_Pos (16UL) /*!< Position of CH16 field. */
N#define PPI_CHENCLR_CH16_Msk (0x1UL << PPI_CHENCLR_CH16_Pos) /*!< Bit mask of CH16 field. */
N#define PPI_CHENCLR_CH16_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH16_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH16_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 15 : Channel 15 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH15_Pos (15UL) /*!< Position of CH15 field. */
N#define PPI_CHENCLR_CH15_Msk (0x1UL << PPI_CHENCLR_CH15_Pos) /*!< Bit mask of CH15 field. */
N#define PPI_CHENCLR_CH15_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH15_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH15_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 14 : Channel 14 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH14_Pos (14UL) /*!< Position of CH14 field. */
N#define PPI_CHENCLR_CH14_Msk (0x1UL << PPI_CHENCLR_CH14_Pos) /*!< Bit mask of CH14 field. */
N#define PPI_CHENCLR_CH14_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH14_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH14_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 13 : Channel 13 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH13_Pos (13UL) /*!< Position of CH13 field. */
N#define PPI_CHENCLR_CH13_Msk (0x1UL << PPI_CHENCLR_CH13_Pos) /*!< Bit mask of CH13 field. */
N#define PPI_CHENCLR_CH13_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH13_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH13_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 12 : Channel 12 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH12_Pos (12UL) /*!< Position of CH12 field. */
N#define PPI_CHENCLR_CH12_Msk (0x1UL << PPI_CHENCLR_CH12_Pos) /*!< Bit mask of CH12 field. */
N#define PPI_CHENCLR_CH12_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH12_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH12_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 11 : Channel 11 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH11_Pos (11UL) /*!< Position of CH11 field. */
N#define PPI_CHENCLR_CH11_Msk (0x1UL << PPI_CHENCLR_CH11_Pos) /*!< Bit mask of CH11 field. */
N#define PPI_CHENCLR_CH11_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH11_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH11_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 10 : Channel 10 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH10_Pos (10UL) /*!< Position of CH10 field. */
N#define PPI_CHENCLR_CH10_Msk (0x1UL << PPI_CHENCLR_CH10_Pos) /*!< Bit mask of CH10 field. */
N#define PPI_CHENCLR_CH10_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH10_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH10_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 9 : Channel 9 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH9_Pos (9UL) /*!< Position of CH9 field. */
N#define PPI_CHENCLR_CH9_Msk (0x1UL << PPI_CHENCLR_CH9_Pos) /*!< Bit mask of CH9 field. */
N#define PPI_CHENCLR_CH9_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH9_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH9_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 8 : Channel 8 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH8_Pos (8UL) /*!< Position of CH8 field. */
N#define PPI_CHENCLR_CH8_Msk (0x1UL << PPI_CHENCLR_CH8_Pos) /*!< Bit mask of CH8 field. */
N#define PPI_CHENCLR_CH8_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH8_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH8_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 7 : Channel 7 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH7_Pos (7UL) /*!< Position of CH7 field. */
N#define PPI_CHENCLR_CH7_Msk (0x1UL << PPI_CHENCLR_CH7_Pos) /*!< Bit mask of CH7 field. */
N#define PPI_CHENCLR_CH7_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH7_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH7_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 6 : Channel 6 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH6_Pos (6UL) /*!< Position of CH6 field. */
N#define PPI_CHENCLR_CH6_Msk (0x1UL << PPI_CHENCLR_CH6_Pos) /*!< Bit mask of CH6 field. */
N#define PPI_CHENCLR_CH6_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH6_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH6_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 5 : Channel 5 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH5_Pos (5UL) /*!< Position of CH5 field. */
N#define PPI_CHENCLR_CH5_Msk (0x1UL << PPI_CHENCLR_CH5_Pos) /*!< Bit mask of CH5 field. */
N#define PPI_CHENCLR_CH5_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH5_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH5_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 4 : Channel 4 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH4_Pos (4UL) /*!< Position of CH4 field. */
N#define PPI_CHENCLR_CH4_Msk (0x1UL << PPI_CHENCLR_CH4_Pos) /*!< Bit mask of CH4 field. */
N#define PPI_CHENCLR_CH4_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH4_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH4_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 3 : Channel 3 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH3_Pos (3UL) /*!< Position of CH3 field. */
N#define PPI_CHENCLR_CH3_Msk (0x1UL << PPI_CHENCLR_CH3_Pos) /*!< Bit mask of CH3 field. */
N#define PPI_CHENCLR_CH3_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH3_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH3_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 2 : Channel 2 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH2_Pos (2UL) /*!< Position of CH2 field. */
N#define PPI_CHENCLR_CH2_Msk (0x1UL << PPI_CHENCLR_CH2_Pos) /*!< Bit mask of CH2 field. */
N#define PPI_CHENCLR_CH2_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH2_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH2_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 1 : Channel 1 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH1_Pos (1UL) /*!< Position of CH1 field. */
N#define PPI_CHENCLR_CH1_Msk (0x1UL << PPI_CHENCLR_CH1_Pos) /*!< Bit mask of CH1 field. */
N#define PPI_CHENCLR_CH1_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH1_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH1_Clear (1UL) /*!< Write: disable channel */
N
N/* Bit 0 : Channel 0 enable clear register.  Writing '0' has no effect */
N#define PPI_CHENCLR_CH0_Pos (0UL) /*!< Position of CH0 field. */
N#define PPI_CHENCLR_CH0_Msk (0x1UL << PPI_CHENCLR_CH0_Pos) /*!< Bit mask of CH0 field. */
N#define PPI_CHENCLR_CH0_Disabled (0UL) /*!< Read: channel disabled */
N#define PPI_CHENCLR_CH0_Enabled (1UL) /*!< Read: channel enabled */
N#define PPI_CHENCLR_CH0_Clear (1UL) /*!< Write: disable channel */
N
N/* Register: PPI_CH_EEP */
N/* Description: Description cluster[0]:  Channel 0 event end-point */
N
N/* Bits 31..0 : Pointer to event register. Accepts only addresses to registers from the Event group. */
N#define PPI_CH_EEP_EEP_Pos (0UL) /*!< Position of EEP field. */
N#define PPI_CH_EEP_EEP_Msk (0xFFFFFFFFUL << PPI_CH_EEP_EEP_Pos) /*!< Bit mask of EEP field. */
N
N/* Register: PPI_CH_TEP */
N/* Description: Description cluster[0]:  Channel 0 task end-point */
N
N/* Bits 31..0 : Pointer to task register. Accepts only addresses to registers from the Task group. */
N#define PPI_CH_TEP_TEP_Pos (0UL) /*!< Position of TEP field. */
N#define PPI_CH_TEP_TEP_Msk (0xFFFFFFFFUL << PPI_CH_TEP_TEP_Pos) /*!< Bit mask of TEP field. */
N
N/* Register: PPI_CHG */
N/* Description: Description collection[0]:  Channel group 0 */
N
N/* Bit 31 : Include or exclude channel 31 */
N#define PPI_CHG_CH31_Pos (31UL) /*!< Position of CH31 field. */
N#define PPI_CHG_CH31_Msk (0x1UL << PPI_CHG_CH31_Pos) /*!< Bit mask of CH31 field. */
N#define PPI_CHG_CH31_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH31_Included (1UL) /*!< Include */
N
N/* Bit 30 : Include or exclude channel 30 */
N#define PPI_CHG_CH30_Pos (30UL) /*!< Position of CH30 field. */
N#define PPI_CHG_CH30_Msk (0x1UL << PPI_CHG_CH30_Pos) /*!< Bit mask of CH30 field. */
N#define PPI_CHG_CH30_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH30_Included (1UL) /*!< Include */
N
N/* Bit 29 : Include or exclude channel 29 */
N#define PPI_CHG_CH29_Pos (29UL) /*!< Position of CH29 field. */
N#define PPI_CHG_CH29_Msk (0x1UL << PPI_CHG_CH29_Pos) /*!< Bit mask of CH29 field. */
N#define PPI_CHG_CH29_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH29_Included (1UL) /*!< Include */
N
N/* Bit 28 : Include or exclude channel 28 */
N#define PPI_CHG_CH28_Pos (28UL) /*!< Position of CH28 field. */
N#define PPI_CHG_CH28_Msk (0x1UL << PPI_CHG_CH28_Pos) /*!< Bit mask of CH28 field. */
N#define PPI_CHG_CH28_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH28_Included (1UL) /*!< Include */
N
N/* Bit 27 : Include or exclude channel 27 */
N#define PPI_CHG_CH27_Pos (27UL) /*!< Position of CH27 field. */
N#define PPI_CHG_CH27_Msk (0x1UL << PPI_CHG_CH27_Pos) /*!< Bit mask of CH27 field. */
N#define PPI_CHG_CH27_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH27_Included (1UL) /*!< Include */
N
N/* Bit 26 : Include or exclude channel 26 */
N#define PPI_CHG_CH26_Pos (26UL) /*!< Position of CH26 field. */
N#define PPI_CHG_CH26_Msk (0x1UL << PPI_CHG_CH26_Pos) /*!< Bit mask of CH26 field. */
N#define PPI_CHG_CH26_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH26_Included (1UL) /*!< Include */
N
N/* Bit 25 : Include or exclude channel 25 */
N#define PPI_CHG_CH25_Pos (25UL) /*!< Position of CH25 field. */
N#define PPI_CHG_CH25_Msk (0x1UL << PPI_CHG_CH25_Pos) /*!< Bit mask of CH25 field. */
N#define PPI_CHG_CH25_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH25_Included (1UL) /*!< Include */
N
N/* Bit 24 : Include or exclude channel 24 */
N#define PPI_CHG_CH24_Pos (24UL) /*!< Position of CH24 field. */
N#define PPI_CHG_CH24_Msk (0x1UL << PPI_CHG_CH24_Pos) /*!< Bit mask of CH24 field. */
N#define PPI_CHG_CH24_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH24_Included (1UL) /*!< Include */
N
N/* Bit 23 : Include or exclude channel 23 */
N#define PPI_CHG_CH23_Pos (23UL) /*!< Position of CH23 field. */
N#define PPI_CHG_CH23_Msk (0x1UL << PPI_CHG_CH23_Pos) /*!< Bit mask of CH23 field. */
N#define PPI_CHG_CH23_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH23_Included (1UL) /*!< Include */
N
N/* Bit 22 : Include or exclude channel 22 */
N#define PPI_CHG_CH22_Pos (22UL) /*!< Position of CH22 field. */
N#define PPI_CHG_CH22_Msk (0x1UL << PPI_CHG_CH22_Pos) /*!< Bit mask of CH22 field. */
N#define PPI_CHG_CH22_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH22_Included (1UL) /*!< Include */
N
N/* Bit 21 : Include or exclude channel 21 */
N#define PPI_CHG_CH21_Pos (21UL) /*!< Position of CH21 field. */
N#define PPI_CHG_CH21_Msk (0x1UL << PPI_CHG_CH21_Pos) /*!< Bit mask of CH21 field. */
N#define PPI_CHG_CH21_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH21_Included (1UL) /*!< Include */
N
N/* Bit 20 : Include or exclude channel 20 */
N#define PPI_CHG_CH20_Pos (20UL) /*!< Position of CH20 field. */
N#define PPI_CHG_CH20_Msk (0x1UL << PPI_CHG_CH20_Pos) /*!< Bit mask of CH20 field. */
N#define PPI_CHG_CH20_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH20_Included (1UL) /*!< Include */
N
N/* Bit 19 : Include or exclude channel 19 */
N#define PPI_CHG_CH19_Pos (19UL) /*!< Position of CH19 field. */
N#define PPI_CHG_CH19_Msk (0x1UL << PPI_CHG_CH19_Pos) /*!< Bit mask of CH19 field. */
N#define PPI_CHG_CH19_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH19_Included (1UL) /*!< Include */
N
N/* Bit 18 : Include or exclude channel 18 */
N#define PPI_CHG_CH18_Pos (18UL) /*!< Position of CH18 field. */
N#define PPI_CHG_CH18_Msk (0x1UL << PPI_CHG_CH18_Pos) /*!< Bit mask of CH18 field. */
N#define PPI_CHG_CH18_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH18_Included (1UL) /*!< Include */
N
N/* Bit 17 : Include or exclude channel 17 */
N#define PPI_CHG_CH17_Pos (17UL) /*!< Position of CH17 field. */
N#define PPI_CHG_CH17_Msk (0x1UL << PPI_CHG_CH17_Pos) /*!< Bit mask of CH17 field. */
N#define PPI_CHG_CH17_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH17_Included (1UL) /*!< Include */
N
N/* Bit 16 : Include or exclude channel 16 */
N#define PPI_CHG_CH16_Pos (16UL) /*!< Position of CH16 field. */
N#define PPI_CHG_CH16_Msk (0x1UL << PPI_CHG_CH16_Pos) /*!< Bit mask of CH16 field. */
N#define PPI_CHG_CH16_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH16_Included (1UL) /*!< Include */
N
N/* Bit 15 : Include or exclude channel 15 */
N#define PPI_CHG_CH15_Pos (15UL) /*!< Position of CH15 field. */
N#define PPI_CHG_CH15_Msk (0x1UL << PPI_CHG_CH15_Pos) /*!< Bit mask of CH15 field. */
N#define PPI_CHG_CH15_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH15_Included (1UL) /*!< Include */
N
N/* Bit 14 : Include or exclude channel 14 */
N#define PPI_CHG_CH14_Pos (14UL) /*!< Position of CH14 field. */
N#define PPI_CHG_CH14_Msk (0x1UL << PPI_CHG_CH14_Pos) /*!< Bit mask of CH14 field. */
N#define PPI_CHG_CH14_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH14_Included (1UL) /*!< Include */
N
N/* Bit 13 : Include or exclude channel 13 */
N#define PPI_CHG_CH13_Pos (13UL) /*!< Position of CH13 field. */
N#define PPI_CHG_CH13_Msk (0x1UL << PPI_CHG_CH13_Pos) /*!< Bit mask of CH13 field. */
N#define PPI_CHG_CH13_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH13_Included (1UL) /*!< Include */
N
N/* Bit 12 : Include or exclude channel 12 */
N#define PPI_CHG_CH12_Pos (12UL) /*!< Position of CH12 field. */
N#define PPI_CHG_CH12_Msk (0x1UL << PPI_CHG_CH12_Pos) /*!< Bit mask of CH12 field. */
N#define PPI_CHG_CH12_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH12_Included (1UL) /*!< Include */
N
N/* Bit 11 : Include or exclude channel 11 */
N#define PPI_CHG_CH11_Pos (11UL) /*!< Position of CH11 field. */
N#define PPI_CHG_CH11_Msk (0x1UL << PPI_CHG_CH11_Pos) /*!< Bit mask of CH11 field. */
N#define PPI_CHG_CH11_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH11_Included (1UL) /*!< Include */
N
N/* Bit 10 : Include or exclude channel 10 */
N#define PPI_CHG_CH10_Pos (10UL) /*!< Position of CH10 field. */
N#define PPI_CHG_CH10_Msk (0x1UL << PPI_CHG_CH10_Pos) /*!< Bit mask of CH10 field. */
N#define PPI_CHG_CH10_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH10_Included (1UL) /*!< Include */
N
N/* Bit 9 : Include or exclude channel 9 */
N#define PPI_CHG_CH9_Pos (9UL) /*!< Position of CH9 field. */
N#define PPI_CHG_CH9_Msk (0x1UL << PPI_CHG_CH9_Pos) /*!< Bit mask of CH9 field. */
N#define PPI_CHG_CH9_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH9_Included (1UL) /*!< Include */
N
N/* Bit 8 : Include or exclude channel 8 */
N#define PPI_CHG_CH8_Pos (8UL) /*!< Position of CH8 field. */
N#define PPI_CHG_CH8_Msk (0x1UL << PPI_CHG_CH8_Pos) /*!< Bit mask of CH8 field. */
N#define PPI_CHG_CH8_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH8_Included (1UL) /*!< Include */
N
N/* Bit 7 : Include or exclude channel 7 */
N#define PPI_CHG_CH7_Pos (7UL) /*!< Position of CH7 field. */
N#define PPI_CHG_CH7_Msk (0x1UL << PPI_CHG_CH7_Pos) /*!< Bit mask of CH7 field. */
N#define PPI_CHG_CH7_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH7_Included (1UL) /*!< Include */
N
N/* Bit 6 : Include or exclude channel 6 */
N#define PPI_CHG_CH6_Pos (6UL) /*!< Position of CH6 field. */
N#define PPI_CHG_CH6_Msk (0x1UL << PPI_CHG_CH6_Pos) /*!< Bit mask of CH6 field. */
N#define PPI_CHG_CH6_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH6_Included (1UL) /*!< Include */
N
N/* Bit 5 : Include or exclude channel 5 */
N#define PPI_CHG_CH5_Pos (5UL) /*!< Position of CH5 field. */
N#define PPI_CHG_CH5_Msk (0x1UL << PPI_CHG_CH5_Pos) /*!< Bit mask of CH5 field. */
N#define PPI_CHG_CH5_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH5_Included (1UL) /*!< Include */
N
N/* Bit 4 : Include or exclude channel 4 */
N#define PPI_CHG_CH4_Pos (4UL) /*!< Position of CH4 field. */
N#define PPI_CHG_CH4_Msk (0x1UL << PPI_CHG_CH4_Pos) /*!< Bit mask of CH4 field. */
N#define PPI_CHG_CH4_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH4_Included (1UL) /*!< Include */
N
N/* Bit 3 : Include or exclude channel 3 */
N#define PPI_CHG_CH3_Pos (3UL) /*!< Position of CH3 field. */
N#define PPI_CHG_CH3_Msk (0x1UL << PPI_CHG_CH3_Pos) /*!< Bit mask of CH3 field. */
N#define PPI_CHG_CH3_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH3_Included (1UL) /*!< Include */
N
N/* Bit 2 : Include or exclude channel 2 */
N#define PPI_CHG_CH2_Pos (2UL) /*!< Position of CH2 field. */
N#define PPI_CHG_CH2_Msk (0x1UL << PPI_CHG_CH2_Pos) /*!< Bit mask of CH2 field. */
N#define PPI_CHG_CH2_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH2_Included (1UL) /*!< Include */
N
N/* Bit 1 : Include or exclude channel 1 */
N#define PPI_CHG_CH1_Pos (1UL) /*!< Position of CH1 field. */
N#define PPI_CHG_CH1_Msk (0x1UL << PPI_CHG_CH1_Pos) /*!< Bit mask of CH1 field. */
N#define PPI_CHG_CH1_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH1_Included (1UL) /*!< Include */
N
N/* Bit 0 : Include or exclude channel 0 */
N#define PPI_CHG_CH0_Pos (0UL) /*!< Position of CH0 field. */
N#define PPI_CHG_CH0_Msk (0x1UL << PPI_CHG_CH0_Pos) /*!< Bit mask of CH0 field. */
N#define PPI_CHG_CH0_Excluded (0UL) /*!< Exclude */
N#define PPI_CHG_CH0_Included (1UL) /*!< Include */
N
N/* Register: PPI_FORK_TEP */
N/* Description: Description cluster[0]:  Channel 0 task end-point */
N
N/* Bits 31..0 : Pointer to task register */
N#define PPI_FORK_TEP_TEP_Pos (0UL) /*!< Position of TEP field. */
N#define PPI_FORK_TEP_TEP_Msk (0xFFFFFFFFUL << PPI_FORK_TEP_TEP_Pos) /*!< Bit mask of TEP field. */
N
N
N/* Peripheral: PWM */
N/* Description: Pulse Width Modulation Unit 0 */
N
N/* Register: PWM_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 4 : Shortcut between LOOPSDONE event and STOP task */
N#define PWM_SHORTS_LOOPSDONE_STOP_Pos (4UL) /*!< Position of LOOPSDONE_STOP field. */
N#define PWM_SHORTS_LOOPSDONE_STOP_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_STOP_Pos) /*!< Bit mask of LOOPSDONE_STOP field. */
N#define PWM_SHORTS_LOOPSDONE_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define PWM_SHORTS_LOOPSDONE_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between LOOPSDONE event and SEQSTART[1] task */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos (3UL) /*!< Position of LOOPSDONE_SEQSTART1 field. */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos) /*!< Bit mask of LOOPSDONE_SEQSTART1 field. */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Disabled (0UL) /*!< Disable shortcut */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between LOOPSDONE event and SEQSTART[0] task */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos (2UL) /*!< Position of LOOPSDONE_SEQSTART0 field. */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos) /*!< Bit mask of LOOPSDONE_SEQSTART0 field. */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Disabled (0UL) /*!< Disable shortcut */
N#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between SEQEND[1] event and STOP task */
N#define PWM_SHORTS_SEQEND1_STOP_Pos (1UL) /*!< Position of SEQEND1_STOP field. */
N#define PWM_SHORTS_SEQEND1_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND1_STOP_Pos) /*!< Bit mask of SEQEND1_STOP field. */
N#define PWM_SHORTS_SEQEND1_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define PWM_SHORTS_SEQEND1_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between SEQEND[0] event and STOP task */
N#define PWM_SHORTS_SEQEND0_STOP_Pos (0UL) /*!< Position of SEQEND0_STOP field. */
N#define PWM_SHORTS_SEQEND0_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND0_STOP_Pos) /*!< Bit mask of SEQEND0_STOP field. */
N#define PWM_SHORTS_SEQEND0_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define PWM_SHORTS_SEQEND0_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: PWM_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 7 : Enable or disable interrupt for LOOPSDONE event */
N#define PWM_INTEN_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
N#define PWM_INTEN_LOOPSDONE_Msk (0x1UL << PWM_INTEN_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
N#define PWM_INTEN_LOOPSDONE_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_LOOPSDONE_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable interrupt for PWMPERIODEND event */
N#define PWM_INTEN_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
N#define PWM_INTEN_PWMPERIODEND_Msk (0x1UL << PWM_INTEN_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
N#define PWM_INTEN_PWMPERIODEND_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_PWMPERIODEND_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable interrupt for SEQEND[1] event */
N#define PWM_INTEN_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
N#define PWM_INTEN_SEQEND1_Msk (0x1UL << PWM_INTEN_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
N#define PWM_INTEN_SEQEND1_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_SEQEND1_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for SEQEND[0] event */
N#define PWM_INTEN_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
N#define PWM_INTEN_SEQEND0_Msk (0x1UL << PWM_INTEN_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
N#define PWM_INTEN_SEQEND0_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_SEQEND0_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable interrupt for SEQSTARTED[1] event */
N#define PWM_INTEN_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
N#define PWM_INTEN_SEQSTARTED1_Msk (0x1UL << PWM_INTEN_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
N#define PWM_INTEN_SEQSTARTED1_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_SEQSTARTED1_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for SEQSTARTED[0] event */
N#define PWM_INTEN_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
N#define PWM_INTEN_SEQSTARTED0_Msk (0x1UL << PWM_INTEN_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
N#define PWM_INTEN_SEQSTARTED0_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_SEQSTARTED0_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for STOPPED event */
N#define PWM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PWM_INTEN_STOPPED_Msk (0x1UL << PWM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PWM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define PWM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Register: PWM_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 7 : Write '1' to Enable interrupt for LOOPSDONE event */
N#define PWM_INTENSET_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
N#define PWM_INTENSET_LOOPSDONE_Msk (0x1UL << PWM_INTENSET_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
N#define PWM_INTENSET_LOOPSDONE_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_LOOPSDONE_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_LOOPSDONE_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for PWMPERIODEND event */
N#define PWM_INTENSET_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
N#define PWM_INTENSET_PWMPERIODEND_Msk (0x1UL << PWM_INTENSET_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
N#define PWM_INTENSET_PWMPERIODEND_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_PWMPERIODEND_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_PWMPERIODEND_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for SEQEND[1] event */
N#define PWM_INTENSET_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
N#define PWM_INTENSET_SEQEND1_Msk (0x1UL << PWM_INTENSET_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
N#define PWM_INTENSET_SEQEND1_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_SEQEND1_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_SEQEND1_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for SEQEND[0] event */
N#define PWM_INTENSET_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
N#define PWM_INTENSET_SEQEND0_Msk (0x1UL << PWM_INTENSET_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
N#define PWM_INTENSET_SEQEND0_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_SEQEND0_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_SEQEND0_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for SEQSTARTED[1] event */
N#define PWM_INTENSET_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
N#define PWM_INTENSET_SEQSTARTED1_Msk (0x1UL << PWM_INTENSET_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
N#define PWM_INTENSET_SEQSTARTED1_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_SEQSTARTED1_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_SEQSTARTED1_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for SEQSTARTED[0] event */
N#define PWM_INTENSET_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
N#define PWM_INTENSET_SEQSTARTED0_Msk (0x1UL << PWM_INTENSET_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
N#define PWM_INTENSET_SEQSTARTED0_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_SEQSTARTED0_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_SEQSTARTED0_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define PWM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PWM_INTENSET_STOPPED_Msk (0x1UL << PWM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PWM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Register: PWM_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 7 : Write '1' to Disable interrupt for LOOPSDONE event */
N#define PWM_INTENCLR_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
N#define PWM_INTENCLR_LOOPSDONE_Msk (0x1UL << PWM_INTENCLR_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
N#define PWM_INTENCLR_LOOPSDONE_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_LOOPSDONE_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_LOOPSDONE_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for PWMPERIODEND event */
N#define PWM_INTENCLR_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
N#define PWM_INTENCLR_PWMPERIODEND_Msk (0x1UL << PWM_INTENCLR_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
N#define PWM_INTENCLR_PWMPERIODEND_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_PWMPERIODEND_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_PWMPERIODEND_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for SEQEND[1] event */
N#define PWM_INTENCLR_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
N#define PWM_INTENCLR_SEQEND1_Msk (0x1UL << PWM_INTENCLR_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
N#define PWM_INTENCLR_SEQEND1_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_SEQEND1_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_SEQEND1_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for SEQEND[0] event */
N#define PWM_INTENCLR_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
N#define PWM_INTENCLR_SEQEND0_Msk (0x1UL << PWM_INTENCLR_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
N#define PWM_INTENCLR_SEQEND0_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_SEQEND0_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_SEQEND0_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for SEQSTARTED[1] event */
N#define PWM_INTENCLR_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
N#define PWM_INTENCLR_SEQSTARTED1_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
N#define PWM_INTENCLR_SEQSTARTED1_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_SEQSTARTED1_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_SEQSTARTED1_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for SEQSTARTED[0] event */
N#define PWM_INTENCLR_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
N#define PWM_INTENCLR_SEQSTARTED0_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
N#define PWM_INTENCLR_SEQSTARTED0_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_SEQSTARTED0_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_SEQSTARTED0_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define PWM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define PWM_INTENCLR_STOPPED_Msk (0x1UL << PWM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define PWM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define PWM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define PWM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Register: PWM_ENABLE */
N/* Description: PWM module enable register */
N
N/* Bit 0 : Enable or disable PWM module */
N#define PWM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define PWM_ENABLE_ENABLE_Msk (0x1UL << PWM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define PWM_ENABLE_ENABLE_Disabled (0UL) /*!< Disabled */
N#define PWM_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
N
N/* Register: PWM_MODE */
N/* Description: Selects operating mode of the wave counter */
N
N/* Bit 0 : Selects up or up and down as wave counter mode */
N#define PWM_MODE_UPDOWN_Pos (0UL) /*!< Position of UPDOWN field. */
N#define PWM_MODE_UPDOWN_Msk (0x1UL << PWM_MODE_UPDOWN_Pos) /*!< Bit mask of UPDOWN field. */
N#define PWM_MODE_UPDOWN_Up (0UL) /*!< Up counter - edge aligned PWM duty-cycle */
N#define PWM_MODE_UPDOWN_UpAndDown (1UL) /*!< Up and down counter - center aligned PWM duty cycle */
N
N/* Register: PWM_COUNTERTOP */
N/* Description: Value up to which the pulse generator counter counts */
N
N/* Bits 14..0 : Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM will be used. */
N#define PWM_COUNTERTOP_COUNTERTOP_Pos (0UL) /*!< Position of COUNTERTOP field. */
N#define PWM_COUNTERTOP_COUNTERTOP_Msk (0x7FFFUL << PWM_COUNTERTOP_COUNTERTOP_Pos) /*!< Bit mask of COUNTERTOP field. */
N
N/* Register: PWM_PRESCALER */
N/* Description: Configuration for PWM_CLK */
N
N/* Bits 2..0 : Pre-scaler of PWM_CLK */
N#define PWM_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
N#define PWM_PRESCALER_PRESCALER_Msk (0x7UL << PWM_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */
N#define PWM_PRESCALER_PRESCALER_DIV_1 (0UL) /*!< Divide by   1 (16MHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_2 (1UL) /*!< Divide by   2 ( 8MHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_4 (2UL) /*!< Divide by   4 ( 4MHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_8 (3UL) /*!< Divide by   8 ( 2MHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_16 (4UL) /*!< Divide by  16 ( 1MHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_32 (5UL) /*!< Divide by  32 ( 500kHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_64 (6UL) /*!< Divide by  64 ( 250kHz) */
N#define PWM_PRESCALER_PRESCALER_DIV_128 (7UL) /*!< Divide by 128 ( 125kHz) */
N
N/* Register: PWM_DECODER */
N/* Description: Configuration of the decoder */
N
N/* Bit 8 : Selects source for advancing the active sequence */
N#define PWM_DECODER_MODE_Pos (8UL) /*!< Position of MODE field. */
N#define PWM_DECODER_MODE_Msk (0x1UL << PWM_DECODER_MODE_Pos) /*!< Bit mask of MODE field. */
N#define PWM_DECODER_MODE_RefreshCount (0UL) /*!< SEQ[n].REFRESH is used to determine loading internal compare registers */
N#define PWM_DECODER_MODE_NextStep (1UL) /*!< NEXTSTEP task causes a new value to be loaded to internal compare registers */
N
N/* Bits 2..0 : How a sequence is read from RAM and spread to the compare register */
N#define PWM_DECODER_LOAD_Pos (0UL) /*!< Position of LOAD field. */
N#define PWM_DECODER_LOAD_Msk (0x7UL << PWM_DECODER_LOAD_Pos) /*!< Bit mask of LOAD field. */
N#define PWM_DECODER_LOAD_Common (0UL) /*!< 1st half word (16-bit) used in all PWM channels 0..3 */
N#define PWM_DECODER_LOAD_Grouped (1UL) /*!< 1st half word (16-bit) used in channel 0..1; 2nd word in channel 2..3 */
N#define PWM_DECODER_LOAD_Individual (2UL) /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in ch.3 */
N#define PWM_DECODER_LOAD_WaveForm (3UL) /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in COUNTERTOP */
N
N/* Register: PWM_LOOP */
N/* Description: Amount of playback of a loop */
N
N/* Bits 15..0 : Amount of playback of pattern cycles */
N#define PWM_LOOP_CNT_Pos (0UL) /*!< Position of CNT field. */
N#define PWM_LOOP_CNT_Msk (0xFFFFUL << PWM_LOOP_CNT_Pos) /*!< Bit mask of CNT field. */
N#define PWM_LOOP_CNT_Disabled (0UL) /*!< Looping disabled (stop at the end of the sequence) */
N
N/* Register: PWM_SEQ_PTR */
N/* Description: Description cluster[0]:  Beginning address in Data RAM of this sequence */
N
N/* Bits 31..0 : Beginning address in Data RAM of this sequence */
N#define PWM_SEQ_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define PWM_SEQ_PTR_PTR_Msk (0xFFFFFFFFUL << PWM_SEQ_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: PWM_SEQ_CNT */
N/* Description: Description cluster[0]:  Amount of values (duty cycles) in this sequence */
N
N/* Bits 14..0 : Amount of values (duty cycles) in this sequence */
N#define PWM_SEQ_CNT_CNT_Pos (0UL) /*!< Position of CNT field. */
N#define PWM_SEQ_CNT_CNT_Msk (0x7FFFUL << PWM_SEQ_CNT_CNT_Pos) /*!< Bit mask of CNT field. */
N#define PWM_SEQ_CNT_CNT_Disabled (0UL) /*!< Sequence is disabled, and shall not be started as it is empty */
N
N/* Register: PWM_SEQ_REFRESH */
N/* Description: Description cluster[0]:  Amount of additional PWM periods between samples loaded into compare register */
N
N/* Bits 23..0 : Amount of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods) */
N#define PWM_SEQ_REFRESH_CNT_Pos (0UL) /*!< Position of CNT field. */
N#define PWM_SEQ_REFRESH_CNT_Msk (0xFFFFFFUL << PWM_SEQ_REFRESH_CNT_Pos) /*!< Bit mask of CNT field. */
N#define PWM_SEQ_REFRESH_CNT_Continuous (0UL) /*!< Update every PWM period */
N
N/* Register: PWM_SEQ_ENDDELAY */
N/* Description: Description cluster[0]:  Time added after the sequence */
N
N/* Bits 23..0 : Time added after the sequence in PWM periods */
N#define PWM_SEQ_ENDDELAY_CNT_Pos (0UL) /*!< Position of CNT field. */
N#define PWM_SEQ_ENDDELAY_CNT_Msk (0xFFFFFFUL << PWM_SEQ_ENDDELAY_CNT_Pos) /*!< Bit mask of CNT field. */
N
N/* Register: PWM_PSEL_OUT */
N/* Description: Description collection[0]:  Output pin select for PWM channel 0 */
N
N/* Bit 31 : Connection */
N#define PWM_PSEL_OUT_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define PWM_PSEL_OUT_CONNECT_Msk (0x1UL << PWM_PSEL_OUT_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define PWM_PSEL_OUT_CONNECT_Connected (0UL) /*!< Connect */
N#define PWM_PSEL_OUT_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define PWM_PSEL_OUT_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define PWM_PSEL_OUT_PIN_Msk (0x1FUL << PWM_PSEL_OUT_PIN_Pos) /*!< Bit mask of PIN field. */
N
N
N/* Peripheral: QDEC */
N/* Description: Quadrature Decoder */
N
N/* Register: QDEC_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 6 : Shortcut between SAMPLERDY event and READCLRACC task */
N#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos (6UL) /*!< Position of SAMPLERDY_READCLRACC field. */
N#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos) /*!< Bit mask of SAMPLERDY_READCLRACC field. */
N#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 5 : Shortcut between DBLRDY event and STOP task */
N#define QDEC_SHORTS_DBLRDY_STOP_Pos (5UL) /*!< Position of DBLRDY_STOP field. */
N#define QDEC_SHORTS_DBLRDY_STOP_Msk (0x1UL << QDEC_SHORTS_DBLRDY_STOP_Pos) /*!< Bit mask of DBLRDY_STOP field. */
N#define QDEC_SHORTS_DBLRDY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_DBLRDY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 4 : Shortcut between DBLRDY event and RDCLRDBL task */
N#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos (4UL) /*!< Position of DBLRDY_RDCLRDBL field. */
N#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk (0x1UL << QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos) /*!< Bit mask of DBLRDY_RDCLRDBL field. */
N#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between REPORTRDY event and STOP task */
N#define QDEC_SHORTS_REPORTRDY_STOP_Pos (3UL) /*!< Position of REPORTRDY_STOP field. */
N#define QDEC_SHORTS_REPORTRDY_STOP_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_STOP_Pos) /*!< Bit mask of REPORTRDY_STOP field. */
N#define QDEC_SHORTS_REPORTRDY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_REPORTRDY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between REPORTRDY event and RDCLRACC task */
N#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos (2UL) /*!< Position of REPORTRDY_RDCLRACC field. */
N#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos) /*!< Bit mask of REPORTRDY_RDCLRACC field. */
N#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between SAMPLERDY event and STOP task */
N#define QDEC_SHORTS_SAMPLERDY_STOP_Pos (1UL) /*!< Position of SAMPLERDY_STOP field. */
N#define QDEC_SHORTS_SAMPLERDY_STOP_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_STOP_Pos) /*!< Bit mask of SAMPLERDY_STOP field. */
N#define QDEC_SHORTS_SAMPLERDY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_SAMPLERDY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between REPORTRDY event and READCLRACC task */
N#define QDEC_SHORTS_REPORTRDY_READCLRACC_Pos (0UL) /*!< Position of REPORTRDY_READCLRACC field. */
N#define QDEC_SHORTS_REPORTRDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_READCLRACC_Pos) /*!< Bit mask of REPORTRDY_READCLRACC field. */
N#define QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled (0UL) /*!< Disable shortcut */
N#define QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: QDEC_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 4 : Write '1' to Enable interrupt for STOPPED event */
N#define QDEC_INTENSET_STOPPED_Pos (4UL) /*!< Position of STOPPED field. */
N#define QDEC_INTENSET_STOPPED_Msk (0x1UL << QDEC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define QDEC_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for DBLRDY event */
N#define QDEC_INTENSET_DBLRDY_Pos (3UL) /*!< Position of DBLRDY field. */
N#define QDEC_INTENSET_DBLRDY_Msk (0x1UL << QDEC_INTENSET_DBLRDY_Pos) /*!< Bit mask of DBLRDY field. */
N#define QDEC_INTENSET_DBLRDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENSET_DBLRDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENSET_DBLRDY_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for ACCOF event */
N#define QDEC_INTENSET_ACCOF_Pos (2UL) /*!< Position of ACCOF field. */
N#define QDEC_INTENSET_ACCOF_Msk (0x1UL << QDEC_INTENSET_ACCOF_Pos) /*!< Bit mask of ACCOF field. */
N#define QDEC_INTENSET_ACCOF_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENSET_ACCOF_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENSET_ACCOF_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for REPORTRDY event */
N#define QDEC_INTENSET_REPORTRDY_Pos (1UL) /*!< Position of REPORTRDY field. */
N#define QDEC_INTENSET_REPORTRDY_Msk (0x1UL << QDEC_INTENSET_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field. */
N#define QDEC_INTENSET_REPORTRDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENSET_REPORTRDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENSET_REPORTRDY_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for SAMPLERDY event */
N#define QDEC_INTENSET_SAMPLERDY_Pos (0UL) /*!< Position of SAMPLERDY field. */
N#define QDEC_INTENSET_SAMPLERDY_Msk (0x1UL << QDEC_INTENSET_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field. */
N#define QDEC_INTENSET_SAMPLERDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENSET_SAMPLERDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENSET_SAMPLERDY_Set (1UL) /*!< Enable */
N
N/* Register: QDEC_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 4 : Write '1' to Disable interrupt for STOPPED event */
N#define QDEC_INTENCLR_STOPPED_Pos (4UL) /*!< Position of STOPPED field. */
N#define QDEC_INTENCLR_STOPPED_Msk (0x1UL << QDEC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define QDEC_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for DBLRDY event */
N#define QDEC_INTENCLR_DBLRDY_Pos (3UL) /*!< Position of DBLRDY field. */
N#define QDEC_INTENCLR_DBLRDY_Msk (0x1UL << QDEC_INTENCLR_DBLRDY_Pos) /*!< Bit mask of DBLRDY field. */
N#define QDEC_INTENCLR_DBLRDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENCLR_DBLRDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENCLR_DBLRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for ACCOF event */
N#define QDEC_INTENCLR_ACCOF_Pos (2UL) /*!< Position of ACCOF field. */
N#define QDEC_INTENCLR_ACCOF_Msk (0x1UL << QDEC_INTENCLR_ACCOF_Pos) /*!< Bit mask of ACCOF field. */
N#define QDEC_INTENCLR_ACCOF_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENCLR_ACCOF_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENCLR_ACCOF_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for REPORTRDY event */
N#define QDEC_INTENCLR_REPORTRDY_Pos (1UL) /*!< Position of REPORTRDY field. */
N#define QDEC_INTENCLR_REPORTRDY_Msk (0x1UL << QDEC_INTENCLR_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field. */
N#define QDEC_INTENCLR_REPORTRDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENCLR_REPORTRDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENCLR_REPORTRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for SAMPLERDY event */
N#define QDEC_INTENCLR_SAMPLERDY_Pos (0UL) /*!< Position of SAMPLERDY field. */
N#define QDEC_INTENCLR_SAMPLERDY_Msk (0x1UL << QDEC_INTENCLR_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field. */
N#define QDEC_INTENCLR_SAMPLERDY_Disabled (0UL) /*!< Read: Disabled */
N#define QDEC_INTENCLR_SAMPLERDY_Enabled (1UL) /*!< Read: Enabled */
N#define QDEC_INTENCLR_SAMPLERDY_Clear (1UL) /*!< Disable */
N
N/* Register: QDEC_ENABLE */
N/* Description: Enable the quadrature decoder */
N
N/* Bit 0 : Enable or disable the quadrature decoder */
N#define QDEC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define QDEC_ENABLE_ENABLE_Msk (0x1UL << QDEC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define QDEC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
N#define QDEC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
N
N/* Register: QDEC_LEDPOL */
N/* Description: LED output pin polarity */
N
N/* Bit 0 : LED output pin polarity */
N#define QDEC_LEDPOL_LEDPOL_Pos (0UL) /*!< Position of LEDPOL field. */
N#define QDEC_LEDPOL_LEDPOL_Msk (0x1UL << QDEC_LEDPOL_LEDPOL_Pos) /*!< Bit mask of LEDPOL field. */
N#define QDEC_LEDPOL_LEDPOL_ActiveLow (0UL) /*!< Led active on output pin low */
N#define QDEC_LEDPOL_LEDPOL_ActiveHigh (1UL) /*!< Led active on output pin high */
N
N/* Register: QDEC_SAMPLEPER */
N/* Description: Sample period */
N
N/* Bits 3..0 : Sample period. The SAMPLE register will be updated for every new sample */
N#define QDEC_SAMPLEPER_SAMPLEPER_Pos (0UL) /*!< Position of SAMPLEPER field. */
N#define QDEC_SAMPLEPER_SAMPLEPER_Msk (0xFUL << QDEC_SAMPLEPER_SAMPLEPER_Pos) /*!< Bit mask of SAMPLEPER field. */
N#define QDEC_SAMPLEPER_SAMPLEPER_128us (0UL) /*!< 128 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_256us (1UL) /*!< 256 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_512us (2UL) /*!< 512 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_1024us (3UL) /*!< 1024 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_2048us (4UL) /*!< 2048 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_4096us (5UL) /*!< 4096 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_8192us (6UL) /*!< 8192 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_16384us (7UL) /*!< 16384 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_32ms (8UL) /*!< 32768 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_65ms (9UL) /*!< 65536 us */
N#define QDEC_SAMPLEPER_SAMPLEPER_131ms (10UL) /*!< 131072 us */
N
N/* Register: QDEC_SAMPLE */
N/* Description: Motion sample value */
N
N/* Bits 31..0 : Last motion sample */
N#define QDEC_SAMPLE_SAMPLE_Pos (0UL) /*!< Position of SAMPLE field. */
N#define QDEC_SAMPLE_SAMPLE_Msk (0xFFFFFFFFUL << QDEC_SAMPLE_SAMPLE_Pos) /*!< Bit mask of SAMPLE field. */
N
N/* Register: QDEC_REPORTPER */
N/* Description: Number of samples to be taken before REPORTRDY and DBLRDY events can be generated */
N
N/* Bits 3..0 : Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY events can be generated */
N#define QDEC_REPORTPER_REPORTPER_Pos (0UL) /*!< Position of REPORTPER field. */
N#define QDEC_REPORTPER_REPORTPER_Msk (0xFUL << QDEC_REPORTPER_REPORTPER_Pos) /*!< Bit mask of REPORTPER field. */
N#define QDEC_REPORTPER_REPORTPER_10Smpl (0UL) /*!< 10 samples / report */
N#define QDEC_REPORTPER_REPORTPER_40Smpl (1UL) /*!< 40 samples / report */
N#define QDEC_REPORTPER_REPORTPER_80Smpl (2UL) /*!< 80 samples / report */
N#define QDEC_REPORTPER_REPORTPER_120Smpl (3UL) /*!< 120 samples / report */
N#define QDEC_REPORTPER_REPORTPER_160Smpl (4UL) /*!< 160 samples / report */
N#define QDEC_REPORTPER_REPORTPER_200Smpl (5UL) /*!< 200 samples / report */
N#define QDEC_REPORTPER_REPORTPER_240Smpl (6UL) /*!< 240 samples / report */
N#define QDEC_REPORTPER_REPORTPER_280Smpl (7UL) /*!< 280 samples / report */
N#define QDEC_REPORTPER_REPORTPER_1Smpl (8UL) /*!< 1 sample / report */
N
N/* Register: QDEC_ACC */
N/* Description: Register accumulating the valid transitions */
N
N/* Bits 31..0 : Register accumulating all valid samples (not double transition) read from the SAMPLE register */
N#define QDEC_ACC_ACC_Pos (0UL) /*!< Position of ACC field. */
N#define QDEC_ACC_ACC_Msk (0xFFFFFFFFUL << QDEC_ACC_ACC_Pos) /*!< Bit mask of ACC field. */
N
N/* Register: QDEC_ACCREAD */
N/* Description: Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC task */
N
N/* Bits 31..0 : Snapshot of the ACC register. */
N#define QDEC_ACCREAD_ACCREAD_Pos (0UL) /*!< Position of ACCREAD field. */
N#define QDEC_ACCREAD_ACCREAD_Msk (0xFFFFFFFFUL << QDEC_ACCREAD_ACCREAD_Pos) /*!< Bit mask of ACCREAD field. */
N
N/* Register: QDEC_PSEL_LED */
N/* Description: Pin select for LED signal */
N
N/* Bit 31 : Connection */
N#define QDEC_PSEL_LED_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define QDEC_PSEL_LED_CONNECT_Msk (0x1UL << QDEC_PSEL_LED_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define QDEC_PSEL_LED_CONNECT_Connected (0UL) /*!< Connect */
N#define QDEC_PSEL_LED_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define QDEC_PSEL_LED_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define QDEC_PSEL_LED_PIN_Msk (0x1FUL << QDEC_PSEL_LED_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: QDEC_PSEL_A */
N/* Description: Pin select for A signal */
N
N/* Bit 31 : Connection */
N#define QDEC_PSEL_A_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define QDEC_PSEL_A_CONNECT_Msk (0x1UL << QDEC_PSEL_A_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define QDEC_PSEL_A_CONNECT_Connected (0UL) /*!< Connect */
N#define QDEC_PSEL_A_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define QDEC_PSEL_A_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define QDEC_PSEL_A_PIN_Msk (0x1FUL << QDEC_PSEL_A_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: QDEC_PSEL_B */
N/* Description: Pin select for B signal */
N
N/* Bit 31 : Connection */
N#define QDEC_PSEL_B_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define QDEC_PSEL_B_CONNECT_Msk (0x1UL << QDEC_PSEL_B_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define QDEC_PSEL_B_CONNECT_Connected (0UL) /*!< Connect */
N#define QDEC_PSEL_B_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define QDEC_PSEL_B_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define QDEC_PSEL_B_PIN_Msk (0x1FUL << QDEC_PSEL_B_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: QDEC_DBFEN */
N/* Description: Enable input debounce filters */
N
N/* Bit 0 : Enable input debounce filters */
N#define QDEC_DBFEN_DBFEN_Pos (0UL) /*!< Position of DBFEN field. */
N#define QDEC_DBFEN_DBFEN_Msk (0x1UL << QDEC_DBFEN_DBFEN_Pos) /*!< Bit mask of DBFEN field. */
N#define QDEC_DBFEN_DBFEN_Disabled (0UL) /*!< Debounce input filters disabled */
N#define QDEC_DBFEN_DBFEN_Enabled (1UL) /*!< Debounce input filters enabled */
N
N/* Register: QDEC_LEDPRE */
N/* Description: Time period the LED is switched ON prior to sampling */
N
N/* Bits 8..0 : Period in us the LED is switched on prior to sampling */
N#define QDEC_LEDPRE_LEDPRE_Pos (0UL) /*!< Position of LEDPRE field. */
N#define QDEC_LEDPRE_LEDPRE_Msk (0x1FFUL << QDEC_LEDPRE_LEDPRE_Pos) /*!< Bit mask of LEDPRE field. */
N
N/* Register: QDEC_ACCDBL */
N/* Description: Register accumulating the number of detected double transitions */
N
N/* Bits 3..0 : Register accumulating the number of detected double or illegal transitions. ( SAMPLE = 2 ). */
N#define QDEC_ACCDBL_ACCDBL_Pos (0UL) /*!< Position of ACCDBL field. */
N#define QDEC_ACCDBL_ACCDBL_Msk (0xFUL << QDEC_ACCDBL_ACCDBL_Pos) /*!< Bit mask of ACCDBL field. */
N
N/* Register: QDEC_ACCDBLREAD */
N/* Description: Snapshot of the ACCDBL, updated by the READCLRACC or RDCLRDBL task */
N
N/* Bits 3..0 : Snapshot of the ACCDBL register. This field is updated when the READCLRACC or RDCLRDBL task is triggered. */
N#define QDEC_ACCDBLREAD_ACCDBLREAD_Pos (0UL) /*!< Position of ACCDBLREAD field. */
N#define QDEC_ACCDBLREAD_ACCDBLREAD_Msk (0xFUL << QDEC_ACCDBLREAD_ACCDBLREAD_Pos) /*!< Bit mask of ACCDBLREAD field. */
N
N
N/* Peripheral: RADIO */
N/* Description: 2.4 GHz Radio */
N
N/* Register: RADIO_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 8 : Shortcut between DISABLED event and RSSISTOP task */
N#define RADIO_SHORTS_DISABLED_RSSISTOP_Pos (8UL) /*!< Position of DISABLED_RSSISTOP field. */
N#define RADIO_SHORTS_DISABLED_RSSISTOP_Msk (0x1UL << RADIO_SHORTS_DISABLED_RSSISTOP_Pos) /*!< Bit mask of DISABLED_RSSISTOP field. */
N#define RADIO_SHORTS_DISABLED_RSSISTOP_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_DISABLED_RSSISTOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 6 : Shortcut between ADDRESS event and BCSTART task */
N#define RADIO_SHORTS_ADDRESS_BCSTART_Pos (6UL) /*!< Position of ADDRESS_BCSTART field. */
N#define RADIO_SHORTS_ADDRESS_BCSTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_BCSTART_Pos) /*!< Bit mask of ADDRESS_BCSTART field. */
N#define RADIO_SHORTS_ADDRESS_BCSTART_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_ADDRESS_BCSTART_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 5 : Shortcut between END event and START task */
N#define RADIO_SHORTS_END_START_Pos (5UL) /*!< Position of END_START field. */
N#define RADIO_SHORTS_END_START_Msk (0x1UL << RADIO_SHORTS_END_START_Pos) /*!< Bit mask of END_START field. */
N#define RADIO_SHORTS_END_START_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_END_START_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 4 : Shortcut between ADDRESS event and RSSISTART task */
N#define RADIO_SHORTS_ADDRESS_RSSISTART_Pos (4UL) /*!< Position of ADDRESS_RSSISTART field. */
N#define RADIO_SHORTS_ADDRESS_RSSISTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_RSSISTART_Pos) /*!< Bit mask of ADDRESS_RSSISTART field. */
N#define RADIO_SHORTS_ADDRESS_RSSISTART_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_ADDRESS_RSSISTART_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between DISABLED event and RXEN task */
N#define RADIO_SHORTS_DISABLED_RXEN_Pos (3UL) /*!< Position of DISABLED_RXEN field. */
N#define RADIO_SHORTS_DISABLED_RXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_RXEN_Pos) /*!< Bit mask of DISABLED_RXEN field. */
N#define RADIO_SHORTS_DISABLED_RXEN_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_DISABLED_RXEN_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between DISABLED event and TXEN task */
N#define RADIO_SHORTS_DISABLED_TXEN_Pos (2UL) /*!< Position of DISABLED_TXEN field. */
N#define RADIO_SHORTS_DISABLED_TXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_TXEN_Pos) /*!< Bit mask of DISABLED_TXEN field. */
N#define RADIO_SHORTS_DISABLED_TXEN_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_DISABLED_TXEN_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between END event and DISABLE task */
N#define RADIO_SHORTS_END_DISABLE_Pos (1UL) /*!< Position of END_DISABLE field. */
N#define RADIO_SHORTS_END_DISABLE_Msk (0x1UL << RADIO_SHORTS_END_DISABLE_Pos) /*!< Bit mask of END_DISABLE field. */
N#define RADIO_SHORTS_END_DISABLE_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_END_DISABLE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between READY event and START task */
N#define RADIO_SHORTS_READY_START_Pos (0UL) /*!< Position of READY_START field. */
N#define RADIO_SHORTS_READY_START_Msk (0x1UL << RADIO_SHORTS_READY_START_Pos) /*!< Bit mask of READY_START field. */
N#define RADIO_SHORTS_READY_START_Disabled (0UL) /*!< Disable shortcut */
N#define RADIO_SHORTS_READY_START_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: RADIO_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 13 : Write '1' to Enable interrupt for CRCERROR event */
N#define RADIO_INTENSET_CRCERROR_Pos (13UL) /*!< Position of CRCERROR field. */
N#define RADIO_INTENSET_CRCERROR_Msk (0x1UL << RADIO_INTENSET_CRCERROR_Pos) /*!< Bit mask of CRCERROR field. */
N#define RADIO_INTENSET_CRCERROR_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_CRCERROR_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_CRCERROR_Set (1UL) /*!< Enable */
N
N/* Bit 12 : Write '1' to Enable interrupt for CRCOK event */
N#define RADIO_INTENSET_CRCOK_Pos (12UL) /*!< Position of CRCOK field. */
N#define RADIO_INTENSET_CRCOK_Msk (0x1UL << RADIO_INTENSET_CRCOK_Pos) /*!< Bit mask of CRCOK field. */
N#define RADIO_INTENSET_CRCOK_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_CRCOK_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_CRCOK_Set (1UL) /*!< Enable */
N
N/* Bit 10 : Write '1' to Enable interrupt for BCMATCH event */
N#define RADIO_INTENSET_BCMATCH_Pos (10UL) /*!< Position of BCMATCH field. */
N#define RADIO_INTENSET_BCMATCH_Msk (0x1UL << RADIO_INTENSET_BCMATCH_Pos) /*!< Bit mask of BCMATCH field. */
N#define RADIO_INTENSET_BCMATCH_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_BCMATCH_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_BCMATCH_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for RSSIEND event */
N#define RADIO_INTENSET_RSSIEND_Pos (7UL) /*!< Position of RSSIEND field. */
N#define RADIO_INTENSET_RSSIEND_Msk (0x1UL << RADIO_INTENSET_RSSIEND_Pos) /*!< Bit mask of RSSIEND field. */
N#define RADIO_INTENSET_RSSIEND_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_RSSIEND_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_RSSIEND_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for DEVMISS event */
N#define RADIO_INTENSET_DEVMISS_Pos (6UL) /*!< Position of DEVMISS field. */
N#define RADIO_INTENSET_DEVMISS_Msk (0x1UL << RADIO_INTENSET_DEVMISS_Pos) /*!< Bit mask of DEVMISS field. */
N#define RADIO_INTENSET_DEVMISS_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_DEVMISS_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_DEVMISS_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for DEVMATCH event */
N#define RADIO_INTENSET_DEVMATCH_Pos (5UL) /*!< Position of DEVMATCH field. */
N#define RADIO_INTENSET_DEVMATCH_Msk (0x1UL << RADIO_INTENSET_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field. */
N#define RADIO_INTENSET_DEVMATCH_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_DEVMATCH_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_DEVMATCH_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for DISABLED event */
N#define RADIO_INTENSET_DISABLED_Pos (4UL) /*!< Position of DISABLED field. */
N#define RADIO_INTENSET_DISABLED_Msk (0x1UL << RADIO_INTENSET_DISABLED_Pos) /*!< Bit mask of DISABLED field. */
N#define RADIO_INTENSET_DISABLED_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_DISABLED_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_DISABLED_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for END event */
N#define RADIO_INTENSET_END_Pos (3UL) /*!< Position of END field. */
N#define RADIO_INTENSET_END_Msk (0x1UL << RADIO_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define RADIO_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for PAYLOAD event */
N#define RADIO_INTENSET_PAYLOAD_Pos (2UL) /*!< Position of PAYLOAD field. */
N#define RADIO_INTENSET_PAYLOAD_Msk (0x1UL << RADIO_INTENSET_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field. */
N#define RADIO_INTENSET_PAYLOAD_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_PAYLOAD_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_PAYLOAD_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for ADDRESS event */
N#define RADIO_INTENSET_ADDRESS_Pos (1UL) /*!< Position of ADDRESS field. */
N#define RADIO_INTENSET_ADDRESS_Msk (0x1UL << RADIO_INTENSET_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */
N#define RADIO_INTENSET_ADDRESS_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_ADDRESS_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_ADDRESS_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for READY event */
N#define RADIO_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
N#define RADIO_INTENSET_READY_Msk (0x1UL << RADIO_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
N#define RADIO_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENSET_READY_Set (1UL) /*!< Enable */
N
N/* Register: RADIO_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 13 : Write '1' to Disable interrupt for CRCERROR event */
N#define RADIO_INTENCLR_CRCERROR_Pos (13UL) /*!< Position of CRCERROR field. */
N#define RADIO_INTENCLR_CRCERROR_Msk (0x1UL << RADIO_INTENCLR_CRCERROR_Pos) /*!< Bit mask of CRCERROR field. */
N#define RADIO_INTENCLR_CRCERROR_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_CRCERROR_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_CRCERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 12 : Write '1' to Disable interrupt for CRCOK event */
N#define RADIO_INTENCLR_CRCOK_Pos (12UL) /*!< Position of CRCOK field. */
N#define RADIO_INTENCLR_CRCOK_Msk (0x1UL << RADIO_INTENCLR_CRCOK_Pos) /*!< Bit mask of CRCOK field. */
N#define RADIO_INTENCLR_CRCOK_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_CRCOK_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_CRCOK_Clear (1UL) /*!< Disable */
N
N/* Bit 10 : Write '1' to Disable interrupt for BCMATCH event */
N#define RADIO_INTENCLR_BCMATCH_Pos (10UL) /*!< Position of BCMATCH field. */
N#define RADIO_INTENCLR_BCMATCH_Msk (0x1UL << RADIO_INTENCLR_BCMATCH_Pos) /*!< Bit mask of BCMATCH field. */
N#define RADIO_INTENCLR_BCMATCH_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_BCMATCH_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_BCMATCH_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for RSSIEND event */
N#define RADIO_INTENCLR_RSSIEND_Pos (7UL) /*!< Position of RSSIEND field. */
N#define RADIO_INTENCLR_RSSIEND_Msk (0x1UL << RADIO_INTENCLR_RSSIEND_Pos) /*!< Bit mask of RSSIEND field. */
N#define RADIO_INTENCLR_RSSIEND_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_RSSIEND_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_RSSIEND_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for DEVMISS event */
N#define RADIO_INTENCLR_DEVMISS_Pos (6UL) /*!< Position of DEVMISS field. */
N#define RADIO_INTENCLR_DEVMISS_Msk (0x1UL << RADIO_INTENCLR_DEVMISS_Pos) /*!< Bit mask of DEVMISS field. */
N#define RADIO_INTENCLR_DEVMISS_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_DEVMISS_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_DEVMISS_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for DEVMATCH event */
N#define RADIO_INTENCLR_DEVMATCH_Pos (5UL) /*!< Position of DEVMATCH field. */
N#define RADIO_INTENCLR_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field. */
N#define RADIO_INTENCLR_DEVMATCH_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_DEVMATCH_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_DEVMATCH_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for DISABLED event */
N#define RADIO_INTENCLR_DISABLED_Pos (4UL) /*!< Position of DISABLED field. */
N#define RADIO_INTENCLR_DISABLED_Msk (0x1UL << RADIO_INTENCLR_DISABLED_Pos) /*!< Bit mask of DISABLED field. */
N#define RADIO_INTENCLR_DISABLED_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_DISABLED_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_DISABLED_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for END event */
N#define RADIO_INTENCLR_END_Pos (3UL) /*!< Position of END field. */
N#define RADIO_INTENCLR_END_Msk (0x1UL << RADIO_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define RADIO_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for PAYLOAD event */
N#define RADIO_INTENCLR_PAYLOAD_Pos (2UL) /*!< Position of PAYLOAD field. */
N#define RADIO_INTENCLR_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field. */
N#define RADIO_INTENCLR_PAYLOAD_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_PAYLOAD_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_PAYLOAD_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for ADDRESS event */
N#define RADIO_INTENCLR_ADDRESS_Pos (1UL) /*!< Position of ADDRESS field. */
N#define RADIO_INTENCLR_ADDRESS_Msk (0x1UL << RADIO_INTENCLR_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */
N#define RADIO_INTENCLR_ADDRESS_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_ADDRESS_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_ADDRESS_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for READY event */
N#define RADIO_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
N#define RADIO_INTENCLR_READY_Msk (0x1UL << RADIO_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
N#define RADIO_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
N#define RADIO_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
N#define RADIO_INTENCLR_READY_Clear (1UL) /*!< Disable */
N
N/* Register: RADIO_CRCSTATUS */
N/* Description: CRC status */
N
N/* Bit 0 : CRC status of packet received */
N#define RADIO_CRCSTATUS_CRCSTATUS_Pos (0UL) /*!< Position of CRCSTATUS field. */
N#define RADIO_CRCSTATUS_CRCSTATUS_Msk (0x1UL << RADIO_CRCSTATUS_CRCSTATUS_Pos) /*!< Bit mask of CRCSTATUS field. */
N#define RADIO_CRCSTATUS_CRCSTATUS_CRCError (0UL) /*!< Packet received with CRC error */
N#define RADIO_CRCSTATUS_CRCSTATUS_CRCOk (1UL) /*!< Packet received with CRC ok */
N
N/* Register: RADIO_RXMATCH */
N/* Description: Received address */
N
N/* Bits 2..0 : Received address */
N#define RADIO_RXMATCH_RXMATCH_Pos (0UL) /*!< Position of RXMATCH field. */
N#define RADIO_RXMATCH_RXMATCH_Msk (0x7UL << RADIO_RXMATCH_RXMATCH_Pos) /*!< Bit mask of RXMATCH field. */
N
N/* Register: RADIO_RXCRC */
N/* Description: CRC field of previously received packet */
N
N/* Bits 23..0 : CRC field of previously received packet */
N#define RADIO_RXCRC_RXCRC_Pos (0UL) /*!< Position of RXCRC field. */
N#define RADIO_RXCRC_RXCRC_Msk (0xFFFFFFUL << RADIO_RXCRC_RXCRC_Pos) /*!< Bit mask of RXCRC field. */
N
N/* Register: RADIO_DAI */
N/* Description: Device address match index */
N
N/* Bits 2..0 : Device address match index */
N#define RADIO_DAI_DAI_Pos (0UL) /*!< Position of DAI field. */
N#define RADIO_DAI_DAI_Msk (0x7UL << RADIO_DAI_DAI_Pos) /*!< Bit mask of DAI field. */
N
N/* Register: RADIO_PACKETPTR */
N/* Description: Packet pointer */
N
N/* Bits 31..0 : Packet pointer */
N#define RADIO_PACKETPTR_PACKETPTR_Pos (0UL) /*!< Position of PACKETPTR field. */
N#define RADIO_PACKETPTR_PACKETPTR_Msk (0xFFFFFFFFUL << RADIO_PACKETPTR_PACKETPTR_Pos) /*!< Bit mask of PACKETPTR field. */
N
N/* Register: RADIO_FREQUENCY */
N/* Description: Frequency */
N
N/* Bit 8 : Channel map selection. */
N#define RADIO_FREQUENCY_MAP_Pos (8UL) /*!< Position of MAP field. */
N#define RADIO_FREQUENCY_MAP_Msk (0x1UL << RADIO_FREQUENCY_MAP_Pos) /*!< Bit mask of MAP field. */
N#define RADIO_FREQUENCY_MAP_Default (0UL) /*!< Channel map between 2400 MHZ .. 2500 MHz */
N#define RADIO_FREQUENCY_MAP_Low (1UL) /*!< Channel map between 2360 MHZ .. 2460 MHz */
N
N/* Bits 6..0 : Radio channel frequency */
N#define RADIO_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
N#define RADIO_FREQUENCY_FREQUENCY_Msk (0x7FUL << RADIO_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
N
N/* Register: RADIO_TXPOWER */
N/* Description: Output power */
N
N/* Bits 7..0 : RADIO output power. */
N#define RADIO_TXPOWER_TXPOWER_Pos (0UL) /*!< Position of TXPOWER field. */
N#define RADIO_TXPOWER_TXPOWER_Msk (0xFFUL << RADIO_TXPOWER_TXPOWER_Pos) /*!< Bit mask of TXPOWER field. */
N#define RADIO_TXPOWER_TXPOWER_0dBm (0x00UL) /*!< 0 dBm */
N#define RADIO_TXPOWER_TXPOWER_Pos3dBm (0x03UL) /*!< +3 dBm */
N#define RADIO_TXPOWER_TXPOWER_Pos4dBm (0x04UL) /*!< +4 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg30dBm (0xD8UL) /*!< Deprecated enumerator -  -40 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg40dBm (0xD8UL) /*!< -40 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg20dBm (0xECUL) /*!< -20 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg16dBm (0xF0UL) /*!< -16 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg12dBm (0xF4UL) /*!< -12 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg8dBm (0xF8UL) /*!< -8 dBm */
N#define RADIO_TXPOWER_TXPOWER_Neg4dBm (0xFCUL) /*!< -4 dBm */
N
N/* Register: RADIO_MODE */
N/* Description: Data rate and modulation */
N
N/* Bits 3..0 : Radio data rate and modulation setting. The radio supports Frequency-shift Keying (FSK) modulation. */
N#define RADIO_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
N#define RADIO_MODE_MODE_Msk (0xFUL << RADIO_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
N#define RADIO_MODE_MODE_Nrf_1Mbit (0UL) /*!< 1 Mbit/s Nordic proprietary radio mode */
N#define RADIO_MODE_MODE_Nrf_2Mbit (1UL) /*!< 2 Mbit/s Nordic proprietary radio mode */
N#define RADIO_MODE_MODE_Nrf_250Kbit (2UL) /*!< Deprecated enumerator -  250 kbit/s Nordic proprietary radio mode */
N#define RADIO_MODE_MODE_Ble_1Mbit (3UL) /*!< 1 Mbit/s Bluetooth Low Energy */
N
N/* Register: RADIO_PCNF0 */
N/* Description: Packet configuration register 0 */
N
N/* Bit 24 : Length of preamble on air. Decision point: TASKS_START task */
N#define RADIO_PCNF0_PLEN_Pos (24UL) /*!< Position of PLEN field. */
N#define RADIO_PCNF0_PLEN_Msk (0x1UL << RADIO_PCNF0_PLEN_Pos) /*!< Bit mask of PLEN field. */
N#define RADIO_PCNF0_PLEN_8bit (0UL) /*!< 8-bit preamble */
N#define RADIO_PCNF0_PLEN_16bit (1UL) /*!< 16-bit preamble */
N
N/* Bit 20 : Include or exclude S1 field in RAM */
N#define RADIO_PCNF0_S1INCL_Pos (20UL) /*!< Position of S1INCL field. */
N#define RADIO_PCNF0_S1INCL_Msk (0x1UL << RADIO_PCNF0_S1INCL_Pos) /*!< Bit mask of S1INCL field. */
N#define RADIO_PCNF0_S1INCL_Automatic (0UL) /*!< Include S1 field in RAM only if S1LEN &gt; 0 */
N#define RADIO_PCNF0_S1INCL_Include (1UL) /*!< Always include S1 field in RAM independent of S1LEN */
N
N/* Bits 19..16 : Length on air of S1 field in number of bits. */
N#define RADIO_PCNF0_S1LEN_Pos (16UL) /*!< Position of S1LEN field. */
N#define RADIO_PCNF0_S1LEN_Msk (0xFUL << RADIO_PCNF0_S1LEN_Pos) /*!< Bit mask of S1LEN field. */
N
N/* Bit 8 : Length on air of S0 field in number of bytes. */
N#define RADIO_PCNF0_S0LEN_Pos (8UL) /*!< Position of S0LEN field. */
N#define RADIO_PCNF0_S0LEN_Msk (0x1UL << RADIO_PCNF0_S0LEN_Pos) /*!< Bit mask of S0LEN field. */
N
N/* Bits 3..0 : Length on air of LENGTH field in number of bits. */
N#define RADIO_PCNF0_LFLEN_Pos (0UL) /*!< Position of LFLEN field. */
N#define RADIO_PCNF0_LFLEN_Msk (0xFUL << RADIO_PCNF0_LFLEN_Pos) /*!< Bit mask of LFLEN field. */
N
N/* Register: RADIO_PCNF1 */
N/* Description: Packet configuration register 1 */
N
N/* Bit 25 : Enable or disable packet whitening */
N#define RADIO_PCNF1_WHITEEN_Pos (25UL) /*!< Position of WHITEEN field. */
N#define RADIO_PCNF1_WHITEEN_Msk (0x1UL << RADIO_PCNF1_WHITEEN_Pos) /*!< Bit mask of WHITEEN field. */
N#define RADIO_PCNF1_WHITEEN_Disabled (0UL) /*!< Disable */
N#define RADIO_PCNF1_WHITEEN_Enabled (1UL) /*!< Enable */
N
N/* Bit 24 : On air endianness of packet, this applies to the S0, LENGTH, S1 and the PAYLOAD fields. */
N#define RADIO_PCNF1_ENDIAN_Pos (24UL) /*!< Position of ENDIAN field. */
N#define RADIO_PCNF1_ENDIAN_Msk (0x1UL << RADIO_PCNF1_ENDIAN_Pos) /*!< Bit mask of ENDIAN field. */
N#define RADIO_PCNF1_ENDIAN_Little (0UL) /*!< Least Significant bit on air first */
N#define RADIO_PCNF1_ENDIAN_Big (1UL) /*!< Most significant bit on air first */
N
N/* Bits 18..16 : Base address length in number of bytes */
N#define RADIO_PCNF1_BALEN_Pos (16UL) /*!< Position of BALEN field. */
N#define RADIO_PCNF1_BALEN_Msk (0x7UL << RADIO_PCNF1_BALEN_Pos) /*!< Bit mask of BALEN field. */
N
N/* Bits 15..8 : Static length in number of bytes */
N#define RADIO_PCNF1_STATLEN_Pos (8UL) /*!< Position of STATLEN field. */
N#define RADIO_PCNF1_STATLEN_Msk (0xFFUL << RADIO_PCNF1_STATLEN_Pos) /*!< Bit mask of STATLEN field. */
N
N/* Bits 7..0 : Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate the payload to MAXLEN. */
N#define RADIO_PCNF1_MAXLEN_Pos (0UL) /*!< Position of MAXLEN field. */
N#define RADIO_PCNF1_MAXLEN_Msk (0xFFUL << RADIO_PCNF1_MAXLEN_Pos) /*!< Bit mask of MAXLEN field. */
N
N/* Register: RADIO_BASE0 */
N/* Description: Base address 0 */
N
N/* Bits 31..0 : Base address 0 */
N#define RADIO_BASE0_BASE0_Pos (0UL) /*!< Position of BASE0 field. */
N#define RADIO_BASE0_BASE0_Msk (0xFFFFFFFFUL << RADIO_BASE0_BASE0_Pos) /*!< Bit mask of BASE0 field. */
N
N/* Register: RADIO_BASE1 */
N/* Description: Base address 1 */
N
N/* Bits 31..0 : Base address 1 */
N#define RADIO_BASE1_BASE1_Pos (0UL) /*!< Position of BASE1 field. */
N#define RADIO_BASE1_BASE1_Msk (0xFFFFFFFFUL << RADIO_BASE1_BASE1_Pos) /*!< Bit mask of BASE1 field. */
N
N/* Register: RADIO_PREFIX0 */
N/* Description: Prefixes bytes for logical addresses 0-3 */
N
N/* Bits 31..24 : Address prefix 3. */
N#define RADIO_PREFIX0_AP3_Pos (24UL) /*!< Position of AP3 field. */
N#define RADIO_PREFIX0_AP3_Msk (0xFFUL << RADIO_PREFIX0_AP3_Pos) /*!< Bit mask of AP3 field. */
N
N/* Bits 23..16 : Address prefix 2. */
N#define RADIO_PREFIX0_AP2_Pos (16UL) /*!< Position of AP2 field. */
N#define RADIO_PREFIX0_AP2_Msk (0xFFUL << RADIO_PREFIX0_AP2_Pos) /*!< Bit mask of AP2 field. */
N
N/* Bits 15..8 : Address prefix 1. */
N#define RADIO_PREFIX0_AP1_Pos (8UL) /*!< Position of AP1 field. */
N#define RADIO_PREFIX0_AP1_Msk (0xFFUL << RADIO_PREFIX0_AP1_Pos) /*!< Bit mask of AP1 field. */
N
N/* Bits 7..0 : Address prefix 0. */
N#define RADIO_PREFIX0_AP0_Pos (0UL) /*!< Position of AP0 field. */
N#define RADIO_PREFIX0_AP0_Msk (0xFFUL << RADIO_PREFIX0_AP0_Pos) /*!< Bit mask of AP0 field. */
N
N/* Register: RADIO_PREFIX1 */
N/* Description: Prefixes bytes for logical addresses 4-7 */
N
N/* Bits 31..24 : Address prefix 7. */
N#define RADIO_PREFIX1_AP7_Pos (24UL) /*!< Position of AP7 field. */
N#define RADIO_PREFIX1_AP7_Msk (0xFFUL << RADIO_PREFIX1_AP7_Pos) /*!< Bit mask of AP7 field. */
N
N/* Bits 23..16 : Address prefix 6. */
N#define RADIO_PREFIX1_AP6_Pos (16UL) /*!< Position of AP6 field. */
N#define RADIO_PREFIX1_AP6_Msk (0xFFUL << RADIO_PREFIX1_AP6_Pos) /*!< Bit mask of AP6 field. */
N
N/* Bits 15..8 : Address prefix 5. */
N#define RADIO_PREFIX1_AP5_Pos (8UL) /*!< Position of AP5 field. */
N#define RADIO_PREFIX1_AP5_Msk (0xFFUL << RADIO_PREFIX1_AP5_Pos) /*!< Bit mask of AP5 field. */
N
N/* Bits 7..0 : Address prefix 4. */
N#define RADIO_PREFIX1_AP4_Pos (0UL) /*!< Position of AP4 field. */
N#define RADIO_PREFIX1_AP4_Msk (0xFFUL << RADIO_PREFIX1_AP4_Pos) /*!< Bit mask of AP4 field. */
N
N/* Register: RADIO_TXADDRESS */
N/* Description: Transmit address select */
N
N/* Bits 2..0 : Transmit address select */
N#define RADIO_TXADDRESS_TXADDRESS_Pos (0UL) /*!< Position of TXADDRESS field. */
N#define RADIO_TXADDRESS_TXADDRESS_Msk (0x7UL << RADIO_TXADDRESS_TXADDRESS_Pos) /*!< Bit mask of TXADDRESS field. */
N
N/* Register: RADIO_RXADDRESSES */
N/* Description: Receive address select */
N
N/* Bit 7 : Enable or disable reception on logical address 7. */
N#define RADIO_RXADDRESSES_ADDR7_Pos (7UL) /*!< Position of ADDR7 field. */
N#define RADIO_RXADDRESSES_ADDR7_Msk (0x1UL << RADIO_RXADDRESSES_ADDR7_Pos) /*!< Bit mask of ADDR7 field. */
N#define RADIO_RXADDRESSES_ADDR7_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR7_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable reception on logical address 6. */
N#define RADIO_RXADDRESSES_ADDR6_Pos (6UL) /*!< Position of ADDR6 field. */
N#define RADIO_RXADDRESSES_ADDR6_Msk (0x1UL << RADIO_RXADDRESSES_ADDR6_Pos) /*!< Bit mask of ADDR6 field. */
N#define RADIO_RXADDRESSES_ADDR6_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR6_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable reception on logical address 5. */
N#define RADIO_RXADDRESSES_ADDR5_Pos (5UL) /*!< Position of ADDR5 field. */
N#define RADIO_RXADDRESSES_ADDR5_Msk (0x1UL << RADIO_RXADDRESSES_ADDR5_Pos) /*!< Bit mask of ADDR5 field. */
N#define RADIO_RXADDRESSES_ADDR5_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR5_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable reception on logical address 4. */
N#define RADIO_RXADDRESSES_ADDR4_Pos (4UL) /*!< Position of ADDR4 field. */
N#define RADIO_RXADDRESSES_ADDR4_Msk (0x1UL << RADIO_RXADDRESSES_ADDR4_Pos) /*!< Bit mask of ADDR4 field. */
N#define RADIO_RXADDRESSES_ADDR4_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR4_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable reception on logical address 3. */
N#define RADIO_RXADDRESSES_ADDR3_Pos (3UL) /*!< Position of ADDR3 field. */
N#define RADIO_RXADDRESSES_ADDR3_Msk (0x1UL << RADIO_RXADDRESSES_ADDR3_Pos) /*!< Bit mask of ADDR3 field. */
N#define RADIO_RXADDRESSES_ADDR3_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR3_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable reception on logical address 2. */
N#define RADIO_RXADDRESSES_ADDR2_Pos (2UL) /*!< Position of ADDR2 field. */
N#define RADIO_RXADDRESSES_ADDR2_Msk (0x1UL << RADIO_RXADDRESSES_ADDR2_Pos) /*!< Bit mask of ADDR2 field. */
N#define RADIO_RXADDRESSES_ADDR2_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR2_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable reception on logical address 1. */
N#define RADIO_RXADDRESSES_ADDR1_Pos (1UL) /*!< Position of ADDR1 field. */
N#define RADIO_RXADDRESSES_ADDR1_Msk (0x1UL << RADIO_RXADDRESSES_ADDR1_Pos) /*!< Bit mask of ADDR1 field. */
N#define RADIO_RXADDRESSES_ADDR1_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR1_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable reception on logical address 0. */
N#define RADIO_RXADDRESSES_ADDR0_Pos (0UL) /*!< Position of ADDR0 field. */
N#define RADIO_RXADDRESSES_ADDR0_Msk (0x1UL << RADIO_RXADDRESSES_ADDR0_Pos) /*!< Bit mask of ADDR0 field. */
N#define RADIO_RXADDRESSES_ADDR0_Disabled (0UL) /*!< Disable */
N#define RADIO_RXADDRESSES_ADDR0_Enabled (1UL) /*!< Enable */
N
N/* Register: RADIO_CRCCNF */
N/* Description: CRC configuration */
N
N/* Bit 8 : Include or exclude packet address field out of CRC calculation. */
N#define RADIO_CRCCNF_SKIPADDR_Pos (8UL) /*!< Position of SKIPADDR field. */
N#define RADIO_CRCCNF_SKIPADDR_Msk (0x1UL << RADIO_CRCCNF_SKIPADDR_Pos) /*!< Bit mask of SKIPADDR field. */
N#define RADIO_CRCCNF_SKIPADDR_Include (0UL) /*!< CRC calculation includes address field */
N#define RADIO_CRCCNF_SKIPADDR_Skip (1UL) /*!< CRC calculation does not include address field. The CRC calculation will start at the first byte after the address. */
N
N/* Bits 1..0 : CRC length in number of bytes. */
N#define RADIO_CRCCNF_LEN_Pos (0UL) /*!< Position of LEN field. */
N#define RADIO_CRCCNF_LEN_Msk (0x3UL << RADIO_CRCCNF_LEN_Pos) /*!< Bit mask of LEN field. */
N#define RADIO_CRCCNF_LEN_Disabled (0UL) /*!< CRC length is zero and CRC calculation is disabled */
N#define RADIO_CRCCNF_LEN_One (1UL) /*!< CRC length is one byte and CRC calculation is enabled */
N#define RADIO_CRCCNF_LEN_Two (2UL) /*!< CRC length is two bytes and CRC calculation is enabled */
N#define RADIO_CRCCNF_LEN_Three (3UL) /*!< CRC length is three bytes and CRC calculation is enabled */
N
N/* Register: RADIO_CRCPOLY */
N/* Description: CRC polynomial */
N
N/* Bits 23..0 : CRC polynomial */
N#define RADIO_CRCPOLY_CRCPOLY_Pos (0UL) /*!< Position of CRCPOLY field. */
N#define RADIO_CRCPOLY_CRCPOLY_Msk (0xFFFFFFUL << RADIO_CRCPOLY_CRCPOLY_Pos) /*!< Bit mask of CRCPOLY field. */
N
N/* Register: RADIO_CRCINIT */
N/* Description: CRC initial value */
N
N/* Bits 23..0 : CRC initial value */
N#define RADIO_CRCINIT_CRCINIT_Pos (0UL) /*!< Position of CRCINIT field. */
N#define RADIO_CRCINIT_CRCINIT_Msk (0xFFFFFFUL << RADIO_CRCINIT_CRCINIT_Pos) /*!< Bit mask of CRCINIT field. */
N
N/* Register: RADIO_TIFS */
N/* Description: Inter Frame Spacing in us */
N
N/* Bits 7..0 : Inter Frame Spacing in us */
N#define RADIO_TIFS_TIFS_Pos (0UL) /*!< Position of TIFS field. */
N#define RADIO_TIFS_TIFS_Msk (0xFFUL << RADIO_TIFS_TIFS_Pos) /*!< Bit mask of TIFS field. */
N
N/* Register: RADIO_RSSISAMPLE */
N/* Description: RSSI sample */
N
N/* Bits 6..0 : RSSI sample */
N#define RADIO_RSSISAMPLE_RSSISAMPLE_Pos (0UL) /*!< Position of RSSISAMPLE field. */
N#define RADIO_RSSISAMPLE_RSSISAMPLE_Msk (0x7FUL << RADIO_RSSISAMPLE_RSSISAMPLE_Pos) /*!< Bit mask of RSSISAMPLE field. */
N
N/* Register: RADIO_STATE */
N/* Description: Current radio state */
N
N/* Bits 3..0 : Current radio state */
N#define RADIO_STATE_STATE_Pos (0UL) /*!< Position of STATE field. */
N#define RADIO_STATE_STATE_Msk (0xFUL << RADIO_STATE_STATE_Pos) /*!< Bit mask of STATE field. */
N#define RADIO_STATE_STATE_Disabled (0UL) /*!< RADIO is in the Disabled state */
N#define RADIO_STATE_STATE_RxRu (1UL) /*!< RADIO is in the RXRU state */
N#define RADIO_STATE_STATE_RxIdle (2UL) /*!< RADIO is in the RXIDLE state */
N#define RADIO_STATE_STATE_Rx (3UL) /*!< RADIO is in the RX state */
N#define RADIO_STATE_STATE_RxDisable (4UL) /*!< RADIO is in the RXDISABLED state */
N#define RADIO_STATE_STATE_TxRu (9UL) /*!< RADIO is in the TXRU state */
N#define RADIO_STATE_STATE_TxIdle (10UL) /*!< RADIO is in the TXIDLE state */
N#define RADIO_STATE_STATE_Tx (11UL) /*!< RADIO is in the TX state */
N#define RADIO_STATE_STATE_TxDisable (12UL) /*!< RADIO is in the TXDISABLED state */
N
N/* Register: RADIO_DATAWHITEIV */
N/* Description: Data whitening initial value */
N
N/* Bits 6..0 : Data whitening initial value. Bit 6 is hard-wired to '1', writing '0' to it has no effect, and it will always be read back and used by the device as '1'. */
N#define RADIO_DATAWHITEIV_DATAWHITEIV_Pos (0UL) /*!< Position of DATAWHITEIV field. */
N#define RADIO_DATAWHITEIV_DATAWHITEIV_Msk (0x7FUL << RADIO_DATAWHITEIV_DATAWHITEIV_Pos) /*!< Bit mask of DATAWHITEIV field. */
N
N/* Register: RADIO_BCC */
N/* Description: Bit counter compare */
N
N/* Bits 31..0 : Bit counter compare */
N#define RADIO_BCC_BCC_Pos (0UL) /*!< Position of BCC field. */
N#define RADIO_BCC_BCC_Msk (0xFFFFFFFFUL << RADIO_BCC_BCC_Pos) /*!< Bit mask of BCC field. */
N
N/* Register: RADIO_DAB */
N/* Description: Description collection[0]:  Device address base segment 0 */
N
N/* Bits 31..0 : Device address base segment 0 */
N#define RADIO_DAB_DAB_Pos (0UL) /*!< Position of DAB field. */
N#define RADIO_DAB_DAB_Msk (0xFFFFFFFFUL << RADIO_DAB_DAB_Pos) /*!< Bit mask of DAB field. */
N
N/* Register: RADIO_DAP */
N/* Description: Description collection[0]:  Device address prefix 0 */
N
N/* Bits 15..0 : Device address prefix 0 */
N#define RADIO_DAP_DAP_Pos (0UL) /*!< Position of DAP field. */
N#define RADIO_DAP_DAP_Msk (0xFFFFUL << RADIO_DAP_DAP_Pos) /*!< Bit mask of DAP field. */
N
N/* Register: RADIO_DACNF */
N/* Description: Device address match configuration */
N
N/* Bit 15 : TxAdd for device address 7 */
N#define RADIO_DACNF_TXADD7_Pos (15UL) /*!< Position of TXADD7 field. */
N#define RADIO_DACNF_TXADD7_Msk (0x1UL << RADIO_DACNF_TXADD7_Pos) /*!< Bit mask of TXADD7 field. */
N
N/* Bit 14 : TxAdd for device address 6 */
N#define RADIO_DACNF_TXADD6_Pos (14UL) /*!< Position of TXADD6 field. */
N#define RADIO_DACNF_TXADD6_Msk (0x1UL << RADIO_DACNF_TXADD6_Pos) /*!< Bit mask of TXADD6 field. */
N
N/* Bit 13 : TxAdd for device address 5 */
N#define RADIO_DACNF_TXADD5_Pos (13UL) /*!< Position of TXADD5 field. */
N#define RADIO_DACNF_TXADD5_Msk (0x1UL << RADIO_DACNF_TXADD5_Pos) /*!< Bit mask of TXADD5 field. */
N
N/* Bit 12 : TxAdd for device address 4 */
N#define RADIO_DACNF_TXADD4_Pos (12UL) /*!< Position of TXADD4 field. */
N#define RADIO_DACNF_TXADD4_Msk (0x1UL << RADIO_DACNF_TXADD4_Pos) /*!< Bit mask of TXADD4 field. */
N
N/* Bit 11 : TxAdd for device address 3 */
N#define RADIO_DACNF_TXADD3_Pos (11UL) /*!< Position of TXADD3 field. */
N#define RADIO_DACNF_TXADD3_Msk (0x1UL << RADIO_DACNF_TXADD3_Pos) /*!< Bit mask of TXADD3 field. */
N
N/* Bit 10 : TxAdd for device address 2 */
N#define RADIO_DACNF_TXADD2_Pos (10UL) /*!< Position of TXADD2 field. */
N#define RADIO_DACNF_TXADD2_Msk (0x1UL << RADIO_DACNF_TXADD2_Pos) /*!< Bit mask of TXADD2 field. */
N
N/* Bit 9 : TxAdd for device address 1 */
N#define RADIO_DACNF_TXADD1_Pos (9UL) /*!< Position of TXADD1 field. */
N#define RADIO_DACNF_TXADD1_Msk (0x1UL << RADIO_DACNF_TXADD1_Pos) /*!< Bit mask of TXADD1 field. */
N
N/* Bit 8 : TxAdd for device address 0 */
N#define RADIO_DACNF_TXADD0_Pos (8UL) /*!< Position of TXADD0 field. */
N#define RADIO_DACNF_TXADD0_Msk (0x1UL << RADIO_DACNF_TXADD0_Pos) /*!< Bit mask of TXADD0 field. */
N
N/* Bit 7 : Enable or disable device address matching using device address 7 */
N#define RADIO_DACNF_ENA7_Pos (7UL) /*!< Position of ENA7 field. */
N#define RADIO_DACNF_ENA7_Msk (0x1UL << RADIO_DACNF_ENA7_Pos) /*!< Bit mask of ENA7 field. */
N#define RADIO_DACNF_ENA7_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA7_Enabled (1UL) /*!< Enabled */
N
N/* Bit 6 : Enable or disable device address matching using device address 6 */
N#define RADIO_DACNF_ENA6_Pos (6UL) /*!< Position of ENA6 field. */
N#define RADIO_DACNF_ENA6_Msk (0x1UL << RADIO_DACNF_ENA6_Pos) /*!< Bit mask of ENA6 field. */
N#define RADIO_DACNF_ENA6_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA6_Enabled (1UL) /*!< Enabled */
N
N/* Bit 5 : Enable or disable device address matching using device address 5 */
N#define RADIO_DACNF_ENA5_Pos (5UL) /*!< Position of ENA5 field. */
N#define RADIO_DACNF_ENA5_Msk (0x1UL << RADIO_DACNF_ENA5_Pos) /*!< Bit mask of ENA5 field. */
N#define RADIO_DACNF_ENA5_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA5_Enabled (1UL) /*!< Enabled */
N
N/* Bit 4 : Enable or disable device address matching using device address 4 */
N#define RADIO_DACNF_ENA4_Pos (4UL) /*!< Position of ENA4 field. */
N#define RADIO_DACNF_ENA4_Msk (0x1UL << RADIO_DACNF_ENA4_Pos) /*!< Bit mask of ENA4 field. */
N#define RADIO_DACNF_ENA4_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA4_Enabled (1UL) /*!< Enabled */
N
N/* Bit 3 : Enable or disable device address matching using device address 3 */
N#define RADIO_DACNF_ENA3_Pos (3UL) /*!< Position of ENA3 field. */
N#define RADIO_DACNF_ENA3_Msk (0x1UL << RADIO_DACNF_ENA3_Pos) /*!< Bit mask of ENA3 field. */
N#define RADIO_DACNF_ENA3_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA3_Enabled (1UL) /*!< Enabled */
N
N/* Bit 2 : Enable or disable device address matching using device address 2 */
N#define RADIO_DACNF_ENA2_Pos (2UL) /*!< Position of ENA2 field. */
N#define RADIO_DACNF_ENA2_Msk (0x1UL << RADIO_DACNF_ENA2_Pos) /*!< Bit mask of ENA2 field. */
N#define RADIO_DACNF_ENA2_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA2_Enabled (1UL) /*!< Enabled */
N
N/* Bit 1 : Enable or disable device address matching using device address 1 */
N#define RADIO_DACNF_ENA1_Pos (1UL) /*!< Position of ENA1 field. */
N#define RADIO_DACNF_ENA1_Msk (0x1UL << RADIO_DACNF_ENA1_Pos) /*!< Bit mask of ENA1 field. */
N#define RADIO_DACNF_ENA1_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA1_Enabled (1UL) /*!< Enabled */
N
N/* Bit 0 : Enable or disable device address matching using device address 0 */
N#define RADIO_DACNF_ENA0_Pos (0UL) /*!< Position of ENA0 field. */
N#define RADIO_DACNF_ENA0_Msk (0x1UL << RADIO_DACNF_ENA0_Pos) /*!< Bit mask of ENA0 field. */
N#define RADIO_DACNF_ENA0_Disabled (0UL) /*!< Disabled */
N#define RADIO_DACNF_ENA0_Enabled (1UL) /*!< Enabled */
N
N/* Register: RADIO_MODECNF0 */
N/* Description: Radio mode configuration register 0 */
N
N/* Bits 9..8 : Default TX value */
N#define RADIO_MODECNF0_DTX_Pos (8UL) /*!< Position of DTX field. */
N#define RADIO_MODECNF0_DTX_Msk (0x3UL << RADIO_MODECNF0_DTX_Pos) /*!< Bit mask of DTX field. */
N#define RADIO_MODECNF0_DTX_B1 (0UL) /*!< Transmit '1' */
N#define RADIO_MODECNF0_DTX_B0 (1UL) /*!< Transmit '0' */
N#define RADIO_MODECNF0_DTX_Center (2UL) /*!< Transmit center frequency */
N
N/* Bit 0 : Radio ramp-up time */
N#define RADIO_MODECNF0_RU_Pos (0UL) /*!< Position of RU field. */
N#define RADIO_MODECNF0_RU_Msk (0x1UL << RADIO_MODECNF0_RU_Pos) /*!< Bit mask of RU field. */
N#define RADIO_MODECNF0_RU_Default (0UL) /*!< Default ramp-up time (tRXEN), compatible with firmware written for nRF51 */
N#define RADIO_MODECNF0_RU_Fast (1UL) /*!< Fast ramp-up (tRXEN,FAST), see electrical specification for more information */
N
N/* Register: RADIO_POWER */
N/* Description: Peripheral power control */
N
N/* Bit 0 : Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again. */
N#define RADIO_POWER_POWER_Pos (0UL) /*!< Position of POWER field. */
N#define RADIO_POWER_POWER_Msk (0x1UL << RADIO_POWER_POWER_Pos) /*!< Bit mask of POWER field. */
N#define RADIO_POWER_POWER_Disabled (0UL) /*!< Peripheral is powered off */
N#define RADIO_POWER_POWER_Enabled (1UL) /*!< Peripheral is powered on */
N
N
N/* Peripheral: RNG */
N/* Description: Random Number Generator */
N
N/* Register: RNG_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 0 : Shortcut between VALRDY event and STOP task */
N#define RNG_SHORTS_VALRDY_STOP_Pos (0UL) /*!< Position of VALRDY_STOP field. */
N#define RNG_SHORTS_VALRDY_STOP_Msk (0x1UL << RNG_SHORTS_VALRDY_STOP_Pos) /*!< Bit mask of VALRDY_STOP field. */
N#define RNG_SHORTS_VALRDY_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define RNG_SHORTS_VALRDY_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: RNG_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 0 : Write '1' to Enable interrupt for VALRDY event */
N#define RNG_INTENSET_VALRDY_Pos (0UL) /*!< Position of VALRDY field. */
N#define RNG_INTENSET_VALRDY_Msk (0x1UL << RNG_INTENSET_VALRDY_Pos) /*!< Bit mask of VALRDY field. */
N#define RNG_INTENSET_VALRDY_Disabled (0UL) /*!< Read: Disabled */
N#define RNG_INTENSET_VALRDY_Enabled (1UL) /*!< Read: Enabled */
N#define RNG_INTENSET_VALRDY_Set (1UL) /*!< Enable */
N
N/* Register: RNG_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 0 : Write '1' to Disable interrupt for VALRDY event */
N#define RNG_INTENCLR_VALRDY_Pos (0UL) /*!< Position of VALRDY field. */
N#define RNG_INTENCLR_VALRDY_Msk (0x1UL << RNG_INTENCLR_VALRDY_Pos) /*!< Bit mask of VALRDY field. */
N#define RNG_INTENCLR_VALRDY_Disabled (0UL) /*!< Read: Disabled */
N#define RNG_INTENCLR_VALRDY_Enabled (1UL) /*!< Read: Enabled */
N#define RNG_INTENCLR_VALRDY_Clear (1UL) /*!< Disable */
N
N/* Register: RNG_CONFIG */
N/* Description: Configuration register */
N
N/* Bit 0 : Bias correction */
N#define RNG_CONFIG_DERCEN_Pos (0UL) /*!< Position of DERCEN field. */
N#define RNG_CONFIG_DERCEN_Msk (0x1UL << RNG_CONFIG_DERCEN_Pos) /*!< Bit mask of DERCEN field. */
N#define RNG_CONFIG_DERCEN_Disabled (0UL) /*!< Disabled */
N#define RNG_CONFIG_DERCEN_Enabled (1UL) /*!< Enabled */
N
N/* Register: RNG_VALUE */
N/* Description: Output random number */
N
N/* Bits 7..0 : Generated random number */
N#define RNG_VALUE_VALUE_Pos (0UL) /*!< Position of VALUE field. */
N#define RNG_VALUE_VALUE_Msk (0xFFUL << RNG_VALUE_VALUE_Pos) /*!< Bit mask of VALUE field. */
N
N
N/* Peripheral: RTC */
N/* Description: Real time counter 0 */
N
N/* Register: RTC_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 19 : Write '1' to Enable interrupt for COMPARE[3] event */
N#define RTC_INTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define RTC_INTENSET_COMPARE3_Msk (0x1UL << RTC_INTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define RTC_INTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_COMPARE3_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable interrupt for COMPARE[2] event */
N#define RTC_INTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define RTC_INTENSET_COMPARE2_Msk (0x1UL << RTC_INTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define RTC_INTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_COMPARE2_Set (1UL) /*!< Enable */
N
N/* Bit 17 : Write '1' to Enable interrupt for COMPARE[1] event */
N#define RTC_INTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define RTC_INTENSET_COMPARE1_Msk (0x1UL << RTC_INTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define RTC_INTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_COMPARE1_Set (1UL) /*!< Enable */
N
N/* Bit 16 : Write '1' to Enable interrupt for COMPARE[0] event */
N#define RTC_INTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define RTC_INTENSET_COMPARE0_Msk (0x1UL << RTC_INTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define RTC_INTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_COMPARE0_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for OVRFLW event */
N#define RTC_INTENSET_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
N#define RTC_INTENSET_OVRFLW_Msk (0x1UL << RTC_INTENSET_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
N#define RTC_INTENSET_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_OVRFLW_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for TICK event */
N#define RTC_INTENSET_TICK_Pos (0UL) /*!< Position of TICK field. */
N#define RTC_INTENSET_TICK_Msk (0x1UL << RTC_INTENSET_TICK_Pos) /*!< Bit mask of TICK field. */
N#define RTC_INTENSET_TICK_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENSET_TICK_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENSET_TICK_Set (1UL) /*!< Enable */
N
N/* Register: RTC_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 19 : Write '1' to Disable interrupt for COMPARE[3] event */
N#define RTC_INTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define RTC_INTENCLR_COMPARE3_Msk (0x1UL << RTC_INTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define RTC_INTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_COMPARE3_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable interrupt for COMPARE[2] event */
N#define RTC_INTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define RTC_INTENCLR_COMPARE2_Msk (0x1UL << RTC_INTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define RTC_INTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_COMPARE2_Clear (1UL) /*!< Disable */
N
N/* Bit 17 : Write '1' to Disable interrupt for COMPARE[1] event */
N#define RTC_INTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define RTC_INTENCLR_COMPARE1_Msk (0x1UL << RTC_INTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define RTC_INTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_COMPARE1_Clear (1UL) /*!< Disable */
N
N/* Bit 16 : Write '1' to Disable interrupt for COMPARE[0] event */
N#define RTC_INTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define RTC_INTENCLR_COMPARE0_Msk (0x1UL << RTC_INTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define RTC_INTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_COMPARE0_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for OVRFLW event */
N#define RTC_INTENCLR_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
N#define RTC_INTENCLR_OVRFLW_Msk (0x1UL << RTC_INTENCLR_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
N#define RTC_INTENCLR_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_OVRFLW_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for TICK event */
N#define RTC_INTENCLR_TICK_Pos (0UL) /*!< Position of TICK field. */
N#define RTC_INTENCLR_TICK_Msk (0x1UL << RTC_INTENCLR_TICK_Pos) /*!< Bit mask of TICK field. */
N#define RTC_INTENCLR_TICK_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_INTENCLR_TICK_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_INTENCLR_TICK_Clear (1UL) /*!< Disable */
N
N/* Register: RTC_EVTEN */
N/* Description: Enable or disable event routing */
N
N/* Bit 19 : Enable or disable event routing for COMPARE[3] event */
N#define RTC_EVTEN_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define RTC_EVTEN_COMPARE3_Msk (0x1UL << RTC_EVTEN_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define RTC_EVTEN_COMPARE3_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_COMPARE3_Enabled (1UL) /*!< Enable */
N
N/* Bit 18 : Enable or disable event routing for COMPARE[2] event */
N#define RTC_EVTEN_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define RTC_EVTEN_COMPARE2_Msk (0x1UL << RTC_EVTEN_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define RTC_EVTEN_COMPARE2_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_COMPARE2_Enabled (1UL) /*!< Enable */
N
N/* Bit 17 : Enable or disable event routing for COMPARE[1] event */
N#define RTC_EVTEN_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define RTC_EVTEN_COMPARE1_Msk (0x1UL << RTC_EVTEN_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define RTC_EVTEN_COMPARE1_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_COMPARE1_Enabled (1UL) /*!< Enable */
N
N/* Bit 16 : Enable or disable event routing for COMPARE[0] event */
N#define RTC_EVTEN_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define RTC_EVTEN_COMPARE0_Msk (0x1UL << RTC_EVTEN_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define RTC_EVTEN_COMPARE0_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_COMPARE0_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable event routing for OVRFLW event */
N#define RTC_EVTEN_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
N#define RTC_EVTEN_OVRFLW_Msk (0x1UL << RTC_EVTEN_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
N#define RTC_EVTEN_OVRFLW_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_OVRFLW_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable event routing for TICK event */
N#define RTC_EVTEN_TICK_Pos (0UL) /*!< Position of TICK field. */
N#define RTC_EVTEN_TICK_Msk (0x1UL << RTC_EVTEN_TICK_Pos) /*!< Bit mask of TICK field. */
N#define RTC_EVTEN_TICK_Disabled (0UL) /*!< Disable */
N#define RTC_EVTEN_TICK_Enabled (1UL) /*!< Enable */
N
N/* Register: RTC_EVTENSET */
N/* Description: Enable event routing */
N
N/* Bit 19 : Write '1' to Enable event routing for COMPARE[3] event */
N#define RTC_EVTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define RTC_EVTENSET_COMPARE3_Msk (0x1UL << RTC_EVTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define RTC_EVTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_COMPARE3_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable event routing for COMPARE[2] event */
N#define RTC_EVTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define RTC_EVTENSET_COMPARE2_Msk (0x1UL << RTC_EVTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define RTC_EVTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_COMPARE2_Set (1UL) /*!< Enable */
N
N/* Bit 17 : Write '1' to Enable event routing for COMPARE[1] event */
N#define RTC_EVTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define RTC_EVTENSET_COMPARE1_Msk (0x1UL << RTC_EVTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define RTC_EVTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_COMPARE1_Set (1UL) /*!< Enable */
N
N/* Bit 16 : Write '1' to Enable event routing for COMPARE[0] event */
N#define RTC_EVTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define RTC_EVTENSET_COMPARE0_Msk (0x1UL << RTC_EVTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define RTC_EVTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_COMPARE0_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable event routing for OVRFLW event */
N#define RTC_EVTENSET_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
N#define RTC_EVTENSET_OVRFLW_Msk (0x1UL << RTC_EVTENSET_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
N#define RTC_EVTENSET_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_OVRFLW_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable event routing for TICK event */
N#define RTC_EVTENSET_TICK_Pos (0UL) /*!< Position of TICK field. */
N#define RTC_EVTENSET_TICK_Msk (0x1UL << RTC_EVTENSET_TICK_Pos) /*!< Bit mask of TICK field. */
N#define RTC_EVTENSET_TICK_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENSET_TICK_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENSET_TICK_Set (1UL) /*!< Enable */
N
N/* Register: RTC_EVTENCLR */
N/* Description: Disable event routing */
N
N/* Bit 19 : Write '1' to Disable event routing for COMPARE[3] event */
N#define RTC_EVTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define RTC_EVTENCLR_COMPARE3_Msk (0x1UL << RTC_EVTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define RTC_EVTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_COMPARE3_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable event routing for COMPARE[2] event */
N#define RTC_EVTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define RTC_EVTENCLR_COMPARE2_Msk (0x1UL << RTC_EVTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define RTC_EVTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_COMPARE2_Clear (1UL) /*!< Disable */
N
N/* Bit 17 : Write '1' to Disable event routing for COMPARE[1] event */
N#define RTC_EVTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define RTC_EVTENCLR_COMPARE1_Msk (0x1UL << RTC_EVTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define RTC_EVTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_COMPARE1_Clear (1UL) /*!< Disable */
N
N/* Bit 16 : Write '1' to Disable event routing for COMPARE[0] event */
N#define RTC_EVTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define RTC_EVTENCLR_COMPARE0_Msk (0x1UL << RTC_EVTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define RTC_EVTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_COMPARE0_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable event routing for OVRFLW event */
N#define RTC_EVTENCLR_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
N#define RTC_EVTENCLR_OVRFLW_Msk (0x1UL << RTC_EVTENCLR_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
N#define RTC_EVTENCLR_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_OVRFLW_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable event routing for TICK event */
N#define RTC_EVTENCLR_TICK_Pos (0UL) /*!< Position of TICK field. */
N#define RTC_EVTENCLR_TICK_Msk (0x1UL << RTC_EVTENCLR_TICK_Pos) /*!< Bit mask of TICK field. */
N#define RTC_EVTENCLR_TICK_Disabled (0UL) /*!< Read: Disabled */
N#define RTC_EVTENCLR_TICK_Enabled (1UL) /*!< Read: Enabled */
N#define RTC_EVTENCLR_TICK_Clear (1UL) /*!< Disable */
N
N/* Register: RTC_COUNTER */
N/* Description: Current COUNTER value */
N
N/* Bits 23..0 : Counter value */
N#define RTC_COUNTER_COUNTER_Pos (0UL) /*!< Position of COUNTER field. */
N#define RTC_COUNTER_COUNTER_Msk (0xFFFFFFUL << RTC_COUNTER_COUNTER_Pos) /*!< Bit mask of COUNTER field. */
N
N/* Register: RTC_PRESCALER */
N/* Description: 12 bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).Must be written when RTC is stopped */
N
N/* Bits 11..0 : Prescaler value */
N#define RTC_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
N#define RTC_PRESCALER_PRESCALER_Msk (0xFFFUL << RTC_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */
N
N/* Register: RTC_CC */
N/* Description: Description collection[0]:  Compare register 0 */
N
N/* Bits 23..0 : Compare value */
N#define RTC_CC_COMPARE_Pos (0UL) /*!< Position of COMPARE field. */
N#define RTC_CC_COMPARE_Msk (0xFFFFFFUL << RTC_CC_COMPARE_Pos) /*!< Bit mask of COMPARE field. */
N
N
N/* Peripheral: SAADC */
N/* Description: Analog to Digital Converter */
N
N/* Register: SAADC_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 21 : Enable or disable interrupt for CH[7].LIMITL event */
N#define SAADC_INTEN_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
N#define SAADC_INTEN_CH7LIMITL_Msk (0x1UL << SAADC_INTEN_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
N#define SAADC_INTEN_CH7LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH7LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 20 : Enable or disable interrupt for CH[7].LIMITH event */
N#define SAADC_INTEN_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
N#define SAADC_INTEN_CH7LIMITH_Msk (0x1UL << SAADC_INTEN_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
N#define SAADC_INTEN_CH7LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH7LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 19 : Enable or disable interrupt for CH[6].LIMITL event */
N#define SAADC_INTEN_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
N#define SAADC_INTEN_CH6LIMITL_Msk (0x1UL << SAADC_INTEN_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
N#define SAADC_INTEN_CH6LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH6LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 18 : Enable or disable interrupt for CH[6].LIMITH event */
N#define SAADC_INTEN_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
N#define SAADC_INTEN_CH6LIMITH_Msk (0x1UL << SAADC_INTEN_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
N#define SAADC_INTEN_CH6LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH6LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 17 : Enable or disable interrupt for CH[5].LIMITL event */
N#define SAADC_INTEN_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
N#define SAADC_INTEN_CH5LIMITL_Msk (0x1UL << SAADC_INTEN_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
N#define SAADC_INTEN_CH5LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH5LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 16 : Enable or disable interrupt for CH[5].LIMITH event */
N#define SAADC_INTEN_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
N#define SAADC_INTEN_CH5LIMITH_Msk (0x1UL << SAADC_INTEN_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
N#define SAADC_INTEN_CH5LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH5LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 15 : Enable or disable interrupt for CH[4].LIMITL event */
N#define SAADC_INTEN_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
N#define SAADC_INTEN_CH4LIMITL_Msk (0x1UL << SAADC_INTEN_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
N#define SAADC_INTEN_CH4LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH4LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 14 : Enable or disable interrupt for CH[4].LIMITH event */
N#define SAADC_INTEN_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
N#define SAADC_INTEN_CH4LIMITH_Msk (0x1UL << SAADC_INTEN_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
N#define SAADC_INTEN_CH4LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH4LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 13 : Enable or disable interrupt for CH[3].LIMITL event */
N#define SAADC_INTEN_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
N#define SAADC_INTEN_CH3LIMITL_Msk (0x1UL << SAADC_INTEN_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
N#define SAADC_INTEN_CH3LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH3LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 12 : Enable or disable interrupt for CH[3].LIMITH event */
N#define SAADC_INTEN_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
N#define SAADC_INTEN_CH3LIMITH_Msk (0x1UL << SAADC_INTEN_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
N#define SAADC_INTEN_CH3LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH3LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 11 : Enable or disable interrupt for CH[2].LIMITL event */
N#define SAADC_INTEN_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
N#define SAADC_INTEN_CH2LIMITL_Msk (0x1UL << SAADC_INTEN_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
N#define SAADC_INTEN_CH2LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH2LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 10 : Enable or disable interrupt for CH[2].LIMITH event */
N#define SAADC_INTEN_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
N#define SAADC_INTEN_CH2LIMITH_Msk (0x1UL << SAADC_INTEN_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
N#define SAADC_INTEN_CH2LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH2LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 9 : Enable or disable interrupt for CH[1].LIMITL event */
N#define SAADC_INTEN_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
N#define SAADC_INTEN_CH1LIMITL_Msk (0x1UL << SAADC_INTEN_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
N#define SAADC_INTEN_CH1LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH1LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 8 : Enable or disable interrupt for CH[1].LIMITH event */
N#define SAADC_INTEN_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
N#define SAADC_INTEN_CH1LIMITH_Msk (0x1UL << SAADC_INTEN_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
N#define SAADC_INTEN_CH1LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH1LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable interrupt for CH[0].LIMITL event */
N#define SAADC_INTEN_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
N#define SAADC_INTEN_CH0LIMITL_Msk (0x1UL << SAADC_INTEN_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
N#define SAADC_INTEN_CH0LIMITL_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH0LIMITL_Enabled (1UL) /*!< Enable */
N
N/* Bit 6 : Enable or disable interrupt for CH[0].LIMITH event */
N#define SAADC_INTEN_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
N#define SAADC_INTEN_CH0LIMITH_Msk (0x1UL << SAADC_INTEN_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
N#define SAADC_INTEN_CH0LIMITH_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CH0LIMITH_Enabled (1UL) /*!< Enable */
N
N/* Bit 5 : Enable or disable interrupt for STOPPED event */
N#define SAADC_INTEN_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
N#define SAADC_INTEN_STOPPED_Msk (0x1UL << SAADC_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define SAADC_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for CALIBRATEDONE event */
N#define SAADC_INTEN_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
N#define SAADC_INTEN_CALIBRATEDONE_Msk (0x1UL << SAADC_INTEN_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
N#define SAADC_INTEN_CALIBRATEDONE_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_CALIBRATEDONE_Enabled (1UL) /*!< Enable */
N
N/* Bit 3 : Enable or disable interrupt for RESULTDONE event */
N#define SAADC_INTEN_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
N#define SAADC_INTEN_RESULTDONE_Msk (0x1UL << SAADC_INTEN_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
N#define SAADC_INTEN_RESULTDONE_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_RESULTDONE_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for DONE event */
N#define SAADC_INTEN_DONE_Pos (2UL) /*!< Position of DONE field. */
N#define SAADC_INTEN_DONE_Msk (0x1UL << SAADC_INTEN_DONE_Pos) /*!< Bit mask of DONE field. */
N#define SAADC_INTEN_DONE_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_DONE_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for END event */
N#define SAADC_INTEN_END_Pos (1UL) /*!< Position of END field. */
N#define SAADC_INTEN_END_Msk (0x1UL << SAADC_INTEN_END_Pos) /*!< Bit mask of END field. */
N#define SAADC_INTEN_END_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_END_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for STARTED event */
N#define SAADC_INTEN_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define SAADC_INTEN_STARTED_Msk (0x1UL << SAADC_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define SAADC_INTEN_STARTED_Disabled (0UL) /*!< Disable */
N#define SAADC_INTEN_STARTED_Enabled (1UL) /*!< Enable */
N
N/* Register: SAADC_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 21 : Write '1' to Enable interrupt for CH[7].LIMITL event */
N#define SAADC_INTENSET_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
N#define SAADC_INTENSET_CH7LIMITL_Msk (0x1UL << SAADC_INTENSET_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
N#define SAADC_INTENSET_CH7LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH7LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH7LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 20 : Write '1' to Enable interrupt for CH[7].LIMITH event */
N#define SAADC_INTENSET_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
N#define SAADC_INTENSET_CH7LIMITH_Msk (0x1UL << SAADC_INTENSET_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
N#define SAADC_INTENSET_CH7LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH7LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH7LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for CH[6].LIMITL event */
N#define SAADC_INTENSET_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
N#define SAADC_INTENSET_CH6LIMITL_Msk (0x1UL << SAADC_INTENSET_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
N#define SAADC_INTENSET_CH6LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH6LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH6LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable interrupt for CH[6].LIMITH event */
N#define SAADC_INTENSET_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
N#define SAADC_INTENSET_CH6LIMITH_Msk (0x1UL << SAADC_INTENSET_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
N#define SAADC_INTENSET_CH6LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH6LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH6LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 17 : Write '1' to Enable interrupt for CH[5].LIMITL event */
N#define SAADC_INTENSET_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
N#define SAADC_INTENSET_CH5LIMITL_Msk (0x1UL << SAADC_INTENSET_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
N#define SAADC_INTENSET_CH5LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH5LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH5LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 16 : Write '1' to Enable interrupt for CH[5].LIMITH event */
N#define SAADC_INTENSET_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
N#define SAADC_INTENSET_CH5LIMITH_Msk (0x1UL << SAADC_INTENSET_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
N#define SAADC_INTENSET_CH5LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH5LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH5LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 15 : Write '1' to Enable interrupt for CH[4].LIMITL event */
N#define SAADC_INTENSET_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
N#define SAADC_INTENSET_CH4LIMITL_Msk (0x1UL << SAADC_INTENSET_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
N#define SAADC_INTENSET_CH4LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH4LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH4LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 14 : Write '1' to Enable interrupt for CH[4].LIMITH event */
N#define SAADC_INTENSET_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
N#define SAADC_INTENSET_CH4LIMITH_Msk (0x1UL << SAADC_INTENSET_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
N#define SAADC_INTENSET_CH4LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH4LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH4LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 13 : Write '1' to Enable interrupt for CH[3].LIMITL event */
N#define SAADC_INTENSET_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
N#define SAADC_INTENSET_CH3LIMITL_Msk (0x1UL << SAADC_INTENSET_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
N#define SAADC_INTENSET_CH3LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH3LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH3LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 12 : Write '1' to Enable interrupt for CH[3].LIMITH event */
N#define SAADC_INTENSET_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
N#define SAADC_INTENSET_CH3LIMITH_Msk (0x1UL << SAADC_INTENSET_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
N#define SAADC_INTENSET_CH3LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH3LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH3LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 11 : Write '1' to Enable interrupt for CH[2].LIMITL event */
N#define SAADC_INTENSET_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
N#define SAADC_INTENSET_CH2LIMITL_Msk (0x1UL << SAADC_INTENSET_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
N#define SAADC_INTENSET_CH2LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH2LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH2LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 10 : Write '1' to Enable interrupt for CH[2].LIMITH event */
N#define SAADC_INTENSET_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
N#define SAADC_INTENSET_CH2LIMITH_Msk (0x1UL << SAADC_INTENSET_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
N#define SAADC_INTENSET_CH2LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH2LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH2LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for CH[1].LIMITL event */
N#define SAADC_INTENSET_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
N#define SAADC_INTENSET_CH1LIMITL_Msk (0x1UL << SAADC_INTENSET_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
N#define SAADC_INTENSET_CH1LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH1LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH1LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 8 : Write '1' to Enable interrupt for CH[1].LIMITH event */
N#define SAADC_INTENSET_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
N#define SAADC_INTENSET_CH1LIMITH_Msk (0x1UL << SAADC_INTENSET_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
N#define SAADC_INTENSET_CH1LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH1LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH1LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for CH[0].LIMITL event */
N#define SAADC_INTENSET_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
N#define SAADC_INTENSET_CH0LIMITL_Msk (0x1UL << SAADC_INTENSET_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
N#define SAADC_INTENSET_CH0LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH0LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH0LIMITL_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for CH[0].LIMITH event */
N#define SAADC_INTENSET_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
N#define SAADC_INTENSET_CH0LIMITH_Msk (0x1UL << SAADC_INTENSET_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
N#define SAADC_INTENSET_CH0LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CH0LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CH0LIMITH_Set (1UL) /*!< Enable */
N
N/* Bit 5 : Write '1' to Enable interrupt for STOPPED event */
N#define SAADC_INTENSET_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
N#define SAADC_INTENSET_STOPPED_Msk (0x1UL << SAADC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define SAADC_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for CALIBRATEDONE event */
N#define SAADC_INTENSET_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
N#define SAADC_INTENSET_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENSET_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
N#define SAADC_INTENSET_CALIBRATEDONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_CALIBRATEDONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_CALIBRATEDONE_Set (1UL) /*!< Enable */
N
N/* Bit 3 : Write '1' to Enable interrupt for RESULTDONE event */
N#define SAADC_INTENSET_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
N#define SAADC_INTENSET_RESULTDONE_Msk (0x1UL << SAADC_INTENSET_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
N#define SAADC_INTENSET_RESULTDONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_RESULTDONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_RESULTDONE_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for DONE event */
N#define SAADC_INTENSET_DONE_Pos (2UL) /*!< Position of DONE field. */
N#define SAADC_INTENSET_DONE_Msk (0x1UL << SAADC_INTENSET_DONE_Pos) /*!< Bit mask of DONE field. */
N#define SAADC_INTENSET_DONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_DONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_DONE_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for END event */
N#define SAADC_INTENSET_END_Pos (1UL) /*!< Position of END field. */
N#define SAADC_INTENSET_END_Msk (0x1UL << SAADC_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define SAADC_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for STARTED event */
N#define SAADC_INTENSET_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define SAADC_INTENSET_STARTED_Msk (0x1UL << SAADC_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define SAADC_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENSET_STARTED_Set (1UL) /*!< Enable */
N
N/* Register: SAADC_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 21 : Write '1' to Disable interrupt for CH[7].LIMITL event */
N#define SAADC_INTENCLR_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
N#define SAADC_INTENCLR_CH7LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
N#define SAADC_INTENCLR_CH7LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH7LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH7LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 20 : Write '1' to Disable interrupt for CH[7].LIMITH event */
N#define SAADC_INTENCLR_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
N#define SAADC_INTENCLR_CH7LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
N#define SAADC_INTENCLR_CH7LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH7LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH7LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for CH[6].LIMITL event */
N#define SAADC_INTENCLR_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
N#define SAADC_INTENCLR_CH6LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
N#define SAADC_INTENCLR_CH6LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH6LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH6LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable interrupt for CH[6].LIMITH event */
N#define SAADC_INTENCLR_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
N#define SAADC_INTENCLR_CH6LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
N#define SAADC_INTENCLR_CH6LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH6LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH6LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 17 : Write '1' to Disable interrupt for CH[5].LIMITL event */
N#define SAADC_INTENCLR_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
N#define SAADC_INTENCLR_CH5LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
N#define SAADC_INTENCLR_CH5LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH5LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH5LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 16 : Write '1' to Disable interrupt for CH[5].LIMITH event */
N#define SAADC_INTENCLR_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
N#define SAADC_INTENCLR_CH5LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
N#define SAADC_INTENCLR_CH5LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH5LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH5LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 15 : Write '1' to Disable interrupt for CH[4].LIMITL event */
N#define SAADC_INTENCLR_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
N#define SAADC_INTENCLR_CH4LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
N#define SAADC_INTENCLR_CH4LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH4LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH4LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 14 : Write '1' to Disable interrupt for CH[4].LIMITH event */
N#define SAADC_INTENCLR_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
N#define SAADC_INTENCLR_CH4LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
N#define SAADC_INTENCLR_CH4LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH4LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH4LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 13 : Write '1' to Disable interrupt for CH[3].LIMITL event */
N#define SAADC_INTENCLR_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
N#define SAADC_INTENCLR_CH3LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
N#define SAADC_INTENCLR_CH3LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH3LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH3LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 12 : Write '1' to Disable interrupt for CH[3].LIMITH event */
N#define SAADC_INTENCLR_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
N#define SAADC_INTENCLR_CH3LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
N#define SAADC_INTENCLR_CH3LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH3LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH3LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 11 : Write '1' to Disable interrupt for CH[2].LIMITL event */
N#define SAADC_INTENCLR_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
N#define SAADC_INTENCLR_CH2LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
N#define SAADC_INTENCLR_CH2LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH2LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH2LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 10 : Write '1' to Disable interrupt for CH[2].LIMITH event */
N#define SAADC_INTENCLR_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
N#define SAADC_INTENCLR_CH2LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
N#define SAADC_INTENCLR_CH2LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH2LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH2LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for CH[1].LIMITL event */
N#define SAADC_INTENCLR_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
N#define SAADC_INTENCLR_CH1LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
N#define SAADC_INTENCLR_CH1LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH1LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH1LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 8 : Write '1' to Disable interrupt for CH[1].LIMITH event */
N#define SAADC_INTENCLR_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
N#define SAADC_INTENCLR_CH1LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
N#define SAADC_INTENCLR_CH1LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH1LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH1LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for CH[0].LIMITL event */
N#define SAADC_INTENCLR_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
N#define SAADC_INTENCLR_CH0LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
N#define SAADC_INTENCLR_CH0LIMITL_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH0LIMITL_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH0LIMITL_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for CH[0].LIMITH event */
N#define SAADC_INTENCLR_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
N#define SAADC_INTENCLR_CH0LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
N#define SAADC_INTENCLR_CH0LIMITH_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CH0LIMITH_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CH0LIMITH_Clear (1UL) /*!< Disable */
N
N/* Bit 5 : Write '1' to Disable interrupt for STOPPED event */
N#define SAADC_INTENCLR_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
N#define SAADC_INTENCLR_STOPPED_Msk (0x1UL << SAADC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define SAADC_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for CALIBRATEDONE event */
N#define SAADC_INTENCLR_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
N#define SAADC_INTENCLR_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENCLR_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
N#define SAADC_INTENCLR_CALIBRATEDONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_CALIBRATEDONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_CALIBRATEDONE_Clear (1UL) /*!< Disable */
N
N/* Bit 3 : Write '1' to Disable interrupt for RESULTDONE event */
N#define SAADC_INTENCLR_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
N#define SAADC_INTENCLR_RESULTDONE_Msk (0x1UL << SAADC_INTENCLR_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
N#define SAADC_INTENCLR_RESULTDONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_RESULTDONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_RESULTDONE_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for DONE event */
N#define SAADC_INTENCLR_DONE_Pos (2UL) /*!< Position of DONE field. */
N#define SAADC_INTENCLR_DONE_Msk (0x1UL << SAADC_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field. */
N#define SAADC_INTENCLR_DONE_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_DONE_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_DONE_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for END event */
N#define SAADC_INTENCLR_END_Pos (1UL) /*!< Position of END field. */
N#define SAADC_INTENCLR_END_Msk (0x1UL << SAADC_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define SAADC_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for STARTED event */
N#define SAADC_INTENCLR_STARTED_Pos (0UL) /*!< Position of STARTED field. */
N#define SAADC_INTENCLR_STARTED_Msk (0x1UL << SAADC_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define SAADC_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define SAADC_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define SAADC_INTENCLR_STARTED_Clear (1UL) /*!< Disable */
N
N/* Register: SAADC_STATUS */
N/* Description: Status */
N
N/* Bit 0 : Status */
N#define SAADC_STATUS_STATUS_Pos (0UL) /*!< Position of STATUS field. */
N#define SAADC_STATUS_STATUS_Msk (0x1UL << SAADC_STATUS_STATUS_Pos) /*!< Bit mask of STATUS field. */
N#define SAADC_STATUS_STATUS_Ready (0UL) /*!< ADC is ready. No on-going conversion. */
N#define SAADC_STATUS_STATUS_Busy (1UL) /*!< ADC is busy. Conversion in progress. */
N
N/* Register: SAADC_ENABLE */
N/* Description: Enable or disable ADC */
N
N/* Bit 0 : Enable or disable ADC */
N#define SAADC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define SAADC_ENABLE_ENABLE_Msk (0x1UL << SAADC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define SAADC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable ADC */
N#define SAADC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable ADC */
N
N/* Register: SAADC_CH_PSELP */
N/* Description: Description cluster[0]:  Input positive pin selection for CH[0] */
N
N/* Bits 4..0 : Analog positive input channel */
N#define SAADC_CH_PSELP_PSELP_Pos (0UL) /*!< Position of PSELP field. */
N#define SAADC_CH_PSELP_PSELP_Msk (0x1FUL << SAADC_CH_PSELP_PSELP_Pos) /*!< Bit mask of PSELP field. */
N#define SAADC_CH_PSELP_PSELP_NC (0UL) /*!< Not connected */
N#define SAADC_CH_PSELP_PSELP_AnalogInput0 (1UL) /*!< AIN0 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput1 (2UL) /*!< AIN1 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput2 (3UL) /*!< AIN2 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput3 (4UL) /*!< AIN3 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput4 (5UL) /*!< AIN4 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput5 (6UL) /*!< AIN5 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput6 (7UL) /*!< AIN6 */
N#define SAADC_CH_PSELP_PSELP_AnalogInput7 (8UL) /*!< AIN7 */
N#define SAADC_CH_PSELP_PSELP_VDD (9UL) /*!< VDD */
N
N/* Register: SAADC_CH_PSELN */
N/* Description: Description cluster[0]:  Input negative pin selection for CH[0] */
N
N/* Bits 4..0 : Analog negative input, enables differential channel */
N#define SAADC_CH_PSELN_PSELN_Pos (0UL) /*!< Position of PSELN field. */
N#define SAADC_CH_PSELN_PSELN_Msk (0x1FUL << SAADC_CH_PSELN_PSELN_Pos) /*!< Bit mask of PSELN field. */
N#define SAADC_CH_PSELN_PSELN_NC (0UL) /*!< Not connected */
N#define SAADC_CH_PSELN_PSELN_AnalogInput0 (1UL) /*!< AIN0 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput1 (2UL) /*!< AIN1 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput2 (3UL) /*!< AIN2 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput3 (4UL) /*!< AIN3 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput4 (5UL) /*!< AIN4 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput5 (6UL) /*!< AIN5 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput6 (7UL) /*!< AIN6 */
N#define SAADC_CH_PSELN_PSELN_AnalogInput7 (8UL) /*!< AIN7 */
N#define SAADC_CH_PSELN_PSELN_VDD (9UL) /*!< VDD */
N
N/* Register: SAADC_CH_CONFIG */
N/* Description: Description cluster[0]:  Input configuration for CH[0] */
N
N/* Bit 24 : Enable burst mode */
N#define SAADC_CH_CONFIG_BURST_Pos (24UL) /*!< Position of BURST field. */
N#define SAADC_CH_CONFIG_BURST_Msk (0x1UL << SAADC_CH_CONFIG_BURST_Pos) /*!< Bit mask of BURST field. */
N#define SAADC_CH_CONFIG_BURST_Disabled (0UL) /*!< Burst mode is disabled (normal operation) */
N#define SAADC_CH_CONFIG_BURST_Enabled (1UL) /*!< Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as fast as it can, and sends the average to Data RAM. */
N
N/* Bit 20 : Enable differential mode */
N#define SAADC_CH_CONFIG_MODE_Pos (20UL) /*!< Position of MODE field. */
N#define SAADC_CH_CONFIG_MODE_Msk (0x1UL << SAADC_CH_CONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
N#define SAADC_CH_CONFIG_MODE_SE (0UL) /*!< Single ended, PSELN will be ignored, negative input to ADC shorted to GND */
N#define SAADC_CH_CONFIG_MODE_Diff (1UL) /*!< Differential */
N
N/* Bits 18..16 : Acquisition time, the time the ADC uses to sample the input voltage */
N#define SAADC_CH_CONFIG_TACQ_Pos (16UL) /*!< Position of TACQ field. */
N#define SAADC_CH_CONFIG_TACQ_Msk (0x7UL << SAADC_CH_CONFIG_TACQ_Pos) /*!< Bit mask of TACQ field. */
N#define SAADC_CH_CONFIG_TACQ_3us (0UL) /*!< 3 us */
N#define SAADC_CH_CONFIG_TACQ_5us (1UL) /*!< 5 us */
N#define SAADC_CH_CONFIG_TACQ_10us (2UL) /*!< 10 us */
N#define SAADC_CH_CONFIG_TACQ_15us (3UL) /*!< 15 us */
N#define SAADC_CH_CONFIG_TACQ_20us (4UL) /*!< 20 us */
N#define SAADC_CH_CONFIG_TACQ_40us (5UL) /*!< 40 us */
N
N/* Bit 12 : Reference control */
N#define SAADC_CH_CONFIG_REFSEL_Pos (12UL) /*!< Position of REFSEL field. */
N#define SAADC_CH_CONFIG_REFSEL_Msk (0x1UL << SAADC_CH_CONFIG_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
N#define SAADC_CH_CONFIG_REFSEL_Internal (0UL) /*!< Internal reference (0.6 V) */
N#define SAADC_CH_CONFIG_REFSEL_VDD1_4 (1UL) /*!< VDD/4 as reference */
N
N/* Bits 10..8 : Gain control */
N#define SAADC_CH_CONFIG_GAIN_Pos (8UL) /*!< Position of GAIN field. */
N#define SAADC_CH_CONFIG_GAIN_Msk (0x7UL << SAADC_CH_CONFIG_GAIN_Pos) /*!< Bit mask of GAIN field. */
N#define SAADC_CH_CONFIG_GAIN_Gain1_6 (0UL) /*!< 1/6 */
N#define SAADC_CH_CONFIG_GAIN_Gain1_5 (1UL) /*!< 1/5 */
N#define SAADC_CH_CONFIG_GAIN_Gain1_4 (2UL) /*!< 1/4 */
N#define SAADC_CH_CONFIG_GAIN_Gain1_3 (3UL) /*!< 1/3 */
N#define SAADC_CH_CONFIG_GAIN_Gain1_2 (4UL) /*!< 1/2 */
N#define SAADC_CH_CONFIG_GAIN_Gain1 (5UL) /*!< 1 */
N#define SAADC_CH_CONFIG_GAIN_Gain2 (6UL) /*!< 2 */
N#define SAADC_CH_CONFIG_GAIN_Gain4 (7UL) /*!< 4 */
N
N/* Bits 5..4 : Negative channel resistor control */
N#define SAADC_CH_CONFIG_RESN_Pos (4UL) /*!< Position of RESN field. */
N#define SAADC_CH_CONFIG_RESN_Msk (0x3UL << SAADC_CH_CONFIG_RESN_Pos) /*!< Bit mask of RESN field. */
N#define SAADC_CH_CONFIG_RESN_Bypass (0UL) /*!< Bypass resistor ladder */
N#define SAADC_CH_CONFIG_RESN_Pulldown (1UL) /*!< Pull-down to GND */
N#define SAADC_CH_CONFIG_RESN_Pullup (2UL) /*!< Pull-up to VDD */
N#define SAADC_CH_CONFIG_RESN_VDD1_2 (3UL) /*!< Set input at VDD/2 */
N
N/* Bits 1..0 : Positive channel resistor control */
N#define SAADC_CH_CONFIG_RESP_Pos (0UL) /*!< Position of RESP field. */
N#define SAADC_CH_CONFIG_RESP_Msk (0x3UL << SAADC_CH_CONFIG_RESP_Pos) /*!< Bit mask of RESP field. */
N#define SAADC_CH_CONFIG_RESP_Bypass (0UL) /*!< Bypass resistor ladder */
N#define SAADC_CH_CONFIG_RESP_Pulldown (1UL) /*!< Pull-down to GND */
N#define SAADC_CH_CONFIG_RESP_Pullup (2UL) /*!< Pull-up to VDD */
N#define SAADC_CH_CONFIG_RESP_VDD1_2 (3UL) /*!< Set input at VDD/2 */
N
N/* Register: SAADC_CH_LIMIT */
N/* Description: Description cluster[0]:  High/low limits for event monitoring a channel */
N
N/* Bits 31..16 : High level limit */
N#define SAADC_CH_LIMIT_HIGH_Pos (16UL) /*!< Position of HIGH field. */
N#define SAADC_CH_LIMIT_HIGH_Msk (0xFFFFUL << SAADC_CH_LIMIT_HIGH_Pos) /*!< Bit mask of HIGH field. */
N
N/* Bits 15..0 : Low level limit */
N#define SAADC_CH_LIMIT_LOW_Pos (0UL) /*!< Position of LOW field. */
N#define SAADC_CH_LIMIT_LOW_Msk (0xFFFFUL << SAADC_CH_LIMIT_LOW_Pos) /*!< Bit mask of LOW field. */
N
N/* Register: SAADC_RESOLUTION */
N/* Description: Resolution configuration */
N
N/* Bits 2..0 : Set the resolution */
N#define SAADC_RESOLUTION_VAL_Pos (0UL) /*!< Position of VAL field. */
N#define SAADC_RESOLUTION_VAL_Msk (0x7UL << SAADC_RESOLUTION_VAL_Pos) /*!< Bit mask of VAL field. */
N#define SAADC_RESOLUTION_VAL_8bit (0UL) /*!< 8 bit */
N#define SAADC_RESOLUTION_VAL_10bit (1UL) /*!< 10 bit */
N#define SAADC_RESOLUTION_VAL_12bit (2UL) /*!< 12 bit */
N#define SAADC_RESOLUTION_VAL_14bit (3UL) /*!< 14 bit */
N
N/* Register: SAADC_OVERSAMPLE */
N/* Description: Oversampling configuration. OVERSAMPLE should not be combined with SCAN. The RESOLUTION is applied before averaging, thus for high OVERSAMPLE a higher RESOLUTION should be used. */
N
N/* Bits 3..0 : Oversample control */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Pos (0UL) /*!< Position of OVERSAMPLE field. */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Msk (0xFUL << SAADC_OVERSAMPLE_OVERSAMPLE_Pos) /*!< Bit mask of OVERSAMPLE field. */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Bypass (0UL) /*!< Bypass oversampling */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over2x (1UL) /*!< Oversample 2x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over4x (2UL) /*!< Oversample 4x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over8x (3UL) /*!< Oversample 8x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over16x (4UL) /*!< Oversample 16x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over32x (5UL) /*!< Oversample 32x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over64x (6UL) /*!< Oversample 64x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over128x (7UL) /*!< Oversample 128x */
N#define SAADC_OVERSAMPLE_OVERSAMPLE_Over256x (8UL) /*!< Oversample 256x */
N
N/* Register: SAADC_SAMPLERATE */
N/* Description: Controls normal or continuous sample rate */
N
N/* Bit 12 : Select mode for sample rate control */
N#define SAADC_SAMPLERATE_MODE_Pos (12UL) /*!< Position of MODE field. */
N#define SAADC_SAMPLERATE_MODE_Msk (0x1UL << SAADC_SAMPLERATE_MODE_Pos) /*!< Bit mask of MODE field. */
N#define SAADC_SAMPLERATE_MODE_Task (0UL) /*!< Rate is controlled from SAMPLE task */
N#define SAADC_SAMPLERATE_MODE_Timers (1UL) /*!< Rate is controlled from local timer (use CC to control the rate) */
N
N/* Bits 10..0 : Capture and compare value. Sample rate is 16 MHz/CC */
N#define SAADC_SAMPLERATE_CC_Pos (0UL) /*!< Position of CC field. */
N#define SAADC_SAMPLERATE_CC_Msk (0x7FFUL << SAADC_SAMPLERATE_CC_Pos) /*!< Bit mask of CC field. */
N
N/* Register: SAADC_RESULT_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define SAADC_RESULT_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define SAADC_RESULT_PTR_PTR_Msk (0xFFFFFFFFUL << SAADC_RESULT_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: SAADC_RESULT_MAXCNT */
N/* Description: Maximum number of buffer words to transfer */
N
N/* Bits 14..0 : Maximum number of buffer words to transfer */
N#define SAADC_RESULT_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define SAADC_RESULT_MAXCNT_MAXCNT_Msk (0x7FFFUL << SAADC_RESULT_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: SAADC_RESULT_AMOUNT */
N/* Description: Number of buffer words transferred since last START */
N
N/* Bits 14..0 : Number of buffer words transferred since last START. This register can be read after an END or STOPPED event. */
N#define SAADC_RESULT_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define SAADC_RESULT_AMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N
N/* Peripheral: SPI */
N/* Description: Serial Peripheral Interface 0 */
N
N/* Register: SPI_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 2 : Write '1' to Enable interrupt for READY event */
N#define SPI_INTENSET_READY_Pos (2UL) /*!< Position of READY field. */
N#define SPI_INTENSET_READY_Msk (0x1UL << SPI_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
N#define SPI_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
N#define SPI_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
N#define SPI_INTENSET_READY_Set (1UL) /*!< Enable */
N
N/* Register: SPI_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 2 : Write '1' to Disable interrupt for READY event */
N#define SPI_INTENCLR_READY_Pos (2UL) /*!< Position of READY field. */
N#define SPI_INTENCLR_READY_Msk (0x1UL << SPI_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
N#define SPI_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
N#define SPI_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
N#define SPI_INTENCLR_READY_Clear (1UL) /*!< Disable */
N
N/* Register: SPI_ENABLE */
N/* Description: Enable SPI */
N
N/* Bits 3..0 : Enable or disable SPI */
N#define SPI_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define SPI_ENABLE_ENABLE_Msk (0xFUL << SPI_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define SPI_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPI */
N#define SPI_ENABLE_ENABLE_Enabled (1UL) /*!< Enable SPI */
N
N/* Register: SPI_PSEL_SCK */
N/* Description: Pin select for SCK */
N
N/* Bits 31..0 : Pin number configuration for SPI SCK signal */
N#define SPI_PSEL_SCK_PSELSCK_Pos (0UL) /*!< Position of PSELSCK field. */
N#define SPI_PSEL_SCK_PSELSCK_Msk (0xFFFFFFFFUL << SPI_PSEL_SCK_PSELSCK_Pos) /*!< Bit mask of PSELSCK field. */
N#define SPI_PSEL_SCK_PSELSCK_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: SPI_PSEL_MOSI */
N/* Description: Pin select for MOSI */
N
N/* Bits 31..0 : Pin number configuration for SPI MOSI signal */
N#define SPI_PSEL_MOSI_PSELMOSI_Pos (0UL) /*!< Position of PSELMOSI field. */
N#define SPI_PSEL_MOSI_PSELMOSI_Msk (0xFFFFFFFFUL << SPI_PSEL_MOSI_PSELMOSI_Pos) /*!< Bit mask of PSELMOSI field. */
N#define SPI_PSEL_MOSI_PSELMOSI_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: SPI_PSEL_MISO */
N/* Description: Pin select for MISO */
N
N/* Bits 31..0 : Pin number configuration for SPI MISO signal */
N#define SPI_PSEL_MISO_PSELMISO_Pos (0UL) /*!< Position of PSELMISO field. */
N#define SPI_PSEL_MISO_PSELMISO_Msk (0xFFFFFFFFUL << SPI_PSEL_MISO_PSELMISO_Pos) /*!< Bit mask of PSELMISO field. */
N#define SPI_PSEL_MISO_PSELMISO_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: SPI_RXD */
N/* Description: RXD register */
N
N/* Bits 7..0 : RX data received. Double buffered */
N#define SPI_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
N#define SPI_RXD_RXD_Msk (0xFFUL << SPI_RXD_RXD_Pos) /*!< Bit mask of RXD field. */
N
N/* Register: SPI_TXD */
N/* Description: TXD register */
N
N/* Bits 7..0 : TX data to send. Double buffered */
N#define SPI_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
N#define SPI_TXD_TXD_Msk (0xFFUL << SPI_TXD_TXD_Pos) /*!< Bit mask of TXD field. */
N
N/* Register: SPI_FREQUENCY */
N/* Description: SPI frequency */
N
N/* Bits 31..0 : SPI master data rate */
N#define SPI_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
N#define SPI_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << SPI_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
N#define SPI_FREQUENCY_FREQUENCY_K125 (0x02000000UL) /*!< 125 kbps */
N#define SPI_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
N#define SPI_FREQUENCY_FREQUENCY_K500 (0x08000000UL) /*!< 500 kbps */
N#define SPI_FREQUENCY_FREQUENCY_M1 (0x10000000UL) /*!< 1 Mbps */
N#define SPI_FREQUENCY_FREQUENCY_M2 (0x20000000UL) /*!< 2 Mbps */
N#define SPI_FREQUENCY_FREQUENCY_M4 (0x40000000UL) /*!< 4 Mbps */
N#define SPI_FREQUENCY_FREQUENCY_M8 (0x80000000UL) /*!< 8 Mbps */
N
N/* Register: SPI_CONFIG */
N/* Description: Configuration register */
N
N/* Bit 2 : Serial clock (SCK) polarity */
N#define SPI_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
N#define SPI_CONFIG_CPOL_Msk (0x1UL << SPI_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
N#define SPI_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
N#define SPI_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */
N
N/* Bit 1 : Serial clock (SCK) phase */
N#define SPI_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
N#define SPI_CONFIG_CPHA_Msk (0x1UL << SPI_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
N#define SPI_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
N#define SPI_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */
N
N/* Bit 0 : Bit order */
N#define SPI_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
N#define SPI_CONFIG_ORDER_Msk (0x1UL << SPI_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
N#define SPI_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
N#define SPI_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */
N
N
N/* Peripheral: SPIM */
N/* Description: Serial Peripheral Interface Master with EasyDMA 0 */
N
N/* Register: SPIM_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 17 : Shortcut between END event and START task */
N#define SPIM_SHORTS_END_START_Pos (17UL) /*!< Position of END_START field. */
N#define SPIM_SHORTS_END_START_Msk (0x1UL << SPIM_SHORTS_END_START_Pos) /*!< Bit mask of END_START field. */
N#define SPIM_SHORTS_END_START_Disabled (0UL) /*!< Disable shortcut */
N#define SPIM_SHORTS_END_START_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: SPIM_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 19 : Write '1' to Enable interrupt for STARTED event */
N#define SPIM_INTENSET_STARTED_Pos (19UL) /*!< Position of STARTED field. */
N#define SPIM_INTENSET_STARTED_Msk (0x1UL << SPIM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define SPIM_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENSET_STARTED_Set (1UL) /*!< Enable */
N
N/* Bit 8 : Write '1' to Enable interrupt for ENDTX event */
N#define SPIM_INTENSET_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
N#define SPIM_INTENSET_ENDTX_Msk (0x1UL << SPIM_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define SPIM_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENSET_ENDTX_Set (1UL) /*!< Enable */
N
N/* Bit 6 : Write '1' to Enable interrupt for END event */
N#define SPIM_INTENSET_END_Pos (6UL) /*!< Position of END field. */
N#define SPIM_INTENSET_END_Msk (0x1UL << SPIM_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define SPIM_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for ENDRX event */
N#define SPIM_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define SPIM_INTENSET_ENDRX_Msk (0x1UL << SPIM_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define SPIM_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENSET_ENDRX_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define SPIM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define SPIM_INTENSET_STOPPED_Msk (0x1UL << SPIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define SPIM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Register: SPIM_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 19 : Write '1' to Disable interrupt for STARTED event */
N#define SPIM_INTENCLR_STARTED_Pos (19UL) /*!< Position of STARTED field. */
N#define SPIM_INTENCLR_STARTED_Msk (0x1UL << SPIM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
N#define SPIM_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENCLR_STARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 8 : Write '1' to Disable interrupt for ENDTX event */
N#define SPIM_INTENCLR_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
N#define SPIM_INTENCLR_ENDTX_Msk (0x1UL << SPIM_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define SPIM_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */
N
N/* Bit 6 : Write '1' to Disable interrupt for END event */
N#define SPIM_INTENCLR_END_Pos (6UL) /*!< Position of END field. */
N#define SPIM_INTENCLR_END_Msk (0x1UL << SPIM_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define SPIM_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for ENDRX event */
N#define SPIM_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define SPIM_INTENCLR_ENDRX_Msk (0x1UL << SPIM_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define SPIM_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define SPIM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define SPIM_INTENCLR_STOPPED_Msk (0x1UL << SPIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define SPIM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Register: SPIM_ENABLE */
N/* Description: Enable SPIM */
N
N/* Bits 3..0 : Enable or disable SPIM */
N#define SPIM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define SPIM_ENABLE_ENABLE_Msk (0xFUL << SPIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define SPIM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPIM */
N#define SPIM_ENABLE_ENABLE_Enabled (7UL) /*!< Enable SPIM */
N
N/* Register: SPIM_PSEL_SCK */
N/* Description: Pin select for SCK */
N
N/* Bit 31 : Connection */
N#define SPIM_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIM_PSEL_SCK_CONNECT_Msk (0x1UL << SPIM_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIM_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIM_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIM_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIM_PSEL_SCK_PIN_Msk (0x1FUL << SPIM_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIM_PSEL_MOSI */
N/* Description: Pin select for MOSI signal */
N
N/* Bit 31 : Connection */
N#define SPIM_PSEL_MOSI_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIM_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIM_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIM_PSEL_MOSI_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIM_PSEL_MOSI_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIM_PSEL_MOSI_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIM_PSEL_MOSI_PIN_Msk (0x1FUL << SPIM_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIM_PSEL_MISO */
N/* Description: Pin select for MISO signal */
N
N/* Bit 31 : Connection */
N#define SPIM_PSEL_MISO_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIM_PSEL_MISO_CONNECT_Msk (0x1UL << SPIM_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIM_PSEL_MISO_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIM_PSEL_MISO_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIM_PSEL_MISO_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIM_PSEL_MISO_PIN_Msk (0x1FUL << SPIM_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIM_FREQUENCY */
N/* Description: SPI frequency */
N
N/* Bits 31..0 : SPI master data rate */
N#define SPIM_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
N#define SPIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << SPIM_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
N#define SPIM_FREQUENCY_FREQUENCY_K125 (0x02000000UL) /*!< 125 kbps */
N#define SPIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
N#define SPIM_FREQUENCY_FREQUENCY_K500 (0x08000000UL) /*!< 500 kbps */
N#define SPIM_FREQUENCY_FREQUENCY_M1 (0x10000000UL) /*!< 1 Mbps */
N#define SPIM_FREQUENCY_FREQUENCY_M2 (0x20000000UL) /*!< 2 Mbps */
N#define SPIM_FREQUENCY_FREQUENCY_M4 (0x40000000UL) /*!< 4 Mbps */
N#define SPIM_FREQUENCY_FREQUENCY_M8 (0x80000000UL) /*!< 8 Mbps */
N
N/* Register: SPIM_RXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define SPIM_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define SPIM_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: SPIM_RXD_MAXCNT */
N/* Description: Maximum number of bytes in receive buffer */
N
N/* Bits 7..0 : Maximum number of bytes in receive buffer */
N#define SPIM_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define SPIM_RXD_MAXCNT_MAXCNT_Msk (0xFFUL << SPIM_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: SPIM_RXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction */
N#define SPIM_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define SPIM_RXD_AMOUNT_AMOUNT_Msk (0xFFUL << SPIM_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: SPIM_RXD_LIST */
N/* Description: EasyDMA list type */
N
N/* Bits 2..0 : List type */
N#define SPIM_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
N#define SPIM_RXD_LIST_LIST_Msk (0x7UL << SPIM_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
N#define SPIM_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
N#define SPIM_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */
N
N/* Register: SPIM_TXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define SPIM_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define SPIM_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: SPIM_TXD_MAXCNT */
N/* Description: Maximum number of bytes in transmit buffer */
N
N/* Bits 7..0 : Maximum number of bytes in transmit buffer */
N#define SPIM_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define SPIM_TXD_MAXCNT_MAXCNT_Msk (0xFFUL << SPIM_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: SPIM_TXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction */
N#define SPIM_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define SPIM_TXD_AMOUNT_AMOUNT_Msk (0xFFUL << SPIM_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: SPIM_TXD_LIST */
N/* Description: EasyDMA list type */
N
N/* Bits 2..0 : List type */
N#define SPIM_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
N#define SPIM_TXD_LIST_LIST_Msk (0x7UL << SPIM_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
N#define SPIM_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
N#define SPIM_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */
N
N/* Register: SPIM_CONFIG */
N/* Description: Configuration register */
N
N/* Bit 2 : Serial clock (SCK) polarity */
N#define SPIM_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
N#define SPIM_CONFIG_CPOL_Msk (0x1UL << SPIM_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
N#define SPIM_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
N#define SPIM_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */
N
N/* Bit 1 : Serial clock (SCK) phase */
N#define SPIM_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
N#define SPIM_CONFIG_CPHA_Msk (0x1UL << SPIM_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
N#define SPIM_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
N#define SPIM_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */
N
N/* Bit 0 : Bit order */
N#define SPIM_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
N#define SPIM_CONFIG_ORDER_Msk (0x1UL << SPIM_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
N#define SPIM_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
N#define SPIM_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */
N
N/* Register: SPIM_ORC */
N/* Description: Over-read character. Character clocked out in case and over-read of the TXD buffer. */
N
N/* Bits 7..0 : Over-read character. Character clocked out in case and over-read of the TXD buffer. */
N#define SPIM_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
N#define SPIM_ORC_ORC_Msk (0xFFUL << SPIM_ORC_ORC_Pos) /*!< Bit mask of ORC field. */
N
N
N/* Peripheral: SPIS */
N/* Description: SPI Slave 0 */
N
N/* Register: SPIS_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 2 : Shortcut between END event and ACQUIRE task */
N#define SPIS_SHORTS_END_ACQUIRE_Pos (2UL) /*!< Position of END_ACQUIRE field. */
N#define SPIS_SHORTS_END_ACQUIRE_Msk (0x1UL << SPIS_SHORTS_END_ACQUIRE_Pos) /*!< Bit mask of END_ACQUIRE field. */
N#define SPIS_SHORTS_END_ACQUIRE_Disabled (0UL) /*!< Disable shortcut */
N#define SPIS_SHORTS_END_ACQUIRE_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: SPIS_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 10 : Write '1' to Enable interrupt for ACQUIRED event */
N#define SPIS_INTENSET_ACQUIRED_Pos (10UL) /*!< Position of ACQUIRED field. */
N#define SPIS_INTENSET_ACQUIRED_Msk (0x1UL << SPIS_INTENSET_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field. */
N#define SPIS_INTENSET_ACQUIRED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENSET_ACQUIRED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENSET_ACQUIRED_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for ENDRX event */
N#define SPIS_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define SPIS_INTENSET_ENDRX_Msk (0x1UL << SPIS_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define SPIS_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENSET_ENDRX_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for END event */
N#define SPIS_INTENSET_END_Pos (1UL) /*!< Position of END field. */
N#define SPIS_INTENSET_END_Msk (0x1UL << SPIS_INTENSET_END_Pos) /*!< Bit mask of END field. */
N#define SPIS_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENSET_END_Set (1UL) /*!< Enable */
N
N/* Register: SPIS_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 10 : Write '1' to Disable interrupt for ACQUIRED event */
N#define SPIS_INTENCLR_ACQUIRED_Pos (10UL) /*!< Position of ACQUIRED field. */
N#define SPIS_INTENCLR_ACQUIRED_Msk (0x1UL << SPIS_INTENCLR_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field. */
N#define SPIS_INTENCLR_ACQUIRED_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENCLR_ACQUIRED_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENCLR_ACQUIRED_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for ENDRX event */
N#define SPIS_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define SPIS_INTENCLR_ENDRX_Msk (0x1UL << SPIS_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define SPIS_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for END event */
N#define SPIS_INTENCLR_END_Pos (1UL) /*!< Position of END field. */
N#define SPIS_INTENCLR_END_Msk (0x1UL << SPIS_INTENCLR_END_Pos) /*!< Bit mask of END field. */
N#define SPIS_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
N#define SPIS_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
N#define SPIS_INTENCLR_END_Clear (1UL) /*!< Disable */
N
N/* Register: SPIS_SEMSTAT */
N/* Description: Semaphore status register */
N
N/* Bits 1..0 : Semaphore status */
N#define SPIS_SEMSTAT_SEMSTAT_Pos (0UL) /*!< Position of SEMSTAT field. */
N#define SPIS_SEMSTAT_SEMSTAT_Msk (0x3UL << SPIS_SEMSTAT_SEMSTAT_Pos) /*!< Bit mask of SEMSTAT field. */
N#define SPIS_SEMSTAT_SEMSTAT_Free (0UL) /*!< Semaphore is free */
N#define SPIS_SEMSTAT_SEMSTAT_CPU (1UL) /*!< Semaphore is assigned to CPU */
N#define SPIS_SEMSTAT_SEMSTAT_SPIS (2UL) /*!< Semaphore is assigned to SPI slave */
N#define SPIS_SEMSTAT_SEMSTAT_CPUPending (3UL) /*!< Semaphore is assigned to SPI but a handover to the CPU is pending */
N
N/* Register: SPIS_STATUS */
N/* Description: Status from last transaction */
N
N/* Bit 1 : RX buffer overflow detected, and prevented */
N#define SPIS_STATUS_OVERFLOW_Pos (1UL) /*!< Position of OVERFLOW field. */
N#define SPIS_STATUS_OVERFLOW_Msk (0x1UL << SPIS_STATUS_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
N#define SPIS_STATUS_OVERFLOW_NotPresent (0UL) /*!< Read: error not present */
N#define SPIS_STATUS_OVERFLOW_Present (1UL) /*!< Read: error present */
N#define SPIS_STATUS_OVERFLOW_Clear (1UL) /*!< Write: clear error on writing '1' */
N
N/* Bit 0 : TX buffer over-read detected, and prevented */
N#define SPIS_STATUS_OVERREAD_Pos (0UL) /*!< Position of OVERREAD field. */
N#define SPIS_STATUS_OVERREAD_Msk (0x1UL << SPIS_STATUS_OVERREAD_Pos) /*!< Bit mask of OVERREAD field. */
N#define SPIS_STATUS_OVERREAD_NotPresent (0UL) /*!< Read: error not present */
N#define SPIS_STATUS_OVERREAD_Present (1UL) /*!< Read: error present */
N#define SPIS_STATUS_OVERREAD_Clear (1UL) /*!< Write: clear error on writing '1' */
N
N/* Register: SPIS_ENABLE */
N/* Description: Enable SPI slave */
N
N/* Bits 3..0 : Enable or disable SPI slave */
N#define SPIS_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define SPIS_ENABLE_ENABLE_Msk (0xFUL << SPIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define SPIS_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPI slave */
N#define SPIS_ENABLE_ENABLE_Enabled (2UL) /*!< Enable SPI slave */
N
N/* Register: SPIS_PSEL_SCK */
N/* Description: Pin select for SCK */
N
N/* Bit 31 : Connection */
N#define SPIS_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIS_PSEL_SCK_CONNECT_Msk (0x1UL << SPIS_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIS_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIS_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIS_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIS_PSEL_SCK_PIN_Msk (0x1FUL << SPIS_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIS_PSEL_MISO */
N/* Description: Pin select for MISO signal */
N
N/* Bit 31 : Connection */
N#define SPIS_PSEL_MISO_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIS_PSEL_MISO_CONNECT_Msk (0x1UL << SPIS_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIS_PSEL_MISO_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIS_PSEL_MISO_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIS_PSEL_MISO_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIS_PSEL_MISO_PIN_Msk (0x1FUL << SPIS_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIS_PSEL_MOSI */
N/* Description: Pin select for MOSI signal */
N
N/* Bit 31 : Connection */
N#define SPIS_PSEL_MOSI_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIS_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIS_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIS_PSEL_MOSI_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIS_PSEL_MOSI_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIS_PSEL_MOSI_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIS_PSEL_MOSI_PIN_Msk (0x1FUL << SPIS_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIS_PSEL_CSN */
N/* Description: Pin select for CSN signal */
N
N/* Bit 31 : Connection */
N#define SPIS_PSEL_CSN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define SPIS_PSEL_CSN_CONNECT_Msk (0x1UL << SPIS_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define SPIS_PSEL_CSN_CONNECT_Connected (0UL) /*!< Connect */
N#define SPIS_PSEL_CSN_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define SPIS_PSEL_CSN_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define SPIS_PSEL_CSN_PIN_Msk (0x1FUL << SPIS_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: SPIS_RXD_PTR */
N/* Description: RXD data pointer */
N
N/* Bits 31..0 : RXD data pointer */
N#define SPIS_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define SPIS_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: SPIS_RXD_MAXCNT */
N/* Description: Maximum number of bytes in receive buffer */
N
N/* Bits 7..0 : Maximum number of bytes in receive buffer */
N#define SPIS_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define SPIS_RXD_MAXCNT_MAXCNT_Msk (0xFFUL << SPIS_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: SPIS_RXD_AMOUNT */
N/* Description: Number of bytes received in last granted transaction */
N
N/* Bits 7..0 : Number of bytes received in the last granted transaction */
N#define SPIS_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define SPIS_RXD_AMOUNT_AMOUNT_Msk (0xFFUL << SPIS_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: SPIS_TXD_PTR */
N/* Description: TXD data pointer */
N
N/* Bits 31..0 : TXD data pointer */
N#define SPIS_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define SPIS_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: SPIS_TXD_MAXCNT */
N/* Description: Maximum number of bytes in transmit buffer */
N
N/* Bits 7..0 : Maximum number of bytes in transmit buffer */
N#define SPIS_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define SPIS_TXD_MAXCNT_MAXCNT_Msk (0xFFUL << SPIS_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: SPIS_TXD_AMOUNT */
N/* Description: Number of bytes transmitted in last granted transaction */
N
N/* Bits 7..0 : Number of bytes transmitted in last granted transaction */
N#define SPIS_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define SPIS_TXD_AMOUNT_AMOUNT_Msk (0xFFUL << SPIS_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: SPIS_CONFIG */
N/* Description: Configuration register */
N
N/* Bit 2 : Serial clock (SCK) polarity */
N#define SPIS_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
N#define SPIS_CONFIG_CPOL_Msk (0x1UL << SPIS_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
N#define SPIS_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
N#define SPIS_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */
N
N/* Bit 1 : Serial clock (SCK) phase */
N#define SPIS_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
N#define SPIS_CONFIG_CPHA_Msk (0x1UL << SPIS_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
N#define SPIS_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
N#define SPIS_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */
N
N/* Bit 0 : Bit order */
N#define SPIS_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
N#define SPIS_CONFIG_ORDER_Msk (0x1UL << SPIS_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
N#define SPIS_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
N#define SPIS_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */
N
N/* Register: SPIS_DEF */
N/* Description: Default character. Character clocked out in case of an ignored transaction. */
N
N/* Bits 7..0 : Default character. Character clocked out in case of an ignored transaction. */
N#define SPIS_DEF_DEF_Pos (0UL) /*!< Position of DEF field. */
N#define SPIS_DEF_DEF_Msk (0xFFUL << SPIS_DEF_DEF_Pos) /*!< Bit mask of DEF field. */
N
N/* Register: SPIS_ORC */
N/* Description: Over-read character */
N
N/* Bits 7..0 : Over-read character. Character clocked out after an over-read of the transmit buffer. */
N#define SPIS_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
N#define SPIS_ORC_ORC_Msk (0xFFUL << SPIS_ORC_ORC_Pos) /*!< Bit mask of ORC field. */
N
N
N/* Peripheral: TEMP */
N/* Description: Temperature Sensor */
N
N/* Register: TEMP_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 0 : Write '1' to Enable interrupt for DATARDY event */
N#define TEMP_INTENSET_DATARDY_Pos (0UL) /*!< Position of DATARDY field. */
N#define TEMP_INTENSET_DATARDY_Msk (0x1UL << TEMP_INTENSET_DATARDY_Pos) /*!< Bit mask of DATARDY field. */
N#define TEMP_INTENSET_DATARDY_Disabled (0UL) /*!< Read: Disabled */
N#define TEMP_INTENSET_DATARDY_Enabled (1UL) /*!< Read: Enabled */
N#define TEMP_INTENSET_DATARDY_Set (1UL) /*!< Enable */
N
N/* Register: TEMP_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 0 : Write '1' to Disable interrupt for DATARDY event */
N#define TEMP_INTENCLR_DATARDY_Pos (0UL) /*!< Position of DATARDY field. */
N#define TEMP_INTENCLR_DATARDY_Msk (0x1UL << TEMP_INTENCLR_DATARDY_Pos) /*!< Bit mask of DATARDY field. */
N#define TEMP_INTENCLR_DATARDY_Disabled (0UL) /*!< Read: Disabled */
N#define TEMP_INTENCLR_DATARDY_Enabled (1UL) /*!< Read: Enabled */
N#define TEMP_INTENCLR_DATARDY_Clear (1UL) /*!< Disable */
N
N/* Register: TEMP_TEMP */
N/* Description: Temperature in degC (0.25deg steps) */
N
N/* Bits 31..0 : Temperature in degC (0.25deg steps) */
N#define TEMP_TEMP_TEMP_Pos (0UL) /*!< Position of TEMP field. */
N#define TEMP_TEMP_TEMP_Msk (0xFFFFFFFFUL << TEMP_TEMP_TEMP_Pos) /*!< Bit mask of TEMP field. */
N
N/* Register: TEMP_A0 */
N/* Description: Slope of 1st piece wise linear function */
N
N/* Bits 11..0 : Slope of 1st piece wise linear function */
N#define TEMP_A0_A0_Pos (0UL) /*!< Position of A0 field. */
N#define TEMP_A0_A0_Msk (0xFFFUL << TEMP_A0_A0_Pos) /*!< Bit mask of A0 field. */
N
N/* Register: TEMP_A1 */
N/* Description: Slope of 2nd piece wise linear function */
N
N/* Bits 11..0 : Slope of 2nd piece wise linear function */
N#define TEMP_A1_A1_Pos (0UL) /*!< Position of A1 field. */
N#define TEMP_A1_A1_Msk (0xFFFUL << TEMP_A1_A1_Pos) /*!< Bit mask of A1 field. */
N
N/* Register: TEMP_A2 */
N/* Description: Slope of 3rd piece wise linear function */
N
N/* Bits 11..0 : Slope of 3rd piece wise linear function */
N#define TEMP_A2_A2_Pos (0UL) /*!< Position of A2 field. */
N#define TEMP_A2_A2_Msk (0xFFFUL << TEMP_A2_A2_Pos) /*!< Bit mask of A2 field. */
N
N/* Register: TEMP_A3 */
N/* Description: Slope of 4th piece wise linear function */
N
N/* Bits 11..0 : Slope of 4th piece wise linear function */
N#define TEMP_A3_A3_Pos (0UL) /*!< Position of A3 field. */
N#define TEMP_A3_A3_Msk (0xFFFUL << TEMP_A3_A3_Pos) /*!< Bit mask of A3 field. */
N
N/* Register: TEMP_A4 */
N/* Description: Slope of 5th piece wise linear function */
N
N/* Bits 11..0 : Slope of 5th piece wise linear function */
N#define TEMP_A4_A4_Pos (0UL) /*!< Position of A4 field. */
N#define TEMP_A4_A4_Msk (0xFFFUL << TEMP_A4_A4_Pos) /*!< Bit mask of A4 field. */
N
N/* Register: TEMP_A5 */
N/* Description: Slope of 6th piece wise linear function */
N
N/* Bits 11..0 : Slope of 6th piece wise linear function */
N#define TEMP_A5_A5_Pos (0UL) /*!< Position of A5 field. */
N#define TEMP_A5_A5_Msk (0xFFFUL << TEMP_A5_A5_Pos) /*!< Bit mask of A5 field. */
N
N/* Register: TEMP_B0 */
N/* Description: y-intercept of 1st piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 1st piece wise linear function */
N#define TEMP_B0_B0_Pos (0UL) /*!< Position of B0 field. */
N#define TEMP_B0_B0_Msk (0x3FFFUL << TEMP_B0_B0_Pos) /*!< Bit mask of B0 field. */
N
N/* Register: TEMP_B1 */
N/* Description: y-intercept of 2nd piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 2nd piece wise linear function */
N#define TEMP_B1_B1_Pos (0UL) /*!< Position of B1 field. */
N#define TEMP_B1_B1_Msk (0x3FFFUL << TEMP_B1_B1_Pos) /*!< Bit mask of B1 field. */
N
N/* Register: TEMP_B2 */
N/* Description: y-intercept of 3rd piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 3rd piece wise linear function */
N#define TEMP_B2_B2_Pos (0UL) /*!< Position of B2 field. */
N#define TEMP_B2_B2_Msk (0x3FFFUL << TEMP_B2_B2_Pos) /*!< Bit mask of B2 field. */
N
N/* Register: TEMP_B3 */
N/* Description: y-intercept of 4th piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 4th piece wise linear function */
N#define TEMP_B3_B3_Pos (0UL) /*!< Position of B3 field. */
N#define TEMP_B3_B3_Msk (0x3FFFUL << TEMP_B3_B3_Pos) /*!< Bit mask of B3 field. */
N
N/* Register: TEMP_B4 */
N/* Description: y-intercept of 5th piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 5th piece wise linear function */
N#define TEMP_B4_B4_Pos (0UL) /*!< Position of B4 field. */
N#define TEMP_B4_B4_Msk (0x3FFFUL << TEMP_B4_B4_Pos) /*!< Bit mask of B4 field. */
N
N/* Register: TEMP_B5 */
N/* Description: y-intercept of 6th piece wise linear function */
N
N/* Bits 13..0 : y-intercept of 6th piece wise linear function */
N#define TEMP_B5_B5_Pos (0UL) /*!< Position of B5 field. */
N#define TEMP_B5_B5_Msk (0x3FFFUL << TEMP_B5_B5_Pos) /*!< Bit mask of B5 field. */
N
N/* Register: TEMP_T0 */
N/* Description: End point of 1st piece wise linear function */
N
N/* Bits 7..0 : End point of 1st piece wise linear function */
N#define TEMP_T0_T0_Pos (0UL) /*!< Position of T0 field. */
N#define TEMP_T0_T0_Msk (0xFFUL << TEMP_T0_T0_Pos) /*!< Bit mask of T0 field. */
N
N/* Register: TEMP_T1 */
N/* Description: End point of 2nd piece wise linear function */
N
N/* Bits 7..0 : End point of 2nd piece wise linear function */
N#define TEMP_T1_T1_Pos (0UL) /*!< Position of T1 field. */
N#define TEMP_T1_T1_Msk (0xFFUL << TEMP_T1_T1_Pos) /*!< Bit mask of T1 field. */
N
N/* Register: TEMP_T2 */
N/* Description: End point of 3rd piece wise linear function */
N
N/* Bits 7..0 : End point of 3rd piece wise linear function */
N#define TEMP_T2_T2_Pos (0UL) /*!< Position of T2 field. */
N#define TEMP_T2_T2_Msk (0xFFUL << TEMP_T2_T2_Pos) /*!< Bit mask of T2 field. */
N
N/* Register: TEMP_T3 */
N/* Description: End point of 4th piece wise linear function */
N
N/* Bits 7..0 : End point of 4th piece wise linear function */
N#define TEMP_T3_T3_Pos (0UL) /*!< Position of T3 field. */
N#define TEMP_T3_T3_Msk (0xFFUL << TEMP_T3_T3_Pos) /*!< Bit mask of T3 field. */
N
N/* Register: TEMP_T4 */
N/* Description: End point of 5th piece wise linear function */
N
N/* Bits 7..0 : End point of 5th piece wise linear function */
N#define TEMP_T4_T4_Pos (0UL) /*!< Position of T4 field. */
N#define TEMP_T4_T4_Msk (0xFFUL << TEMP_T4_T4_Pos) /*!< Bit mask of T4 field. */
N
N
N/* Peripheral: TIMER */
N/* Description: Timer/Counter 0 */
N
N/* Register: TIMER_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 13 : Shortcut between COMPARE[5] event and STOP task */
N#define TIMER_SHORTS_COMPARE5_STOP_Pos (13UL) /*!< Position of COMPARE5_STOP field. */
N#define TIMER_SHORTS_COMPARE5_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE5_STOP_Pos) /*!< Bit mask of COMPARE5_STOP field. */
N#define TIMER_SHORTS_COMPARE5_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE5_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 12 : Shortcut between COMPARE[4] event and STOP task */
N#define TIMER_SHORTS_COMPARE4_STOP_Pos (12UL) /*!< Position of COMPARE4_STOP field. */
N#define TIMER_SHORTS_COMPARE4_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE4_STOP_Pos) /*!< Bit mask of COMPARE4_STOP field. */
N#define TIMER_SHORTS_COMPARE4_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE4_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 11 : Shortcut between COMPARE[3] event and STOP task */
N#define TIMER_SHORTS_COMPARE3_STOP_Pos (11UL) /*!< Position of COMPARE3_STOP field. */
N#define TIMER_SHORTS_COMPARE3_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE3_STOP_Pos) /*!< Bit mask of COMPARE3_STOP field. */
N#define TIMER_SHORTS_COMPARE3_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE3_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 10 : Shortcut between COMPARE[2] event and STOP task */
N#define TIMER_SHORTS_COMPARE2_STOP_Pos (10UL) /*!< Position of COMPARE2_STOP field. */
N#define TIMER_SHORTS_COMPARE2_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE2_STOP_Pos) /*!< Bit mask of COMPARE2_STOP field. */
N#define TIMER_SHORTS_COMPARE2_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE2_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 9 : Shortcut between COMPARE[1] event and STOP task */
N#define TIMER_SHORTS_COMPARE1_STOP_Pos (9UL) /*!< Position of COMPARE1_STOP field. */
N#define TIMER_SHORTS_COMPARE1_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE1_STOP_Pos) /*!< Bit mask of COMPARE1_STOP field. */
N#define TIMER_SHORTS_COMPARE1_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE1_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 8 : Shortcut between COMPARE[0] event and STOP task */
N#define TIMER_SHORTS_COMPARE0_STOP_Pos (8UL) /*!< Position of COMPARE0_STOP field. */
N#define TIMER_SHORTS_COMPARE0_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE0_STOP_Pos) /*!< Bit mask of COMPARE0_STOP field. */
N#define TIMER_SHORTS_COMPARE0_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE0_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 5 : Shortcut between COMPARE[5] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE5_CLEAR_Pos (5UL) /*!< Position of COMPARE5_CLEAR field. */
N#define TIMER_SHORTS_COMPARE5_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE5_CLEAR_Pos) /*!< Bit mask of COMPARE5_CLEAR field. */
N#define TIMER_SHORTS_COMPARE5_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE5_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 4 : Shortcut between COMPARE[4] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE4_CLEAR_Pos (4UL) /*!< Position of COMPARE4_CLEAR field. */
N#define TIMER_SHORTS_COMPARE4_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE4_CLEAR_Pos) /*!< Bit mask of COMPARE4_CLEAR field. */
N#define TIMER_SHORTS_COMPARE4_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE4_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between COMPARE[3] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE3_CLEAR_Pos (3UL) /*!< Position of COMPARE3_CLEAR field. */
N#define TIMER_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE3_CLEAR_Pos) /*!< Bit mask of COMPARE3_CLEAR field. */
N#define TIMER_SHORTS_COMPARE3_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE3_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 2 : Shortcut between COMPARE[2] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE2_CLEAR_Pos (2UL) /*!< Position of COMPARE2_CLEAR field. */
N#define TIMER_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE2_CLEAR_Pos) /*!< Bit mask of COMPARE2_CLEAR field. */
N#define TIMER_SHORTS_COMPARE2_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE2_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 1 : Shortcut between COMPARE[1] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE1_CLEAR_Pos (1UL) /*!< Position of COMPARE1_CLEAR field. */
N#define TIMER_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE1_CLEAR_Pos) /*!< Bit mask of COMPARE1_CLEAR field. */
N#define TIMER_SHORTS_COMPARE1_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE1_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between COMPARE[0] event and CLEAR task */
N#define TIMER_SHORTS_COMPARE0_CLEAR_Pos (0UL) /*!< Position of COMPARE0_CLEAR field. */
N#define TIMER_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE0_CLEAR_Pos) /*!< Bit mask of COMPARE0_CLEAR field. */
N#define TIMER_SHORTS_COMPARE0_CLEAR_Disabled (0UL) /*!< Disable shortcut */
N#define TIMER_SHORTS_COMPARE0_CLEAR_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: TIMER_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 21 : Write '1' to Enable interrupt for COMPARE[5] event */
N#define TIMER_INTENSET_COMPARE5_Pos (21UL) /*!< Position of COMPARE5 field. */
N#define TIMER_INTENSET_COMPARE5_Msk (0x1UL << TIMER_INTENSET_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field. */
N#define TIMER_INTENSET_COMPARE5_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE5_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE5_Set (1UL) /*!< Enable */
N
N/* Bit 20 : Write '1' to Enable interrupt for COMPARE[4] event */
N#define TIMER_INTENSET_COMPARE4_Pos (20UL) /*!< Position of COMPARE4 field. */
N#define TIMER_INTENSET_COMPARE4_Msk (0x1UL << TIMER_INTENSET_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field. */
N#define TIMER_INTENSET_COMPARE4_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE4_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE4_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for COMPARE[3] event */
N#define TIMER_INTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define TIMER_INTENSET_COMPARE3_Msk (0x1UL << TIMER_INTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define TIMER_INTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE3_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable interrupt for COMPARE[2] event */
N#define TIMER_INTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define TIMER_INTENSET_COMPARE2_Msk (0x1UL << TIMER_INTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define TIMER_INTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE2_Set (1UL) /*!< Enable */
N
N/* Bit 17 : Write '1' to Enable interrupt for COMPARE[1] event */
N#define TIMER_INTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define TIMER_INTENSET_COMPARE1_Msk (0x1UL << TIMER_INTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define TIMER_INTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE1_Set (1UL) /*!< Enable */
N
N/* Bit 16 : Write '1' to Enable interrupt for COMPARE[0] event */
N#define TIMER_INTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define TIMER_INTENSET_COMPARE0_Msk (0x1UL << TIMER_INTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define TIMER_INTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENSET_COMPARE0_Set (1UL) /*!< Enable */
N
N/* Register: TIMER_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 21 : Write '1' to Disable interrupt for COMPARE[5] event */
N#define TIMER_INTENCLR_COMPARE5_Pos (21UL) /*!< Position of COMPARE5 field. */
N#define TIMER_INTENCLR_COMPARE5_Msk (0x1UL << TIMER_INTENCLR_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field. */
N#define TIMER_INTENCLR_COMPARE5_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE5_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE5_Clear (1UL) /*!< Disable */
N
N/* Bit 20 : Write '1' to Disable interrupt for COMPARE[4] event */
N#define TIMER_INTENCLR_COMPARE4_Pos (20UL) /*!< Position of COMPARE4 field. */
N#define TIMER_INTENCLR_COMPARE4_Msk (0x1UL << TIMER_INTENCLR_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field. */
N#define TIMER_INTENCLR_COMPARE4_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE4_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE4_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for COMPARE[3] event */
N#define TIMER_INTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
N#define TIMER_INTENCLR_COMPARE3_Msk (0x1UL << TIMER_INTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
N#define TIMER_INTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE3_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable interrupt for COMPARE[2] event */
N#define TIMER_INTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
N#define TIMER_INTENCLR_COMPARE2_Msk (0x1UL << TIMER_INTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
N#define TIMER_INTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE2_Clear (1UL) /*!< Disable */
N
N/* Bit 17 : Write '1' to Disable interrupt for COMPARE[1] event */
N#define TIMER_INTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
N#define TIMER_INTENCLR_COMPARE1_Msk (0x1UL << TIMER_INTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
N#define TIMER_INTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE1_Clear (1UL) /*!< Disable */
N
N/* Bit 16 : Write '1' to Disable interrupt for COMPARE[0] event */
N#define TIMER_INTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
N#define TIMER_INTENCLR_COMPARE0_Msk (0x1UL << TIMER_INTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
N#define TIMER_INTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
N#define TIMER_INTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
N#define TIMER_INTENCLR_COMPARE0_Clear (1UL) /*!< Disable */
N
N/* Register: TIMER_MODE */
N/* Description: Timer mode selection */
N
N/* Bits 1..0 : Timer mode */
N#define TIMER_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
N#define TIMER_MODE_MODE_Msk (0x3UL << TIMER_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
N#define TIMER_MODE_MODE_Timer (0UL) /*!< Select Timer mode */
N#define TIMER_MODE_MODE_Counter (1UL) /*!< Deprecated enumerator -  Select Counter mode */
N#define TIMER_MODE_MODE_LowPowerCounter (2UL) /*!< Select Low Power Counter mode */
N
N/* Register: TIMER_BITMODE */
N/* Description: Configure the number of bits used by the TIMER */
N
N/* Bits 1..0 : Timer bit width */
N#define TIMER_BITMODE_BITMODE_Pos (0UL) /*!< Position of BITMODE field. */
N#define TIMER_BITMODE_BITMODE_Msk (0x3UL << TIMER_BITMODE_BITMODE_Pos) /*!< Bit mask of BITMODE field. */
N#define TIMER_BITMODE_BITMODE_16Bit (0UL) /*!< 16 bit timer bit width */
N#define TIMER_BITMODE_BITMODE_08Bit (1UL) /*!< 8 bit timer bit width */
N#define TIMER_BITMODE_BITMODE_24Bit (2UL) /*!< 24 bit timer bit width */
N#define TIMER_BITMODE_BITMODE_32Bit (3UL) /*!< 32 bit timer bit width */
N
N/* Register: TIMER_PRESCALER */
N/* Description: Timer prescaler register */
N
N/* Bits 3..0 : Prescaler value */
N#define TIMER_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
N#define TIMER_PRESCALER_PRESCALER_Msk (0xFUL << TIMER_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */
N
N/* Register: TIMER_CC */
N/* Description: Description collection[0]:  Capture/Compare register 0 */
N
N/* Bits 31..0 : Capture/Compare value */
N#define TIMER_CC_CC_Pos (0UL) /*!< Position of CC field. */
N#define TIMER_CC_CC_Msk (0xFFFFFFFFUL << TIMER_CC_CC_Pos) /*!< Bit mask of CC field. */
N
N
N/* Peripheral: TWI */
N/* Description: I2C compatible Two-Wire Interface 0 */
N
N/* Register: TWI_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 1 : Shortcut between BB event and STOP task */
N#define TWI_SHORTS_BB_STOP_Pos (1UL) /*!< Position of BB_STOP field. */
N#define TWI_SHORTS_BB_STOP_Msk (0x1UL << TWI_SHORTS_BB_STOP_Pos) /*!< Bit mask of BB_STOP field. */
N#define TWI_SHORTS_BB_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TWI_SHORTS_BB_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 0 : Shortcut between BB event and SUSPEND task */
N#define TWI_SHORTS_BB_SUSPEND_Pos (0UL) /*!< Position of BB_SUSPEND field. */
N#define TWI_SHORTS_BB_SUSPEND_Msk (0x1UL << TWI_SHORTS_BB_SUSPEND_Pos) /*!< Bit mask of BB_SUSPEND field. */
N#define TWI_SHORTS_BB_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
N#define TWI_SHORTS_BB_SUSPEND_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: TWI_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 18 : Write '1' to Enable interrupt for SUSPENDED event */
N#define TWI_INTENSET_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
N#define TWI_INTENSET_SUSPENDED_Msk (0x1UL << TWI_INTENSET_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
N#define TWI_INTENSET_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_SUSPENDED_Set (1UL) /*!< Enable */
N
N/* Bit 14 : Write '1' to Enable interrupt for BB event */
N#define TWI_INTENSET_BB_Pos (14UL) /*!< Position of BB field. */
N#define TWI_INTENSET_BB_Msk (0x1UL << TWI_INTENSET_BB_Pos) /*!< Bit mask of BB field. */
N#define TWI_INTENSET_BB_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_BB_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_BB_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for ERROR event */
N#define TWI_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWI_INTENSET_ERROR_Msk (0x1UL << TWI_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWI_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for TXDSENT event */
N#define TWI_INTENSET_TXDSENT_Pos (7UL) /*!< Position of TXDSENT field. */
N#define TWI_INTENSET_TXDSENT_Msk (0x1UL << TWI_INTENSET_TXDSENT_Pos) /*!< Bit mask of TXDSENT field. */
N#define TWI_INTENSET_TXDSENT_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_TXDSENT_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_TXDSENT_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for RXDREADY event */
N#define TWI_INTENSET_RXDREADY_Pos (2UL) /*!< Position of RXDREADY field. */
N#define TWI_INTENSET_RXDREADY_Msk (0x1UL << TWI_INTENSET_RXDREADY_Pos) /*!< Bit mask of RXDREADY field. */
N#define TWI_INTENSET_RXDREADY_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_RXDREADY_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_RXDREADY_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define TWI_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWI_INTENSET_STOPPED_Msk (0x1UL << TWI_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWI_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Register: TWI_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 18 : Write '1' to Disable interrupt for SUSPENDED event */
N#define TWI_INTENCLR_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
N#define TWI_INTENCLR_SUSPENDED_Msk (0x1UL << TWI_INTENCLR_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
N#define TWI_INTENCLR_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_SUSPENDED_Clear (1UL) /*!< Disable */
N
N/* Bit 14 : Write '1' to Disable interrupt for BB event */
N#define TWI_INTENCLR_BB_Pos (14UL) /*!< Position of BB field. */
N#define TWI_INTENCLR_BB_Msk (0x1UL << TWI_INTENCLR_BB_Pos) /*!< Bit mask of BB field. */
N#define TWI_INTENCLR_BB_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_BB_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_BB_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for ERROR event */
N#define TWI_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWI_INTENCLR_ERROR_Msk (0x1UL << TWI_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWI_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for TXDSENT event */
N#define TWI_INTENCLR_TXDSENT_Pos (7UL) /*!< Position of TXDSENT field. */
N#define TWI_INTENCLR_TXDSENT_Msk (0x1UL << TWI_INTENCLR_TXDSENT_Pos) /*!< Bit mask of TXDSENT field. */
N#define TWI_INTENCLR_TXDSENT_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_TXDSENT_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_TXDSENT_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for RXDREADY event */
N#define TWI_INTENCLR_RXDREADY_Pos (2UL) /*!< Position of RXDREADY field. */
N#define TWI_INTENCLR_RXDREADY_Msk (0x1UL << TWI_INTENCLR_RXDREADY_Pos) /*!< Bit mask of RXDREADY field. */
N#define TWI_INTENCLR_RXDREADY_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_RXDREADY_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_RXDREADY_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define TWI_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWI_INTENCLR_STOPPED_Msk (0x1UL << TWI_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWI_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWI_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWI_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Register: TWI_ERRORSRC */
N/* Description: Error source */
N
N/* Bit 2 : NACK received after sending a data byte (write '1' to clear) */
N#define TWI_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
N#define TWI_ERRORSRC_DNACK_Msk (0x1UL << TWI_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
N#define TWI_ERRORSRC_DNACK_NotPresent (0UL) /*!< Read: error not present */
N#define TWI_ERRORSRC_DNACK_Present (1UL) /*!< Read: error present */
N
N/* Bit 1 : NACK received after sending the address (write '1' to clear) */
N#define TWI_ERRORSRC_ANACK_Pos (1UL) /*!< Position of ANACK field. */
N#define TWI_ERRORSRC_ANACK_Msk (0x1UL << TWI_ERRORSRC_ANACK_Pos) /*!< Bit mask of ANACK field. */
N#define TWI_ERRORSRC_ANACK_NotPresent (0UL) /*!< Read: error not present */
N#define TWI_ERRORSRC_ANACK_Present (1UL) /*!< Read: error present */
N
N/* Bit 0 : Overrun error */
N#define TWI_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
N#define TWI_ERRORSRC_OVERRUN_Msk (0x1UL << TWI_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
N#define TWI_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: no overrun occured */
N#define TWI_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: overrun occured */
N
N/* Register: TWI_ENABLE */
N/* Description: Enable TWI */
N
N/* Bits 3..0 : Enable or disable TWI */
N#define TWI_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define TWI_ENABLE_ENABLE_Msk (0xFUL << TWI_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define TWI_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWI */
N#define TWI_ENABLE_ENABLE_Enabled (5UL) /*!< Enable TWI */
N
N/* Register: TWI_PSELSCL */
N/* Description: Pin select for SCL */
N
N/* Bits 31..0 : Pin number configuration for TWI SCL signal */
N#define TWI_PSELSCL_PSELSCL_Pos (0UL) /*!< Position of PSELSCL field. */
N#define TWI_PSELSCL_PSELSCL_Msk (0xFFFFFFFFUL << TWI_PSELSCL_PSELSCL_Pos) /*!< Bit mask of PSELSCL field. */
N#define TWI_PSELSCL_PSELSCL_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: TWI_PSELSDA */
N/* Description: Pin select for SDA */
N
N/* Bits 31..0 : Pin number configuration for TWI SDA signal */
N#define TWI_PSELSDA_PSELSDA_Pos (0UL) /*!< Position of PSELSDA field. */
N#define TWI_PSELSDA_PSELSDA_Msk (0xFFFFFFFFUL << TWI_PSELSDA_PSELSDA_Pos) /*!< Bit mask of PSELSDA field. */
N#define TWI_PSELSDA_PSELSDA_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: TWI_RXD */
N/* Description: RXD register */
N
N/* Bits 7..0 : RXD register */
N#define TWI_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
N#define TWI_RXD_RXD_Msk (0xFFUL << TWI_RXD_RXD_Pos) /*!< Bit mask of RXD field. */
N
N/* Register: TWI_TXD */
N/* Description: TXD register */
N
N/* Bits 7..0 : TXD register */
N#define TWI_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
N#define TWI_TXD_TXD_Msk (0xFFUL << TWI_TXD_TXD_Pos) /*!< Bit mask of TXD field. */
N
N/* Register: TWI_FREQUENCY */
N/* Description: TWI frequency */
N
N/* Bits 31..0 : TWI master clock frequency */
N#define TWI_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
N#define TWI_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWI_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
N#define TWI_FREQUENCY_FREQUENCY_K100 (0x01980000UL) /*!< 100 kbps */
N#define TWI_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
N#define TWI_FREQUENCY_FREQUENCY_K400 (0x06680000UL) /*!< 400 kbps (actual rate 410.256 kbps) */
N
N/* Register: TWI_ADDRESS */
N/* Description: Address used in the TWI transfer */
N
N/* Bits 6..0 : Address used in the TWI transfer */
N#define TWI_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
N#define TWI_ADDRESS_ADDRESS_Msk (0x7FUL << TWI_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */
N
N
N/* Peripheral: TWIM */
N/* Description: I2C compatible Two-Wire Master Interface with EasyDMA 0 */
N
N/* Register: TWIM_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 12 : Shortcut between LASTRX event and STOP task */
N#define TWIM_SHORTS_LASTRX_STOP_Pos (12UL) /*!< Position of LASTRX_STOP field. */
N#define TWIM_SHORTS_LASTRX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTRX_STOP_Pos) /*!< Bit mask of LASTRX_STOP field. */
N#define TWIM_SHORTS_LASTRX_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TWIM_SHORTS_LASTRX_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 10 : Shortcut between LASTRX event and STARTTX task */
N#define TWIM_SHORTS_LASTRX_STARTTX_Pos (10UL) /*!< Position of LASTRX_STARTTX field. */
N#define TWIM_SHORTS_LASTRX_STARTTX_Msk (0x1UL << TWIM_SHORTS_LASTRX_STARTTX_Pos) /*!< Bit mask of LASTRX_STARTTX field. */
N#define TWIM_SHORTS_LASTRX_STARTTX_Disabled (0UL) /*!< Disable shortcut */
N#define TWIM_SHORTS_LASTRX_STARTTX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 9 : Shortcut between LASTTX event and STOP task */
N#define TWIM_SHORTS_LASTTX_STOP_Pos (9UL) /*!< Position of LASTTX_STOP field. */
N#define TWIM_SHORTS_LASTTX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTTX_STOP_Pos) /*!< Bit mask of LASTTX_STOP field. */
N#define TWIM_SHORTS_LASTTX_STOP_Disabled (0UL) /*!< Disable shortcut */
N#define TWIM_SHORTS_LASTTX_STOP_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 8 : Shortcut between LASTTX event and SUSPEND task */
N#define TWIM_SHORTS_LASTTX_SUSPEND_Pos (8UL) /*!< Position of LASTTX_SUSPEND field. */
N#define TWIM_SHORTS_LASTTX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTTX_SUSPEND_Pos) /*!< Bit mask of LASTTX_SUSPEND field. */
N#define TWIM_SHORTS_LASTTX_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
N#define TWIM_SHORTS_LASTTX_SUSPEND_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 7 : Shortcut between LASTTX event and STARTRX task */
N#define TWIM_SHORTS_LASTTX_STARTRX_Pos (7UL) /*!< Position of LASTTX_STARTRX field. */
N#define TWIM_SHORTS_LASTTX_STARTRX_Msk (0x1UL << TWIM_SHORTS_LASTTX_STARTRX_Pos) /*!< Bit mask of LASTTX_STARTRX field. */
N#define TWIM_SHORTS_LASTTX_STARTRX_Disabled (0UL) /*!< Disable shortcut */
N#define TWIM_SHORTS_LASTTX_STARTRX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: TWIM_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 24 : Enable or disable interrupt for LASTTX event */
N#define TWIM_INTEN_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
N#define TWIM_INTEN_LASTTX_Msk (0x1UL << TWIM_INTEN_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
N#define TWIM_INTEN_LASTTX_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_LASTTX_Enabled (1UL) /*!< Enable */
N
N/* Bit 23 : Enable or disable interrupt for LASTRX event */
N#define TWIM_INTEN_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
N#define TWIM_INTEN_LASTRX_Msk (0x1UL << TWIM_INTEN_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
N#define TWIM_INTEN_LASTRX_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_LASTRX_Enabled (1UL) /*!< Enable */
N
N/* Bit 20 : Enable or disable interrupt for TXSTARTED event */
N#define TWIM_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIM_INTEN_TXSTARTED_Msk (0x1UL << TWIM_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIM_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 19 : Enable or disable interrupt for RXSTARTED event */
N#define TWIM_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIM_INTEN_RXSTARTED_Msk (0x1UL << TWIM_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIM_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 18 : Enable or disable interrupt for SUSPENDED event */
N#define TWIM_INTEN_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
N#define TWIM_INTEN_SUSPENDED_Msk (0x1UL << TWIM_INTEN_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
N#define TWIM_INTEN_SUSPENDED_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_SUSPENDED_Enabled (1UL) /*!< Enable */
N
N/* Bit 9 : Enable or disable interrupt for ERROR event */
N#define TWIM_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIM_INTEN_ERROR_Msk (0x1UL << TWIM_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIM_INTEN_ERROR_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_ERROR_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for STOPPED event */
N#define TWIM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIM_INTEN_STOPPED_Msk (0x1UL << TWIM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define TWIM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Register: TWIM_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 24 : Write '1' to Enable interrupt for LASTTX event */
N#define TWIM_INTENSET_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
N#define TWIM_INTENSET_LASTTX_Msk (0x1UL << TWIM_INTENSET_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
N#define TWIM_INTENSET_LASTTX_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_LASTTX_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_LASTTX_Set (1UL) /*!< Enable */
N
N/* Bit 23 : Write '1' to Enable interrupt for LASTRX event */
N#define TWIM_INTENSET_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
N#define TWIM_INTENSET_LASTRX_Msk (0x1UL << TWIM_INTENSET_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
N#define TWIM_INTENSET_LASTRX_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_LASTRX_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_LASTRX_Set (1UL) /*!< Enable */
N
N/* Bit 20 : Write '1' to Enable interrupt for TXSTARTED event */
N#define TWIM_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIM_INTENSET_TXSTARTED_Msk (0x1UL << TWIM_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIM_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for RXSTARTED event */
N#define TWIM_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIM_INTENSET_RXSTARTED_Msk (0x1UL << TWIM_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIM_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 18 : Write '1' to Enable interrupt for SUSPENDED event */
N#define TWIM_INTENSET_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
N#define TWIM_INTENSET_SUSPENDED_Msk (0x1UL << TWIM_INTENSET_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
N#define TWIM_INTENSET_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_SUSPENDED_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for ERROR event */
N#define TWIM_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIM_INTENSET_ERROR_Msk (0x1UL << TWIM_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIM_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define TWIM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIM_INTENSET_STOPPED_Msk (0x1UL << TWIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Register: TWIM_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 24 : Write '1' to Disable interrupt for LASTTX event */
N#define TWIM_INTENCLR_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
N#define TWIM_INTENCLR_LASTTX_Msk (0x1UL << TWIM_INTENCLR_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
N#define TWIM_INTENCLR_LASTTX_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_LASTTX_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_LASTTX_Clear (1UL) /*!< Disable */
N
N/* Bit 23 : Write '1' to Disable interrupt for LASTRX event */
N#define TWIM_INTENCLR_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
N#define TWIM_INTENCLR_LASTRX_Msk (0x1UL << TWIM_INTENCLR_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
N#define TWIM_INTENCLR_LASTRX_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_LASTRX_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_LASTRX_Clear (1UL) /*!< Disable */
N
N/* Bit 20 : Write '1' to Disable interrupt for TXSTARTED event */
N#define TWIM_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIM_INTENCLR_TXSTARTED_Msk (0x1UL << TWIM_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIM_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for RXSTARTED event */
N#define TWIM_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIM_INTENCLR_RXSTARTED_Msk (0x1UL << TWIM_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIM_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 18 : Write '1' to Disable interrupt for SUSPENDED event */
N#define TWIM_INTENCLR_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
N#define TWIM_INTENCLR_SUSPENDED_Msk (0x1UL << TWIM_INTENCLR_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
N#define TWIM_INTENCLR_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_SUSPENDED_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for ERROR event */
N#define TWIM_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIM_INTENCLR_ERROR_Msk (0x1UL << TWIM_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIM_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define TWIM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIM_INTENCLR_STOPPED_Msk (0x1UL << TWIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Register: TWIM_ERRORSRC */
N/* Description: Error source */
N
N/* Bit 2 : NACK received after sending a data byte (write '1' to clear) */
N#define TWIM_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
N#define TWIM_ERRORSRC_DNACK_Msk (0x1UL << TWIM_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
N#define TWIM_ERRORSRC_DNACK_NotReceived (0UL) /*!< Error did not occur */
N#define TWIM_ERRORSRC_DNACK_Received (1UL) /*!< Error occurred */
N
N/* Bit 1 : NACK received after sending the address (write '1' to clear) */
N#define TWIM_ERRORSRC_ANACK_Pos (1UL) /*!< Position of ANACK field. */
N#define TWIM_ERRORSRC_ANACK_Msk (0x1UL << TWIM_ERRORSRC_ANACK_Pos) /*!< Bit mask of ANACK field. */
N#define TWIM_ERRORSRC_ANACK_NotReceived (0UL) /*!< Error did not occur */
N#define TWIM_ERRORSRC_ANACK_Received (1UL) /*!< Error occurred */
N
N/* Register: TWIM_ENABLE */
N/* Description: Enable TWIM */
N
N/* Bits 3..0 : Enable or disable TWIM */
N#define TWIM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define TWIM_ENABLE_ENABLE_Msk (0xFUL << TWIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define TWIM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWIM */
N#define TWIM_ENABLE_ENABLE_Enabled (6UL) /*!< Enable TWIM */
N
N/* Register: TWIM_PSEL_SCL */
N/* Description: Pin select for SCL signal */
N
N/* Bit 31 : Connection */
N#define TWIM_PSEL_SCL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define TWIM_PSEL_SCL_CONNECT_Msk (0x1UL << TWIM_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define TWIM_PSEL_SCL_CONNECT_Connected (0UL) /*!< Connect */
N#define TWIM_PSEL_SCL_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define TWIM_PSEL_SCL_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define TWIM_PSEL_SCL_PIN_Msk (0x1FUL << TWIM_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: TWIM_PSEL_SDA */
N/* Description: Pin select for SDA signal */
N
N/* Bit 31 : Connection */
N#define TWIM_PSEL_SDA_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define TWIM_PSEL_SDA_CONNECT_Msk (0x1UL << TWIM_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define TWIM_PSEL_SDA_CONNECT_Connected (0UL) /*!< Connect */
N#define TWIM_PSEL_SDA_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define TWIM_PSEL_SDA_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define TWIM_PSEL_SDA_PIN_Msk (0x1FUL << TWIM_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: TWIM_FREQUENCY */
N/* Description: TWI frequency */
N
N/* Bits 31..0 : TWI master clock frequency */
N#define TWIM_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
N#define TWIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWIM_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
N#define TWIM_FREQUENCY_FREQUENCY_K100 (0x01980000UL) /*!< 100 kbps */
N#define TWIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
N#define TWIM_FREQUENCY_FREQUENCY_K400 (0x06400000UL) /*!< 400 kbps */
N
N/* Register: TWIM_RXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define TWIM_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define TWIM_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: TWIM_RXD_MAXCNT */
N/* Description: Maximum number of bytes in receive buffer */
N
N/* Bits 7..0 : Maximum number of bytes in receive buffer */
N#define TWIM_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define TWIM_RXD_MAXCNT_MAXCNT_Msk (0xFFUL << TWIM_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: TWIM_RXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
N#define TWIM_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define TWIM_RXD_AMOUNT_AMOUNT_Msk (0xFFUL << TWIM_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: TWIM_RXD_LIST */
N/* Description: EasyDMA list type */
N
N/* Bits 2..0 : List type */
N#define TWIM_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
N#define TWIM_RXD_LIST_LIST_Msk (0x7UL << TWIM_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
N#define TWIM_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
N#define TWIM_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */
N
N/* Register: TWIM_TXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define TWIM_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define TWIM_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: TWIM_TXD_MAXCNT */
N/* Description: Maximum number of bytes in transmit buffer */
N
N/* Bits 7..0 : Maximum number of bytes in transmit buffer */
N#define TWIM_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define TWIM_TXD_MAXCNT_MAXCNT_Msk (0xFFUL << TWIM_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: TWIM_TXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
N#define TWIM_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define TWIM_TXD_AMOUNT_AMOUNT_Msk (0xFFUL << TWIM_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: TWIM_TXD_LIST */
N/* Description: EasyDMA list type */
N
N/* Bits 2..0 : List type */
N#define TWIM_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
N#define TWIM_TXD_LIST_LIST_Msk (0x7UL << TWIM_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
N#define TWIM_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
N#define TWIM_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */
N
N/* Register: TWIM_ADDRESS */
N/* Description: Address used in the TWI transfer */
N
N/* Bits 6..0 : Address used in the TWI transfer */
N#define TWIM_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
N#define TWIM_ADDRESS_ADDRESS_Msk (0x7FUL << TWIM_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */
N
N
N/* Peripheral: TWIS */
N/* Description: I2C compatible Two-Wire Slave Interface with EasyDMA 0 */
N
N/* Register: TWIS_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 14 : Shortcut between READ event and SUSPEND task */
N#define TWIS_SHORTS_READ_SUSPEND_Pos (14UL) /*!< Position of READ_SUSPEND field. */
N#define TWIS_SHORTS_READ_SUSPEND_Msk (0x1UL << TWIS_SHORTS_READ_SUSPEND_Pos) /*!< Bit mask of READ_SUSPEND field. */
N#define TWIS_SHORTS_READ_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
N#define TWIS_SHORTS_READ_SUSPEND_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 13 : Shortcut between WRITE event and SUSPEND task */
N#define TWIS_SHORTS_WRITE_SUSPEND_Pos (13UL) /*!< Position of WRITE_SUSPEND field. */
N#define TWIS_SHORTS_WRITE_SUSPEND_Msk (0x1UL << TWIS_SHORTS_WRITE_SUSPEND_Pos) /*!< Bit mask of WRITE_SUSPEND field. */
N#define TWIS_SHORTS_WRITE_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
N#define TWIS_SHORTS_WRITE_SUSPEND_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: TWIS_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 26 : Enable or disable interrupt for READ event */
N#define TWIS_INTEN_READ_Pos (26UL) /*!< Position of READ field. */
N#define TWIS_INTEN_READ_Msk (0x1UL << TWIS_INTEN_READ_Pos) /*!< Bit mask of READ field. */
N#define TWIS_INTEN_READ_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_READ_Enabled (1UL) /*!< Enable */
N
N/* Bit 25 : Enable or disable interrupt for WRITE event */
N#define TWIS_INTEN_WRITE_Pos (25UL) /*!< Position of WRITE field. */
N#define TWIS_INTEN_WRITE_Msk (0x1UL << TWIS_INTEN_WRITE_Pos) /*!< Bit mask of WRITE field. */
N#define TWIS_INTEN_WRITE_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_WRITE_Enabled (1UL) /*!< Enable */
N
N/* Bit 20 : Enable or disable interrupt for TXSTARTED event */
N#define TWIS_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIS_INTEN_TXSTARTED_Msk (0x1UL << TWIS_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIS_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 19 : Enable or disable interrupt for RXSTARTED event */
N#define TWIS_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIS_INTEN_RXSTARTED_Msk (0x1UL << TWIS_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIS_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 9 : Enable or disable interrupt for ERROR event */
N#define TWIS_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIS_INTEN_ERROR_Msk (0x1UL << TWIS_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIS_INTEN_ERROR_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_ERROR_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for STOPPED event */
N#define TWIS_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIS_INTEN_STOPPED_Msk (0x1UL << TWIS_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIS_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
N#define TWIS_INTEN_STOPPED_Enabled (1UL) /*!< Enable */
N
N/* Register: TWIS_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 26 : Write '1' to Enable interrupt for READ event */
N#define TWIS_INTENSET_READ_Pos (26UL) /*!< Position of READ field. */
N#define TWIS_INTENSET_READ_Msk (0x1UL << TWIS_INTENSET_READ_Pos) /*!< Bit mask of READ field. */
N#define TWIS_INTENSET_READ_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_READ_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_READ_Set (1UL) /*!< Enable */
N
N/* Bit 25 : Write '1' to Enable interrupt for WRITE event */
N#define TWIS_INTENSET_WRITE_Pos (25UL) /*!< Position of WRITE field. */
N#define TWIS_INTENSET_WRITE_Msk (0x1UL << TWIS_INTENSET_WRITE_Pos) /*!< Bit mask of WRITE field. */
N#define TWIS_INTENSET_WRITE_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_WRITE_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_WRITE_Set (1UL) /*!< Enable */
N
N/* Bit 20 : Write '1' to Enable interrupt for TXSTARTED event */
N#define TWIS_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIS_INTENSET_TXSTARTED_Msk (0x1UL << TWIS_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIS_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for RXSTARTED event */
N#define TWIS_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIS_INTENSET_RXSTARTED_Msk (0x1UL << TWIS_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIS_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for ERROR event */
N#define TWIS_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIS_INTENSET_ERROR_Msk (0x1UL << TWIS_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIS_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for STOPPED event */
N#define TWIS_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIS_INTENSET_STOPPED_Msk (0x1UL << TWIS_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIS_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENSET_STOPPED_Set (1UL) /*!< Enable */
N
N/* Register: TWIS_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 26 : Write '1' to Disable interrupt for READ event */
N#define TWIS_INTENCLR_READ_Pos (26UL) /*!< Position of READ field. */
N#define TWIS_INTENCLR_READ_Msk (0x1UL << TWIS_INTENCLR_READ_Pos) /*!< Bit mask of READ field. */
N#define TWIS_INTENCLR_READ_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_READ_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_READ_Clear (1UL) /*!< Disable */
N
N/* Bit 25 : Write '1' to Disable interrupt for WRITE event */
N#define TWIS_INTENCLR_WRITE_Pos (25UL) /*!< Position of WRITE field. */
N#define TWIS_INTENCLR_WRITE_Msk (0x1UL << TWIS_INTENCLR_WRITE_Pos) /*!< Bit mask of WRITE field. */
N#define TWIS_INTENCLR_WRITE_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_WRITE_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_WRITE_Clear (1UL) /*!< Disable */
N
N/* Bit 20 : Write '1' to Disable interrupt for TXSTARTED event */
N#define TWIS_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define TWIS_INTENCLR_TXSTARTED_Msk (0x1UL << TWIS_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define TWIS_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for RXSTARTED event */
N#define TWIS_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define TWIS_INTENCLR_RXSTARTED_Msk (0x1UL << TWIS_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define TWIS_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for ERROR event */
N#define TWIS_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define TWIS_INTENCLR_ERROR_Msk (0x1UL << TWIS_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define TWIS_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for STOPPED event */
N#define TWIS_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
N#define TWIS_INTENCLR_STOPPED_Msk (0x1UL << TWIS_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
N#define TWIS_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define TWIS_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define TWIS_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */
N
N/* Register: TWIS_ERRORSRC */
N/* Description: Error source */
N
N/* Bit 3 : TX buffer over-read detected, and prevented */
N#define TWIS_ERRORSRC_OVERREAD_Pos (3UL) /*!< Position of OVERREAD field. */
N#define TWIS_ERRORSRC_OVERREAD_Msk (0x1UL << TWIS_ERRORSRC_OVERREAD_Pos) /*!< Bit mask of OVERREAD field. */
N#define TWIS_ERRORSRC_OVERREAD_NotDetected (0UL) /*!< Error did not occur */
N#define TWIS_ERRORSRC_OVERREAD_Detected (1UL) /*!< Error occurred */
N
N/* Bit 2 : NACK sent after receiving a data byte */
N#define TWIS_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
N#define TWIS_ERRORSRC_DNACK_Msk (0x1UL << TWIS_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
N#define TWIS_ERRORSRC_DNACK_NotReceived (0UL) /*!< Error did not occur */
N#define TWIS_ERRORSRC_DNACK_Received (1UL) /*!< Error occurred */
N
N/* Bit 0 : RX buffer overflow detected, and prevented */
N#define TWIS_ERRORSRC_OVERFLOW_Pos (0UL) /*!< Position of OVERFLOW field. */
N#define TWIS_ERRORSRC_OVERFLOW_Msk (0x1UL << TWIS_ERRORSRC_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
N#define TWIS_ERRORSRC_OVERFLOW_NotDetected (0UL) /*!< Error did not occur */
N#define TWIS_ERRORSRC_OVERFLOW_Detected (1UL) /*!< Error occurred */
N
N/* Register: TWIS_MATCH */
N/* Description: Status register indicating which address had a match */
N
N/* Bit 0 : Which of the addresses in {ADDRESS} matched the incoming address */
N#define TWIS_MATCH_MATCH_Pos (0UL) /*!< Position of MATCH field. */
N#define TWIS_MATCH_MATCH_Msk (0x1UL << TWIS_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field. */
N
N/* Register: TWIS_ENABLE */
N/* Description: Enable TWIS */
N
N/* Bits 3..0 : Enable or disable TWIS */
N#define TWIS_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define TWIS_ENABLE_ENABLE_Msk (0xFUL << TWIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define TWIS_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWIS */
N#define TWIS_ENABLE_ENABLE_Enabled (9UL) /*!< Enable TWIS */
N
N/* Register: TWIS_PSEL_SCL */
N/* Description: Pin select for SCL signal */
N
N/* Bit 31 : Connection */
N#define TWIS_PSEL_SCL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define TWIS_PSEL_SCL_CONNECT_Msk (0x1UL << TWIS_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define TWIS_PSEL_SCL_CONNECT_Connected (0UL) /*!< Connect */
N#define TWIS_PSEL_SCL_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define TWIS_PSEL_SCL_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define TWIS_PSEL_SCL_PIN_Msk (0x1FUL << TWIS_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: TWIS_PSEL_SDA */
N/* Description: Pin select for SDA signal */
N
N/* Bit 31 : Connection */
N#define TWIS_PSEL_SDA_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define TWIS_PSEL_SDA_CONNECT_Msk (0x1UL << TWIS_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define TWIS_PSEL_SDA_CONNECT_Connected (0UL) /*!< Connect */
N#define TWIS_PSEL_SDA_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define TWIS_PSEL_SDA_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define TWIS_PSEL_SDA_PIN_Msk (0x1FUL << TWIS_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: TWIS_RXD_PTR */
N/* Description: RXD Data pointer */
N
N/* Bits 31..0 : RXD Data pointer */
N#define TWIS_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define TWIS_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: TWIS_RXD_MAXCNT */
N/* Description: Maximum number of bytes in RXD buffer */
N
N/* Bits 7..0 : Maximum number of bytes in RXD buffer */
N#define TWIS_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define TWIS_RXD_MAXCNT_MAXCNT_Msk (0xFFUL << TWIS_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: TWIS_RXD_AMOUNT */
N/* Description: Number of bytes transferred in the last RXD transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last RXD transaction */
N#define TWIS_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define TWIS_RXD_AMOUNT_AMOUNT_Msk (0xFFUL << TWIS_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: TWIS_TXD_PTR */
N/* Description: TXD Data pointer */
N
N/* Bits 31..0 : TXD Data pointer */
N#define TWIS_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define TWIS_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: TWIS_TXD_MAXCNT */
N/* Description: Maximum number of bytes in TXD buffer */
N
N/* Bits 7..0 : Maximum number of bytes in TXD buffer */
N#define TWIS_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define TWIS_TXD_MAXCNT_MAXCNT_Msk (0xFFUL << TWIS_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: TWIS_TXD_AMOUNT */
N/* Description: Number of bytes transferred in the last TXD transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last TXD transaction */
N#define TWIS_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define TWIS_TXD_AMOUNT_AMOUNT_Msk (0xFFUL << TWIS_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: TWIS_ADDRESS */
N/* Description: Description collection[0]:  TWI slave address 0 */
N
N/* Bits 6..0 : TWI slave address */
N#define TWIS_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
N#define TWIS_ADDRESS_ADDRESS_Msk (0x7FUL << TWIS_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */
N
N/* Register: TWIS_CONFIG */
N/* Description: Configuration register for the address match mechanism */
N
N/* Bit 1 : Enable or disable address matching on ADDRESS[1] */
N#define TWIS_CONFIG_ADDRESS1_Pos (1UL) /*!< Position of ADDRESS1 field. */
N#define TWIS_CONFIG_ADDRESS1_Msk (0x1UL << TWIS_CONFIG_ADDRESS1_Pos) /*!< Bit mask of ADDRESS1 field. */
N#define TWIS_CONFIG_ADDRESS1_Disabled (0UL) /*!< Disabled */
N#define TWIS_CONFIG_ADDRESS1_Enabled (1UL) /*!< Enabled */
N
N/* Bit 0 : Enable or disable address matching on ADDRESS[0] */
N#define TWIS_CONFIG_ADDRESS0_Pos (0UL) /*!< Position of ADDRESS0 field. */
N#define TWIS_CONFIG_ADDRESS0_Msk (0x1UL << TWIS_CONFIG_ADDRESS0_Pos) /*!< Bit mask of ADDRESS0 field. */
N#define TWIS_CONFIG_ADDRESS0_Disabled (0UL) /*!< Disabled */
N#define TWIS_CONFIG_ADDRESS0_Enabled (1UL) /*!< Enabled */
N
N/* Register: TWIS_ORC */
N/* Description: Over-read character. Character sent out in case of an over-read of the transmit buffer. */
N
N/* Bits 7..0 : Over-read character. Character sent out in case of an over-read of the transmit buffer. */
N#define TWIS_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
N#define TWIS_ORC_ORC_Msk (0xFFUL << TWIS_ORC_ORC_Pos) /*!< Bit mask of ORC field. */
N
N
N/* Peripheral: UART */
N/* Description: Universal Asynchronous Receiver/Transmitter */
N
N/* Register: UART_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 4 : Shortcut between NCTS event and STOPRX task */
N#define UART_SHORTS_NCTS_STOPRX_Pos (4UL) /*!< Position of NCTS_STOPRX field. */
N#define UART_SHORTS_NCTS_STOPRX_Msk (0x1UL << UART_SHORTS_NCTS_STOPRX_Pos) /*!< Bit mask of NCTS_STOPRX field. */
N#define UART_SHORTS_NCTS_STOPRX_Disabled (0UL) /*!< Disable shortcut */
N#define UART_SHORTS_NCTS_STOPRX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 3 : Shortcut between CTS event and STARTRX task */
N#define UART_SHORTS_CTS_STARTRX_Pos (3UL) /*!< Position of CTS_STARTRX field. */
N#define UART_SHORTS_CTS_STARTRX_Msk (0x1UL << UART_SHORTS_CTS_STARTRX_Pos) /*!< Bit mask of CTS_STARTRX field. */
N#define UART_SHORTS_CTS_STARTRX_Disabled (0UL) /*!< Disable shortcut */
N#define UART_SHORTS_CTS_STARTRX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: UART_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 17 : Write '1' to Enable interrupt for RXTO event */
N#define UART_INTENSET_RXTO_Pos (17UL) /*!< Position of RXTO field. */
N#define UART_INTENSET_RXTO_Msk (0x1UL << UART_INTENSET_RXTO_Pos) /*!< Bit mask of RXTO field. */
N#define UART_INTENSET_RXTO_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_RXTO_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_RXTO_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for ERROR event */
N#define UART_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define UART_INTENSET_ERROR_Msk (0x1UL << UART_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define UART_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for TXDRDY event */
N#define UART_INTENSET_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
N#define UART_INTENSET_TXDRDY_Msk (0x1UL << UART_INTENSET_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
N#define UART_INTENSET_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_TXDRDY_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for RXDRDY event */
N#define UART_INTENSET_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
N#define UART_INTENSET_RXDRDY_Msk (0x1UL << UART_INTENSET_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
N#define UART_INTENSET_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_RXDRDY_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for NCTS event */
N#define UART_INTENSET_NCTS_Pos (1UL) /*!< Position of NCTS field. */
N#define UART_INTENSET_NCTS_Msk (0x1UL << UART_INTENSET_NCTS_Pos) /*!< Bit mask of NCTS field. */
N#define UART_INTENSET_NCTS_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_NCTS_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_NCTS_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for CTS event */
N#define UART_INTENSET_CTS_Pos (0UL) /*!< Position of CTS field. */
N#define UART_INTENSET_CTS_Msk (0x1UL << UART_INTENSET_CTS_Pos) /*!< Bit mask of CTS field. */
N#define UART_INTENSET_CTS_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENSET_CTS_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENSET_CTS_Set (1UL) /*!< Enable */
N
N/* Register: UART_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 17 : Write '1' to Disable interrupt for RXTO event */
N#define UART_INTENCLR_RXTO_Pos (17UL) /*!< Position of RXTO field. */
N#define UART_INTENCLR_RXTO_Msk (0x1UL << UART_INTENCLR_RXTO_Pos) /*!< Bit mask of RXTO field. */
N#define UART_INTENCLR_RXTO_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_RXTO_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_RXTO_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for ERROR event */
N#define UART_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define UART_INTENCLR_ERROR_Msk (0x1UL << UART_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define UART_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for TXDRDY event */
N#define UART_INTENCLR_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
N#define UART_INTENCLR_TXDRDY_Msk (0x1UL << UART_INTENCLR_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
N#define UART_INTENCLR_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_TXDRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for RXDRDY event */
N#define UART_INTENCLR_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
N#define UART_INTENCLR_RXDRDY_Msk (0x1UL << UART_INTENCLR_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
N#define UART_INTENCLR_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_RXDRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for NCTS event */
N#define UART_INTENCLR_NCTS_Pos (1UL) /*!< Position of NCTS field. */
N#define UART_INTENCLR_NCTS_Msk (0x1UL << UART_INTENCLR_NCTS_Pos) /*!< Bit mask of NCTS field. */
N#define UART_INTENCLR_NCTS_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_NCTS_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_NCTS_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for CTS event */
N#define UART_INTENCLR_CTS_Pos (0UL) /*!< Position of CTS field. */
N#define UART_INTENCLR_CTS_Msk (0x1UL << UART_INTENCLR_CTS_Pos) /*!< Bit mask of CTS field. */
N#define UART_INTENCLR_CTS_Disabled (0UL) /*!< Read: Disabled */
N#define UART_INTENCLR_CTS_Enabled (1UL) /*!< Read: Enabled */
N#define UART_INTENCLR_CTS_Clear (1UL) /*!< Disable */
N
N/* Register: UART_ERRORSRC */
N/* Description: Error source */
N
N/* Bit 3 : Break condition */
N#define UART_ERRORSRC_BREAK_Pos (3UL) /*!< Position of BREAK field. */
N#define UART_ERRORSRC_BREAK_Msk (0x1UL << UART_ERRORSRC_BREAK_Pos) /*!< Bit mask of BREAK field. */
N#define UART_ERRORSRC_BREAK_NotPresent (0UL) /*!< Read: error not present */
N#define UART_ERRORSRC_BREAK_Present (1UL) /*!< Read: error present */
N
N/* Bit 2 : Framing error occurred */
N#define UART_ERRORSRC_FRAMING_Pos (2UL) /*!< Position of FRAMING field. */
N#define UART_ERRORSRC_FRAMING_Msk (0x1UL << UART_ERRORSRC_FRAMING_Pos) /*!< Bit mask of FRAMING field. */
N#define UART_ERRORSRC_FRAMING_NotPresent (0UL) /*!< Read: error not present */
N#define UART_ERRORSRC_FRAMING_Present (1UL) /*!< Read: error present */
N
N/* Bit 1 : Parity error */
N#define UART_ERRORSRC_PARITY_Pos (1UL) /*!< Position of PARITY field. */
N#define UART_ERRORSRC_PARITY_Msk (0x1UL << UART_ERRORSRC_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define UART_ERRORSRC_PARITY_NotPresent (0UL) /*!< Read: error not present */
N#define UART_ERRORSRC_PARITY_Present (1UL) /*!< Read: error present */
N
N/* Bit 0 : Overrun error */
N#define UART_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
N#define UART_ERRORSRC_OVERRUN_Msk (0x1UL << UART_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
N#define UART_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: error not present */
N#define UART_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: error present */
N
N/* Register: UART_ENABLE */
N/* Description: Enable UART */
N
N/* Bits 3..0 : Enable or disable UART */
N#define UART_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define UART_ENABLE_ENABLE_Msk (0xFUL << UART_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define UART_ENABLE_ENABLE_Disabled (0UL) /*!< Disable UART */
N#define UART_ENABLE_ENABLE_Enabled (4UL) /*!< Enable UART */
N
N/* Register: UART_PSELRTS */
N/* Description: Pin select for RTS */
N
N/* Bits 31..0 : Pin number configuration for UART RTS signal */
N#define UART_PSELRTS_PSELRTS_Pos (0UL) /*!< Position of PSELRTS field. */
N#define UART_PSELRTS_PSELRTS_Msk (0xFFFFFFFFUL << UART_PSELRTS_PSELRTS_Pos) /*!< Bit mask of PSELRTS field. */
N#define UART_PSELRTS_PSELRTS_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: UART_PSELTXD */
N/* Description: Pin select for TXD */
N
N/* Bits 31..0 : Pin number configuration for UART TXD signal */
N#define UART_PSELTXD_PSELTXD_Pos (0UL) /*!< Position of PSELTXD field. */
N#define UART_PSELTXD_PSELTXD_Msk (0xFFFFFFFFUL << UART_PSELTXD_PSELTXD_Pos) /*!< Bit mask of PSELTXD field. */
N#define UART_PSELTXD_PSELTXD_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: UART_PSELCTS */
N/* Description: Pin select for CTS */
N
N/* Bits 31..0 : Pin number configuration for UART CTS signal */
N#define UART_PSELCTS_PSELCTS_Pos (0UL) /*!< Position of PSELCTS field. */
N#define UART_PSELCTS_PSELCTS_Msk (0xFFFFFFFFUL << UART_PSELCTS_PSELCTS_Pos) /*!< Bit mask of PSELCTS field. */
N#define UART_PSELCTS_PSELCTS_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: UART_PSELRXD */
N/* Description: Pin select for RXD */
N
N/* Bits 31..0 : Pin number configuration for UART RXD signal */
N#define UART_PSELRXD_PSELRXD_Pos (0UL) /*!< Position of PSELRXD field. */
N#define UART_PSELRXD_PSELRXD_Msk (0xFFFFFFFFUL << UART_PSELRXD_PSELRXD_Pos) /*!< Bit mask of PSELRXD field. */
N#define UART_PSELRXD_PSELRXD_Disconnected (0xFFFFFFFFUL) /*!< Disconnect */
N
N/* Register: UART_RXD */
N/* Description: RXD register */
N
N/* Bits 7..0 : RX data received in previous transfers, double buffered */
N#define UART_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
N#define UART_RXD_RXD_Msk (0xFFUL << UART_RXD_RXD_Pos) /*!< Bit mask of RXD field. */
N
N/* Register: UART_TXD */
N/* Description: TXD register */
N
N/* Bits 7..0 : TX data to be transferred */
N#define UART_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
N#define UART_TXD_TXD_Msk (0xFFUL << UART_TXD_TXD_Pos) /*!< Bit mask of TXD field. */
N
N/* Register: UART_BAUDRATE */
N/* Description: Baud rate */
N
N/* Bits 31..0 : Baud rate */
N#define UART_BAUDRATE_BAUDRATE_Pos (0UL) /*!< Position of BAUDRATE field. */
N#define UART_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UART_BAUDRATE_BAUDRATE_Pos) /*!< Bit mask of BAUDRATE field. */
N#define UART_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) */
N#define UART_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) */
N#define UART_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) */
N#define UART_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) */
N#define UART_BAUDRATE_BAUDRATE_Baud14400 (0x003B0000UL) /*!< 14400 baud (actual rate: 14414) */
N#define UART_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) */
N#define UART_BAUDRATE_BAUDRATE_Baud28800 (0x0075F000UL) /*!< 28800 baud (actual rate: 28829) */
N#define UART_BAUDRATE_BAUDRATE_Baud38400 (0x009D5000UL) /*!< 38400 baud (actual rate: 38462) */
N#define UART_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) */
N#define UART_BAUDRATE_BAUDRATE_Baud57600 (0x00EBF000UL) /*!< 57600 baud (actual rate: 57762) */
N#define UART_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) */
N#define UART_BAUDRATE_BAUDRATE_Baud115200 (0x01D7E000UL) /*!< 115200 baud (actual rate: 115942) */
N#define UART_BAUDRATE_BAUDRATE_Baud230400 (0x03AFB000UL) /*!< 230400 baud (actual rate: 231884) */
N#define UART_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL) /*!< 250000 baud */
N#define UART_BAUDRATE_BAUDRATE_Baud460800 (0x075F7000UL) /*!< 460800 baud (actual rate: 470588) */
N#define UART_BAUDRATE_BAUDRATE_Baud921600 (0x0EBED000UL) /*!< 921600 baud (actual rate: 941176) */
N#define UART_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL) /*!< 1Mega baud */
N
N/* Register: UART_CONFIG */
N/* Description: Configuration of parity and hardware flow control */
N
N/* Bits 3..1 : Parity */
N#define UART_CONFIG_PARITY_Pos (1UL) /*!< Position of PARITY field. */
N#define UART_CONFIG_PARITY_Msk (0x7UL << UART_CONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define UART_CONFIG_PARITY_Excluded (0x0UL) /*!< Exclude parity bit */
N#define UART_CONFIG_PARITY_Included (0x7UL) /*!< Include parity bit */
N
N/* Bit 0 : Hardware flow control */
N#define UART_CONFIG_HWFC_Pos (0UL) /*!< Position of HWFC field. */
N#define UART_CONFIG_HWFC_Msk (0x1UL << UART_CONFIG_HWFC_Pos) /*!< Bit mask of HWFC field. */
N#define UART_CONFIG_HWFC_Disabled (0UL) /*!< Disabled */
N#define UART_CONFIG_HWFC_Enabled (1UL) /*!< Enabled */
N
N
N/* Peripheral: UARTE */
N/* Description: UART with EasyDMA */
N
N/* Register: UARTE_SHORTS */
N/* Description: Shortcut register */
N
N/* Bit 6 : Shortcut between ENDRX event and STOPRX task */
N#define UARTE_SHORTS_ENDRX_STOPRX_Pos (6UL) /*!< Position of ENDRX_STOPRX field. */
N#define UARTE_SHORTS_ENDRX_STOPRX_Msk (0x1UL << UARTE_SHORTS_ENDRX_STOPRX_Pos) /*!< Bit mask of ENDRX_STOPRX field. */
N#define UARTE_SHORTS_ENDRX_STOPRX_Disabled (0UL) /*!< Disable shortcut */
N#define UARTE_SHORTS_ENDRX_STOPRX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Bit 5 : Shortcut between ENDRX event and STARTRX task */
N#define UARTE_SHORTS_ENDRX_STARTRX_Pos (5UL) /*!< Position of ENDRX_STARTRX field. */
N#define UARTE_SHORTS_ENDRX_STARTRX_Msk (0x1UL << UARTE_SHORTS_ENDRX_STARTRX_Pos) /*!< Bit mask of ENDRX_STARTRX field. */
N#define UARTE_SHORTS_ENDRX_STARTRX_Disabled (0UL) /*!< Disable shortcut */
N#define UARTE_SHORTS_ENDRX_STARTRX_Enabled (1UL) /*!< Enable shortcut */
N
N/* Register: UARTE_INTEN */
N/* Description: Enable or disable interrupt */
N
N/* Bit 22 : Enable or disable interrupt for TXSTOPPED event */
N#define UARTE_INTEN_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
N#define UARTE_INTEN_TXSTOPPED_Msk (0x1UL << UARTE_INTEN_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
N#define UARTE_INTEN_TXSTOPPED_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_TXSTOPPED_Enabled (1UL) /*!< Enable */
N
N/* Bit 20 : Enable or disable interrupt for TXSTARTED event */
N#define UARTE_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define UARTE_INTEN_TXSTARTED_Msk (0x1UL << UARTE_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define UARTE_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 19 : Enable or disable interrupt for RXSTARTED event */
N#define UARTE_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define UARTE_INTEN_RXSTARTED_Msk (0x1UL << UARTE_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define UARTE_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */
N
N/* Bit 17 : Enable or disable interrupt for RXTO event */
N#define UARTE_INTEN_RXTO_Pos (17UL) /*!< Position of RXTO field. */
N#define UARTE_INTEN_RXTO_Msk (0x1UL << UARTE_INTEN_RXTO_Pos) /*!< Bit mask of RXTO field. */
N#define UARTE_INTEN_RXTO_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_RXTO_Enabled (1UL) /*!< Enable */
N
N/* Bit 9 : Enable or disable interrupt for ERROR event */
N#define UARTE_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define UARTE_INTEN_ERROR_Msk (0x1UL << UARTE_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define UARTE_INTEN_ERROR_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_ERROR_Enabled (1UL) /*!< Enable */
N
N/* Bit 8 : Enable or disable interrupt for ENDTX event */
N#define UARTE_INTEN_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
N#define UARTE_INTEN_ENDTX_Msk (0x1UL << UARTE_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define UARTE_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_ENDTX_Enabled (1UL) /*!< Enable */
N
N/* Bit 7 : Enable or disable interrupt for TXDRDY event */
N#define UARTE_INTEN_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
N#define UARTE_INTEN_TXDRDY_Msk (0x1UL << UARTE_INTEN_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
N#define UARTE_INTEN_TXDRDY_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_TXDRDY_Enabled (1UL) /*!< Enable */
N
N/* Bit 4 : Enable or disable interrupt for ENDRX event */
N#define UARTE_INTEN_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define UARTE_INTEN_ENDRX_Msk (0x1UL << UARTE_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define UARTE_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_ENDRX_Enabled (1UL) /*!< Enable */
N
N/* Bit 2 : Enable or disable interrupt for RXDRDY event */
N#define UARTE_INTEN_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
N#define UARTE_INTEN_RXDRDY_Msk (0x1UL << UARTE_INTEN_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
N#define UARTE_INTEN_RXDRDY_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_RXDRDY_Enabled (1UL) /*!< Enable */
N
N/* Bit 1 : Enable or disable interrupt for NCTS event */
N#define UARTE_INTEN_NCTS_Pos (1UL) /*!< Position of NCTS field. */
N#define UARTE_INTEN_NCTS_Msk (0x1UL << UARTE_INTEN_NCTS_Pos) /*!< Bit mask of NCTS field. */
N#define UARTE_INTEN_NCTS_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_NCTS_Enabled (1UL) /*!< Enable */
N
N/* Bit 0 : Enable or disable interrupt for CTS event */
N#define UARTE_INTEN_CTS_Pos (0UL) /*!< Position of CTS field. */
N#define UARTE_INTEN_CTS_Msk (0x1UL << UARTE_INTEN_CTS_Pos) /*!< Bit mask of CTS field. */
N#define UARTE_INTEN_CTS_Disabled (0UL) /*!< Disable */
N#define UARTE_INTEN_CTS_Enabled (1UL) /*!< Enable */
N
N/* Register: UARTE_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 22 : Write '1' to Enable interrupt for TXSTOPPED event */
N#define UARTE_INTENSET_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
N#define UARTE_INTENSET_TXSTOPPED_Msk (0x1UL << UARTE_INTENSET_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
N#define UARTE_INTENSET_TXSTOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_TXSTOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_TXSTOPPED_Set (1UL) /*!< Enable */
N
N/* Bit 20 : Write '1' to Enable interrupt for TXSTARTED event */
N#define UARTE_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define UARTE_INTENSET_TXSTARTED_Msk (0x1UL << UARTE_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define UARTE_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 19 : Write '1' to Enable interrupt for RXSTARTED event */
N#define UARTE_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define UARTE_INTENSET_RXSTARTED_Msk (0x1UL << UARTE_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define UARTE_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */
N
N/* Bit 17 : Write '1' to Enable interrupt for RXTO event */
N#define UARTE_INTENSET_RXTO_Pos (17UL) /*!< Position of RXTO field. */
N#define UARTE_INTENSET_RXTO_Msk (0x1UL << UARTE_INTENSET_RXTO_Pos) /*!< Bit mask of RXTO field. */
N#define UARTE_INTENSET_RXTO_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_RXTO_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_RXTO_Set (1UL) /*!< Enable */
N
N/* Bit 9 : Write '1' to Enable interrupt for ERROR event */
N#define UARTE_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define UARTE_INTENSET_ERROR_Msk (0x1UL << UARTE_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define UARTE_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_ERROR_Set (1UL) /*!< Enable */
N
N/* Bit 8 : Write '1' to Enable interrupt for ENDTX event */
N#define UARTE_INTENSET_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
N#define UARTE_INTENSET_ENDTX_Msk (0x1UL << UARTE_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define UARTE_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_ENDTX_Set (1UL) /*!< Enable */
N
N/* Bit 7 : Write '1' to Enable interrupt for TXDRDY event */
N#define UARTE_INTENSET_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
N#define UARTE_INTENSET_TXDRDY_Msk (0x1UL << UARTE_INTENSET_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
N#define UARTE_INTENSET_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_TXDRDY_Set (1UL) /*!< Enable */
N
N/* Bit 4 : Write '1' to Enable interrupt for ENDRX event */
N#define UARTE_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define UARTE_INTENSET_ENDRX_Msk (0x1UL << UARTE_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define UARTE_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_ENDRX_Set (1UL) /*!< Enable */
N
N/* Bit 2 : Write '1' to Enable interrupt for RXDRDY event */
N#define UARTE_INTENSET_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
N#define UARTE_INTENSET_RXDRDY_Msk (0x1UL << UARTE_INTENSET_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
N#define UARTE_INTENSET_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_RXDRDY_Set (1UL) /*!< Enable */
N
N/* Bit 1 : Write '1' to Enable interrupt for NCTS event */
N#define UARTE_INTENSET_NCTS_Pos (1UL) /*!< Position of NCTS field. */
N#define UARTE_INTENSET_NCTS_Msk (0x1UL << UARTE_INTENSET_NCTS_Pos) /*!< Bit mask of NCTS field. */
N#define UARTE_INTENSET_NCTS_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_NCTS_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_NCTS_Set (1UL) /*!< Enable */
N
N/* Bit 0 : Write '1' to Enable interrupt for CTS event */
N#define UARTE_INTENSET_CTS_Pos (0UL) /*!< Position of CTS field. */
N#define UARTE_INTENSET_CTS_Msk (0x1UL << UARTE_INTENSET_CTS_Pos) /*!< Bit mask of CTS field. */
N#define UARTE_INTENSET_CTS_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENSET_CTS_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENSET_CTS_Set (1UL) /*!< Enable */
N
N/* Register: UARTE_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 22 : Write '1' to Disable interrupt for TXSTOPPED event */
N#define UARTE_INTENCLR_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
N#define UARTE_INTENCLR_TXSTOPPED_Msk (0x1UL << UARTE_INTENCLR_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
N#define UARTE_INTENCLR_TXSTOPPED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_TXSTOPPED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_TXSTOPPED_Clear (1UL) /*!< Disable */
N
N/* Bit 20 : Write '1' to Disable interrupt for TXSTARTED event */
N#define UARTE_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
N#define UARTE_INTENCLR_TXSTARTED_Msk (0x1UL << UARTE_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
N#define UARTE_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 19 : Write '1' to Disable interrupt for RXSTARTED event */
N#define UARTE_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
N#define UARTE_INTENCLR_RXSTARTED_Msk (0x1UL << UARTE_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
N#define UARTE_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */
N
N/* Bit 17 : Write '1' to Disable interrupt for RXTO event */
N#define UARTE_INTENCLR_RXTO_Pos (17UL) /*!< Position of RXTO field. */
N#define UARTE_INTENCLR_RXTO_Msk (0x1UL << UARTE_INTENCLR_RXTO_Pos) /*!< Bit mask of RXTO field. */
N#define UARTE_INTENCLR_RXTO_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_RXTO_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_RXTO_Clear (1UL) /*!< Disable */
N
N/* Bit 9 : Write '1' to Disable interrupt for ERROR event */
N#define UARTE_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
N#define UARTE_INTENCLR_ERROR_Msk (0x1UL << UARTE_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
N#define UARTE_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_ERROR_Clear (1UL) /*!< Disable */
N
N/* Bit 8 : Write '1' to Disable interrupt for ENDTX event */
N#define UARTE_INTENCLR_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
N#define UARTE_INTENCLR_ENDTX_Msk (0x1UL << UARTE_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
N#define UARTE_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */
N
N/* Bit 7 : Write '1' to Disable interrupt for TXDRDY event */
N#define UARTE_INTENCLR_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
N#define UARTE_INTENCLR_TXDRDY_Msk (0x1UL << UARTE_INTENCLR_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
N#define UARTE_INTENCLR_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_TXDRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 4 : Write '1' to Disable interrupt for ENDRX event */
N#define UARTE_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
N#define UARTE_INTENCLR_ENDRX_Msk (0x1UL << UARTE_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
N#define UARTE_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */
N
N/* Bit 2 : Write '1' to Disable interrupt for RXDRDY event */
N#define UARTE_INTENCLR_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
N#define UARTE_INTENCLR_RXDRDY_Msk (0x1UL << UARTE_INTENCLR_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
N#define UARTE_INTENCLR_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_RXDRDY_Clear (1UL) /*!< Disable */
N
N/* Bit 1 : Write '1' to Disable interrupt for NCTS event */
N#define UARTE_INTENCLR_NCTS_Pos (1UL) /*!< Position of NCTS field. */
N#define UARTE_INTENCLR_NCTS_Msk (0x1UL << UARTE_INTENCLR_NCTS_Pos) /*!< Bit mask of NCTS field. */
N#define UARTE_INTENCLR_NCTS_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_NCTS_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_NCTS_Clear (1UL) /*!< Disable */
N
N/* Bit 0 : Write '1' to Disable interrupt for CTS event */
N#define UARTE_INTENCLR_CTS_Pos (0UL) /*!< Position of CTS field. */
N#define UARTE_INTENCLR_CTS_Msk (0x1UL << UARTE_INTENCLR_CTS_Pos) /*!< Bit mask of CTS field. */
N#define UARTE_INTENCLR_CTS_Disabled (0UL) /*!< Read: Disabled */
N#define UARTE_INTENCLR_CTS_Enabled (1UL) /*!< Read: Enabled */
N#define UARTE_INTENCLR_CTS_Clear (1UL) /*!< Disable */
N
N/* Register: UARTE_ERRORSRC */
N/* Description: Error source */
N
N/* Bit 3 : Break condition */
N#define UARTE_ERRORSRC_BREAK_Pos (3UL) /*!< Position of BREAK field. */
N#define UARTE_ERRORSRC_BREAK_Msk (0x1UL << UARTE_ERRORSRC_BREAK_Pos) /*!< Bit mask of BREAK field. */
N#define UARTE_ERRORSRC_BREAK_NotPresent (0UL) /*!< Read: error not present */
N#define UARTE_ERRORSRC_BREAK_Present (1UL) /*!< Read: error present */
N
N/* Bit 2 : Framing error occurred */
N#define UARTE_ERRORSRC_FRAMING_Pos (2UL) /*!< Position of FRAMING field. */
N#define UARTE_ERRORSRC_FRAMING_Msk (0x1UL << UARTE_ERRORSRC_FRAMING_Pos) /*!< Bit mask of FRAMING field. */
N#define UARTE_ERRORSRC_FRAMING_NotPresent (0UL) /*!< Read: error not present */
N#define UARTE_ERRORSRC_FRAMING_Present (1UL) /*!< Read: error present */
N
N/* Bit 1 : Parity error */
N#define UARTE_ERRORSRC_PARITY_Pos (1UL) /*!< Position of PARITY field. */
N#define UARTE_ERRORSRC_PARITY_Msk (0x1UL << UARTE_ERRORSRC_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define UARTE_ERRORSRC_PARITY_NotPresent (0UL) /*!< Read: error not present */
N#define UARTE_ERRORSRC_PARITY_Present (1UL) /*!< Read: error present */
N
N/* Bit 0 : Overrun error */
N#define UARTE_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
N#define UARTE_ERRORSRC_OVERRUN_Msk (0x1UL << UARTE_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
N#define UARTE_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: error not present */
N#define UARTE_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: error present */
N
N/* Register: UARTE_ENABLE */
N/* Description: Enable UART */
N
N/* Bits 3..0 : Enable or disable UARTE */
N#define UARTE_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
N#define UARTE_ENABLE_ENABLE_Msk (0xFUL << UARTE_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
N#define UARTE_ENABLE_ENABLE_Disabled (0UL) /*!< Disable UARTE */
N#define UARTE_ENABLE_ENABLE_Enabled (8UL) /*!< Enable UARTE */
N
N/* Register: UARTE_PSEL_RTS */
N/* Description: Pin select for RTS signal */
N
N/* Bit 31 : Connection */
N#define UARTE_PSEL_RTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define UARTE_PSEL_RTS_CONNECT_Msk (0x1UL << UARTE_PSEL_RTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define UARTE_PSEL_RTS_CONNECT_Connected (0UL) /*!< Connect */
N#define UARTE_PSEL_RTS_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define UARTE_PSEL_RTS_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define UARTE_PSEL_RTS_PIN_Msk (0x1FUL << UARTE_PSEL_RTS_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: UARTE_PSEL_TXD */
N/* Description: Pin select for TXD signal */
N
N/* Bit 31 : Connection */
N#define UARTE_PSEL_TXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define UARTE_PSEL_TXD_CONNECT_Msk (0x1UL << UARTE_PSEL_TXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define UARTE_PSEL_TXD_CONNECT_Connected (0UL) /*!< Connect */
N#define UARTE_PSEL_TXD_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define UARTE_PSEL_TXD_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define UARTE_PSEL_TXD_PIN_Msk (0x1FUL << UARTE_PSEL_TXD_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: UARTE_PSEL_CTS */
N/* Description: Pin select for CTS signal */
N
N/* Bit 31 : Connection */
N#define UARTE_PSEL_CTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define UARTE_PSEL_CTS_CONNECT_Msk (0x1UL << UARTE_PSEL_CTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define UARTE_PSEL_CTS_CONNECT_Connected (0UL) /*!< Connect */
N#define UARTE_PSEL_CTS_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define UARTE_PSEL_CTS_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define UARTE_PSEL_CTS_PIN_Msk (0x1FUL << UARTE_PSEL_CTS_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: UARTE_PSEL_RXD */
N/* Description: Pin select for RXD signal */
N
N/* Bit 31 : Connection */
N#define UARTE_PSEL_RXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define UARTE_PSEL_RXD_CONNECT_Msk (0x1UL << UARTE_PSEL_RXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define UARTE_PSEL_RXD_CONNECT_Connected (0UL) /*!< Connect */
N#define UARTE_PSEL_RXD_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : Pin number */
N#define UARTE_PSEL_RXD_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define UARTE_PSEL_RXD_PIN_Msk (0x1FUL << UARTE_PSEL_RXD_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: UARTE_BAUDRATE */
N/* Description: Baud rate. Accuracy depends on the HFCLK source selected. */
N
N/* Bits 31..0 : Baud rate */
N#define UARTE_BAUDRATE_BAUDRATE_Pos (0UL) /*!< Position of BAUDRATE field. */
N#define UARTE_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UARTE_BAUDRATE_BAUDRATE_Pos) /*!< Bit mask of BAUDRATE field. */
N#define UARTE_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud14400 (0x003AF000UL) /*!< 14400 baud (actual rate: 14401) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud28800 (0x0075C000UL) /*!< 28800 baud (actual rate: 28777) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud38400 (0x009D0000UL) /*!< 38400 baud (actual rate: 38369) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud57600 (0x00EB0000UL) /*!< 57600 baud (actual rate: 57554) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud115200 (0x01D60000UL) /*!< 115200 baud (actual rate: 115108) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud230400 (0x03B00000UL) /*!< 230400 baud (actual rate: 231884) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL) /*!< 250000 baud */
N#define UARTE_BAUDRATE_BAUDRATE_Baud460800 (0x07400000UL) /*!< 460800 baud (actual rate: 457143) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud921600 (0x0F000000UL) /*!< 921600 baud (actual rate: 941176) */
N#define UARTE_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL) /*!< 1Mega baud */
N
N/* Register: UARTE_RXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define UARTE_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define UARTE_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: UARTE_RXD_MAXCNT */
N/* Description: Maximum number of bytes in receive buffer */
N
N/* Bits 7..0 : Maximum number of bytes in receive buffer */
N#define UARTE_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define UARTE_RXD_MAXCNT_MAXCNT_Msk (0xFFUL << UARTE_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: UARTE_RXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction */
N#define UARTE_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define UARTE_RXD_AMOUNT_AMOUNT_Msk (0xFFUL << UARTE_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: UARTE_TXD_PTR */
N/* Description: Data pointer */
N
N/* Bits 31..0 : Data pointer */
N#define UARTE_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
N#define UARTE_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */
N
N/* Register: UARTE_TXD_MAXCNT */
N/* Description: Maximum number of bytes in transmit buffer */
N
N/* Bits 7..0 : Maximum number of bytes in transmit buffer */
N#define UARTE_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
N#define UARTE_TXD_MAXCNT_MAXCNT_Msk (0xFFUL << UARTE_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */
N
N/* Register: UARTE_TXD_AMOUNT */
N/* Description: Number of bytes transferred in the last transaction */
N
N/* Bits 7..0 : Number of bytes transferred in the last transaction */
N#define UARTE_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
N#define UARTE_TXD_AMOUNT_AMOUNT_Msk (0xFFUL << UARTE_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */
N
N/* Register: UARTE_CONFIG */
N/* Description: Configuration of parity and hardware flow control */
N
N/* Bits 3..1 : Parity */
N#define UARTE_CONFIG_PARITY_Pos (1UL) /*!< Position of PARITY field. */
N#define UARTE_CONFIG_PARITY_Msk (0x7UL << UARTE_CONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
N#define UARTE_CONFIG_PARITY_Excluded (0x0UL) /*!< Exclude parity bit */
N#define UARTE_CONFIG_PARITY_Included (0x7UL) /*!< Include parity bit */
N
N/* Bit 0 : Hardware flow control */
N#define UARTE_CONFIG_HWFC_Pos (0UL) /*!< Position of HWFC field. */
N#define UARTE_CONFIG_HWFC_Msk (0x1UL << UARTE_CONFIG_HWFC_Pos) /*!< Bit mask of HWFC field. */
N#define UARTE_CONFIG_HWFC_Disabled (0UL) /*!< Disabled */
N#define UARTE_CONFIG_HWFC_Enabled (1UL) /*!< Enabled */
N
N
N/* Peripheral: UICR */
N/* Description: User Information Configuration Registers */
N
N/* Register: UICR_NRFFW */
N/* Description: Description collection[0]:  Reserved for Nordic firmware design */
N
N/* Bits 31..0 : Reserved for Nordic firmware design */
N#define UICR_NRFFW_NRFFW_Pos (0UL) /*!< Position of NRFFW field. */
N#define UICR_NRFFW_NRFFW_Msk (0xFFFFFFFFUL << UICR_NRFFW_NRFFW_Pos) /*!< Bit mask of NRFFW field. */
N
N/* Register: UICR_NRFHW */
N/* Description: Description collection[0]:  Reserved for Nordic hardware design */
N
N/* Bits 31..0 : Reserved for Nordic hardware design */
N#define UICR_NRFHW_NRFHW_Pos (0UL) /*!< Position of NRFHW field. */
N#define UICR_NRFHW_NRFHW_Msk (0xFFFFFFFFUL << UICR_NRFHW_NRFHW_Pos) /*!< Bit mask of NRFHW field. */
N
N/* Register: UICR_CUSTOMER */
N/* Description: Description collection[0]:  Reserved for customer */
N
N/* Bits 31..0 : Reserved for customer */
N#define UICR_CUSTOMER_CUSTOMER_Pos (0UL) /*!< Position of CUSTOMER field. */
N#define UICR_CUSTOMER_CUSTOMER_Msk (0xFFFFFFFFUL << UICR_CUSTOMER_CUSTOMER_Pos) /*!< Bit mask of CUSTOMER field. */
N
N/* Register: UICR_PSELRESET */
N/* Description: Description collection[0]:  Mapping of the nRESET function (see POWER chapter for details) */
N
N/* Bit 31 : Connection */
N#define UICR_PSELRESET_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
N#define UICR_PSELRESET_CONNECT_Msk (0x1UL << UICR_PSELRESET_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
N#define UICR_PSELRESET_CONNECT_Connected (0UL) /*!< Connect */
N#define UICR_PSELRESET_CONNECT_Disconnected (1UL) /*!< Disconnect */
N
N/* Bits 4..0 : GPIO number P0.n onto which Reset is exposed */
N#define UICR_PSELRESET_PIN_Pos (0UL) /*!< Position of PIN field. */
N#define UICR_PSELRESET_PIN_Msk (0x1FUL << UICR_PSELRESET_PIN_Pos) /*!< Bit mask of PIN field. */
N
N/* Register: UICR_APPROTECT */
N/* Description: Access Port protection */
N
N/* Bits 7..0 : Enable or disable Access Port protection. Any other value than 0xFF being written to this field will enable protection. */
N#define UICR_APPROTECT_PALL_Pos (0UL) /*!< Position of PALL field. */
N#define UICR_APPROTECT_PALL_Msk (0xFFUL << UICR_APPROTECT_PALL_Pos) /*!< Bit mask of PALL field. */
N#define UICR_APPROTECT_PALL_Enabled (0x00UL) /*!< Enable */
N#define UICR_APPROTECT_PALL_Disabled (0xFFUL) /*!< Disable */
N
N/* Register: UICR_NFCPINS */
N/* Description: Setting of pins dedicated to NFC functionality: NFC antenna or GPIO */
N
N/* Bit 0 : Setting of pins dedicated to NFC functionality */
N#define UICR_NFCPINS_PROTECT_Pos (0UL) /*!< Position of PROTECT field. */
N#define UICR_NFCPINS_PROTECT_Msk (0x1UL << UICR_NFCPINS_PROTECT_Pos) /*!< Bit mask of PROTECT field. */
N#define UICR_NFCPINS_PROTECT_Disabled (0UL) /*!< Operation as GPIO pins. Same protection as normal GPIO pins */
N#define UICR_NFCPINS_PROTECT_NFC (1UL) /*!< Operation as NFC antenna pins. Configures the protection for NFC operation */
N
N
N/* Peripheral: WDT */
N/* Description: Watchdog Timer */
N
N/* Register: WDT_INTENSET */
N/* Description: Enable interrupt */
N
N/* Bit 0 : Write '1' to Enable interrupt for TIMEOUT event */
N#define WDT_INTENSET_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
N#define WDT_INTENSET_TIMEOUT_Msk (0x1UL << WDT_INTENSET_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
N#define WDT_INTENSET_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
N#define WDT_INTENSET_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
N#define WDT_INTENSET_TIMEOUT_Set (1UL) /*!< Enable */
N
N/* Register: WDT_INTENCLR */
N/* Description: Disable interrupt */
N
N/* Bit 0 : Write '1' to Disable interrupt for TIMEOUT event */
N#define WDT_INTENCLR_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
N#define WDT_INTENCLR_TIMEOUT_Msk (0x1UL << WDT_INTENCLR_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
N#define WDT_INTENCLR_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
N#define WDT_INTENCLR_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
N#define WDT_INTENCLR_TIMEOUT_Clear (1UL) /*!< Disable */
N
N/* Register: WDT_RUNSTATUS */
N/* Description: Run status */
N
N/* Bit 0 : Indicates whether or not the watchdog is running */
N#define WDT_RUNSTATUS_RUNSTATUS_Pos (0UL) /*!< Position of RUNSTATUS field. */
N#define WDT_RUNSTATUS_RUNSTATUS_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUS_Pos) /*!< Bit mask of RUNSTATUS field. */
N#define WDT_RUNSTATUS_RUNSTATUS_NotRunning (0UL) /*!< Watchdog not running */
N#define WDT_RUNSTATUS_RUNSTATUS_Running (1UL) /*!< Watchdog is running */
N
N/* Register: WDT_REQSTATUS */
N/* Description: Request status */
N
N/* Bit 7 : Request status for RR[7] register */
N#define WDT_REQSTATUS_RR7_Pos (7UL) /*!< Position of RR7 field. */
N#define WDT_REQSTATUS_RR7_Msk (0x1UL << WDT_REQSTATUS_RR7_Pos) /*!< Bit mask of RR7 field. */
N#define WDT_REQSTATUS_RR7_DisabledOrRequested (0UL) /*!< RR[7] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR7_EnabledAndUnrequested (1UL) /*!< RR[7] register is enabled, and are not yet requesting reload */
N
N/* Bit 6 : Request status for RR[6] register */
N#define WDT_REQSTATUS_RR6_Pos (6UL) /*!< Position of RR6 field. */
N#define WDT_REQSTATUS_RR6_Msk (0x1UL << WDT_REQSTATUS_RR6_Pos) /*!< Bit mask of RR6 field. */
N#define WDT_REQSTATUS_RR6_DisabledOrRequested (0UL) /*!< RR[6] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR6_EnabledAndUnrequested (1UL) /*!< RR[6] register is enabled, and are not yet requesting reload */
N
N/* Bit 5 : Request status for RR[5] register */
N#define WDT_REQSTATUS_RR5_Pos (5UL) /*!< Position of RR5 field. */
N#define WDT_REQSTATUS_RR5_Msk (0x1UL << WDT_REQSTATUS_RR5_Pos) /*!< Bit mask of RR5 field. */
N#define WDT_REQSTATUS_RR5_DisabledOrRequested (0UL) /*!< RR[5] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR5_EnabledAndUnrequested (1UL) /*!< RR[5] register is enabled, and are not yet requesting reload */
N
N/* Bit 4 : Request status for RR[4] register */
N#define WDT_REQSTATUS_RR4_Pos (4UL) /*!< Position of RR4 field. */
N#define WDT_REQSTATUS_RR4_Msk (0x1UL << WDT_REQSTATUS_RR4_Pos) /*!< Bit mask of RR4 field. */
N#define WDT_REQSTATUS_RR4_DisabledOrRequested (0UL) /*!< RR[4] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR4_EnabledAndUnrequested (1UL) /*!< RR[4] register is enabled, and are not yet requesting reload */
N
N/* Bit 3 : Request status for RR[3] register */
N#define WDT_REQSTATUS_RR3_Pos (3UL) /*!< Position of RR3 field. */
N#define WDT_REQSTATUS_RR3_Msk (0x1UL << WDT_REQSTATUS_RR3_Pos) /*!< Bit mask of RR3 field. */
N#define WDT_REQSTATUS_RR3_DisabledOrRequested (0UL) /*!< RR[3] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR3_EnabledAndUnrequested (1UL) /*!< RR[3] register is enabled, and are not yet requesting reload */
N
N/* Bit 2 : Request status for RR[2] register */
N#define WDT_REQSTATUS_RR2_Pos (2UL) /*!< Position of RR2 field. */
N#define WDT_REQSTATUS_RR2_Msk (0x1UL << WDT_REQSTATUS_RR2_Pos) /*!< Bit mask of RR2 field. */
N#define WDT_REQSTATUS_RR2_DisabledOrRequested (0UL) /*!< RR[2] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR2_EnabledAndUnrequested (1UL) /*!< RR[2] register is enabled, and are not yet requesting reload */
N
N/* Bit 1 : Request status for RR[1] register */
N#define WDT_REQSTATUS_RR1_Pos (1UL) /*!< Position of RR1 field. */
N#define WDT_REQSTATUS_RR1_Msk (0x1UL << WDT_REQSTATUS_RR1_Pos) /*!< Bit mask of RR1 field. */
N#define WDT_REQSTATUS_RR1_DisabledOrRequested (0UL) /*!< RR[1] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR1_EnabledAndUnrequested (1UL) /*!< RR[1] register is enabled, and are not yet requesting reload */
N
N/* Bit 0 : Request status for RR[0] register */
N#define WDT_REQSTATUS_RR0_Pos (0UL) /*!< Position of RR0 field. */
N#define WDT_REQSTATUS_RR0_Msk (0x1UL << WDT_REQSTATUS_RR0_Pos) /*!< Bit mask of RR0 field. */
N#define WDT_REQSTATUS_RR0_DisabledOrRequested (0UL) /*!< RR[0] register is not enabled, or are already requesting reload */
N#define WDT_REQSTATUS_RR0_EnabledAndUnrequested (1UL) /*!< RR[0] register is enabled, and are not yet requesting reload */
N
N/* Register: WDT_CRV */
N/* Description: Counter reload value */
N
N/* Bits 31..0 : Counter reload value in number of cycles of the 32.768 kHz clock */
N#define WDT_CRV_CRV_Pos (0UL) /*!< Position of CRV field. */
N#define WDT_CRV_CRV_Msk (0xFFFFFFFFUL << WDT_CRV_CRV_Pos) /*!< Bit mask of CRV field. */
N
N/* Register: WDT_RREN */
N/* Description: Enable register for reload request registers */
N
N/* Bit 7 : Enable or disable RR[7] register */
N#define WDT_RREN_RR7_Pos (7UL) /*!< Position of RR7 field. */
N#define WDT_RREN_RR7_Msk (0x1UL << WDT_RREN_RR7_Pos) /*!< Bit mask of RR7 field. */
N#define WDT_RREN_RR7_Disabled (0UL) /*!< Disable RR[7] register */
N#define WDT_RREN_RR7_Enabled (1UL) /*!< Enable RR[7] register */
N
N/* Bit 6 : Enable or disable RR[6] register */
N#define WDT_RREN_RR6_Pos (6UL) /*!< Position of RR6 field. */
N#define WDT_RREN_RR6_Msk (0x1UL << WDT_RREN_RR6_Pos) /*!< Bit mask of RR6 field. */
N#define WDT_RREN_RR6_Disabled (0UL) /*!< Disable RR[6] register */
N#define WDT_RREN_RR6_Enabled (1UL) /*!< Enable RR[6] register */
N
N/* Bit 5 : Enable or disable RR[5] register */
N#define WDT_RREN_RR5_Pos (5UL) /*!< Position of RR5 field. */
N#define WDT_RREN_RR5_Msk (0x1UL << WDT_RREN_RR5_Pos) /*!< Bit mask of RR5 field. */
N#define WDT_RREN_RR5_Disabled (0UL) /*!< Disable RR[5] register */
N#define WDT_RREN_RR5_Enabled (1UL) /*!< Enable RR[5] register */
N
N/* Bit 4 : Enable or disable RR[4] register */
N#define WDT_RREN_RR4_Pos (4UL) /*!< Position of RR4 field. */
N#define WDT_RREN_RR4_Msk (0x1UL << WDT_RREN_RR4_Pos) /*!< Bit mask of RR4 field. */
N#define WDT_RREN_RR4_Disabled (0UL) /*!< Disable RR[4] register */
N#define WDT_RREN_RR4_Enabled (1UL) /*!< Enable RR[4] register */
N
N/* Bit 3 : Enable or disable RR[3] register */
N#define WDT_RREN_RR3_Pos (3UL) /*!< Position of RR3 field. */
N#define WDT_RREN_RR3_Msk (0x1UL << WDT_RREN_RR3_Pos) /*!< Bit mask of RR3 field. */
N#define WDT_RREN_RR3_Disabled (0UL) /*!< Disable RR[3] register */
N#define WDT_RREN_RR3_Enabled (1UL) /*!< Enable RR[3] register */
N
N/* Bit 2 : Enable or disable RR[2] register */
N#define WDT_RREN_RR2_Pos (2UL) /*!< Position of RR2 field. */
N#define WDT_RREN_RR2_Msk (0x1UL << WDT_RREN_RR2_Pos) /*!< Bit mask of RR2 field. */
N#define WDT_RREN_RR2_Disabled (0UL) /*!< Disable RR[2] register */
N#define WDT_RREN_RR2_Enabled (1UL) /*!< Enable RR[2] register */
N
N/* Bit 1 : Enable or disable RR[1] register */
N#define WDT_RREN_RR1_Pos (1UL) /*!< Position of RR1 field. */
N#define WDT_RREN_RR1_Msk (0x1UL << WDT_RREN_RR1_Pos) /*!< Bit mask of RR1 field. */
N#define WDT_RREN_RR1_Disabled (0UL) /*!< Disable RR[1] register */
N#define WDT_RREN_RR1_Enabled (1UL) /*!< Enable RR[1] register */
N
N/* Bit 0 : Enable or disable RR[0] register */
N#define WDT_RREN_RR0_Pos (0UL) /*!< Position of RR0 field. */
N#define WDT_RREN_RR0_Msk (0x1UL << WDT_RREN_RR0_Pos) /*!< Bit mask of RR0 field. */
N#define WDT_RREN_RR0_Disabled (0UL) /*!< Disable RR[0] register */
N#define WDT_RREN_RR0_Enabled (1UL) /*!< Enable RR[0] register */
N
N/* Register: WDT_CONFIG */
N/* Description: Configuration register */
N
N/* Bit 3 : Configure the watchdog to either be paused, or kept running, while the CPU is halted by the debugger */
N#define WDT_CONFIG_HALT_Pos (3UL) /*!< Position of HALT field. */
N#define WDT_CONFIG_HALT_Msk (0x1UL << WDT_CONFIG_HALT_Pos) /*!< Bit mask of HALT field. */
N#define WDT_CONFIG_HALT_Pause (0UL) /*!< Pause watchdog while the CPU is halted by the debugger */
N#define WDT_CONFIG_HALT_Run (1UL) /*!< Keep the watchdog running while the CPU is halted by the debugger */
N
N/* Bit 0 : Configure the watchdog to either be paused, or kept running, while the CPU is sleeping */
N#define WDT_CONFIG_SLEEP_Pos (0UL) /*!< Position of SLEEP field. */
N#define WDT_CONFIG_SLEEP_Msk (0x1UL << WDT_CONFIG_SLEEP_Pos) /*!< Bit mask of SLEEP field. */
N#define WDT_CONFIG_SLEEP_Pause (0UL) /*!< Pause watchdog while the CPU is sleeping */
N#define WDT_CONFIG_SLEEP_Run (1UL) /*!< Keep the watchdog running while the CPU is sleeping */
N
N/* Register: WDT_RR */
N/* Description: Description collection[0]:  Reload request 0 */
N
N/* Bits 31..0 : Reload request register */
N#define WDT_RR_RR_Pos (0UL) /*!< Position of RR field. */
N#define WDT_RR_RR_Msk (0xFFFFFFFFUL << WDT_RR_RR_Pos) /*!< Bit mask of RR field. */
N#define WDT_RR_RR_Reload (0x6E524635UL) /*!< Value to request a reload of the watchdog timer */
N
N
N/*lint --flb "Leave library region" */
N#endif
L 55 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 2
N        #include "nrf51_to_nrf52.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf51_to_nrf52.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef NRF51_TO_NRF52_H
N#define NRF51_TO_NRF52_H
N
N/*lint ++flb "Enter library region */
N
N/* This file is given to prevent your SW from not compiling with the name changes between nRF51 and nRF52 devices.
N * It redefines the old nRF51 names into the new ones as long as the functionality is still supported. If the
N * functionality is gone, there old names are not defined, so compilation will fail. Note that also includes macros
N * from the nrf51_deprecated.h file. */
N
N
N/* IRQ */
N/* Several peripherals have been added to several indexes. Names of IRQ handlers and IRQ numbers have changed. */
N#define UART0_IRQHandler        UARTE0_UART0_IRQHandler
N#define SPI0_TWI0_IRQHandler    SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
N#define SPI1_TWI1_IRQHandler    SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
N#define ADC_IRQHandler          SAADC_IRQHandler
N#define LPCOMP_IRQHandler       COMP_LPCOMP_IRQHandler
N#define SWI0_IRQHandler         SWI0_EGU0_IRQHandler
N#define SWI1_IRQHandler         SWI1_EGU1_IRQHandler
N#define SWI2_IRQHandler         SWI2_EGU2_IRQHandler
N#define SWI3_IRQHandler         SWI3_EGU3_IRQHandler
N#define SWI4_IRQHandler         SWI4_EGU4_IRQHandler
N#define SWI5_IRQHandler         SWI5_EGU5_IRQHandler
N
N#define UART0_IRQn              UARTE0_UART0_IRQn
N#define SPI0_TWI0_IRQn          SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn
N#define SPI1_TWI1_IRQn          SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn
N#define ADC_IRQn                SAADC_IRQn
N#define LPCOMP_IRQn             COMP_LPCOMP_IRQn
N#define SWI0_IRQn               SWI0_EGU0_IRQn
N#define SWI1_IRQn               SWI1_EGU1_IRQn
N#define SWI2_IRQn               SWI2_EGU2_IRQn
N#define SWI3_IRQn               SWI3_EGU3_IRQn
N#define SWI4_IRQn               SWI4_EGU4_IRQn
N#define SWI5_IRQn               SWI5_EGU5_IRQn
N
N
N/* UICR */
N/* Register RBPCONF was renamed to APPROTECT. */
N#define RBPCONF     APPROTECT
N
N#define UICR_RBPCONF_PALL_Pos           UICR_APPROTECT_PALL_Pos
N#define UICR_RBPCONF_PALL_Msk           UICR_APPROTECT_PALL_Msk
N#define UICR_RBPCONF_PALL_Enabled       UICR_APPROTECT_PALL_Enabled
N#define UICR_RBPCONF_PALL_Disabled      UICR_APPROTECT_PALL_Disabled
N
N
N/* GPIO */
N/* GPIO port was renamed to P0. */
N#define NRF_GPIO        NRF_P0
N#define NRF_GPIO_BASE   NRF_P0_BASE
N
N
N/* QDEC */
N/* The registers PSELA, PSELB and PSELLED were restructured into a struct. */
N#define PSELLED     PSEL.LED
N#define PSELA       PSEL.A
N#define PSELB       PSEL.B
N
N
N/* SPIS */
N/* The registers PSELSCK, PSELMISO, PSELMOSI, PSELCSN were restructured into a struct. */
N#define PSELSCK       PSEL.SCK
N#define PSELMISO      PSEL.MISO
N#define PSELMOSI      PSEL.MOSI
N#define PSELCSN       PSEL.CSN
N
N/* The registers RXDPTR, MAXRX, AMOUNTRX were restructured into a struct */
N#define RXDPTR        RXD.PTR
N#define MAXRX         RXD.MAXCNT
N#define AMOUNTRX      RXD.AMOUNT
N
N#define SPIS_MAXRX_MAXRX_Pos        SPIS_RXD_MAXCNT_MAXCNT_Pos
N#define SPIS_MAXRX_MAXRX_Msk        SPIS_RXD_MAXCNT_MAXCNT_Msk
N
N#define SPIS_AMOUNTRX_AMOUNTRX_Pos  SPIS_RXD_AMOUNT_AMOUNT_Pos
N#define SPIS_AMOUNTRX_AMOUNTRX_Msk  SPIS_RXD_AMOUNT_AMOUNT_Msk
N
N/* The registers TXDPTR, MAXTX, AMOUNTTX were restructured into a struct */
N#define TXDPTR        TXD.PTR
N#define MAXTX         TXD.MAXCNT
N#define AMOUNTTX      TXD.AMOUNT
N
N#define SPIS_MAXTX_MAXTX_Pos        SPIS_TXD_MAXCNT_MAXCNT_Pos
N#define SPIS_MAXTX_MAXTX_Msk        SPIS_TXD_MAXCNT_MAXCNT_Msk
N
N#define SPIS_AMOUNTTX_AMOUNTTX_Pos  SPIS_TXD_AMOUNT_AMOUNT_Pos
N#define SPIS_AMOUNTTX_AMOUNTTX_Msk  SPIS_TXD_AMOUNT_AMOUNT_Msk
N
N
N/* MPU */
N/* Part of MPU module was renamed BPROT, while the rest was eliminated. */
N#define NRF_MPU     NRF_BPROT
N
N/* Register DISABLEINDEBUG macros were affected. */
N#define MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos       BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Pos
N#define MPU_DISABLEINDEBUG_DISABLEINDEBUG_Msk       BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Msk
N#define MPU_DISABLEINDEBUG_DISABLEINDEBUG_Enabled   BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Enabled
N#define MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled  BPROT_DISABLEINDEBUG_DISABLEINDEBUG_Disabled
N
N/* Registers PROTENSET0 and PROTENSET1 were affected and renamed as CONFIG0 and CONFIG1. */
N#define PROTENSET0  CONFIG0
N#define PROTENSET1  CONFIG1
N
N#define MPU_PROTENSET1_PROTREG63_Pos        BPROT_CONFIG1_REGION63_Pos
N#define MPU_PROTENSET1_PROTREG63_Msk        BPROT_CONFIG1_REGION63_Msk
N#define MPU_PROTENSET1_PROTREG63_Disabled   BPROT_CONFIG1_REGION63_Disabled
N#define MPU_PROTENSET1_PROTREG63_Enabled    BPROT_CONFIG1_REGION63_Enabled
N#define MPU_PROTENSET1_PROTREG63_Set        BPROT_CONFIG1_REGION63_Enabled
N
N#define MPU_PROTENSET1_PROTREG62_Pos        BPROT_CONFIG1_REGION62_Pos
N#define MPU_PROTENSET1_PROTREG62_Msk        BPROT_CONFIG1_REGION62_Msk
N#define MPU_PROTENSET1_PROTREG62_Disabled   BPROT_CONFIG1_REGION62_Disabled
N#define MPU_PROTENSET1_PROTREG62_Enabled    BPROT_CONFIG1_REGION62_Enabled
N#define MPU_PROTENSET1_PROTREG62_Set        BPROT_CONFIG1_REGION62_Enabled
N
N#define MPU_PROTENSET1_PROTREG61_Pos        BPROT_CONFIG1_REGION61_Pos
N#define MPU_PROTENSET1_PROTREG61_Msk        BPROT_CONFIG1_REGION61_Msk
N#define MPU_PROTENSET1_PROTREG61_Disabled   BPROT_CONFIG1_REGION61_Disabled
N#define MPU_PROTENSET1_PROTREG61_Enabled    BPROT_CONFIG1_REGION61_Enabled
N#define MPU_PROTENSET1_PROTREG61_Set        BPROT_CONFIG1_REGION61_Enabled
N
N#define MPU_PROTENSET1_PROTREG60_Pos        BPROT_CONFIG1_REGION60_Pos
N#define MPU_PROTENSET1_PROTREG60_Msk        BPROT_CONFIG1_REGION60_Msk
N#define MPU_PROTENSET1_PROTREG60_Disabled   BPROT_CONFIG1_REGION60_Disabled
N#define MPU_PROTENSET1_PROTREG60_Enabled    BPROT_CONFIG1_REGION60_Enabled
N#define MPU_PROTENSET1_PROTREG60_Set        BPROT_CONFIG1_REGION60_Enabled
N
N#define MPU_PROTENSET1_PROTREG59_Pos        BPROT_CONFIG1_REGION59_Pos
N#define MPU_PROTENSET1_PROTREG59_Msk        BPROT_CONFIG1_REGION59_Msk
N#define MPU_PROTENSET1_PROTREG59_Disabled   BPROT_CONFIG1_REGION59_Disabled
N#define MPU_PROTENSET1_PROTREG59_Enabled    BPROT_CONFIG1_REGION59_Enabled
N#define MPU_PROTENSET1_PROTREG59_Set        BPROT_CONFIG1_REGION59_Enabled
N
N#define MPU_PROTENSET1_PROTREG58_Pos        BPROT_CONFIG1_REGION58_Pos
N#define MPU_PROTENSET1_PROTREG58_Msk        BPROT_CONFIG1_REGION58_Msk
N#define MPU_PROTENSET1_PROTREG58_Disabled   BPROT_CONFIG1_REGION58_Disabled
N#define MPU_PROTENSET1_PROTREG58_Enabled    BPROT_CONFIG1_REGION58_Enabled
N#define MPU_PROTENSET1_PROTREG58_Set        BPROT_CONFIG1_REGION58_Enabled
N
N#define MPU_PROTENSET1_PROTREG57_Pos        BPROT_CONFIG1_REGION57_Pos
N#define MPU_PROTENSET1_PROTREG57_Msk        BPROT_CONFIG1_REGION57_Msk
N#define MPU_PROTENSET1_PROTREG57_Disabled   BPROT_CONFIG1_REGION57_Disabled
N#define MPU_PROTENSET1_PROTREG57_Enabled    BPROT_CONFIG1_REGION57_Enabled
N#define MPU_PROTENSET1_PROTREG57_Set        BPROT_CONFIG1_REGION57_Enabled
N
N#define MPU_PROTENSET1_PROTREG56_Pos        BPROT_CONFIG1_REGION56_Pos
N#define MPU_PROTENSET1_PROTREG56_Msk        BPROT_CONFIG1_REGION56_Msk
N#define MPU_PROTENSET1_PROTREG56_Disabled   BPROT_CONFIG1_REGION56_Disabled
N#define MPU_PROTENSET1_PROTREG56_Enabled    BPROT_CONFIG1_REGION56_Enabled
N#define MPU_PROTENSET1_PROTREG56_Set        BPROT_CONFIG1_REGION56_Enabled
N
N#define MPU_PROTENSET1_PROTREG55_Pos        BPROT_CONFIG1_REGION55_Pos
N#define MPU_PROTENSET1_PROTREG55_Msk        BPROT_CONFIG1_REGION55_Msk
N#define MPU_PROTENSET1_PROTREG55_Disabled   BPROT_CONFIG1_REGION55_Disabled
N#define MPU_PROTENSET1_PROTREG55_Enabled    BPROT_CONFIG1_REGION55_Enabled
N#define MPU_PROTENSET1_PROTREG55_Set        BPROT_CONFIG1_REGION55_Enabled
N
N#define MPU_PROTENSET1_PROTREG54_Pos        BPROT_CONFIG1_REGION54_Pos
N#define MPU_PROTENSET1_PROTREG54_Msk        BPROT_CONFIG1_REGION54_Msk
N#define MPU_PROTENSET1_PROTREG54_Disabled   BPROT_CONFIG1_REGION54_Disabled
N#define MPU_PROTENSET1_PROTREG54_Enabled    BPROT_CONFIG1_REGION54_Enabled
N#define MPU_PROTENSET1_PROTREG54_Set        BPROT_CONFIG1_REGION54_Enabled
N
N#define MPU_PROTENSET1_PROTREG53_Pos        BPROT_CONFIG1_REGION53_Pos
N#define MPU_PROTENSET1_PROTREG53_Msk        BPROT_CONFIG1_REGION53_Msk
N#define MPU_PROTENSET1_PROTREG53_Disabled   BPROT_CONFIG1_REGION53_Disabled
N#define MPU_PROTENSET1_PROTREG53_Enabled    BPROT_CONFIG1_REGION53_Enabled
N#define MPU_PROTENSET1_PROTREG53_Set        BPROT_CONFIG1_REGION53_Enabled
N
N#define MPU_PROTENSET1_PROTREG52_Pos        BPROT_CONFIG1_REGION52_Pos
N#define MPU_PROTENSET1_PROTREG52_Msk        BPROT_CONFIG1_REGION52_Msk
N#define MPU_PROTENSET1_PROTREG52_Disabled   BPROT_CONFIG1_REGION52_Disabled
N#define MPU_PROTENSET1_PROTREG52_Enabled    BPROT_CONFIG1_REGION52_Enabled
N#define MPU_PROTENSET1_PROTREG52_Set        BPROT_CONFIG1_REGION52_Enabled
N
N#define MPU_PROTENSET1_PROTREG51_Pos        BPROT_CONFIG1_REGION51_Pos
N#define MPU_PROTENSET1_PROTREG51_Msk        BPROT_CONFIG1_REGION51_Msk
N#define MPU_PROTENSET1_PROTREG51_Disabled   BPROT_CONFIG1_REGION51_Disabled
N#define MPU_PROTENSET1_PROTREG51_Enabled    BPROT_CONFIG1_REGION51_Enabled
N#define MPU_PROTENSET1_PROTREG51_Set        BPROT_CONFIG1_REGION51_Enabled
N
N#define MPU_PROTENSET1_PROTREG50_Pos        BPROT_CONFIG1_REGION50_Pos
N#define MPU_PROTENSET1_PROTREG50_Msk        BPROT_CONFIG1_REGION50_Msk
N#define MPU_PROTENSET1_PROTREG50_Disabled   BPROT_CONFIG1_REGION50_Disabled
N#define MPU_PROTENSET1_PROTREG50_Enabled    BPROT_CONFIG1_REGION50_Enabled
N#define MPU_PROTENSET1_PROTREG50_Set        BPROT_CONFIG1_REGION50_Enabled
N
N#define MPU_PROTENSET1_PROTREG49_Pos        BPROT_CONFIG1_REGION49_Pos
N#define MPU_PROTENSET1_PROTREG49_Msk        BPROT_CONFIG1_REGION49_Msk
N#define MPU_PROTENSET1_PROTREG49_Disabled   BPROT_CONFIG1_REGION49_Disabled
N#define MPU_PROTENSET1_PROTREG49_Enabled    BPROT_CONFIG1_REGION49_Enabled
N#define MPU_PROTENSET1_PROTREG49_Set        BPROT_CONFIG1_REGION49_Enabled
N
N#define MPU_PROTENSET1_PROTREG48_Pos        BPROT_CONFIG1_REGION48_Pos
N#define MPU_PROTENSET1_PROTREG48_Msk        BPROT_CONFIG1_REGION48_Msk
N#define MPU_PROTENSET1_PROTREG48_Disabled   BPROT_CONFIG1_REGION48_Disabled
N#define MPU_PROTENSET1_PROTREG48_Enabled    BPROT_CONFIG1_REGION48_Enabled
N#define MPU_PROTENSET1_PROTREG48_Set        BPROT_CONFIG1_REGION48_Enabled
N
N#define MPU_PROTENSET1_PROTREG47_Pos        BPROT_CONFIG1_REGION47_Pos
N#define MPU_PROTENSET1_PROTREG47_Msk        BPROT_CONFIG1_REGION47_Msk
N#define MPU_PROTENSET1_PROTREG47_Disabled   BPROT_CONFIG1_REGION47_Disabled
N#define MPU_PROTENSET1_PROTREG47_Enabled    BPROT_CONFIG1_REGION47_Enabled
N#define MPU_PROTENSET1_PROTREG47_Set        BPROT_CONFIG1_REGION47_Enabled
N
N#define MPU_PROTENSET1_PROTREG46_Pos        BPROT_CONFIG1_REGION46_Pos
N#define MPU_PROTENSET1_PROTREG46_Msk        BPROT_CONFIG1_REGION46_Msk
N#define MPU_PROTENSET1_PROTREG46_Disabled   BPROT_CONFIG1_REGION46_Disabled
N#define MPU_PROTENSET1_PROTREG46_Enabled    BPROT_CONFIG1_REGION46_Enabled
N#define MPU_PROTENSET1_PROTREG46_Set        BPROT_CONFIG1_REGION46_Enabled
N
N#define MPU_PROTENSET1_PROTREG45_Pos        BPROT_CONFIG1_REGION45_Pos
N#define MPU_PROTENSET1_PROTREG45_Msk        BPROT_CONFIG1_REGION45_Msk
N#define MPU_PROTENSET1_PROTREG45_Disabled   BPROT_CONFIG1_REGION45_Disabled
N#define MPU_PROTENSET1_PROTREG45_Enabled    BPROT_CONFIG1_REGION45_Enabled
N#define MPU_PROTENSET1_PROTREG45_Set        BPROT_CONFIG1_REGION45_Enabled
N
N#define MPU_PROTENSET1_PROTREG44_Pos        BPROT_CONFIG1_REGION44_Pos
N#define MPU_PROTENSET1_PROTREG44_Msk        BPROT_CONFIG1_REGION44_Msk
N#define MPU_PROTENSET1_PROTREG44_Disabled   BPROT_CONFIG1_REGION44_Disabled
N#define MPU_PROTENSET1_PROTREG44_Enabled    BPROT_CONFIG1_REGION44_Enabled
N#define MPU_PROTENSET1_PROTREG44_Set        BPROT_CONFIG1_REGION44_Enabled
N
N#define MPU_PROTENSET1_PROTREG43_Pos        BPROT_CONFIG1_REGION43_Pos
N#define MPU_PROTENSET1_PROTREG43_Msk        BPROT_CONFIG1_REGION43_Msk
N#define MPU_PROTENSET1_PROTREG43_Disabled   BPROT_CONFIG1_REGION43_Disabled
N#define MPU_PROTENSET1_PROTREG43_Enabled    BPROT_CONFIG1_REGION43_Enabled
N#define MPU_PROTENSET1_PROTREG43_Set        BPROT_CONFIG1_REGION43_Enabled
N
N#define MPU_PROTENSET1_PROTREG42_Pos        BPROT_CONFIG1_REGION42_Pos
N#define MPU_PROTENSET1_PROTREG42_Msk        BPROT_CONFIG1_REGION42_Msk
N#define MPU_PROTENSET1_PROTREG42_Disabled   BPROT_CONFIG1_REGION42_Disabled
N#define MPU_PROTENSET1_PROTREG42_Enabled    BPROT_CONFIG1_REGION42_Enabled
N#define MPU_PROTENSET1_PROTREG42_Set        BPROT_CONFIG1_REGION42_Enabled
N
N#define MPU_PROTENSET1_PROTREG41_Pos        BPROT_CONFIG1_REGION41_Pos
N#define MPU_PROTENSET1_PROTREG41_Msk        BPROT_CONFIG1_REGION41_Msk
N#define MPU_PROTENSET1_PROTREG41_Disabled   BPROT_CONFIG1_REGION41_Disabled
N#define MPU_PROTENSET1_PROTREG41_Enabled    BPROT_CONFIG1_REGION41_Enabled
N#define MPU_PROTENSET1_PROTREG41_Set        BPROT_CONFIG1_REGION41_Enabled
N
N#define MPU_PROTENSET1_PROTREG40_Pos        BPROT_CONFIG1_REGION40_Pos
N#define MPU_PROTENSET1_PROTREG40_Msk        BPROT_CONFIG1_REGION40_Msk
N#define MPU_PROTENSET1_PROTREG40_Disabled   BPROT_CONFIG1_REGION40_Disabled
N#define MPU_PROTENSET1_PROTREG40_Enabled    BPROT_CONFIG1_REGION40_Enabled
N#define MPU_PROTENSET1_PROTREG40_Set        BPROT_CONFIG1_REGION40_Enabled
N
N#define MPU_PROTENSET1_PROTREG39_Pos        BPROT_CONFIG1_REGION39_Pos
N#define MPU_PROTENSET1_PROTREG39_Msk        BPROT_CONFIG1_REGION39_Msk
N#define MPU_PROTENSET1_PROTREG39_Disabled   BPROT_CONFIG1_REGION39_Disabled
N#define MPU_PROTENSET1_PROTREG39_Enabled    BPROT_CONFIG1_REGION39_Enabled
N#define MPU_PROTENSET1_PROTREG39_Set        BPROT_CONFIG1_REGION39_Enabled
N
N#define MPU_PROTENSET1_PROTREG38_Pos        BPROT_CONFIG1_REGION38_Pos
N#define MPU_PROTENSET1_PROTREG38_Msk        BPROT_CONFIG1_REGION38_Msk
N#define MPU_PROTENSET1_PROTREG38_Disabled   BPROT_CONFIG1_REGION38_Disabled
N#define MPU_PROTENSET1_PROTREG38_Enabled    BPROT_CONFIG1_REGION38_Enabled
N#define MPU_PROTENSET1_PROTREG38_Set        BPROT_CONFIG1_REGION38_Enabled
N
N#define MPU_PROTENSET1_PROTREG37_Pos        BPROT_CONFIG1_REGION37_Pos
N#define MPU_PROTENSET1_PROTREG37_Msk        BPROT_CONFIG1_REGION37_Msk
N#define MPU_PROTENSET1_PROTREG37_Disabled   BPROT_CONFIG1_REGION37_Disabled
N#define MPU_PROTENSET1_PROTREG37_Enabled    BPROT_CONFIG1_REGION37_Enabled
N#define MPU_PROTENSET1_PROTREG37_Set        BPROT_CONFIG1_REGION37_Enabled
N
N#define MPU_PROTENSET1_PROTREG36_Pos        BPROT_CONFIG1_REGION36_Pos
N#define MPU_PROTENSET1_PROTREG36_Msk        BPROT_CONFIG1_REGION36_Msk
N#define MPU_PROTENSET1_PROTREG36_Disabled   BPROT_CONFIG1_REGION36_Disabled
N#define MPU_PROTENSET1_PROTREG36_Enabled    BPROT_CONFIG1_REGION36_Enabled
N#define MPU_PROTENSET1_PROTREG36_Set        BPROT_CONFIG1_REGION36_Enabled
N
N#define MPU_PROTENSET1_PROTREG35_Pos        BPROT_CONFIG1_REGION35_Pos
N#define MPU_PROTENSET1_PROTREG35_Msk        BPROT_CONFIG1_REGION35_Msk
N#define MPU_PROTENSET1_PROTREG35_Disabled   BPROT_CONFIG1_REGION35_Disabled
N#define MPU_PROTENSET1_PROTREG35_Enabled    BPROT_CONFIG1_REGION35_Enabled
N#define MPU_PROTENSET1_PROTREG35_Set        BPROT_CONFIG1_REGION35_Enabled
N
N#define MPU_PROTENSET1_PROTREG34_Pos        BPROT_CONFIG1_REGION34_Pos
N#define MPU_PROTENSET1_PROTREG34_Msk        BPROT_CONFIG1_REGION34_Msk
N#define MPU_PROTENSET1_PROTREG34_Disabled   BPROT_CONFIG1_REGION34_Disabled
N#define MPU_PROTENSET1_PROTREG34_Enabled    BPROT_CONFIG1_REGION34_Enabled
N#define MPU_PROTENSET1_PROTREG34_Set        BPROT_CONFIG1_REGION34_Enabled
N
N#define MPU_PROTENSET1_PROTREG33_Pos        BPROT_CONFIG1_REGION33_Pos
N#define MPU_PROTENSET1_PROTREG33_Msk        BPROT_CONFIG1_REGION33_Msk
N#define MPU_PROTENSET1_PROTREG33_Disabled   BPROT_CONFIG1_REGION33_Disabled
N#define MPU_PROTENSET1_PROTREG33_Enabled    BPROT_CONFIG1_REGION33_Enabled
N#define MPU_PROTENSET1_PROTREG33_Set        BPROT_CONFIG1_REGION33_Enabled
N
N#define MPU_PROTENSET1_PROTREG32_Pos        BPROT_CONFIG1_REGION32_Pos
N#define MPU_PROTENSET1_PROTREG32_Msk        BPROT_CONFIG1_REGION32_Msk
N#define MPU_PROTENSET1_PROTREG32_Disabled   BPROT_CONFIG1_REGION32_Disabled
N#define MPU_PROTENSET1_PROTREG32_Enabled    BPROT_CONFIG1_REGION32_Enabled
N#define MPU_PROTENSET1_PROTREG32_Set        BPROT_CONFIG1_REGION32_Enabled
N
N#define MPU_PROTENSET0_PROTREG31_Pos        BPROT_CONFIG0_REGION31_Pos
N#define MPU_PROTENSET0_PROTREG31_Msk        BPROT_CONFIG0_REGION31_Msk
N#define MPU_PROTENSET0_PROTREG31_Disabled   BPROT_CONFIG0_REGION31_Disabled
N#define MPU_PROTENSET0_PROTREG31_Enabled    BPROT_CONFIG0_REGION31_Enabled
N#define MPU_PROTENSET0_PROTREG31_Set        BPROT_CONFIG0_REGION31_Enabled
N
N#define MPU_PROTENSET0_PROTREG30_Pos        BPROT_CONFIG0_REGION30_Pos
N#define MPU_PROTENSET0_PROTREG30_Msk        BPROT_CONFIG0_REGION30_Msk
N#define MPU_PROTENSET0_PROTREG30_Disabled   BPROT_CONFIG0_REGION30_Disabled
N#define MPU_PROTENSET0_PROTREG30_Enabled    BPROT_CONFIG0_REGION30_Enabled
N#define MPU_PROTENSET0_PROTREG30_Set        BPROT_CONFIG0_REGION30_Enabled
N
N#define MPU_PROTENSET0_PROTREG29_Pos        BPROT_CONFIG0_REGION29_Pos
N#define MPU_PROTENSET0_PROTREG29_Msk        BPROT_CONFIG0_REGION29_Msk
N#define MPU_PROTENSET0_PROTREG29_Disabled   BPROT_CONFIG0_REGION29_Disabled
N#define MPU_PROTENSET0_PROTREG29_Enabled    BPROT_CONFIG0_REGION29_Enabled
N#define MPU_PROTENSET0_PROTREG29_Set        BPROT_CONFIG0_REGION29_Enabled
N
N#define MPU_PROTENSET0_PROTREG28_Pos        BPROT_CONFIG0_REGION28_Pos
N#define MPU_PROTENSET0_PROTREG28_Msk        BPROT_CONFIG0_REGION28_Msk
N#define MPU_PROTENSET0_PROTREG28_Disabled   BPROT_CONFIG0_REGION28_Disabled
N#define MPU_PROTENSET0_PROTREG28_Enabled    BPROT_CONFIG0_REGION28_Enabled
N#define MPU_PROTENSET0_PROTREG28_Set        BPROT_CONFIG0_REGION28_Enabled
N
N#define MPU_PROTENSET0_PROTREG27_Pos        BPROT_CONFIG0_REGION27_Pos
N#define MPU_PROTENSET0_PROTREG27_Msk        BPROT_CONFIG0_REGION27_Msk
N#define MPU_PROTENSET0_PROTREG27_Disabled   BPROT_CONFIG0_REGION27_Disabled
N#define MPU_PROTENSET0_PROTREG27_Enabled    BPROT_CONFIG0_REGION27_Enabled
N#define MPU_PROTENSET0_PROTREG27_Set        BPROT_CONFIG0_REGION27_Enabled
N
N#define MPU_PROTENSET0_PROTREG26_Pos        BPROT_CONFIG0_REGION26_Pos
N#define MPU_PROTENSET0_PROTREG26_Msk        BPROT_CONFIG0_REGION26_Msk
N#define MPU_PROTENSET0_PROTREG26_Disabled   BPROT_CONFIG0_REGION26_Disabled
N#define MPU_PROTENSET0_PROTREG26_Enabled    BPROT_CONFIG0_REGION26_Enabled
N#define MPU_PROTENSET0_PROTREG26_Set        BPROT_CONFIG0_REGION26_Enabled
N
N#define MPU_PROTENSET0_PROTREG25_Pos        BPROT_CONFIG0_REGION25_Pos
N#define MPU_PROTENSET0_PROTREG25_Msk        BPROT_CONFIG0_REGION25_Msk
N#define MPU_PROTENSET0_PROTREG25_Disabled   BPROT_CONFIG0_REGION25_Disabled
N#define MPU_PROTENSET0_PROTREG25_Enabled    BPROT_CONFIG0_REGION25_Enabled
N#define MPU_PROTENSET0_PROTREG25_Set        BPROT_CONFIG0_REGION25_Enabled
N
N#define MPU_PROTENSET0_PROTREG24_Pos        BPROT_CONFIG0_REGION24_Pos
N#define MPU_PROTENSET0_PROTREG24_Msk        BPROT_CONFIG0_REGION24_Msk
N#define MPU_PROTENSET0_PROTREG24_Disabled   BPROT_CONFIG0_REGION24_Disabled
N#define MPU_PROTENSET0_PROTREG24_Enabled    BPROT_CONFIG0_REGION24_Enabled
N#define MPU_PROTENSET0_PROTREG24_Set        BPROT_CONFIG0_REGION24_Enabled
N
N#define MPU_PROTENSET0_PROTREG23_Pos        BPROT_CONFIG0_REGION23_Pos
N#define MPU_PROTENSET0_PROTREG23_Msk        BPROT_CONFIG0_REGION23_Msk
N#define MPU_PROTENSET0_PROTREG23_Disabled   BPROT_CONFIG0_REGION23_Disabled
N#define MPU_PROTENSET0_PROTREG23_Enabled    BPROT_CONFIG0_REGION23_Enabled
N#define MPU_PROTENSET0_PROTREG23_Set        BPROT_CONFIG0_REGION23_Enabled
N
N#define MPU_PROTENSET0_PROTREG22_Pos        BPROT_CONFIG0_REGION22_Pos
N#define MPU_PROTENSET0_PROTREG22_Msk        BPROT_CONFIG0_REGION22_Msk
N#define MPU_PROTENSET0_PROTREG22_Disabled   BPROT_CONFIG0_REGION22_Disabled
N#define MPU_PROTENSET0_PROTREG22_Enabled    BPROT_CONFIG0_REGION22_Enabled
N#define MPU_PROTENSET0_PROTREG22_Set        BPROT_CONFIG0_REGION22_Enabled
N
N#define MPU_PROTENSET0_PROTREG21_Pos        BPROT_CONFIG0_REGION21_Pos
N#define MPU_PROTENSET0_PROTREG21_Msk        BPROT_CONFIG0_REGION21_Msk
N#define MPU_PROTENSET0_PROTREG21_Disabled   BPROT_CONFIG0_REGION21_Disabled
N#define MPU_PROTENSET0_PROTREG21_Enabled    BPROT_CONFIG0_REGION21_Enabled
N#define MPU_PROTENSET0_PROTREG21_Set        BPROT_CONFIG0_REGION21_Enabled
N
N#define MPU_PROTENSET0_PROTREG20_Pos        BPROT_CONFIG0_REGION20_Pos
N#define MPU_PROTENSET0_PROTREG20_Msk        BPROT_CONFIG0_REGION20_Msk
N#define MPU_PROTENSET0_PROTREG20_Disabled   BPROT_CONFIG0_REGION20_Disabled
N#define MPU_PROTENSET0_PROTREG20_Enabled    BPROT_CONFIG0_REGION20_Enabled
N#define MPU_PROTENSET0_PROTREG20_Set        BPROT_CONFIG0_REGION20_Enabled
N
N#define MPU_PROTENSET0_PROTREG19_Pos        BPROT_CONFIG0_REGION19_Pos
N#define MPU_PROTENSET0_PROTREG19_Msk        BPROT_CONFIG0_REGION19_Msk
N#define MPU_PROTENSET0_PROTREG19_Disabled   BPROT_CONFIG0_REGION19_Disabled
N#define MPU_PROTENSET0_PROTREG19_Enabled    BPROT_CONFIG0_REGION19_Enabled
N#define MPU_PROTENSET0_PROTREG19_Set        BPROT_CONFIG0_REGION19_Enabled
N
N#define MPU_PROTENSET0_PROTREG18_Pos        BPROT_CONFIG0_REGION18_Pos
N#define MPU_PROTENSET0_PROTREG18_Msk        BPROT_CONFIG0_REGION18_Msk
N#define MPU_PROTENSET0_PROTREG18_Disabled   BPROT_CONFIG0_REGION18_Disabled
N#define MPU_PROTENSET0_PROTREG18_Enabled    BPROT_CONFIG0_REGION18_Enabled
N#define MPU_PROTENSET0_PROTREG18_Set        BPROT_CONFIG0_REGION18_Enabled
N
N#define MPU_PROTENSET0_PROTREG17_Pos        BPROT_CONFIG0_REGION17_Pos
N#define MPU_PROTENSET0_PROTREG17_Msk        BPROT_CONFIG0_REGION17_Msk
N#define MPU_PROTENSET0_PROTREG17_Disabled   BPROT_CONFIG0_REGION17_Disabled
N#define MPU_PROTENSET0_PROTREG17_Enabled    BPROT_CONFIG0_REGION17_Enabled
N#define MPU_PROTENSET0_PROTREG17_Set        BPROT_CONFIG0_REGION17_Enabled
N
N#define MPU_PROTENSET0_PROTREG16_Pos        BPROT_CONFIG0_REGION16_Pos
N#define MPU_PROTENSET0_PROTREG16_Msk        BPROT_CONFIG0_REGION16_Msk
N#define MPU_PROTENSET0_PROTREG16_Disabled   BPROT_CONFIG0_REGION16_Disabled
N#define MPU_PROTENSET0_PROTREG16_Enabled    BPROT_CONFIG0_REGION16_Enabled
N#define MPU_PROTENSET0_PROTREG16_Set        BPROT_CONFIG0_REGION16_Enabled
N
N#define MPU_PROTENSET0_PROTREG15_Pos        BPROT_CONFIG0_REGION15_Pos
N#define MPU_PROTENSET0_PROTREG15_Msk        BPROT_CONFIG0_REGION15_Msk
N#define MPU_PROTENSET0_PROTREG15_Disabled   BPROT_CONFIG0_REGION15_Disabled
N#define MPU_PROTENSET0_PROTREG15_Enabled    BPROT_CONFIG0_REGION15_Enabled
N#define MPU_PROTENSET0_PROTREG15_Set        BPROT_CONFIG0_REGION15_Enabled
N
N#define MPU_PROTENSET0_PROTREG14_Pos        BPROT_CONFIG0_REGION14_Pos
N#define MPU_PROTENSET0_PROTREG14_Msk        BPROT_CONFIG0_REGION14_Msk
N#define MPU_PROTENSET0_PROTREG14_Disabled   BPROT_CONFIG0_REGION14_Disabled
N#define MPU_PROTENSET0_PROTREG14_Enabled    BPROT_CONFIG0_REGION14_Enabled
N#define MPU_PROTENSET0_PROTREG14_Set        BPROT_CONFIG0_REGION14_Enabled
N
N#define MPU_PROTENSET0_PROTREG13_Pos        BPROT_CONFIG0_REGION13_Pos
N#define MPU_PROTENSET0_PROTREG13_Msk        BPROT_CONFIG0_REGION13_Msk
N#define MPU_PROTENSET0_PROTREG13_Disabled   BPROT_CONFIG0_REGION13_Disabled
N#define MPU_PROTENSET0_PROTREG13_Enabled    BPROT_CONFIG0_REGION13_Enabled
N#define MPU_PROTENSET0_PROTREG13_Set        BPROT_CONFIG0_REGION13_Enabled
N
N#define MPU_PROTENSET0_PROTREG12_Pos        BPROT_CONFIG0_REGION12_Pos
N#define MPU_PROTENSET0_PROTREG12_Msk        BPROT_CONFIG0_REGION12_Msk
N#define MPU_PROTENSET0_PROTREG12_Disabled   BPROT_CONFIG0_REGION12_Disabled
N#define MPU_PROTENSET0_PROTREG12_Enabled    BPROT_CONFIG0_REGION12_Enabled
N#define MPU_PROTENSET0_PROTREG12_Set        BPROT_CONFIG0_REGION12_Enabled
N
N#define MPU_PROTENSET0_PROTREG11_Pos        BPROT_CONFIG0_REGION11_Pos
N#define MPU_PROTENSET0_PROTREG11_Msk        BPROT_CONFIG0_REGION11_Msk
N#define MPU_PROTENSET0_PROTREG11_Disabled   BPROT_CONFIG0_REGION11_Disabled
N#define MPU_PROTENSET0_PROTREG11_Enabled    BPROT_CONFIG0_REGION11_Enabled
N#define MPU_PROTENSET0_PROTREG11_Set        BPROT_CONFIG0_REGION11_Enabled
N
N#define MPU_PROTENSET0_PROTREG10_Pos        BPROT_CONFIG0_REGION10_Pos
N#define MPU_PROTENSET0_PROTREG10_Msk        BPROT_CONFIG0_REGION10_Msk
N#define MPU_PROTENSET0_PROTREG10_Disabled   BPROT_CONFIG0_REGION10_Disabled
N#define MPU_PROTENSET0_PROTREG10_Enabled    BPROT_CONFIG0_REGION10_Enabled
N#define MPU_PROTENSET0_PROTREG10_Set        BPROT_CONFIG0_REGION10_Enabled
N
N#define MPU_PROTENSET0_PROTREG9_Pos        BPROT_CONFIG0_REGION9_Pos
N#define MPU_PROTENSET0_PROTREG9_Msk        BPROT_CONFIG0_REGION9_Msk
N#define MPU_PROTENSET0_PROTREG9_Disabled   BPROT_CONFIG0_REGION9_Disabled
N#define MPU_PROTENSET0_PROTREG9_Enabled    BPROT_CONFIG0_REGION9_Enabled
N#define MPU_PROTENSET0_PROTREG9_Set        BPROT_CONFIG0_REGION9_Enabled
N
N#define MPU_PROTENSET0_PROTREG8_Pos        BPROT_CONFIG0_REGION8_Pos
N#define MPU_PROTENSET0_PROTREG8_Msk        BPROT_CONFIG0_REGION8_Msk
N#define MPU_PROTENSET0_PROTREG8_Disabled   BPROT_CONFIG0_REGION8_Disabled
N#define MPU_PROTENSET0_PROTREG8_Enabled    BPROT_CONFIG0_REGION8_Enabled
N#define MPU_PROTENSET0_PROTREG8_Set        BPROT_CONFIG0_REGION8_Enabled
N
N#define MPU_PROTENSET0_PROTREG7_Pos        BPROT_CONFIG0_REGION7_Pos
N#define MPU_PROTENSET0_PROTREG7_Msk        BPROT_CONFIG0_REGION7_Msk
N#define MPU_PROTENSET0_PROTREG7_Disabled   BPROT_CONFIG0_REGION7_Disabled
N#define MPU_PROTENSET0_PROTREG7_Enabled    BPROT_CONFIG0_REGION7_Enabled
N#define MPU_PROTENSET0_PROTREG7_Set        BPROT_CONFIG0_REGION7_Enabled
N
N#define MPU_PROTENSET0_PROTREG6_Pos        BPROT_CONFIG0_REGION6_Pos
N#define MPU_PROTENSET0_PROTREG6_Msk        BPROT_CONFIG0_REGION6_Msk
N#define MPU_PROTENSET0_PROTREG6_Disabled   BPROT_CONFIG0_REGION6_Disabled
N#define MPU_PROTENSET0_PROTREG6_Enabled    BPROT_CONFIG0_REGION6_Enabled
N#define MPU_PROTENSET0_PROTREG6_Set        BPROT_CONFIG0_REGION6_Enabled
N
N#define MPU_PROTENSET0_PROTREG5_Pos        BPROT_CONFIG0_REGION5_Pos
N#define MPU_PROTENSET0_PROTREG5_Msk        BPROT_CONFIG0_REGION5_Msk
N#define MPU_PROTENSET0_PROTREG5_Disabled   BPROT_CONFIG0_REGION5_Disabled
N#define MPU_PROTENSET0_PROTREG5_Enabled    BPROT_CONFIG0_REGION5_Enabled
N#define MPU_PROTENSET0_PROTREG5_Set        BPROT_CONFIG0_REGION5_Enabled
N
N#define MPU_PROTENSET0_PROTREG4_Pos        BPROT_CONFIG0_REGION4_Pos
N#define MPU_PROTENSET0_PROTREG4_Msk        BPROT_CONFIG0_REGION4_Msk
N#define MPU_PROTENSET0_PROTREG4_Disabled   BPROT_CONFIG0_REGION4_Disabled
N#define MPU_PROTENSET0_PROTREG4_Enabled    BPROT_CONFIG0_REGION4_Enabled
N#define MPU_PROTENSET0_PROTREG4_Set        BPROT_CONFIG0_REGION4_Enabled
N
N#define MPU_PROTENSET0_PROTREG3_Pos        BPROT_CONFIG0_REGION3_Pos
N#define MPU_PROTENSET0_PROTREG3_Msk        BPROT_CONFIG0_REGION3_Msk
N#define MPU_PROTENSET0_PROTREG3_Disabled   BPROT_CONFIG0_REGION3_Disabled
N#define MPU_PROTENSET0_PROTREG3_Enabled    BPROT_CONFIG0_REGION3_Enabled
N#define MPU_PROTENSET0_PROTREG3_Set        BPROT_CONFIG0_REGION3_Enabled
N
N#define MPU_PROTENSET0_PROTREG2_Pos        BPROT_CONFIG0_REGION2_Pos
N#define MPU_PROTENSET0_PROTREG2_Msk        BPROT_CONFIG0_REGION2_Msk
N#define MPU_PROTENSET0_PROTREG2_Disabled   BPROT_CONFIG0_REGION2_Disabled
N#define MPU_PROTENSET0_PROTREG2_Enabled    BPROT_CONFIG0_REGION2_Enabled
N#define MPU_PROTENSET0_PROTREG2_Set        BPROT_CONFIG0_REGION2_Enabled
N
N#define MPU_PROTENSET0_PROTREG1_Pos        BPROT_CONFIG0_REGION1_Pos
N#define MPU_PROTENSET0_PROTREG1_Msk        BPROT_CONFIG0_REGION1_Msk
N#define MPU_PROTENSET0_PROTREG1_Disabled   BPROT_CONFIG0_REGION1_Disabled
N#define MPU_PROTENSET0_PROTREG1_Enabled    BPROT_CONFIG0_REGION1_Enabled
N#define MPU_PROTENSET0_PROTREG1_Set        BPROT_CONFIG0_REGION1_Enabled
N
N#define MPU_PROTENSET0_PROTREG0_Pos        BPROT_CONFIG0_REGION0_Pos
N#define MPU_PROTENSET0_PROTREG0_Msk        BPROT_CONFIG0_REGION0_Msk
N#define MPU_PROTENSET0_PROTREG0_Disabled   BPROT_CONFIG0_REGION0_Disabled
N#define MPU_PROTENSET0_PROTREG0_Enabled    BPROT_CONFIG0_REGION0_Enabled
N#define MPU_PROTENSET0_PROTREG0_Set        BPROT_CONFIG0_REGION0_Enabled
N
N
N/* From nrf51_deprecated.h */
N
N/* NVMC */
N/* The register ERASEPROTECTEDPAGE changed name to ERASEPCR0 in the documentation. */
N#define ERASEPROTECTEDPAGE      ERASEPCR0
N
N
N/* IRQ */
N/* COMP module was eliminated. Adapted to nrf52 headers. */
N#define LPCOMP_COMP_IRQHandler  COMP_LPCOMP_IRQHandler
N#define LPCOMP_COMP_IRQn        COMP_LPCOMP_IRQn
N
N
N/* REFSEL register redefined enumerated values and added some more. */
N#define LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling          LPCOMP_REFSEL_REFSEL_Ref1_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling         LPCOMP_REFSEL_REFSEL_Ref2_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling       LPCOMP_REFSEL_REFSEL_Ref3_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling        LPCOMP_REFSEL_REFSEL_Ref4_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling        LPCOMP_REFSEL_REFSEL_Ref5_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling         LPCOMP_REFSEL_REFSEL_Ref6_8Vdd
N#define LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling       LPCOMP_REFSEL_REFSEL_Ref7_8Vdd
N
N
N/* RADIO */
N/* The name of the field SKIPADDR was corrected. Old macros added for compatibility. */
N#define RADIO_CRCCNF_SKIP_ADDR_Pos      RADIO_CRCCNF_SKIPADDR_Pos
N#define RADIO_CRCCNF_SKIP_ADDR_Msk      RADIO_CRCCNF_SKIPADDR_Msk
N#define RADIO_CRCCNF_SKIP_ADDR_Include  RADIO_CRCCNF_SKIPADDR_Include
N#define RADIO_CRCCNF_SKIP_ADDR_Skip     RADIO_CRCCNF_SKIPADDR_Skip
N
N
N/* FICR */
N/* The registers FICR.DEVICEID0 and FICR.DEVICEID1 were renamed into an array. */
N#define DEVICEID0       DEVICEID[0]
N#define DEVICEID1       DEVICEID[1]
N
N/* The registers FICR.ER0, FICR.ER1, FICR.ER2 and FICR.ER3 were renamed into an array. */
N#define ER0             ER[0]
N#define ER1             ER[1]
N#define ER2             ER[2]
N#define ER3             ER[3]
N
N/* The registers FICR.IR0, FICR.IR1, FICR.IR2 and FICR.IR3 were renamed into an array. */
N#define IR0             IR[0]
N#define IR1             IR[1]
N#define IR2             IR[2]
N#define IR3             IR[3]
N
N/* The registers FICR.DEVICEADDR0 and FICR.DEVICEADDR1 were renamed into an array. */
N#define DEVICEADDR0     DEVICEADDR[0]
N#define DEVICEADDR1     DEVICEADDR[1]
N
N
N/* PPI */
N/* The tasks PPI.TASKS_CHGxEN and PPI.TASKS_CHGxDIS were renamed into an array of structs. */
N#define TASKS_CHG0EN     TASKS_CHG[0].EN
N#define TASKS_CHG0DIS    TASKS_CHG[0].DIS
N#define TASKS_CHG1EN     TASKS_CHG[1].EN
N#define TASKS_CHG1DIS    TASKS_CHG[1].DIS
N#define TASKS_CHG2EN     TASKS_CHG[2].EN
N#define TASKS_CHG2DIS    TASKS_CHG[2].DIS
N#define TASKS_CHG3EN     TASKS_CHG[3].EN
N#define TASKS_CHG3DIS    TASKS_CHG[3].DIS
N
N/* The registers PPI.CHx_EEP and PPI.CHx_TEP were renamed into an array of structs. */
N#define CH0_EEP          CH[0].EEP
N#define CH0_TEP          CH[0].TEP
N#define CH1_EEP          CH[1].EEP
N#define CH1_TEP          CH[1].TEP
N#define CH2_EEP          CH[2].EEP
N#define CH2_TEP          CH[2].TEP
N#define CH3_EEP          CH[3].EEP
N#define CH3_TEP          CH[3].TEP
N#define CH4_EEP          CH[4].EEP
N#define CH4_TEP          CH[4].TEP
N#define CH5_EEP          CH[5].EEP
N#define CH5_TEP          CH[5].TEP
N#define CH6_EEP          CH[6].EEP
N#define CH6_TEP          CH[6].TEP
N#define CH7_EEP          CH[7].EEP
N#define CH7_TEP          CH[7].TEP
N#define CH8_EEP          CH[8].EEP
N#define CH8_TEP          CH[8].TEP
N#define CH9_EEP          CH[9].EEP
N#define CH9_TEP          CH[9].TEP
N#define CH10_EEP         CH[10].EEP
N#define CH10_TEP         CH[10].TEP
N#define CH11_EEP         CH[11].EEP
N#define CH11_TEP         CH[11].TEP
N#define CH12_EEP         CH[12].EEP
N#define CH12_TEP         CH[12].TEP
N#define CH13_EEP         CH[13].EEP
N#define CH13_TEP         CH[13].TEP
N#define CH14_EEP         CH[14].EEP
N#define CH14_TEP         CH[14].TEP
N#define CH15_EEP         CH[15].EEP
N#define CH15_TEP         CH[15].TEP
N
N/* The registers PPI.CHG0, PPI.CHG1, PPI.CHG2 and PPI.CHG3 were renamed into an array. */
N#define CHG0             CHG[0]
N#define CHG1             CHG[1]
N#define CHG2             CHG[2]
N#define CHG3             CHG[3]
N
N/* All bitfield macros for the CHGx registers therefore changed name. */
N#define PPI_CHG0_CH15_Pos       PPI_CHG_CH15_Pos
N#define PPI_CHG0_CH15_Msk       PPI_CHG_CH15_Msk
N#define PPI_CHG0_CH15_Excluded  PPI_CHG_CH15_Excluded
N#define PPI_CHG0_CH15_Included  PPI_CHG_CH15_Included
N
N#define PPI_CHG0_CH14_Pos       PPI_CHG_CH14_Pos
N#define PPI_CHG0_CH14_Msk       PPI_CHG_CH14_Msk
N#define PPI_CHG0_CH14_Excluded  PPI_CHG_CH14_Excluded
N#define PPI_CHG0_CH14_Included  PPI_CHG_CH14_Included
N
N#define PPI_CHG0_CH13_Pos       PPI_CHG_CH13_Pos
N#define PPI_CHG0_CH13_Msk       PPI_CHG_CH13_Msk
N#define PPI_CHG0_CH13_Excluded  PPI_CHG_CH13_Excluded
N#define PPI_CHG0_CH13_Included  PPI_CHG_CH13_Included
N
N#define PPI_CHG0_CH12_Pos       PPI_CHG_CH12_Pos
N#define PPI_CHG0_CH12_Msk       PPI_CHG_CH12_Msk
N#define PPI_CHG0_CH12_Excluded  PPI_CHG_CH12_Excluded
N#define PPI_CHG0_CH12_Included  PPI_CHG_CH12_Included
N
N#define PPI_CHG0_CH11_Pos       PPI_CHG_CH11_Pos
N#define PPI_CHG0_CH11_Msk       PPI_CHG_CH11_Msk
N#define PPI_CHG0_CH11_Excluded  PPI_CHG_CH11_Excluded
N#define PPI_CHG0_CH11_Included  PPI_CHG_CH11_Included
N
N#define PPI_CHG0_CH10_Pos       PPI_CHG_CH10_Pos
N#define PPI_CHG0_CH10_Msk       PPI_CHG_CH10_Msk
N#define PPI_CHG0_CH10_Excluded  PPI_CHG_CH10_Excluded
N#define PPI_CHG0_CH10_Included  PPI_CHG_CH10_Included
N
N#define PPI_CHG0_CH9_Pos        PPI_CHG_CH9_Pos
N#define PPI_CHG0_CH9_Msk        PPI_CHG_CH9_Msk
N#define PPI_CHG0_CH9_Excluded   PPI_CHG_CH9_Excluded
N#define PPI_CHG0_CH9_Included   PPI_CHG_CH9_Included
N
N#define PPI_CHG0_CH8_Pos        PPI_CHG_CH8_Pos
N#define PPI_CHG0_CH8_Msk        PPI_CHG_CH8_Msk
N#define PPI_CHG0_CH8_Excluded   PPI_CHG_CH8_Excluded
N#define PPI_CHG0_CH8_Included   PPI_CHG_CH8_Included
N
N#define PPI_CHG0_CH7_Pos        PPI_CHG_CH7_Pos
N#define PPI_CHG0_CH7_Msk        PPI_CHG_CH7_Msk
N#define PPI_CHG0_CH7_Excluded   PPI_CHG_CH7_Excluded
N#define PPI_CHG0_CH7_Included   PPI_CHG_CH7_Included
N
N#define PPI_CHG0_CH6_Pos        PPI_CHG_CH6_Pos
N#define PPI_CHG0_CH6_Msk        PPI_CHG_CH6_Msk
N#define PPI_CHG0_CH6_Excluded   PPI_CHG_CH6_Excluded
N#define PPI_CHG0_CH6_Included   PPI_CHG_CH6_Included
N
N#define PPI_CHG0_CH5_Pos        PPI_CHG_CH5_Pos
N#define PPI_CHG0_CH5_Msk        PPI_CHG_CH5_Msk
N#define PPI_CHG0_CH5_Excluded   PPI_CHG_CH5_Excluded
N#define PPI_CHG0_CH5_Included   PPI_CHG_CH5_Included
N
N#define PPI_CHG0_CH4_Pos        PPI_CHG_CH4_Pos
N#define PPI_CHG0_CH4_Msk        PPI_CHG_CH4_Msk
N#define PPI_CHG0_CH4_Excluded   PPI_CHG_CH4_Excluded
N#define PPI_CHG0_CH4_Included   PPI_CHG_CH4_Included
N
N#define PPI_CHG0_CH3_Pos        PPI_CHG_CH3_Pos
N#define PPI_CHG0_CH3_Msk        PPI_CHG_CH3_Msk
N#define PPI_CHG0_CH3_Excluded   PPI_CHG_CH3_Excluded
N#define PPI_CHG0_CH3_Included   PPI_CHG_CH3_Included
N
N#define PPI_CHG0_CH2_Pos        PPI_CHG_CH2_Pos
N#define PPI_CHG0_CH2_Msk        PPI_CHG_CH2_Msk
N#define PPI_CHG0_CH2_Excluded   PPI_CHG_CH2_Excluded
N#define PPI_CHG0_CH2_Included   PPI_CHG_CH2_Included
N
N#define PPI_CHG0_CH1_Pos        PPI_CHG_CH1_Pos
N#define PPI_CHG0_CH1_Msk        PPI_CHG_CH1_Msk
N#define PPI_CHG0_CH1_Excluded   PPI_CHG_CH1_Excluded
N#define PPI_CHG0_CH1_Included   PPI_CHG_CH1_Included
N
N#define PPI_CHG0_CH0_Pos        PPI_CHG_CH0_Pos
N#define PPI_CHG0_CH0_Msk        PPI_CHG_CH0_Msk
N#define PPI_CHG0_CH0_Excluded   PPI_CHG_CH0_Excluded
N#define PPI_CHG0_CH0_Included   PPI_CHG_CH0_Included
N
N#define PPI_CHG1_CH15_Pos       PPI_CHG_CH15_Pos
N#define PPI_CHG1_CH15_Msk       PPI_CHG_CH15_Msk
N#define PPI_CHG1_CH15_Excluded  PPI_CHG_CH15_Excluded
N#define PPI_CHG1_CH15_Included  PPI_CHG_CH15_Included
N
N#define PPI_CHG1_CH14_Pos       PPI_CHG_CH14_Pos
N#define PPI_CHG1_CH14_Msk       PPI_CHG_CH14_Msk
N#define PPI_CHG1_CH14_Excluded  PPI_CHG_CH14_Excluded
N#define PPI_CHG1_CH14_Included  PPI_CHG_CH14_Included
N
N#define PPI_CHG1_CH13_Pos       PPI_CHG_CH13_Pos
N#define PPI_CHG1_CH13_Msk       PPI_CHG_CH13_Msk
N#define PPI_CHG1_CH13_Excluded  PPI_CHG_CH13_Excluded
N#define PPI_CHG1_CH13_Included  PPI_CHG_CH13_Included
N
N#define PPI_CHG1_CH12_Pos       PPI_CHG_CH12_Pos
N#define PPI_CHG1_CH12_Msk       PPI_CHG_CH12_Msk
N#define PPI_CHG1_CH12_Excluded  PPI_CHG_CH12_Excluded
N#define PPI_CHG1_CH12_Included  PPI_CHG_CH12_Included
N
N#define PPI_CHG1_CH11_Pos       PPI_CHG_CH11_Pos
N#define PPI_CHG1_CH11_Msk       PPI_CHG_CH11_Msk
N#define PPI_CHG1_CH11_Excluded  PPI_CHG_CH11_Excluded
N#define PPI_CHG1_CH11_Included  PPI_CHG_CH11_Included
N
N#define PPI_CHG1_CH10_Pos       PPI_CHG_CH10_Pos
N#define PPI_CHG1_CH10_Msk       PPI_CHG_CH10_Msk
N#define PPI_CHG1_CH10_Excluded  PPI_CHG_CH10_Excluded
N#define PPI_CHG1_CH10_Included  PPI_CHG_CH10_Included
N
N#define PPI_CHG1_CH9_Pos        PPI_CHG_CH9_Pos
N#define PPI_CHG1_CH9_Msk        PPI_CHG_CH9_Msk
N#define PPI_CHG1_CH9_Excluded   PPI_CHG_CH9_Excluded
N#define PPI_CHG1_CH9_Included   PPI_CHG_CH9_Included
N
N#define PPI_CHG1_CH8_Pos        PPI_CHG_CH8_Pos
N#define PPI_CHG1_CH8_Msk        PPI_CHG_CH8_Msk
N#define PPI_CHG1_CH8_Excluded   PPI_CHG_CH8_Excluded
N#define PPI_CHG1_CH8_Included   PPI_CHG_CH8_Included
N
N#define PPI_CHG1_CH7_Pos        PPI_CHG_CH7_Pos
N#define PPI_CHG1_CH7_Msk        PPI_CHG_CH7_Msk
N#define PPI_CHG1_CH7_Excluded   PPI_CHG_CH7_Excluded
N#define PPI_CHG1_CH7_Included   PPI_CHG_CH7_Included
N
N#define PPI_CHG1_CH6_Pos        PPI_CHG_CH6_Pos
N#define PPI_CHG1_CH6_Msk        PPI_CHG_CH6_Msk
N#define PPI_CHG1_CH6_Excluded   PPI_CHG_CH6_Excluded
N#define PPI_CHG1_CH6_Included   PPI_CHG_CH6_Included
N
N#define PPI_CHG1_CH5_Pos        PPI_CHG_CH5_Pos
N#define PPI_CHG1_CH5_Msk        PPI_CHG_CH5_Msk
N#define PPI_CHG1_CH5_Excluded   PPI_CHG_CH5_Excluded
N#define PPI_CHG1_CH5_Included   PPI_CHG_CH5_Included
N
N#define PPI_CHG1_CH4_Pos        PPI_CHG_CH4_Pos
N#define PPI_CHG1_CH4_Msk        PPI_CHG_CH4_Msk
N#define PPI_CHG1_CH4_Excluded   PPI_CHG_CH4_Excluded
N#define PPI_CHG1_CH4_Included   PPI_CHG_CH4_Included
N
N#define PPI_CHG1_CH3_Pos        PPI_CHG_CH3_Pos
N#define PPI_CHG1_CH3_Msk        PPI_CHG_CH3_Msk
N#define PPI_CHG1_CH3_Excluded   PPI_CHG_CH3_Excluded
N#define PPI_CHG1_CH3_Included   PPI_CHG_CH3_Included
N
N#define PPI_CHG1_CH2_Pos        PPI_CHG_CH2_Pos
N#define PPI_CHG1_CH2_Msk        PPI_CHG_CH2_Msk
N#define PPI_CHG1_CH2_Excluded   PPI_CHG_CH2_Excluded
N#define PPI_CHG1_CH2_Included   PPI_CHG_CH2_Included
N
N#define PPI_CHG1_CH1_Pos        PPI_CHG_CH1_Pos
N#define PPI_CHG1_CH1_Msk        PPI_CHG_CH1_Msk
N#define PPI_CHG1_CH1_Excluded   PPI_CHG_CH1_Excluded
N#define PPI_CHG1_CH1_Included   PPI_CHG_CH1_Included
N
N#define PPI_CHG1_CH0_Pos        PPI_CHG_CH0_Pos
N#define PPI_CHG1_CH0_Msk        PPI_CHG_CH0_Msk
N#define PPI_CHG1_CH0_Excluded   PPI_CHG_CH0_Excluded
N#define PPI_CHG1_CH0_Included   PPI_CHG_CH0_Included
N
N#define PPI_CHG2_CH15_Pos       PPI_CHG_CH15_Pos
N#define PPI_CHG2_CH15_Msk       PPI_CHG_CH15_Msk
N#define PPI_CHG2_CH15_Excluded  PPI_CHG_CH15_Excluded
N#define PPI_CHG2_CH15_Included  PPI_CHG_CH15_Included
N
N#define PPI_CHG2_CH14_Pos       PPI_CHG_CH14_Pos
N#define PPI_CHG2_CH14_Msk       PPI_CHG_CH14_Msk
N#define PPI_CHG2_CH14_Excluded  PPI_CHG_CH14_Excluded
N#define PPI_CHG2_CH14_Included  PPI_CHG_CH14_Included
N
N#define PPI_CHG2_CH13_Pos       PPI_CHG_CH13_Pos
N#define PPI_CHG2_CH13_Msk       PPI_CHG_CH13_Msk
N#define PPI_CHG2_CH13_Excluded  PPI_CHG_CH13_Excluded
N#define PPI_CHG2_CH13_Included  PPI_CHG_CH13_Included
N
N#define PPI_CHG2_CH12_Pos       PPI_CHG_CH12_Pos
N#define PPI_CHG2_CH12_Msk       PPI_CHG_CH12_Msk
N#define PPI_CHG2_CH12_Excluded  PPI_CHG_CH12_Excluded
N#define PPI_CHG2_CH12_Included  PPI_CHG_CH12_Included
N
N#define PPI_CHG2_CH11_Pos       PPI_CHG_CH11_Pos
N#define PPI_CHG2_CH11_Msk       PPI_CHG_CH11_Msk
N#define PPI_CHG2_CH11_Excluded  PPI_CHG_CH11_Excluded
N#define PPI_CHG2_CH11_Included  PPI_CHG_CH11_Included
N
N#define PPI_CHG2_CH10_Pos       PPI_CHG_CH10_Pos
N#define PPI_CHG2_CH10_Msk       PPI_CHG_CH10_Msk
N#define PPI_CHG2_CH10_Excluded  PPI_CHG_CH10_Excluded
N#define PPI_CHG2_CH10_Included  PPI_CHG_CH10_Included
N
N#define PPI_CHG2_CH9_Pos        PPI_CHG_CH9_Pos
N#define PPI_CHG2_CH9_Msk        PPI_CHG_CH9_Msk
N#define PPI_CHG2_CH9_Excluded   PPI_CHG_CH9_Excluded
N#define PPI_CHG2_CH9_Included   PPI_CHG_CH9_Included
N
N#define PPI_CHG2_CH8_Pos        PPI_CHG_CH8_Pos
N#define PPI_CHG2_CH8_Msk        PPI_CHG_CH8_Msk
N#define PPI_CHG2_CH8_Excluded   PPI_CHG_CH8_Excluded
N#define PPI_CHG2_CH8_Included   PPI_CHG_CH8_Included
N
N#define PPI_CHG2_CH7_Pos        PPI_CHG_CH7_Pos
N#define PPI_CHG2_CH7_Msk        PPI_CHG_CH7_Msk
N#define PPI_CHG2_CH7_Excluded   PPI_CHG_CH7_Excluded
N#define PPI_CHG2_CH7_Included   PPI_CHG_CH7_Included
N
N#define PPI_CHG2_CH6_Pos        PPI_CHG_CH6_Pos
N#define PPI_CHG2_CH6_Msk        PPI_CHG_CH6_Msk
N#define PPI_CHG2_CH6_Excluded   PPI_CHG_CH6_Excluded
N#define PPI_CHG2_CH6_Included   PPI_CHG_CH6_Included
N
N#define PPI_CHG2_CH5_Pos        PPI_CHG_CH5_Pos
N#define PPI_CHG2_CH5_Msk        PPI_CHG_CH5_Msk
N#define PPI_CHG2_CH5_Excluded   PPI_CHG_CH5_Excluded
N#define PPI_CHG2_CH5_Included   PPI_CHG_CH5_Included
N
N#define PPI_CHG2_CH4_Pos        PPI_CHG_CH4_Pos
N#define PPI_CHG2_CH4_Msk        PPI_CHG_CH4_Msk
N#define PPI_CHG2_CH4_Excluded   PPI_CHG_CH4_Excluded
N#define PPI_CHG2_CH4_Included   PPI_CHG_CH4_Included
N
N#define PPI_CHG2_CH3_Pos        PPI_CHG_CH3_Pos
N#define PPI_CHG2_CH3_Msk        PPI_CHG_CH3_Msk
N#define PPI_CHG2_CH3_Excluded   PPI_CHG_CH3_Excluded
N#define PPI_CHG2_CH3_Included   PPI_CHG_CH3_Included
N
N#define PPI_CHG2_CH2_Pos        PPI_CHG_CH2_Pos
N#define PPI_CHG2_CH2_Msk        PPI_CHG_CH2_Msk
N#define PPI_CHG2_CH2_Excluded   PPI_CHG_CH2_Excluded
N#define PPI_CHG2_CH2_Included   PPI_CHG_CH2_Included
N
N#define PPI_CHG2_CH1_Pos        PPI_CHG_CH1_Pos
N#define PPI_CHG2_CH1_Msk        PPI_CHG_CH1_Msk
N#define PPI_CHG2_CH1_Excluded   PPI_CHG_CH1_Excluded
N#define PPI_CHG2_CH1_Included   PPI_CHG_CH1_Included
N
N#define PPI_CHG2_CH0_Pos        PPI_CHG_CH0_Pos
N#define PPI_CHG2_CH0_Msk        PPI_CHG_CH0_Msk
N#define PPI_CHG2_CH0_Excluded   PPI_CHG_CH0_Excluded
N#define PPI_CHG2_CH0_Included   PPI_CHG_CH0_Included
N
N#define PPI_CHG3_CH15_Pos       PPI_CHG_CH15_Pos
N#define PPI_CHG3_CH15_Msk       PPI_CHG_CH15_Msk
N#define PPI_CHG3_CH15_Excluded  PPI_CHG_CH15_Excluded
N#define PPI_CHG3_CH15_Included  PPI_CHG_CH15_Included
N
N#define PPI_CHG3_CH14_Pos       PPI_CHG_CH14_Pos
N#define PPI_CHG3_CH14_Msk       PPI_CHG_CH14_Msk
N#define PPI_CHG3_CH14_Excluded  PPI_CHG_CH14_Excluded
N#define PPI_CHG3_CH14_Included  PPI_CHG_CH14_Included
N
N#define PPI_CHG3_CH13_Pos       PPI_CHG_CH13_Pos
N#define PPI_CHG3_CH13_Msk       PPI_CHG_CH13_Msk
N#define PPI_CHG3_CH13_Excluded  PPI_CHG_CH13_Excluded
N#define PPI_CHG3_CH13_Included  PPI_CHG_CH13_Included
N
N#define PPI_CHG3_CH12_Pos       PPI_CHG_CH12_Pos
N#define PPI_CHG3_CH12_Msk       PPI_CHG_CH12_Msk
N#define PPI_CHG3_CH12_Excluded  PPI_CHG_CH12_Excluded
N#define PPI_CHG3_CH12_Included  PPI_CHG_CH12_Included
N
N#define PPI_CHG3_CH11_Pos       PPI_CHG_CH11_Pos
N#define PPI_CHG3_CH11_Msk       PPI_CHG_CH11_Msk
N#define PPI_CHG3_CH11_Excluded  PPI_CHG_CH11_Excluded
N#define PPI_CHG3_CH11_Included  PPI_CHG_CH11_Included
N
N#define PPI_CHG3_CH10_Pos       PPI_CHG_CH10_Pos
N#define PPI_CHG3_CH10_Msk       PPI_CHG_CH10_Msk
N#define PPI_CHG3_CH10_Excluded  PPI_CHG_CH10_Excluded
N#define PPI_CHG3_CH10_Included  PPI_CHG_CH10_Included
N
N#define PPI_CHG3_CH9_Pos        PPI_CHG_CH9_Pos
N#define PPI_CHG3_CH9_Msk        PPI_CHG_CH9_Msk
N#define PPI_CHG3_CH9_Excluded   PPI_CHG_CH9_Excluded
N#define PPI_CHG3_CH9_Included   PPI_CHG_CH9_Included
N
N#define PPI_CHG3_CH8_Pos        PPI_CHG_CH8_Pos
N#define PPI_CHG3_CH8_Msk        PPI_CHG_CH8_Msk
N#define PPI_CHG3_CH8_Excluded   PPI_CHG_CH8_Excluded
N#define PPI_CHG3_CH8_Included   PPI_CHG_CH8_Included
N
N#define PPI_CHG3_CH7_Pos        PPI_CHG_CH7_Pos
N#define PPI_CHG3_CH7_Msk        PPI_CHG_CH7_Msk
N#define PPI_CHG3_CH7_Excluded   PPI_CHG_CH7_Excluded
N#define PPI_CHG3_CH7_Included   PPI_CHG_CH7_Included
N
N#define PPI_CHG3_CH6_Pos        PPI_CHG_CH6_Pos
N#define PPI_CHG3_CH6_Msk        PPI_CHG_CH6_Msk
N#define PPI_CHG3_CH6_Excluded   PPI_CHG_CH6_Excluded
N#define PPI_CHG3_CH6_Included   PPI_CHG_CH6_Included
N
N#define PPI_CHG3_CH5_Pos        PPI_CHG_CH5_Pos
N#define PPI_CHG3_CH5_Msk        PPI_CHG_CH5_Msk
N#define PPI_CHG3_CH5_Excluded   PPI_CHG_CH5_Excluded
N#define PPI_CHG3_CH5_Included   PPI_CHG_CH5_Included
N
N#define PPI_CHG3_CH4_Pos        PPI_CHG_CH4_Pos
N#define PPI_CHG3_CH4_Msk        PPI_CHG_CH4_Msk
N#define PPI_CHG3_CH4_Excluded   PPI_CHG_CH4_Excluded
N#define PPI_CHG3_CH4_Included   PPI_CHG_CH4_Included
N
N#define PPI_CHG3_CH3_Pos        PPI_CHG_CH3_Pos
N#define PPI_CHG3_CH3_Msk        PPI_CHG_CH3_Msk
N#define PPI_CHG3_CH3_Excluded   PPI_CHG_CH3_Excluded
N#define PPI_CHG3_CH3_Included   PPI_CHG_CH3_Included
N
N#define PPI_CHG3_CH2_Pos        PPI_CHG_CH2_Pos
N#define PPI_CHG3_CH2_Msk        PPI_CHG_CH2_Msk
N#define PPI_CHG3_CH2_Excluded   PPI_CHG_CH2_Excluded
N#define PPI_CHG3_CH2_Included   PPI_CHG_CH2_Included
N
N#define PPI_CHG3_CH1_Pos        PPI_CHG_CH1_Pos
N#define PPI_CHG3_CH1_Msk        PPI_CHG_CH1_Msk
N#define PPI_CHG3_CH1_Excluded   PPI_CHG_CH1_Excluded
N#define PPI_CHG3_CH1_Included   PPI_CHG_CH1_Included
N
N#define PPI_CHG3_CH0_Pos        PPI_CHG_CH0_Pos
N#define PPI_CHG3_CH0_Msk        PPI_CHG_CH0_Msk
N#define PPI_CHG3_CH0_Excluded   PPI_CHG_CH0_Excluded
N#define PPI_CHG3_CH0_Included   PPI_CHG_CH0_Included
N
N
N
N
N/*lint --flb "Leave library region" */
N
N#endif /* NRF51_TO_NRF52_H */
N
L 56 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 2
N        #include "nrf52_name_change.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf52_name_change.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef NRF52_NAME_CHANGE_H
N#define NRF52_NAME_CHANGE_H
N
N/*lint ++flb "Enter library region */
N
N/* This file is given to prevent your SW from not compiling with the updates made to nrf52.h and 
N * nrf52_bitfields.h. The macros defined in this file were available previously. Do not use these
N * macros on purpose. Use the ones defined in nrf52.h and nrf52_bitfields.h instead.
N */
N
N/* I2S */
N/* Several enumerations changed case. Adding old macros to keep compilation compatibility. */
N#define I2S_ENABLE_ENABLE_DISABLE           I2S_ENABLE_ENABLE_Disabled
N#define I2S_ENABLE_ENABLE_ENABLE            I2S_ENABLE_ENABLE_Enabled
N#define I2S_CONFIG_MODE_MODE_MASTER         I2S_CONFIG_MODE_MODE_Master
N#define I2S_CONFIG_MODE_MODE_SLAVE          I2S_CONFIG_MODE_MODE_Slave
N#define I2S_CONFIG_RXEN_RXEN_DISABLE        I2S_CONFIG_RXEN_RXEN_Disabled
N#define I2S_CONFIG_RXEN_RXEN_ENABLE         I2S_CONFIG_RXEN_RXEN_Enabled
N#define I2S_CONFIG_TXEN_TXEN_DISABLE        I2S_CONFIG_TXEN_TXEN_Disabled
N#define I2S_CONFIG_TXEN_TXEN_ENABLE         I2S_CONFIG_TXEN_TXEN_Enabled
N#define I2S_CONFIG_MCKEN_MCKEN_DISABLE      I2S_CONFIG_MCKEN_MCKEN_Disabled
N#define I2S_CONFIG_MCKEN_MCKEN_ENABLE       I2S_CONFIG_MCKEN_MCKEN_Enabled
N#define I2S_CONFIG_SWIDTH_SWIDTH_8BIT       I2S_CONFIG_SWIDTH_SWIDTH_8Bit
N#define I2S_CONFIG_SWIDTH_SWIDTH_16BIT      I2S_CONFIG_SWIDTH_SWIDTH_16Bit
N#define I2S_CONFIG_SWIDTH_SWIDTH_24BIT      I2S_CONFIG_SWIDTH_SWIDTH_24Bit
N#define I2S_CONFIG_ALIGN_ALIGN_LEFT         I2S_CONFIG_ALIGN_ALIGN_Left
N#define I2S_CONFIG_ALIGN_ALIGN_RIGHT        I2S_CONFIG_ALIGN_ALIGN_Right
N#define I2S_CONFIG_FORMAT_FORMAT_ALIGNED    I2S_CONFIG_FORMAT_FORMAT_Aligned
N#define I2S_CONFIG_CHANNELS_CHANNELS_STEREO I2S_CONFIG_CHANNELS_CHANNELS_Stereo
N#define I2S_CONFIG_CHANNELS_CHANNELS_LEFT   I2S_CONFIG_CHANNELS_CHANNELS_Left
N#define I2S_CONFIG_CHANNELS_CHANNELS_RIGHT  I2S_CONFIG_CHANNELS_CHANNELS_Right
N
N/* LPCOMP */
N/* Corrected typo in RESULT register. */
N#define LPCOMP_RESULT_RESULT_Bellow         LPCOMP_RESULT_RESULT_Below
N
N/* FICR */
N/* Renamed name of the package. */
N#define FICR_INFO_PACKAGE_PACKAGE_CH        FICR_INFO_PACKAGE_PACKAGE_CI
N
N
N/*lint --flb "Leave library region" */
N
N#endif /* NRF52_NAME_CHANGE_H */
N
L 57 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 2
N    #else
S        #error "Device family must be defined. See nrf.h."
N    #endif /* NRF51, NRF52 */
N
N    #include "compiler_abstraction.h"
L 1 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\compiler_abstraction.h" 1
N/* Copyright (c) 2016, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions are met:
N *
N *   * Redistributions of source code must retain the above copyright notice, this
N *     list of conditions and the following disclaimer.
N *
N *   * Redistributions in binary form must reproduce the above copyright notice,
N *     this list of conditions and the following disclaimer in the documentation
N *     and/or other materials provided with the distribution.
N *
N *   * Neither the name of Nordic Semiconductor ASA nor the names of its
N *     contributors may be used to endorse or promote products derived from
N *     this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N */
N 
N#ifndef _COMPILER_ABSTRACTION_H
N#define _COMPILER_ABSTRACTION_H
N
N/*lint ++flb "Enter library region" */
N
N#if defined ( __CC_ARM )
X#if 1L
N
N    #ifndef __ASM
S        #define __ASM               __asm
N    #endif
N
N    #ifndef __INLINE
S        #define __INLINE            __inline
N    #endif
N
N    #ifndef __WEAK
N        #define __WEAK              __weak
N    #endif
N
N    #ifndef __ALIGN
N        #define __ALIGN(n)          __align(n)
N    #endif
N
N    #ifndef __PACKED
N        #define __PACKED            __packed
N    #endif
N
N    #define GET_SP()                __current_sp()
N
N#elif defined ( __ICCARM__ )
S
S    #ifndef __ASM
S        #define __ASM               __asm
S    #endif
S
S    #ifndef __INLINE
S        #define __INLINE            inline
S    #endif
S
S    #ifndef __WEAK
S        #define __WEAK              __weak
S    #endif
S
S    #ifndef __ALIGN
S        #define STRING_PRAGMA(x) _Pragma(#x)
S        #define __ALIGN(n) STRING_PRAGMA(data_alignment = n)
S    #endif
S
S    #ifndef __PACKED
S        #define __PACKED            __packed
S    #endif
S    
S    #define GET_SP()                __get_SP()
S
S#elif defined   ( __GNUC__ )
S
S    #ifndef __ASM
S        #define __ASM               __asm
S    #endif
S
S    #ifndef __INLINE
S        #define __INLINE            inline
S    #endif
S
S    #ifndef __WEAK
S        #define __WEAK              __attribute__((weak))
S    #endif
S
S    #ifndef __ALIGN
S        #define __ALIGN(n)          __attribute__((aligned(n)))
S    #endif
S
S    #ifndef __PACKED
S        #define __PACKED           __attribute__((packed)) 
S    #endif
S
S    #define GET_SP()                gcc_current_sp()
S
S    static inline unsigned int gcc_current_sp(void)
S    {
S        register unsigned sp __ASM("sp");
S        return sp;
S    }
S
S#elif defined   ( __TASKING__ )
S
S    #ifndef __ASM
S        #define __ASM               __asm
S    #endif
S
S    #ifndef __INLINE
S        #define __INLINE            inline
S    #endif
S
S    #ifndef __WEAK
S        #define __WEAK              __attribute__((weak))
S    #endif
S
S    #ifndef __ALIGN
S        #define __ALIGN(n)          __align(n)
S    #endif
S    
S    /* Not defined for TASKING. */
S    #ifndef __PACKED
S        #define __PACKED
S    #endif
S
S    #define GET_SP()                __get_MSP()
S
N#endif
N
N/*lint --flb "Leave library region" */
N
N#endif
L 62 "C:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include\nrf.h" 2
N
N#endif /* _WIN32 || __unix || __APPLE__ */
N
N#endif /* NRF_H */
N
L 29 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_spi.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/**
N * @brief This value can be used as a parameter for the @ref nrf_spi_pins_set
N *        function to specify that a given SPI signal (SCK, MOSI, or MISO)
N *        shall not be connected to a physical pin.
N */
N#define NRF_SPI_PIN_NOT_CONNECTED  0xFFFFFFFF
N
N
N/**
N * @brief SPI events.
N */
Ntypedef enum
N{
N    /*lint -save -e30*/
N    NRF_SPI_EVENT_READY = offsetof(NRF_SPI_Type, EVENTS_READY) ///< TXD byte sent and RXD byte received.
X    NRF_SPI_EVENT_READY = (( size_t)__INTADDR__(&(((NRF_SPI_Type *)0)->EVENTS_READY))) 
N    /*lint -restore*/
N} nrf_spi_event_t;
N
N/**
N * @brief SPI interrupts.
N */
Ntypedef enum
N{
N    NRF_SPI_INT_READY_MASK = SPI_INTENSET_READY_Msk ///< Interrupt on READY event.
X    NRF_SPI_INT_READY_MASK = (0x1UL << (2UL)) 
N} nrf_spi_int_mask_t;
N
N/**
N * @brief SPI data rates.
N */
Ntypedef enum
N{
N    NRF_SPI_FREQ_125K = SPI_FREQUENCY_FREQUENCY_K125,   ///< 125 kbps.
X    NRF_SPI_FREQ_125K = (0x02000000UL),   
N    NRF_SPI_FREQ_250K = SPI_FREQUENCY_FREQUENCY_K250,   ///< 250 kbps.
X    NRF_SPI_FREQ_250K = (0x04000000UL),   
N    NRF_SPI_FREQ_500K = SPI_FREQUENCY_FREQUENCY_K500,   ///< 500 kbps.
X    NRF_SPI_FREQ_500K = (0x08000000UL),   
N    NRF_SPI_FREQ_1M   = SPI_FREQUENCY_FREQUENCY_M1,     ///< 1 Mbps.
X    NRF_SPI_FREQ_1M   = (0x10000000UL),     
N    NRF_SPI_FREQ_2M   = SPI_FREQUENCY_FREQUENCY_M2,     ///< 2 Mbps.
X    NRF_SPI_FREQ_2M   = (0x20000000UL),     
N    NRF_SPI_FREQ_4M   = SPI_FREQUENCY_FREQUENCY_M4,     ///< 4 Mbps.
X    NRF_SPI_FREQ_4M   = (0x40000000UL),     
N    // [conversion to 'int' needed to prevent compilers from complaining
N    //  that the provided value (0x80000000UL) is out of range of "int"]
N    NRF_SPI_FREQ_8M   = (int)SPI_FREQUENCY_FREQUENCY_M8 ///< 8 Mbps.
X    NRF_SPI_FREQ_8M   = (int)(0x80000000UL) 
N} nrf_spi_frequency_t;
N
N/**
N * @brief SPI modes.
N */
Ntypedef enum
N{
N    NRF_SPI_MODE_0, ///< SCK active high, sample on leading edge of clock.
N    NRF_SPI_MODE_1, ///< SCK active high, sample on trailing edge of clock.
N    NRF_SPI_MODE_2, ///< SCK active low, sample on leading edge of clock.
N    NRF_SPI_MODE_3  ///< SCK active low, sample on trailing edge of clock.
N} nrf_spi_mode_t;
N
N/**
N * @brief SPI bit orders.
N */
Ntypedef enum
N{
N    NRF_SPI_BIT_ORDER_MSB_FIRST = SPI_CONFIG_ORDER_MsbFirst, ///< Most significant bit shifted out first.
X    NRF_SPI_BIT_ORDER_MSB_FIRST = (0UL), 
N    NRF_SPI_BIT_ORDER_LSB_FIRST = SPI_CONFIG_ORDER_LsbFirst  ///< Least significant bit shifted out first.
X    NRF_SPI_BIT_ORDER_LSB_FIRST = (1UL)  
N} nrf_spi_bit_order_t;
N
N
N/**
N * @brief Function for clearing a specific SPI event.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] spi_event Event to clear.
N */
N__STATIC_INLINE void nrf_spi_event_clear(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_event_clear(NRF_SPI_Type * p_reg,
N                                         nrf_spi_event_t spi_event);
N
N/**
N * @brief Function for checking the state of a specific SPI event.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] spi_event Event to check.
N *
N * @retval true  If the event is set.
N * @retval false If the event is not set.
N */
N__STATIC_INLINE bool nrf_spi_event_check(NRF_SPI_Type * p_reg,
Xstatic __inline _Bool nrf_spi_event_check(NRF_SPI_Type * p_reg,
N                                         nrf_spi_event_t spi_event);
N
N/**
N * @brief Function for getting the address of a specific SPI event register.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] spi_event Requested event.
N *
N * @return Address of the specified event register.
N */
N__STATIC_INLINE uint32_t * nrf_spi_event_address_get(NRF_SPI_Type  * p_reg,
Xstatic __inline uint32_t * nrf_spi_event_address_get(NRF_SPI_Type  * p_reg,
N                                                     nrf_spi_event_t spi_event);
N
N/**
N * @brief Function for enabling specified interrupts.
N *
N * @param[in] p_reg         Pointer to the peripheral registers structure.
N * @param[in] spi_int_mask  Interrupts to enable.
N */
N__STATIC_INLINE void nrf_spi_int_enable(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_int_enable(NRF_SPI_Type * p_reg,
N                                        uint32_t spi_int_mask);
N
N/**
N * @brief Function for disabling specified interrupts.
N *
N * @param[in] p_reg         Pointer to the peripheral registers structure.
N * @param[in] spi_int_mask  Interrupts to disable.
N */
N__STATIC_INLINE void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
N                                         uint32_t spi_int_mask);
N
N/**
N * @brief Function for retrieving the state of a given interrupt.
N *
N * @param[in] p_reg   Pointer to the peripheral registers structure.
N * @param[in] spi_int Interrupt to check.
N *
N * @retval true  If the interrupt is enabled.
N * @retval false If the interrupt is not enabled.
N */
N__STATIC_INLINE bool nrf_spi_int_enable_check(NRF_SPI_Type * p_reg,
Xstatic __inline _Bool nrf_spi_int_enable_check(NRF_SPI_Type * p_reg,
N                                              nrf_spi_int_mask_t spi_int);
N
N/**
N * @brief Function for enabling the SPI peripheral.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spi_enable(NRF_SPI_Type * p_reg);
Xstatic __inline void nrf_spi_enable(NRF_SPI_Type * p_reg);
N
N/**
N * @brief Function for disabling the SPI peripheral.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spi_disable(NRF_SPI_Type * p_reg);
Xstatic __inline void nrf_spi_disable(NRF_SPI_Type * p_reg);
N
N/**
N * @brief Function for configuring SPI pins.
N *
N * If a given signal is not needed, pass the @ref NRF_SPI_PIN_NOT_CONNECTED
N * value instead of its pin number.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] sck_pin   SCK pin number.
N * @param[in] mosi_pin  MOSI pin number.
N * @param[in] miso_pin  MISO pin number.
N */
N__STATIC_INLINE void nrf_spi_pins_set(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_pins_set(NRF_SPI_Type * p_reg,
N                                      uint32_t sck_pin,
N                                      uint32_t mosi_pin,
N                                      uint32_t miso_pin);
N
N/**
N * @brief Function for writing data to the SPI transmitter register.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N * @param[in] data  TX data to send.
N */
N__STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data);
Xstatic __inline void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data);
N
N/**
N * @brief Function for reading data from the SPI receiver register.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N *
N * @return RX data received.
N */
N__STATIC_INLINE uint8_t nrf_spi_rxd_get(NRF_SPI_Type * p_reg);
Xstatic __inline uint8_t nrf_spi_rxd_get(NRF_SPI_Type * p_reg);
N
N/**
N * @brief Function for setting the SPI master data rate.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] frequency SPI frequency.
N */
N__STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_frequency_set(NRF_SPI_Type * p_reg,
N                                           nrf_spi_frequency_t frequency);
N
N/**
N * @brief Function for setting the SPI configuration.
N *
N * @param[in] p_reg         Pointer to the peripheral registers structure.
N * @param[in] spi_mode      SPI mode.
N * @param[in] spi_bit_order SPI bit order.
N */
N__STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_configure(NRF_SPI_Type * p_reg,
N                                       nrf_spi_mode_t spi_mode,
N                                       nrf_spi_bit_order_t spi_bit_order);
N
N
N#ifndef SUPPRESS_INLINE_IMPLEMENTATION
N
N__STATIC_INLINE void nrf_spi_event_clear(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_event_clear(NRF_SPI_Type * p_reg,
N                                         nrf_spi_event_t spi_event)
N{
N    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spi_event)) = 0x0UL;
N#if __CORTEX_M == 0x04
X#if (0x04U) == 0x04
N    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spi_event));
N    (void)dummy;
N#endif
N}
N
N__STATIC_INLINE bool nrf_spi_event_check(NRF_SPI_Type * p_reg,
Xstatic __inline _Bool nrf_spi_event_check(NRF_SPI_Type * p_reg,
N                                         nrf_spi_event_t spi_event)
N{
N    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spi_event);
X    return (_Bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spi_event);
N}
N
N__STATIC_INLINE uint32_t * nrf_spi_event_address_get(NRF_SPI_Type * p_reg,
Xstatic __inline uint32_t * nrf_spi_event_address_get(NRF_SPI_Type * p_reg,
N                                                     nrf_spi_event_t spi_event)
N{
N    return (uint32_t *)((uint8_t *)p_reg + (uint32_t)spi_event);
N}
N
N__STATIC_INLINE void nrf_spi_int_enable(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_int_enable(NRF_SPI_Type * p_reg,
N                                        uint32_t spi_int_mask)
N{
N    p_reg->INTENSET = spi_int_mask;
N}
N
N__STATIC_INLINE void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
N                                         uint32_t spi_int_mask)
N{
N    p_reg->INTENCLR = spi_int_mask;
N}
N
N__STATIC_INLINE bool nrf_spi_int_enable_check(NRF_SPI_Type * p_reg,
Xstatic __inline _Bool nrf_spi_int_enable_check(NRF_SPI_Type * p_reg,
N                                              nrf_spi_int_mask_t spi_int)
N{
N    return (bool)(p_reg->INTENSET & spi_int);
X    return (_Bool)(p_reg->INTENSET & spi_int);
N}
N
N__STATIC_INLINE void nrf_spi_enable(NRF_SPI_Type * p_reg)
Xstatic __inline void nrf_spi_enable(NRF_SPI_Type * p_reg)
N{
N    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
X    p_reg->ENABLE = ((1UL) << (0UL));
N}
N
N__STATIC_INLINE void nrf_spi_disable(NRF_SPI_Type * p_reg)
Xstatic __inline void nrf_spi_disable(NRF_SPI_Type * p_reg)
N{
N    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
X    p_reg->ENABLE = ((0UL) << (0UL));
N}
N
N__STATIC_INLINE void nrf_spi_pins_set(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_pins_set(NRF_SPI_Type * p_reg,
N                                      uint32_t sck_pin,
N                                      uint32_t mosi_pin,
N                                      uint32_t miso_pin)
N{
N    p_reg->PSELSCK  = sck_pin;
X    p_reg->PSEL . SCK  = sck_pin;
N    p_reg->PSELMOSI = mosi_pin;
X    p_reg->PSEL . MOSI = mosi_pin;
N    p_reg->PSELMISO = miso_pin;
X    p_reg->PSEL . MISO = miso_pin;
N}
N
N__STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
Xstatic __inline void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
N{
N    p_reg->TXD = data;
N}
N
N__STATIC_INLINE uint8_t nrf_spi_rxd_get(NRF_SPI_Type * p_reg)
Xstatic __inline uint8_t nrf_spi_rxd_get(NRF_SPI_Type * p_reg)
N{
N    return p_reg->RXD;
N}
N
N__STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_frequency_set(NRF_SPI_Type * p_reg,
N                                           nrf_spi_frequency_t frequency)
N{
N    p_reg->FREQUENCY = frequency;
N}
N
N__STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type * p_reg,
Xstatic __inline void nrf_spi_configure(NRF_SPI_Type * p_reg,
N                                       nrf_spi_mode_t spi_mode,
N                                       nrf_spi_bit_order_t spi_bit_order)
N{
N    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
N        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
X        (0UL) : (1UL));
N    switch (spi_mode)
N    {
N    default:
N    case NRF_SPI_MODE_0:
N        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
X        config |= ((0UL) << (2UL)) |
N                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
X                  ((0UL)    << (1UL));
N        break;
N
N    case NRF_SPI_MODE_1:
N        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
X        config |= ((0UL) << (2UL)) |
N                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
X                  ((1UL)   << (1UL));
N        break;
N
N    case NRF_SPI_MODE_2:
N        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
X        config |= ((1UL)  << (2UL)) |
N                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
X                  ((0UL)    << (1UL));
N        break;
N
N    case NRF_SPI_MODE_3:
N        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
X        config |= ((1UL)  << (2UL)) |
N                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
X                  ((1UL)   << (1UL));
N        break;
N    }
N    p_reg->CONFIG = config;
N}
N
N#endif // SUPPRESS_INLINE_IMPLEMENTATION
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NRF_SPI_H__
N
N/** @} */
L 27 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N#ifdef SPIM_PRESENT
N#include "nrf_spim.h"
L 1 "..\..\..\..\..\..\components\drivers_nrf\hal\nrf_spim.h" 1
N/* Copyright (c) 2015 Nordic Semiconductor. All Rights Reserved.
N *
N * The information contained herein is property of Nordic Semiconductor ASA.
N * Terms and conditions of usage are described in detail in NORDIC
N * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
N *
N * Licensees are granted free, non-transferable use of the information. NO
N * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
N * the file.
N *
N */
N
N/**
N * @defgroup nrf_spim_hal SPIM HAL
N * @{
N * @ingroup nrf_spi
N *
N * @brief Hardware access layer for accessing the SPIM peripheral.
N */
N
N#ifndef NRF_SPIM_H__
N#define NRF_SPIM_H__
N
N#include <stddef.h>
N#include <stdbool.h>
N#include <stdint.h>
N
N#include "nrf.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/**
N * @brief This value can be used as a parameter for the @ref nrf_spim_pins_set
N *        function to specify that a given SPI signal (SCK, MOSI, or MISO)
N *        shall not be connected to a physical pin.
N */
N#define NRF_SPIM_PIN_NOT_CONNECTED  0xFFFFFFFF
N
N
N/**
N * @brief SPIM tasks.
N */
Ntypedef enum
N{
N    /*lint -save -e30*/
N    NRF_SPIM_TASK_START   = offsetof(NRF_SPIM_Type, TASKS_START),   ///< Start SPI transaction.
X    NRF_SPIM_TASK_START   = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->TASKS_START))),   
N    NRF_SPIM_TASK_STOP    = offsetof(NRF_SPIM_Type, TASKS_STOP),    ///< Stop SPI transaction.
X    NRF_SPIM_TASK_STOP    = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->TASKS_STOP))),    
N    NRF_SPIM_TASK_SUSPEND = offsetof(NRF_SPIM_Type, TASKS_SUSPEND), ///< Suspend SPI transaction.
X    NRF_SPIM_TASK_SUSPEND = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->TASKS_SUSPEND))), 
N    NRF_SPIM_TASK_RESUME  = offsetof(NRF_SPIM_Type, TASKS_RESUME)   ///< Resume SPI transaction.
X    NRF_SPIM_TASK_RESUME  = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->TASKS_RESUME)))   
N    /*lint -restore*/
N} nrf_spim_task_t;
N
N/**
N * @brief SPIM events.
N */
Ntypedef enum
N{
N    /*lint -save -e30*/
N    NRF_SPIM_EVENT_STOPPED = offsetof(NRF_SPIM_Type, EVENTS_STOPPED), ///< SPI transaction has stopped.
X    NRF_SPIM_EVENT_STOPPED = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->EVENTS_STOPPED))), 
N    NRF_SPIM_EVENT_ENDRX   = offsetof(NRF_SPIM_Type, EVENTS_ENDRX),   ///< End of RXD buffer reached.
X    NRF_SPIM_EVENT_ENDRX   = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->EVENTS_ENDRX))),   
N    NRF_SPIM_EVENT_END     = offsetof(NRF_SPIM_Type, EVENTS_END),     ///< End of RXD buffer and TXD buffer reached.
X    NRF_SPIM_EVENT_END     = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->EVENTS_END))),     
N    NRF_SPIM_EVENT_ENDTX   = offsetof(NRF_SPIM_Type, EVENTS_ENDTX),   ///< End of TXD buffer reached.
X    NRF_SPIM_EVENT_ENDTX   = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->EVENTS_ENDTX))),   
N    NRF_SPIM_EVENT_STARTED = offsetof(NRF_SPIM_Type, EVENTS_STARTED)  ///< Transaction started.
X    NRF_SPIM_EVENT_STARTED = (( size_t)__INTADDR__(&(((NRF_SPIM_Type *)0)->EVENTS_STARTED)))  
N    /*lint -restore*/
N} nrf_spim_event_t;
N
N/**
N * @brief SPIM shortcuts.
N */
Ntypedef enum
N{
N    NRF_SPIM_SHORT_END_START_MASK = SPIM_SHORTS_END_START_Msk ///< Shortcut between END event and START task.
X    NRF_SPIM_SHORT_END_START_MASK = (0x1UL << (17UL)) 
N} nrf_spim_short_mask_t;
N
N/**
N * @brief SPIM interrupts.
N */
Ntypedef enum
N{
N    NRF_SPIM_INT_STOPPED_MASK = SPIM_INTENSET_STOPPED_Msk, ///< Interrupt on STOPPED event.
X    NRF_SPIM_INT_STOPPED_MASK = (0x1UL << (1UL)), 
N    NRF_SPIM_INT_ENDRX_MASK   = SPIM_INTENSET_ENDRX_Msk,   ///< Interrupt on ENDRX event.
X    NRF_SPIM_INT_ENDRX_MASK   = (0x1UL << (4UL)),   
N    NRF_SPIM_INT_END_MASK     = SPIM_INTENSET_END_Msk,     ///< Interrupt on END event.
X    NRF_SPIM_INT_END_MASK     = (0x1UL << (6UL)),     
N    NRF_SPIM_INT_ENDTX_MASK   = SPIM_INTENSET_ENDTX_Msk,   ///< Interrupt on ENDTX event.
X    NRF_SPIM_INT_ENDTX_MASK   = (0x1UL << (8UL)),   
N    NRF_SPIM_INT_STARTED_MASK = SPIM_INTENSET_STARTED_Msk  ///< Interrupt on STARTED event.
X    NRF_SPIM_INT_STARTED_MASK = (0x1UL << (19UL))  
N} nrf_spim_int_mask_t;
N
N/**
N * @brief SPI master data rates.
N */
Ntypedef enum
N{
N    NRF_SPIM_FREQ_125K = SPIM_FREQUENCY_FREQUENCY_K125,   ///< 125 kbps.
X    NRF_SPIM_FREQ_125K = (0x02000000UL),   
N    NRF_SPIM_FREQ_250K = SPIM_FREQUENCY_FREQUENCY_K250,   ///< 250 kbps.
X    NRF_SPIM_FREQ_250K = (0x04000000UL),   
N    NRF_SPIM_FREQ_500K = SPIM_FREQUENCY_FREQUENCY_K500,   ///< 500 kbps.
X    NRF_SPIM_FREQ_500K = (0x08000000UL),   
N    NRF_SPIM_FREQ_1M   = SPIM_FREQUENCY_FREQUENCY_M1,     ///< 1 Mbps.
X    NRF_SPIM_FREQ_1M   = (0x10000000UL),     
N    NRF_SPIM_FREQ_2M   = SPIM_FREQUENCY_FREQUENCY_M2,     ///< 2 Mbps.
X    NRF_SPIM_FREQ_2M   = (0x20000000UL),     
N    NRF_SPIM_FREQ_4M   = SPIM_FREQUENCY_FREQUENCY_M4,     ///< 4 Mbps.
X    NRF_SPIM_FREQ_4M   = (0x40000000UL),     
N    // [conversion to 'int' needed to prevent compilers from complaining
N    //  that the provided value (0x80000000UL) is out of range of "int"]
N    NRF_SPIM_FREQ_8M   = (int)SPIM_FREQUENCY_FREQUENCY_M8 ///< 8 Mbps.
X    NRF_SPIM_FREQ_8M   = (int)(0x80000000UL) 
N} nrf_spim_frequency_t;
N
N/**
N * @brief SPI modes.
N */
Ntypedef enum
N{
N    NRF_SPIM_MODE_0, ///< SCK active high, sample on leading edge of clock.
N    NRF_SPIM_MODE_1, ///< SCK active high, sample on trailing edge of clock.
N    NRF_SPIM_MODE_2, ///< SCK active low, sample on leading edge of clock.
N    NRF_SPIM_MODE_3  ///< SCK active low, sample on trailing edge of clock.
N} nrf_spim_mode_t;
N
N/**
N * @brief SPI bit orders.
N */
Ntypedef enum
N{
N    NRF_SPIM_BIT_ORDER_MSB_FIRST = SPIM_CONFIG_ORDER_MsbFirst, ///< Most significant bit shifted out first.
X    NRF_SPIM_BIT_ORDER_MSB_FIRST = (0UL), 
N    NRF_SPIM_BIT_ORDER_LSB_FIRST = SPIM_CONFIG_ORDER_LsbFirst  ///< Least significant bit shifted out first.
X    NRF_SPIM_BIT_ORDER_LSB_FIRST = (1UL)  
N} nrf_spim_bit_order_t;
N
N
N/**
N * @brief Function for activating a specific SPIM task.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] spim_task Task to activate.
N */
N__STATIC_INLINE void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
N                                           nrf_spim_task_t spim_task);
N
N/**
N * @brief Function for getting the address of a specific SPIM task register.
N *
N * @param[in] p_reg     Pointer to the peripheral registers structure.
N * @param[in] spim_task Requested task.
N *
N * @return Address of the specified task register.
N */
N__STATIC_INLINE uint32_t nrf_spim_task_address_get(NRF_SPIM_Type * p_reg,
Xstatic __inline uint32_t nrf_spim_task_address_get(NRF_SPIM_Type * p_reg,
N                                                   nrf_spim_task_t spim_task);
N
N/**
N * @brief Function for clearing a specific SPIM event.
N *
N * @param[in] p_reg      Pointer to the peripheral registers structure.
N * @param[in] spim_event Event to clear.
N */
N__STATIC_INLINE void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
N                                          nrf_spim_event_t spim_event);
N
N/**
N * @brief Function for checking the state of a specific SPIM event.
N *
N * @param[in] p_reg      Pointer to the peripheral registers structure.
N * @param[in] spim_event Event to check.
N *
N * @retval true  If the event is set.
N * @retval false If the event is not set.
N */
N__STATIC_INLINE bool nrf_spim_event_check(NRF_SPIM_Type * p_reg,
Xstatic __inline _Bool nrf_spim_event_check(NRF_SPIM_Type * p_reg,
N                                          nrf_spim_event_t spim_event);
N
N/**
N * @brief Function for getting the address of a specific SPIM event register.
N *
N * @param[in] p_reg      Pointer to the peripheral registers structure.
N * @param[in] spim_event Requested event.
N *
N * @return Address of the specified event register.
N */
N__STATIC_INLINE uint32_t nrf_spim_event_address_get(NRF_SPIM_Type  * p_reg,
Xstatic __inline uint32_t nrf_spim_event_address_get(NRF_SPIM_Type  * p_reg,
N                                                    nrf_spim_event_t spim_event);
N/**
N * @brief Function for enabling specified shortcuts.
N *
N * @param[in] p_reg            Pointer to the peripheral registers structure.
N * @param[in] spim_shorts_mask Shortcuts to enable.
N */
N__STATIC_INLINE void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
N                                            uint32_t spim_shorts_mask);
N
N/**
N * @brief Function for disabling specified shortcuts.
N *
N * @param[in] p_reg            Pointer to the peripheral registers structure.
N * @param[in] spim_shorts_mask Shortcuts to disable.
N */
N__STATIC_INLINE void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
N                                             uint32_t spim_shorts_mask);
N
N/**
N * @brief Function for getting shorts setting.
N *
N * @param[in] p_reg           Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE uint32_t nrf_spim_shorts_get(NRF_SPIM_Type * p_reg);
Xstatic __inline uint32_t nrf_spim_shorts_get(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for enabling specified interrupts.
N *
N * @param[in] p_reg        Pointer to the peripheral registers structure.
N * @param[in] spim_int_mask Interrupts to enable.
N */
N__STATIC_INLINE void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
N                                         uint32_t spim_int_mask);
N
N/**
N * @brief Function for disabling specified interrupts.
N *
N * @param[in] p_reg        Pointer to the peripheral registers structure.
N * @param[in] spim_int_mask Interrupts to disable.
N */
N__STATIC_INLINE void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
N                                          uint32_t spim_int_mask);
N
N/**
N * @brief Function for retrieving the state of a given interrupt.
N *
N * @param[in] p_reg   Pointer to the peripheral registers structure.
N * @param[in] spim_int Interrupt to check.
N *
N * @retval true  If the interrupt is enabled.
N * @retval false If the interrupt is not enabled.
N */
N__STATIC_INLINE bool nrf_spim_int_enable_check(NRF_SPIM_Type * p_reg,
Xstatic __inline _Bool nrf_spim_int_enable_check(NRF_SPIM_Type * p_reg,
N                                               nrf_spim_int_mask_t spim_int);
N
N/**
N * @brief Function for enabling the SPIM peripheral.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_enable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_enable(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for disabling the SPIM peripheral.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_disable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_disable(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for configuring SPIM pins.
N *
N * If a given signal is not needed, pass the @ref NRF_SPIM_PIN_NOT_CONNECTED
N * value instead of its pin number.
N *
N * @param[in] p_reg    Pointer to the peripheral registers structure.
N * @param[in] sck_pin   SCK pin number.
N * @param[in] mosi_pin  MOSI pin number.
N * @param[in] miso_pin  MISO pin number.
N */
N__STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
N                                       uint32_t sck_pin,
N                                       uint32_t mosi_pin,
N                                       uint32_t miso_pin);
N
N/**
N * @brief Function for setting the SPI master data rate.
N *
N * @param[in] p_reg    Pointer to the peripheral registers structure.
N * @param[in] frequency SPI frequency.
N */
N__STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
N                                            nrf_spim_frequency_t frequency);
N
N/**
N * @brief Function for setting the transmit buffer.
N *
N * @param[in]  p_reg   Pointer to the peripheral registers structure.
N * @param[in]  p_buffer Pointer to the buffer with data to send.
N * @param[in]  length   Maximum number of data bytes to transmit.
N */
N__STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
N                                            uint8_t const * p_buffer,
N                                            uint8_t         length);
N
N/**
N * @brief Function for setting the receive buffer.
N *
N * @param[in] p_reg   Pointer to the peripheral registers structure.
N * @param[in] p_buffer Pointer to the buffer for received data.
N * @param[in] length   Maximum number of data bytes to receive.
N */
N__STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
N                                            uint8_t * p_buffer,
N                                            uint8_t   length);
N
N/**
N * @brief Function for setting the SPI configuration.
N *
N * @param[in] p_reg        Pointer to the peripheral registers structure.
N * @param[in] spi_mode      SPI mode.
N * @param[in] spi_bit_order SPI bit order.
N */
N__STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_configure(NRF_SPIM_Type * p_reg,
N                                        nrf_spim_mode_t spi_mode,
N                                        nrf_spim_bit_order_t spi_bit_order);
N
N/**
N * @brief Function for setting the over-read character.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N * @param[in] orc    Over-read character that is clocked out in case of
N *                   an over-read of the TXD buffer.
N */
N__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
N                                      uint8_t orc);
N
N/**
N * @brief Function for enabling the TX list feature.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for disabling the TX list feature.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for enabling the RX list feature.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg);
N
N/**
N * @brief Function for disabling the RX list feature.
N *
N * @param[in] p_reg Pointer to the peripheral registers structure.
N */
N__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg);
Xstatic __inline void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg);
N
N#ifndef SUPPRESS_INLINE_IMPLEMENTATION
N
N__STATIC_INLINE void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_task_trigger(NRF_SPIM_Type * p_reg,
N                                           nrf_spim_task_t spim_task)
N{
N    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_task)) = 0x1UL;
N}
N
N__STATIC_INLINE uint32_t nrf_spim_task_address_get(NRF_SPIM_Type * p_reg,
Xstatic __inline uint32_t nrf_spim_task_address_get(NRF_SPIM_Type * p_reg,
N                                                   nrf_spim_task_t spim_task)
N{
N    return (uint32_t)((uint8_t *)p_reg + (uint32_t)spim_task);
N}
N
N__STATIC_INLINE void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_event_clear(NRF_SPIM_Type * p_reg,
N                                          nrf_spim_event_t spim_event)
N{
N    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event)) = 0x0UL;
N#if __CORTEX_M == 0x04
X#if (0x04U) == 0x04
N    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event));
N    (void)dummy;
N#endif
N}
N
N__STATIC_INLINE bool nrf_spim_event_check(NRF_SPIM_Type * p_reg,
Xstatic __inline _Bool nrf_spim_event_check(NRF_SPIM_Type * p_reg,
N                                          nrf_spim_event_t spim_event)
N{
N    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event);
X    return (_Bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event);
N}
N
N__STATIC_INLINE uint32_t nrf_spim_event_address_get(NRF_SPIM_Type * p_reg,
Xstatic __inline uint32_t nrf_spim_event_address_get(NRF_SPIM_Type * p_reg,
N                                                    nrf_spim_event_t spim_event)
N{
N    return (uint32_t)((uint8_t *)p_reg + (uint32_t)spim_event);
N}
N
N__STATIC_INLINE void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_shorts_enable(NRF_SPIM_Type * p_reg,
N                                            uint32_t spim_shorts_mask)
N{
N    p_reg->SHORTS |= spim_shorts_mask;
N}
N
N__STATIC_INLINE void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_shorts_disable(NRF_SPIM_Type * p_reg,
N                                             uint32_t spim_shorts_mask)
N{
N    p_reg->SHORTS &= ~(spim_shorts_mask);
N}
N
N__STATIC_INLINE uint32_t nrf_spim_shorts_get(NRF_SPIM_Type * p_reg)
Xstatic __inline uint32_t nrf_spim_shorts_get(NRF_SPIM_Type * p_reg)
N{
N    return p_reg->SHORTS;
N}
N
N__STATIC_INLINE void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_int_enable(NRF_SPIM_Type * p_reg,
N                                         uint32_t spim_int_mask)
N{
N    p_reg->INTENSET = spim_int_mask;
N}
N
N__STATIC_INLINE void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_int_disable(NRF_SPIM_Type * p_reg,
N                                          uint32_t spim_int_mask)
N{
N    p_reg->INTENCLR = spim_int_mask;
N}
N
N__STATIC_INLINE bool nrf_spim_int_enable_check(NRF_SPIM_Type * p_reg,
Xstatic __inline _Bool nrf_spim_int_enable_check(NRF_SPIM_Type * p_reg,
N                                               nrf_spim_int_mask_t spim_int)
N{
N    return (bool)(p_reg->INTENSET & spim_int);
X    return (_Bool)(p_reg->INTENSET & spim_int);
N}
N
N__STATIC_INLINE void nrf_spim_enable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_enable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
X    p_reg->ENABLE = ((7UL) << (0UL));
N}
N
N__STATIC_INLINE void nrf_spim_disable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_disable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
X    p_reg->ENABLE = ((0UL) << (0UL));
N}
N
N__STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
N                                       uint32_t sck_pin,
N                                       uint32_t mosi_pin,
N                                       uint32_t miso_pin)
N{
N    p_reg->PSEL.SCK  = sck_pin;
N    p_reg->PSEL.MOSI = mosi_pin;
N    p_reg->PSEL.MISO = miso_pin;
N}
N
N__STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
N                                            nrf_spim_frequency_t frequency)
N{
N    p_reg->FREQUENCY = frequency;
N}
N
N__STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
N                                            uint8_t const * p_buffer,
N                                            uint8_t         length)
N{
N    p_reg->TXD.PTR    = (uint32_t)p_buffer;
N    p_reg->TXD.MAXCNT = length;
N}
N
N__STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
N                                            uint8_t * p_buffer,
N                                            uint8_t   length)
N{
N    p_reg->RXD.PTR    = (uint32_t)p_buffer;
N    p_reg->RXD.MAXCNT = length;
N}
N
N__STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_configure(NRF_SPIM_Type * p_reg,
N                                        nrf_spim_mode_t spi_mode,
N                                        nrf_spim_bit_order_t spi_bit_order)
N{
N    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
N        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
X        (0UL) : (1UL));
N    switch (spi_mode)
N    {
N    default:
N    case NRF_SPIM_MODE_0:
N        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
X        config |= ((0UL) << (2UL)) |
N                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
X                  ((0UL)    << (1UL));
N        break;
N
N    case NRF_SPIM_MODE_1:
N        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
X        config |= ((0UL) << (2UL)) |
N                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
X                  ((1UL)   << (1UL));
N        break;
N
N    case NRF_SPIM_MODE_2:
N        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
X        config |= ((1UL)  << (2UL)) |
N                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
X                  ((0UL)    << (1UL));
N        break;
N
N    case NRF_SPIM_MODE_3:
N        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
X        config |= ((1UL)  << (2UL)) |
N                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
X                  ((1UL)   << (1UL));
N        break;
N    }
N    p_reg->CONFIG = config;
N}
N
N__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
Xstatic __inline void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
N                                      uint8_t orc)
N{
N    p_reg->ORC = orc;
N}
N
N
N__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->TXD.LIST = 1;
N}
N
N__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->TXD.LIST = 0;
N}
N
N__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->RXD.LIST = 1;
N}
N
N__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
Xstatic __inline void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
N{
N    p_reg->RXD.LIST = 0;
N}
N
N#endif // SUPPRESS_INLINE_IMPLEMENTATION
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NRF_SPIM_H__
N
N/** @} */
L 29 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N#endif
N#include "sdk_errors.h"
L 1 "..\..\..\..\..\..\components\libraries\util\sdk_errors.h" 1
N/* Copyright (c) 2013 Nordic Semiconductor. All Rights Reserved.
N *
N * The information contained herein is property of Nordic Semiconductor ASA.
N * Terms and conditions of usage are described in detail in NORDIC
N * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
N *
N * Licensees are granted free, non-transferable use of the information. NO
N * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
N * the file.
N *
N */
N
N/**@file
N *
N * @defgroup sdk_error SDK Error codes
N * @{
N * @ingroup app_common
N * @{
N * @details Error codes are 32-bit unsigned integers with the most significant 16-bit reserved for
N *          identifying the module where the error occurred while the least least significant LSB
N *          are used to provide the cause or nature of error. Each module is assigned a 16-bit
N *          unsigned integer. Which it will use to identify all errors that occurred in it. 16-bit
N *          LSB range is with module id as the MSB in the 32-bit error code is reserved for the
N *          module. As an example, if 0x8800 identifies a certain SDK module, all values from
N *          0x88000000 - 0x8800FFFF are reserved for this module.
N *          It should be noted that common error reasons have been assigned values to make it
N *          possible to decode error reason easily. As an example, lets module uninitialized has
N *          been assigned an error code 0x000A0. Then, if application encounters an error code
N *          0xZZZZ00A0, it knows that it accessing a certain module without initializing it.
N *          Apart from this, each module is allowed to define error codes that are not covered by
N *          the common ones, however, these values are defined in a range that does not conflict
N *          with common error values. For module, specific error however, it is possible that the
N *          same error value is used by two different modules to indicated errors of very different
N *          nature. If error is already defined by the NRF common error codes, these are reused.
N *          A range is reserved for application as well, it can use this range for defining
N *          application specific errors.
N *
N * @note Success code, NRF_SUCCESS, does not include any module identifier.
N
N */
N
N#ifndef SDK_ERRORS_H__
N#define SDK_ERRORS_H__
N
N#include <stdint.h>
N#include "nrf_error.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/**
N * @defgroup sdk_err_base Base defined for SDK Modules
N * @{
N */
N#define SDK_ERROR_BASE         (NRF_ERROR_BASE_NUM + 0x8000)   /**< Base value defined for SDK module identifiers. */
N#define SDK_COMMON_ERROR_BASE  (NRF_ERROR_BASE_NUM + 0x0080)   /**< Base error value to be used for SDK error values. */
N/* @} */
N
N/**
N * @defgroup sdk_module_codes Codes reserved as identification for module where the error occurred.
N * @{
N */
N#define MEMORY_MANAGER_ERR_BASE   (0x8100)
N#define PERIPH_DRIVERS_ERR_BASE   (0x8200)
N#define GAZELLE_ERR_BASE          (0x8300)
N/* @} */
N
N
N/**
N * @defgroup sdk_iot_errors Codes reserved as identification for IoT errors.
N * @{
N */
N#define IOT_ERR_BASE_START        (0xA000)
N#define IOT_ERR_BASE_STOP         (0xAFFF)
N/* @} */
N
N
N/**
N * @defgroup sdk_common_errors Codes reserved as identification for common errors.
N * @{
N */
N#define MODULE_NOT_INITIALZED      (SDK_COMMON_ERROR_BASE + 0x0000)
N#define MUTEX_INIT_FAILED          (SDK_COMMON_ERROR_BASE + 0x0001)
N#define MUTEX_LOCK_FAILED          (SDK_COMMON_ERROR_BASE + 0x0002)
N#define MUTEX_UNLOCK_FAILED        (SDK_COMMON_ERROR_BASE + 0x0003)
N#define MUTEX_COND_INIT_FAILED     (SDK_COMMON_ERROR_BASE + 0x0004)
N#define MODULE_ALREADY_INITIALIZED (SDK_COMMON_ERROR_BASE + 0x0005)
N#define API_NOT_IMPLEMENTED        (SDK_COMMON_ERROR_BASE + 0x0010)
N#define FEATURE_NOT_ENABLED        (SDK_COMMON_ERROR_BASE + 0x0011)
N/* @} */
N
N
N/**
N * @defgroup drv_specific_errors Error / status codes specific to drivers.
N * @{
N */
N#define DRV_TWI_ERR_OVERRUN              (PERIPH_DRIVERS_ERR_BASE + 0x0000)
N#define DRV_TWI_ERR_ANACK                (PERIPH_DRIVERS_ERR_BASE + 0x0001)
N#define DRV_TWI_ERR_DNACK                (PERIPH_DRIVERS_ERR_BASE + 0x0002)
N/* @} */
N
N/**
N * @brief API Result.
N *
N * @details Indicates success or failure of an API procedure. In case of failure, a comprehensive
N *          error code indicating cause or reason for failure is provided.
N *
N *          Though called an API result, it could used in Asynchronous notifications callback along
N *          with asynchronous callback as event result. This mechanism is employed when an event
N *          marks the end of procedure initiated using API. API result, in this case, will only be
N *          an indicative of whether the procedure has been requested successfully.
N */
Ntypedef uint32_t ret_code_t;
N/** @} */
N/** @} */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // SDK_ERRORS_H__
N
L 31 "..\..\..\..\..\..\components\drivers_nrf\spi_master\nrf_drv_spi.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if defined(SPIM_PRESENT)
X#if 1L
N    #define NRF_DRV_SPI_PERIPHERAL(id)           \
N        (CONCAT_3(SPI, id, _USE_EASY_DMA) == 1 ? \
N            (void *)CONCAT_2(NRF_SPIM, id)       \
N          : (void *)CONCAT_2(NRF_SPI, id))
X    #define NRF_DRV_SPI_PERIPHERAL(id)                   (CONCAT_3(SPI, id, _USE_EASY_DMA) == 1 ?             (void *)CONCAT_2(NRF_SPIM, id)                 : (void *)CONCAT_2(NRF_SPI, id))
N    #define SPI2_IRQ            SPIM2_SPIS2_SPI2_IRQn
N    #define SPI2_IRQ_HANDLER    SPIM2_SPIS2_SPI2_IRQHandler
N#else
S    #define NRF_DRV_SPI_PERIPHERAL(id)  (void *)CONCAT_2(NRF_SPI, id)
N#endif
N#define SPI0_IRQ            SPI0_TWI0_IRQn
N#define SPI0_IRQ_HANDLER    SPI0_TWI0_IRQHandler
N#define SPI1_IRQ            SPI1_TWI1_IRQn
N#define SPI1_IRQ_HANDLER    SPI1_TWI1_IRQHandler
N
N
N/**
N * @defgroup nrf_drv_spi SPI master driver
N * @{
N * @ingroup  nrf_spi
N *
N * @brief    Multi-instance SPI master driver.
N */
N
N/**
N * @brief SPI master driver instance data structure.
N */
Ntypedef struct
N{
N    void *    p_registers;  ///< Pointer to the structure with SPI/SPIM peripheral instance registers.
N    IRQn_Type irq;          ///< SPI/SPIM peripheral instance IRQ number.
N    uint8_t   drv_inst_idx; ///< Driver instance index.
N    bool      use_easy_dma; ///< True if the peripheral with EasyDMA (SPIM) shall be used.
X    _Bool      use_easy_dma; 
N} nrf_drv_spi_t;
N
N#define SPI0_INSTANCE_INDEX 0
N#define SPI1_INSTANCE_INDEX SPI0_INSTANCE_INDEX+SPI0_ENABLED
N#define SPI2_INSTANCE_INDEX SPI1_INSTANCE_INDEX+SPI1_ENABLED
N
N/**
N * @brief Macro for creating an SPI master driver instance.
N */
N#define NRF_DRV_SPI_INSTANCE(id)                        \
N{                                                       \
N    .p_registers  = NRF_DRV_SPI_PERIPHERAL(id),         \
N    .irq          = CONCAT_3(SPI, id, _IRQ),            \
N    .drv_inst_idx = CONCAT_3(SPI, id, _INSTANCE_INDEX), \
N    .use_easy_dma = CONCAT_3(SPI, id, _USE_EASY_DMA)    \
N}
X#define NRF_DRV_SPI_INSTANCE(id)                        {                                                           .p_registers  = NRF_DRV_SPI_PERIPHERAL(id),             .irq          = CONCAT_3(SPI, id, _IRQ),                .drv_inst_idx = CONCAT_3(SPI, id, _INSTANCE_INDEX),     .use_easy_dma = CONCAT_3(SPI, id, _USE_EASY_DMA)    }
N
N/**
N * @brief This value can be provided instead of a pin number for signals MOSI,
N *        MISO, and Slave Select to specify that the given signal is not used and
N *        therefore does not need to be connected to a pin.
N */
N#define NRF_DRV_SPI_PIN_NOT_USED  0xFF
N
N/**
N * @brief SPI data rates.
N */
Ntypedef enum
N{
N    NRF_DRV_SPI_FREQ_125K = NRF_SPI_FREQ_125K, ///< 125 kbps.
N    NRF_DRV_SPI_FREQ_250K = NRF_SPI_FREQ_250K, ///< 250 kbps.
N    NRF_DRV_SPI_FREQ_500K = NRF_SPI_FREQ_500K, ///< 500 kbps.
N    NRF_DRV_SPI_FREQ_1M   = NRF_SPI_FREQ_1M,   ///< 1 Mbps.
N    NRF_DRV_SPI_FREQ_2M   = NRF_SPI_FREQ_2M,   ///< 2 Mbps.
N    NRF_DRV_SPI_FREQ_4M   = NRF_SPI_FREQ_4M,   ///< 4 Mbps.
N    NRF_DRV_SPI_FREQ_8M   = NRF_SPI_FREQ_8M    ///< 8 Mbps.
N} nrf_drv_spi_frequency_t;
N
N/**
N * @brief SPI modes.
N */
Ntypedef enum
N{
N    NRF_DRV_SPI_MODE_0 = NRF_SPI_MODE_0, ///< SCK active high, sample on leading edge of clock.
N    NRF_DRV_SPI_MODE_1 = NRF_SPI_MODE_1, ///< SCK active high, sample on trailing edge of clock.
N    NRF_DRV_SPI_MODE_2 = NRF_SPI_MODE_2, ///< SCK active low, sample on leading edge of clock.
N    NRF_DRV_SPI_MODE_3 = NRF_SPI_MODE_3  ///< SCK active low, sample on trailing edge of clock.
N} nrf_drv_spi_mode_t;
N
N/**
N * @brief SPI bit orders.
N */
Ntypedef enum
N{
N    NRF_DRV_SPI_BIT_ORDER_MSB_FIRST = NRF_SPI_BIT_ORDER_MSB_FIRST, ///< Most significant bit shifted out first.
N    NRF_DRV_SPI_BIT_ORDER_LSB_FIRST = NRF_SPI_BIT_ORDER_LSB_FIRST  ///< Least significant bit shifted out first.
N} nrf_drv_spi_bit_order_t;
N
N/**
N * @brief SPI master driver instance configuration structure.
N */
Ntypedef struct
N{
N    uint8_t sck_pin;      ///< SCK pin number.
N    uint8_t mosi_pin;     ///< MOSI pin number (optional).
N                          /**< Set to @ref NRF_DRV_SPI_PIN_NOT_USED
N                           *   if this signal is not needed. */
N    uint8_t miso_pin;     ///< MISO pin number (optional).
N                          /**< Set to @ref NRF_DRV_SPI_PIN_NOT_USED
N                           *   if this signal is not needed. */
N    uint8_t ss_pin;       ///< Slave Select pin number (optional).
N                          /**< Set to @ref NRF_DRV_SPI_PIN_NOT_USED
N                           *   if this signal is not needed. The driver
N                           *   supports only active low for this signal.
N                           *   If the signal should be active high,
N                           *   it must be controlled externally. */
N    uint8_t irq_priority; ///< Interrupt priority.
N    uint8_t orc;          ///< Over-run character.
N                          /**< This character is used when all bytes from the TX buffer are sent,
N                               but the transfer continues due to RX. */
N    nrf_drv_spi_frequency_t frequency; ///< SPI frequency.
N    nrf_drv_spi_mode_t      mode;      ///< SPI mode.
N    nrf_drv_spi_bit_order_t bit_order; ///< SPI bit order.
N} nrf_drv_spi_config_t;
N
N/**
N * @brief SPI master instance default configuration.
N */
N#define NRF_DRV_SPI_DEFAULT_CONFIG                           \
N{                                                            \
N    .sck_pin      = NRF_DRV_SPI_PIN_NOT_USED,                \
N    .mosi_pin     = NRF_DRV_SPI_PIN_NOT_USED,                \
N    .miso_pin     = NRF_DRV_SPI_PIN_NOT_USED,                \
N    .ss_pin       = NRF_DRV_SPI_PIN_NOT_USED,                \
N    .irq_priority = SPI_DEFAULT_CONFIG_IRQ_PRIORITY,         \
N    .orc          = 0xFF,                                    \
N    .frequency    = NRF_DRV_SPI_FREQ_4M,                     \
N    .mode         = NRF_DRV_SPI_MODE_0,                      \
N    .bit_order    = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST,         \
N}
X#define NRF_DRV_SPI_DEFAULT_CONFIG                           {                                                                .sck_pin      = NRF_DRV_SPI_PIN_NOT_USED,                    .mosi_pin     = NRF_DRV_SPI_PIN_NOT_USED,                    .miso_pin     = NRF_DRV_SPI_PIN_NOT_USED,                    .ss_pin       = NRF_DRV_SPI_PIN_NOT_USED,                    .irq_priority = SPI_DEFAULT_CONFIG_IRQ_PRIORITY,             .orc          = 0xFF,                                        .frequency    = NRF_DRV_SPI_FREQ_4M,                         .mode         = NRF_DRV_SPI_MODE_0,                          .bit_order    = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST,         }
N
N#define NRF_DRV_SPI_FLAG_TX_POSTINC          (1UL << 0) /**< TX buffer address incremented after transfer. */
N#define NRF_DRV_SPI_FLAG_RX_POSTINC          (1UL << 1) /**< RX buffer address incremented after transfer. */
N#define NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER (1UL << 2) /**< Interrupt after each transfer is suppressed, and the event handler is not called. */
N#define NRF_DRV_SPI_FLAG_HOLD_XFER           (1UL << 3) /**< Set up the transfer but do not start it. */
N#define NRF_DRV_SPI_FLAG_REPEATED_XFER       (1UL << 4) /**< Flag indicating that the transfer will be executed multiple times. */
N
N/**
N * @brief Single transfer descriptor structure.
N */
Ntypedef struct
N{
N    uint8_t const * p_tx_buffer; ///< Pointer to TX buffer.
N    uint8_t         tx_length;   ///< TX buffer length.
N    uint8_t       * p_rx_buffer; ///< Pointer to RX buffer.
N    uint8_t         rx_length;   ///< RX buffer length.
N}nrf_drv_spi_xfer_desc_t;
N
N
N/**
N * @brief Macro for setting up single transfer descriptor.
N *
N * This macro is for internal use only.
N */
N#define NRF_DRV_SPI_SINGLE_XFER(p_tx, tx_len, p_rx, rx_len)  \
N    {                                                        \
N    .p_tx_buffer = (uint8_t const *)(p_tx),                  \
N    .tx_length = (tx_len),                                   \
N    .p_rx_buffer = (p_rx),                                   \
N    .rx_length = (rx_len),                                   \
N    }
X#define NRF_DRV_SPI_SINGLE_XFER(p_tx, tx_len, p_rx, rx_len)      {                                                            .p_tx_buffer = (uint8_t const *)(p_tx),                      .tx_length = (tx_len),                                       .p_rx_buffer = (p_rx),                                       .rx_length = (rx_len),                                       }
N
N/**
N * @brief Macro for setting duplex TX RX transfer.
N */
N#define NRF_DRV_SPI_XFER_TRX(p_tx_buf, tx_length, p_rx_buf, rx_length)                    \
N        NRF_DRV_SPI_SINGLE_XFER(p_tx_buf, tx_length, p_rx_buf, rx_length)
X#define NRF_DRV_SPI_XFER_TRX(p_tx_buf, tx_length, p_rx_buf, rx_length)                            NRF_DRV_SPI_SINGLE_XFER(p_tx_buf, tx_length, p_rx_buf, rx_length)
N
N/**
N * @brief Macro for setting TX transfer.
N */
N#define NRF_DRV_SPI_XFER_TX(p_buf, length) \
N        NRF_DRV_SPI_SINGLE_XFER(p_buf, length, NULL, 0)
X#define NRF_DRV_SPI_XFER_TX(p_buf, length)         NRF_DRV_SPI_SINGLE_XFER(p_buf, length, NULL, 0)
N
N/**
N * @brief Macro for setting RX transfer.
N */
N#define NRF_DRV_SPI_XFER_RX(p_buf, length) \
N        NRF_DRV_SPI_SINGLE_XFER(NULL, 0, p_buf, length)
X#define NRF_DRV_SPI_XFER_RX(p_buf, length)         NRF_DRV_SPI_SINGLE_XFER(NULL, 0, p_buf, length)
N
N/**
N * @brief SPI master driver event types, passed to the handler routine provided
N *        during initialization.
N */
Ntypedef enum
N{
N    NRF_DRV_SPI_EVENT_DONE, ///< Transfer done.
N} nrf_drv_spi_evt_type_t;
N
Ntypedef struct
N{
N    nrf_drv_spi_evt_type_t  type;      ///< Event type.
N    union
N    {
N        nrf_drv_spi_xfer_desc_t done;  ///< Event data for DONE event.
N    } data;
N} nrf_drv_spi_evt_t;
N
N/**
N * @brief SPI master driver event handler type.
N */
Ntypedef void (*nrf_drv_spi_handler_t)(nrf_drv_spi_evt_t const * p_event);
N
N
N/**
N * @brief Function for initializing the SPI master driver instance.
N *
N * This function configures and enables the specified peripheral.
N *
N * @param[in] p_instance Pointer to the driver instance structure.
N * @param[in] p_config   Pointer to the structure with the initial configuration.
N *                       If NULL, the default configuration is used.
N * @param     handler    Event handler provided by the user. If NULL, transfers
N *                       will be performed in blocking mode.
N *
N * @retval NRF_SUCCESS             If initialization was successful.
N * @retval NRF_ERROR_INVALID_STATE If the driver was already initialized.
N * @retval NRF_ERROR_BUSY          If some other peripheral with the same
N *                                 instance ID is already in use. This is
N *                                 possible only if PERIPHERAL_RESOURCE_SHARING_ENABLED
N *                                 is set to a value other than zero.
N */
Nret_code_t nrf_drv_spi_init(nrf_drv_spi_t const * const p_instance,
N                            nrf_drv_spi_config_t const * p_config,
N                            nrf_drv_spi_handler_t handler);
N
N/**
N * @brief Function for uninitializing the SPI master driver instance.
N *
N * @param[in] p_instance Pointer to the driver instance structure.
N */
Nvoid       nrf_drv_spi_uninit(nrf_drv_spi_t const * const p_instance);
N
N/**
N * @brief Function for starting the SPI data transfer.
N *
N * If an event handler was provided in the @ref nrf_drv_spi_init call, this function
N * returns immediately and the handler is called when the transfer is done.
N * Otherwise, the transfer is performed in blocking mode, which means that this function
N * returns when the transfer is finished.
N *
N * @note Peripherals using EasyDMA (for example, SPIM) require the transfer buffers
N *       to be placed in the Data RAM region. If they are not and an SPIM instance is
N *       used, this function will fail with the error code NRF_ERROR_INVALID_ADDR.
N *
N * @param[in] p_instance       Pointer to the driver instance structure.
N * @param[in] p_tx_buffer      Pointer to the transmit buffer. Can be NULL
N *                             if there is nothing to send.
N * @param     tx_buffer_length Length of the transmit buffer.
N * @param[in] p_rx_buffer      Pointer to the receive buffer. Can be NULL
N *                             if there is nothing to receive.
N * @param     rx_buffer_length Length of the receive buffer.
N *
N * @retval NRF_SUCCESS            If the operation was successful.
N * @retval NRF_ERROR_BUSY         If a previously started transfer has not finished
N *                                yet.
N * @retval NRF_ERROR_INVALID_ADDR If the provided buffers are not placed in the Data
N *                                RAM region.
N */
Nret_code_t nrf_drv_spi_transfer(nrf_drv_spi_t const * const p_instance,
N                                uint8_t const * p_tx_buffer,
N                                uint8_t         tx_buffer_length,
N                                uint8_t       * p_rx_buffer,
N                                uint8_t         rx_buffer_length);
N
N
N/**
N * @brief Function for starting the SPI data transfer with additional option flags.
N *
N * Function enables customizing the transfer by using option flags.
N *
N * Additional options are provided using the flags parameter:
N *
N * - @ref NRF_DRV_SPI_FLAG_TX_POSTINC and @ref NRF_DRV_SPI_FLAG_RX_POSTINC<span></span>:
N *   Post-incrementation of buffer addresses. Supported only by SPIM.
N * - @ref NRF_DRV_SPI_FLAG_HOLD_XFER<span></span>: Driver is not starting the transfer. Use this
N *   flag if the transfer is triggered externally by PPI. Supported only by SPIM. Use
N *   @ref nrf_drv_twi_start_task_get to get the address of the start task.
N * - @ref NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER<span></span>: No user event handler after transfer
N *   completion. This also means no interrupt at the end of the transfer. Supported only by SPIM.
N *   If @ref NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER is used, the driver does not set the instance into
N *   busy state, so you must ensure that the next transfers are set up when SPIM is not active.
N *   @ref nrf_drv_spi_end_event_get function can be used to detect end of transfer. Option can be used
N *   together with @ref NRF_DRV_SPI_FLAG_REPEATED_XFER to prepare a sequence of SPI transfers
N *   without interruptions.
N * - @ref NRF_DRV_SPI_FLAG_REPEATED_XFER<span></span>: Prepare for repeated transfers. You can set
N *   up a number of transfers that will be triggered externally (for example by PPI). An example is
N *   a TXRX transfer with the options @ref NRF_DRV_SPI_FLAG_RX_POSTINC,
N *   @ref NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER, and @ref NRF_DRV_SPI_FLAG_REPEATED_XFER. After the
N *   transfer is set up, a set of transfers can be triggered by PPI that will read, for example,
N *   the same register of an external component and put it into a RAM buffer without any interrupts.
N *   @ref nrf_drv_spi_end_event_get can be used to get the address of the END event, which can be
N *   used to count the number of transfers. If @ref NRF_DRV_SPI_FLAG_REPEATED_XFER is used,
N *   the driver does not set the instance into busy state, so you must ensure that the next
N *   transfers are set up when SPIM is not active. Supported only by SPIM.
N * @note Function is intended to be used only in non-blocking mode.
N *
N * @param p_instance  Pointer to the driver instance structure.
N * @param p_xfer_desc Pointer to the transfer descriptor.
N * @param flags       Transfer options (0 for default settings).
N *
N * @retval NRF_SUCCESS             If the procedure was successful.
N * @retval NRF_ERROR_BUSY          If the driver is not ready for a new transfer.
N * @retval NRF_ERROR_NOT_SUPPORTED If the provided parameters are not supported.
N * @retval NRF_ERROR_INVALID_ADDR  If the provided buffers are not placed in the Data
N *                                 RAM region.
N */
Nret_code_t nrf_drv_spi_xfer(nrf_drv_spi_t     const * const p_instance,
N                            nrf_drv_spi_xfer_desc_t const * p_xfer_desc,
N                            uint32_t                        flags);
N
N/**
N * @brief Function for returning the address of a SPIM start task.
N *
N * This function should be used if @ref nrf_drv_spi_xfer was called with the flag @ref NRF_DRV_SPI_FLAG_HOLD_XFER.
N * In that case, the transfer is not started by the driver, but it must be started externally by PPI.
N *
N * @param[in]  p_instance Pointer to the driver instance structure.
N *
N * @return     Start task address.
N */
Nuint32_t nrf_drv_spi_start_task_get(nrf_drv_spi_t const * p_instance);
N
N/**
N * @brief Function for returning the address of a END SPIM event.
N *
N * A END event can be used to detect the end of a transfer if the @ref NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER
N * option is used.
N *
N * @param[in]  p_instance Pointer to the driver instance structure.
N *
N * @return     END event address.
N */
Nuint32_t nrf_drv_spi_end_event_get(nrf_drv_spi_t const * p_instance);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NRF_DRV_SPI_H__
N
N/** @} */
L 12 "..\..\..\..\..\..\components\drivers_ext\LS013B7DH06\LS013B7DH06.h" 2
N
N#define LS013_VCOM_PIN 22
N#define LS013_VCOM_HZ	 60
N	
N	
N// Commands (inverted MSB/LSB)
N#define LS013_WR 		0x80					// write line command
N#define LS013_CM 		0x20 					// clear memory command
N#define LS013_VCOM 	0x00					// VCOM 
N
N//LCD resolution
N#define LS013_XRES 128 					//pixels per horizontal line
N#define LS013_YRES 128					 	//pixels per vertical line
N#define LS013_BYTES_LINE 48 		//number of bytes in a line 3bits per pixel 
N
N
N	
Ntypedef uint32_t ret_code_t;
Ntypedef enum {
N		WAITING,
N		SEND_LINE,
N		SEND_END
N} display_status;
N	
Nuint8_t* ls013_init(void);
Nret_code_t  ls013_showframe(uint8_t* fb);
Nret_code_t  ls013_flush(void);
Nret_code_t  ls013_clearframe(void);
Nret_code_t  ls013_drawPixel(uint8_t* fb, uint8_t x, uint8_t y, uint8_t color);
N
Nret_code_t  printText(uint8_t* fb, uint8_t x, uint8_t y, char* text, uint8_t length, uint8_t color);
Nret_code_t  printImage(uint8_t* fb, uint8_t x, uint8_t y, uint8_t *image, uint32_t size);
Nret_code_t  fillWindow(uint8_t* fb, uint8_t x, uint8_t y,uint8_t w, uint8_t h, uint8_t color);
N
N
Ndisplay_status ls013_getStatus(void);
N	
N	
N	
N	
N	
N	
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LS013B7DH06_H */
L 9 "..\..\..\..\none\board_framebuffer.h" 2
N
N// Uncomment this if your frame buffer device requires flushing
N#define GDISP_HARDWARE_FLUSH		TRUE
N#define GDISP_LLD_PIXELFORMAT		GDISP_PIXELFORMAT_RGB111
N#define GDISP_DRIVER_3BIT_MSB		TRUE
N
N
N
N#ifdef GDISP_DRIVER_VMT
S
Sstatic void board_init(GDisplay *g, fbInfo *fbi) {
S		// TODO: Initialize your frame buffer device here
S
S		// TODO: Set the details of the frame buffer
S		g->g.Width = 128;
S		g->g.Height = 128;
S		g->g.Backlight = 100;
S		g->g.Contrast = 100;
S		fbi->linelen = 48;				// bytes per row
S		fbi->pixels = ls013_init();												// pointer to the memory frame buffer
S		
S		ls013_clearframe();
S		
S	}
S
S	#if GDISP_HARDWARE_FLUSH
S		static void board_flush(GDisplay *g) {
S			// TODO: Can be an empty function if your hardware doesn't support this
S			ls013_flush();
S		}
S	#endif
S
S	#if GDISP_NEED_CONTROL
S		static void board_backlight(GDisplay *g, uint8_t percent) {
S			// TODO: Can be an empty function if your hardware doesn't support this
S			(void) g;
S			(void) percent;
S		}
S
S		static void board_contrast(GDisplay *g, uint8_t percent) {
S			// TODO: Can be an empty function if your hardware doesn't support this
S			(void) g;
S			(void) percent;
S		}
S
S		static void board_power(GDisplay *g, powermode_t pwr) {
S			// TODO: Can be an empty function if your hardware doesn't support this
S			(void) g;
S			(void) pwr;
S		}
S	#endif
S
N#endif /* GDISP_LLD_BOARD_IMPLEMENTATION */
L 23 "..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer\gdisp_lld_config.h" 2
N
N#ifndef GDISP_LLD_PIXELFORMAT
S	#error "GDISP FrameBuffer: You must specify a GDISP_LLD_PIXELFORMAT in your board_framebuffer.h or your makefile"
N#endif
N
N// This driver currently only supports unpacked formats with more than 8 bits per pixel
N//	that is, we only support GRAY_SCALE with 8 bits per pixel or any unpacked TRUE_COLOR format.
N// Note: At the time this file is included we have not calculated all our color
N//			definitions so we need to do this by hand.
N#if (GDISP_LLD_PIXELFORMAT & 0x4000) && (GDISP_LLD_PIXELFORMAT & 0xFF) != 8
X#if (GDISP_PIXELFORMAT_RGB111 & 0x4000) && (GDISP_PIXELFORMAT_RGB111 & 0xFF) != 8
S	#error "GDISP FrameBuffer: This driver does not support the specified GDISP_LLD_PIXELFORMAT"
N#endif
N
N#endif	/* GFX_USE_GDISP */
N
N#endif	/* _GDISP_LLD_CONFIG_H */
L 158 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp.h" 2
N
N	// Unless the user has specified a specific pixel format, use
N	// the native format for the controller.
N	#if !defined(GDISP_PIXELFORMAT) && defined(GDISP_LLD_PIXELFORMAT)
X	#if !0L && 1L
N		#define GDISP_PIXELFORMAT 			GDISP_LLD_PIXELFORMAT
N	#endif
N#endif
N
N/**
N * @name    GDISP pixel format choices
N * @{
N */
N	/**
N	 * @brief   The pixel format.
N	 * @details	It generally defaults to the hardware pixel format.
N	 * @note	This doesn't need to match the hardware pixel format.
N	 * 			It is definitely more efficient when it does.
N	 * @note	When GDISP_DRIVER_LIST is defined, this must
N	 * 			be explicitly defined and you should ensure the best match
N	 * 			with your hardware across all devices.
N	 */
N	#ifndef GDISP_PIXELFORMAT
S		#define GDISP_PIXELFORMAT 			GDISP_PIXELFORMAT_ERROR
N	#endif
N	/**
N	 * @brief   Do pixels require packing for a blit
N	 * @note	Is only valid for a pixel format that doesn't fill it's datatype. eg formats:
N	 *				GDISP_PIXELFORMAT_RGB888
N	 *				GDISP_PIXELFORMAT_RGB444
N	 *				GDISP_PIXELFORMAT_RGB666
N	 *				GDISP_PIXELFORMAT_CUSTOM
N	 * @note	Very few cases should actually require packed pixels as the low
N	 *				level driver can also pack on the fly as it is sending it
N	 *				to the graphics device.
N	 * @note	Packed pixels are not really supported at this point.
N	 */
N	#ifndef GDISP_PACKED_PIXELS
N		#define GDISP_PACKED_PIXELS			FALSE
N	#endif
N
N	/**
N	 * @brief   Do lines of pixels require packing for a blit
N	 * @note	Ignored if GDISP_PACKED_PIXELS is FALSE
N	 */
N	#ifndef GDISP_PACKED_LINES
N		#define GDISP_PACKED_LINES			FALSE
N	#endif
N/** @} */
N
N/*===========================================================================*/
N/* Defines related to the pixel format										 */
N/*===========================================================================*/
N
N/* Load our color definitions and pixel formats */
N#include "gdisp_colors.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp_colors.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdisp/gdisp_colors.h
N *
N * @defgroup Colors Colors
N * @ingroup GDISP
N *
N * @brief   Sub-Module for color handling.
N *
N * @{
N */
N
N#ifndef _GDISP_COLORS_H
N#define _GDISP_COLORS_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP || defined(__DOXYGEN__)
X#if -1 || 0L
N
Ntypedef uint16_t	colorformat;
N
N/**
N * @name	Color system masks
N *
N * @details For pixel formats we do some assignment of codes to enable
N * 			format auto-calculation. (Undocumented).
N * 			0x2RGB			TRUECOLOR	RGB format, R = red bits, G = green bits, B = blue bits
N * 			0x3RGB			TRUECOLOR	BGR format, R = red bits, G = green bits, B = blue bits
N * 			0x40XX			GRAYSCALE	XX = bits
N * 			0x60XX			PALLETTE	XX = bits
N * 			0x8XXX			CUSTOM format.
N * @{
N */
N#define GDISP_COLORSYSTEM_MASK			0xF000
N#define GDISP_COLORSYSTEM_RGB			0x2000
N#define GDISP_COLORSYSTEM_BGR			0x3000
N/** @} */
N
N/**
N * @name   Color Type Constants
N * @{
N */
N#define GDISP_COLORSYSTEM_TRUECOLOR		0x2000
N#define GDISP_COLORSYSTEM_GRAYSCALE		0x4000
N#define GDISP_COLORSYSTEM_PALETTE		0x6000
N/** @} */
N
N/**
N * @name   Pixel Format Constants
N * @{
N */
N#define GDISP_PIXELFORMAT_MONO		(GDISP_COLORSYSTEM_GRAYSCALE|0x0001)
N#define GDISP_PIXELFORMAT_GRAY4		(GDISP_COLORSYSTEM_GRAYSCALE|0x0002)
N#define GDISP_PIXELFORMAT_GRAY16	(GDISP_COLORSYSTEM_GRAYSCALE|0x0004)
N#define GDISP_PIXELFORMAT_GRAY256	(GDISP_COLORSYSTEM_GRAYSCALE|0x0008)
N#define GDISP_PIXELFORMAT_RGB111	(GDISP_COLORSYSTEM_RGB|0x0111)
N#define GDISP_PIXELFORMAT_RGB565	(GDISP_COLORSYSTEM_RGB|0x0565)
N#define GDISP_PIXELFORMAT_BGR565	(GDISP_COLORSYSTEM_BGR|0x0565)
N#define GDISP_PIXELFORMAT_RGB555	(GDISP_COLORSYSTEM_RGB|0x0555)
N#define GDISP_PIXELFORMAT_BGR555	(GDISP_COLORSYSTEM_BGR|0x0555)
N#define GDISP_PIXELFORMAT_RGB888	(GDISP_COLORSYSTEM_RGB|0x0888)
N#define GDISP_PIXELFORMAT_BGR888	(GDISP_COLORSYSTEM_BGR|0x0888)
N#define GDISP_PIXELFORMAT_RGB444	(GDISP_COLORSYSTEM_RGB|0x0444)
N#define GDISP_PIXELFORMAT_BGR444	(GDISP_COLORSYSTEM_BGR|0x0444)
N#define GDISP_PIXELFORMAT_RGB332	(GDISP_COLORSYSTEM_RGB|0x0332)
N#define GDISP_PIXELFORMAT_BGR332	(GDISP_COLORSYSTEM_BGR|0x0233)
N#define GDISP_PIXELFORMAT_RGB233	(GDISP_COLORSYSTEM_RGB|0x0233)
N#define GDISP_PIXELFORMAT_BGR233	(GDISP_COLORSYSTEM_BGR|0x0332)
N#define GDISP_PIXELFORMAT_RGB666	(GDISP_COLORSYSTEM_RGB|0x0666)
N#define GDISP_PIXELFORMAT_BGR666	(GDISP_COLORSYSTEM_BGR|0x0666)
N#define GDISP_PIXELFORMAT_ERROR		0x0000
N/** @} */
N
N/**
N * @name   Some basic colors
N * @{
N */
N#define White			HTML2COLOR(0xFFFFFF)
N#define Black			HTML2COLOR(0x000000)
N#define Gray			HTML2COLOR(0x808080)
N#define Grey			Gray
N#define Blue			HTML2COLOR(0x0000FF)
N#define Red				HTML2COLOR(0xFF0000)
N#define Fuchsia			HTML2COLOR(0xFF00FF)
N#define Magenta			Fuchsia
N#define Green			HTML2COLOR(0x008000)
N#define Yellow			HTML2COLOR(0xFFFF00)
N#define Aqua			HTML2COLOR(0x00FFFF)
N#define Cyan			Aqua
N#define Lime			HTML2COLOR(0x00FF00)
N#define Maroon			HTML2COLOR(0x800000)
N#define Navy			HTML2COLOR(0x000080)
N#define Olive			HTML2COLOR(0x808000)
N#define Purple			HTML2COLOR(0x800080)
N#define Silver			HTML2COLOR(0xC0C0C0)
N#define Teal			HTML2COLOR(0x008080)
N#define Orange			HTML2COLOR(0xFFA500)
N#define Pink			HTML2COLOR(0xFFC0CB)
N#define SkyBlue			HTML2COLOR(0x87CEEB)
N/** @} */
N
N#if defined(__DOXYGEN__)
X#if 0L
S	/**
S	 * @brief	The color system (grayscale, palette or truecolor)
S	 */
S	#define COLOR_SYSTEM			GDISP_COLORSYSTEM_TRUECOLOR
S
S	/**
S	 * @brief	The number of bits in a color value
S	 */
S	#define COLOR_BITS			16
S
S	/**
S	 * @name	Color bits
S	 * @brief	The number of bits for each of red, green and blue
S	 * @{
S	 */
S	#define COLOR_BITS_R		5
S	#define COLOR_BITS_G		6
S	#define COLOR_BITS_B		5
S	/** @} */
S
S	/**
S	 * @name	Color bit shifts
S	 * @brief	The number of bits to shift each of red, green and blue to put it in the correct place in the color
S	 * @{
S	 */
S	#define COLOR_SHIFT_R		11
S	#define COLOR_SHIFT_G		5
S	#define COLOR_SHIFT_B		0
S	/** @} */
S
S	/**
S	 * @brief	Does the color need masking to remove invalid bits
S	 */
S	#define COLOR_NEEDS_MASK	FALSE
S
S	/**
S	 * @brief	If the color needs masking to remove invalid bits, this is the mask
S	 */
S	#define COLOR_MASK			0xFFFF
S
S	/**
S	 * @brief   The color type
S	 */
S	#define COLOR_TYPE			uint16_t
S
S	/**
S	 * @brief	The number of bits in the color type (not necessarily the same as COLOR_BITS).
S	 */
S	#define COLOR_TYPE_BITS		16
S
S	/**
S	 * @brief   Convert a luminance (0 to 255) into a color value.
S	 * @note	The word "Luma" is used instead of grey or gray due to the spelling ambiguities of the word grey
S	 * @note	This is not a weighted luminance conversion in the color tv style.
S	 * @note	@p LUMA2COLOR() uses a linear conversion (0.33R + 0.33G + 0.33B). Note this is different to color
S	 * 			tv luminance (0.26126R + 0.7152G + 0.0722B),  digital tv luminance of (0.299R + 0.587G + 0.114B), or
S	 * 			@p LUMA_OF() which uses (0.25R + 0.5G + 0.25B).
S	 */
S	#define LUMA2COLOR(l)		((color_t)((((l) & 0xF8)<<8) | (((l) & 0xFC)<<3) | (((l) & 0xF8)>>3)))
S
S	/**
S	 * @brief   Convert red, green, blue (each 0 to 255) into a color value.
S	 */
S	#define RGB2COLOR(r,g,b)	((color_t)((((r) & 0xF8)<<8) | (((g) & 0xFC)<<3) | (((b) & 0xF8)>>3)))
S
S	/**
S	 * @brief   Convert a 6 digit HTML code (hex) into a color value.
S	 */
S	#define HTML2COLOR(h)		((color_t)((((h) & 0xF80000)>>8) | (((h) & 0x00FC00)>>5) | (((h) & 0x0000F8)>>3)))
S
S	/**
S	 * @name	Extraction macros (quick)
S	 *
S	 * @brief   Extract the luma/red/green/blue component (0 to 255) of a color value.
S	 * @note	This uses quick and dirty bit shifting. If you want more exact colors
S	 * 			use @p EXACT_RED_OF() etc which uses multiplies and divides. For constant
S	 * 			colors using @p EXACT_RED_OF() is no more expensive because the compiler
S	 * 			evaluates the arithmetic.
S	 * @note	@p LUMA_OF() returns a roughly weighted luminance (0.25R + 0.5G + 0.25B). Note this is
S	 * 			different to @p LUMA2COLOR() which uses a linear conversion (0.33R + 0.33G + 0.33B) and
S	 * 			color tv luminance of (0.26126R + 0.7152G + 0.0722B) and digital tv luminance of (0.299R + 0.587G + 0.114B).
S	 * @note	A 5 bit color component maximum value (0x1F) converts to 0xF8 (slightly off-color)
S	 * @{
S	 */
S	#define LUMA_OF(c)			((RED_OF(c)+((uint16_t)GREEN_OF(c)<<1)+BLUE_OF(c))>>2)
S	#define RED_OF(c)			(((c) & 0xF800)>>8)
S	#define GREEN_OF(c)			(((c)&0x007E)>>3)
S	#define BLUE_OF(c)			(((c)&0x001F)<<3)
S	/** @} */
S
S	/**
S	 * @name	Extraction macros (precise)
S	 *
S	 * @brief   Extract the exact luma/red/green/blue component (0 to 255) of a color value.
S	 * @note	This uses multiplies and divides rather than bit shifting.
S	 * 			This gives exact equivalent colors at the expense of more cpu intensive
S	 * 			operations. Note for constants this is no more expensive than @p REF_OF()
S	 * 			because the compiler evaluates the arithmetic.
S	 * @note	@p EXACT_LUMA_OF() returns a roughly weighted luminance (0.25R + 0.5G + 0.25B). Note this is
S	 * 			different to @p LUMA2COLOR() which uses a linear conversion (0.33R + 0.33G + 0.33B) and
S	 * 			color tv luminance of (0.26126R + 0.7152G + 0.0722B) and digital tv luminance of (0.299R + 0.587G + 0.114B).
S	 * @note	A 5 bit color component maximum value (0x1F) converts to 0xFF (the true equivalent color)
S	 * @{
S	 */
S	#define EXACT_LUMA_OF(c)	((EXACT_RED_OF(c)+((uint16_t)EXACT_GREEN_OF(c)<<1)+EXACT_BLUE_OF(c))>>2)
S	#define EXACT_RED_OF(c)		(((((c)>>11)&0x1F)*255)/31)
S	#define EXACT_GREEN_OF(c)	(((((c)>>5)&0x3F)*255)/63)
S	#define EXACT_BLUE_OF(c)	(((((c)>>0)&0x1F)*255)/31)
S	/** @} */
N#endif
N
N/*
N * We use this big mess of macros to calculate all the components
N * to prevent user errors in the color definitions. It greatly simplifies
N * the above definitions and ensures a consistent implementation.
N */
N
N//-------------------------
N//	True-Color color system
N//-------------------------
N#if GDISP_PIXELFORMAT & GDISP_COLORSYSTEM_TRUECOLOR
X#if (0x2000|0x0111) & 0x2000
N	#define COLOR_SYSTEM			GDISP_COLORSYSTEM_TRUECOLOR
N
N	// Calculate the number of bits
N	#define COLOR_BITS_R			((GDISP_PIXELFORMAT>>8) & 0x0F)
N	#define COLOR_BITS_G			((GDISP_PIXELFORMAT>>4) & 0x0F)
N	#define COLOR_BITS_B			((GDISP_PIXELFORMAT>>0) & 0x0F)
N	#define COLOR_BITS				(COLOR_BITS_R + COLOR_BITS_G + COLOR_BITS_B)
N
N	// From the number of bits determine COLOR_TYPE, COLOR_TYPE_BITS and masking
N	#if COLOR_BITS <= 8
X	#if ((((0x2000|0x0111)>>8) & 0x0F) + (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F)) <= 8
N		#define COLOR_TYPE			uint8_t
N		#define COLOR_TYPE_BITS	8 
N	#elif COLOR_BITS <= 16
S		#define COLOR_TYPE			uint16_t
S		#define COLOR_TYPE_BITS		16
S	#elif COLOR_BITS <= 32
S		#define COLOR_TYPE			uint32_t
S		#define COLOR_TYPE_BITS		32
S	#else
S		#error "GDISP: Cannot define color types with more than 32 bits"
N	#endif
N	#if COLOR_TYPE_BITS == COLOR_BITS
X	#if 8 == ((((0x2000|0x0111)>>8) & 0x0F) + (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F))
S		#define COLOR_NEEDS_MASK	FALSE
N	#else
N		#define COLOR_NEEDS_MASK	TRUE
N	#endif
N	#define COLOR_MASK()			((1 << COLOR_BITS)-1)
N
N	// Calculate the component bit shifts
N	#if (GDISP_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_RGB
X	#if ((0x2000|0x0111) & 0xF000) == 0x2000
N		#define COLOR_SHIFT_R		(COLOR_BITS_B+COLOR_BITS_G)
N		#define COLOR_SHIFT_G		COLOR_BITS_B
N		#define COLOR_SHIFT_B		0
N	#else
S		#define COLOR_SHIFT_B		(COLOR_BITS_R+COLOR_BITS_G)
S		#define COLOR_SHIFT_G		COLOR_BITS_R
S		#define COLOR_SHIFT_R		0
N	#endif
N
N	// Calculate RED_OF, GREEN_OF, BLUE_OF and RGB2COLOR
N	#if COLOR_BITS_R + COLOR_SHIFT_R == 8
X	#if (((0x2000|0x0111)>>8) & 0x0F) + ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)) == 8
S		#define RED_OF(c)			((c) & (((1<<COLOR_BITS_R)-1) << COLOR_SHIFT_R))
S		#define RGB2COLOR_R(r)		((COLOR_TYPE)((r) & (0xFF & ~((1<<(8-COLOR_BITS_R))-1))))
S	#elif COLOR_BITS_R + COLOR_SHIFT_R > 8
X	#elif (((0x2000|0x0111)>>8) & 0x0F) + ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)) > 8
S		#define RED_OF(c)			(((c) & (((1<<COLOR_BITS_R)-1) << COLOR_SHIFT_R)) >> (COLOR_BITS_R+COLOR_SHIFT_R-8))
S		#define RGB2COLOR_R(r)		(((COLOR_TYPE)((r) & (0xFF & ~((1<<(8-COLOR_BITS_R))-1)))) << (COLOR_BITS_R+COLOR_SHIFT_R-8))
N	#else // COLOR_BITS_R + COLOR_SHIFT_R < 8
N		#define RED_OF(c)			(((c) & (((1<<COLOR_BITS_R)-1) << COLOR_SHIFT_R)) << (8-(COLOR_BITS_R+COLOR_SHIFT_R)))
N		#define RGB2COLOR_R(r)		(((COLOR_TYPE)((r) & (0xFF & ~((1<<(8-COLOR_BITS_R))-1)))) >> (8-(COLOR_BITS_R+COLOR_SHIFT_R)))
N	#endif
N	#if COLOR_BITS_G + COLOR_SHIFT_G == 8
X	#if (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F) == 8
S		#define GREEN_OF(c)			((c) & (((1<<COLOR_BITS_G)-1) << COLOR_SHIFT_G))
S		#define RGB2COLOR_G(g)		((COLOR_TYPE)((g) & (0xFF & ~((1<<(8-COLOR_BITS_G))-1))))
S	#elif COLOR_BITS_G + COLOR_SHIFT_G > 8
X	#elif (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F) > 8
S		#define GREEN_OF(c)			(((c) & (((1<<COLOR_BITS_G)-1) << COLOR_SHIFT_G)) >> (COLOR_BITS_G+COLOR_SHIFT_G-8))
S		#define RGB2COLOR_G(g)		(((COLOR_TYPE)((g) & (0xFF & ~((1<<(8-COLOR_BITS_G))-1)))) << (COLOR_BITS_G+COLOR_SHIFT_G-8))
N	#else // COLOR_BITS_G + COLOR_SHIFT_G < 8
N		#define GREEN_OF(c)			(((c) & (((1<<COLOR_BITS_G)-1) << COLOR_SHIFT_G)) << (8-(COLOR_BITS_G+COLOR_SHIFT_G)))
N		#define RGB2COLOR_G(g)		(((COLOR_TYPE)((g) & (0xFF & ~((1<<(8-COLOR_BITS_G))-1)))) >> (8-(COLOR_BITS_G+COLOR_SHIFT_G)))
N	#endif
N	#if COLOR_BITS_B + COLOR_SHIFT_B == 8
X	#if (((0x2000|0x0111)>>0) & 0x0F) + 0 == 8
S		#define BLUE_OF(c)			((c) & (((1<<COLOR_BITS_B)-1) << COLOR_SHIFT_B))
S		#define RGB2COLOR_B(b)		((COLOR_TYPE)((b) & (0xFF & ~((1<<(8-COLOR_BITS_B))-1))))
S	#elif COLOR_BITS_B + COLOR_SHIFT_B > 8
X	#elif (((0x2000|0x0111)>>0) & 0x0F) + 0 > 8
S		#define BLUE_OF(c)			(((c) & (((1<<COLOR_BITS_B)-1) << COLOR_SHIFT_B)) >> (COLOR_BITS_B+COLOR_SHIFT_B-8))
S		#define RGB2COLOR_B(b)		(((COLOR_TYPE)((b) & (0xFF & ~((1<<(8-COLOR_BITS_B))-1)))) << (COLOR_BITS_B+COLOR_SHIFT_B-8))
N	#else // COLOR_BITS_B + COLOR_SHIFT_B < 8
N		#define BLUE_OF(c)			(((c) & (((1<<COLOR_BITS_B)-1) << COLOR_SHIFT_B)) << (8-(COLOR_BITS_B+COLOR_SHIFT_B)))
N		#define RGB2COLOR_B(b)		(((COLOR_TYPE)((b) & (0xFF & ~((1<<(8-COLOR_BITS_B))-1)))) >> (8-(COLOR_BITS_B+COLOR_SHIFT_B)))
N	#endif
N	#define LUMA_OF(c)				((RED_OF(c)+((uint16_t)GREEN_OF(c)<<1)+BLUE_OF(c))>>2)
N	#define EXACT_RED_OF(c)			(((uint16_t)(((c)>>COLOR_SHIFT_R)&((1<<COLOR_BITS_R)-1))*255)/((1<<COLOR_BITS_R)-1))
N	#define EXACT_GREEN_OF(c)		(((uint16_t)(((c)>>COLOR_SHIFT_G)&((1<<COLOR_BITS_G)-1))*255)/((1<<COLOR_BITS_G)-1))
N	#define EXACT_BLUE_OF(c)		(((uint16_t)(((c)>>COLOR_SHIFT_B)&((1<<COLOR_BITS_B)-1))*255)/((1<<COLOR_BITS_B)-1))
N	#define EXACT_LUMA_OF(c)		((EXACT_RED_OF(c)+((uint16_t)EXACT_GREEN_OF(c)<<1)+EXACT_BLUE_OF(c))>>2)
N	#define LUMA2COLOR(l)			(RGB2COLOR_R(l) | RGB2COLOR_G(l) | RGB2COLOR_B(l))
N	#define RGB2COLOR(r,g,b)		(RGB2COLOR_R(r) | RGB2COLOR_G(g) | RGB2COLOR_B(b))
N
N	// Calculate HTML2COLOR
N	#if COLOR_BITS_R + COLOR_SHIFT_R == 24
X	#if (((0x2000|0x0111)>>8) & 0x0F) + ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)) == 24
S		#define HTML2COLOR_R(h)		((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_R))-1))<<16))
S	#elif COLOR_BITS_R + COLOR_SHIFT_R > 24
X	#elif (((0x2000|0x0111)>>8) & 0x0F) + ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)) > 24
S		#define HTML2COLOR_R(h)		(((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_R))-1))<<16)) << (COLOR_BITS_R+COLOR_SHIFT_R-24))
N	#else // COLOR_BITS_R + COLOR_SHIFT_R < 24
N		#define HTML2COLOR_R(h)		(((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_R))-1))<<16)) >> (24-(COLOR_BITS_R+COLOR_SHIFT_R)))
N	#endif
N	#if COLOR_BITS_G + COLOR_SHIFT_G == 16
X	#if (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F) == 16
S		#define HTML2COLOR_G(h)		((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_G))-1))<<8))
S	#elif COLOR_BITS_G + COLOR_SHIFT_G > 16
X	#elif (((0x2000|0x0111)>>4) & 0x0F) + (((0x2000|0x0111)>>0) & 0x0F) > 16
S		#define HTML2COLOR_G(h)		(((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_G))-1))<<8)) << (COLOR_BITS_G+COLOR_SHIFT_G-16))
N	#else // COLOR_BITS_G + COLOR_SHIFT_G < 16
N		#define HTML2COLOR_G(h)		(((h) & ((0xFFL & ~((1<<(8-COLOR_BITS_G))-1))<<8)) >> (16-(COLOR_BITS_G+COLOR_SHIFT_G)))
N	#endif
N	#if COLOR_BITS_B + COLOR_SHIFT_B == 8
X	#if (((0x2000|0x0111)>>0) & 0x0F) + 0 == 8
S		#define HTML2COLOR_B(h)		((h) & (0xFFL & ~((1<<(8-COLOR_BITS_B))-1)))
S	#elif COLOR_BITS_B + COLOR_SHIFT_B > 8
X	#elif (((0x2000|0x0111)>>0) & 0x0F) + 0 > 8
S		#define HTML2COLOR_B(h)		(((h) & (0xFFL & ~((1<<(8-COLOR_BITS_B))-1))) << (COLOR_BITS_B+COLOR_SHIFT_B-8))
N	#else // COLOR_BITS_B + COLOR_SHIFT_B < 8
N		#define HTML2COLOR_B(h)		(((h) & (0xFFL & ~((1<<(8-COLOR_BITS_B))-1))) >> (8-(COLOR_BITS_B+COLOR_SHIFT_B)))
N	#endif
N	#define HTML2COLOR(h)		((COLOR_TYPE)(HTML2COLOR_R(h) | HTML2COLOR_G(h) | HTML2COLOR_B(h)))
N
N//-------------------------
N//	Gray-scale color system
N//-------------------------
N#elif (GDISP_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_GRAYSCALE
S	#define COLOR_SYSTEM			GDISP_COLORSYSTEM_GRAYSCALE
S
S	// Calculate the number of bits and shifts
S	#define COLOR_BITS			(GDISP_PIXELFORMAT & 0xFF)
S	#define COLOR_BITS_R		COLOR_BITS
S	#define COLOR_BITS_G		COLOR_BITS
S	#define COLOR_BITS_B		COLOR_BITS
S	#define COLOR_SHIFT_R		0
S	#define COLOR_SHIFT_G		0
S	#define COLOR_SHIFT_B		0
S
S	// From the number of bits determine COLOR_TYPE, COLOR_TYPE_BITS and masking
S	#if COLOR_BITS <= 8
S		#define COLOR_TYPE			uint8_t
S		#define COLOR_TYPE_BITS		8
S	#else
S		#error "GDISP: Cannot define gray-scale color types with more than 8 bits"
S	#endif
S	#if COLOR_TYPE_BITS == COLOR_BITS
S		#define COLOR_NEEDS_MASK	FALSE
S	#else
S		#define COLOR_NEEDS_MASK	TRUE
S	#endif
S	#define COLOR_MASK()			((1 << COLOR_BITS)-1)
S
S	#if COLOR_BITS == 1
S		#define RGB2COLOR(r,g,b)	(((r)|(g)|(b)) ? 1 : 0)
S		#define LUMA2COLOR(l)		((l) ? 1 : 0)
S		#define HTML2COLOR(h)		((h) ? 1 : 0)
S		#define LUMA_OF(c)			((c) ? 255 : 0)
S		#define EXACT_LUMA_OF(c)	LUMA_OF(c)
S	#else
S		// They eye is more sensitive to green
S		#define RGB2COLOR(r,g,b)	((COLOR_TYPE)(((uint16_t)(r)+(g)+(g)+(b)) >> (10-COLOR_BITS)))
S		#define LUMA2COLOR(l)		((COLOR_TYPE)((l)>>(8-COLOR_BITS)))
S		#define HTML2COLOR(h)		((COLOR_TYPE)(((((h)&0xFF0000)>>16)+(((h)&0x00FF00)>>7)+((h)&0x0000FF)) >> (10-COLOR_BITS)))
S		#define LUMA_OF(c)			(((c) & ((1<<COLOR_BITS)-1)) << (8-COLOR_BITS))
S		#define EXACT_LUMA_OF(c)	((((uint16_t)(c) & ((1<<COLOR_BITS)-1))*255)/((1<<COLOR_BITS)-1))
S	#endif
S
S	#define RED_OF(c)			LUMA_OF(c)
S	#define GREEN_OF(c)			LUMA_OF(c)
S	#define BLUE_OF(c)			LUMA_OF(c)
S	#define EXACT_RED_OF(c)		EXACT_LUMA_OF(c)
S	#define EXACT_GREEN_OF(c)	EXACT_LUMA_OF(c)
S	#define EXACT_BLUE_OF(c)	EXACT_LUMA_OF(c)
S
S//-------------------------
S//	Palette color system
S//-------------------------
S#elif (GDISP_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_PALETTE
S	#define COLOR_SYSTEM			GDISP_COLORSYSTEM_PALETTE
S
S	#error "GDISP: A palette color system is not currently supported"
S
S//-------------------------
S//	Some other color system
S//-------------------------
S#else
S	#error "GDISP: Unsupported color system"
N#endif
N
N/**
N * @brief	The color type definition
N */
Ntypedef COLOR_TYPE			color_t;
Xtypedef uint8_t			color_t;
N
N#endif /* GFX_USE_GDISP */
N
N#endif /* _GDISP_COLORS_H */
N/** @} */
L 213 "..\..\..\..\..\..\external\ugfx\src\../src/gdisp/gdisp.h" 2
N
N/**
N * @brief   The type of a pixel.
N */
Ntypedef color_t		pixel_t;
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Color Utility Functions */
N
N/**
N * @brief   Blend 2 colors according to the alpha
N * @return	The combined color
N *
N * @param[in] fg		The foreground color
N * @param[in] bg		The background color
N * @param[in] alpha		The alpha value (0-255). 0 is all background, 255 is all foreground.
N *
N * @api
N */
Ncolor_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha);
N
N/**
N * @brief   Find a contrasting color
N * @return	The contrasting color
N *
N * @param[in] color		The color to contrast
N *
N * @api
N */
Ncolor_t gdispContrastColor(color_t color);
N
N/* Base Functions */
N
N/**
N * @brief   Get the specified display
N * @return	The pointer to the display or NULL if the display doesn't exist
N * @note	The GDISP variable contains the display used by the gdispXxxx routines
N * 			as opposed to the gdispGXxxx routines which take an explicit display
N * 			parameter.
N * @note	Displays are numbered from 0 to @p gdispGetDisplayCount() - 1
N *
N * @param[in] display	The display number (0..n)
N *
N * @api
N */
NGDisplay *gdispGetDisplay(unsigned display);
N
N/**
N * @brief   Set the current default display to the specified display
N * @note	The default display is used for the gdispXxxx functions.
N * @note	The default display is contained in the variable GDISP. Using
N * 			this function to set it protects against it being set to a NULL
N * 			value.
N * @note	If a NULL is passed for the dispay this call is ignored.
N *
N * @param[in] g 	The display to use
N *
N * @api
N */
Nvoid gdispSetDisplay(GDisplay *g);
N
N/**
N * @brief   Get the count of currently active displays
N * @return  The count of displays currently in the system
N *
N * @note	Displays are numbered from 0 to @p gdispGetDisplayCount() - 1
N */
Nunsigned gdispGetDisplayCount(void);
N
N/* Property Functions */
N
N/**
N * @brief   Get the display width in pixels.
N *
N * @param[in] g 		The display to use
N *
N * @return	The width of the display
N *
N * @api
N */
Ncoord_t gdispGGetWidth(GDisplay *g);
N#define gdispGetWidth()								gdispGGetWidth(GDISP)
N
N/**
N * @brief   Get the display height in pixels.
N *
N * @param[in] g 		The display to use
N *
N * @return	The height of the display
N *
N * @api
N */
Ncoord_t gdispGGetHeight(GDisplay *g);
N#define gdispGetHeight()							gdispGGetHeight(GDISP)
N
N/**
N * @brief   Get the current display power mode.
N *
N * @param[in] g 		The display to use
N *
N * @return	The current power mode
N *
N * @api
N */
Npowermode_t gdispGGetPowerMode(GDisplay *g);
N#define gdispGetPowerMode()							gdispGGetPowerMode(GDISP)
N
N/**
N * @brief   Get the current display orientation.
N *
N * @param[in] g 		The display to use
N *
N * @return	The current orientation
N *
N * @api
N */
Norientation_t gdispGGetOrientation(GDisplay *g);
N#define gdispGetOrientation()						gdispGGetOrientation(GDISP)
N
N/**
N * @brief   Get the current display backlight brightness.
N *
N * @param[in] g 		The display to use
N *
N * @return	The current backlight value
N *
N * @api
N */
Nuint8_t gdispGGetBacklight(GDisplay *g);
N#define gdispGetBacklight()							gdispGGetBacklight(GDISP)
N
N/**
N * @brief   Get the current display contrast.
N *
N * @param[in] g 		The display to use
N *
N * @return	The current contrast value
N *
N * @api
N */
Nuint8_t gdispGGetContrast(GDisplay *g);
N#define gdispGetContrast()							gdispGGetContrast(GDISP)
N
N/* Drawing Functions */
N
N/**
N * @brief   Flush current drawing operations to the display
N * @note	Some low level drivers do not update the display until
N * 			the display is flushed. For others it is optional but can
N * 			help prevent tearing effects. For some it is ignored.
N * 			Calling it at the end of a logic set of drawing operations
N * 			in your application will ensure controller portability. If you
N * 			know your controller does not need to be flushed there is no
N * 			need to call it (which is in reality most controllers).
N * @note	Even for displays that require flushing, there is no need to
N * 			call this function if GDISP_NEED_AUTOFLUSH is TRUE.
N * 			Calling it again won't hurt though.
N *
N *
N * @param[in] g 	The display to use
N *
N * @api
N */
Nvoid gdispGFlush(GDisplay *g);
N#define gdispFlush()									gdispGFlush(GDISP)
N
N/**
N * @brief   Clear the display to the specified color.
N *
N * @param[in] g 	The display to use
N * @param[in] color The color to use when clearing the screen
N *
N * @api
N */
Nvoid gdispGClear(GDisplay *g, color_t color);
N#define gdispClear(c)									gdispGClear(GDISP, c)
N
N/**
N * @brief   Set a pixel in the specified color.
N *
N * @param[in] g 	The display to use
N * @param[in] x,y   The position to set the pixel.
N * @param[in] color The color to use
N *
N * @api
N */
Nvoid gdispGDrawPixel(GDisplay *g, coord_t x, coord_t y, color_t color);
N#define gdispDrawPixel(x,y,c)							gdispGDrawPixel(GDISP,x,y,c)
N
N/**
N * @brief   Draw a line.
N *
N * @param[in] g 	The display to use
N * @param[in] x0,y0		The start position
N * @param[in] x1,y1 	The end position
N * @param[in] color		The color to use
N *
N * @api
N */
Nvoid gdispGDrawLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color);
N#define gdispDrawLine(x0,y0,x1,y1,c)					gdispGDrawLine(GDISP,x0,y0,x1,y1,c)
N
N/**
N * @brief   Fill an area with a color.
N *
N * @param[in] g 		The display to use
N * @param[in] x,y		The start position
N * @param[in] cx,cy		The size of the box (outside dimensions)
N * @param[in] color		The color to use
N *
N * @api
N */
Nvoid gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color);
N#define gdispFillArea(x,y,cx,cy,c)						gdispGFillArea(GDISP,x,y,cx,cy,c)
N
N/**
N * @brief   Fill an area using the supplied bitmap.
N * @details The bitmap is in the pixel format specified by the low level driver
N * @note	If a packed pixel format is used and the width doesn't
N *			match a whole number of bytes, the next line will start on a
N *			non-byte boundary (no end-of-line padding).
N * @note	If GDISP_NEED_ASYNC is defined then the buffer must be static
N * 			or at least retained until this call has finished the blit. You can
N * 			tell when all graphics drawing is finished by @p gdispIsBusy() going FALSE.
N *
N * @param[in] g 		The display to use
N * @param[in] x,y		The start position
N * @param[in] cx,cy		The size of the filled area
N * @param[in] srcx,srcy The bitmap position to start the fill form
N * @param[in] srccx		The width of a line in the bitmap
N * @param[in] buffer	The bitmap in the driver's pixel format
N *
N * @api
N */
Nvoid gdispGBlitArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer);
N#define gdispBlitAreaEx(x,y,cx,cy,sx,sy,rx,b)			gdispGBlitArea(GDISP,x,y,cx,cy,sx,sy,rx,b)
N
N/**
N * @brief   Draw a rectangular box.
N *
N * @param[in] g 		The display to use
N * @param[in] x,y		The start position
N * @param[in] cx,cy		The size of the box (outside dimensions)
N * @param[in] color		The color to use
N *
N * @api
N */
Nvoid gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color);
N#define gdispDrawBox(x,y,cx,cy,c)						gdispGDrawBox(GDISP,x,y,cx,cy,c)
N
N/* Streaming Functions */
N
N#if GDISP_NEED_STREAMING || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Start a streaming operation.
S	 * @details Stream data to a window on the display sequentially and very fast.
S	 * @pre		GDISP_NEED_STREAMING must be TRUE in your gfxconf.h
S	 * @note	While streaming is in operation - no other calls to GDISP functions
S	 * 			can be made (with the exception of @p gdispBlendColor() and streaming
S	 * 			functions). If a call is made (eg in a multi-threaded application) the other
S	 * 			call is blocked waiting for the streaming operation to finish.
S	 * @note	@p gdispStreamStop() must be called to finish the streaming operation.
S	 * @note	If more data is written than the defined area then the results are unspecified.
S	 * 			Some drivers may wrap back to the beginning of the area, others may just
S	 * 			ignore subsequent data.
S	 * @note	Unlike most operations that clip the defined area to the display to generate
S	 * 			a smaller active area, this call will just silently fail if any of the stream
S	 * 			region lies outside the current clipping area.
S	 * @note	A streaming operation may be terminated early (without writing to every location
S	 * 			in the stream area) by calling @p gdispStreamStop().
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The start position
S	 * @param[in] cx,cy		The size of the streamable area
S	 *
S	 * @api
S	 */
S	void gdispGStreamStart(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy);
S	#define gdispStreamStart(x,y,cx,cy)						gdispGStreamStart(GDISP,x,y,cx,cy)
S
S	/**
S	 * @brief   Send pixel data to the stream.
S	 * @details Write a pixel to the next position in the streamed area and increment the position
S	 * @pre		GDISP_NEED_STREAMING must be TRUE in your gfxconf.h
S	 * @pre		@p gdispStreamStart() has been called.
S	 * @note	If the gdispStreamStart() has not been called (or failed due to clipping), the
S	 * 			data provided here is simply thrown away.
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] color		The color of the pixel to write
S	 *
S	 * @api
S	 */
S	void gdispGStreamColor(GDisplay *g, color_t color);
S	#define gdispStreamColor(c)								gdispGStreamColor(GDISP,c)
S
S	/**
S	 * @brief   Finish the current streaming operation.
S	 * @details	Completes the current streaming operation and allows other GDISP calls to operate again.
S	 * @pre		GDISP_NEED_STREAMING must be TRUE in your gfxconf.h
S	 * @pre		@p gdispStreamStart() has been called.
S	 * @note	If the gdispStreamStart() has not been called (or failed due to clipping), this
S	 * 			call is simply ignored.
S	 *
S	 * @param[in] g 		The display to use
S	 *
S	 * @api
S	 */
S	void gdispGStreamStop(GDisplay *g);
S	#define gdispStreamStop()								gdispGStreamStop(GDISP)
N#endif
N
N/* Clipping Functions */
N
N#if GDISP_NEED_CLIP || defined(__DOXYGEN__)
X#if -1 || 0L
N	/**
N	 * @brief   Clip all drawing to the defined area.
N	 * @pre		GDISP_NEED_CLIP must be TRUE in your gfxconf.h
N	 *
N	 * @param[in] g 		The display to use
N	 * @param[in] x,y		The start position
N	 * @param[in] cx,cy		The size of the clip area
N	 *
N	 * @api
N	 */
N	void gdispGSetClip(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy);
N	#define gdispSetClip(x,y,cx,cy)							gdispGSetClip(GDISP,x,y,cx,cy)
N#endif
N
N/* Circle Functions */
N
N#if GDISP_NEED_CIRCLE || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Draw a circle.
S	 * @pre		GDISP_NEED_CIRCLE must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the circle
S	 * @param[in] radius	The radius of the circle
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawCircle(GDisplay *g, coord_t x, coord_t y, coord_t radius, color_t color);
S	#define gdispDrawCircle(x,y,r,c)						gdispGDrawCircle(GDISP,x,y,r,c)
S
S	/**
S	 * @brief   Draw a filled circle.
S	 * @pre		GDISP_NEED_CIRCLE must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the circle
S	 * @param[in] radius	The radius of the circle
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGFillCircle(GDisplay *g, coord_t x, coord_t y, coord_t radius, color_t color);
S	#define gdispFillCircle(x,y,r,c)						gdispGFillCircle(GDISP,x,y,r,c)
N#endif
N
N/* Ellipse Functions */
N
N#if GDISP_NEED_ELLIPSE || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Draw an ellipse.
S	 * @pre		GDISP_NEED_ELLIPSE must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the ellipse
S	 * @param[in] a,b		The dimensions of the ellipse
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawEllipse(GDisplay *g, coord_t x, coord_t y, coord_t a, coord_t b, color_t color);
S	#define gdispDrawEllipse(x,y,a,b,c)						gdispGDrawEllipse(GDISP,x,y,a,b,c)
S
S	/**
S	 * @brief   Draw a filled ellipse.
S	 * @pre		GDISP_NEED_ELLIPSE must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the ellipse
S	 * @param[in] a,b		The dimensions of the ellipse
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGFillEllipse(GDisplay *g, coord_t x, coord_t y, coord_t a, coord_t b, color_t color);
S	#define gdispFillEllipse(x,y,a,b,c)						gdispGFillEllipse(GDISP,x,y,a,b,c)
N#endif
N
N/* Arc Functions */
N#if GDISP_NEED_ARCSECTORS || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief	Draw a selection of 45 degree arcs of a circle
S	 * @pre		GDISP_NEED_ARCSECTORS must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the circle
S	 * @param[in] radius	The radius of the circle
S	 * @param[in] sectors	Bits determine which sectors are drawn.
S	 * 						Bits go anti-clockwise from the 0 degree mark (y = 0, x is positive), as follows:
S	 *  						bit 0 - upper right right		  -----
S	 *  						bit 1 - upper upper right		 /2   1\
S	 *  						bit 2 - upper upper left		/3     0\
S	 *  						bit 3 - upper left  left		\4     7/
X
S	 *  						bit 4 - lower left  left		 \5   6/
S	 *  						bit 5 - lower lower left		  -----
S	 *  						bit 6 - lower lower right
S	 *  						bit 7 - lower left  left
S	 * @param[in] color		The color to use
S	 *
S	 * @note	This is a more limited versions of the general arc drawing routine. It
S	 * 			doesn't require trig libraries or tables or floating point and is smaller in code size.
S	 * 			There is probably little point in including both this and the general
S	 * 			arc routine as the general arc routine can do everything this can do.
S	 *
S	 * @api
S	 */
S	void gdispGDrawArcSectors(GDisplay *g, coord_t x, coord_t y, coord_t radius, uint8_t sectors, color_t color);
S	#define gdispDrawArcSectors(x,y,r,s,c)						gdispGDrawArcSectors(GDISP,x,y,r,s,c)
S
S	/**
S	 * @brief	Fill a selection of 45 degree arcs of a circle
S	 * @pre		GDISP_NEED_ARCSECTORS must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The center of the circle
S	 * @param[in] radius	The radius of the circle
S	 * @param[in] sectors	Bits determine which sectors are drawn.
S	 * 						Bits go anti-clockwise from the 0 degree mark (y = 0, x is positive), as follows:
S	 *  						bit 0 - upper right right		  -----
S	 *  						bit 1 - upper upper right		 /2   1\
S	 *  						bit 2 - upper upper left		/3     0\
S	 *  						bit 3 - upper left  left		\4     7/
X
S	 *  						bit 4 - lower left  left		 \5   6/
S	 *  						bit 5 - lower lower left		  -----
S	 *  						bit 6 - lower lower right
S	 *  						bit 7 - lower left  left
S	 * @param[in] color		The color to use
S	 *
S	 * @note	This is a more limited versions of the general arc filling routine. It
S	 * 			doesn't require trig libraries or tables or floating point and is smaller in code size.
S	 * 			There is probably little point in including both this and the general
S	 * 			arc routine as the general arc routine can do everything this can do.
S	 *
S	 * @api
S	 */
S	void gdispGFillArcSectors(GDisplay *g, coord_t x, coord_t y, coord_t radius, uint8_t sectors, color_t color);
S	#define gdispFillArcSectors(x,y,r,s,c)						gdispGFillArcSectors(GDISP,x,y,r,s,c)
N#endif
N
N#if GDISP_NEED_ARC || defined(__DOXYGEN__)
X#if 0 || 0L
S	/*
S	 * @brief	Draw an arc.
S	 * @pre		GDISP_NEED_ARC must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x0,y0		The center point
S	 * @param[in] radius	The radius of the arc
S	 * @param[in] start		The start angle (0 to 360)
S	 * @param[in] end		The end angle (0 to 360)
S	 * @param[in] color		The color of the arc
S	 *
S	 * @note		If you are just doing 45 degree angles consider using @p gdispDrawArcSectors() instead.
S	 * @note		This routine requires trig support. It can either come from your C runtime library
S	 * 				cos() and sin() which requires floating point support (and is slow), or you can define GFX_USE_GMISC
S	 * 				and either GMISC_NEED_FIXEDTRIG or GMISC_NEED_FASTTRIG.
S	 * 				GMISC_NEED_FASTTRIG uses table based floating point trig operations.
S	 * 				GMISC_NEED_FIXEDTRIG uses fixed point integer trig operations.
S	 * 				Note accuracy on both the table based options are more than adequate for the one degree
S	 * 				resolution provided by these arc routines. Both are much faster than your C runtime library.
S	 *
S	 * @api
S	 */
S	void gdispGDrawArc(GDisplay *g, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle, color_t color);
S	#define gdispDrawArc(x,y,r,s,e,c)						gdispGDrawArc(GDISP,x,y,r,s,e,c)
S
S	/*
S	 * @brief	Draw a filled arc.
S	 * @pre		GDISP_NEED_ARC must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x0,y0		The center point
S	 * @param[in] radius	The radius of the arc
S	 * @param[in] start		The start angle (0 to 360)
S	 * @param[in] end		The end angle (0 to 360)
S	 * @param[in] color		The color of the arc
S	 *
S	 * @note		If you are just doing 45 degree angles consider using @p gdispFillArcSectors() instead.
S	 * @note		This routine requires trig support. It can either come from your C runtime library
S	 * 				cos() and sin() which requires floating point support (and is slow), or you can define GFX_USE_GMISC
S	 * 				and either GMISC_NEED_FIXEDTRIG or GMISC_NEED_FASTTRIG.
S	 * 				GMISC_NEED_FASTTRIG uses table based floating point trig operations.
S	 * 				GMISC_NEED_FIXEDTRIG uses fixed point integer trig operations.
S	 * 				Note accuracy on both the table based options are more than adequate for the one degree
S	 * 				resolution provided by these arc routines. Both are much faster than your C runtime library.
S	 *
S	 * @api
S	 */
S	void gdispGFillArc(GDisplay *g, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle, color_t color);
S	#define gdispFillArc(x,y,r,s,e,c)						gdispGFillArc(GDISP,x,y,r,s,e,c)
N#endif
N
N/* Read a pixel Function */
N
N#if GDISP_NEED_PIXELREAD || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Get the color of a pixel.
S	 * @return  The color of the pixel.
S	 * @pre		GDISP_NEED_PIXELREAD must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position of the pixel
S	 *
S	 * @api
S	 */
S	color_t gdispGGetPixelColor(GDisplay *g, coord_t x, coord_t y);
S	#define gdispGetPixelColor(x,y)							gdispGGetPixelColor(GDISP,x,y)
N#endif
N
N/* Scrolling Function - clears the area scrolled out */
N
N#if GDISP_NEED_SCROLL || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Scroll vertically a section of the screen.
S	 * @pre		GDISP_NEED_SCROLL must be set to TRUE in gfxconf.h
S	 * @note    Optional.
S	 * @note    If lines is >= cy, it is equivelent to an area fill with bgcolor.
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x, y		The start of the area to be scrolled
S	 * @param[in] cx, cy	The size of the area to be scrolled
S	 * @param[in] lines		The number of lines to scroll (Can be positive or negative)
S	 * @param[in] bgcolor	The color to fill the newly exposed area.
S	 *
S	 * @api
S	 */
S	void gdispGVerticalScroll(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, int lines, color_t bgcolor);
S	#define gdispVerticalScroll(x,y,cx,cy,l,b)				gdispGVerticalScroll(GDISP,x,y,cx,cy,l,b)
N#endif
N
N/* Set driver specific control */
N
N#if GDISP_NEED_CONTROL || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Control hardware specific parts of the display. eg powermodes, backlight etc
S	 * @pre		GDISP_NEED_CONTROL must be TRUE in your gfxconf.h
S	 * @note    Depending on the hardware implementation this function may not
S	 *          support some codes. They will be ignored.
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] what		what you want to control
S	 * @param[in] value		The value to be assigned
S	 *
S	 * @api
S	 */
S	void gdispGControl(GDisplay *g, unsigned what, void *value);
S	#define gdispControl(w,v)								gdispGControl(GDISP,w,v)
N#endif
N
N/* Query driver specific data */
N
N#if GDISP_NEED_QUERY || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Query a property of the display.
S	 * @pre		GDISP_NEED_QUERY must be TRUE in your gfxconf.h
S	 * @note    The result must be typecast to the correct type.
S	 * @note    An unsupported query will return (void *)-1.
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] what		What to query
S	 *
S	 * @api
S	 */
S	void *gdispGQuery(GDisplay *g, unsigned what);
S	#define gdispQuery(w)									gdispGQuery(GDISP,w)
N#endif
N
N#if GDISP_NEED_CONVEX_POLYGON || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Draw an enclosed polygon (convex, non-convex or complex).
S	 * @pre		GDISP_NEED_CONVEX_POLYGON must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] tx, ty	Transform all points in pntarray by tx, ty
S	 * @param[in] pntarray	An array of points
S	 * @param[in] cnt		The number of points in the array
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawPoly(GDisplay *g, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt, color_t color);
S	#define gdispDrawPoly(x,y,p,i,c)						gdispGDrawPoly(GDISP,x,y,p,i,c)
S
S	/**
S	 * @brief   Fill a convex polygon
S	 * @details Doesn't handle non-convex or complex polygons.
S	 * @pre		GDISP_NEED_CONVEX_POLYGON must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] tx, ty	Transform all points in pntarray by tx, ty
S	 * @param[in] pntarray	An array of points
S	 * @param[in] cnt		The number of points in the array
S	 * @param[in] color		The color to use
S	 *
S	 * @note	Convex polygons are those that have no internal angles. That is;
S	 * 			you can draw a line from any point on the polygon to any other point
S	 * 			on the polygon without it going outside the polygon. In our case we generalise
S	 * 			this a little by saying that an infinite horizontal line (at any y value) will cross
S	 * 			no more than two edges on the polygon. Some non-convex polygons do fit this criteria
S	 * 			and can therefore be drawn.
S	 * @note	This routine is designed to be very efficient with even simple display hardware.
S	 *
S	 * @api
S	 */
S	void gdispGFillConvexPoly(GDisplay *g, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt, color_t color);
S	#define gdispFillConvexPoly(x,y,p,i,c)					gdispGFillConvexPoly(GDISP,x,y,p,i,c)
S
S	/**
S	 * @brief   Draw a line with a specified thickness
S	 * @details The line thickness is specified in pixels. The line ends can
S	 *          be selected to be either flat or round.
S	 * @pre		GDISP_NEED_CONVEX_POLYGON must be TRUE in your gfxconf.h
S	 * @note	Uses gdispGFillConvexPoly() internally to perform the drawing.
S	 *
S	 * @param[in] g			The display to use
S	 * @param[in] x0,y0		The start position
S	 * @param[in] x1,y1		The end position
S	 * @param[in] color		The color to use
S	 * @param[in] width		The width of the line
S	 * @param[in] round		Use round ends for the line
S	 *
S	 * @api
S	 */
S	void gdispGDrawThickLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color, coord_t width, bool_t round);
S	#define gdispDrawThickLine(x0,y0,x1,y1,c,w,r)			gdispGDrawThickLine(GDISP,x0,y0,x1,y1,c,w,r)
N#endif
N
N/* Text Functions */
N
N#if GDISP_NEED_TEXT || defined(__DOXYGEN__)
X#if 0 || 0L
S	/**
S	 * @brief   Draw a text character.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text
S	 * @param[in] c			The character to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color);
S	#define	gdispDrawChar(x,y,s,f,c)						gdispGDrawChar(GDISP,x,y,s,f,c)
S
S	/**
S	 * @brief   Draw a text character with a filled background.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text
S	 * @param[in] c			The character to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 * @param[in] bgcolor	The background color to use
S	 *
S	 * @api
S	 */
S	void gdispGFillChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color, color_t bgcolor);
S	#define	gdispFillChar(x,y,s,f,c,b)						gdispGFillChar(GDISP,x,y,s,f,c,b)
S
S	/**
S	 * @brief   Draw a text string.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text
S	 * @param[in] str		The string to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color);
S	#define	gdispDrawString(x,y,s,f,c)						gdispGDrawString(GDISP,x,y,s,f,c)
S
S	/**
S	 * @brief   Draw a text string.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text
S	 * @param[in] str		The string to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 * @param[in] bgcolor	The background color to use
S	 *
S	 * @api
S	 */
S	void gdispGFillString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color, color_t bgcolor);
S	#define	gdispFillString(x,y,s,f,c,b)					gdispGFillString(GDISP,x,y,s,f,c,b)
S
S	/**
S	 * @brief   Draw a text string vertically centered within the specified box.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text (need to define top-right or base-line - check code)
S	 * @param[in] cx,cy		The width and height of the box
S	 * @param[in] str		The string to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 * @param[in] justify	Justify the text left, center or right within the box
S	 *
S	 * @api
S	 */
S	void gdispGDrawStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, justify_t justify);
S	#define	gdispDrawStringBox(x,y,cx,cy,s,f,c,j)			gdispGDrawStringBox(GDISP,x,y,cx,cy,s,f,c,j)
S
S	/**
S	 * @brief   Draw a text string vertically centered within the specified box. The box background is filled with the specified background color.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 * @note    The entire box is filled
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The position for the text (need to define top-right or base-line - check code)
S	 * @param[in] cx,cy		The width and height of the box
S	 * @param[in] str		The string to draw
S	 * @param[in] font		The font to use
S	 * @param[in] color		The color to use
S	 * @param[in] bgColor	The background color to use
S	 * @param[in] justify	Justify the text left, center or right within the box
S	 *
S	 * @api
S	 */
S	void gdispGFillStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, color_t bgColor, justify_t justify);
S	#define	gdispFillStringBox(x,y,cx,cy,s,f,c,b,j)			gdispGFillStringBox(GDISP,x,y,cx,cy,s,f,c,b,j)
S
S	/**
S	 * @brief   Get a metric of a font.
S	 * @return  The metric requested in pixels.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] font    The font to test
S	 * @param[in] metric  The metric to measure
S	 *
S	 * @api
S	 */
S	coord_t gdispGetFontMetric(font_t font, fontmetric_t metric);
S
S	/**
S	 * @brief   Get the pixel width of a character.
S	 * @return  The width of the character in pixels. Does not include any between character padding.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] c       The character to draw
S	 * @param[in] font    The font to use
S	 *
S	 * @api
S	 */
S	coord_t gdispGetCharWidth(char c, font_t font);
S
S	/**
S	 * @brief   Get the pixel width of a string of a given character length.
S	 * @return  The width of the string in pixels.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @note	Passing 0 to count has the same effect as calling gdispGetStringWidt()
S	 *
S	 * @param[in] str     The string to measure
S	 * @param[in] font    The font to use
S	 * @param[in] count   The number of characters to take into account
S	 *
S	 * @api
S	 */
S	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count);
S
S	/**
S	 * @brief   Get the pixel width of an entire string.
S	 * @return  The width of the string in pixels.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] str     The string to measure
S	 * @param[in] font    The font to use
S	 *
S	 * @api
S	 */
S	coord_t gdispGetStringWidth(const char* str, font_t font);
S
S	/**
S	 * @brief	Find a font and return it.
S	 * @details	The supplied name is matched against the font name. A '*' will replace 0 or more characters.
S	 * @return	Returns a font or NULL if no matching font could be found.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] name		The font name to find.
S	 *
S	 * @note				Wildcard matching will match the shortest possible match.
S	 *
S	 * @api
S	 */
S	font_t gdispOpenFont(const char *name);
S
S	/**
S	 * @brief	Release a font after use.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] font		The font to release.
S	 *
S	 * @api
S	 */
S	void gdispCloseFont(font_t font);
S
S	/**
S	 * @brief	Make a scaled copy of an existing font.
S	 * @details	Allocates memory for new font metadata using gfxAlloc, remember to close font after use!
S	 * @return	A new font or NULL if out of memory.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] font	The base font to use.
S	 * @param[in] scale_x	The scale factor in horizontal direction.
S	 * @param[in] scale_y	The scale factor in vertical direction.
S	 */
S	font_t gdispScaleFont(font_t font, uint8_t scale_x, uint8_t scale_y);
S
S	/**
S	 * @brief	Get the name of the specified font.
S	 * @returns	The name of the font.
S	 * @pre		GDISP_NEED_TEXT must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] font		The font to get the name for.
S	 *
S	 * @api
S	 */
S	const char *gdispGetFontName(font_t font);
N#endif
N
N/* Extra Arc Functions */
N
N#if GDISP_NEED_ARC || GDISP_NEED_ARCSECTORS || defined(__DOXYGEN__)
X#if 0 || 0 || 0L
S	/**
S	 * @brief   Draw a rectangular box with rounded corners
S	 * @pre		GDISP_NEED_ARC or GDISP_NEED_ARCSECTORS must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The start position
S	 * @param[in] cx,cy		The size of the box (outside dimensions)
S	 * @param[in] radius	The radius of the rounded corners
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGDrawRoundedBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t radius, color_t color);
S	#define gdispDrawRoundedBox(x,y,cx,cy,r,c)		gdispGDrawRoundedBox(GDISP,x,y,cx,cy,r,c)
S
S	/**
S	 * @brief   Draw a filled rectangular box with rounded corners
S	 * @pre		GDISP_NEED_ARC or GDISP_NEED_ARCSECTORS must be TRUE in your gfxconf.h
S	 *
S	 * @param[in] g 		The display to use
S	 * @param[in] x,y		The start position
S	 * @param[in] cx,cy		The size of the box (outside dimensions)
S	 * @param[in] radius	The radius of the rounded corners
S	 * @param[in] color		The color to use
S	 *
S	 * @api
S	 */
S	void gdispGFillRoundedBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t radius, color_t color);
S	#define gdispFillRoundedBox(x,y,cx,cy,r,c)		gdispGFillRoundedBox(GDISP,x,y,cx,cy,r,c)
N#endif
N
N/*
N * Macro definitions
N */
N
N/* Now obsolete functions */
N#define gdispBlitArea(x, y, cx, cy, buffer)			gdispGBlitArea(GDISP, x, y, cx, cy, 0, 0, cx, buffer)
N
N/* Macro definitions for common gets and sets */
N
N/**
N * @brief   Set the display power mode.
N * @note    Ignored if not supported by the display.
N *
N * @param[in] g 			The display to use
N * @param[in] powerMode		The new power mode
N *
N * @api
N */
N#define gdispGSetPowerMode(g, powerMode)			gdispGControl((g), GDISP_CONTROL_POWER, (void *)(unsigned)(powerMode))
N#define gdispSetPowerMode(powerMode)				gdispGControl(GDISP, GDISP_CONTROL_POWER, (void *)(unsigned)(powerMode))
N
N/**
N * @brief   Set the display orientation.
N * @note    Ignored if not supported by the display.
N *
N * @param[in] g 					The display to use
N * @param[in] newOrientation		The new orientation
N *
N * @api
N */
N#define gdispGSetOrientation(g, newOrientation)		gdispGControl((g), GDISP_CONTROL_ORIENTATION, (void *)(unsigned)(newOrientation))
N#define gdispSetOrientation(newOrientation)			gdispGControl(GDISP, GDISP_CONTROL_ORIENTATION, (void *)(unsigned)(newOrientation))
N
N/**
N * @brief   Set the display backlight.
N * @note    Ignored if not supported by the display.
N *
N * @param[in] g 			The display to use
N * @param[in] percent		The new brightness (0 - 100%)
N *
N * @note	For displays that only support backlight off and on,
N * 			0 = off, anything else = on
N *
N * @api
N */
N#define gdispGSetBacklight(g, percent)				gdispGControl((g), GDISP_CONTROL_BACKLIGHT, (void *)(unsigned)(percent))
N#define gdispSetBacklight(percent)					gdispGControl(GDISP, GDISP_CONTROL_BACKLIGHT, (void *)(unsigned)(percent))
N
N/**
N * @brief   Set the display contrast.
N * @note    Ignored if not supported by the display.
N *
N * @param[in] g 			The display to use
N * @param[in] percent		The new contrast (0 - 100%)
N *
N * @api
N */
N#define gdispGSetContrast(g, percent)				gdispGControl((g), GDISP_CONTROL_CONTRAST, (void *)(unsigned)(percent))
N#define gdispSetContrast(percent)					gdispGControl(GDISP, GDISP_CONTROL_CONTRAST, (void *)(unsigned)(percent))
N
N/* More interesting macros */
N
N/**
N * @brief   Reset the clip area to the full screen
N *
N * @param[in] g 		The display to use
N *
N * @api
N */
N#define gdispGUnsetClip(g)							gdispGSetClip((g),0,0,gdispGGetWidth(g),gdispGGetHeight(g))
N#define gdispUnsetClip()							gdispGUnsetClip(GDISP)
N
N#ifdef __cplusplus
S}
N#endif
N
N#if GDISP_NEED_IMAGE || defined(__DOXYGEN__)
X#if 0 || 0L
S	#include "gdisp_image.h"
N#endif
N#if GDISP_NEED_PIXMAP || defined(__DOXYGEN__)
X#if 0 || 0L
S	#include "gdisp_pixmap.h"
N#endif
N
N
N#endif /* GFX_USE_GDISP */
N
N#endif /* _GDISP_H */
N/** @} */
L 209 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gwin/gwin.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gwin/gwin.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin.h
N *
N * @defgroup Window Window
N * @ingroup Windows
N *
N * @brief		The basic window implementation (base class).
N *
N * @details		GWIN provides a basic window manager which allows it to easily
N *				create and destroy different windows at runtime. Each window
N *				will have it's own properties such as colors as well as
N *				it's own drawing origin.
N *
N * @pre		GFX_USE_GWIN must be set to TRUE in your gfxconf.h
N * @{
N */
N
N#ifndef _GWIN_H
N#define _GWIN_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/* Forward declaration */
Stypedef struct GWindowObject *GHandle;
S
S/**
S * @brief	A window object structure
S * @note	Do not access the members directly. Treat it as a black-box and use the method functions.
S * @{
S */
Stypedef struct GWindowObject {
S	#if GWIN_NEED_WINDOWMANAGER
S		// This MUST be the first member of the structure
S		gfxQueueASyncItem	wmq;				/**< The next window (for the window manager) */
S	#endif
S	const struct gwinVMT*	vmt;				/**< The VMT for this GWIN */
S	GDisplay *				display;			/**< The display this window is on */
S	coord_t					x;					/**< The position relative to the screen */
S	coord_t					y;					/**< The position relative to the screen */
S	coord_t					width;				/**< The width of this window */
S	coord_t					height;				/**< The height of this window */
S	color_t					color;				/**< The current foreground drawing color */
S	color_t					bgcolor;			/**< The current background drawing color */
S	uint32_t				flags;				/**< Window flags (the meaning is private to the GWIN class) */
S	#if GDISP_NEED_TEXT
S		font_t				font;				/**< The current font */
S	#endif
S	#if GWIN_NEED_CONTAINERS
S		GHandle				parent;				/**< The parent window */
S	#endif
S} GWindowObject, * GHandle;
S/** @} */
S
S/**
S * @brief	The structure to initialise a GWIN.
S *
S * @note	Some gwin's will need extra parameters.
S * @note	The dimensions and position may be changed to fit on the real screen.
S * @note	If you create this structure on the stack, you should always memset
S * 			it to all zero's first in case a future version of the software
S * 			add's extra fields. Alternatively you can use @p gwinClearInit()
S * 			to clear it.
S *
S * @{
S */
Stypedef struct GWindowInit {
S	coord_t			x;								/**< The initial position relative to its parent */
S	coord_t			y;								/**< The initial position relative to its parent */
S	coord_t			width;							/**< The width */
S	coord_t			height;							/**< The height */
S	bool_t			show;							/**< Should the window be visible initially */
S	#if GWIN_NEED_CONTAINERS
S		GHandle		parent;							/**< The parent - must be a container or NULL */
S	#endif
S} GWindowInit;
S/** @} */
S
S/**
S * @brief	A window's minimized, maximized or normal size
S */
Stypedef enum { GWIN_NORMAL, GWIN_MAXIMIZE, GWIN_MINIMIZE } GWindowMinMax;
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/*-------------------------------------------------
S * Window Manager functions
S *-------------------------------------------------*/
S
S#if GWIN_NEED_WINDOWMANAGER || defined(__DOXYGEN__)
S	// Forward definition
S	struct GWindowManager;
S
S	/**
S	 * @brief   Set the window manager for the GWIN system.
S	 *
S	 * @param[in] gwm		The window manager to use. Can be NULL to turn off the existing window manager.
S	 *
S	 * @note				A window manager is responsible for handling when window visibility is changed or
S	 * 						a window is resized for moved. Note that only saved window states will be redrawn. Each
S	 * 						window type can save different information (or none at all). See the documentation on each window
S	 * 						type to see which information it saves (and can therefore be automatically redrawn).
S	 * 						For window types that do not save any state information, the window manager determines what to do.
S	 * 						Generally it will just clear the window to its background color.
S	 *
S	 * @api
S	 */
S	void gwinSetWindowManager(struct GWindowManager *gwm);
S#endif
S
S/*-------------------------------------------------
S * Functions that affect all windows
S *-------------------------------------------------*/
S
S	/**
S	 * @brief	Clear a GWindowInit structure to all zero's
S	 * @note	This function is provided just to prevent problems
S	 * 			on operating systems where using memset() causes issues
S	 * 			in the users application.
S	 *
S	 * @param[in] pwi	The GWindowInit structure to clear
S	 *
S	 * @api
S	 */
S	void gwinClearInit(GWindowInit *pwi);
S
S	/**
S	 * @brief	Set the default foreground color for all new GWIN windows
S	 *
S	 * @param[in] clr	The color to be set
S	 *
S	 * @api
S	 */
S	void gwinSetDefaultColor(color_t clr);
S
S	/**
S	 * @brief	Get the default foreground color for all new GWIN windows
S	 *
S	 * @return	The current default color for all new GWIN windows
S	 *
S	 * @api
S	 */
S	color_t gwinGetDefaultColor(void);
S
S	/**
S	 * @brief	Set the default background color for all new GWIN windows
S	 *
S	 * @param[in] bgclr	The background color
S	 *
S	 * @api
S	 */
S	void gwinSetDefaultBgColor(color_t bgclr);
S
S	/**
S	 * @brief	Get the default background color for all new GWIN windows
S	 *
S	 * @return	The current default background color for all new GWIN windows
S	 *
S	 * @api
S	 */
S	color_t gwinGetDefaultBgColor(void);
S
S	#if GDISP_NEED_TEXT || defined(__DOXYGEN__)
S		/**
S		 * @brief	Set the default font for all new GWIN windows
S		 *
S		 * @param[in] font	The new font to be set
S		 *
S		 * @api
S		 */
S		void gwinSetDefaultFont(font_t font);
S
S		/**
S		 * @brief	Get the current default font
S		 *
S		 * @return	The current default font
S		 *
S		 * @api
S		 */
S		font_t gwinGetDefaultFont(void);
S	#endif
S
S/*-------------------------------------------------
S * Base functions
S *-------------------------------------------------*/
S
S	/**
S	 * @brief   Create a basic window.
S	 * @return  NULL if there is no resultant drawing area, otherwise a window handle.
S	 *
S	 * @param[in] g			The GDisplay to display this window on
S	 * @param[in] pgw		The window structure to initialize. If this is NULL the structure is dynamically allocated.
S	 * @param[in] pInit		How to initialise the window
S	 *
S	 * @note				The drawing color and the background color get set to the current defaults. If you haven't called
S	 * 						@p gwinSetDefaultColor() or @p gwinSetDefaultBgColor() then these are White and Black respectively.
S	 * @note				The font gets set to the current default font. If you haven't called @p gwinSetDefaultFont() then there
S	 * 						is no default font and text drawing operations will no nothing.
S	 * @note				A basic window does not save the drawing state. It is not automatically redrawn if the window is moved or
S	 * 						its visibility state is changed.
S	 *
S	 * @api
S	 */
S	GHandle gwinGWindowCreate(GDisplay *g, GWindowObject *pgw, const GWindowInit *pInit);
S	#define gwinWindowCreate(pgw, pInit)		gwinGWindowCreate(GDISP, pgw, pInit);
S
S	/**
S	 * @brief   Destroy a window (of any type). Releases any dynamically allocated memory.
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	void gwinDestroy(GHandle gh);
S
S	/**
S	 * @brief	Get the real class name of the GHandle
S	 * @details	Returns a string describing the object class.
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @return	A string describing the object class.
S	 *
S	 * @api
S	 */
S	const char* gwinGetClassName(GHandle gh);
S
S	/**
S	 * @brief	Get an ID that uniquely describes the class of the GHandle
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetClassID(gh)		((void *)((gh)->vmt))
S
S	/**
S	 * @brief	Get the X coordinate of the window
S	 * @details	Returns the X coordinate of the origin of the window.
S	 *			The coordinate is relative to the physical screen zero point.
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetScreenX(gh)			((gh)->x)
S
S	/**
S	 * @brief	Get the Y coordinate of the window
S	 * @details	Returns the Y coordinate of the origin of the window.
S	 *			The coordinate is relative to the physical screen zero point.
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetScreenY(gh)			((gh)->y)
S
S	/**
S	 * @brief	Get the width of the window
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetWidth(gh)			((gh)->width)
S
S	/**
S	 * @brief	Get the height of the window
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetHeight(gh)			((gh)->height)
S
S	/**
S	 * @brief	Set foreground color
S	 * @details Set the color which will be used to draw
S	 *
S	 * @param[in] gh	The window
S	 * @param[in] clr	The color to be set
S	 *
S	 * @api
S	 */
S	#define gwinSetColor(gh, clr)		(gh)->color = (clr)
S
S	/**
S	 * @brief	Set background color
S	 * @details	Set the color which will be used as background
S	 * @note	gwinClear() must be called to set the background color
S	 *
S	 * @param[in] gh	The window
S	 * @param[in] bgclr	The background color
S	 *
S	 * @api
S	 */
S	#define gwinSetBgColor(gh, bgclr)	(gh)->bgcolor = (bgclr)
S
S	/**
S	 * @brief	Get the foreground color of a window
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetColor(gh)			(gh)->color
S
S	/**
S	 * @brief	Get the background color of a window
S	 *
S	 * @param[in] gh	The window
S	 *
S	 * @api
S	 */
S	#define gwinGetBgColor(gh)			(gh)->bgcolor
S
S	/**
S	 * @brief	Sets whether a window is visible or not
S	 *
S	 * @param[in] gh		The window
S	 * @param[in] visible	Whether the window should be visible or not
S	 *
S	 * @note	When a window is marked as not visible, drawing operations
S	 * 			on the window do nothing.
S	 * @note	When a window is marked as visible, it is not automatically
S	 * 			redrawn as many window types don't remember their drawing state.
S	 * 			Widgets such as Buttons, Sliders etc will be redrawn.
S	 * @note	If there is no window manager in use, when a window is marked
S	 * 			as not visible, nothing is done to remove the window from the screen.
S	 * 			When there is a window manager, it is up to the window manager to
S	 * 			handle what happens.
S	 * @note	Even when you mark a window as visible, it may still not be displayed
S	 * 			if it's parent is invisible. When the parent becomes visible this child
S	 * 			will automatically be shown because it is already marked as visible.
S	 *
S	 * @api
S	 */
S	void gwinSetVisible(GHandle gh, bool_t visible);
S
S	/**
S	 * @brief	Makes a widget become visible
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	#define gwinShow(gh)		gwinSetVisible(gh, TRUE)
S
S	/**
S	 * @brief	Makes a widget become invisible
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	#define gwinHide(gh)		gwinSetVisible(gh, FALSE)
S
S	/**
S	 * @brief	Gets the visibility of a window
S	 * @return	TRUE if visible
S	 *
S	 * @note	It is possible for a child to be marked as visible by @p gwinSetVisible()
S	 * 			but for this call to return FALSE if one of its parents are not visible.
S	 *
S	 * @param[in] gh		The window
S	 *
S	 * @api
S	 */
S	bool_t gwinGetVisible(GHandle gh);
S
S	/**
S	 * @brief	Enable or disable a window
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] enabled	Enable or disable the window
S	 *
S	 * @note	The window is automatically redrawn if it supports self-redrawing.
S	 * @note	Even when you mark a window as enabled, it may still remain disabled
S	 * 			if it's parent is disabled. When the parent becomes enabled this child
S	 * 			will automatically be enabled because it is already marked as enabled.
S	 *
S	 * @api
S	 */
S	void gwinSetEnabled(GHandle gh, bool_t enabled);
S
S	/**
S	 * @brief	Enables a widget
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	#define gwinEnable(gh)		gwinSetEnabled(gh, TRUE)
S
S	/**
S	 * @brief	Disables a widget
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	#define gwinDisable(gh)		gwinSetEnabled(gh, FALSE)
S
S	/**
S	 * @brief	Gets the enabled state of a window
S	 * @return	TRUE if enabled
S	 *
S	 * @note	It is possible for a child to be marked as enabled by @p gwinSetEnabled()
S	 * 			but for this call to return FALSE if one of its parents are not enabled.
S	 *
S	 * @param[in] gh		The window
S	 *
S	 * @api
S	 */
S	bool_t gwinGetEnabled(GHandle gh);
S
S	/**
S	 * @brief	Move a window
S	 *
S	 * @param[in] gh		The window
S	 * @param[in] x, y		The new position (screen relative) for this window
S	 *
S	 * @note	The final window position may not be the requested position. Windows
S	 * 			are clipped to the screen area and the window manager may also affect the position.
S	 * @note	The window is redrawn if it is visible. See the comments in @p gwinSetVisible()
S	 * 			with regard to what can be redrawn and what can't.
S	 * @note	It is up to the window manager to determine what happens with the screen area
S	 * 			uncovered by moving the window. When there is no window manager, nothing
S	 * 			is done with the uncovered area.
S	 *
S	 * @api
S	 */
S	void gwinMove(GHandle gh, coord_t x, coord_t y);
S
S	/**
S	 * @brief	Resize a window
S	 *
S	 * @param[in] gh				The window
S	 * @param[in] width, height		The new size of the window
S	 *
S	 * @note	The final window size may not be the requested size. Windows
S	 * 			are clipped to the screen area and the window manager may also affect the size.
S	 * @note	The window is redrawn if it is visible. See the comments in @p gwinSetVisible()
S	 * 			with regard to what can be redrawn and what can't.
S	 * @note	It is up to the window manager to determine what happens with any screen area
S	 * 			uncovered by resizing the window. When there is no window manager, nothing
S	 * 			is done with the uncovered area.
S	 *
S	 * @api
S	 */
S	void gwinResize(GHandle gh, coord_t width, coord_t height);
S
S	/**
S	 * @brief	Redraw a window
S	 *
S	 * @param[in] gh				The window
S	 *
S	 * @note	This is normally never required as windows and widgets will redraw as required.
S	 * 			Note that some windows are incapable of redrawing themselves as they don't save
S	 * 			their drawing state.
S	 *
S	 * @api
S	 */
S	void gwinRedraw(GHandle gh);
S
S	#if GWIN_NEED_WINDOWMANAGER || defined (__DOXYGEN__)
S		/**
S		 * @brief	Redraw a display
S		 *
S		 * @param[in] g				The display to redraw. Passing NULL will redraw all displays.
S		 * @param[in] preserve		Should the redraw try to preserve existing screen data for those
S		 * 							windows that can't redraw themselves?
S		 *
S		 * @note	This is normally never required as windows and widgets will redraw as required.
S		 * @note	Some windows are incapable of redrawing themselves as they don't save
S		 * 			their drawing state.
S		 * @note	This does not clear the background - just redraws the gwin windows (where possible)
S		 *
S		 * @api
S		 */
S		void gwinRedrawDisplay(GDisplay *g, bool_t preserve);
S
S		/**
S		 * @brief	Minimize, Maximize or Restore a window
S		 * @pre		GWIN_NEED_WINDOWMANAGER must be TRUE
S		 *
S		 * @param[in] gh				The window
S		 * @param[in] minmax			The new minimized/maximized state
S		 *
S		 * @note	The final window state may not be the requested state. Window Managers
S		 * 			do not need to implement changing the minmax state. If there is no
S		 * 			window manager this call is ignored.
S		 * @note	The window is redrawn if it is changed. See the comments in @p gwinSetVisible()
S		 * 			with regard to what can be redrawn and what can't.
S		 * @note	It is up to the window manager to determine what happens with any screen area
S		 * 			uncovered by resizing the window.
S		 * @note	When a window is minimised it may be asked to draw the window or the window
S		 * 			manager may draw the minimised window.
S		 *
S		 * @api
S		 */
S		void gwinSetMinMax(GHandle gh, GWindowMinMax minmax);
S
S		/**
S		 * @brief	Get the Minimized/Maximized state of a window
S		 * @pre		GWIN_NEED_WINDOWMANAGER must be TRUE
S		 *
S		 * @param[in] gh				The window
S		 *
S		 * @return	GWIN_NORMAL, GWIN_MAXIMIZE or GWIN_MINIMIZE
S		 *
S		 * @api
S		 */
S		GWindowMinMax gwinGetMinMax(GHandle gh);
S
S		/**
S		 * @brief	Raise a window to the top of the z-order
S		 * @pre		GWIN_NEED_WINDOWMANAGER must be TRUE
S		 *
S		 * @param[in] gh				The window
S		 *
S		 * @note	The window z-order is only supported by some window managers. See the comments
S		 * 			in @p gwinSetVisible() with regard to what can be redrawn and what can't.
S		 *
S		 * @api
S		 */
S		void gwinRaise(GHandle gh);
S
S		/**
S		 * @brief	Get the next window in the z-order
S		 * @return	The next window or NULL if no more windows
S		 *
S		 * @param[in] gh		The previous window or NULL to get the first window
S		 *
S		 * @note	This returns the next window in the system from top to bottom.
S		 * @note	Where there are parent child relationships, this ignores them
S		 * 			and will list all windows in the system. There is no defined
S		 * 			order between children of siblings and they can in fact be mixed
S		 * 			in order. The only relationship honored is that parents will be
S		 * 			listed before their children.
S		 *
S		 * @api
S		 */
S		GHandle gwinGetNextWindow(GHandle gh);
S
S		/**
S		 * @brief	Set a window or widget to flash
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] flash		Enable or disable the flashing of the window
S		 *
S		 * @note	The window is automatically redrawn if it supports self-redrawing.
S		 * @note	When a window is set to flash, its appearance changes in some
S		 * 			way every flash period (GWIN_FLASHING_PERIOD). How its appearance
S		 * 			changes depends on the draw for each window/widget.
S		 *
S		 * @pre		Requires GWIN_NEED_FLASHING to be TRUE
S		 *
S		 * @api
S		 */
S		void gwinSetFlashing(GHandle gh, bool_t flash);
S
S		/**
S		 * @brief	Enables flashing of a window or widget
S		 *
S		 * @param[in] gh		The window handle
S		 *
S		 * @api
S		 */
S		#define gwinFlash(gh)		gwinSetFlashing(gh, TRUE)
S
S		/**
S		 * @brief	Disables a widget
S		 *
S		 * @param[in] gh		The window handle
S		 *
S		 * @api
S		 */
S		#define gwinNoFlash(gh)		gwinSetFlashing(gh, FALSE)
S	#endif
S
S	#if GDISP_NEED_TEXT || defined(__DOXYGEN__)
S		/**
S		 * @brief   Set the current font for this window.
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] font		The font to use for text functions
S		 *
S		 * @api
S		 */
S		void gwinSetFont(GHandle gh, font_t font);
S	#endif
S
S/*-------------------------------------------------
S * Drawing functions
S *-------------------------------------------------*/
S
S	/**
S	 * @brief   Clear the window
S	 * @note	Uses the current background color to clear the window
S	 *
S	 * @param[in] gh		The window handle
S	 *
S	 * @api
S	 */
S	void gwinClear(GHandle gh);
S
S	/**
S	 * @brief   Set a pixel in the window
S	 * @note	Uses the current foreground color to set the pixel
S	 * @note	May leave GDISP clipping to this window's dimensions
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] x,y		The coordinates of the pixel
S	 *
S	 * @api
S	 */
S	void gwinDrawPixel(GHandle gh, coord_t x, coord_t y);
S
S	/**
S	 * @brief   Draw a line in the window
S	 * @note	Uses the current foreground color to draw the line
S	 * @note	May leave GDISP clipping to this window's dimensions
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] x0,y0		The start position
S	 * @param[in] x1,y1 	The end position
S	 *
S	 * @api
S	 */
S	void gwinDrawLine(GHandle gh, coord_t x0, coord_t y0, coord_t x1, coord_t y1);
S
S	/**
S	 * @brief   Draw a box in the window
S	 * @note	Uses the current foreground color to draw the box
S	 * @note	May leave GDISP clipping to this window's dimensions
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] x,y		The start position
S	 * @param[in] cx,cy		The size of the box (outside dimensions)
S	 *
S	 * @api
S	 */
S	void gwinDrawBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy);
S
S	/**
S	 * @brief   Fill an rectangular area in the window
S	 * @note	Uses the current foreground color to fill the box
S	 * @note	May leave GDISP clipping to this window's dimensions
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] x,y		The start position
S	 * @param[in] cx,cy		The size of the box (outside dimensions)
S	 *
S	 * @api
S	 */
S	void gwinFillArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy);
S
S	/**
S	 * @brief   Fill an area in the window using the supplied bitmap.
S	 * @details The bitmap is in the pixel format specified by the low level driver
S	 * @note	If GDISP_NEED_ASYNC is defined then the buffer must be static
S	 * 			or at least retained until this call has finished the blit. You can
S	 * 			tell when all graphics drawing is finished by @p gdispIsBusy() going FALSE.
S	 * @note	May leave GDISP clipping to this window's dimensions
S	 *
S	 * @param[in] gh		The window handle
S	 * @param[in] x, y		The start filled area
S	 * @param[in] cx, cy	The width and height to be filled
S	 * @param[in] srcx, srcy	The bitmap position to start the fill from
S	 * @param[in] srccx		The width of a line in the bitmap.
S	 * @param[in] buffer	The pixels to use to fill the area.
S	 *
S	 * @api
S	 */
S	void gwinBlitArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer);
S
S/*-------------------------------------------------
S * Circle, ellipse, arc and arc-sectors functions
S *-------------------------------------------------*/
S
S	#if GDISP_NEED_CIRCLE || defined(__DOXYGEN__)
S		/**
S		 * @brief   Draw a circle in the window.
S		 * @note	Uses the current foreground color to draw the circle
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x, y		The center of the circle
S		 * @param[in] radius	The radius of the circle
S		 *
S		 * @api
S		 */
S		void gwinDrawCircle(GHandle gh, coord_t x, coord_t y, coord_t radius);
S
S		/**
S		 * @brief   Draw a filled circle in the window.
S		 * @note	Uses the current foreground color to draw the filled circle
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x, y		The center of the circle
S		 * @param[in] radius	The radius of the circle
S		 *
S		 * @api
S		 */
S		void gwinFillCircle(GHandle gh, coord_t x, coord_t y, coord_t radius);
S	#endif
S
S	#if GDISP_NEED_ELLIPSE || defined(__DOXYGEN__)
S		/**
S		 * @brief   Draw an ellipse.
S		 * @note	Uses the current foreground color to draw the ellipse
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center of the ellipse
S		 * @param[in] a,b		The dimensions of the ellipse
S		 *
S		 * @api
S		 */
S		void gwinDrawEllipse(GHandle gh, coord_t x, coord_t y, coord_t a, coord_t b);
S
S		/**
S		 * @brief   Draw an filled ellipse.
S		 * @note	Uses the current foreground color to draw the filled ellipse
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center of the ellipse
S		 * @param[in] a,b		The dimensions of the ellipse
S		 *
S		 * @api
S		 */
S		void gwinFillEllipse(GHandle gh, coord_t x, coord_t y, coord_t a, coord_t b);
S	#endif
S
S	#if GDISP_NEED_ARC || defined(__DOXYGEN__)
S		/*
S		 * @brief	Draw an arc in the window.
S		 * @note	Uses the current foreground color to draw the arc
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center point
S		 * @param[in] radius	The radius of the arc
S		 * @param[in] start		The start angle (0 to 360)
S		 * @param[in] end		The end angle (0 to 360)
S		 *
S		 * @api
S		 */
S		void gwinDrawArc(GHandle gh, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle);
S
S		/*
S		 * @brief	Draw a filled arc in the window.
S		 * @note	Uses the current foreground color to draw the filled arc
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center point
S		 * @param[in] radius	The radius of the arc
S		 * @param[in] start		The start angle (0 to 360)
S		 * @param[in] end		The end angle (0 to 360)
S		 *
S		 * @api
S		 */
S		void gwinFillArc(GHandle gh, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle);
S	#endif
S
S	#if GDISP_NEED_ARCSECTORS || defined(__DOXYGEN__)
S		/*
S		 * @brief	Draw a selection of 45 degree arcs of a circle in the window.
S		 * @note	Uses the current foreground color to draw the arc sector
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center of the circle
S		 * @param[in] radius	The radius of the circle
S		 * @param[in] sectors	Bits determine which sectors are drawn.
S		 * 						Bits go anti-clockwise from the 0 degree mark (y = 0, x is positive), as follows:
S		 *  						bit 0 - upper right right		  -----
S		 *  						bit 1 - upper upper right		 /2   1\
S		 *  						bit 2 - upper upper left		/3     0\
S		 *  						bit 3 - upper left  left		\4     7/
X
S		 *  						bit 4 - lower left  left		 \5   6/
S		 *  						bit 5 - lower lower left		  -----
S		 *  						bit 6 - lower lower right
S		 *  						bit 7 - lower left  left
S		 *
S		 * @api
S		 */
S		void gwinDrawArcSectors(GHandle gh, coord_t x, coord_t y, coord_t radius, uint8_t sectors);
S
S		/*
S		 * @brief	Draw a filled selection of 45 degree arcs of a circle in the window.
S		 * @note	Uses the current foreground color to draw the arc sector
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The center of the circle
S		 * @param[in] radius	The radius of the circle
S		 * @param[in] sectors	Bits determine which sectors are drawn.
S		 * 						Bits go anti-clockwise from the 0 degree mark (y = 0, x is positive), as follows:
S		 *  						bit 0 - upper right right		  -----
S		 *  						bit 1 - upper upper right		 /2   1\
S		 *  						bit 2 - upper upper left		/3     0\
S		 *  						bit 3 - upper left  left		\4     7/
X
S		 *  						bit 4 - lower left  left		 \5   6/
S		 *  						bit 5 - lower lower left		  -----
S		 *  						bit 6 - lower lower right
S		 *  						bit 7 - lower left  left
S		 *
S		 * @api
S		 */
S		void gwinFillArcSectors(GHandle gh, coord_t x, coord_t y, coord_t radius, uint8_t sectors);
S	#endif
S
S/*-------------------------------------------------
S * Pixel read-back functions
S *-------------------------------------------------*/
S
S	#if GDISP_NEED_PIXELREAD || defined(__DOXYGEN__)
S		/**
S		 * @brief   Get the color of a pixel in the window.
S		 * @return  The color of the pixel.
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position in the window
S		 *
S		 * @api
S		 */
S		color_t gwinGetPixelColor(GHandle gh, coord_t x, coord_t y);
S	#endif
S
S/*-------------------------------------------------
S * Text functions
S *-------------------------------------------------*/
S
S	#if GDISP_NEED_TEXT || defined(__DOXYGEN__)
S		/**
S		 * @brief   Draw a text character at the specified position in the window.
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text
S		 * @param[in] c			The character to draw
S		 *
S		 * @api
S		 */
S		void gwinDrawChar(GHandle gh, coord_t x, coord_t y, char c);
S
S		/**
S		 * @brief   Draw a text character with a filled background at the specified position in the window.
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character and fills the background using the background drawing color
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text
S		 * @param[in] c			The character to draw
S		 *
S		 * @api
S		 */
S		void gwinFillChar(GHandle gh, coord_t x, coord_t y, char c);
S
S		/**
S		 * @brief   Draw a text string in the window
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text
S		 * @param[in] str		The string to draw
S		 *
S		 * @api
S		 */
S		void gwinDrawString(GHandle gh, coord_t x, coord_t y, const char *str);
S
S		/**
S		 * @brief   Draw a text string with a filled background in the window
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character and fills the background using the background drawing color
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text
S		 * @param[in] str		The string to draw
S		 *
S		 * @api
S		 */
S		void gwinFillString(GHandle gh, coord_t x, coord_t y, const char *str);
S
S		/**
S		 * @brief   Draw a text string verticly centered within the specified box.
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character.
S		 * @note    The specified box does not need to align with the window box
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text (need to define top-right or base-line - check code)
S		 * @param[in] cx,cy		The width and height of the box
S		 * @param[in] str		The string to draw
S		 * @param[in] justify	Justify the text left, center or right within the box
S		 *
S		 * @api
S		 */
S		void gwinDrawStringBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, justify_t justify);
S
S		/**
S		 * @brief   Draw a text string verticly centered within the specified filled box.
S		 * @pre		The font must have been set.
S		 * @note	Uses the current foreground color to draw the character and fills the background using the background drawing color
S		 * @note    The entire box is filled. Note this box does not need to align with the window box
S		 * @note	May leave GDISP clipping to this window's dimensions
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] x,y		The position for the text (need to define top-right or base-line - check code)
S		 * @param[in] cx,cy		The width and height of the box
S		 * @param[in] str		The string to draw
S		 * @param[in] justify	Justify the text left, center or right within the box
S		 *
S		 * @api
S		 */
S		void gwinFillStringBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, justify_t justify);
S	#endif
S
S/*-------------------------------------------------
S * Polygon functions
S *-------------------------------------------------*/
S
S	#if GDISP_NEED_CONVEX_POLYGON || defined(__DOXYGEN__)
S		/**
S		 * @brief   Draw an enclosed polygon (convex, non-convex or complex).
S		 *
S		 * @note	Uses the current foreground color.
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] tx, ty	Transform all points in pntarray by tx, ty
S		 * @param[in] pntarray	An array of points
S		 * @param[in] cnt		The number of points in the array
S		 *
S		 * @api
S		 */
S		void gwinDrawPoly(GHandle gh, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt);
S
S		/**
S		 * @brief   Fill a convex polygon
S		 * @details Doesn't handle non-convex or complex polygons.
S		 *
S		 * @note	Uses the current foreground color.
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] tx, ty	Transform all points in pntarray by tx, ty
S		 * @param[in] pntarray	An array of points
S		 * @param[in] cnt		The number of points in the array
S		 *
S		 * @note	Convex polygons are those that have no internal angles. That is;
S		 * 			you can draw a line from any point on the polygon to any other point
S		 * 			on the polygon without it going outside the polygon. In our case we generalise
S		 * 			this a little by saying that an infinite horizontal line (at any y value) will cross
S		 * 			no more than two edges on the polygon. Some non-convex polygons do fit this criteria
S		 * 			and can therefore be drawn.
S		 * @note	This routine is designed to be very efficient with even simple display hardware.
S		 *
S		 * @api
S		 */
S		void gwinFillConvexPoly(GHandle gh, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt);
S	
S		/**
S		 * @brief	Draw a thick line in the window
S		 * @details	The line thickness is specified in pixels. The line ends can
S		 *		be selected to be either flat or round.
S		 * @note	Uses gdispGFillConvexPoly() internally to perform the drawing.
S		 * @note	Uses the current foreground color to draw the line
S		 * 
S		 * @param[in] gh		The window handle
S		 * @param[in] x0,y0		The start position
S		 * @param[in] x1,y1		The end position
S		 * @param[in] width		The width of the line
S		 * @param[in] round		Use round ends for the line
S		 * 
S		 * @api
S		 */
S		void gwinDrawThickLine(GHandle gh, coord_t x0, coord_t y0, coord_t x1, coord_t y1, coord_t width, bool_t round);
S	#endif
S
S/*-------------------------------------------------
S * Image functions
S *-------------------------------------------------*/
S
S	#if GDISP_NEED_IMAGE || defined(__DOXYGEN__)
S		/**
S		 * @brief	Draw the image
S		 * @return	GDISP_IMAGE_ERR_OK (0) on success or an error code.
S		 *
S		 * @param[in] gh		The window handle
S		 * @param[in] img   	The image structure
S		 * @param[in] x,y		The window location to draw the image
S		 * @param[in] cx,cy		The area on the screen to draw
S		 * @param[in] sx,sy		The image position to start drawing at
S		 *
S		 * @pre		gdispImageOpen() must have returned successfully.
S		 *
S		 * @note	If sx,sy + cx,cy is outside the image boundaries the area outside the image
S		 * 			is simply not drawn.
S		 * @note	If @p gdispImageCache() has been called first for this frame, this routine will draw using a
S		 * 			fast blit from the cached frame. If not, it reads the input and decodes it as it
S		 * 			is drawing. This may be significantly slower than if the image has been cached (but
S		 * 			uses a lot less RAM)
S		 *
S		 * @api
S		 */
S		gdispImageError gwinDrawImage(GHandle gh, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	#endif
S
S#ifdef __cplusplus
S}
S#endif
S
S/*-------------------------------------------------
S * Additional functionality
S *-------------------------------------------------*/
S
S	/* Include widgets */
S	#if GWIN_NEED_WIDGET || defined(__DOXYGEN__)
S		#include "gwin_widget.h"
S	#endif
S
S	/* Include containers */
S	#if GWIN_NEED_CONTAINERS || defined(__DOXYGEN__)
S		#include "gwin_container.h"
S	#endif
S
S	/* Include vanilla window objects */
S	#if GWIN_NEED_CONSOLE || defined(__DOXYGEN__)
S		#include "gwin_console.h"
S	#endif
S	#if GWIN_NEED_GRAPH || defined(__DOXYGEN__)
S		#include "gwin_graph.h"
S	#endif
S	#if GWIN_NEED_IMAGE || defined(__DOXYGEN__)
S		#include "gwin_image.h"
S	#endif
S	#if GWIN_NEED_GL3D || defined(__DOXYGEN__)
S		#include "gwin_gl3d.h"
S	#endif
S
N#endif /* GFX_USE_GWIN */
N
N#endif /* _GWIN_H */
N/** @} */
L 210 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/ginput/ginput.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/ginput/ginput.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput.h
N *
N * @addtogroup GINPUT
N *
N * @brief		Module to interface different hardware input sources such as touchscreens
N *
N * @details		GINPUT provides an easy and common interface to use different input devices
N *				such as touchscreens and mices.
N *
N * @pre			GFX_USE_GINPUT must be set to TRUE in your gfxconf.h
N *
N * @{
N */
N#ifndef _GINPUT_H
N#define _GINPUT_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/* How to use...
S
S	1. Get source handles for all the inputs you are interested in.
S		- Attempting to get a handle for one instance of an input more than once will return the same handle
S	2. Create a listener
S	3. Assign inputs to your listener.
S		- Inputs can be assigned or released from a listener at any time.
S		- An input can be assigned to more than one listener.
S	4. Loop on getting listener events
S	5. When complete destroy the listener
S*/
S
S// Include various ginput types
S#include "ginput_mouse.h"
S#include "ginput_keyboard.h"
S#include "ginput_toggle.h"
S#include "ginput_dial.h"
S
N#endif /* GFX_USE_GINPUT */
N
N#endif /* _GINPUT_H */
N/** @} */
L 211 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gadc/gadc.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gadc/gadc.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gadc/gadc.h
N *
N * @addtogroup GADC
N *
N * @brief	Module to abstract the very variable ADC interfaces of the underlying systems
N *
N * @details	The reason why ChibiOS/GFX has it's own ADC abstraction is because
N *			the Chibi-OS drivers are very CPU specific and do not
N *			provide a way across all hardware platforms to create periodic
N *			ADC conversions. There are also issues with devices with different
N *			characteristics or periodic requirements on the same ADC
N *			device (but different channels). This layer attempts to solve these
N *			problems to provide a architecture neutral API. It also provides extra
N *			features such as multi-buffer chaining for high speed ADC sources.
N *			It provides one high speed virtual ADC device (eg a microphone) and
N *			numerous low speed (less than 100Hz) virtual ADC devices (eg dials,
N *			temperature sensors etc). The high speed device has timer based polling
N *			to ensure exact conversion periods and a buffer management system.
N *			The low speed devices are assumed to be non-critical timing devices
N *			and do not have any buffer management.
N *			Note that while only one high speed device has been provided it can
N *			be used to read multiple physical ADC channels on the one physical
N *			ADC device.
N *			All callback routines are thread based unlike the Chibi-OS interrupt based
N *			routines.
N *
N * @{
N */
N
N#ifndef _GADC_H
N#define _GADC_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GADC || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/* Include the driver defines */
S#include "gadc_lld_config.h"
S
S/*===========================================================================*/
S/* Type definitions                                                          */
S/*===========================================================================*/
S
S// Event types for GADC
S#define GEVENT_ADC			(GEVENT_GADC_FIRST+0)
S
S/**
S * @brief   The High Speed ADC event structure.
S * @{
S */
Stypedef struct GEventADC_t {
S	#if GFX_USE_GEVENT || defined(__DOXYGEN__)
S		/**
S		 * @brief The type of this event (GEVENT_ADC)
S		 */
S		GEventType		type;
S	#endif
S
S	/**
S	 * @brief The event flags
S	 */
S	uint16_t		flags;
S		/**
S		 * @brief   The event flag values.
S		 * @{
S		 */
S		#define	GADC_HSADC_LOSTEVENT		0x0001		/**< @brief The last GEVENT_HSDADC event was lost */
S		#define	GADC_HSADC_RUNNING			0x0002		/**< @brief The High Speed ADC is currently running */
S		#define	GADC_HSADC_GOTBUFFER		0x0004		/**< @brief A buffer is ready for processing */
S		#define	GADC_HSADC_STALL			0x0008		/**< @brief The High Speed ADC has stalled due to no free buffers */
S		/** @} */
S} GEventADC;
S/** @} */
S
S/**
S * @brief A callback function (executed in a thread context) for a low speed conversion
S */
Stypedef void (*GADCCallbackFunction)(adcsample_t *buffer, void *param);
S
S/**
S * @brief A callback function (executed in an ISR context) for a high speed conversion
S */
Stypedef void (*GADCISRCallbackFunction)(void);
S
S/*===========================================================================*/
S/* External declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/**
S * @brief				Initialise the high speed ADC.
S * @details				Initialises but does not start the conversions.
S *
S * @param[in] physdev			A value passed to describe which physical ADC devices/channels to use.
S * @param[in] frequency			The frequency to create ADC conversions
S *
S * @note				If the high speed ADC is running it will be stopped. The Event subsystem is
S * 						disconnected from the high speed ADC and any binary semaphore event is forgotten.
S * @note				ChibiOS ONLY: Due to a bug in ChibiOS each buffer on the free-list must contain an even number of
S * 						samples and for multi-channel devices it must hold a number of samples that is evenly divisible
S * 						by 2 times the number of active channels.
S * @note				The physdev parameter may be used to turn on more than one ADC channel.
S * 						Each channel is then interleaved into the provided buffer. Make sure your buffers all hold
S * 						a number of samples evenly divisible by the number of active channels.
S * 						As an example, if physdev turns on 2 devices then the buffer contains
S * 						alternate device samples and the buffer must contain multiples of 2 samples.
S * 						The exact meaning of physdev is hardware dependent.
S * @note				While the high speed ADC is running, low speed conversions can only occur at
S * 						the frequency of the high speed events. Thus if high speed events are
S * 						being created at 50Hz (eg 100 samples/buffer, frequency = 5kHz) then the maximum
S * 						frequency for low speed conversions will be 50Hz.
S * @note				Only a single sample format is supported - that provided by the GADC driver. That sample
S * 						format applies to both high speed and low speed sampling.
S *
S * @api
S */
Svoid gadcHighSpeedInit(uint32_t physdev, uint32_t frequency);
S
S#if GFX_USE_GEVENT || defined(__DOXYGEN__)
S	/**
S	 * @brief   			Turn on sending results to the GEVENT sub-system.
S	 * @details				Returns a GSourceHandle to listen for GEVENT_ADC events.
S	 *
S	 * @note				The high speed ADC will not use the GEVENT system unless this is
S	 * 						called first. This saves processing time if the application does
S	 * 						not want to use the GEVENT sub-system for the high speed ADC.
S	 * 						Once turned on it can only be turned off by calling @p gadcHighSpeedInit() again.
S	 * @note				The high speed ADC is capable of signalling via this method, an ISR callback and a
S	 * 						binary semaphore at the same time.
S	 *
S	 * @return				The GSourceHandle
S	 *
S	 * @api
S	 */
S	GSourceHandle gadcHighSpeedGetSource(void);
S#endif
S
S/**
S * @brief				Allow retrieving of results from the high speed ADC using an ISR callback.
S *
S * @param[in] isrfn			The callback function (called in an ISR context).
S *
S * @note				Passing a NULL for isrfn will turn off signalling via this method as will calling
S * 						@p gadcHighSpeedInit().
S * @note				The high speed ADC is capable of signalling via this method, a blocked thread and the GEVENT
S * 						sub-system at the same time.
S *
S * @api
S */
Svoid gadcHighSpeedSetISRCallback(GADCISRCallbackFunction isrfn);
S
S/**
S * @brief		Get a filled buffer from the ADC
S * @return		A GDataBuffer pointer or NULL if the timeout is exceeded
S *
S * @param[in] ms	The maximum amount of time in milliseconds to wait for data if some is not currently available.
S *
S * @note		After processing the data, your application must return the buffer to the free-list so that
S * 				it can be used again. This can be done using @p gfxBufferRelease().
S * @note		A buffer may be returned to the free-list before you have finished processing it provided you finish
S * 				processing it before GADC re-uses it. This is useful when RAM usage is critical to reduce the number
S * 				of buffers required. It works before the free list is a FIFO queue and therefore buffers are kept
S * 				in the queue as long as possible before they are re-used.
S * @note		The function ending with "I" is the interrupt class function.
S * @api
S * @{
S */
SGDataBuffer *gadcHighSpeedGetData(delaytime_t ms);
SGDataBuffer *gadcHighSpeedGetDataI(void);
S/** @} */
S
S/**
S * @brief   Start the high speed ADC conversions.
S * @pre		It must have been initialised first with @p gadcHighSpeedInit()
S *
S * @api
S */
Svoid gadcHighSpeedStart(void);
S
S/**
S * @brief   Stop the high speed ADC conversions.
S *
S * @api
S */
Svoid gadcHighSpeedStop(void);
S
S/**
S * @brief	Perform a single low speed ADC conversion
S * @details	Blocks until the conversion is complete
S * @pre		This should not be called from within a GTimer callback as this routine
S * 			blocks until the conversion is ready.
S *
S * @param[in] physdev		A value passed to describe which physical ADC devices/channels to use.
S * @param[in] buffer		The static buffer to put the ADC samples into.
S *
S * @note	This may take a while to complete if the high speed ADC is running as the
S * 			conversion is interleaved with the high speed ADC conversions on a buffer
S * 			completion.
S * @note	The result buffer must be large enough to store one sample per device
S * 			described by the 'physdev' parameter.
S * @note	Specifying more than one device in physdev is possible but discouraged as the
S * 			calculations to ensure the high speed ADC correctness will be incorrect. Symptoms
S * 			from over-running the high speed ADC include high speed device stalling or samples being lost.
S *
S * @api
S */
Svoid gadcLowSpeedGet(uint32_t physdev, adcsample_t *buffer);
S
S/**
S * @brief	Perform a low speed ADC conversion with callback (in a thread context)
S * @details	Returns FALSE if internal memory allocation fails
S *
S * @param[in] physdev		A value passed to describe which physical ADC devices/channels to use.
S * @param[in] buffer		The static buffer to put the ADC samples into.
S * @param[in] fn			The callback function to call when the conversion is complete.
S * @param[in] param			A parameter to pass to the callback function.
S *
S * @return					FALSE if no free low speed ADC slots.
S *
S * @note	This may be safely called from within a GTimer callback.
S * @note	The callback may take a while to occur if the high speed ADC is running as the
S * 			conversion is interleaved with the high speed ADC conversions on a buffer
S * 			completion.
S * @note	The result buffer must be large enough to store one sample per device
S * 			described by the 'physdev' parameter.
S * @note	Specifying more than one device in physdev is possible but discouraged as the
S * 			calculations to ensure the high speed ADC correctness will be incorrect. Symptoms
S * 			from over-running the high speed ADC include high speed samples being lost.
S *
S * @api
S */
Sbool_t gadcLowSpeedStart(uint32_t physdev, adcsample_t *buffer, GADCCallbackFunction fn, void *param);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GADC */
N
N#endif /* _GADC_H */
N/** @} */
L 212 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N#include "src/gaudio/gaudio.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\../src/gaudio/gaudio.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gaudio/gaudio.h
N *
N * @addtogroup GAUDIO
N *
N * @brief	Module to handle audio recording and play-back
N *
N * @{
N */
N
N#ifndef _GAUDIO_H
N#define _GAUDIO_H
N
N#include "../../gfx.h"
N
N#if GFX_USE_GAUDIO || defined(__DOXYGEN__)
X#if 0 || 0L
S
S/* Include the driver defines */
S#if GAUDIO_NEED_PLAY
S	#include "gaudio_play_config.h"
S#endif
S#if GAUDIO_NEED_RECORD
S	#include "gaudio_record_config.h"
S#endif
S
S/*===========================================================================*/
S/* Type definitions                                                          */
S/*===========================================================================*/
S
S// Event types for GAUDIO
S#define GEVENT_AUDIO_PLAY			(GEVENT_GAUDIO_FIRST+0)
S#define GEVENT_AUDIO_RECORD			(GEVENT_GAUDIO_FIRST+1)
S
S#if GFX_USE_GEVENT || defined(__DOXYGEN__)
S	/**
S	 * @brief   The Audio play event structure.
S	 * @{
S	 */
S	typedef struct GEventAudioPlay_t {
S		/**
S		 * @brief The type of this event (GEVENT_AUDIO_PLAY)
S		 */
S		GEventType				type;
S		/**
S		 * @brief The event flags
S		 */
S		uint16_t				flags;
S			/**
S			 * @brief   The event flag values.
S			 * @{
S			 */
S			#define	GAUDIO_PLAY_LOSTEVENT		0x0001		/**< @brief The last GEVENT_AUDIO_PLAY event was lost */
S			#define	GAUDIO_PLAY_PLAYING			0x0002		/**< @brief The audio out system is currently playing */
S			#define	GAUDIO_PLAY_FREEBLOCK		0x0004		/**< @brief An audio buffer has been freed */
S			/** @} */
S	} GEventAudioPlay;
S	/** @} */
S
S	/**
S	 * @brief   The Audio record event structure.
S	 * @{
S	 */
S	typedef struct GEventAudioRecord_t {
S		/**
S		 * @brief The type of this event (GEVENT_AUDIO_RECORD)
S		 */
S		GEventType				type;
S		/**
S		 * @brief The event flags
S		 */
S		uint16_t				flags;
S			/**
S			 * @brief   The event flag values.
S			 * @{
S			 */
S			#define	GAUDIO_RECORD_LOSTEVENT		0x0001		/**< @brief The last GEVENT_AUDIO_IN event was lost */
S			#define	GAUDIO_RECORD_RECORDING		0x0002		/**< @brief The audio recording system is currently recording */
S			#define	GAUDIO_RECORD_GOTBUFFER		0x0004		/**< @brief An audio buffer is ready for processing */
S			#define	GAUDIO_RECORD_STALL			0x0008		/**< @brief The recording process has stalled due to no free buffers */
S			/** @} */
S	} GEventAudioRecord;
S	/** @} */
S#endif
S
S/*===========================================================================*/
S/* External declarations.                                                    */
S/*===========================================================================*/
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S#if GAUDIO_NEED_PLAY || defined(__DOXYGEN__)
S	/**
S	 * @brief		Set the audio device to play on the specified channel and with the specified
S	 * 				sample frequency.
S	 * @return		TRUE is successful, FALSE if the driver doesn't accept those parameters.
S	 *
S	 * @param[in] channel	The audio output channel to use. Can be set from 0 to GAUDIO_PLAY_NUM_CHANNELS - 1
S	 * @param[in] frequency	The audio sample rate in samples per second
S	 * @param[in] format	The audio sample format
S	 *
S	 * @note		Some channels are mono, and some are stereo. See your driver config file
S	 * 				to determine which channels to use and whether they are stereo or not.
S	 * @note		Only one channel can be playing at a time. Calling this will stop any
S	 * 				currently playing channel.
S	 *
S	 * @api
S	 */
S	bool_t gaudioPlayInit(uint16_t channel, uint32_t frequency, ArrayDataFormat format);
S
S	/**
S	 * @brief		Play the specified sample data.
S	 * @details		The sample data is output to the audio channel. On completion the buffer is returned to the free-list.
S	 * @pre			@p gaudioPlayInit must have been called first to set the channel and sample frequency.
S	 *
S	 * @param[in] paud	The audio sample buffer to play. It can be NULL (used to restart paused audio)
S	 *
S	 * @note		Calling this will cancel any pause.
S	 * @note		Before calling this function the len field of the GDataBuffer structure must be
S	 * 				specified (in bytes).
S	 * @note		For stereo channels the sample data is interleaved in the buffer.
S	 * @note		This call returns before the data has completed playing. Subject to available buffers (which
S	 * 				can be obtained from the free-list), any number of buffers may be played. They will be queued
S	 * 				for playing in the order they are supplied to this routine and played when previous buffers are
S	 * 				complete. In this way continuous playing can be obtained without audio gaps.
S	 *
S	 * @api
S	 */
S	void gaudioPlay(GDataBuffer *paud);
S
S	/**
S	 * @brief		Pause any currently playing sounds.
S	 *
S	 * @note		If nothing is currently playing this routine does nothing. To restart playing call @p gaudioPlay()
S	 * 				with or without a new sample buffer.
S	 * @note		Some drivers will not respond until a buffer boundary.
S	 *
S	 * @api
S	 */
S	void gaudioPlayPause(void);
S
S	/**
S	 * @brief		Stop any currently playing sounds.
S	 *
S	 * @note		This stops any playing sounds and returns any currently queued buffers back to the free-list.
S	 * @note		Some drivers will not respond until a buffer boundary.
S	 *
S	 * @api
S	 */
S	void gaudioPlayStop(void);
S
S	/**
S	 * @brief				Set the output volume.
S	 * @return				TRUE if successful.
S	 *
S	 * @param[in] vol		0->255 (0 = muted)
S	 *
S	 * @note				Some drivers may not support this. They will return FALSE.
S	 * @note				For stereo devices, both channels are set to the same volume.
S	 *
S	 * @api
S	 */
S	bool_t gaudioPlaySetVolume(uint8_t vol);
S
S	#if GFX_USE_GEVENT || defined(__DOXYGEN__)
S		/**
S		 * @brief   			Turn on sending results to the GEVENT sub-system.
S		 * @details				Returns a GSourceHandle to listen for GEVENT_AUDIO_OUT events.
S		 *
S		 * @note				The audio output will not use the GEVENT system unless this is
S		 * 						called first. This saves processing time if the application does
S		 * 						not want to use the GEVENT sub-system for audio output.
S		 * 						Once turned on it can only be turned off by calling @p gaudioPlayInit() again.
S		 * @note				The audio output is capable of signaling via this method and other methods
S		 * 						at the same time.
S		 *
S		 * @return				The GSourceHandle
S		 *
S		 * @api
S		 */
S		GSourceHandle gaudioPlayGetSource(void);
S	#endif
S
S	/**
S	 * @brief		Wait for any currently playing sounds to complete
S	 * @return		TRUE if there is now nothing playing or FALSE if the timeout is exceeded
S	 *
S	 * @param[in] ms	The maximum amount of time in milliseconds to wait for playing to complete.
S	 *
S	 * @api
S	 */
S	bool_t gaudioPlayWait(delaytime_t ms);
S#endif
S
S#if GAUDIO_NEED_RECORD || defined(__DOXYGEN__)
S	/**
S	 * @brief		Initialise (but not start) the Audio Recording sub-system.
S	 * @details		Returns FALSE for an invalid channel or other invalid parameter.
S	 *
S	 * @param[in] channel		The channel to convert. Can be set from 0 to GAUDIO_RECORD_NUM_CHANNELS - 1
S	 * @param[in] frequency		The sample frequency
S	 * @param[in] format		The audio sample format requested
S	 *
S	 * @note				Only one channel is active at a time. If an audio input is running it will be stopped.
S	 * 						The Event subsystem is disconnected from the audio subsystem and any binary semaphore
S	 * 						event is forgotten.
S	 * @note				Some channels may be stereo channels which return twice as much sample data with
S	 * 						the left and right channel data interleaved. Other channels may be mono channels.
S	 * 						Where stereo channels exist the low level driver may also
S	 * 						offer the left and right channels separately.
S	 * @note				Due to a bug in Chibi-OS each buffer on the free-list must contain an even number of
S	 * 						samples and for stereo devices it must hold a number of samples that is evenly divisible by 4.
S	 * 						This requirement applies only to ChibiOS where the audio driver uses
S	 * 						a ChibiOS hal driver like the cpu ADC driver. This applies even it is used indirectly via
S	 * 						the uGFX GADC driver.
S	 * @note				The number of samples for stereo devices will be double the number of conversions.
S	 * 						Make sure you allocate your buffers large enough. Each channel is then interleaved
S	 * 						into the provided buffer.
S	 *
S	 * @return				FALSE if invalid channel or parameter
S	 *
S	 * @api
S	 */
S	bool_t gaudioRecordInit(uint16_t channel, uint32_t frequency, ArrayDataFormat format);
S
S	/**
S	 * @brief   Start the audio recording.
S	 * @pre		It must have been initialised first with @p gaudioRecordInit()
S	 *
S	 * @api
S	 */
S	void gaudioRecordStart(void);
S
S	/**
S	 * @brief   Stop the audio recording.
S	 *
S	 * @note	All audio recording data that has not yet been retrieved is automatically
S	 * 			returned to the free-list.
S	 * @api
S	 */
S	void gaudioRecordStop(void);
S
S	/**
S	 * @brief		Get a filled audio buffer from the recording list
S	 * @return		A GDataBuffer pointer or NULL if the timeout is exceeded
S	 *
S	 * @param[in] ms	The maximum amount of time in milliseconds to wait for data if some is not currently available.
S	 *
S	 * @note		After processing the audio data, your application must return the buffer to the free-list so that
S	 * 				it can be used to record more audio into. This can be done via the play list using @p gaudioPlay() or
S	 * 				directly using @p gfxBufferRelease().
S	 * @note		A buffer may be returned to the free-list before you have finished processing it provided you finish
S	 * 				processing it before GADC re-uses it. This is useful when RAM usage is critical to reduce the number
S	 * 				of buffers required. It works before the free list is a FIFO queue and therefore buffers are kept
S	 * 				in the queue as long as possible before they are re-used.
S	 *
S	 * @api
S	 */
S	GDataBuffer *gaudioRecordGetData(delaytime_t ms);
S
S	#if GFX_USE_GEVENT || defined(__DOXYGEN__)
S		/**
S		 * @brief   			Turn on sending results to the GEVENT sub-system.
S		 * @details				Returns a GSourceHandle to listen for GEVENT_AUDIO_RECORD events.
S		 *
S		 * @note				Audio recording will not use the GEVENT system unless this is
S		 * 						called first. This saves processing time if the application does
S		 * 						not want to use the GEVENT sub-system for audio recording.
S		 * 						Once turned on it can only be turned off by calling @p gaudioRecordInit() again.
S		 * @note				The audio input is capable of signaling via this and other methods
S		 * 						at the same time.
S		 *
S		 * @return				The GSourceHandle
S		 *
S		 * @api
S		 */
S		GSourceHandle gaudioRecordGetSource(void);
S	#endif
S#endif
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* GFX_USE_GAUDIO */
N
N#endif /* _GAUDIO_H */
N/** @} */
N
L 213 "..\..\..\..\..\..\external\ugfx\src\../gfx.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N	/**
N	 * @brief	The one call to start it all
N	 *
N	 * @note	This will initialise each sub-system that has been turned on.
N	 * 			For example, if GFX_USE_GDISP is defined then display will be initialised
N	 * 			and cleared to black.
N	 * @note	If you define GFX_OS_NO_INIT as TRUE in your gfxconf.h file then ugfx doesn't try to
N	 * 			initialise the operating system for you when you call @p gfxInit().
N	 * @note	If you define GFX_OS_EXTRA_INIT_FUNCTION in your gfxconf.h file the macro is the
N	 * 			name of a void function with no parameters that is called immediately after
N	 * 			operating system initialisation (whether or not GFX_OS_NO_INIT is set).
N	 * @note	If you define GFX_OS_EXTRA_DEINIT_FUNCTION in your gfxconf.h file the macro is the
N	 * 			name of a void function with no parameters that is called immediately before
N	 * 			operating system de-initialisation (as ugfx is exiting).
N	 *
N	 * @api
N	 */
N	void gfxInit(void);
N
N	/**
N	 * @brief	The one call to end it all
N	 *
N	 * @note	This will de-initialise each sub-system that has been turned on.
N	 *
N	 * @api
N	 */
N	void gfxDeinit(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _GFX_H */
N/** @} */
N
L 17 "..\..\..\..\..\..\external\ugfx\src\gfx.c" 2
N
Nstatic bool_t gfxInitDone = FALSE;
Xstatic bool_t gfxInitDone = 0;
N
N/* These init functions are defined by each module but not published */
Nextern void _gosInit(void);
Nextern void _gosDeinit(void);
N#ifdef GFX_OS_PRE_INIT_FUNCTION
S		extern void GFX_OS_PRE_INIT_FUNCTION(void);
N#endif
N#ifdef GFX_OS_EXTRA_INIT_FUNCTION
S		extern void GFX_OS_EXTRA_INIT_FUNCTION(void);
N#endif
N#ifdef GFX_OS_EXTRA_DEINIT_FUNCTION
S		extern void GFX_OS_EXTRA_DEINIT_FUNCTION(void);
N#endif
N#if GFX_USE_GDRIVER
X#if -1
N	extern void _gdriverInit(void);
N	extern void _gdriverDeinit(void);
N#endif
N#if GFX_USE_GFILE
X#if 0
S	extern void _gfileInit(void);
S	extern void _gfileDeinit(void);
N#endif
N#if GFX_USE_GDISP
X#if -1
N	extern void _gdispInit(void);
N	extern void _gdispDeinit(void);
N#endif
N#if GFX_USE_GWIN
X#if 0
S	extern void _gwinInit(void);
S	extern void _gwinDeinit(void);
N#endif
N#if GFX_USE_GEVENT
X#if 0
S	extern void _geventInit(void);
S	extern void _geventDeinit(void);
N#endif
N#if GFX_USE_GTIMER
X#if 0
S	extern void _gtimerInit(void);
S	extern void _gtimerDeinit(void);
N#endif
N#if GFX_USE_GINPUT
X#if 0
S	extern void _ginputInit(void);
S	extern void _ginputDeinit(void);
N#endif
N#if GFX_USE_GADC
X#if 0
S	extern void _gadcInit(void);
S	extern void _gadcDeinit(void);
N#endif
N#if GFX_USE_GAUDIO
X#if 0
S	extern void _gaudioInit(void);
S	extern void _gaudioDeinit(void);
N#endif
N#if GFX_USE_GQUEUE
X#if 0
S	extern void _gqueueInit(void);
S	extern void _gqueueDeinit(void);
N#endif
N#if GFX_USE_GMISC
X#if 0
S	extern void _gmiscInit(void);
S	extern void _gmiscDeinit(void);
N#endif
N#if GFX_USE_GTRANS
X#if 0
S	extern void _gtransInit(void);
S	extern void _gtransDeinit(void);
N#endif
N
Nvoid gfxInit(void)
N{
N	/* Ensure we only initialise once */
N	if (gfxInitDone)
N		return;
N	gfxInitDone = TRUE;
X	gfxInitDone = -1;
N
N	// These must be initialised in the order of their dependancies
N
N	#ifdef GFX_OS_PRE_INIT_FUNCTION
S		GFX_OS_PRE_INIT_FUNCTION();
N	#endif
N	_gosInit();
N	#ifdef GFX_OS_EXTRA_INIT_FUNCTION
S		GFX_OS_EXTRA_INIT_FUNCTION();
N	#endif
N	#if GFX_USE_GQUEUE
X	#if 0
S		_gqueueInit();
N	#endif
N	#if GFX_USE_GMISC
X	#if 0
S		_gmiscInit();
N	#endif
N	#if GFX_USE_GTRANS
X	#if 0
S		_gtransInit();
N	#endif
N	#if GFX_USE_GEVENT
X	#if 0
S		_geventInit();
N	#endif
N	#if GFX_USE_GTIMER
X	#if 0
S		_gtimerInit();
N	#endif
N	#if GFX_USE_GDRIVER
X	#if -1
N		_gdriverInit();
N	#endif
N	#if GFX_USE_GFILE
X	#if 0
S		_gfileInit();
N	#endif
N	#if GFX_USE_GDISP
X	#if -1
N		_gdispInit();
N	#endif
N	#if GFX_USE_GINPUT
X	#if 0
S		_ginputInit();
N	#endif
N	#if GFX_USE_GADC
X	#if 0
S		_gadcInit();
N	#endif
N	#if GFX_USE_GAUDIO
X	#if 0
S		_gaudioInit();
N	#endif
N	#if GFX_USE_GWIN
X	#if 0
S		_gwinInit();
N	#endif
N}
N
Nvoid gfxDeinit(void)
N{
N	if (!gfxInitDone)
N		return;
N	gfxInitDone = FALSE;
X	gfxInitDone = 0;
N
N	// We deinitialise the opposite way as we initialised
N	#if GFX_USE_GWIN
X	#if 0
S		_gwinDeinit();
N	#endif
N	#if GFX_USE_GAUDIO
X	#if 0
S		_gaudioDeinit();
N	#endif
N	#if GFX_USE_GADC
X	#if 0
S		_gadcDeinit();
N	#endif
N	#if GFX_USE_GINPUT
X	#if 0
S		_ginputDeinit();
N	#endif
N	#if GFX_USE_GDISP
X	#if -1
N		_gdispDeinit();
N	#endif
N	#if GFX_USE_GFILE
X	#if 0
S		_gfileDeinit();
N	#endif
N	#if GFX_USE_GDRIVER
X	#if -1
N		_gdriverDeinit();
N	#endif
N	#if GFX_USE_GTIMER
X	#if 0
S		_gtimerDeinit();
N	#endif
N	#if GFX_USE_GEVENT
X	#if 0
S		_geventDeinit();
N	#endif
N	#if GFX_USE_GTRANS
X	#if 0
S		_gtransDeinit();
N	#endif
N	#if GFX_USE_GMISC
X	#if 0
S		_gmiscDeinit();
N	#endif
N	#if GFX_USE_GQUEUE
X	#if 0
S		_gqueueDeinit();
N	#endif
N	#ifdef GFX_OS_EXTRA_DEINIT_FUNCTION
S		GFX_OS_EXTRA_DEINIT_FUNCTION();
N	#endif
N	_gosDeinit();
N}
L 9 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gos/gos_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gos_arduino.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_arduino.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_ARDUINO
X#if 0
S
S#include <string.h>				// Prototype for memcpy()
S
Svoid _gosHeapInit(void);
Svoid _gosThreadsInit(void);
S
S/*********************************************************
S * Initialise
S *********************************************************/
S
Svoid _gosInit(void)
S{
S	/* No initialization of the operating system itself is needed as there isn't one.
S	 * On the other hand the C runtime should still already be initialized before
S	 * getting here!
S	 */
S	#if !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Arduino - Make sure you initialize your hardware and the C runtime before calling gfxInit() in your application!"
S	#endif
S
S	// Start the heap allocator
S	_gosHeapInit();
S
S	// Start the scheduler
S	_gosThreadsInit();
S}
S
Svoid _gosDeinit(void)
S{
S	/* ToDo */
S}
S
S/*********************************************************
S * Exit everything functions
S *********************************************************/
S
Svoid gfxHalt(const char *msg) {
S	volatile uint32_t	dummy;
S	(void)				msg;
S
S	while(1)
S		dummy++;
S}
S
Svoid gfxExit(void) {
S	volatile uint32_t	dummy;
S
S	while(1)
S		dummy++;
S}
S
S
S/*********************************************************
S * Sleep functions
S *********************************************************/
S
Ssystemticks_t gfxSystemTicks(void) {
S	return millis();
S}
Ssystemticks_t gfxMillisecondsToTicks(delaytime_t ms) {
S	return ms;
S}
S
N#endif /* GFX_USE_OS_ARDUINO */
L 9 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_chibios.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_chibios.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_CHIBIOS
X#if 0
S
S#include <string.h>
S
S#if CH_KERNEL_MAJOR == 2
S
S	#if !CH_USE_MUTEXES
S		#error "GOS: CH_USE_MUTEXES must be defined in chconf.h"
S	#endif
S	#if !CH_USE_SEMAPHORES
S		#error "GOS: CH_USE_SEMAPHORES must be defined in chconf.h"
S	#endif
S	
S#elif (CH_KERNEL_MAJOR == 3) || (CH_KERNEL_MAJOR == 4)
S
S	#if !CH_CFG_USE_MUTEXES
S		#error "GOS: CH_CFG_USE_MUTEXES must be defined in chconf.h"
S	#endif
S	#if !CH_CFG_USE_SEMAPHORES
S		#error "GOS: CH_CFG_USE_SEMAPHORES must be defined in chconf.h"
S	#endif
S
S#else
S	#error "GOS: Unsupported version of ChibiOS"
S#endif
S
Svoid _gosInit(void)
S{
S	#if !GFX_OS_NO_INIT
S		/* Don't Initialize if the user already has */
S		#if CH_KERNEL_MAJOR == 2
S			if (!chThdSelf()) {
S				halInit();
S				chSysInit();
S			}
S		#elif (CH_KERNEL_MAJOR == 3) || (CH_KERNEL_MAJOR == 4)
S			if (!chThdGetSelfX()) {
S				halInit();
S				chSysInit();
S			}
S		#endif
S	#elif !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Operating System initialization has been turned off. Make sure you call halInit() and chSysInit() before gfxInit() in your application!"
S	#endif
S}
S
Svoid _gosDeinit(void)
S{
S	/* ToDo */
S}
S
Svoid *gfxRealloc(void *ptr, size_t oldsz, size_t newsz)
S{
S	void *np;
S
S	if (newsz <= oldsz)
S		return ptr;
S
S	np = gfxAlloc(newsz);
S	if (!np)
S		return 0;
S
S	if (oldsz)
S		memcpy(np, ptr, oldsz);
S
S	return np;
S}
S
Svoid gfxSleepMilliseconds(delaytime_t ms)
S{
S	switch(ms) {
S		case TIME_IMMEDIATE:	chThdYield();				return;
S		case TIME_INFINITE:		chThdSleep(TIME_INFINITE);	return;
S		default:				chThdSleepMilliseconds(ms);	return;
S	}
S}
S
Svoid gfxSleepMicroseconds(delaytime_t ms)
S{
S	switch(ms) {
S		case TIME_IMMEDIATE:								return;
S		case TIME_INFINITE:		chThdSleep(TIME_INFINITE);	return;
S		default:				chThdSleepMicroseconds(ms);	return;
S	}
S}
S
Svoid gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit)
S{
S	if (val > limit)
S		val = limit;
S
S	psem->limit = limit;
S	
S	#if CH_KERNEL_MAJOR == 2
S		chSemInit(&psem->sem, val);
S	#elif (CH_KERNEL_MAJOR == 3) || (CH_KERNEL_MAJOR == 4)
S		chSemObjectInit(&psem->sem, val);
S	#endif
S}
S
Svoid gfxSemDestroy(gfxSem *psem)
S{
S	chSemReset(&psem->sem, 1);
S}
S
Sbool_t gfxSemWait(gfxSem *psem, delaytime_t ms)
S{
S	#if CH_KERNEL_MAJOR == 2
S		switch(ms) {
S		case TIME_IMMEDIATE:	return chSemWaitTimeout(&psem->sem, TIME_IMMEDIATE) != RDY_TIMEOUT;
S		case TIME_INFINITE:		chSemWait(&psem->sem);	return TRUE;
S		default:				return chSemWaitTimeout(&psem->sem, MS2ST(ms)) != RDY_TIMEOUT;
S		}
S	#elif (CH_KERNEL_MAJOR == 3) || (CH_KERNEL_MAJOR == 4)
S		switch(ms) {
S		case TIME_IMMEDIATE:	return chSemWaitTimeout(&psem->sem, TIME_IMMEDIATE) != MSG_TIMEOUT;
S		case TIME_INFINITE:		chSemWait(&psem->sem);	return TRUE;
S		default:				return chSemWaitTimeout(&psem->sem, MS2ST(ms)) != MSG_TIMEOUT;
S		}
S	#endif
S}
S
Sbool_t gfxSemWaitI(gfxSem *psem)
S{
S	if (chSemGetCounterI(&psem->sem) <= 0)
S		return FALSE;
S	chSemFastWaitI(&psem->sem);
S	return TRUE;
S}
S
Svoid gfxSemSignal(gfxSem *psem)
S{
S	chSysLock();
S
S	if (gfxSemCounterI(psem) < psem->limit)
S		chSemSignalI(&psem->sem);
S
S	chSchRescheduleS();
S	chSysUnlock();
S}
S
Svoid gfxSemSignalI(gfxSem *psem)
S{
S	if (gfxSemCounterI(psem) < psem->limit)
S		chSemSignalI(&psem->sem);
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param)
S{
S	if (!stackarea) {
S		if (!stacksz) stacksz = 256;
S#if (CH_KERNEL_MAJOR == 2) || (CH_KERNEL_MAJOR == 3)
S		return chThdCreateFromHeap(0, stacksz, prio, (tfunc_t)fn, param);
S#elif CH_KERNEL_MAJOR == 4
S		return chThdCreateFromHeap(0, stacksz, "ugfx", prio, (tfunc_t)fn, param);
S#endif
S	}
S
S	if (!stacksz)
S		return 0;
S
S	return chThdCreateStatic(stackarea, stacksz, prio, (tfunc_t)fn, param);
S}
S
N#endif /* GFX_USE_OS_CHIBIOS */
L 10 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_ecos.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_ecos.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_ECOS
X#if 0
S
Svoid _gosInit(void)
S{
S	#if !GFX_OS_NO_INIT
S		#error "GOS: Operating System initialization for eCos is not yet implemented in uGFX. Please set GFX_OS_NO_INIT to TRUE in your gfxconf.h"
S	#endif
S	#if !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Operating System initialization has been turned off. Make sure you call cyg_scheduler_start() before gfxInit() in your application!"
S	#endif
S}
S
Svoid _gosDeinit(void)
S{
S	/* ToDo */
S}
S
Svoid gfxSleepMilliseconds(delaytime_t ms)
S{
S	switch(ms) {
S		case TIME_IMMEDIATE:	cyg_thread_yield();								return;
S		case TIME_INFINITE:		cyg_thread_suspend(cyg_thread_self());			return;
S		default:				cyg_thread_delay(gfxMillisecondsToTicks(ms));	return;
S	}
S}
S
Svoid gfxSleepMicroseconds(delaytime_t ms)
S{
S	switch(ms) {
S		case TIME_IMMEDIATE:														return;
S		case TIME_INFINITE:		cyg_thread_suspend(cyg_thread_self());				return;
S		default:				cyg_thread_delay(gfxMillisecondsToTicks(ms/1000));	return;
S	}
S}
S
Svoid gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit)
S{
S	if (val > limit)
S		val = limit;
S
S	psem->limit = limit;
S	cyg_semaphore_init(&psem->sem, val);
S}
S
Svoid gfxSemDestroy(gfxSem *psem)
S{
S	cyg_semaphore_destroy(&psem->sem);
S}
S
Sbool_t gfxSemWait(gfxSem *psem, delaytime_t ms)
S{
S	switch(ms) {
S	case TIME_IMMEDIATE:	return cyg_semaphore_trywait(&psem->sem);
S	case TIME_INFINITE:		return cyg_semaphore_wait(&psem->sem);
S	default:				return cyg_semaphore_timed_wait(&psem->sem, gfxMillisecondsToTicks(ms)+cyg_current_time());
S	}
S}
S
Sbool_t gfxSemWaitI(gfxSem *psem)
S{
S	return cyg_semaphore_trywait(&psem->sem);
S}
S
Svoid gfxSemSignal(gfxSem *psem)
S{
S	if (psem->limit == MAX_SEMAPHORE_COUNT)
S		cyg_semaphore_post(&psem->sem);
S	else {
S		cyg_scheduler_lock();
S		if (gfxSemCounterI(psem) < psem->limit)
S			cyg_semaphore_post(&psem->sem);
S		cyg_scheduler_unlock();
S	}
S}
S
Svoid gfxSemSignalI(gfxSem *psem)
S{
S	if (psem->limit == MAX_SEMAPHORE_COUNT || gfxSemCounterI(psem) < psem->limit)
S		cyg_semaphore_post(&psem->sem);
S}
S
Ssemcount_t gfxSemCounterI(gfxSem *psem) {
S	semcount_t	cnt;
S
S	cyg_semaphore_peek(&psem->sem, &cnt);
S	return cnt;
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param)
S{
S	gfxThreadHandle		th;
S
S	if (!stackarea) {
S		if (!stacksz) stacksz = CYGNUM_HAL_STACK_SIZE_TYPICAL;
S		if (!(stackarea = gfxAlloc(stacksz+sizeof(cyg_thread))))
S			return 0;
S	}
S
S	if (!stacksz)
S		return 0;
S
S    cyg_thread_create(prio, fn, param, "uGFX", (((cyg_thread *)stackarea)+1), stacksz, &th, (cyg_thread *)stackarea);
S    cyg_thread_resume(th);
S	return th;
S}
S
N#endif /* GFX_USE_OS_ECOS */
L 11 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_freertos.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_freertos.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060016
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 10 "..\..\..\..\..\..\external\ugfx\src\gos/gos_freertos.c" 2
N
N#if GFX_USE_OS_FREERTOS
X#if 0
S
S#if INCLUDE_vTaskDelay != 1
S	#error "GOS: INCLUDE_vTaskDelay must be defined in FreeRTOSConfig.h"
S#endif
S
S#if configUSE_MUTEXES != 1
S	#error "GOS: configUSE_MUTEXES must be defined in FreeRTOSConfig.h"
S#endif
S
S#if configUSE_COUNTING_SEMAPHORES != 1
S	#error "GOS: configUSE_COUNTING_SEMAPHORES must be defined in FreeRTOSConfig.h"
S#endif
S
Svoid _gosInit(void)
S{
S	#if !GFX_OS_NO_INIT
S		#error "GOS: Operating System initialization for FreeRTOS is not yet implemented in uGFX. Please set GFX_OS_NO_INIT to TRUE in your gfxconf.h"
S	#endif
S	#if !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Operating System initialization has been turned off. Make sure you call vTaskStartScheduler() before gfxInit() in your application!"
S	#endif
S}
S
Svoid _gosDeinit(void)
S{
S}
S
Svoid* gfxRealloc(void *ptr, size_t oldsz, size_t newsz)
S{
S	void *np;
S
S	if (newsz <= oldsz)
S		return ptr;
S
S	np = gfxAlloc(newsz);
S	if (!np)
S		return 0;
S
S	if (oldsz) {
S		memcpy(np, ptr, oldsz);
S		vPortFree(ptr);
S	}
S
S	return np;
S}
S
Svoid gfxSleepMilliseconds(delaytime_t ms)
S{
S	const portTickType ticks = ms / portTICK_PERIOD_MS;
S	vTaskDelay(ticks);
S}
S
Svoid gfxSleepMicroseconds(delaytime_t ms)
S{
S	const portTickType ticks = (ms / 1000) / portTICK_PERIOD_MS;
S
S	// delay milli seconds
S	vTaskDelay(ticks);
S
S	// microsecond resolution delay is not supported in FreeRTOS
S	// vUsDelay(ms%1000);
S}
S
SportTickType MS2ST(portTickType ms)
S{
S	return (ms / portTICK_PERIOD_MS);
S}
S
Svoid gfxMutexInit(xSemaphoreHandle *s)
S{
S	*s = xSemaphoreCreateMutex();
S	#if GFX_FREERTOS_USE_TRACE
S		vTraceSetMutexName(*s,"uGFXMutex"); // for FreeRTOS+Trace debug
S	#endif
S}
S
Svoid gfxSemInit(gfxSem* psem, semcount_t val, semcount_t limit)
S{
S	if (val > limit)
S		val = limit;
S
S	psem->counter = val;
S	psem->limit = limit;
S	psem->sem = xSemaphoreCreateCounting(limit,val);
S
S	#if GFX_FREERTOS_USE_TRACE
S		vTraceSetSemaphoreName(psem->sem, "uGFXSema"); // for FreeRTOS+Trace debug
S	#endif
S}
S
Svoid gfxSemDestroy(gfxSem* psem)
S{
S	vSemaphoreDelete(psem->sem);
S}
S
Sbool_t gfxSemWait(gfxSem* psem, delaytime_t ms)
S{
S	psem->counter--;
S
S	if (xSemaphoreTake(psem->sem, MS2ST(ms)) == pdPASS)
S		return TRUE;
S
S	psem->counter++;
S
S	return FALSE;
S}
S
Sbool_t gfxSemWaitI(gfxSem* psem)
S{
S	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
S
S	psem->counter--;
S
S	if (xSemaphoreTakeFromISR(psem->sem,&xHigherPriorityTaskWoken) == pdTRUE)
S		return TRUE;
S
S	psem->counter++;
S
S	return FALSE;
S}
S
Svoid gfxSemSignal(gfxSem* psem)
S{
S	taskENTER_CRITICAL();
S
S	if (psem->counter < psem->limit) {
S		psem->counter++;
S		xSemaphoreGive(psem->sem);
S	}
S
S	taskYIELD();
S	taskEXIT_CRITICAL();
S}
S
Svoid gfxSemSignalI(gfxSem* psem)
S{
S	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
S
S	if (psem->counter < psem->limit) {
S		psem->counter++;
S		xSemaphoreGiveFromISR(psem->sem,&xHigherPriorityTaskWoken);
S	}
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param)
S{
S	xTaskHandle task = NULL;
S	stacksz = (size_t)stackarea;
S
S	if (stacksz < configMINIMAL_STACK_SIZE)
S		stacksz = configMINIMAL_STACK_SIZE;
S
S	if (xTaskCreate(fn, "uGFX_TASK", stacksz, param, prio, &task )!= pdPASS) {
S		for (;;);
S	}
S
S	return task;
S}
S
N#endif /* GFX_USE_OS_FREERTOS */
L 12 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_linux.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_linux.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N// We need to include stdio.h below. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_LINUX
X#if 0
S
S// Linux seems to have deprecated pthread_yield() and now says to use sched_yield()
S#define		USE_SCHED_NOT_PTHREAD_YIELD		TRUE
S
S#include <stdio.h>
S#include <unistd.h>
S#include <time.h>
S#if USE_SCHED_NOT_PTHREAD_YIELD
S	#include <sched.h>
S	#define linuxyield()	sched_yield()
S#else
S	#define linuxyield()	pthread_yield()
S#endif
S
Sstatic gfxMutex		SystemMutex;
S
Svoid _gosInit(void)
S{
S	/* No initialization of the operating system itself is needed */
S	gfxMutexInit(&SystemMutex);
S}
S
Svoid _gosDeinit(void)
S{
S	/* ToDo */
S}
S
Svoid gfxSystemLock(void) {
S	gfxMutexEnter(&SystemMutex);
S}
S
Svoid gfxSystemUnlock(void) {
S	gfxMutexExit(&SystemMutex);
S}
S
Svoid gfxYield(void) {
S	linuxyield();
S}
S
Svoid gfxHalt(const char *msg) {
S	if (msg)
S		fprintf(stderr, "%s\n", msg);
S	exit(1);
S}
S
Svoid gfxSleepMilliseconds(delaytime_t ms) {
S	struct timespec	ts;
S
S	switch(ms) {
S		case TIME_IMMEDIATE:
S			linuxyield();
S			return;
S
S		case TIME_INFINITE:
S			while(1)
S				sleep(60);
S			return;
S
S		default:
S			ts.tv_sec = ms / 1000;
S			ts.tv_nsec = (ms % 1000) * 1000000;
S			nanosleep(&ts, 0);
S			return;
S	}
S}
S
Svoid gfxSleepMicroseconds(delaytime_t us) {
S	struct timespec	ts;
S
S	switch(us) {
S		case TIME_IMMEDIATE:
S			linuxyield();
S			return;
S
S		case TIME_INFINITE:
S			while(1)
S				sleep(60);
S			return;
S
S		default:
S			ts.tv_sec = us / 1000000;
S			ts.tv_nsec = (us % 1000000) * 1000;
S			nanosleep(&ts, 0);
S			return;
S	}
S}
S
Ssystemticks_t gfxSystemTicks(void) {
S	struct timespec	ts;
S
S	clock_gettime(CLOCK_MONOTONIC, &ts);
S	return ts.tv_sec * 1000 + ts.tv_nsec / 1000000;
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
S	gfxThreadHandle		th;
S	(void)				stackarea;
S	(void)				stacksz;
S	(void)				prio;
S
S	// Implementing priority with pthreads is a rats nest that is also pthreads implementation dependent.
S	// Only some pthreads schedulers support it, some implementations use the operating system process priority mechanisms.
S	// Even those that do support it can have different ranges of priority and "normal" priority is an undefined concept.
S	// Across different UNIX style operating systems things can be very different (let alone OS's such as Windows).
S	// Even just Linux changes the way priority works with different kernel schedulers and across kernel versions.
S	// For these reasons we ignore the priority.
S
S	if (pthread_create(&th, 0, fn, param))
S		return 0;
S
S	return th;
S}
S
Sthreadreturn_t gfxThreadWait(gfxThreadHandle thread) {
S	threadreturn_t	retval;
S
S	if (pthread_join(thread, &retval))
S		return 0;
S
S	return retval;
S}
S
S#if GFX_USE_POSIX_SEMAPHORES
S	void gfxSemInit(gfxSem *pSem, semcount_t val, semcount_t limit) {
S		pSem->max = limit;
S		sem_init(&pSem->sem, 0, val);
S	}
S	void gfxSemDestroy(gfxSem *pSem) {
S		sem_destroy(&pSem->sem);
S	}
S	bool_t gfxSemWait(gfxSem *pSem, delaytime_t ms) {
S		switch (ms) {
S		case TIME_INFINITE:
S			return sem_wait(&pSem->sem) ? FALSE : TRUE;
S
S		case TIME_IMMEDIATE:
S			return sem_trywait(&pSem->sem) ? FALSE : TRUE;
S
S		default:
S			{
S				struct timespec	tm;
S
S				clock_gettime(CLOCK_REALTIME, &tm);
S				tm.tv_sec += ms / 1000;
S				tm.tv_nsec += (ms % 1000) * 1000000;
S				return sem_timedwait(&pSem->sem, &tm) ? FALSE : TRUE;
S			}
S		}
S	}
S	void gfxSemSignal(gfxSem *pSem) {
S		if (gfxSemCounter(pSem) < pSem->max)
S			sem_post(&pSem->sem);
S	}
S	semcount_t gfxSemCounter(gfxSem *pSem) {
S		int	res;
S
S		res = 0;
S		sem_getvalue(&pSem->sem, &res);
S		return res;
S	}
S#else
S	void gfxSemInit(gfxSem *pSem, semcount_t val, semcount_t limit) {
S		pthread_mutex_init(&pSem->mtx, 0);
S		pthread_cond_init(&pSem->cond, 0);
S		pthread_mutex_lock(&pSem->mtx);
S		pSem->cnt = val;
S		pSem->max = limit;
S		pthread_mutex_unlock(&pSem->mtx);
S	}
S	void gfxSemDestroy(gfxSem *pSem) {
S		pthread_mutex_destroy(&pSem->mtx);
S		pthread_cond_destroy(&pSem->cond);
S	}
S	bool_t gfxSemWait(gfxSem *pSem, delaytime_t ms) {
S		pthread_mutex_lock(&pSem->mtx);
S
S		switch (ms) {
S			case TIME_INFINITE:
S				while (!pSem->cnt)
S					pthread_cond_wait(&pSem->cond, &pSem->mtx);
S				break;
S
S			case TIME_IMMEDIATE:
S				if (!pSem->cnt) {
S					pthread_mutex_unlock(&pSem->mtx);
S					return FALSE;
S				}
S				break;
S
S			default:
S				{
S					struct timespec	tm;
S
S					clock_gettime(CLOCK_REALTIME, &tm);
S					tm.tv_sec += ms / 1000;
S					tm.tv_nsec += (ms % 1000) * 1000000;
S					while (!pSem->cnt) {
S						// We used to test the return value for ETIMEDOUT. This doesn't
S						//	work in some current pthread libraries which return -1 instead
S						//	and set errno to ETIMEDOUT. So, we will return FALSE on any error
S						//	including a ETIMEDOUT.
S						if (pthread_cond_timedwait(&pSem->cond, &pSem->mtx, &tm)) {
S							pthread_mutex_unlock(&pSem->mtx);
S							return FALSE;
S						}
S					}
S				}
S				break;
S		}
S
S		pSem->cnt--;
S		pthread_mutex_unlock(&pSem->mtx);
S		return TRUE;
S	}
S	void gfxSemSignal(gfxSem *pSem) {
S		pthread_mutex_lock(&pSem->mtx);
S
S		if (pSem->cnt < pSem->max) {
S			pSem->cnt++;
S			pthread_cond_signal(&pSem->cond);
S		}
S
S		pthread_mutex_unlock(&pSem->mtx);
S	}
S	semcount_t gfxSemCounter(gfxSem *pSem) {
S		semcount_t	res;
S
S		// The locking is really only required if obtaining the count is a divisible operation
S		//	which it might be on a 8/16 bit processor with a 32 bit semaphore count.
S		pthread_mutex_lock(&pSem->mtx);
S		res = pSem->cnt;
S		pthread_mutex_unlock(&pSem->mtx);
S
S		return res;
S	}
S#endif // GFX_USE_POSIX_SEMAPHORES
S
N#endif /* GFX_USE_OS_LINUX */
L 13 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_osx.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_osx.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N// We need to include stdio.h below. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_OSX
X#if 0
S
S#include <stdio.h>
S#include <stdlib.h>
S#include <unistd.h>
S#include <errno.h>
S#include <time.h>
S#include <sys/time.h>
S#include <sched.h>
S#include <mach/clock.h>
S#include <mach/mach.h>
S
Sstatic gfxMutex		SystemMutex;
S
Svoid _gosInit(void)
S{
S	/* No initialization of the operating system itself is needed */
S	gfxMutexInit(&SystemMutex);
S}
S
Svoid _gosDeinit(void)
S{
S	/* ToDo */
S}
S
Svoid gfxSystemLock(void) {
S	gfxMutexEnter(&SystemMutex);
S}
S
Svoid gfxSystemUnlock(void) {
S	gfxMutexExit(&SystemMutex);
S}
S
Svoid gfxHalt(const char *msg) {
S	if (msg)
S		fprintf(stderr, "%s\n", msg);
S	exit(1);
S}
S
Svoid gfxSleepMilliseconds(delaytime_t ms) {
S	struct timespec	ts;
S
S	switch(ms) {
S	case TIME_IMMEDIATE:	gfxYield();			return;
S	case TIME_INFINITE:		while(1) sleep(60);			return;
S	default:
S		ts.tv_sec = ms / 1000;
S		ts.tv_nsec = (ms % 1000) * 1000000;
S		nanosleep(&ts, 0);
S		return;
S	}
S}
S
Svoid gfxSleepMicroseconds(delaytime_t us) {
S	struct timespec	ts;
S
S	switch(us) {
S	case TIME_IMMEDIATE:	gfxYield();			return;
S	case TIME_INFINITE:		while(1) sleep(60);			return;
S	default:
S		ts.tv_sec = us / 1000000;
S		ts.tv_nsec = (us % 1000000) * 1000;
S		nanosleep(&ts, 0);
S		return;
S	}
S}
S
Ssystemticks_t gfxSystemTicks(void) {
S	mach_timespec_t	ts;
S	clock_serv_t	cclock;
S
S	host_get_clock_service(mach_host_self(), SYSTEM_CLOCK, &cclock);
S	clock_get_time(cclock, &ts);
S	mach_port_deallocate(mach_task_self(), cclock);
S
S	return ts.tv_sec * 1000UL + ts.tv_nsec / 1000000;
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
S	gfxThreadHandle		th;
S	(void)				stackarea;
S	(void)				stacksz;
S	(void)				prio;
S
S	// Implementing priority with pthreads is a rats nest that is also pthreads implementation dependent.
S	//	Only some pthreads schedulers support it, some implementations use the operating system process priority mechanisms.
S	//	Even those that do support it can have different ranges of priority and "normal" priority is an undefined concept.
S	//	Across different UNIX style operating systems things can be very different (let alone OS's such as Windows).
S	//	Even just Linux changes the way priority works with different kernel schedulers and across kernel versions.
S	//	For these reasons we ignore the priority.
S
S	if (pthread_create(&th, 0, fn, param))
S		return 0;
S	return th;
S}
S
Sthreadreturn_t gfxThreadWait(gfxThreadHandle thread) {
S	threadreturn_t	retval;
S
S	if (pthread_join(thread, &retval))
S		return 0;
S	return retval;
S}
S
Svoid gfxSemInit(gfxSem *pSem, semcount_t val, semcount_t limit) {
S	pthread_mutex_init(&pSem->mtx, 0);
S	pthread_cond_init(&pSem->cond, 0);
S	pthread_mutex_lock(&pSem->mtx);
S	pSem->cnt = val;
S	pSem->max = limit;
S	pthread_mutex_unlock(&pSem->mtx);
S}
S
Svoid gfxSemDestroy(gfxSem *pSem) {
S	pthread_mutex_destroy(&pSem->mtx);
S	pthread_cond_destroy(&pSem->cond);
S}
S
Sbool_t gfxSemWait(gfxSem *pSem, delaytime_t ms) {
S	pthread_mutex_lock(&pSem->mtx);
S	switch (ms) {
S	case TIME_INFINITE:
S		while (!pSem->cnt)
S			pthread_cond_wait(&pSem->cond, &pSem->mtx);
S		break;
S	case TIME_IMMEDIATE:
S		if (!pSem->cnt) {
S			pthread_mutex_unlock(&pSem->mtx);
S			return FALSE;
S		}
S		break;
S	default:
S		{
S			struct timeval now;
S			struct timespec	tm;
S
S			gettimeofday(&now, 0);
S			tm.tv_sec = now.tv_sec + ms / 1000;
S			tm.tv_nsec = now.tv_usec * 1000 + (ms % 1000) * 1000000;
S			while (!pSem->cnt) {
S				// We used to test the return value for ETIMEDOUT. This doesn't
S				//	work in some current pthread libraries which return -1 instead
S				//	and set errno to ETIMEDOUT. So, we will return FALSE on any error
S				//	including a ETIMEDOUT.
S				if (pthread_cond_timedwait(&pSem->cond, &pSem->mtx, &tm)) {
S					pthread_mutex_unlock(&pSem->mtx);
S					return FALSE;
S				}
S			}
S		}
S		break;
S	}
S	pSem->cnt--;
S	pthread_mutex_unlock(&pSem->mtx);
S	return TRUE;
S}
S
Svoid gfxSemSignal(gfxSem *pSem) {
S	pthread_mutex_lock(&pSem->mtx);
S	if (pSem->cnt < pSem->max) {
S		pSem->cnt++;
S		pthread_cond_signal(&pSem->cond);
S	}
S	pthread_mutex_unlock(&pSem->mtx);
S}
S
Ssemcount_t gfxSemCounter(gfxSem *pSem) {
S	semcount_t	res;
S
S	// The locking is really only required if obtaining the count is a divisible operation
S	//	which it might be on a 8/16 bit processor with a 32 bit semaphore count.
S	pthread_mutex_lock(&pSem->mtx);
S	res = pSem->cnt;
S	pthread_mutex_unlock(&pSem->mtx);
S	return res;
S}
S
N#endif /* GFX_USE_OS_OSX */
L 14 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_raw32.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_raw32.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N// We need to include stdio.h below for Win32 emulation. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_RAW32
X#if -1
N
Nvoid _gosHeapInit(void);
Nvoid _gosThreadsInit(void);
N
N/*********************************************************
N * Initialise
N *********************************************************/
N
Nvoid _gosInit(void)
N{
N	/* No initialization of the operating system itself is needed as there isn't one.
N	 * On the other hand the C runtime should still already be initialized before
N	 * getting here!
N	 */
N	#if !GFX_OS_INIT_NO_WARNING
X	#if !0
W "..\..\..\..\..\..\external\ugfx\src\gos/gos_raw32.c" 29 4 #warning directive: "GOS: Raw32 - Make sure you initialize your hardware and the C runtime before calling gfxInit() in your application!"
N		#warning "GOS: Raw32 - Make sure you initialize your hardware and the C runtime before calling gfxInit() in your application!"
N	#endif
N
N	// Set up the heap allocator
N	_gosHeapInit();
N
N	// Start the scheduler
N	_gosThreadsInit();
N}
N
Nvoid _gosDeinit(void)
N{
N	/* ToDo */
N}
N
N/*********************************************************
N * For Win32 emulation - automatically add the tick functions
N * the user would normally have to provide for bare metal.
N *********************************************************/
N
N#if defined(WIN32)
X#if 0L
S	// Win32 nasty stuff - we have conflicting definitions for Red, Green & Blue
S	#ifndef _WIN32_WINNT
S		#define _WIN32_WINNT 0x0501			// Windows XP and up
S	#endif
S	#undef Red
S	#undef Green
S	#undef Blue
S	#define WIN32_LEAN_AND_MEAN
S	#include <windows.h>
S	#undef WIN32_LEAN_AND_MEAN
S	#define Blue			HTML2COLOR(0x0000FF)
S	#define Red				HTML2COLOR(0xFF0000)
S	#define Green			HTML2COLOR(0x008000)
S
S	#include <stdio.h>
S	systemticks_t gfxSystemTicks(void)						{ return GetTickCount(); }
S	systemticks_t gfxMillisecondsToTicks(delaytime_t ms)	{ return ms; }
N#endif
N
N/*********************************************************
N * Exit everything functions
N *********************************************************/
N
Nvoid gfxHalt(const char *msg) {
N	#if defined(WIN32)
X	#if 0L
S		fprintf(stderr, "%s\n", msg);
S		ExitProcess(1);
N	#else
N		volatile uint32_t	dummy;
N		(void)				msg;
N
N		while(1)
N			dummy++;
N	#endif
N}
N
Nvoid gfxExit(void) {
N	#if defined(WIN32)
X	#if 0L
S		ExitProcess(0);
N	#else
N		volatile uint32_t	dummy;
N
N		while(1)
N			dummy++;
N	#endif
N}
N
N#endif /* GFX_USE_OS_RAW32 */
L 15 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_rawrtos.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_rawrtos.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_RAWRTOS
X#if 0
S
S#include <string.h>
S#include "raw_api.h"
S#include "raw_config.h"
S
S#if CONFIG_RAW_MUTEX != 1
S	#error "GOS: CONFIG_RAW_MUTEX must be defined in raw_config.h"
S#endif
S
S#if CONFIG_RAW_SEMAPHORE != 1
S	#error "GOS: CONFIG_RAW_SEMAPHORE must be defined in raw_config.h"
S#endif
S
S
Svoid _gosInit(void)
S{
S	#if !GFX_OS_NO_INIT
S		#error "GOS: Operating System initialization for RawRTOS is not yet implemented in uGFX. Please set GFX_OS_NO_INIT to TRUE in your gfxconf.h"
S	#endif
S	#if !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Operating System initialization has been turned off. Make sure you call raw_os_start() before gfxInit() in your application!"
S	#endif
S}
S
Svoid _gosDeinit(void)
S{
S}
S
S
Svoid gfxSleepMilliseconds(delaytime_t ms)
S{
S	systemticks_t ticks = ms*RAW_TICKS_PER_SECOND/1000;
S	if(!ticks)ticks = 1;
S	raw_sleep(ticks);
S}
S
Svoid gfxSleepMicroseconds(delaytime_t us)
S{
S	systemticks_t ticks = (us/1000)*RAW_TICKS_PER_SECOND/1000;
S	if(!ticks)ticks = 1;
S	raw_sleep(ticks);
S}
S
Sbool_t gfxSemWait(gfxSem* psem, delaytime_t ms)
S{
S	systemticks_t ticks = ms*RAW_TICKS_PER_SECOND/1000;
S	if(!ticks)ticks=1;
S	if(raw_semaphore_get((psem), ticks)==RAW_SUCCESS)
S		return TRUE;
S	return FALSE;
S}
S
Sbool_t gfxSemWaitI(gfxSem* psem)
S{
S	if(raw_semaphore_get((psem), TIME_IMMEDIATE)==RAW_SUCCESS)
S		return TRUE;
S	return FALSE;
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param)
S{
S	RAW_U16 ret;
S	gfxThreadHandle taskobj;
S
S	taskobj = gfxAlloc(sizeof(RAW_TASK_OBJ));
S	ret = raw_task_create(taskobj, (RAW_U8  *)"uGFX_TASK", param,
S	                         prio, 0,  stackarea, 
S	                         stacksz/sizeof(PORT_STACK) ,  fn, 1); 
S
S	if (ret != RAW_SUCCESS) {
S		for (;;);
S	}
S
S	return (taskobj);
S}
S
S
N#endif
N
N
N
L 16 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_win32.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_win32.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N// We need to include stdio.h below. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_WIN32
X#if 0
S
S#include <stdio.h>
S
Sstatic HANDLE	SystemMutex;
S
Svoid _gosInit(void)
S{
S	/* No initialization of the operating system itself is needed */
S}
S
Svoid _gosDeinit(void)
S{
S
S}
S
Svoid gfxHalt(const char *msg) {
S	if (msg)
S		fprintf(stderr, "%s\n", msg);
S
S	ExitProcess(1);
S}
S
Svoid gfxSleepMicroseconds(delaytime_t ms) {
S    static LARGE_INTEGER pcfreq;
S    static int initflag;
S    LARGE_INTEGER t1, t2, tdiff;
S
S    switch(ms) {
S		case TIME_IMMEDIATE:
S			return;
S
S		case TIME_INFINITE:
S			while(1)
S				Sleep(1000);
S			return;
S	}
S
S    if (!initflag) {
S        QueryPerformanceFrequency(&pcfreq);
S        initflag++;
S    }
S    tdiff.QuadPart = pcfreq.QuadPart * ms / 1000000;
S
S    QueryPerformanceCounter(&t1);
S    do {
S    	QueryPerformanceCounter(&t2);
S    } while (t2.QuadPart - t1.QuadPart < tdiff.QuadPart);
S}
S
Svoid gfxSystemLock(void) {
S	if (!SystemMutex)
S		SystemMutex = CreateMutex(0, FALSE, 0);
S	WaitForSingleObject(SystemMutex, INFINITE);
S}
S
Svoid gfxSystemUnlock(void) {
S	ReleaseMutex(SystemMutex);
S}
S
Sbool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
S	return WaitForSingleObject(*psem, ms) == WAIT_OBJECT_0;
S}
S
Stypedef LONG __stdcall (*_NtQuerySemaphore)(
S    HANDLE SemaphoreHandle,
S    DWORD SemaphoreInformationClass, /* Would be SEMAPHORE_INFORMATION_CLASS */
S    PVOID SemaphoreInformation,      /* but this is to much to dump here     */
S    ULONG SemaphoreInformationLength,
S    PULONG ReturnLength OPTIONAL
S);
S
Ssemcount_t gfxSemCounter(gfxSem *pSem) {
S	static _NtQuerySemaphore NtQuerySemaphore;
S	struct _SEMAPHORE_BASIC_INFORMATION {
S	    ULONG CurrentCount;
S	    ULONG MaximumCount;
S	} BasicInfo;
S
S    if (!NtQuerySemaphore)
S    	NtQuerySemaphore = (_NtQuerySemaphore)GetProcAddress(GetModuleHandle("ntdll.dll"), "NtQuerySemaphore");
S
S    NtQuerySemaphore(*pSem, 0, &BasicInfo, sizeof(BasicInfo), 0);
S
S    return BasicInfo.CurrentCount;
S}
S
SgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
S	(void)	stackarea;
S	HANDLE	thd;
S
S	if (!(thd = CreateThread(0, stacksz, fn, param, CREATE_SUSPENDED, 0)))
S		return FALSE;
S
S	SetThreadPriority(thd, prio);
S	ResumeThread(thd);
S
S	return thd;
S}
S
Sthreadreturn_t gfxThreadWait(gfxThreadHandle thread) {
S	DWORD	ret;
S
S	WaitForSingleObject(thread, INFINITE);
S	GetExitCodeThread(thread, &ret);
S	CloseHandle(thread);
S
S	return ret;
S}
S
N#endif /* GFX_USE_OS_WIN32 */
N/** @} */
N
L 17 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_cmsis.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_cmsis.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N#include <string.h>
N
N#if GFX_USE_OS_CMSIS
X#if 0
S
Svoid _gosHeapInit(void);
S
Svoid _gosInit(void)
S{
S	#if !GFX_OS_NO_INIT
S		osKernelInitialize();
S		if (!osKernelRunning())
S			osKernelStart();
S	#elif !GFX_OS_INIT_NO_WARNING
S		#warning "GOS: Operating System initialization has been turned off. Make sure you call osKernelInitialize() and osKernelStart() before gfxInit() in your application!"
S	#endif
S
S	// Set up the heap allocator
S	_gosHeapInit();
S}
S
Svoid _gosDeinit(void)
S{
S}
S
Svoid gfxMutexInit(gfxMutex* pmutex)
S{
S	osMutexDef_t def;
S	def.mutex = pmutex->mutex;
S	
S	pmutex->id = osMutexCreate(&def);
S}
S
Svoid gfxSemInit(gfxSem* psem, semcount_t val, semcount_t limit)
S{
S	osSemaphoreDef_t def;
S	def.semaphore = psem->semaphore;
S	
S	if (val > limit) val = limit;
S	psem->available = limit - val;
S	psem->id = osSemaphoreCreate(&def, val);
S}
S
Svoid gfxSemDestroy(gfxSem* psem)
S{
S	osSemaphoreDelete(psem->id);
S}
S
Sbool_t gfxSemWait(gfxSem* psem, delaytime_t ms)
S{
S	if (osSemaphoreWait(psem->id, ms) > 0) {
S		psem->available++;
S		return TRUE;
S	}
S	return FALSE;
S}
S
Sbool_t gfxSemWaitI(gfxSem* psem)
S{
S	return gfxSemWait(psem, 0);
S}
S
Svoid gfxSemSignal(gfxSem* psem)
S{
S	gfxSemSignalI(psem);
S}
S
Svoid gfxSemSignalI(gfxSem* psem)
S{
S	if (psem->available) {
S		psem->available--;
S		osSemaphoreRelease(psem->id);
S	}
S}
S
SgfxThreadHandle gfxThreadCreate(void* stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void* param)
S{	
S	osThreadDef_t def;
S
S	(void)stackarea;
S	
S	def.pthread = (os_pthread)fn;
S	def.tpriority = prio;
S	def.instances = 1;
S	def.stacksize = stacksz;
S
S	return osThreadCreate(&def, param);
S}
S
Sthreadreturn_t gfxThreadWait(gfxThreadHandle thread) {
S	while(osThreadGetPriority(thread) == osPriorityError)
S		gfxYield();
S}
S
N#endif /* GFX_USE_OS_CMSIS */
L 18 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_nios.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_nios.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_OS_NIOS
X#if 0
S
Svoid _gosHeapInit(void);
Svoid _gosThreadsInit(void);
S
S/*********************************************************
S * Initialise
S *********************************************************/
S
Svoid _gosInit(void)
S{
S	// Set up the heap allocator
S	_gosHeapInit();
S
S	// Start the scheduler
S	_gosThreadsInit();
S}
S
Svoid _gosDeinit(void)
S{
S}
S
Svoid gfxHalt(const char *msg)
S{
S	volatile uint32_t dummy;
S
S	(void)msg;
S
S	while(1) {
S		dummy++;
S	}
S}
S
Svoid gfxExit(void) {
S	volatile uint32_t dummy;
S
S	while(1) {
S		dummy++;
S	}
S}
S
Ssystemticks_t gfxSystemTicks(void)
S{
S	return alt_nticks();
S}
S
Ssystemticks_t gfxMillisecondsToTicks(delaytime_t ms)
S{
S	return ms;
S}
S
N#endif /* GFX_USE_OS_NIOS */
L 19 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_x_threads.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_x_threads.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GOS_NEED_X_THREADS
X#if -1
N
N/*********************************************************
N * Semaphores and critical region functions
N *********************************************************/
N
N#if !defined(INTERRUPTS_OFF) || !defined(INTERRUPTS_ON)
X#if !0L || !0L
N	#define INTERRUPTS_OFF()
N	#define INTERRUPTS_ON()
N#endif
N
Nvoid gfxSystemLock(void) {
N	INTERRUPTS_OFF();
X	;
N}
N
Nvoid gfxSystemUnlock(void) {
N	INTERRUPTS_ON();
X	;
N}
N
Nvoid gfxMutexInit(gfxMutex *pmutex) {
N	pmutex[0] = 0;
N}
N
Nvoid gfxMutexEnter(gfxMutex *pmutex) {
N	INTERRUPTS_OFF();
X	;
N	while (pmutex[0]) {
N		INTERRUPTS_ON();
X		;
N		gfxYield();
N		INTERRUPTS_OFF();
X		;
N	}
N	pmutex[0] = 1;
N	INTERRUPTS_ON();
X	;
N}
N
Nvoid gfxMutexExit(gfxMutex *pmutex) {
N	pmutex[0] = 0;
N}
N
Nvoid gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit) {
N	psem->cnt = val;
N	psem->limit = limit;
N}
N
Nbool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
N	systemticks_t	starttm, delay;
N
N	// Convert our delay to ticks
N	starttm = 0;
N	switch (ms) {
N	case TIME_IMMEDIATE:
X	case 0:
N		delay = TIME_IMMEDIATE;
X		delay = 0;
N		break;
N	case TIME_INFINITE:
X	case ((delaytime_t)-1):
N		delay = TIME_INFINITE;
X		delay = ((delaytime_t)-1);
N		break;
N	default:
N		delay = gfxMillisecondsToTicks(ms);
N		if (!delay) delay = 1;
N		starttm = gfxSystemTicks();
N	}
N
N	INTERRUPTS_OFF();
X	;
N	while (psem->cnt <= 0) {
N		INTERRUPTS_ON();
X		;
N		// Check if we have exceeded the defined delay
N		switch (delay) {
N		case TIME_IMMEDIATE:
X		case 0:
N			return FALSE;
X			return 0;
N		case TIME_INFINITE:
X		case ((delaytime_t)-1):
N			break;
N		default:
N			if (gfxSystemTicks() - starttm >= delay)
N				return FALSE;
X				return 0;
N			break;
N		}
N		gfxYield();
N		INTERRUPTS_OFF();
X		;
N	}
N	psem->cnt--;
N	INTERRUPTS_ON();
X	;
N	return TRUE;
X	return -1;
N}
N
Nbool_t gfxSemWaitI(gfxSem *psem) {
N	if (psem->cnt <= 0)
N		return FALSE;
X		return 0;
N	psem->cnt--;
N	return TRUE;
X	return -1;
N}
N
Nvoid gfxSemSignal(gfxSem *psem) {
N	INTERRUPTS_OFF();
X	;
N	gfxSemSignalI(psem);
N	INTERRUPTS_ON();
X	;
N}
N
Nvoid gfxSemSignalI(gfxSem *psem) {
N	if (psem->cnt < psem->limit)
N		psem->cnt++;
N}
N
N/*********************************************************
N * Sleep functions
N *********************************************************/
N
Nvoid gfxSleepMilliseconds(delaytime_t ms) {
N	systemticks_t	starttm, delay;
N
N	// Safety first
N	switch (ms) {
N	case TIME_IMMEDIATE:
X	case 0:
N		return;
N	case TIME_INFINITE:
X	case ((delaytime_t)-1):
N		while(1)
N			gfxYield();
N		return;
N	}
N
N	// Convert our delay to ticks
N	delay = gfxMillisecondsToTicks(ms);
N	starttm = gfxSystemTicks();
N
N	do {
N		gfxYield();
N	} while (gfxSystemTicks() - starttm < delay);
N}
N
Nvoid gfxSleepMicroseconds(delaytime_t ms) {
N	systemticks_t	starttm, delay;
N
N	// Safety first
N	switch (ms) {
N	case TIME_IMMEDIATE:
X	case 0:
N		return;
N	case TIME_INFINITE:
X	case ((delaytime_t)-1):
N		while(1)
N			gfxYield();
N		return;
N	}
N
N	// Convert our delay to ticks
N	delay = gfxMillisecondsToTicks(ms/1000);
N	starttm = gfxSystemTicks();
N
N	do {
N		gfxYield();
N	} while (gfxSystemTicks() - starttm < delay);
N}
N
N/*********************************************************
N * Threading functions
N *********************************************************/
N
N/** For each scheduler the following need to be defined...
N *
N * void _gfxThreadsInit(void);								- Initialise the scheduler
N * void _gfxStartThread(thread *oldt, thread *newt);		- Start a new thread
N * void _gfxTaskSwitch(thread *oldt, thread *newt);			- Switch to a different thread
N *
N */
N
Ntypedef struct thread {
N	struct thread *	next;					// Next thread
N	int				flags;					// Flags
N		#define FLG_THD_ALLOC	0x0001
N		#define FLG_THD_MAIN	0x0002
N		#define FLG_THD_DEAD	0x0004
N		#define FLG_THD_WAIT	0x0008
N	size_t			size;					// Size of the thread stack (including this structure)
N	threadreturn_t	(*fn)(void *param);		// Thread function
N	void *			param;					// Parameter for the thread function
N	void *			cxt;					// The current thread context.
N	} thread;
N
Ntypedef struct threadQ {
N	thread *head;
N	thread *tail;
N} threadQ;
N
Nstatic threadQ		readyQ;					// The list of ready threads
Nstatic threadQ		deadQ;					// Where we put threads waiting to be deallocated
Nstatic thread *		current;				// The current running thread
Nstatic thread		mainthread;				// The main thread context
N
N#if GFX_CPU == GFX_CPU_CORTEX_M0 || GFX_CPU == GFX_CPU_CORTEX_M1
X#if 0 == 0x01 || 0 == 0x02
S
S	// Use the EABI calling standard (ARM's AAPCS) - Save r4 - r11
S	// The context is saved at the current stack location and a pointer is maintained in the thread structure.
S
S	#define _gfxThreadsInit()
S
S	static __attribute__((pcs("aapcs"),naked)) void _gfxTaskSwitch(thread *oldt, thread *newt) {
S		__asm__ volatile (	"push    {r4, r5, r6, r7, lr}                   \n\t"
S							"mov     r4, r8                                 \n\t"
S							"mov     r5, r9                                 \n\t"
S							"mov     r6, r10                                \n\t"
S							"mov     r7, r11                                \n\t"
S							"push    {r4, r5, r6, r7}						\n\t"
S							"str	sp, %[oldtcxt]							\n\t"
S							"ldr	sp, %[newtcxt]							\n\t"
S							"pop     {r4, r5, r6, r7}                   	\n\t"
S							"mov     r8, r4                                 \n\t"
S							"mov     r9, r5                                 \n\t"
S							"mov     r10, r6                                \n\t"
S							"mov     r11, r7                                \n\t"
S							"pop     {r4, r5, r6, r7, pc}					\n\t"
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S	}
S
S	static __attribute__((pcs("aapcs"),naked)) void _gfxStartThread(thread *oldt, thread *newt) {
S		newt->cxt = (char *)newt + newt->size;
S		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"		// save current context
S							"str	sp, %[oldtcxt]							\n\t"		// save context pointer
S							"ldr	sp, %[newtcxt]							\n\t"		// load new context pointer
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S
S		// Run the users function
S		gfxThreadExit(current->fn(current->param));
S	}
S
S#elif GFX_CPU == GFX_CPU_CORTEX_M3 || GFX_CPU == GFX_CPU_CORTEX_M4 || GFX_CPU == GFX_CPU_CORTEX_M7
X#elif 0 == 0x04 || 0 == 0x05 || 0 == 0x07
S
S	// Use the EABI calling standard (ARM's AAPCS) - Save r4 - r11
S	// The context is saved at the current stack location and a pointer is maintained in the thread structure.
S
S	#if CORTEX_USE_FPU
S		#warning "GOS Threads: You have specified GFX_CPU=GFX_CPU_CORTX_M? with no hardware floating point support but CORTEX_USE_FPU is TRUE. Try using GFX_CPU_GFX_CPU_CORTEX_M?_FP instead"
S	#endif
S
S	#define _gfxThreadsInit()
S
S	static __attribute__((pcs("aapcs"),naked)) void _gfxTaskSwitch(thread *oldt, thread *newt) {
S		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
S							"str	sp, %[oldtcxt]							\n\t"
S							"ldr	sp, %[newtcxt]							\n\t"
S							"pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}	\n\t"
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S	}
S
S	static __attribute__((pcs("aapcs"),naked)) void _gfxStartThread(thread *oldt, thread *newt) {
S		newt->cxt = (char *)newt + newt->size;
S		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
S							"str	sp, %[oldtcxt]							\n\t"
S							"ldr	sp, %[newtcxt]							\n\t"
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S
S		// Run the users function
S		gfxThreadExit(current->fn(current->param));
S	}
S
S#elif GFX_CPU == GFX_CPU_CORTEX_M4_FP || GFX_CPU == GFX_CPU_CORTEX_M7_FP
X#elif 0 == 0x06 || 0 == 0x08
S
S	// Use the EABI calling standard (ARM's AAPCS) - Save r4 - r11 and floating point
S	// The context is saved at the current stack location and a pointer is maintained in the thread structure.
S
S	#if !CORTEX_USE_FPU
S		#warning "GOS Threads: You have specified GFX_CPU=GFX_CPU_CORTX_M?_FP with hardware floating point support but CORTEX_USE_FPU is FALSE. Try using GFX_CPU_GFX_CPU_CORTEX_M? instead"
S	#endif
S
S	#define _gfxThreadsInit()
S
S	static __attribute__((pcs("aapcs-vfp"),naked)) void _gfxTaskSwitch(thread *oldt, thread *newt) {
S		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
S							"vpush	{s16-s31}								\n\t"
S							"str	sp, %[oldtcxt]							\n\t"
S							"ldr	sp, %[newtcxt]							\n\t"
S							"vpop	{s16-s31}								\n\t"
S							"pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}	\n\t"
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S	}
S
S	static __attribute__((pcs("aapcs-vfp"),naked)) void _gfxStartThread(thread *oldt, thread *newt) {
S		newt->cxt = (char *)newt + newt->size;
S		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
S							"vpush	{s16-s31}								\n\t"
S							"str	sp, %[oldtcxt]							\n\t"
S							"ldr	sp, %[newtcxt]							\n\t"
S							: [newtcxt] "=m" (newt->cxt)
S							: [oldtcxt] "m" (oldt->cxt)
S							: "memory");
S
S		// Run the users function
S		gfxThreadExit(current->fn(current->param));
S	}
S
N#else
N	#include <string.h>				// Prototype for memcpy()
N	#include <setjmp.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\setjmp.h" 1
N/* setjmp.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.6 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N
N
N/*
N * setjmp.h declares two functions and one type, for bypassing the normal
N * function call and return discipline (useful for dealing with unusual
N * conditions encountered in a low-level function of a program).
N */
N
N#ifndef __setjmp_h
N#define __setjmp_h
N#define __ARMCLIB_VERSION 5060016
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N
N  #ifndef __SETJMP_DECLS
N  #define __SETJMP_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Stypedef __int64 jmp_buf[];      /* do not specify size at all */
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef __int64 jmp_buf[48];
N  #else
N    typedef __int64 jmp_buf[20];    /* size as defined in the ATEPCS */
N  #endif
N                            /* an array type suitable for holding the data */
N                            /* needed to restore a calling environment.    */
N#endif
Nextern const int __aeabi_JMP_BUF_SIZE;
N              
N/* setjmp is a macro so that it cannot be used other than directly called. */
N/* NB that ANSI declare that anyone who undefines the setjmp macro or uses */
N/* (or defines) the name setjmp without including this header will get     */
N/* what they deserve.  In addition, C++ requires setjmp to be a macro.     */
N
Nextern _ARMABI int setjmp(jmp_buf /*env*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int setjmp(jmp_buf  ) __attribute__((__nonnull__(1)));
N   /* Saves its calling environment in its jmp_buf argument, for later use
N    * by the longjmp function.
N    * Returns: If the return is from a direct invocation, the setjmp function
N    *          returns the value zero. If the return from a call to the longjmp
N    *          function, the setjmp function returns a non zero value.
N    */
N#define setjmp(jmp_buf) (__CLIBNS setjmp(jmp_buf))
N
Nextern _ARMABI_NORETURN void longjmp(jmp_buf /*env*/, int /*val*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) __declspec(__noreturn) void longjmp(jmp_buf  , int  ) __attribute__((__nonnull__(1)));
N   /* Restores the environment saved by the most recent call to setjmp in the
N    * same invocation of the program, with the corresponding jmp_buf argument.
N    * If there has been no such call, or if the function containing the call
N    * to setjmp has terminated execution (eg. with a return statement) in the
N    * interim, the behaviour is undefined.
N    * All accessible objects have values as of the time longjmp was called,
N    * except that the values of objects of automatic storage duration that do
N    * not have volatile type and have been changed between the setjmp and
N    * longjmp calls are indeterminate.
N    * As it bypasses the usual function call and return mechanism, the longjmp
N    * function shall execute correctly in contexts of interrupts, signals and
N    * any of their associated functions. However, if the longjmp function is
N    * invoked from a nested signal handler (that is, from a function invoked as
N    * a result of a signal raised during the handling of another signal), the
N    * behaviour is undefined.
N    * Returns: After longjmp is completed, program execution continues as if
N    *          the corresponding call to setjmp had just returned the value
N    *          specified by val. The longjmp function cannot cause setjmp to
N    *          return the value 0; if val is 0, setjmp returns the value 1.
N    */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */    
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __SETJMP_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __SETJMP_NO_EXPORTS
S      using ::std::jmp_buf;
S      using ::std::setjmp;
S      using ::std::longjmp;
S      using ::std::__aeabi_JMP_BUF_SIZE;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of setjmp.h */
N
L 308 "..\..\..\..\..\..\external\ugfx\src\gos/gos_x_threads.c" 2
N
N	/**
N	 * Some compilers define a _setjmp() and a setjmp().
N	 * The difference between them is that setjmp() saves the signal masks.
N	 * That is of no use to us so we prefer to use the _setjmp() methods.
N	 * If they don't exist compile them to be the standard setjmp() function.
N	 * Similarly for longjmp().
N	 */
N	#if (!defined(setjmp) && !defined(_setjmp)) || GFX_COMPILER == GFX_COMPILER_KEIL
X	#if (!1L && !0L) || 34 == 34
N		#define CXT_SAVE 		setjmp
N	#else
S		#define CXT_SAVE 		_setjmp
N	#endif
N	#if (!defined(longjmp) && !defined(_longjmp)) || GFX_COMPILER == GFX_COMPILER_KEIL
X	#if (!0L && !0L) || 34 == 34
N		#define CXT_RESTORE 	longjmp
N	#else
S		#define CXT_RESTORE 	_longjmp
N	#endif
N
N	// A place to store the main thread context.
N	// All other threads will store the context directly after the thread structure (as part of the stack space).
N	static jmp_buf				maincxt;
N
N	/**
N	 * There are some compilers we know how they store the jmpbuf. For those
N	 * we can use the constant macro definitions. For others we have to "auto-detect".
N	 * Auto-detection is hairy and there is no guarantee it will work on all architectures.
N	 * For those it doesn't - read the compiler manuals and the library source code to
N	 * work out the correct macro values.
N	 * You can use the debugger to work out the values for your compiler and put them here.
N	 * Defining these macros as constant values makes the system behaviour guaranteed but also
N	 * makes your code compiler and cpu architecture dependent. It also saves a heap of code
N	 * and a few bytes of RAM.
N	 *
N	 * MACROS:
N	 *
N	 *	AUTO_DETECT_STACKFRAME	TRUE/FALSE			- TRUE to auto-detect stack frame structure
N	 *	STACK_DIR_UP			Macro/bool_t		- TRUE if the stack grows up instead of down
N	 *	MASK1					Macro/uint32_t		- The 1st mask of jmp_buf elements that need relocation
N	 *	MASK2					Macro/uint32_t		- The 2nd mask of jmp_buf elements that need relocation
N	 *	STACK_BASE				Macro/size_t		- The base of the stack frame relative to the local variables
N	 *	_gfxThreadsInit()		Macro/Function		- Initialise the scheduler
N	 *
N	 */
N	#if GFX_COMPILER == GFX_COMPILER_MINGW32
X	#if 34 == 39
S
S		#define AUTO_DETECT_STACKFRAME	FALSE
S		#define STACK_DIR_UP		FALSE
S		#define MASK1				0x00000011
S		#define MASK2				0x00000000
S		#define STACK_BASE			12
S		#define _gfxThreadsInit()	mainthread.cxt = maincxt
S
N	#else
N
N		// Use auto-detection of the stack frame format
N		// Assumes all the relevant stuff to be relocated is in the first 256 bytes of the jmpbuf.
N		#define AUTO_DETECT_STACKFRAME	TRUE
N		#define STACK_DIR_UP		stackdirup			// TRUE if the stack grow up instead of down
N		#define MASK1				jmpmask1			// The 1st mask of jmp_buf elements that need relocation
N		#define MASK2				jmpmask2			// The 2nd mask of jmp_buf elements that need relocation
N		#define STACK_BASE			stackbase			// The base of the stack frame relative to the local variables
N
N		// The structure for the saved stack frame information
N		typedef struct saveloc {
N			char *		localptr;
N			jmp_buf		cxt;
N		} saveloc;
N
N		static bool_t		stackdirup;
N		static uint32_t		jmpmask1;
N		static uint32_t		jmpmask2;
N		static size_t		stackbase;
N		static saveloc		*pframeinfo;
N
N		// These two functions are not static to prevent the compiler removing them as functions
N		void _gfxGetStackState(void) {
N			char *c;
N			pframeinfo->localptr = (char *)&c;
N			CXT_SAVE(pframeinfo->cxt);
X			( setjmp(pframeinfo->cxt));
N		}
N		void _gfxGetStackStateInFn(void) {
N			pframeinfo++;
N			_gfxGetStackState();
N			pframeinfo--;
N		}
N		static void _gfxThreadsInit(void) {
N			uint32_t	i;
N			char **		pout;
N			char **		pin;
N			size_t		diff;
N			char *		framebase;
N			saveloc		tmpsaveloc[2];
N
N			// Create the main thread context
N			mainthread.cxt = maincxt;
N
N			// Allocate a buffer to store our test data
N			pframeinfo = tmpsaveloc;
N
N			// Get details of the stack frame from within a function
N			_gfxGetStackStateInFn();
N
N			// Get details of the stack frame outside the function
N			_gfxGetStackState();
N
N			/* Work out the frame entries to relocate by treating the jump buffer as an array of pointers */
N			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
N			pout = (char **)pframeinfo[0].cxt;
N			pin =  (char **)pframeinfo[1].cxt;
N			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
N			framebase = pframeinfo[0].localptr;
N			jmpmask1 = jmpmask2 = 0;
N			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
N				if ((size_t)(*pout - *pin) == diff) {
N					if (i < 32)
N						jmpmask1 |= 1 << i;
N					else
N						jmpmask2 |= 1 << (i-32);
N
N					if (stackdirup) {
N						if (framebase > *pout)
N							framebase = *pout;
N					} else {
N						if (framebase < *pout)
N							framebase = *pout;
N					}
N				}
N			}
N			stackbase = stackdirup ? (pframeinfo[0].localptr - framebase) : (framebase - pframeinfo[0].localptr);
N		}
N
N	#endif
N
N	// Move the stack frame and relocate the context data
N	static void _gfxAdjustCxt(thread *t) {
N		char **	s;
N		char *	nf;
N		int		diff;
N		uint32_t	i;
N
N		// Copy the stack frame
N		#if AUTO_DETECT_STACKFRAME
X		#if -1
N			if (STACK_DIR_UP) {					// Stack grows up
X			if (stackdirup) {					
N				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
X				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + stackbase;
N				memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
X				memcpy(t+1, (char *)&s - stackbase, stackbase +sizeof(char *));
N			} else {							// Stack grows down
N				nf = (char *)(t) + t->size - (STACK_BASE + sizeof(char *));
X				nf = (char *)(t) + t->size - (stackbase + sizeof(char *));
N				memcpy(nf, &s, STACK_BASE+sizeof(char *));
X				memcpy(nf, &s, stackbase +sizeof(char *));
N			}
N		#elif STACK_DIR_UP
S			// Stack grows up
S			nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
S			memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
S		#else
S			// Stack grows down
S			nf = (char *)(t) + t->size - (STACK_BASE + sizeof(char *));
S			memcpy(nf, &s, STACK_BASE+sizeof(char *));
N		#endif
N
N		// Relocate the context data
N		s = (char **)(t->cxt);
N		diff = nf - (char *)&s;
N
N		// Relocate the elements we know need to be relocated
N		for (i = MASK1; i ; i >>= 1, s++) {
X		for (i = jmpmask1; i ; i >>= 1, s++) {
N			if ((i & 1))
N				*s += diff;
N		}
N		#ifdef MASK2
N			s = (char **)(t->cxt)+32;
N			for (i = MASK2; i ; i >>= 1, s++) {
X			for (i = jmpmask2; i ; i >>= 1, s++) {
N				if ((i & 1))
N					*s += diff;
N			}
N		#endif
N	}
N	static void _gfxXSwitch(thread *oldt, thread *newt, bool_t doBuildFrame) {
N
N		// Save the old context
N		if (CXT_SAVE(oldt->cxt)) return;
X		if (( setjmp(oldt->cxt))) return;
N
N		// Do we need to build a new context?
N		if (doBuildFrame) {
N
N			// Save our existing context as a starting point for the new context
N			newt->cxt = newt+1;
N			if (CXT_SAVE(newt->cxt)) {
X			if (( setjmp(newt->cxt))) {
N
N				// We are now running the new thread
N
N				// We can't use any of the above function parameters here
N				//	as we are on a different stack.
N
N				// Run the users function.
N				gfxThreadExit(current->fn(current->param));
N
N				// We never get here as gfxThreadExit() never returns
N			}
N
N			// Adjust the new context so the stack references are correct
N			_gfxAdjustCxt(newt);
N		}
N
N		// Start the new context
N		CXT_RESTORE(newt->cxt, 1);
X		longjmp(newt->cxt, 1);
N	}
N
N	#define _gfxTaskSwitch(oldt, newt)		_gfxXSwitch(oldt, newt, FALSE)
N	#define _gfxStartThread(oldt, newt)		_gfxXSwitch(oldt, newt, TRUE)
N#endif
N
Nstatic void Qinit(threadQ * q) {
N	q->head = q->tail = 0;
N}
N
Nstatic void Qadd(threadQ * q, thread *t) {
N	t->next = 0;
N	if (q->head) {
N		q->tail->next = t;
N		q->tail = t;
N	} else
N		q->head = q->tail = t;
N}
N
Nstatic thread *Qpop(threadQ * q) {
N	struct thread * t;
N
N	if (!q->head)
N		return 0;
N	t = q->head;
N	q->head = t->next;
N	return t;
N}
N
Nvoid _gosThreadsInit(void) {
N	Qinit(&readyQ);
N
N	mainthread.next = 0;
N	mainthread.size = sizeof(thread);
N	mainthread.flags = FLG_THD_MAIN;
X	mainthread.flags = 0x0002;
N	mainthread.fn = 0;
N	mainthread.param = 0;
N
N	_gfxThreadsInit();
N
N	current = &mainthread;
N}
N
NgfxThreadHandle gfxThreadMe(void) {
N	return (gfxThreadHandle)current;
N}
N
N// Check if there are dead processes to deallocate
Nstatic void cleanUpDeadThreads(void) {
N	thread *p;
N
N	while ((p = Qpop(&deadQ)))
N		gfxFree(p);
N}
N
Nvoid gfxYield(void) {
N	thread	*me;
N
N	// Clean up zombies
N	cleanUpDeadThreads();
N
N	// Is there another thread to run?
N	if (!readyQ.head)
N		return;
N
N	Qadd(&readyQ, me = current);
N	current = Qpop(&readyQ);
N	_gfxTaskSwitch(me, current);
X	_gfxXSwitch(me, current, 0);
N}
N
N// This routine is not currently public - but it could be.
Nvoid gfxThreadExit(threadreturn_t ret) {
N	thread	*me;
N
N	// Save the results in case someone is waiting
N	me = current;
N	me->param = (void *)ret;
N	me->flags |= FLG_THD_DEAD;
X	me->flags |= 0x0004;
N
N	// Add us to the dead list if we need deallocation as we can't free ourselves.
N	// If someone is waiting on the thread they will do the cleanup.
N	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
X	if ((me->flags & (0x0001|0x0008)) == 0x0001)
N		Qadd(&deadQ, me);
N
N	// Set the next thread. Exit if it was the last thread
N	if (!(current = Qpop(&readyQ)))
N		gfxExit();
N
N	// Switch to the new thread
N	_gfxTaskSwitch(me, current);
X	_gfxXSwitch(me, current, 0);
N
N	// We never get back here as we didn't re-queue ourselves
N}
N
NgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
XgfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, threadreturn_t (*fn)(void *p), void *param) {
N	thread *	t;
N	thread *	me;
N	(void)		prio;
N
N	// Ensure we have a minimum stack size
N	if (stacksz < sizeof(thread)+64) {
N		stacksz = sizeof(thread)+64;
N		stackarea = 0;
N	}
N
N	if (stackarea) {
N		t = (thread *)stackarea;
N		t->flags = 0;
N	} else {
N		t = (thread *)gfxAlloc(stacksz);
N		if (!t)
N			return 0;
N		t->flags = FLG_THD_ALLOC;
X		t->flags = 0x0001;
N	}
N	t->size = stacksz;
N	t->fn = fn;
N	t->param = param;
N
N	// Add the current thread to the queue because we are starting a new thread.
N	me = current;
N	Qadd(&readyQ, me);
N	current = t;
N
N	_gfxStartThread(me, t);
X	_gfxXSwitch(me, t, -1);
N
N	// Return the new thread handle
N	return t;
N}
N
Nthreadreturn_t gfxThreadWait(gfxThreadHandle th) {
N	thread *		t;
N
N	t = th;
N	if (t == current)
N		return -1;
N
N	// Mark that we are waiting
N	t->flags |= FLG_THD_WAIT;
X	t->flags |= 0x0008;
N
N	// Wait for the thread to die
N	while(!(t->flags & FLG_THD_DEAD))
X	while(!(t->flags & 0x0004))
N		gfxYield();
N
N	// Unmark
N	t->flags &= ~FLG_THD_WAIT;
X	t->flags &= ~0x0008;
N
N	// Clean up resources if needed
N	if (t->flags & FLG_THD_ALLOC)
X	if (t->flags & 0x0001)
N		gfxFree(t);
N
N	// Return the status left by the dead process
N	return (threadreturn_t)t->param;
N}
N
N#endif /* GFX_USE_OS_RAW32 */
L 20 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
N#include "gos_x_heap.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gos/gos_x_heap.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GOS_NEED_X_HEAP
X#if -1
N
N#include <string.h>				// Prototype for memcpy()
N
N
N#if GFX_OS_HEAP_SIZE == 0
X#if 0 == 0
N	#include <stdlib.h>				// Prototype for malloc(), realloc() and free()
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060016
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 17 "..\..\..\..\..\..\external\ugfx\src\gos/gos_x_heap.c" 2
N
N	void _gosHeapInit(void) {
N	}
N	void *gfxAlloc(size_t sz) {
N		return malloc(sz);
N	}
N
N	void *gfxRealloc(void *ptr, size_t oldsz, size_t newsz) {
N		(void) oldsz;
N		return realloc(ptr, newsz);
N	}
N
N	void gfxFree(void *ptr) {
N		free(ptr);
N	}
N
N#else
S
S	// Slot structure - user memory follows
S	typedef struct memslot {
S		struct memslot *next;		// The next memslot
S		size_t			sz;			// Includes the size of this memslot.
S		} memslot;
S
S	// Free Slot - immediately follows the memslot structure
S	typedef struct freeslot {
S		memslot *nextfree;			// The next free slot
S	} freeslot;
S
S	#define GetSlotSize(sz)		((((sz) + (sizeof(freeslot) - 1)) & ~(sizeof(freeslot) - 1)) + sizeof(memslot))
S	#define NextFree(pslot)		((freeslot *)Slot2Ptr(pslot))->nextfree
S	#define Ptr2Slot(p)			((memslot *)(p) - 1)
S	#define Slot2Ptr(pslot)		((pslot)+1)
S
S	static memslot *			firstSlot;
S	static memslot *			lastSlot;
S	static memslot *			freeSlots;
S	static char					heap[GFX_OS_HEAP_SIZE];
S
S	void _gosHeapInit(void) {
S		lastSlot = 0;
S		gfxAddHeapBlock(heap, GFX_OS_HEAP_SIZE);
S	}
S
S	void gfxAddHeapBlock(void *ptr, size_t sz) {
S		if (sz < sizeof(memslot)+sizeof(freeslot))
S			return;
S
S		if (lastSlot)
S			lastSlot->next = (memslot *)ptr;
S		else
S			firstSlot = lastSlot = freeSlots = (memslot *)ptr;
S
S		lastSlot->next = 0;
S		lastSlot->sz = sz;
S		NextFree(lastSlot) = 0;
S	}
S
S	void *gfxAlloc(size_t sz) {
S		register memslot *prev, *p, *new;
S
S		if (!sz) return 0;
S		sz = GetSlotSize(sz);
S		for (prev = 0, p = freeSlots; p != 0; prev = p, p = NextFree(p)) {
S			// Loop till we have a block big enough
S			if (p->sz < sz)
S				continue;
S			// Can we save some memory by splitting this block?
S			if (p->sz >= sz + sizeof(memslot)+sizeof(freeslot)) {
S				new = (memslot *)((char *)p + sz);
S				new->next = p->next;
S				p->next = new;
S				new->sz = p->sz - sz;
S				p->sz = sz;
S				if (lastSlot == p)
S					lastSlot = new;
S				NextFree(new) = NextFree(p);
S				NextFree(p) = new;
S			}
S			// Remove it from the free list
S			if (prev)
S				NextFree(prev) = NextFree(p);
S			else
S				freeSlots = NextFree(p);
S			// Return the result found
S			return Slot2Ptr(p);
S		}
S		// No slots large enough
S		return 0;
S	}
S
S	void *gfxRealloc(void *ptr, size_t oldsz, size_t sz) {
S		register memslot *prev, *p, *new;
S		(void) oldsz;
S
S		if (!ptr)
S			return gfxAlloc(sz);
S		if (!sz) {
S			gfxFree(ptr);
S			return 0;
S		}
S
S		p = Ptr2Slot(ptr);
S		sz = GetSlotSize(sz);
S
S		// If the next slot is free (and contiguous) merge it into this one
S		if ((char *)p + p->sz == (char *)p->next) {
S			for (prev = 0, new = freeSlots; new != 0; prev = new, new = NextFree(new)) {
S				if (new == p->next) {
S					p->next = new->next;
S					p->sz += new->sz;
S					if (prev)
S						NextFree(prev) = NextFree(new);
S					else
S						freeSlots = NextFree(new);
S					if (lastSlot == new)
S						lastSlot = p;
S					break;
S				}
S			}
S		}
S
S		// If this block is large enough we are nearly done
S		if (sz < p->sz) {
S			// Can we save some memory by splitting this block?
S			if (p->sz >= sz + sizeof(memslot)+sizeof(freeslot)) {
S				new = (memslot *)((char *)p + sz);
S				new->next = p->next;
S				p->next = new;
S				new->sz = p->sz - sz;
S				p->sz = sz;
S				if (lastSlot == p)
S					lastSlot = new;
S				NextFree(new) = freeSlots;
S				freeSlots = new;
S			}
S			return Slot2Ptr(p);
S		}
S
S		// We need to do this the hard way
S		new = gfxAlloc(sz);
S		if (new)
S			return 0;
S		memcpy(new, ptr, p->sz - sizeof(memslot));
S		gfxFree(ptr);
S		return new;
S	}
S
S	void gfxFree(void *ptr) {
S		register memslot *prev, *p, *new;
S
S		if (!ptr)
S			return;
S
S		p = Ptr2Slot(ptr);
S
S		// If the next slot is free (and contiguous) merge it into this one
S		if ((char *)p + p->sz == (char *)p->next) {
S			for (prev = 0, new = freeSlots; new != 0; prev = new, new = NextFree(new)) {
S				if (new == p->next) {
S					p->next = new->next;
S					p->sz += new->sz;
S					if (prev)
S						NextFree(prev) = NextFree(new);
S					else
S						freeSlots = NextFree(new);
S					if (lastSlot == new)
S						lastSlot = p;
S					break;
S				}
S			}
S		}
S
S		// Add it into the free chain
S		NextFree(p) = freeSlots;
S		freeSlots = p;
S	}
N#endif
N
N#endif /* GOS_NEED_X_HEAP */
N
N#if GFX_EMULATE_MALLOC
X#if 0
S	#include <stdlib.h>
S
S	void* malloc(size_t size) {
S		return gfxAlloc(size);
S	}
S	void free(void *ptr) {
S		gfxFree(ptr);
S	}
N#endif
L 21 "..\..\..\..\..\..\external\ugfx\src\gos/gos_mk.c" 2
L 10 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gdriver/gdriver_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdriver/gdriver_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gdriver.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdriver/gdriver.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDRIVER
X#if -1
N
N#include "gdriver.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdriver/gdriver.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdriver/gdriver.h
N *
N * @addtogroup GDRIVER
N *
N * @brief		Module to support registering and unregistering of drivers
N *
N * @details		GDRIVER provides a generalized way of defining and registering drivers.
N *
N * @note		There are many different types of drivers and GDRIVER can handle any
N * 				type of driver defined by the uGFX system.
N *
N * @note		GDRIVER supports multiple drivers for one type of device. eg a SSD1289 LCD
N * 				driver simultaneously with a framebuffer driver.
N * @note		GDRIVER supports multiple instances of a single driver. eg 2 SSD1289 LCD's.
N * @note		If there is only a single device of a particular type it will automatically
N *				register that device (it only needs to be included in the build, no special
N *				configuration is required)
N * @note		This module gdriver.h file is NOT included in the general gfx.h file.
N * 				Instead it is included in each driver type's driver API.
N *
N * @pre			GFX_USE_GDRIVER must be set to TRUE in your gfxconf.h
N *
N * @{
N */
N
N#ifndef _GDRIVER_H
N#define _GDRIVER_H
N
N#if GFX_USE_GDRIVER || defined(__DOXYGEN__)
X#if -1 || 0L
N
N/*===========================================================================*/
N/* Type definitions                                                          */
N/*===========================================================================*/
N
N#define GDRIVER_TYPE_DISPLAY		'g'		// @< A graphics display
N#define GDRIVER_TYPE_MOUSE			'm'		// @< A mouse
N#define GDRIVER_TYPE_TOUCH			'm'		// @< A touch display (equivalent to a mouse)
N#define GDRIVER_TYPE_TOGGLE			't'		// @< A toggle device eg GPIO pins, switches etc
N#define GDRIVER_TYPE_DIAL			'd'		// @< A analog or digit dial (ranges in value from a minimum to a maximum)
N#define GDRIVER_TYPE_KEYBOARD		'k'		// @< A keyboard
N#define GDRIVER_TYPE_BLOCK			'b'		// @< A block device
N#define GDRIVER_TYPE_STRING			's'		// @< A device that returns strings of data
N
N/**
N * @brief	All runtime driver structures start with this structure
N *
N * @note	This structure (and any additional structure memory) is allocated
N * 			dynamically by the system for each driver instance.
N */
Ntypedef struct GDriver {
N	struct GDriver *			driverchain;
N	const struct GDriverVMT *	vmt;
N} GDriver;
N
N/**
N * @brief	All driver VMT's start with this structure.
N */
Ntypedef struct GDriverVMT {
N	uint16_t	type;																// @< What type of driver this is
N	uint16_t	flags;																// @< Flags for the driver. Meaning is specific to each driver type.
N	uint32_t	objsize;															// @< How big the runtime driver structure is
N	bool_t		(*init)(GDriver *driver, void *param, unsigned driverinstance, unsigned systeminstance);	// @< Initialise the driver. Returns TRUE if OK.
N																					//		driverinstance is the instance 0..n of this driver.
N																					//		systeminstance is the instance 0..n of this type of device.
N																					//      The memory allocated is cleared before this call.
N	void		(*postinit)(GDriver *driver);										// @< Called once the driver is registered.
N	void		(*deinit)(GDriver *driver);											// @< De-initialise the driver
N} GDriverVMT;
N
N/**
N * @brief	A definition that allows getting addresses of GDriverVMT structures to put into a list.
N * @note	eg. <code>
N * 				const MyDriverVMTtype a[1] = {{...}};
N * 				const MyDriverVMTtype b[1] = {{...}};
N * 				...
N * 				\#define DRIVER_LIST		a, b
N * 				extern GDriverVMTList	DRIVER_LIST;	// Now treated as single element arrays of GDriverVMT
N * 				const GDriverVMT const * mylist = { DRIVER_LIST };
N * 				</code>
N *
N */
Ntypedef const struct GDriverVMT const	GDriverVMTList[1];
N
N/*===========================================================================*/
N/* External declarations.                                                    */
N/*===========================================================================*/
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N	/**
N	 * @brief	Register a new driver instance.
N	 * @return	The runtime driver structure or NULL if it fails.
N	 *
N	 * @param[in]	vmt		The driver's vmt
N	 * @param[in]	param	An arbitrary paramater passed to the driver init routine.
N	 */
N	GDriver *gdriverRegister(const GDriverVMT *vmt, void *param);
N
N	/**
N	 * @brief	UnRegister a driver instance.
N	 *
N	 * @param[in]	driver	The driver instance's runtime structure
N	 */
N	void gdriverUnRegister(GDriver *driver);
N
N	/**
N	 * @brief	Get the driver for a particular instance of a type of device
N	 * @return	The runtime driver structure or NULL if it fails.
N	 *
N	 * @param[in]	type		The type of driver to find
N	 * @param[in]	instance	The instance (0..n) to find
N	 */
N	GDriver *gdriverGetInstance(uint16_t type, unsigned instance);
N
N	/**
N	 * @brief	Get the count of instances of a type of device
N	 * @return	The instance count.
N	 *
N	 * @note	Valid instance numbers are then 0 .. count-1
N	 *
N	 * @param[in]	type		The type of driver to find
N	 */
N	unsigned gdriverInstanceCount(uint16_t type);
N
N	/**
N	 * @brief	Get the instance number for a device
N	 * @return	The instance number or (unsigned)-1 if it fails.
N	 *
N	 * @param[in]	driver	The driver to find the instance number for
N	 */
N	unsigned gdriverGetDriverInstanceNumber(GDriver *driver);
N
N	/**
N	 * @brief	Get the next driver for a type of device
N	 * @return	The runtime driver structure or NULL if there are no more.
N	 *
N	 * @param[in]	type		The type of driver to find
N	 * @param[in]	driver		The last driver returned or NULL to start again
N	 */
N	GDriver *gdriverGetNext(uint16_t type, GDriver *driver);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* GFX_USE_GDRIVER */
N
N#endif /* _GDRIVER_H */
N/** @} */
L 13 "..\..\..\..\..\..\external\ugfx\src\gdriver/gdriver.c" 2
N
N#include <string.h>         // For memset
N
N// Define the tables to hold the driver instances.
Nstatic GDriver *dhead;
Nstatic GDriver *dtail;
N
N// The system initialization.
Nvoid _gdriverInit(void) {
N}
N
N// The system de-initialization.
Nvoid _gdriverDeinit(void) {
N	while(dhead)
N		gdriverUnRegister(dhead);
N}
N
N
NGDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
N	GDriver *	pd;
N	unsigned	dinstance, sinstance;
N
N	// Loop to find the driver instance and the system instance numbers
N	dinstance = sinstance = 0;
N	for(pd = dhead; pd; pd = pd->driverchain) {
N		if (pd->vmt == vmt)
N			dinstance++;
N		if (pd->vmt->type == vmt->type)
N			sinstance++;
N	}
N
N	// Get a new driver instance of the correct size and initialize it
N	pd = gfxAlloc(vmt->objsize);
N	if (!pd)
N		return 0;
N    memset(pd, 0, vmt->objsize);
N	pd->vmt = vmt;
N	if (vmt->init && !vmt->init(pd, param, dinstance, sinstance)) {
N		gfxFree(pd);
N		return 0;
N	}
N
N	// Add it to the driver chain (at the end)
N	if (dhead)
N		dtail->driverchain = pd;
N	else
N		dhead = pd;
N	dtail = pd;
N
N	// Do the post init
N	if (vmt->postinit)
N		vmt->postinit(pd);
N
N	return pd;
N}
N
Nvoid gdriverUnRegister(GDriver *driver) {
N	GDriver		*pd;
N
N	// Safety
N	if (!driver)
N		return;
N
N	// Remove it from the list of drivers
N	if (dhead == driver)
N		dhead = driver->driverchain;
N	else {
N		for(pd = dhead; pd->driverchain; pd = pd->driverchain) {
N			if (pd->driverchain == driver) {
N				pd->driverchain = driver->driverchain;
N				if (!pd->driverchain)
N					dtail = pd;
N				break;
N			}
N		}
N	}
N
N	// Call the deinit()
N	if (driver->vmt->deinit)
N		driver->vmt->deinit(driver);
N
N	// Cleanup
N	gfxFree(driver);
N}
N
NGDriver *gdriverGetInstance(uint16_t type, unsigned instance) {
N	GDriver		*pd;
N	unsigned	sinstance;
N
N	// Loop to find the system instance
N	sinstance = 0;
N	for(pd = dhead; pd; pd = pd->driverchain) {
N		if (pd->vmt->type == type) {
N			if (sinstance == instance)
N				return pd;
N			sinstance++;
N		}
N	}
N	return 0;
N}
N
Nunsigned gdriverInstanceCount(uint16_t type) {
N	GDriver		*pd;
N	unsigned	sinstance;
N
N	// Loop to count the system instances
N	sinstance = 0;
N	for(pd = dhead; pd; pd = pd->driverchain) {
N		if (pd->vmt->type == type)
N			sinstance++;
N	}
N	return sinstance;
N}
N
NGDriver *gdriverGetNext(uint16_t type, GDriver *driver) {
N	driver = driver ? driver->driverchain : dhead;
N
N	while(driver && driver->vmt->type != type)
N		driver = driver->driverchain;
N
N	return driver;
N}
N
Nunsigned gdriverGetDriverInstanceNumber(GDriver *driver) {
N	GDriver		*pd;
N	unsigned	instance;
N
N	// Loop to find the system instance
N	instance = 0;
N	for(pd = dhead; pd; pd = pd->driverchain) {
N		if (pd == driver)
N			return instance;
N		if (pd->vmt->type == driver->vmt->type)
N			instance++;
N	}
N	return (unsigned)-1;
N}
N
N#endif /* GFX_USE_GDRIVER */
L 9 "..\..\..\..\..\..\external\ugfx\src\gdriver/gdriver_mk.c" 2
L 11 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gqueue/gqueue_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gqueue/gqueue_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gqueue.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gqueue/gqueue.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GQUEUE
X#if 0
S
S#if GQUEUE_NEED_BUFFERS
S	static gfxQueueGSync	bufferFreeList;
S#endif
S
Svoid _gqueueInit(void)
S{
S	#if GQUEUE_NEED_BUFFERS
S		gfxQueueGSyncInit(&bufferFreeList);
S	#endif
S}
S
Svoid _gqueueDeinit(void)
S{
S}
S
S#if GQUEUE_NEED_ASYNC
S	void gfxQueueASyncInit(gfxQueueASync *pqueue) {
S		pqueue->head = pqueue->tail = 0;
S	}
S
S	gfxQueueASyncItem *gfxQueueASyncGet(gfxQueueASync *pqueue) {
S		gfxQueueASyncItem	*pi;
S
S		// This is just a shortcut to speed execution
S		if (!pqueue->head)
S			return 0;
S
S		gfxSystemLock();
S		pi = gfxQueueASyncGetI(pqueue);
S		gfxSystemUnlock();
S
S		return pi;
S	}
S	gfxQueueASyncItem *gfxQueueASyncGetI(gfxQueueASync *pqueue) {
S		gfxQueueASyncItem	*pi;
S
S		if ((pi = pqueue->head)) {
S			pqueue->head = pi->next;
S			pi->next = 0;
S		}
S
S		return pi;
S	}
S
S	void gfxQueueASyncPut(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueASyncPutI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueASyncPutI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		if (!pitem) return;				// Safety
S		pitem->next = 0;
S		if (!pqueue->head) {
S			pqueue->head = pqueue->tail = pitem;
S		} else {
S			pqueue->tail->next = pitem;
S			pqueue->tail = pitem;
S		}
S	}
S
S	void gfxQueueASyncPush(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueASyncPushI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueASyncPushI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		if (!pitem) return;				// Safety
S		pitem->next = pqueue->head;
S		pqueue->head = pitem;
S		if (!pitem->next)
S			pqueue->tail = pitem;
S	}
S
S	void gfxQueueASyncInsert(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter) {
S		gfxSystemLock();
S		gfxQueueASyncInsertI(pqueue, pitem, pafter);
S		gfxSystemUnlock();
S	}
S	void gfxQueueASyncInsertI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter) {
S		if (!pitem) return;				// Safety
S
S		if (pafter && gfxQueueASyncIsInI(pqueue, pafter)) {
S			pitem->next = pafter->next;
S			pafter->next = pitem;
S			if (pqueue->tail == pafter)
S				pqueue->tail = pitem;
S		} else {
S			pitem->next = 0;
S			if (!pqueue->head) {
S				pqueue->head = pqueue->tail = pitem;
S			} else {
S				pqueue->tail->next = pitem;
S				pqueue->tail = pitem;
S			}
S		}
S	}
S
S	void gfxQueueASyncRemove(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueASyncRemoveI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueASyncRemoveI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
S		gfxQueueASyncItem *pi;
S
S		if (!pitem) return;				// Safety
S		if (pqueue->head) {
S			if (pqueue->head == pitem) {
S				pqueue->head = pitem->next;
S				pitem->next = 0;
S			} else {
S				for(pi = pqueue->head; pi->next; pi = pi->next) {
S					if (pi->next == pitem) {
S						pi->next = pitem->next;
S						if (pqueue->tail == pitem)
S							pqueue->tail = pi;
S						pitem->next = 0;
S						break;
S					}
S				}
S			}
S		}
S	}
S
S	bool_t gfxQueueASyncIsIn(gfxQueueASync *pqueue, const gfxQueueASyncItem *pitem) {
S		bool_t	res;
S
S		gfxSystemLock();
S		res = gfxQueueASyncIsInI(pqueue, pitem);
S		gfxSystemUnlock();
S
S		return res;
S	}
S	bool_t gfxQueueASyncIsInI(gfxQueueASync *pqueue, const gfxQueueASyncItem *pitem) {
S		gfxQueueASyncItem *pi;
S
S		for(pi = pqueue->head; pi; pi = pi->next) {
S			if (pi == pitem)
S				return TRUE;
S		}
S		return FALSE;
S	}
S#endif
S
S#if GQUEUE_NEED_GSYNC
S	void gfxQueueGSyncInit(gfxQueueGSync *pqueue) {
S		pqueue->head = pqueue->tail = 0;
S		gfxSemInit(&pqueue->sem, 0, MAX_SEMAPHORE_COUNT);
S	}
S	void gfxQueueGSyncDeinit(gfxQueueGSync *pqueue) {
S		pqueue->head = pqueue->tail = 0;
S		gfxSemDestroy(&pqueue->sem);
S	}
S
S	gfxQueueGSyncItem *gfxQueueGSyncGet(gfxQueueGSync *pqueue, delaytime_t ms) {
S		gfxQueueGSyncItem	*pi;
S
S		if (!gfxSemWait(&pqueue->sem, ms))
S			return 0;
S
S		gfxSystemLock();
S		pi = pqueue->head;
S		pqueue->head = pi->next;
S		pi->next = 0;
S		gfxSystemUnlock();
S
S		return pi;
S	}
S	gfxQueueGSyncItem *gfxQueueGSyncGetI(gfxQueueGSync *pqueue) {
S		gfxQueueGSyncItem	*pi;
S
S		if (!gfxSemWaitI(&pqueue->sem))
S			return 0;
S
S		pi = pqueue->head;
S		pqueue->head = pi->next;
S		pi->next = 0;
S		return pi;
S	}
S
S	void gfxQueueGSyncPut(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueGSyncPutI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueGSyncPutI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		if (!pitem) return;				// Safety
S		pitem->next = 0;
S		if (!pqueue->head) {
S			pqueue->head = pqueue->tail = pitem;
S		} else {
S			pqueue->tail->next = pitem;
S			pqueue->tail = pitem;
S		}
S		gfxSemSignalI(&pqueue->sem);
S	}
S
S	void gfxQueueGSyncPush(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueGSyncPushI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueGSyncPushI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		if (!pitem) return;				// Safety
S		pitem->next = pqueue->head;
S		pqueue->head = pitem;
S		if (!pitem->next)
S			pqueue->tail = pitem;
S		gfxSemSignalI(&pqueue->sem);
S	}
S
S	void gfxQueueGSyncInsert(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem, gfxQueueASyncItem *pafter) {
S		gfxSystemLock();
S		gfxQueueGSyncInsertI(pqueue, pitem, pafter);
S		gfxSystemUnlock();
S	}
S	void gfxQueueGSyncInsertI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem, gfxQueueASyncItem *pafter) {
S		if (!pitem) return;				// Safety
S
S		if (pafter && gfxQueueGSyncIsInI(pqueue, pafter)) {
S			pitem->next = pafter->next;
S			pafter->next = pitem;
S			if (pqueue->tail == pafter)
S				pqueue->tail = pitem;
S		} else {
S			pitem->next = 0;
S			if (!pqueue->head) {
S				pqueue->head = pqueue->tail = pitem;
S			} else {
S				pqueue->tail->next = pitem;
S				pqueue->tail = pitem;
S			}
S		}
S	}
S
S	void gfxQueueGSyncRemove(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		gfxSystemLock();
S		gfxQueueGSyncRemoveI(pqueue, pitem);
S		gfxSystemUnlock();
S	}
S	void gfxQueueGSyncRemoveI(gfxQueueGSync *pqueue, gfxQueueGSyncItem *pitem) {
S		gfxQueueGSyncItem *pi;
S
S		if (!pitem) return;				// Safety
S		if (pqueue->head) {
S			if (pqueue->head == pitem) {
S				pqueue->head = pitem->next;
S				pitem->next = 0;
S			} else {
S				for(pi = pqueue->head; pi->next; pi = pi->next) {
S					if (pi->next == pitem) {
S						pi->next = pitem->next;
S						if (pqueue->tail == pitem)
S							pqueue->tail = pi;
S						pitem->next = 0;
S						break;
S					}
S				}
S			}
S		}
S	}
S
S	bool_t gfxQueueGSyncIsIn(gfxQueueGSync *pqueue, const gfxQueueGSyncItem *pitem) {
S		bool_t		res;
S
S		gfxSystemLock();
S		res = gfxQueueGSyncIsInI(pqueue, pitem);
S		gfxSystemUnlock();
S
S		return res;
S	}
S	bool_t gfxQueueGSyncIsInI(gfxQueueGSync *pqueue, const gfxQueueGSyncItem *pitem) {
S		gfxQueueGSyncItem *pi;
S
S		for(pi = pqueue->head; pi; pi = pi->next) {
S			if (pi == pitem)
S				return TRUE;
S		}
S		return FALSE;
S	}
S#endif
S
S#if GQUEUE_NEED_FSYNC
S	void gfxQueueFSyncInit(gfxQueueFSync *pqueue) {
S		pqueue->head = pqueue->tail = 0;
S		gfxSemInit(&pqueue->sem, 0, MAX_SEMAPHORE_COUNT);
S	}
S	void gfxQueueFSyncDeinit(gfxQueueGSync *pqueue) {
S		while(gfxQueueFSyncGet(pqueue, TIME_IMMEDIATE));
S		pqueue->head = pqueue->tail = 0;
S		gfxSemDestroy(&pqueue->sem);
S	}
S
S	gfxQueueFSyncItem *gfxQueueFSyncGet(gfxQueueFSync *pqueue, delaytime_t ms) {
S		gfxQueueFSyncItem	*pi;
S
S		if (!gfxSemWait(&pqueue->sem, ms))
S			return 0;
S
S		gfxSystemLock();
S		pi = pqueue->head;
S		pqueue->head = pi->next;
S		pi->next = 0;
S		gfxSystemUnlock();
S
S		gfxSemSignal(&pi->sem);
S		gfxSemDestroy(&pi->sem);
S
S		return pi;
S	}
S
S	bool_t gfxQueueFSyncPut(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, delaytime_t ms) {
S		if (!pitem) return;				// Safety
S		gfxSemInit(&pitem->sem, 0, 1);
S		pitem->next = 0;
S
S		gfxSystemLock();
S		if (!pqueue->head) {
S			pqueue->head = pqueue->tail = pitem;
S		} else {
S			pqueue->tail->next = pitem;
S			pqueue->tail = pitem;
S		}
S		gfxSystemUnlock();
S
S		gfxSemSignal(&pqueue->sem);
S
S		return gfxSemWait(&pitem->sem, ms);
S	}
S
S	bool_t gfxQueueFSyncPush(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, delaytime_t ms) {
S		if (!pitem) return;				// Safety
S		gfxSemInit(&pitem->sem, 0, 1);
S
S		gfxSystemLock();
S		pitem->next = pqueue->head;
S		pqueue->head = pitem;
S		if (!pitem->next)
S			pqueue->tail = pitem;
S		gfxSystemUnlock();
S
S		gfxSemSignal(&pqueue->sem);
S
S		return gfxSemWait(&pitem->sem, ms);
S	}
S
S	bool_t gfxQueueFSyncInsert(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem, gfxQueueASyncItem *pafter, delaytime_t ms) {
S		if (!pitem) return;				// Safety
S		gfxSemInit(&pitem->sem, 0, 1);
S
S		gfxSystemLock();
S		if (pafter && gfxQueueGSyncIsInI(pqueue, pafter)) {
S			pitem->next = pafter->next;
S			pafter->next = pitem;
S			if (pqueue->tail == pafter)
S				pqueue->tail = pitem;
S		} else {
S			pitem->next = 0;
S			if (!pqueue->head) {
S				pqueue->head = pqueue->tail = pitem;
S			} else {
S				pqueue->tail->next = pitem;
S				pqueue->tail = pitem;
S			}
S		}
S		gfxSystemUnlock();
S
S		gfxSemSignal(&pqueue->sem);
S
S		return gfxSemWait(&pitem->sem, ms);
S
S	}
S
S	void gfxQueueFSyncRemove(gfxQueueFSync *pqueue, gfxQueueFSyncItem *pitem) {
S		gfxQueueFSyncItem *pi;
S
S		if (!pitem) return;				// Safety
S		gfxSystemLock();
S		if (pqueue->head) {
S			if (pqueue->head == pitem) {
S				pqueue->head = pitem->next;
S			found:
S				pitem->next = 0;
S				gfxSystemUnlock();
S				gfxSemSignal(&pitem->sem);
S				gfxSemDestroy(&pitem->sem);
S				return;
S			}
S			for(pi = pqueue->head; pi->next; pi = pi->next) {
S				if (pi->next == pitem) {
S					pi->next = pitem->next;
S					if (pqueue->tail == pitem)
S						pqueue->tail = pi;
S					goto found;
S				}
S			}
S		}
S		gfxSystemUnlock();
S	}
S
S	bool_t gfxQueueFSyncIsIn(gfxQueueFSync *pqueue, const gfxQueueFSyncItem *pitem) {
S		bool_t	res;
S
S		gfxSystemLock();
S		res = gfxQueueFSyncIsInI(pqueue, pitem);
S		gfxSystemUnlock();
S
S		return res;
S	}
S	bool_t gfxQueueFSyncIsInI(gfxQueueFSync *pqueue, const gfxQueueFSyncItem *pitem) {
S		gfxQueueASyncItem *pi;
S
S		for(pi = pqueue->head; pi; pi = pi->next) {
S			if (pi == pitem)
S				return TRUE;
S		}
S		return FALSE;
S	}
S#endif
S
S#if GQUEUE_NEED_BUFFERS
S	bool_t gfxBufferAlloc(unsigned num, size_t size) {
S		GDataBuffer *pd;
S
S		if (num < 1)
S			return FALSE;
S
S		// Round up to a multiple of 4 to prevent problems with structure alignment
S		size = (size + 3) & ~0x03;
S
S		// Allocate the memory
S		if (!(pd = gfxAlloc((size+sizeof(GDataBuffer)) * num)))
S			return FALSE;
S
S		// Add each of them to our free list
S		for(;num--; pd = (GDataBuffer *)((char *)(pd+1)+size)) {
S			pd->size = size;
S			gfxBufferRelease(pd);
S		}
S
S		return TRUE;
S	}
S
S	void gfxBufferRelease(GDataBuffer *pd)		{ gfxQueueGSyncPut(&bufferFreeList, (gfxQueueGSyncItem *)pd); }
S	void gfxBufferReleaseI(GDataBuffer *pd)		{ gfxQueueGSyncPutI(&bufferFreeList, (gfxQueueGSyncItem *)pd); }
S	GDataBuffer *gfxBufferGet(delaytime_t ms)	{ return (GDataBuffer *)gfxQueueGSyncGet(&bufferFreeList, ms); }
S	GDataBuffer *gfxBufferGetI(void)			{ return (GDataBuffer *)gfxQueueGSyncGetI(&bufferFreeList); }
S	bool_t gfxBufferIsAvailable(void)			{ return bufferFreeList.head != 0; }
S
S#endif
S
S
N#endif /* GFX_USE_GQUEUE */
L 9 "..\..\..\..\..\..\external\ugfx\src\gqueue/gqueue_mk.c" 2
L 12 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gdisp/gdisp_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* The very first thing that has to be compiled here is mf_font.c so that
N * inclusion of the font header files does not stop the inclusion of the
N * implementation specific parts of the font files.
N */
N#include "mcufont/mf_font.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_font.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_config.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_config.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Configuration constants for mcufont. */
N
N#ifndef _MF_CONFIG_H_
N#define _MF_CONFIG_H_
N
N/*******************************************************
N * Configuration settings related to GFX               *
N *******************************************************/
N
N#include "../../../gfx.h"
N
N#if !GFX_USE_GDISP || !GDISP_NEED_TEXT
X#if ! -1 || !0
N	#define MF_NO_COMPILE				// Don't compile any font code
N#endif
N
N/* Prevent double definitions of standard int types */
N#define MF_NO_STDINT_H
N
N/* Mapping from uGFX settings to mcufont settings */
N#if GDISP_NEED_UTF8
X#if 0
S	#define MF_ENCODING MF_ENCODING_UTF8
N#else
N	#define MF_ENCODING MF_ENCODING_ASCII
N#endif
N
N#if GDISP_NEED_TEXT_WORDWRAP
X#if 0
S	#define MF_USE_ADVANCED_WORDWRAP 1
N#else
N	#define MF_USE_ADVANCED_WORDWRAP 0
N#endif
N
N#define MF_USE_KERNING GDISP_NEED_TEXT_KERNING
N#define MF_FONT_FILE_NAME "src/gdisp/fonts/fonts.h"
N
N/* These are not used for now */
N#define MF_USE_JUSTIFY 0
N
N/*******************************************************
N * Configuration settings related to build environment *
N *******************************************************/
N
N/* Name of the file that contains all the included fonts. */
N#ifndef MF_FONT_FILE_NAME
S#define MF_FONT_FILE_NAME "fonts.h"
N#endif
N
N
N/*****************************************
N * Configuration settings related to API *
N *****************************************/
N
N/* Encoding for the input data.
N * With the unicode encodings, the library supports the range of unicode
N * characters 0x0000-0xFFFF (the Basic Multilingual Plane).
N * 
N * ASCII: Plain ascii (somewhat works with ISO8859-1 also)
N * UTF8:  UTF8 encoding (variable number of bytes)
N * UTF16: UTF16 encoding (2 bytes per character, compatible with UCS-2)
N * WCHAR: Use compiler's wchar_t (usually same as UTF16)
N */
N#define MF_ENCODING_ASCII 0
N#define MF_ENCODING_UTF8  1
N#define MF_ENCODING_UTF16 2
N#define MF_ENCODING_WCHAR 3
N#ifndef MF_ENCODING
S#define MF_ENCODING MF_ENCODING_UTF8
N#endif
N
N
N/************************************************************************
N * Configuration settings related to visual appearance of rendered text *
N ************************************************************************/
N
N/* Minimum space between characters, in percents of the glyph width.
N * Increasing this causes the kerning module to leave more space between
N * characters.
N */
N#ifndef MF_KERNING_SPACE_PERCENT
N#define MF_KERNING_SPACE_PERCENT 15
N#endif
N
N/* Minimum space between characters, in pixels. Added to the percentual
N * spacing. This pixel-based value guarantees enough space even with small
N * fonts.
N */
N#ifndef MF_KERNING_SPACE_PIXELS
N#define MF_KERNING_SPACE_PIXELS 3
N#endif
N
N/* Maximum adjustment done by the kerning algorithm, as percent of the
N * glyph width.
N */
N#ifndef MF_KERNING_LIMIT
N#define MF_KERNING_LIMIT 20
N#endif
N
N/* Spacing of tabulator stops. The value is multiplied by the width of the
N * 'm' character in the current font.
N */
N#ifndef MF_TABSIZE
N#define MF_TABSIZE 8
N#endif
N
N
N/*************************************************************************
N * Configuration settings to strip down library to reduce resource usage *
N *************************************************************************/
N
N/* Enable or disable the kerning module.
N * Disabling it saves some code size and run time, but causes the spacing
N * between characters to be less consistent.
N */
N#ifndef MF_USE_KERNING
S#define MF_USE_KERNING 1
N#endif
N
N/* Enable or disable the advanced word wrap algorithm.
N * If disabled, uses a simpler algorithm.
N */
N#ifndef MF_USE_ADVANCED_WORDWRAP
S#define MF_USE_ADVANCED_WORDWRAP 1
N#endif
N
N/* Enable of disable the justification algorithm.
N * If disabled, mf_render_justified renders just left-aligned.
N */
N#ifndef MF_USE_JUSTIFY
S#define MF_USE_JUSTIFY 1
N#endif
N
N/* Enable or disable the center and right alignment code.
N * If disabled, any alignment results in MF_ALIGN_LEFT.
N */
N#ifndef MF_USE_ALIGN
N#define MF_USE_ALIGN 1
N#endif
N
N/* Enable or disable the support for tab alignment.
N * If disabled, tabs will be rendered as regular space character.
N */
N#ifndef MF_USE_TABS
N#define MF_USE_TABS 1
N#endif
N
N/* Number of vertical zones to use when computing kerning.
N * Larger values give more accurate kerning, but are slower and use somewhat
N * more memory. There is no point to increase this beyond the height of the
N * font.
N */
N#ifndef MF_KERNING_ZONES
N#define MF_KERNING_ZONES 16
N#endif
N
N
N
N/* Add extern "C" when used from C++. */
N#ifdef __cplusplus
S#define MF_EXTERN extern "C"
N#else
N#define MF_EXTERN
N#endif
N
N#endif
N
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_font.c" 2
N
N#ifndef MF_NO_COMPILE
S
S#define MF_BWFONT_INTERNALS
S#define MF_RLEFONT_INTERNALS
S#define MF_SCALEDFONT_INTERNALS
S#include "mf_font.h"
S#include "mf_rlefont.h"
S#include "mf_bwfont.h"
S#include "mf_scaledfont.h"
S
S#include <stdbool.h>
S
S/* This will be made into a list of included fonts using macro magic. */
S#define MF_INCLUDED_FONTS 0
S
S/* Included fonts begin here */
S#include MF_FONT_FILE_NAME
S/* Include fonts end here */
S
Suint8_t mf_render_character(const struct mf_font_s *font,
S                            int16_t x0, int16_t y0,
S                            mf_char character,
S                            mf_pixel_callback_t callback,
S                            void *state)
S{
S    uint8_t width;
S    width = font->render_character(font, x0, y0, character, callback, state);
S    
S    if (!width)
S    {
S        width = font->render_character(font, x0, y0, font->fallback_character,
S                                       callback, state);
S    }
S    
S    return width;
S}
S
Suint8_t mf_character_width(const struct mf_font_s *font,
S                           mf_char character)
S{
S    uint8_t width;
S    width = font->character_width(font, MFCHAR2UINT16(character));
S    
S    if (!width)
S    {
S        width = font->character_width(font, font->fallback_character);
S    }
S    
S    return width;
S}
S
S/* Avoids a dependency on libc */
Sstatic bool strequals(const char *a, const char *b)
S{
S    while (*a)
S    {
S        if (*a++ != *b++)
S            return false;
S    }
S    return (!*b);
S}
S
Sconst struct mf_font_s *mf_find_font(const char *name)
S{
S    const struct mf_font_list_s *f;
S    f = MF_INCLUDED_FONTS;
S    
S    while (f)
S    {
S        if (strequals(f->font->full_name, name) ||
S            strequals(f->font->short_name, name))
S        {
S            return f->font;
S        }
S        
S        f = f->next;
S    }
S    
S    return 0;
S}
S
Sconst struct mf_font_list_s *mf_get_font_list()
S{
S    return MF_INCLUDED_FONTS;
S}
S
N#endif //MF_NO_COMPILE
N
L 13 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_rlefont.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_rlefont.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_rlefont.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_rlefont.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* A compressed font format based on run length encoding and dictionary
N * compression.
N */
N
N#ifndef _MF_RLEFONT_H_
N#define _MF_RLEFONT_H_
N
N#include "mf_font.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_font.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Generic font type that supports fonts with multiple kinds of compression.
N * Provides an interface for decoding and rendering single characters.
N */
N
N#ifndef _MF_FONT_H_
N#define _MF_FONT_H_
N
N#include "mf_encoding.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_encoding.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Simple UTF-8 decoder. Also implements the much simpler ASCII and UTF16
N * input encodings.
N */
N
N#ifndef _MF_ENCODING_H_
N#define _MF_ENCODING_H_
N
N#include "mf_config.h"
N#ifndef MF_NO_STDINT_H
S#include <stdint.h>
N#endif
N
N/* Type used to represent characters internally. */
N#if MF_ENCODING == MF_ENCODING_ASCII
X#if 0 == 0
N	typedef char mf_char;
N	#define MFCHAR2UINT16(c)	((uint16_t)(uint8_t)(c))
N#else
S	typedef uint16_t mf_char;
S	#define MFCHAR2UINT16(c)	(c)
N#endif
N
N/* Type used to represent input strings. */
N#if MF_ENCODING == MF_ENCODING_ASCII
X#if 0 == 0
Ntypedef const char * mf_str;
N#elif MF_ENCODING == MF_ENCODING_UTF8
Stypedef const char * mf_str;
S#elif MF_ENCODING == MF_ENCODING_UTF16
Stypedef const uint16_t * mf_str;
S#elif MF_ENCODING == MF_ENCODING_WCHAR
S#include <stddef.h>
Stypedef const wchar_t * mf_str;
N#endif
N
N/* Returns the next character in the string and advances the pointer.
N * When the string ends, returns 0 and leaves the pointer at the 0 byte.
N * 
N * str: Pointer to variable holding current location in string.
N *      Initialize it to the start of the string.
N * 
N * Returns: The next character, as unicode codepoint.
N */
NMF_EXTERN mf_char mf_getchar(mf_str *str);
X mf_char mf_getchar(mf_str *str);
N
N/* Moves back the pointer to the beginning of the previous character.
N * Be careful not to go beyond the start of the string.
N */
NMF_EXTERN void mf_rewind(mf_str *str);
X void mf_rewind(mf_str *str);
N
N#endif
L 16 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_font.h" 2
N
N/* Callback function that writes pixels to screen / buffer / whatever.
N *
N * x:     X coordinate of the first pixel to write.
N * y:     Y coordinate of the first pixel to write.
N * count: Number of pixels to fill (horizontally).
N * alpha: The "opaqueness" of the pixels, 0 for background, 255 for text.
N * state: Free variable that was passed to render_character().
N */
Ntypedef void (*mf_pixel_callback_t) (int16_t x, int16_t y, uint8_t count,
N                                     uint8_t alpha, void *state);
N
N/* General information about a font. */
Nstruct mf_font_s
N{
N    /* Full name of the font, comes from the original font file. */
N    const char *full_name;
N    
N    /* Short name of the font, comes from file name. */
N    const char *short_name;
N    
N    /* Width and height of the character bounding box. */
N    uint8_t width;
N    uint8_t height;
N    
N    /* Minimum and maximum tracking width of characters. */
N    uint8_t min_x_advance;
N    uint8_t max_x_advance;
N    
N    /* Location of the text baseline relative to character. */
N    uint8_t baseline_x;
N    uint8_t baseline_y;
N    
N    /* Line height of the font (vertical advance). */
N    uint8_t line_height;
N    
N    /* Flags identifying various aspects of the font. */
N    uint8_t flags;
N    
N    /* Fallback character to use for missing glyphs. */
N    uint16_t fallback_character;
N    
N    /* Function to get character width. Should return 0 if character is
N     * not found. */
N    uint8_t (*character_width)(const struct mf_font_s *font, uint16_t character);
N    
N    /* Function to render a character. Returns the character width or 0 if
N     * character is not found. */
N    uint8_t (*render_character)(const struct mf_font_s *font,
N                                int16_t x0, int16_t y0,
N                                uint16_t character,
N                                mf_pixel_callback_t callback,
N                                void *state);
N};
N
N/* The flag definitions for the font.flags field. */
N#define MF_FONT_FLAG_MONOSPACE 0x01
N#define MF_FONT_FLAG_BW        0x02
N
N/* Lookup structure for searching fonts by name. */
Nstruct mf_font_list_s
N{
N    const struct mf_font_list_s *next;
N    const struct mf_font_s *font;
N};
N
N
N/* Function to decode and render a single character. 
N * 
N * font:      Pointer to the font definition.
N * x0, y0:    Upper left corner of the target area.
N * character: The character code (unicode) to render.
N * callback:  Callback function to write out the pixels.
N * state:     Free variable for caller to use (can be NULL).
N * 
N * Returns width of the character.
N */
NMF_EXTERN uint8_t mf_render_character(const struct mf_font_s *font,
X uint8_t mf_render_character(const struct mf_font_s *font,
N                                      int16_t x0, int16_t y0,
N                                      mf_char character,
N                                      mf_pixel_callback_t callback,
N                                      void *state);
N
N/* Function to get the width of a single character.
N * This is not necessarily the bounding box of the character
N * data, but rather the tracking width.
N *
N * font:      Pointer to the font definition.
N * character: The character code (unicode) to render.
N * 
N * Returns width of the character in pixels.
N */
NMF_EXTERN uint8_t mf_character_width(const struct mf_font_s *font,
X uint8_t mf_character_width(const struct mf_font_s *font,
N                                     mf_char character);
N
N/* Find a font based on name. The name can be either short name or full name.
N * Note: You can pass MF_INCLUDED_FONTS to search among all the included .h
N * files.
N *
N * name: Font name to search for.
N * fonts: Pointer to the first font search entry.
N *
N * Returns a pointer to the font or NULL if not found.
N */
NMF_EXTERN const struct mf_font_s *mf_find_font(const char *name);
X const struct mf_font_s *mf_find_font(const char *name);
N
N/* Get the list of included fonts */
NMF_EXTERN const struct mf_font_list_s *mf_get_font_list(void);
X const struct mf_font_list_s *mf_get_font_list(void);
N
N#endif
L 16 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_rlefont.h" 2
N
N/* Versions of the RLE font format that are supported. */
N#define MF_RLEFONT_VERSION_4_SUPPORTED 1
N
N/* Structure for a range of characters. This implements a sparse storage of
N * character indices, so that you can e.g. pick a 100 characters in the middle
N * of the UTF16 range and just store them. */
Nstruct mf_rlefont_char_range_s
N{
N    /* The number of the first character in this range. */
N    uint16_t first_char;
N    
N    /* The total count of characters in this range. */
N    uint16_t char_count;
N    
N    /* Lookup table with the start indices into glyph_data. */
N    const uint16_t *glyph_offsets;
N    
N    /* The encoded glyph data for glyphs in this range. */
N    const uint8_t *glyph_data;
N};
N
N/* Structure for a single encoded font. */
Nstruct mf_rlefont_s
N{
N    struct mf_font_s font;
N    
N    /* Version of the font definition used. */
N    const uint8_t version;
N    
N    /* Big array of the data for all the dictionary entries. */
N    const uint8_t *dictionary_data;
N    
N    /* Lookup table with the start indices into dictionary_data.
N     * Contains N+1 entries, so that the length of the entry can
N     * be determined by subtracting from the next offset. */
N    const uint16_t *dictionary_offsets;
N    
N    /* Number of dictionary entries using the RLE encoding.
N     * Entries starting at this index use the dictionary encoding. */
N    const uint8_t rle_entry_count;
N    
N    /* Total number of dictionary entries.
N     * Entries after this are nonexistent. */
N    const uint8_t dict_entry_count;
N    
N    /* Number of discontinuous character ranges */
N    const uint8_t char_range_count;
N    
N    /* Array of the character ranges */
N    const struct mf_rlefont_char_range_s *char_ranges;
N};
N
N#ifdef MF_RLEFONT_INTERNALS
S/* Internal functions, don't use these directly. */
SMF_EXTERN uint8_t mf_rlefont_render_character(const struct mf_font_s *font,
S                                              int16_t x0, int16_t y0,
S                                              uint16_t character,
S                                              mf_pixel_callback_t callback,
S                                              void *state);
S
SMF_EXTERN uint8_t mf_rlefont_character_width(const struct mf_font_s *font,
S                                             uint16_t character);
N#endif
N
N#endif
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_rlefont.c" 2
N
N#ifndef MF_NO_COMPILE
S
S/* Number of reserved codes before the dictionary entries. */
S#define DICT_START 24
S
S/* Special reference to mean "fill with zeros to the end of the glyph" */
S#define REF_FILLZEROS 16
S
S/* RLE codes */
S#define RLE_CODEMASK    0xC0
S#define RLE_VALMASK     0x3F
S#define RLE_ZEROS       0x00
S#define RLE_64ZEROS     0x40
S#define RLE_ONES        0x80
S#define RLE_SHADE       0xC0
S
S/* Dictionary "fill entries" for encoding bits directly. */
S#define DICT_START7BIT  4
S#define DICT_START6BIT  132
S#define DICT_START5BIT  196
S#define DICT_START4BIT  228
S#define DICT_START3BIT  244
S#define DICT_START2BIT  252
S
S/* Find a pointer to the glyph matching a given character by searching
S * through the character ranges. If the character is not found, return
S * pointer to the default glyph.
S */
Sstatic const uint8_t *find_glyph(const struct mf_rlefont_s *font,
S                                 uint16_t character)
S{
S   unsigned i, index;
S   const struct mf_rlefont_char_range_s *range;
S   for (i = 0; i < font->char_range_count; i++)
S   {
S       range = &font->char_ranges[i];
S       index = character - range->first_char;
S       if (character >= range->first_char && index < range->char_count)
S       {
S           uint16_t offset = range->glyph_offsets[index];
S           return &range->glyph_data[offset];
S       }
S   }
S
S   return 0;
S}
S
S/* Structure to keep track of coordinates of the next pixel to be written,
S * and also the bounds of the character. */
Sstruct renderstate_r
S{
S    int16_t x_begin;
S    int16_t x_end;
S    int16_t x;
S    int16_t y;
S    int16_t y_end;
S    mf_pixel_callback_t callback;
S    void *state;
S};
S
S/* Call the callback to write one pixel to screen, and advance to next
S * pixel position. */
Sstatic void write_pixels(struct renderstate_r *rstate, uint16_t count,
S                         uint8_t alpha)
S{
S    uint8_t rowlen;
S    
S    /* Write row-by-row if the run spans multiple rows. */
S    while (rstate->x + count >= rstate->x_end)
S    {
S        rowlen = rstate->x_end - rstate->x;
S        rstate->callback(rstate->x, rstate->y, rowlen, alpha, rstate->state);
S        count -= rowlen;
S        rstate->x = rstate->x_begin;
S        rstate->y++;
S    }
S    
S    /* Write the remaining part */
S    if (count)
S    {
S        rstate->callback(rstate->x, rstate->y, count, alpha, rstate->state);
S        rstate->x += count;
S    }
S}
S
S/* Skip the given number of pixels (0 alpha) */
Sstatic void skip_pixels(struct renderstate_r *rstate, uint16_t count)
S{
S    rstate->x += count;
S    while (rstate->x >= rstate->x_end)
S    {
S        rstate->x -= rstate->x_end - rstate->x_begin;
S        rstate->y++;
S    }
S}
S
S/* Decode and write out a RLE-encoded dictionary entry. */
Sstatic void write_rle_dictentry(const struct mf_rlefont_s *font,
S                                struct renderstate_r *rstate,
S                                uint8_t index)
S{
S    uint16_t offset = font->dictionary_offsets[index];
S    uint16_t length = font->dictionary_offsets[index + 1] - offset;
S    uint16_t i;
S    
S    for (i = 0; i < length; i++)
S    {
S        uint8_t code = font->dictionary_data[offset + i];
S        if ((code & RLE_CODEMASK) == RLE_ZEROS)
S        {
S            skip_pixels(rstate, code & RLE_VALMASK);
S        }
S        else if ((code & RLE_CODEMASK) == RLE_64ZEROS)
S        {
S            skip_pixels(rstate, ((code & RLE_VALMASK) + 1) * 64);
S        }
S        else if ((code & RLE_CODEMASK) == RLE_ONES)
S        {
S            write_pixels(rstate, (code & RLE_VALMASK) + 1, 255);
S        }
S        else if ((code & RLE_CODEMASK) == RLE_SHADE)
S        {
S            uint8_t count, alpha;
S            count = ((code & RLE_VALMASK) >> 4) + 1;
S            alpha = ((code & RLE_VALMASK) & 0xF) * 0x11;
S            write_pixels(rstate, count, alpha);
S        }
S    }
S}
S
S/* Get bit count for the "fill entries" */
Sstatic uint8_t fillentry_bitcount(uint8_t index)
S{
S    if (index >= DICT_START2BIT)
S        return 2;
S    else if (index >= DICT_START3BIT)
S        return 3;
S    else if (index >= DICT_START4BIT)
S        return 4;
S    else if (index >= DICT_START5BIT)
S        return 5;
S    else if (index >= DICT_START6BIT)
S        return 6;
S    else
S        return 7;
S}
S
S/* Decode and write out a direct binary codeword */
Sstatic void write_bin_codeword(const struct mf_rlefont_s *font,
S                                struct renderstate_r *rstate,
S                                uint8_t code)
S{
S    uint8_t bitcount = fillentry_bitcount(code);
S    uint8_t byte = code - DICT_START7BIT;
S    uint8_t runlen = 0;
S    (void) font;
S    
S    while (bitcount--)
S    {
S        if (byte & 1)
S        {
S            runlen++;
S        }
S        else 
S        {
S            if (runlen)
S            {
S                write_pixels(rstate, runlen, 255);
S                runlen = 0;
S            }
S            
S            skip_pixels(rstate, 1);
S        }
S        
S        byte >>= 1;
S    }
S    
S    if (runlen)
S        write_pixels(rstate, runlen, 255);
S}
S
S/* Decode and write out a reference codeword */
Sstatic void write_ref_codeword(const struct mf_rlefont_s *font,
S                                struct renderstate_r *rstate,
S                                uint8_t code)
S{
S    if (code <= 15)
S    {
S        write_pixels(rstate, 1, 0x11 * code);
S    }
S    else if (code == REF_FILLZEROS)
S    {
S        /* Fill with zeroes to end */
S        rstate->y = rstate->y_end;
S    }
S    else if (code < DICT_START)
S    {
S        /* Reserved */
S    }
S    else if (code < DICT_START + font->rle_entry_count)
S    {
S        write_rle_dictentry(font, rstate, code - DICT_START);
S    }
S    else
S    {
S        write_bin_codeword(font, rstate, code);
S    }
S}
S
S/* Decode and write out a reference encoded dictionary entry. */
Sstatic void write_ref_dictentry(const struct mf_rlefont_s *font,
S                                struct renderstate_r *rstate,
S                                uint8_t index)
S{
S    uint16_t offset = font->dictionary_offsets[index];
S    uint16_t length = font->dictionary_offsets[index + 1] - offset;
S    uint16_t i;
S    
S    for (i = 0; i < length; i++)
S    {
S        uint8_t code = font->dictionary_data[offset + i];
S        write_ref_codeword(font, rstate, code);
S    }
S}
S
S/* Decode and write out an arbitrary glyph codeword */
Sstatic void write_glyph_codeword(const struct mf_rlefont_s *font,
S                                struct renderstate_r *rstate,
S                                uint8_t code)
S{
S    if (code >= DICT_START + font->rle_entry_count &&
S        code < DICT_START + font->dict_entry_count)
S    {
S        write_ref_dictentry(font, rstate, code - DICT_START);
S    }
S    else
S    {
S        write_ref_codeword(font, rstate, code);
S    }
S}
S
S
Suint8_t mf_rlefont_render_character(const struct mf_font_s *font,
S                                    int16_t x0, int16_t y0,
S                                    uint16_t character,
S                                    mf_pixel_callback_t callback,
S                                    void *state)
S{
S    const uint8_t *p;
S    uint8_t width;
S    
S    struct renderstate_r rstate;
S    rstate.x_begin = x0;
S    rstate.x_end = x0 + font->width;
S    rstate.x = x0;
S    rstate.y = y0;
S    rstate.y_end = y0 + font->height;
S    rstate.callback = callback;
S    rstate.state = state;
S    
S   	p = find_glyph((struct mf_rlefont_s*)font, character);
S    if (!p)
S        return 0;
S    
S    width = *p++;
S    while (rstate.y < rstate.y_end)
S    {
S        write_glyph_codeword((struct mf_rlefont_s*)font, &rstate, *p++);
S    }
S    
S    return width;
S}
S
Suint8_t mf_rlefont_character_width(const struct mf_font_s *font,
S                                   uint16_t character)
S{
S    const uint8_t *p;
S    p = find_glyph((struct mf_rlefont_s*)font, character);
S    if (!p)
S        return 0;
S    
S    return *p;
S}
S
N#endif //MF_NO_COMPILE
L 14 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_bwfont.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_bwfont.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_bwfont.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_bwfont.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Uncompressed font format for storing black & white fonts. Very efficient
N * to decode and works well for small font sizes.
N */
N
N#ifndef _MF_BWFONT_H_
N#define _MF_BWFONT_H_
N
N#include "mf_font.h"
N
N/* Versions of the BW font format that are supported. */
N#define MF_BWFONT_VERSION_4_SUPPORTED 1
N
N/* Structure for a range of characters. */
Nstruct mf_bwfont_char_range_s
N{
N    /* The number of the first character in this range. */
N    uint16_t first_char;
N    
N    /* The total count of characters in this range. */
N    uint16_t char_count;
N    
N    /* The left and top skips of the characters in this range.
N     * This is the number of empty rows at left and at top. */
N    uint8_t offset_x;
N    uint8_t offset_y;
N    
N    /* Column height for glyphs in this range, in bytes and pixels. */
N    uint8_t height_bytes;
N    uint8_t height_pixels;
N    
N    /* Positive value if the width of all glyphs in this range is the
N     * same, or zero if it is not. */
N    uint8_t width;
N    
N    /* Lookup table for the character widths. NULL if width is specified. */
N    const uint8_t *glyph_widths;
N    
N    /* Lookup table for the character offsets.  Multiply by height_bytes
N     * to get the byte offset. Also allows lookup of the number of columns.
N     * NULL if width is specified. */
N    const uint16_t *glyph_offsets;
N    
N    /* Table for the glyph data.
N     * The data for each glyph is column-by-column, with N bytes per each
N     * column. The LSB of the first byte is the top left pixel.
N     */
N    const uint8_t *glyph_data;
N};
N
N/* Structure for the font */
Nstruct mf_bwfont_s
N{
N    struct mf_font_s font;
N    
N    /* Version of the font format. */
N    const uint8_t version;
N    
N    /* Number of character ranges. */
N    const uint8_t char_range_count;
N    
N    /* Array of the character ranges */
N    const struct mf_bwfont_char_range_s *char_ranges;
N};
N
N#ifdef MF_BWFONT_INTERNALS
S/* Internal functions, don't use these directly. */
SMF_EXTERN uint8_t mf_bwfont_render_character(const struct mf_font_s *font,
S                                             int16_t x0, int16_t y0,
S                                             uint16_t character,
S                                             mf_pixel_callback_t callback,
S                                             void *state);
S
SMF_EXTERN uint8_t mf_bwfont_character_width(const struct mf_font_s *font,
S                                            uint16_t character);
N#endif
N
N#endif
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_bwfont.c" 2
N
N#ifndef MF_NO_COMPILE
S
S#include <stdbool.h>
S
S/* Find the character range and index that contains a given glyph.. */
Sstatic const struct mf_bwfont_char_range_s *find_char_range(
S    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
S{
S    unsigned i, index;
S    const struct mf_bwfont_char_range_s *range;
S    for (i = 0; i < font->char_range_count; i++)
S    {
S        range = &font->char_ranges[i];
S        index = character - range->first_char;
S        if (character >= range->first_char && index < range->char_count)
S        {
S            *index_ret = index;
S            return range;
S        }
S    }
S    
S    return 0;
S}
S
Sstatic uint8_t get_width(const struct mf_bwfont_char_range_s *r, uint16_t index)
S{
S    if (r->width)
S    {
S        return r->width + r->offset_x;
S    }
S    else
S    {
S        return r->glyph_widths[index];
S    }
S}
S
Sstatic uint8_t render_char(const struct mf_bwfont_char_range_s *r,
S                           int16_t x0, int16_t y0, uint16_t index,
S                           mf_pixel_callback_t callback,
S                           void *state)
S{
S    const uint8_t *data, *p;
S    uint8_t stride, runlen;
S    uint8_t x, y, height, num_cols;
S    uint8_t bit, byte, mask;
S    bool oldstate, newstate;
S    
S    if (r->width)
S    {
S        data = r->glyph_data + r->width * index * r->height_bytes;
S        num_cols = r->width;
S    }
S    else
S    {
S        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
S        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
S    }
S    
S    stride = r->height_bytes;
S    height = r->height_pixels;
S    y0 += r->offset_y;
S    x0 += r->offset_x;
S    bit = 0;
S    byte = 0;
S    
S    for (y = 0; y < height; y++)
S    {
S        mask = (1 << bit);
S        
S        oldstate = false;
S        runlen = 0;
S        p = data + byte;
S        for (x = 0; x < num_cols; x++, p += stride)
S        {
S            newstate = *p & mask;
S            if (newstate != oldstate)
S            {
S                if (oldstate && runlen)
S                {
S                    callback(x0 + x - runlen, y0 + y, runlen, 255, state);
S                }
S                
S                oldstate = newstate;
S                runlen = 0;
S            }
S            
S            runlen++;
S        }
S        
S        if (oldstate && runlen)
S        {
S            callback(x0 + x - runlen, y0 + y, runlen, 255, state);
S        }
S        
S        bit++;
S        if (bit > 7)
S        {
S            bit = 0;
S            byte++;
S        }
S    }
S    
S    return get_width(r, index);
S}
S
Suint8_t mf_bwfont_render_character(const struct mf_font_s *font,
S                                   int16_t x0, int16_t y0,
S                                   uint16_t character,
S                                   mf_pixel_callback_t callback,
S                                   void *state)
S{
S    const struct mf_bwfont_s *bwfont = (const struct mf_bwfont_s*)font;
S    const struct mf_bwfont_char_range_s *range;
S    uint16_t index;
S    
S    range = find_char_range(bwfont, character, &index);
S    if (!range)
S        return 0;
S    
S    return render_char(range, x0, y0, index, callback, state);
S}
S
Suint8_t mf_bwfont_character_width(const struct mf_font_s *font,
S                                  uint16_t character)
S{
S    const struct mf_bwfont_s *bwfont = (const struct mf_bwfont_s*)font;
S    const struct mf_bwfont_char_range_s *range;
S    uint16_t index;
S    
S    range = find_char_range(bwfont, character, &index);
S    if (!range)
S        return 0;
S    
S    return get_width(range, index);
S}
S
N#endif //MF_NO_COMPILE
L 15 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_scaledfont.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_scaledfont.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_scaledfont.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_scaledfont.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Generate scaled (nearest-neighbor) fonts. This can be used for displaying
N * larger text without spending the memory required for including larger fonts.
N */
N
N#ifndef _MF_SCALEDFONT_H_
N#define _MF_SCALEDFONT_H_
N
N#include "mf_font.h"
N
Nstruct mf_scaledfont_s
N{
N    struct mf_font_s font;
N    
N    const struct mf_font_s *basefont;
N    uint8_t x_scale;
N    uint8_t y_scale;
N};
N
NMF_EXTERN void mf_scale_font(struct mf_scaledfont_s *newfont,
X void mf_scale_font(struct mf_scaledfont_s *newfont,
N                             const struct mf_font_s *basefont,
N                             uint8_t x_scale, uint8_t y_scale);
N
N#ifdef MF_SCALEDFONT_INTERNALS
S/* Internal functions, don't use these directly. */
SMF_EXTERN uint8_t mf_scaled_render_character(const struct mf_font_s *font,
S                                              int16_t x0, int16_t y0,
S                                              uint16_t character,
S                                              mf_pixel_callback_t callback,
S                                              void *state);
S
SMF_EXTERN uint8_t mf_scaled_character_width(const struct mf_font_s *font,
S                                             uint16_t character);
N#endif
N
N#endif
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_scaledfont.c" 2
N
N#ifndef MF_NO_COMPILE
S
Sstruct scaled_renderstate
S{
S    mf_pixel_callback_t orig_callback;
S    void *orig_state;
S    uint8_t x_scale;
S    uint8_t y_scale;
S    int16_t x0;
S    int16_t y0;
S};
S
Sstatic void scaled_pixel_callback(int16_t x, int16_t y, uint8_t count,
S                                  uint8_t alpha, void *state)
S{
S    struct scaled_renderstate *rstate = state;
S    uint8_t dy;
S    
S    count *= rstate->x_scale;
S    x = rstate->x0 + x * rstate->x_scale;
S    y = rstate->y0 + y * rstate->y_scale;
S    
S    for (dy = 0; dy < rstate->y_scale; dy++)
S    {
S        rstate->orig_callback(x, y + dy, count, alpha, rstate->orig_state);
S    }
S}
S    
Suint8_t mf_scaled_character_width(const struct mf_font_s *font,
S                                      uint16_t character)
S{
S    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
S    uint8_t basewidth;
S    
S    basewidth = sfont->basefont->character_width(sfont->basefont, character);
S    
S    return sfont->x_scale * basewidth;
S}
S
Suint8_t mf_scaled_render_character(const struct mf_font_s *font,
S                                       int16_t x0, int16_t y0,
S                                       uint16_t character,
S                                       mf_pixel_callback_t callback,
S                                       void *state)
S{
S    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
S    struct scaled_renderstate rstate;
S    uint8_t basewidth;
S    
S    rstate.orig_callback = callback;
S    rstate.orig_state = state;
S    rstate.x_scale = sfont->x_scale;
S    rstate.y_scale = sfont->y_scale;
S    rstate.x0 = x0;
S    rstate.y0 = y0;
S    
S    basewidth = sfont->basefont->render_character(sfont->basefont, 0, 0,
S                            character, scaled_pixel_callback, &rstate);
S    
S    return sfont->x_scale * basewidth;
S}
S
Svoid mf_scale_font(struct mf_scaledfont_s *newfont,
S                   const struct mf_font_s *basefont,
S                   uint8_t x_scale, uint8_t y_scale)
S{
S    newfont->font = *basefont;
S    newfont->basefont = basefont;
S    
S    newfont->font.width *= x_scale;
S    newfont->font.height *= y_scale;
S    newfont->font.baseline_x *= x_scale;
S    newfont->font.baseline_y *= y_scale;
S    newfont->font.min_x_advance *= x_scale;
S    newfont->font.max_x_advance *= x_scale;
S    newfont->font.line_height *= y_scale;
S    newfont->font.character_width = &mf_scaled_character_width;
S    newfont->font.render_character = &mf_scaled_render_character;
S    
S    newfont->x_scale = x_scale;
S    newfont->y_scale = y_scale;
S}
S
N#endif //MF_NO_COMPILE
L 16 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_encoding.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_encoding.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_encoding.h"
N
N#ifndef MF_NO_COMPILE
S
S#if MF_ENCODING == MF_ENCODING_UTF8
S
Smf_char mf_getchar(mf_str *str)
S{
S    uint8_t c;
S    uint8_t tmp, seqlen;
S    uint16_t result;
S    
S    c = **str;
S    if (!c)
S        return 0;
S    
S    (*str)++;
S    
S    if ((c & 0x80) == 0)
S    {
S        /* Just normal ASCII character. */
S        return c;
S    }
S    else if ((c & 0xC0) == 0x80)
S    {
S        /* Dangling piece of corrupted multibyte sequence.
S         * Did you cut the string in the wrong place?
S         */
S        return c;
S    }
S    else if ((**str & 0xC0) == 0xC0)
S    {
S        /* Start of multibyte sequence without any following bytes.
S         * Silly. Maybe you are using the wrong encoding.
S         */
S        return c;
S    }
S    else
S    {
S        /* Beginning of a multi-byte sequence.
S         * Find out how many characters and combine them.
S         */
S        seqlen = 2;
S        tmp = 0x20;
S        result = 0;
S        while ((c & tmp) && (seqlen < 5))
S        {
S            seqlen++;
S            tmp >>= 1;
S            
S            result = (result << 6) | (**str & 0x3F);
S            (*str)++;
S        }
S        
S        result = (result << 6) | (**str & 0x3F);
S        (*str)++;
S        
S        result |= (c & (tmp - 1)) << ((seqlen - 1) * 6);
S        return result;
S    }
S}
S
Svoid mf_rewind(mf_str *str)
S{
S    (*str)--;
S    
S    while ((**str & 0x80) != 0x00 && (**str & 0xC0) != 0xC0)
S        (*str)--;
S}
S
S#else
S
Smf_char mf_getchar(mf_str *str)
S{
S    if (!(**str))
S        return 0;
S    else
S        return *(*str)++;
S}
S
Svoid mf_rewind(mf_str *str)
S{
S	(*str)--;
S}
S
S#endif
S
N#endif //MF_NO_COMPILE
N
L 17 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_justify.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_justify.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_justify.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_justify.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Text alignment and justification algorithm. Supports left, right, center
N * alignment and justify. Supports tab stops and kerning.
N */
N
N#ifndef _MF_JUSTIFY_H_
N#define _MF_JUSTIFY_H_
N
N#include "mf_rlefont.h"
N#include <stdbool.h>
N
Nenum mf_align_t
N{
N    MF_ALIGN_LEFT = 0,
N    MF_ALIGN_CENTER,
N    MF_ALIGN_RIGHT
N};
N
N/* Callback for rendering a single character.
N * x0:          Left edge of the target position of character.
N * y0:          Upper edge of the target position of character.
N * character:   Character to render.
N * state:       Free state variable for use by the callback.
N * Returns the width of the character.
N */
Ntypedef uint8_t (*mf_character_callback_t) (int16_t x0, int16_t y0,
N                                            mf_char character, void *state);
N
N/* Get width of a string in pixels.
N *
N * font:   Pointer to the font definition.
N * text:   Pointer to start of the text to measure.
N * count:  Number of characters on the line or 0 to read until end of string.
N * kern:   True to consider kerning (slower).
N */
NMF_EXTERN int16_t mf_get_string_width(const struct mf_font_s *font,
X int16_t mf_get_string_width(const struct mf_font_s *font,
N                                      mf_str text, uint16_t count, bool kern);
X                                      mf_str text, uint16_t count, _Bool kern);
N
N/* Render a single line of aligned text.
N *
N * font:     Pointer to the font definition.
N * x0:       Depending on aligned, either left, center or right edge of target.
N * y0:       Upper edge of the target area.
N * align:    Type of alignment.
N * text:     Pointer to start of the text to render.
N * count:    Number of characters on the line or 0 to read until end of string.
N * callback: Callback to call for each character.
N * state:    Free variable for use in the callback.
N */
NMF_EXTERN void mf_render_aligned(const struct mf_font_s *font,
X void mf_render_aligned(const struct mf_font_s *font,
N                                 int16_t x0, int16_t y0,
N                                 enum mf_align_t align,
N                                 mf_str text, uint16_t count,
N                                 mf_character_callback_t callback,
N                                 void *state);
N
N/* Render a single line of justified text.
N *
N * font:     Pointer to the font definition.
N * x0:       Left edge of the target area.
N * y0:       Upper edge of the target area.
N * width:    Width of the target area.
N * text:     Pointer to start of the text to render.
N * count:    Number of characters on the line or 0 to read until end of string.
N * callback: Callback to call for each character.
N * state:    Free variable for use in the callback.
N */
NMF_EXTERN void mf_render_justified(const struct mf_font_s *font,
X void mf_render_justified(const struct mf_font_s *font,
N                                   int16_t x0, int16_t y0, int16_t width,
N                                   mf_str text, uint16_t count,
N                                   mf_character_callback_t callback,
N                                   void *state);
N
N
N#endif
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_justify.c" 2
N#include "mf_kerning.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_kerning.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Automatic kerning for font rendering. This solves the issue where some
N * fonts (especially serif fonts) have too much space between specific
N * character pairs, like WA or L'.
N */
N
N#ifndef _MF_KERNING_H_
N#define _MF_KERNING_H_
N
N#include "mf_config.h"
N#include "mf_rlefont.h"
N
N/* Compute the kerning adjustment when c1 is followed by c2.
N * 
N * font: Pointer to the font definition.
N * c1: The previous character.
N * c2: The next character to render.
N * 
N * Returns the offset to add to the x position for c2.
N */
N#if MF_USE_KERNING
X#if 0
SMF_EXTERN int8_t mf_compute_kerning(const struct mf_font_s *font,
S                                    mf_char c1, mf_char c2);
N#else
N#define mf_compute_kerning(font, c1, c2)		0
N#endif
N
N#endif
L 10 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_justify.c" 2
N
N#ifndef MF_NO_COMPILE
S
S#if MF_USE_TABS
S/* Round the X coordinate up to the nearest tab stop. */
Sstatic int16_t mf_round_to_tab(const struct mf_font_s *font,
S                               int16_t x0, int16_t x)
S{
S    int16_t tabw, dx;
S    
S    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
S    
S    /* Always atleast 1 space */
S    x += mf_character_width(font, ' ');
S    
S    /* Round to next tab stop */
S    dx = x - x0 + font->baseline_x;
S    x += tabw - (dx % tabw);
S    
S    return x;
S}
S
S/* Round the X coordinate down to the nearest tab stop. */
Sstatic int16_t mf_round_to_prev_tab(const struct mf_font_s *font,
S                                    int16_t x0, int16_t x)
S{
S    int16_t tabw, dx;
S    
S    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
S    
S    /* Always atleast 1 space */
S    x -= mf_character_width(font, ' ');
S    
S    /* Round to previous tab stop */
S    dx = x0 - x + font->baseline_x;
S    x -= tabw - (dx % tabw);
S    
S    return x;
S}
S#endif
S
Sint16_t mf_get_string_width(const struct mf_font_s *font, mf_str text,
S                            uint16_t count, bool kern)
S{
S    int16_t result = 0;
S    uint16_t c1 = 0, c2;
S    
S    if (!count)
S        count = 0xFFFF;
S    
S    while (count-- && *text)
S    {
S        c2 = mf_getchar(&text);
S
S        if (c2 == '\t')
S        {
S#if MF_USE_TABS
S            result = mf_round_to_tab(font, 0, result);
S            c1 = ' ';
S            continue;
S#else
S            c2 = ' ';
S#endif
S        }
S        
S        if (kern && c1 != 0)
S            result += mf_compute_kerning(font, c1, c2);
S
S        result += mf_character_width(font, c2);
S        c1 = c2;
S    }
S    
S    return result;
S}
S
S/* Return the length of the string without trailing spaces. */
Sstatic uint16_t strip_spaces(mf_str text, uint16_t count, mf_char *last_char)
S{
S    uint16_t i = 0, result = 0;
S    mf_char tmp = 0;
S    
S    if (!count)
S        count = 0xFFFF;
S    
S    while (count-- && *text)
S    {
S        i++;
S        tmp = mf_getchar(&text);
S        if (tmp != ' ' && tmp != (mf_char)0xA0 && tmp != '\n' &&
S            tmp != '\r' && tmp != '\t')
S        {
S            result = i;
S        }
S    }
S    
S    if (last_char)
S    {
S        if (!*text)
S            *last_char = 0;
S        else
S            *last_char = tmp;
S    }
S    
S    return result;
S}
S
S/* Render left-aligned string, left edge at x0. */
Sstatic void render_left(const struct mf_font_s *font,
S                        int16_t x0, int16_t y0,
S                        mf_str text, uint16_t count,
S                        mf_character_callback_t callback,
S                        void *state)
S{
S    int16_t x;
S    mf_char c1 = 0, c2;
S    
S    x = x0 - font->baseline_x;
S    while (count--)
S    {
S        c2 = mf_getchar(&text);
S        
S        if (c2 == '\t')
S        {
S#if MF_USE_TABS
S            x = mf_round_to_tab(font, x0, x);
S            c1 = ' ';
S            continue;
S#else
S            c2 = ' ';
S#endif
S        }
S        
S        if (c1 != 0)
S            x += mf_compute_kerning(font, c1, c2);
S
S        x += callback(x, y0, c2, state);
S        c1 = c2;
S    }
S}
S
S#if !MF_USE_ALIGN
S
Svoid mf_render_aligned(const struct mf_font_s *font,
S                       int16_t x0, int16_t y0,
S                       enum mf_align_t align,
S                       mf_str text, uint16_t count,
S                       mf_character_callback_t callback,
S                       void *state)
S{
S    int16_t string_width;
S    count = strip_spaces(text, count, 0);
S    render_left(font, x0, y0, text, count, callback, state);
S}
S
S#else
S
S/* Render right-aligned string, right edge at x0. */
Sstatic void render_right(const struct mf_font_s *font,
S                         int16_t x0, int16_t y0,
S                         mf_str text, uint16_t count,
S                         mf_character_callback_t callback,
S                         void *state)
S{
S    int16_t x;
S    uint16_t i;
S    mf_char c1, c2 = 0;
S    mf_str tmp;
S    
S    /* Go to the end of the line. */
S    for (i = 0; i < count; i++)
S        mf_getchar(&text);
S    
S    x = x0 - font->baseline_x;
S    for (i = 0; i < count; i++)
S    {
S        mf_rewind(&text);
S        tmp = text;
S        c1 = mf_getchar(&tmp);
S        
S        /* Perform tab alignment */
S        if (c1 == '\t')
S        {
S#if MF_USE_TABS
S            x = mf_round_to_prev_tab(font, x0, x);
S            c2 = ' ';
S            continue;
S#else
S            c1 = ' ';
S#endif
S        }
S        
S        /* Apply the nominal character width */
S        x -= mf_character_width(font, c1);
S        
S        /* Apply kerning */
S        if (c2 != 0)
S            x -= mf_compute_kerning(font, c1, c2);
S        
S        callback(x, y0, c1, state);
S        c2 = c1;
S    }
S}
S
Svoid mf_render_aligned(const struct mf_font_s *font,
S                       int16_t x0, int16_t y0,
S                       enum mf_align_t align,
S                       mf_str text, uint16_t count,
S                       mf_character_callback_t callback,
S                       void *state)
S{
S    int16_t string_width;
S    count = strip_spaces(text, count, 0);
S    
S    if (align == MF_ALIGN_LEFT)
S    {
S        render_left(font, x0, y0, text, count, callback, state);
S    }
S    if (align == MF_ALIGN_CENTER)
S    {
S        string_width = mf_get_string_width(font, text, count, false);
S        x0 -= string_width / 2;
S        render_left(font, x0, y0, text, count, callback, state);
S    }
S    else if (align == MF_ALIGN_RIGHT)
S    {
S        render_right(font, x0, y0, text, count, callback, state);
S    }
S}
S
S#endif
S
S
S#if !MF_USE_JUSTIFY
S
Svoid mf_render_justified(const struct mf_font_s *font,
S                         int16_t x0, int16_t y0, int16_t width,
S                         mf_str text, uint16_t count,
S                         mf_character_callback_t callback,
S                         void *state)
S{
S	(void) width;
S    mf_render_aligned(font, x0, y0, MF_ALIGN_LEFT, text, count, callback, state);
S}
S
S#else
S
S/* Returns true if the character is a justification point, i.e. expands
S * when the text is being justified. */
Sstatic bool is_justify_space(uint16_t c)
S{
S    return c == ' ' || c == 0xA0;
S}
S
S/* Count the number of space characters in string */
Sstatic uint16_t count_spaces(mf_str text, uint16_t count)
S{
S    uint16_t spaces = 0;
S    while (count-- && *text)
S    {
S        if (is_justify_space(mf_getchar(&text)))
S            spaces++;
S    }
S    return spaces;
S}
S
Svoid mf_render_justified(const struct mf_font_s *font,
S                         int16_t x0, int16_t y0, int16_t width,
S                         mf_str text, uint16_t count,
S                         mf_character_callback_t callback,
S                         void *state)
S{
S    int16_t string_width, adjustment;
S    uint16_t num_spaces;
S    mf_char last_char;
S    
S    count = strip_spaces(text, count, &last_char);
S    
S    if (last_char == '\n' || last_char == 0)
S    {
S        /* Line ends in linefeed, do not justify. */
S        render_left(font, x0, y0, text, count, callback, state);
S        return;
S    }
S    
S    string_width = mf_get_string_width(font, text, count, false);
S    adjustment = width - string_width;
S    num_spaces = count_spaces(text, count);
S    
S    {
S        int16_t x, tmp;
S        mf_char c1 = 0, c2;
S        
S        x = x0 - font->baseline_x;
S        while (count--)
S        {
S            c2 = mf_getchar(&text);
S            
S            if (c2 == '\t')
S            {
S#if MF_USE_TABS
S                tmp = x;
S                x = mf_round_to_tab(font, x0, x);
S                adjustment -= x - tmp - mf_character_width(font, '\t');
S                c1 = c2;
S                continue;
S#else
S                c2 = ' ';
S#endif
S            }
S            
S            if (is_justify_space(c2))
S            {
S                tmp = (adjustment + num_spaces / 2) / num_spaces;
S                adjustment -= tmp;
S                num_spaces--;
S                x += tmp;
S            }
S            
S            if (c1 != 0)
S            {
S                tmp = mf_compute_kerning(font, c1, c2);
S                x += tmp;
S                adjustment -= tmp;
S            }
S
S            x += callback(x, y0, c2, state);
S            c1 = c2;
S        }
S    }
S}
S
S#endif
S
N#endif //MF_NO_COMPILE
N
N
L 18 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_kerning.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_kerning.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_kerning.h"
N
N#ifndef MF_NO_COMPILE
S
S#include <stdbool.h>
S
S#if MF_USE_KERNING
S
S/* Structure for keeping track of the edge of the glyph as it is rendered. */
Sstruct kerning_state_s
S{
S    uint8_t edgepos[MF_KERNING_ZONES];
S    uint8_t zoneheight;
S};
S
S/* Pixel callback for analyzing the left edge of a glyph. */
Sstatic void fit_leftedge(int16_t x, int16_t y, uint8_t count, uint8_t alpha,
S                         void *state)
S{
S    struct kerning_state_s *s = state;
S    (void)count;
S    
S    if (alpha > 7)
S    {
S        uint8_t zone = y / s->zoneheight;
S        if (x < s->edgepos[zone])
S            s->edgepos[zone] = x;
S    }
S}
S
S/* Pixel callback for analyzing the right edge of a glyph. */
Sstatic void fit_rightedge(int16_t x, int16_t y, uint8_t count, uint8_t alpha,
S                         void *state)
S{
S    struct kerning_state_s *s = state;
S    
S    if (alpha > 7)
S    {
S        uint8_t zone = y / s->zoneheight;
S        x += count - 1;
S        if (x > s->edgepos[zone])
S            s->edgepos[zone] = x;
S    }
S}
S
S/* Should kerning be done against this character? */
Sstatic bool do_kerning(mf_char c)
S{
S    /* Just a speed optimization, spaces would be ignored anyway. */
S    if (c == ' ' || c == '\n' || c == '\r' || c == '\t')
S        return false;
S    
S    /* Do not kern against digits, in order to keep values in tables nicely
S     * aligned. Most fonts have constant width for digits. */
S    if (c >= '0' && c <= '9')
S        return false;
S    
S    return true;
S}
S
S//static int16_t min16(int16_t a, int16_t b) { return (a < b) ? a : b; }
Sstatic int16_t max16(int16_t a, int16_t b) { return (a > b) ? a : b; }
Sstatic int16_t avg16(int16_t a, int16_t b) { return (a + b) / 2; }
S
Sint8_t mf_compute_kerning(const struct mf_font_s *font,
S                          mf_char c1, mf_char c2)
S{
S    struct kerning_state_s leftedge, rightedge;
S    uint8_t w1, w2, i, min_space;
S    int16_t normal_space, adjust, max_adjust;
S    
S    if (font->flags & MF_FONT_FLAG_MONOSPACE)
S        return 0; /* No kerning for monospace fonts */
S    
S    if (!do_kerning(c1) || !do_kerning(c2))
S        return 0;
S    
S    /* Compute the height of one kerning zone in pixels */
S    i = (font->height + MF_KERNING_ZONES - 1) / MF_KERNING_ZONES;
S    if (i < 1) i = 1;
S    
S    /* Initialize structures */
S    leftedge.zoneheight = rightedge.zoneheight = i;
S    for (i = 0; i < MF_KERNING_ZONES; i++)
S    {
S        leftedge.edgepos[i] = 255;
S        rightedge.edgepos[i] = 0;
S    }
S    
S    /* Analyze the edges of both glyphs. */
S    w1 = mf_render_character(font, 0, 0, c1, fit_rightedge, &rightedge);
S    w2 = mf_render_character(font, 0, 0, c2, fit_leftedge, &leftedge);
S    
S    /* Find the minimum horizontal space between the glyphs. */
S    min_space = 255;
S    for (i = 0; i < MF_KERNING_ZONES; i++)
S    {
S        uint8_t space;
S        if (leftedge.edgepos[i] == 255 || rightedge.edgepos[i] == 0)
S            continue; /* Outside glyph area. */
S        
S        space = w1 - rightedge.edgepos[i] + leftedge.edgepos[i];
S        if (space < min_space)
S            min_space = space;
S    }
S    
S    if (min_space == 255)
S        return 0; /* One of the characters is space, or both are punctuation. */
S    
S    /* Compute the adjustment of the glyph position. */
S    normal_space = avg16(w1, w2) * MF_KERNING_SPACE_PERCENT / 100;
S    normal_space += MF_KERNING_SPACE_PIXELS;
S    adjust = normal_space - min_space;
S    max_adjust = -max16(w1, w2) * MF_KERNING_LIMIT / 100;
S    
S    if (adjust > 0) adjust = 0;
S    if (adjust < max_adjust) adjust = max_adjust;
S    
S    return adjust;
S}
S
S#endif
S
N#endif //MF_NO_COMPILE
L 19 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "mcufont/mf_wordwrap.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_wordwrap.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "mf_wordwrap.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_wordwrap.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/* Word wrapping algorithm with UTF-8 support. More than just a basic greedy
N * word-wrapper: it attempts to balance consecutive lines as pairs.
N */
N
N#ifndef _MF_WORDWRAP_H_
N#define _MF_WORDWRAP_H_
N
N#include "mf_rlefont.h"
N#include <stdbool.h>
N
N/* Callback function for handling each line.
N *
N * line:   Pointer to the beginning of the string for this line.
N * count:  Number of characters on the line.
N * state:  Free variable that was passed to wordwrap().
N * 
N * Returns: true to continue, false to stop after this line.
N */
Ntypedef bool (*mf_line_callback_t) (mf_str line, uint16_t count,
Xtypedef _Bool (*mf_line_callback_t) (mf_str line, uint16_t count,
N                                    void *state);
N
N/* Word wrap a piece of text. Calls the callback function for each line.
N * 
N * font:  Font to use for metrics.
N * width: Maximum line width in pixels.
N * text:  Pointer to the start of the text to process.
N * state: Free variable for caller to use (can be NULL).
N */
NMF_EXTERN void mf_wordwrap(const struct mf_font_s *font, int16_t width,
X void mf_wordwrap(const struct mf_font_s *font, int16_t width,
N                           mf_str text, mf_line_callback_t callback, void *state);
N              
N#endif
L 9 "..\..\..\..\..\..\external\ugfx\src\gdisp/mcufont/mf_wordwrap.c" 2
N
N#ifndef MF_NO_COMPILE
S
S/* Returns true if the line can be broken at this character. */
Sstatic bool is_wrap_space(uint16_t c)
S{
S    return c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == '-';
S}
S
S#if MF_USE_ADVANCED_WORDWRAP
S
S/* Represents a single word and the whitespace after it. */
Sstruct wordlen_s
S{
S    int16_t word; /* Length of the word in pixels. */
S    int16_t space; /* Length of the whitespace in pixels. */
S    uint16_t chars; /* Number of characters in word + space, combined. */
S};
S
S/* Take the next word from the string and compute its width.
S * Returns true if the word ends in a linebreak. */
Sstatic bool get_wordlen(const struct mf_font_s *font, mf_str *text,
S                        struct wordlen_s *result)
S{
S    mf_char c;
S    mf_str prev;
S    
S    result->word = 0;
S    result->space = 0;
S    result->chars = 0;
S    
S    c = mf_getchar(text);
S    while (c && !is_wrap_space(c))
S    {
S        result->chars++;
S        result->word += mf_character_width(font, c);
S        c = mf_getchar(text);
S    }
S    
S    prev = *text;
S    while (c && is_wrap_space(c))
S    {
S        result->chars++;
S        
S        if (c == ' ')
S            result->space += mf_character_width(font, c);
S        else if (c == '\t')
S            result->space += mf_character_width(font, 'm') * MF_TABSIZE;
S        else if (c == '\n')
S            break;
S        
S        prev = *text;
S        c = mf_getchar(text);
S    }
S    
S    /* The last loop reads the first character of next word, put it back. */
S    if (c)
S        *text = prev;
S    
S    return (c == '\0' || c == '\n');
S}
S
S/* Represents the rendered length for a single line. */
Sstruct linelen_s
S{
S    mf_str start; /* Start of the text for line. */
S    uint16_t chars; /* Total number of characters on the line. */
S    int16_t width; /* Total length of all words + whitespace on the line in pixels. */
S    bool linebreak; /* True if line ends in a linebreak */
S    struct wordlen_s last_word; /* Last word on the line. */
S    struct wordlen_s last_word_2; /* Second to last word on the line. */
S};
S
S/* Append word onto the line if it fits. If it would overflow, don't add and
S * return false. */
Sstatic bool append_word(const struct mf_font_s *font, int16_t width,
S                        struct linelen_s *current, mf_str *text)
S{
S    mf_str tmp = *text;
S    struct wordlen_s wordlen;
S    bool linebreak;
S    
S    linebreak = get_wordlen(font, &tmp, &wordlen);
S    
S    if (current->width + wordlen.word <= width)
S    {
S        *text = tmp;
S        current->last_word_2 = current->last_word;
S        current->last_word = wordlen;
S        current->linebreak = linebreak;
S        current->chars += wordlen.chars;
S        current->width += wordlen.word + wordlen.space;
S        return true;
S    }
S    else
S    {
S        return false;
S    }
S}
S
S/* Append a character to the line if it fits. */
Sstatic bool append_char(const struct mf_font_s *font, int16_t width,
S                        struct linelen_s *current, mf_str *text)
S{
S    mf_str tmp = *text;
S    mf_char c;
S    uint16_t w;
S    
S    c = mf_getchar(&tmp);
S    w = mf_character_width(font, c);
S    
S    if (current->width + w <= width)
S    {
S        *text = tmp;
S        current->chars++;
S        current->width += w;
S        return true;
S    }
S    else
S    {
S        return false;
S    }
S}
S
Sstatic int32_t sq16(int16_t x) { return (int32_t)x * x; }
S
S/* Try to balance the lines by potentially moving one word from the previous
S * line to the the current one. */
Sstatic void tune_lines(struct linelen_s *current, struct linelen_s *previous,
S                       int16_t max_width)
S{
S    int16_t curw1, prevw1;
S    int16_t curw2, prevw2;
S    int32_t delta1, delta2;
S    
S    /* If the lines are rendered as is */
S    curw1 = current->width - current->last_word.space;
S    prevw1 = previous->width - previous->last_word.space;
S    delta1 = sq16(max_width - prevw1) + sq16(max_width - curw1);
S    
S    /* If the last word is moved */
S    curw2 = current->width + previous->last_word.word;
S    prevw2 = previous->width - previous->last_word.word
S                             - previous->last_word.space
S                             - previous->last_word_2.space;
S    delta2 = sq16(max_width - prevw2) + sq16(max_width - curw2);
S    
S    if (delta1 > delta2 && curw2 <= max_width)
S    {
S        /* Do the change. */
S        uint16_t chars;
S        
S        chars = previous->last_word.chars;
S        previous->chars -= chars;
S        current->chars += chars;
S        previous->width -= previous->last_word.word + previous->last_word.space;
S        current->width += previous->last_word.word + previous->last_word.space;
S        previous->last_word = previous->last_word_2;
S        
S        while (chars--) mf_rewind(&current->start);
S    }
S}
S
Svoid mf_wordwrap(const struct mf_font_s *font, int16_t width,
S                 mf_str text, mf_line_callback_t callback, void *state)
S{
S    struct linelen_s current = { 0 };
S    struct linelen_s previous = { 0 };
S    bool full;
S    
S    current.start = text;
S    
S    while (*text)
S    {
S        full = !append_word(font, width, &current, &text);
S        
S        if (full || current.linebreak)
S        {
S            if (!current.chars)
S            {
S                /* We have a very long word. We must just cut it off at some
S                 * point. */
S                while (append_char(font, width, &current, &text));
S            }
S            
S            if (previous.chars)
S            {
S                /* Tune the length and dispatch the previous line. */
S                if (!previous.linebreak && !current.linebreak)
S                    tune_lines(&current, &previous, width);
S                
S                if (!callback(previous.start, previous.chars, state))
S                    return;
S            }
S            
S            previous = current;
S            current.start = text;
S            current.chars = 0;
S            current.width = 0;
S            current.linebreak = false;
S            current.last_word.word = 0;
S            current.last_word.space = 0;
S            current.last_word.chars = 0;
S        }
S    }
S    
S    /* Dispatch the last lines. */
S    if (previous.chars)
S    {
S        if (!callback(previous.start, previous.chars, state))
S            return;
S    }
S    
S    if (current.chars)
S        callback(current.start, current.chars, state);
S}
S
S#else
S
Svoid mf_wordwrap(const struct mf_font_s *font, int16_t width,
S                 mf_str text, mf_line_callback_t callback, void *state)
S{
S    mf_str linestart;
S    
S    /* Current line width and character count */
S    int16_t lw_cur = 0, cc_cur = 0;
S    
S    /* Previous wrap point */
S    int16_t cc_prev;
S    mf_str ls_prev;
S    
S    linestart = text;
S    
S    while (*text)
S    {
S        cc_prev = 0;
S        ls_prev = text;
S    
S        while (*text)
S        {
S            mf_char c;
S            int16_t new_width;
S            mf_str tmp;
S            
S            tmp = text;
S            c = mf_getchar(&text);
S            new_width = lw_cur + mf_character_width(font, c);
S            
S            if (c == '\n')
S            {
S                cc_prev = cc_cur + 1;
S                ls_prev = text;
S                break;
S            }
S            
S            if (new_width > width)
S            {
S                text = tmp;
S                break;
S            }
S            
S            cc_cur++;
S            lw_cur = new_width;
S            
S            if (is_wrap_space(c))
S            {
S                cc_prev = cc_cur;
S                ls_prev = text;
S            }
S        }
S        
S        /* Handle unbreakable words */
S        if (cc_prev == 0)
S        {
S            cc_prev = cc_cur;
S            ls_prev = text;
S        }
S        
S        if (!callback(linestart, cc_prev, state))
S            return;
S        
S        linestart = ls_prev;
S        text = linestart;
S        lw_cur = 0;
S        cc_cur = 0;
S    }
S}
S
S#endif
S
N#endif //MF_NO_COMPILE
L 20 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N
N#include "gdisp.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP
X#if -1
N
N/* Include the low level driver information */
N#include "gdisp_driver.h"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_driver.h" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gdisp/gdisp_driver.h
N * @brief   GDISP Graphic Driver subsystem low level driver header.
N *
N * @addtogroup GDISP
N * @{
N */
N
N#ifndef _GDISP_LLD_H
N#define _GDISP_LLD_H
N
N#if GFX_USE_GDISP
X#if -1
N
N// Include the GDRIVER infrastructure
N#include "../gdriver/gdriver.h"
N
N// Are we currently compiling the driver itself?
N#if defined(GDISP_DRIVER_VMT)
X#if 0L
S	#define	IN_DRIVER			TRUE
N#else
N	#define	IN_DRIVER			FALSE
N#endif
N
N// Is this a multiple driver situation?
N#if defined(GDISP_DRIVER_LIST)
X#if 0L
S	#define IS_MULTIPLE			TRUE
N#else
N	#define IS_MULTIPLE			FALSE
N#endif
N
N// Do we need to use VMT calling rather than direct calls to the driver?
N#if IS_MULTIPLE || GDISP_NEED_PIXMAP
X#if 0 || 0
S	#define USE_VMT				TRUE
N#else
N	#define USE_VMT				FALSE
N#endif
N
N// Are we in the pixmap virtual driver
N#ifndef IN_PIXMAP_DRIVER
N	#define IN_PIXMAP_DRIVER	FALSE
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N
N// Our special auto-detect hardware code which uses the VMT.
N#define HARDWARE_AUTODETECT		2
N
N#if USE_VMT && !IN_DRIVER
X#if 0 && !0
S	// Multiple controllers the default is to hardware detect
S	#define HARDWARE_DEFAULT		HARDWARE_AUTODETECT
N#else
N	// The default is not to include code functions that aren't needed
N	#define HARDWARE_DEFAULT		FALSE
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N
N/**
N * @name    GDISP hardware accelerated support
N * @{
N */
N	/**
N	 * @brief   The display hardware can benefit from being de-initialized when usage is complete.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	This is most useful for displays such as remote network displays.
N	 */
N	#ifndef GDISP_HARDWARE_DEINIT
N		#define GDISP_HARDWARE_DEINIT		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   The display hardware can benefit from being flushed.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	Some controllers ** require ** the application to flush
N	 */
N	#ifndef GDISP_HARDWARE_FLUSH
S		#define GDISP_HARDWARE_FLUSH		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware streaming writing is supported.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	Either GDISP_HARDWARE_STREAM_WRITE or GDISP_HARDWARE_DRAWPIXEL must be provided by each driver
N	 */
N	#ifndef GDISP_HARDWARE_STREAM_WRITE
N		#define GDISP_HARDWARE_STREAM_WRITE		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware streaming reading of the display surface is supported.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 *
N	 */
N	#ifndef GDISP_HARDWARE_STREAM_READ
N		#define GDISP_HARDWARE_STREAM_READ		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware supports setting the cursor position within the stream window.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	This is used to optimise setting of individual pixels within a stream window.
N	 * 			It should therefore not be implemented unless it is cheaper than just setting
N	 * 			a new window.
N	 */
N	#ifndef GDISP_HARDWARE_STREAM_POS
N		#define GDISP_HARDWARE_STREAM_POS		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware accelerated draw pixel.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	Either GDISP_HARDWARE_STREAM_WRITE or GDISP_HARDWARE_DRAWPIXEL must be provided by the driver
N	 */
N	#ifndef GDISP_HARDWARE_DRAWPIXEL
S		#define GDISP_HARDWARE_DRAWPIXEL		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware accelerated screen clears.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	This clears the entire display surface regardless of the clipping area currently set
N	 */
N	#ifndef GDISP_HARDWARE_CLEARS
N		#define GDISP_HARDWARE_CLEARS			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware accelerated rectangular fills.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_FILLS
N		#define GDISP_HARDWARE_FILLS			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware accelerated fills from an image.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_BITFILLS
N		#define GDISP_HARDWARE_BITFILLS			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Hardware accelerated scrolling.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_SCROLL
N		#define GDISP_HARDWARE_SCROLL			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   Reading back of pixel values.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_PIXELREAD
S		#define GDISP_HARDWARE_PIXELREAD		HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   The driver supports one or more control commands.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_CONTROL
S		#define GDISP_HARDWARE_CONTROL			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   The driver supports a non-standard query.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 */
N	#ifndef GDISP_HARDWARE_QUERY
N		#define GDISP_HARDWARE_QUERY			HARDWARE_DEFAULT
N	#endif
N
N	/**
N	 * @brief   The driver supports a clipping in hardware.
N	 * @details Can be set to TRUE, FALSE or HARDWARE_AUTODETECT
N	 *
N	 * @note	HARDWARE_AUTODETECT is only meaningful when GDISP_DRIVER_LIST is defined
N	 * @note	If this is defined the driver must perform its own clipping on all calls to
N	 * 			the driver and respond appropriately if a parameter is outside the display area.
N	 * @note	If this is not defined then the software ensures that all calls to the
N	 * 			driver do not exceed the display area (provided GDISP_NEED_CLIP or GDISP_NEED_VALIDATION
N	 * 			has been set).
N	 */
N	#ifndef GDISP_HARDWARE_CLIP
N		#define GDISP_HARDWARE_CLIP				HARDWARE_DEFAULT
N	#endif
N/** @} */
N
N//------------------------------------------------------------------------------------------------------------
N
N// For pixmaps certain routines MUST not be FALSE as they are needed for pixmap drawing
N//	Similarly some routines MUST not be TRUE as pixmap's don't provide them.
N#if GDISP_NEED_PIXMAP && !IN_DRIVER
X#if 0 && !0
S	#if !GDISP_HARDWARE_DEINIT
S		#undef GDISP_HARDWARE_DEINIT
S		#define GDISP_HARDWARE_DEINIT		HARDWARE_AUTODETECT
S	#endif
S	#if !GDISP_HARDWARE_DRAWPIXEL
S		#undef GDISP_HARDWARE_DRAWPIXEL
S		#define GDISP_HARDWARE_DRAWPIXEL	HARDWARE_AUTODETECT
S	#endif
S	#if !GDISP_HARDWARE_PIXELREAD
S		#undef GDISP_HARDWARE_PIXELREAD
S		#define GDISP_HARDWARE_PIXELREAD	HARDWARE_AUTODETECT
S	#endif
S	#if !GDISP_HARDWARE_CONTROL
S		#undef GDISP_HARDWARE_CONTROL
S		#define GDISP_HARDWARE_CONTROL		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_FLUSH == TRUE
S		#undef GDISP_HARDWARE_FLUSH
S		#define GDISP_HARDWARE_FLUSH		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_STREAM_WRITE == TRUE
S		#undef GDISP_HARDWARE_STREAM_WRITE
S		#define GDISP_HARDWARE_STREAM_WRITE	HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_STREAM_READ == TRUE
S		#undef GDISP_HARDWARE_STREAM_READ
S		#define GDISP_HARDWARE_STREAM_READ	HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_CLEARS == TRUE
S		#undef GDISP_HARDWARE_CLEARS
S		#define GDISP_HARDWARE_CLEARS		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_FILLS == TRUE
S		#undef GDISP_HARDWARE_FILLS
S		#define GDISP_HARDWARE_FILLS		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_BITFILLS == TRUE
S		#undef GDISP_HARDWARE_BITFILLS
S		#define GDISP_HARDWARE_BITFILLS		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_SCROLL == TRUE
S		#undef GDISP_HARDWARE_SCROLL
S		#define GDISP_HARDWARE_SCROLL		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_QUERY == TRUE
S		#undef GDISP_HARDWARE_QUERY
S		#define GDISP_HARDWARE_QUERY		HARDWARE_AUTODETECT
S	#endif
S	#if GDISP_HARDWARE_CLIP == TRUE
S		#undef GDISP_HARDWARE_CLIP
S		#define GDISP_HARDWARE_CLIP			HARDWARE_AUTODETECT
S	#endif
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N/* Verify information for packed pixels and define a non-packed pixel macro */
N#if !GDISP_PACKED_PIXELS
X#if !0
N	//#define gdispPackPixels(buf,cx,x,y,c)	{ ((color_t *)(buf))[(y)*(cx)+(x)] = (c); }
N	#define gdispPackPixels(buf,cx,x,y,c) { ls013_drawPixel(buf,cx,x,y,c); }
N#elif !GDISP_HARDWARE_BITFILLS
S	#error "GDISP: packed pixel formats are only supported for hardware accelerated drivers."
S#elif GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB888 \
S		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB444 \
S		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB666 \
S		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_CUSTOM
X#elif GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB888 		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB444 		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB666 		&& GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_CUSTOM
S	#error "GDISP: A packed pixel format has been specified for an unsupported pixel format."
N#endif
N
N/* Support routine for packed pixel formats */
N#if !defined(gdispPackPixels) || defined(__DOXYGEN__)
X#if !1L || 0L
S	/**
S	 * @brief   Pack a pixel into a pixel buffer.
S	 * @note    This function performs no buffer boundary checking
S	 *			regardless of whether GDISP_NEED_CLIP has been specified.
S	 *
S	 * @param[in] buf		The buffer to put the pixel in
S	 * @param[in] cx		The width of a pixel line
S	 * @param[in] x, y		The location of the pixel to place
S	 * @param[in] color		The color to put into the buffer
S	 *
S	 * @api
S	 */
S	void gdispPackPixels(const pixel_t *buf, coord_t cx, coord_t x, coord_t y, color_t color);
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N
Nstruct GDisplay {
N	struct GDriver				d;					// This must be the first element
N		#define gvmt(g)		((const GDISPVMT const *)((g)->d.vmt))	// For ease of access to the vmt member
N
N	struct GDISPControl {
N		coord_t					Width;
N		coord_t					Height;
N		orientation_t			Orientation;
N		powermode_t				Powermode;
N		uint8_t					Backlight;
N		uint8_t					Contrast;
N	} g;
N
N	void *						priv;				// A private area just for the drivers use.
N	void *						board;				// A private area just for the board interfaces use.
N
N	uint8_t						systemdisplay;
N	uint8_t						controllerdisplay;
N	uint16_t					flags;
N		#define GDISP_FLG_INSTREAM		0x0001		// We are in a user based stream operation
N		#define GDISP_FLG_SCRSTREAM		0x0002		// The stream area currently covers the whole screen
N		#define GDISP_FLG_DRIVER		0x0004		// This flags and above are for use by the driver
N
N	// Multithread Mutex
N	#if GDISP_NEED_MULTITHREAD
X	#if 0
S		gfxMutex				mutex;
N	#endif
N
N	// Software clipping
N	#if GDISP_HARDWARE_CLIP != TRUE && (GDISP_NEED_CLIP || GDISP_NEED_VALIDATION)
X	#if 0 != -1 && (-1 || -1)
N		coord_t					clipx0, clipy0;
N		coord_t					clipx1, clipy1;		/* not inclusive */
N	#endif
N
N	// Driver call parameters
N	struct {
N		coord_t			x, y;
N		coord_t			cx, cy;
N		coord_t			x1, y1;
N		coord_t			x2, y2;
N		color_t			color;
N		void			*ptr;
N	} p;
N
N	// In call working buffers
N
N	#if GDISP_NEED_TEXT
X	#if 0
S		// Text rendering parameters
S		struct {
S			font_t		font;
S			color_t		color;
S			color_t		bgcolor;
S			coord_t		clipx0, clipy0;
S			coord_t		clipx1, clipy1;
S		} t;
N	#endif
N	#if GDISP_LINEBUF_SIZE != 0 && ((GDISP_NEED_SCROLL && !GDISP_HARDWARE_SCROLL) || (!GDISP_HARDWARE_STREAM_WRITE && GDISP_HARDWARE_BITFILLS))
X	#if 128 != 0 && ((0 && !0) || (!0 && 0))
S		// A pixel line buffer
S		color_t		linebuf[GDISP_LINEBUF_SIZE];
N	#endif
N};
N
Ntypedef struct GDISPVMT {
N	GDriverVMT	d;
N		#define GDISP_VFLG_DYNAMICONLY		0x0001		// This display should never be statically initialised
N		#define GDISP_VFLG_PIXMAP			0x0002		// This is a pixmap display
N	bool_t (*init)(GDisplay *g);
N	void (*deinit)(GDisplay *g);
N	void (*writestart)(GDisplay *g);				// Uses p.x,p.y  p.cx,p.cy
N	void (*writepos)(GDisplay *g);					// Uses p.x,p.y
N	void (*writecolor)(GDisplay *g);				// Uses p.color
N	void (*writestop)(GDisplay *g);					// Uses no parameters
N	void (*readstart)(GDisplay *g);					// Uses p.x,p.y  p.cx,p.cy
N	color_t (*readcolor)(GDisplay *g);				// Uses no parameters
N	void (*readstop)(GDisplay *g);					// Uses no parameters
N	void (*pixel)(GDisplay *g);						// Uses p.x,p.y  p.color
N	void (*clear)(GDisplay *g);						// Uses p.color
N	void (*fill)(GDisplay *g);						// Uses p.x,p.y  p.cx,p.cy  p.color
N	void (*blit)(GDisplay *g);						// Uses p.x,p.y  p.cx,p.cy  p.x1,p.y1 (=srcx,srcy)  p.x2 (=srccx), p.ptr (=buffer)
N	color_t (*get)(GDisplay *g);					// Uses p.x,p.y
N	void (*vscroll)(GDisplay *g);					// Uses p.x,p.y  p.cx,p.cy, p.y1 (=lines) p.color
N	void (*control)(GDisplay *g);					// Uses p.x (=what)  p.ptr (=value)
N	void *(*query)(GDisplay *g);					// Uses p.x (=what);
N	void (*setclip)(GDisplay *g);					// Uses p.x,p.y  p.cx,p.cy
N	void (*flush)(GDisplay *g);						// Uses no parameters
N} GDISPVMT;
N
N//------------------------------------------------------------------------------------------------------------
N
N// Do we need function definitions or macro's (via the VMT)
N#if IN_DRIVER || !USE_VMT || defined(__DOXYGEN__)
X#if 0 || !0 || 0L
N	#ifdef __cplusplus
S	extern "C" {
N	#endif
N
N	// Should the driver routines be static or not
N	#if USE_VMT
X	#if 0
S		#define LLDSPEC         static
N	#else
N		#define LLDSPEC
N	#endif
N
N	/**
N	 * @brief   Initialize the driver.
N	 * @return	TRUE if successful.
N	 * @param[in]	g					The driver structure
N	 * @param[out]	g->g				The driver must fill in the GDISPControl structure
N	 */
N	LLDSPEC	bool_t gdisp_lld_init(GDisplay *g);
X		bool_t gdisp_lld_init(GDisplay *g);
N
N	#if GDISP_HARDWARE_DEINIT || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   The driver is being de-initialized
S		 * @pre		GDISP_HARDWARE_FLUSH is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 */
S		LLDSPEC	void gdisp_lld_deinit(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_FLUSH || defined(__DOXYGEN__)
X	#if -1 || 0L
N		/**
N		 * @brief   Flush the current drawing operations to the display
N		 * @pre		GDISP_HARDWARE_FLUSH is TRUE
N		 *
N		 * @param[in]	g				The driver structure
N		 *
N		 * @note		The parameter variables must not be altered by the driver.
N		 */
N		LLDSPEC	void gdisp_lld_flush(GDisplay *g);
X			void gdisp_lld_flush(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_STREAM_WRITE || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   Start a streamed write operation
S		 * @pre		GDISP_HARDWARE_STREAM_WRITE is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 * @note		g->p.x,g->p.y	The window position
S		 * @note		g->p.cx,g->p.cy	The window size
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 * @note		Streaming operations that wrap the defined window have
S		 * 				undefined results.
S		 * @note		This must be followed by a call to @p gdisp_lld_write_pos() if GDISP_HARDWARE_STREAM_POS is TRUE.
S		 */
S		LLDSPEC	void gdisp_lld_write_start(GDisplay *g);
S
S		/**
S		 * @brief   Send a pixel to the current streaming position and then increment that position
S		 * @pre		GDISP_HARDWARE_STREAM_WRITE is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 * @note		g->p.color		The color to display at the curent position
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_write_color(GDisplay *g);
S
S		/**
S		 * @brief   End the current streaming write operation
S		 * @pre		GDISP_HARDWARE_STREAM_WRITE is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_write_stop(GDisplay *g);
S
S		#if GDISP_HARDWARE_STREAM_POS || defined(__DOXYGEN__)
S			/**
S			 * @brief   Change the current position within the current streaming window
S			 * @pre		GDISP_HARDWARE_STREAM_POS is TRUE and GDISP_HARDWARE_STREAM_WRITE is TRUE
S			 *
S			 * @param[in]	g				The driver structure
S			 * @param[in]	g->p.x,g->p.y	The new position (which will always be within the existing stream window)
S			 *
S			 * @note		The parameter variables must not be altered by the driver.
S			 */
S			LLDSPEC	void gdisp_lld_write_pos(GDisplay *g);
S		#endif
N	#endif
N
N	#if GDISP_HARDWARE_STREAM_READ || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   Start a streamed read operation
S		 * @pre		GDISP_HARDWARE_STREAM_READ is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x,g->p.y	The window position
S		 * @param[in]	g->p.cx,g->p.cy	The window size
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 * @note		Streaming operations that wrap the defined window have
S		 * 				undefined results.
S		 */
S		LLDSPEC	void gdisp_lld_read_start(GDisplay *g);
S
S		/**
S		 * @brief   Read a pixel from the current streaming position and then increment that position
S		 * @return	The color at the current position
S		 * @pre		GDISP_HARDWARE_STREAM_READ is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	color_t gdisp_lld_read_color(GDisplay *g);
S
S		/**
S		 * @brief   End the current streaming operation
S		 * @pre		GDISP_HARDWARE_STREAM_READ is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_read_stop(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_DRAWPIXEL || defined(__DOXYGEN__)
X	#if -1 || 0L
N		/**
N		 * @brief   Draw a pixel
N		 * @pre		GDISP_HARDWARE_DRAWPIXEL is TRUE
N		 *
N		 * @param[in]	g				The driver structure
N		 * @param[in]	g->p.x,g->p.y	The pixel position
N		 * @param[in]	g->p.color		The color to set
N		 *
N		 * @note		The parameter variables must not be altered by the driver.
N		 */
N		LLDSPEC	void gdisp_lld_draw_pixel(GDisplay *g);
X			void gdisp_lld_draw_pixel(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_CLEARS || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   Clear the screen using the defined color
S		 * @pre		GDISP_HARDWARE_CLEARS is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.color		The color to set
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_clear(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_FILLS || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   Fill an area with a single color
S		 * @pre		GDISP_HARDWARE_FILLS is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x,g->p.y	The area position
S		 * @param[in]	g->p.cx,g->p.cy	The area size
S		 * @param[in]	g->p.color		The color to set
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_fill_area(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_BITFILLS || defined(__DOXYGEN__)
X	#if 0 || 0L
S		/**
S		 * @brief   Fill an area using a bitmap
S		 * @pre		GDISP_HARDWARE_BITFILLS is TRUE
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x,g->p.y	The area position
S		 * @param[in]	g->p.cx,g->p.cy	The area size
S		 * @param[in]	g->p.x1,g->p.y1	The starting position in the bitmap
S		 * @param[in]	g->p.x2			The width of a bitmap line
S		 * @param[in]	g->p.ptr		The pointer to the bitmap
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_blit_area(GDisplay *g);
N	#endif
N
N	#if GDISP_HARDWARE_PIXELREAD || defined(__DOXYGEN__)
X	#if -1 || 0L
N		/**
N		 * @brief   Read a pixel from the display
N		 * @return	The color at the defined position
N		 * @pre		GDISP_HARDWARE_PIXELREAD is TRUE (and the application needs it)
N		 *
N		 * @param[in]	g				The driver structure
N		 * @param[in]	g->p.x,g->p.y	The pixel position
N		 *
N		 * @note		The parameter variables must not be altered by the driver.
N		 */
N		LLDSPEC	color_t gdisp_lld_get_pixel_color(GDisplay *g);
X			color_t gdisp_lld_get_pixel_color(GDisplay *g);
N	#endif
N
N	#if (GDISP_HARDWARE_SCROLL && GDISP_NEED_SCROLL) || defined(__DOXYGEN__)
X	#if (0 && 0) || 0L
S		/**
S		 * @brief   Scroll an area of the screen
S		 * @pre		GDISP_HARDWARE_SCROLL is TRUE (and the application needs it)
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x,g->p.y	The area position
S		 * @param[in]	g->p.cx,g->p.cy	The area size
S		 * @param[in]	g->p.y1			The number of lines to scroll (positive or negative)
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 * @note		This can be easily implemented if the hardware supports
S		 * 				display area to display area copying.
S		 * @note		Clearing the exposed area on the scroll operation is not
S		 * 				needed as the high level code handles this.
S		 */
S		LLDSPEC	void gdisp_lld_vertical_scroll(GDisplay *g);
N	#endif
N
N	#if (GDISP_HARDWARE_CONTROL && GDISP_NEED_CONTROL) || defined(__DOXYGEN__)
X	#if (-1 && 0) || 0L
S		/**
S		 * @brief   Control some feature of the hardware
S		 * @pre		GDISP_HARDWARE_CONTROL is TRUE (and the application needs it)
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x			The operation to perform
S		 * @param[in]	g->p.ptr		The operation parameter
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_control(GDisplay *g);
N	#endif
N
N	#if (GDISP_HARDWARE_QUERY && GDISP_NEED_QUERY) || defined(__DOXYGEN__)
X	#if (0 && 0) || 0L
S		/**
S		 * @brief   Query some feature of the hardware
S		 * @return	The information requested (typecast as void *)
S		 * @pre		GDISP_HARDWARE_QUERY is TRUE (and the application needs it)
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x			What to query
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void *gdisp_lld_query(GDisplay *g);				// Uses p.x (=what);
N	#endif
N
N	#if (GDISP_HARDWARE_CLIP && (GDISP_NEED_CLIP || GDISP_NEED_VALIDATION)) || defined(__DOXYGEN__)
X	#if (0 && (-1 || -1)) || 0L
S		/**
S		 * @brief   Set the hardware clipping area
S		 * @pre		GDISP_HARDWARE_CLIP is TRUE (and the application needs it)
S		 *
S		 * @param[in]	g				The driver structure
S		 * @param[in]	g->p.x,g->p.y	The area position
S		 * @param[in]	g->p.cx,g->p.cy	The area size
S		 *
S		 * @note		The parameter variables must not be altered by the driver.
S		 */
S		LLDSPEC	void gdisp_lld_set_clip(GDisplay *g);
N	#endif
N
N	#ifdef __cplusplus
S	}
N	#endif
N
N#else
S	#define gdisp_lld_init(g)				gvmt(g)->init(g)
S	#define gdisp_lld_deinit(g)				gvmt(g)->deinit(g)
S	#define gdisp_lld_flush(g)				gvmt(g)->flush(g)
S	#define gdisp_lld_write_start(g)		gvmt(g)->writestart(g)
S	#define gdisp_lld_write_pos(g)			gvmt(g)->writepos(g)
S	#define gdisp_lld_write_color(g)		gvmt(g)->writecolor(g)
S	#define gdisp_lld_write_stop(g)			gvmt(g)->writestop(g)
S	#define gdisp_lld_read_start(g)			gvmt(g)->readstart(g)
S	#define gdisp_lld_read_color(g)			gvmt(g)->readcolor(g)
S	#define gdisp_lld_read_stop(g)			gvmt(g)->readstop(g)
S	#define gdisp_lld_draw_pixel(g)			gvmt(g)->pixel(g)
S	#define gdisp_lld_clear(g)				gvmt(g)->clear(g)
S	#define gdisp_lld_fill_area(g)			gvmt(g)->fill(g)
S	#define gdisp_lld_blit_area(g)			gvmt(g)->blit(g)
S	#define gdisp_lld_get_pixel_color(g)	gvmt(g)->get(g)
S	#define gdisp_lld_vertical_scroll(g)	gvmt(g)->vscroll(g)
S	#define gdisp_lld_control(g)			gvmt(g)->control(g)
S	#define gdisp_lld_query(g)				gvmt(g)->query(g)
S	#define gdisp_lld_set_clip(g)			gvmt(g)->setclip(g)
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N
N// If compiling the driver then build the VMT and set the low level driver color macros.
N#if IN_DRIVER
X#if 0
S
S	// Make sure the driver has a valid model
S	#if !GDISP_HARDWARE_STREAM_WRITE && !GDISP_HARDWARE_DRAWPIXEL
S		#error "GDISP Driver: Either GDISP_HARDWARE_STREAM_WRITE or GDISP_HARDWARE_DRAWPIXEL must be TRUE"
S	#endif
S
S	// If we are not using multiple displays then hard-code the VMT name (except for the pixmap driver)
S	#if !IS_MULTIPLE && !IN_PIXMAP_DRIVER
S		#undef GDISP_DRIVER_VMT
S		#define GDISP_DRIVER_VMT		GDISPVMT_OnlyOne
S	#endif
S
S	// Default the flags if the driver doesn't specify any
S	#ifndef GDISP_DRIVER_VMT_FLAGS
S		#define GDISP_DRIVER_VMT_FLAGS		0
S	#endif
S
S	// Routines needed by the general driver VMT
S	#ifdef __cplusplus
S	extern "C" {
S	#endif
S		bool_t _gdispInitDriver(GDriver *g, void *param, unsigned driverinstance, unsigned systeminstance);
S		void _gdispPostInitDriver(GDriver *g);
S		void _gdispDeInitDriver(GDriver *g);
S	#ifdef __cplusplus
S	}
S	#endif
S
S	// Build the VMT
S	const GDISPVMT const GDISP_DRIVER_VMT[1] = {{
S		{ GDRIVER_TYPE_DISPLAY, 0, sizeof(GDisplay), _gdispInitDriver, _gdispPostInitDriver, _gdispDeInitDriver },
S		gdisp_lld_init,
S		#if GDISP_HARDWARE_DEINIT
S			gdisp_lld_deinit,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_STREAM_WRITE
S			gdisp_lld_write_start,
S			#if GDISP_HARDWARE_STREAM_POS
S				gdisp_lld_write_pos,
S			#else
S				0,
S			#endif
S			gdisp_lld_write_color,
S			gdisp_lld_write_stop,
S		#else
S			0, 0, 0, 0,
S		#endif
S		#if GDISP_HARDWARE_STREAM_READ
S			gdisp_lld_read_start,
S			gdisp_lld_read_color,
S			gdisp_lld_read_stop,
S		#else
S			0, 0, 0,
S		#endif
S		#if GDISP_HARDWARE_DRAWPIXEL
S			gdisp_lld_draw_pixel,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_CLEARS
S			gdisp_lld_clear,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_FILLS
S			gdisp_lld_fill_area,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_BITFILLS
S			gdisp_lld_blit_area,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_PIXELREAD
S			gdisp_lld_get_pixel_color,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_SCROLL && GDISP_NEED_SCROLL
S			gdisp_lld_vertical_scroll,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_CONTROL && GDISP_NEED_CONTROL
S			gdisp_lld_control,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_QUERY && GDISP_NEED_QUERY
S			gdisp_lld_query,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_CLIP && (GDISP_NEED_CLIP || GDISP_NEED_VALIDATION)
S			gdisp_lld_set_clip,
S		#else
S			0,
S		#endif
S		#if GDISP_HARDWARE_FLUSH
S			gdisp_lld_flush,
S		#else
S			0,
S		#endif
S	}};
S
S	//--------------------------------------------------------------------------------------------------------
S
S	/* Low level driver pixel format information */
S	//-------------------------
S	//	True-Color color system
S	//-------------------------
S	#if GDISP_LLD_PIXELFORMAT & GDISP_COLORSYSTEM_TRUECOLOR
S		#define LLDCOLOR_SYSTEM			GDISP_COLORSYSTEM_TRUECOLOR
S
S		// Calculate the number of bits
S		#define LLDCOLOR_BITS_R			((GDISP_LLD_PIXELFORMAT>>8) & 0x0F)
S		#define LLDCOLOR_BITS_G			((GDISP_LLD_PIXELFORMAT>>4) & 0x0F)
S		#define LLDCOLOR_BITS_B			((GDISP_LLD_PIXELFORMAT>>0) & 0x0F)
S		#define LLDCOLOR_BITS			(LLDCOLOR_BITS_R + LLDCOLOR_BITS_G + LLDCOLOR_BITS_B)
S
S		// From the number of bits determine COLOR_TYPE, COLOR_TYPE_BITS and masking
S		#if LLDCOLOR_BITS <= 8
S			#define LLDCOLOR_TYPE			uint8_t
S			#define LLDCOLOR_TYPE_BITS		8
S		#elif LLDCOLOR_BITS <= 16
S			#define LLDCOLOR_TYPE			uint16_t
S			#define LLDCOLOR_TYPE_BITS		16
S		#elif LLDCOLOR_BITS <= 32
S			#define LLDCOLOR_TYPE			uint32_t
S			#define LLDCOLOR_TYPE_BITS		32
S		#else
S			#error "GDISP: Cannot define low level driver color types with more than 32 bits"
S		#endif
S		#if LLDCOLOR_TYPE_BITS == LLDCOLOR_BITS
S			#define LLDCOLOR_NEEDS_MASK	FALSE
S		#else
S			#define LLDCOLOR_NEEDS_MASK	TRUE
S		#endif
S		#define LLDCOLOR_MASK()			((1 << LLDCOLOR_BITS)-1)
S
S		// Calculate the component bit shifts
S		#if (GDISP_LLD_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_RGB
S			#define LLDCOLOR_SHIFT_R		(LLDCOLOR_BITS_B+LLDCOLOR_BITS_G)
S			#define LLDCOLOR_SHIFT_G		LLDCOLOR_BITS_B
S			#define LLDCOLOR_SHIFT_B		0
S		#else
S			#define LLDCOLOR_SHIFT_B		(LLDCOLOR_BITS_R+LLDCOLOR_BITS_G)
S			#define LLDCOLOR_SHIFT_G		LLDCOLOR_BITS_R
S			#define LLDCOLOR_SHIFT_R		0
S		#endif
S
S		// Calculate LLDRED_OF, LLDGREEN_OF, LLDBLUE_OF and LLDRGB2COLOR
S		#if LLDCOLOR_BITS_R + LLDCOLOR_SHIFT_R == 8
S			#define LLDRED_OF(c)			((c) & (((1<<LLDCOLOR_BITS_R)-1) << LLDCOLOR_SHIFT_R))
S			#define LLDRGB2COLOR_R(r)		((LLDCOLOR_TYPE)((r) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1))))
S		#elif LLDCOLOR_BITS_R + LLDCOLOR_SHIFT_R > 8
S			#define LLDRED_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_R)-1) << LLDCOLOR_SHIFT_R)) >> (LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R-8))
S			#define LLDRGB2COLOR_R(r)		(((LLDCOLOR_TYPE)((r) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1)))) << (LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R-8))
S		#else // LLDCOLOR_BITS_R + LLDCOLOR_SHIFT_R < 8
S			#define LLDRED_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_R)-1) << LLDCOLOR_SHIFT_R)) << (8-(LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R)))
S			#define LLDRGB2COLOR_R(r)		(((LLDCOLOR_TYPE)((r) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1)))) >> (8-(LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R)))
S		#endif
S		#if LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G == 8
S			#define LLDGREEN_OF(c)			((c) & (((1<<LLDCOLOR_BITS_G)-1) << LLDCOLOR_SHIFT_G))
S			#define LLDRGB2COLOR_G(g)		((LLDCOLOR_TYPE)((g) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1))))
S		#elif LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G > 8
S			#define LLDGREEN_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_G)-1) << LLDCOLOR_SHIFT_G)) >> (LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G-8))
S			#define LLDRGB2COLOR_G(g)		(((LLDCOLOR_TYPE)((g) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1)))) << (LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G-8))
S		#else // LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G < 8
S			#define LLDGREEN_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_G)-1) << LLDCOLOR_SHIFT_G)) << (8-(LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G)))
S			#define LLDRGB2COLOR_G(g)		(((LLDCOLOR_TYPE)((g) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1)))) >> (8-(LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G)))
S		#endif
S		#if LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B == 8
S			#define LLDBLUE_OF(c)			((c) & (((1<<LLDCOLOR_BITS_B)-1) << LLDCOLOR_SHIFT_B))
S			#define LLDRGB2COLOR_B(b)		((LLDCOLOR_TYPE)((b) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1))))
S		#elif LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B > 8
S			#define LLDBLUE_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_B)-1) << LLDCOLOR_SHIFT_B)) >> (LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B-8))
S			#define LLDRGB2COLOR_B(b)		(((LLDCOLOR_TYPE)((b) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1)))) << (LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B-8))
S		#else // LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B < 8
S			#define LLDBLUE_OF(c)			(((c) & (((1<<LLDCOLOR_BITS_B)-1) << LLDCOLOR_SHIFT_B)) << (8-(LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B)))
S			#define LLDRGB2COLOR_B(b)		(((LLDCOLOR_TYPE)((b) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1)))) >> (8-(LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B)))
S		#endif
S		#define LLDLUMA_OF(c)				((LLDRED_OF(c)+((uint16_t)LLDGREEN_OF(c)<<1)+LLDBLUE_OF(c))>>2)
S		#define LLDEXACT_RED_OF(c)			(((uint16_t)(((c)>>LLDCOLOR_SHIFT_R)&((1<<LLDCOLOR_BITS_R)-1))*255)/((1<<LLDCOLOR_BITS_R)-1))
S		#define LLDEXACT_GREEN_OF(c)		(((uint16_t)(((c)>>LLDCOLOR_SHIFT_G)&((1<<LLDCOLOR_BITS_G)-1))*255)/((1<<LLDCOLOR_BITS_G)-1))
S		#define LLDEXACT_BLUE_OF(c)			(((uint16_t)(((c)>>LLDCOLOR_SHIFT_B)&((1<<LLDCOLOR_BITS_B)-1))*255)/((1<<LLDCOLOR_BITS_B)-1))
S		#define LLDEXACT_LUMA_OF(c)			((LLDEXACT_RED_OF(c)+((uint16_t)LLDEXACT_GREEN_OF(c)<<1)+LLDEXACT_BLUE_OF(c))>>2)
S		#define LLDLUMA2COLOR(l)			(LLDRGB2COLOR_R(l) | LLDRGB2COLOR_G(l) | LLDRGB2COLOR_B(l))
S		#define LLDRGB2COLOR(r,g,b)			(LLDRGB2COLOR_R(r) | LLDRGB2COLOR_G(g) | LLDRGB2COLOR_B(b))
S
S		// Calculate LLDHTML2COLOR
S		#if LLDCOLOR_BITS_R + LLDCOLOR_SHIFT_R == 24
S			#define LLDHTML2COLOR_R(h)		((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1))<<16))
S		#elif COLOR_BITS_R + COLOR_SHIFT_R > 24
S			#define LLDHTML2COLOR_R(h)		(((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1))<<16)) << (LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R-24))
S		#else // COLOR_BITS_R + COLOR_SHIFT_R < 24
S			#define LLDHTML2COLOR_R(h)		(((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_R))-1))<<16)) >> (24-(LLDCOLOR_BITS_R+LLDCOLOR_SHIFT_R)))
S		#endif
S		#if LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G == 16
S			#define LLDHTML2COLOR_G(h)		((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1))<<8))
S		#elif LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G > 16
S			#define LLDHTML2COLOR_G(h)		(((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1))<<8)) << (LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G-16))
S		#else // LLDCOLOR_BITS_G + LLDCOLOR_SHIFT_G < 16
S			#define LLDHTML2COLOR_G(h)		(((h) & ((0xFF & ~((1<<(8-LLDCOLOR_BITS_G))-1))<<8)) >> (16-(LLDCOLOR_BITS_G+LLDCOLOR_SHIFT_G)))
S		#endif
S		#if LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B == 8
S			#define LLDHTML2COLOR_B(h)		((h) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1)))
S		#elif LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B > 8
S			#define LLDHTML2COLOR_B(h)		(((h) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1))) << (LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B-8))
S		#else // LLDCOLOR_BITS_B + LLDCOLOR_SHIFT_B < 8
S			#define LLDHTML2COLOR_B(h)		(((h) & (0xFF & ~((1<<(8-LLDCOLOR_BITS_B))-1))) >> (8-(LLDCOLOR_BITS_B+LLDCOLOR_SHIFT_B)))
S		#endif
S		#define LLDHTML2COLOR(h)		((LLDCOLOR_TYPE)(LLDHTML2COLOR_R(h) | LLDHTML2COLOR_G(h) | LLDHTML2COLOR_B(h)))
S
S	//-------------------------
S	//	Gray-scale color system
S	//-------------------------
S	#elif (GDISP_LLD_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_GRAYSCALE
S		#define LLDCOLOR_SYSTEM			GDISP_COLORSYSTEM_GRAYSCALE
S
S		// Calculate the number of bits and shifts
S		#define LLDCOLOR_BITS			(GDISP_LLD_PIXELFORMAT & 0xFF)
S		#define LLDCOLOR_BITS_R			LLDCOLOR_BITS
S		#define LLDCOLOR_BITS_G			LLDCOLOR_BITS
S		#define LLDCOLOR_BITS_B			LLDCOLOR_BITS
S		#define LLDCOLOR_SHIFT_R		0
S		#define LLDCOLOR_SHIFT_G		0
S		#define LLDCOLOR_SHIFT_B		0
S
S		// From the number of bits determine COLOR_TYPE, COLOR_TYPE_BITS and masking
S		#if LLDCOLOR_BITS <= 8
S			#define LLDCOLOR_TYPE		uint8_t
S			#define LLDCOLOR_TYPE_BITS	8
S		#else
S			#error "GDISP: Cannot define gray-scale low level driver color types with more than 8 bits"
S		#endif
S		#if LLDCOLOR_TYPE_BITS == LLDCOLOR_BITS
S			#define LLDCOLOR_NEEDS_MASK	FALSE
S		#else
S			#define LLDCOLOR_NEEDS_MASK	TRUE
S		#endif
S		#define LLDCOLOR_MASK()			((1 << LLDCOLOR_BITS)-1)
S
S		#if COLOR_BITS == 1
S			#define LLDRGB2COLOR(r,g,b)		(((r)|(g)|(b)) ? 1 : 0)
S			#define LLDLUMA2COLOR(l)		((l) ? 1 : 0)
S			#define LLDHTML2COLOR(h)		((h) ? 1 : 0)
S			#define LLDLUMA_OF(c)			((c) ? 255 : 0)
S			#define LLDEXACT_LUMA_OF(c)		LLDLUMA_OF(c)
S		#else
S			// They eye is more sensitive to green
S			#define LLDRGB2COLOR(r,g,b)		((LLDCOLOR_TYPE)(((uint16_t)(r)+(g)+(g)+(b)) >> (10-LLDCOLOR_BITS)))
S			#define LLDLUMA2COLOR(l)		((LLDCOLOR_TYPE)((l)>>(8-LLDCOLOR_BITS)))
S			#define LLDHTML2COLOR(h)		((LLDCOLOR_TYPE)(((((h)&0xFF0000)>>16)+(((h)&0x00FF00)>>7)+((h)&0x0000FF)) >> (10-LLDCOLOR_BITS)))
S			#define LLDLUMA_OF(c)			(((c) & ((1<<LLDCOLOR_BITS)-1)) << (8-LLDCOLOR_BITS))
S			#define LLDEXACT_LUMA_OF(c)		((((uint16_t)(c) & ((1<<LLDCOLOR_BITS)-1))*255)/((1<<LLDCOLOR_BITS)-1))
S		#endif
S
S		#define LLDRED_OF(c)			LLDLUMA_OF(c)
S		#define LLDGREEN_OF(c)			LLDLUMA_OF(c)
S		#define LLDBLUE_OF(c)			LLDLUMA_OF(c)
S		#define LLDEXACT_RED_OF(c)		LLDEXACT_LUMA_OF(c)
S		#define LLDEXACT_GREEN_OF(c)	LLDEXACT_LUMA_OF(c)
S		#define LLDEXACT_BLUE_OF(c)		LLDEXACT_LUMA_OF(c)
S
S	//-------------------------
S	//	Palette color system
S	//-------------------------
S	#elif (GDISP_LLD_PIXELFORMAT & GDISP_COLORSYSTEM_MASK) == GDISP_COLORSYSTEM_PALETTE
S		#define LLDCOLOR_SYSTEM			GDISP_COLORSYSTEM_PALETTE
S
S		#error "GDISP: A palette color system for low level drivers is not currently supported"
S
S	//-------------------------
S	//	Some other color system
S	//-------------------------
S	#else
S		#error "GDISP: Unsupported color system for low level drivers"
S	#endif
S
S	/* Which is the larger color type */
S	#if COLOR_BITS > LLDCOLOR_BITS
S		#define LARGER_COLOR_BITS	COLOR_BITS
S		#define LARGER_COLOR_TYPE	COLOR_TYPE
S	#else
S		#define LARGER_COLOR_BITS	LLDCOLOR_BITS
S		#define LARGER_COLOR_TYPE	LLDCOLOR_TYPE
S	#endif
S
S	/**
S	 * @brief	Controls color conversion accuracy for a low level driver
S	 * @details	Should higher precision be used when converting colors.
S	 * @note	Color conversion is only necessary if GDISP_PIXELFORMAT != GDISP_LLD_PIXELFORMAT
S	 * @note	It only makes sense to turn this on if you have a high bit depth display but
S	 * 			are running the application in low bit depths.
S	 * @note	To achieve higher color accuracy bit shifting is replaced with multiplies and divides.
S	 */
S	#ifndef GDISP_HARDWARE_USE_EXACT_COLOR
S		#if LLDCOLOR_BITS_R - COLOR_BITS_R >= LLDCOLOR_BITS_R/2 || LLDCOLOR_BITS_G - COLOR_BITS_G >= LLDCOLOR_BITS_G/2 || LLDCOLOR_BITS_B - COLOR_BITS_B >= LLDCOLOR_BITS_B/2
S			#define GDISP_HARDWARE_USE_EXACT_COLOR	TRUE
S		#else
S			#define GDISP_HARDWARE_USE_EXACT_COLOR	FALSE
S		#endif
S	#endif
S
S	/* Low level driver pixel format conversion functions */
S	#if GDISP_PIXELFORMAT == GDISP_LLD_PIXELFORMAT || defined(__DOXYGEN__)
S		/**
S		 * @brief	Convert from a standard color format to the low level driver pixel format
S		 * @note	For use only by low level drivers
S		 */
S		#define gdispColor2Native(c)	(c)
S		/**
S		 * @brief	Convert from a low level driver pixel format to the standard color format
S		 * @note	For use only by low level drivers
S		 */
S		#define gdispNative2Color(c)	(c)
S	#elif COLOR_SYSTEM == GDISP_COLORSYSTEM_GRAYSCALE || LLDCOLOR_SYSTEM == GDISP_COLORSYSTEM_GRAYSCALE
S		#if GDISP_HARDWARE_USE_EXACT_COLOR
S			#define gdispColor2Native(c)	LLDLUMA2COLOR(EXACT_LUMA_OF(c))
S			#define gdispNative2Color(c)	LUMA2COLOR(LLDEXACT_LUMA_OF(c))
S		#else
S			#define gdispColor2Native(c)	LLDLUMA2COLOR(LUMA_OF(c))
S			#define gdispNative2Color(c)	LUMA2COLOR(LLDLUMA_OF(c))
S		#endif
S	#elif COLOR_SYSTEM == GDISP_COLORSYSTEM_TRUECOLOR && LLDCOLOR_SYSTEM == GDISP_COLORSYSTEM_TRUECOLOR
S		#if GDISP_HARDWARE_USE_EXACT_COLOR
S			#define gdispColor2Native(c)	LLDRGB2COLOR(EXACT_RED_OF(c), EXACT_GREEN_OF(c), EXACT_BLUE_OF(c))
S			#define gdispNative2Color(c)	RGB2COLOR(LLDEXACT_RED_OF(c), LLDEXACT_GREEN_OF(c), LLDEXACT_BLUE_OF(c))
S		#else
S			#define gdispColor2Native(c)	LLDRGB2COLOR(RED_OF(c), GREEN_OF(c), BLUE_OF(c))
S			#define gdispNative2Color(c)	RGB2COLOR(LLDRED_OF(c), LLDGREEN_OF(c), LLDBLUE_OF(c))
S		#endif
S	#else
S		#error "GDISP: This pixel format conversion is not supported yet"
S	#endif
S
N#endif
N
N//------------------------------------------------------------------------------------------------------------
N
N#undef IN_PIXMAP_DRIVER
N#undef IS_MULTIPLE
N#undef IN_DRIVER
N#undef USE_VMT
N#endif	/* GFX_USE_GDISP */
N
N#endif	/* _GDISP_LLD_H */
N/** @} */
L 14 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp.c" 2
N
N// Number of milliseconds for the startup logo - 0 means disabled.
N#if GDISP_NEED_STARTUP_LOGO
X#if -1
N	#define GDISP_STARTUP_LOGO_TIMEOUT		1000
N	#define GDISP_STARTUP_LOGO_COLOR		White
N#else
S	#define GDISP_STARTUP_LOGO_TIMEOUT		0
N#endif
N
N// For internal use only.
N#if GDISP_NEED_TEXT_WORDWRAP
X#if 0
S	typedef struct wrapParameters {
S		GDisplay* g;
S		coord_t x;
S		coord_t y;
S		font_t font;
S		justify_t justify;
S	} wrapParameters_t;
N#endif
N
N/*===========================================================================*/
N/* Driver local variables.                                                   */
N/*===========================================================================*/
N
N#if GDISP_NEED_TIMERFLUSH
X#if 0
S	static GTimer	FlushTimer;
N#endif
N
NGDisplay	*GDISP;
N
N#if GDISP_NEED_MULTITHREAD
X#if 0
S	#define MUTEX_INIT(g)		gfxMutexInit(&(g)->mutex)
S	#define MUTEX_ENTER(g)		gfxMutexEnter(&(g)->mutex)
S	#define MUTEX_EXIT(g)		gfxMutexExit(&(g)->mutex)
S	#define MUTEX_DEINIT(g)		gfxMutexDestroy(&(g)->mutex)
N#else
N	#define MUTEX_INIT(g)
N	#define MUTEX_ENTER(g)
N	#define MUTEX_EXIT(g)
N	#define MUTEX_DEINIT(g)
N#endif
N
N#define NEED_CLIPPING	(GDISP_HARDWARE_CLIP != TRUE && (GDISP_NEED_VALIDATION || GDISP_NEED_CLIP))
N
N#if !NEED_CLIPPING
X#if !(0 != -1 && (-1 || -1))
S	#define TEST_CLIP_AREA(g)
S#elif GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
X#elif 0 == 2
S	#define TEST_CLIP_AREA(g)																					\
S			if (!gvmt(g)->setclip) {																				\
S				if ((g)->p.x < (g)->clipx0) { (g)->p.cx -= (g)->clipx0 - (g)->p.x; (g)->p.x = (g)->clipx0; }	\
S				if ((g)->p.y < (g)->clipy0) { (g)->p.cy -= (g)->clipy0 - (g)->p.y; (g)->p.y = (g)->clipy0; }	\
S				if ((g)->p.x + (g)->p.cx > (g)->clipx1)	(g)->p.cx = (g)->clipx1 - (g)->p.x;						\
S				if ((g)->p.y + (g)->p.cy > (g)->clipy1)	(g)->p.cy = (g)->clipy1 - (g)->p.y;						\
S			}																									\
S			if ((g)->p.cx > 0 && (g)->p.cy > 0)
X	#define TEST_CLIP_AREA(g)																								if (!gvmt(g)->setclip) {																								if ((g)->p.x < (g)->clipx0) { (g)->p.cx -= (g)->clipx0 - (g)->p.x; (g)->p.x = (g)->clipx0; }					if ((g)->p.y < (g)->clipy0) { (g)->p.cy -= (g)->clipy0 - (g)->p.y; (g)->p.y = (g)->clipy0; }					if ((g)->p.x + (g)->p.cx > (g)->clipx1)	(g)->p.cx = (g)->clipx1 - (g)->p.x;										if ((g)->p.y + (g)->p.cy > (g)->clipy1)	(g)->p.cy = (g)->clipy1 - (g)->p.y;									}																												if ((g)->p.cx > 0 && (g)->p.cy > 0)
N#else
N	#define TEST_CLIP_AREA(g)																				\
N			if ((g)->p.x < (g)->clipx0) { (g)->p.cx -= (g)->clipx0 - (g)->p.x; (g)->p.x = (g)->clipx0; }	\
N			if ((g)->p.y < (g)->clipy0) { (g)->p.cy -= (g)->clipy0 - (g)->p.y; (g)->p.y = (g)->clipy0; }	\
N			if ((g)->p.x + (g)->p.cx > (g)->clipx1)	(g)->p.cx = (g)->clipx1 - (g)->p.x;						\
N			if ((g)->p.y + (g)->p.cy > (g)->clipy1)	(g)->p.cy = (g)->clipy1 - (g)->p.y;						\
N			if ((g)->p.cx > 0 && (g)->p.cy > 0)
X	#define TEST_CLIP_AREA(g)																							if ((g)->p.x < (g)->clipx0) { (g)->p.cx -= (g)->clipx0 - (g)->p.x; (g)->p.x = (g)->clipx0; }				if ((g)->p.y < (g)->clipy0) { (g)->p.cy -= (g)->clipy0 - (g)->p.y; (g)->p.y = (g)->clipy0; }				if ((g)->p.x + (g)->p.cx > (g)->clipx1)	(g)->p.cx = (g)->clipx1 - (g)->p.x;									if ((g)->p.y + (g)->p.cy > (g)->clipy1)	(g)->p.cy = (g)->clipy1 - (g)->p.y;									if ((g)->p.cx > 0 && (g)->p.cy > 0)
N#endif
N
N/*==========================================================================*/
N/* Internal functions.														*/
N/*==========================================================================*/
N
N#if GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE
X#if 0 && 0
S	static GFXINLINE void setglobalwindow(GDisplay *g) {
S		coord_t	x, y;
S		x = g->p.x; y = g->p.y;
S		g->p.x = g->p.y = 0;
S		g->p.cx = g->g.Width; g->p.cy = g->g.Height;
S		gdisp_lld_write_start(g);
S		g->p.x = x; g->p.y = y;
S		g->flags |= GDISP_FLG_SCRSTREAM;
S	}
N#endif
N
N#if GDISP_NEED_AUTOFLUSH && GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
X#if 0 && -1 == 2
S	#define autoflush_stopdone(g)	if (gvmt(g)->flush) gdisp_lld_flush(g)
S#elif GDISP_NEED_AUTOFLUSH && GDISP_HARDWARE_FLUSH
X#elif 0 && -1
S	#define autoflush_stopdone(g)	gdisp_lld_flush(g)
N#else
N	#define autoflush_stopdone(g)
N#endif
N
N#if GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE
X#if 0 && 0
S	#define autoflush(g)									\
S			{												\
S				if ((g->flags & GDISP_FLG_SCRSTREAM)) {		\
S					gdisp_lld_write_stop(g);				\
S					g->flags &= ~GDISP_FLG_SCRSTREAM;		\
S				}											\
S				autoflush_stopdone(g);						\
S			}
X	#define autoflush(g)												{																if ((g->flags & GDISP_FLG_SCRSTREAM)) {							gdisp_lld_write_stop(g);									g->flags &= ~GDISP_FLG_SCRSTREAM;						}															autoflush_stopdone(g);									}
N#else
N	#define autoflush(g)		autoflush_stopdone(g)
N#endif
N
N// drawpixel(g)
N// Parameters:	x,y
N// Alters:		cx, cy (if using streaming)
N// Does not clip
Nstatic GFXINLINE void drawpixel(GDisplay *g) {
Xstatic __inline void drawpixel(GDisplay *g) {
N
N	// Best is hardware accelerated pixel draw
N	#if GDISP_HARDWARE_DRAWPIXEL
X	#if -1
N		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
X		#if -1 == 2
S			if (gvmt(g)->pixel)
N		#endif
N		{
N			gdisp_lld_draw_pixel(g);
N			return;
N		}
N	#endif
N
N	// Next best is cursor based streaming
N	#if GDISP_HARDWARE_DRAWPIXEL != TRUE && GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE
X	#if -1 != -1 && 0 && 0
S		#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S			if (gvmt(g)->writepos)
S		#endif
S		{
S			if (!(g->flags & GDISP_FLG_SCRSTREAM))
S				setglobalwindow(g);
S			gdisp_lld_write_pos(g);
S			gdisp_lld_write_color(g);
S			return;
S		}
N	#endif
N
N	// Worst is general streaming
N	#if GDISP_HARDWARE_DRAWPIXEL != TRUE && GDISP_HARDWARE_STREAM_POS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if -1 != -1 && 0 != -1 && 0
S		// The following test is unneeded because we are guaranteed to have streaming if we don't have drawpixel
S		//#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S		//	if (gvmt(g)->writestart)
S		//#endif
S		{
S			g->p.cx = g->p.cy = 1;
S			gdisp_lld_write_start(g);
S			gdisp_lld_write_color(g);
S			gdisp_lld_write_stop(g);
S			return;
S		}
N	#endif
N}
N
N// drawpixel_clip(g)
N// Parameters:	x,y
N// Alters:		cx, cy (if using streaming)
N#if NEED_CLIPPING
X#if (0 != -1 && (-1 || -1))
N	static GFXINLINE void drawpixel_clip(GDisplay *g) {
X	static __inline void drawpixel_clip(GDisplay *g) {
N		#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
X		#if 0 == 2
S			if (!gvmt(g)->setclip)
N		#endif
N		{
N			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
N				return;
N		}
N		drawpixel(g);
N	}
N#else
S	#define drawpixel_clip(g)		drawpixel(g)
N#endif
N
N// fillarea(g)
N// Parameters:	x,y cx,cy and color
N// Alters:		nothing
N// Note:		This is not clipped
N// Resets the streaming area if GDISP_HARDWARE_STREAM_WRITE and GDISP_HARDWARE_STREAM_POS is set.
Nstatic GFXINLINE void fillarea(GDisplay *g) {
Xstatic __inline void fillarea(GDisplay *g) {
N
N	// Best is hardware accelerated area fill
N	#if GDISP_HARDWARE_FILLS
X	#if 0
S		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->fill)
S		#endif
S		{
S			gdisp_lld_fill_area(g);
S			return;
S		}
N	#endif
N
N	// Next best is hardware streaming
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0
S		#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S			if (gvmt(g)->writestart)
S		#endif
S		{
S			uint32_t	area;
S
S			#if GDISP_HARDWARE_STREAM_POS
S				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
S					gdisp_lld_write_stop(g);
S					g->flags &= ~GDISP_FLG_SCRSTREAM;
S				}
S			#endif
S
S			area = (uint32_t)g->p.cx * g->p.cy;
S			gdisp_lld_write_start(g);
S			#if GDISP_HARDWARE_STREAM_POS
S				#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S					if (gvmt(g)->writepos)
S				#endif
S				gdisp_lld_write_pos(g);
S			#endif
S			for(; area; area--)
S				gdisp_lld_write_color(g);
S			gdisp_lld_write_stop(g);
S			return;
S		}
N	#endif
N
N	// Worst is pixel drawing
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_DRAWPIXEL
X	#if 0 != -1 && 0 != -1 && -1
N		// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
N		//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
N		//	if (gvmt(g)->pixel)
N		//#endif
N		{
N			coord_t x0, y0, x1, y1;
N
N			x0 = g->p.x;
N			y0 = g->p.y;
N			x1 = g->p.x + g->p.cx;
N			y1 = g->p.y + g->p.cy;
N			for(; g->p.y < y1; g->p.y++, g->p.x = x0)
N				for(; g->p.x < x1; g->p.x++)
N					gdisp_lld_draw_pixel(g);
N			g->p.y = y0;
N			return;
N		}
N	#endif
N}
N
N// Parameters:	x,y and x1
N// Alters:		x,y x1,y1 cx,cy
N// Assumes the window covers the screen and a write_stop() will occur later
N//	if GDISP_HARDWARE_STREAM_WRITE and GDISP_HARDWARE_STREAM_POS is set.
Nstatic void hline_clip(GDisplay *g) {
N	// Swap the points if necessary so it always goes from x to x1
N	if (g->p.x1 < g->p.x) {
N		g->p.cx = g->p.x; g->p.x = g->p.x1; g->p.x1 = g->p.cx;
N	}
N
N	// Clipping
N	#if NEED_CLIPPING
X	#if (0 != -1 && (-1 || -1))
N		#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
X		#if 0 == 2
S			if (!gvmt(g)->setclip)
N		#endif
N		{
N			if (g->p.y < g->clipy0 || g->p.y >= g->clipy1) return;
N			if (g->p.x < g->clipx0) g->p.x = g->clipx0;
N			if (g->p.x1 >= g->clipx1) g->p.x1 = g->clipx1 - 1;
N			if (g->p.x1 < g->p.x) return;
N		}
N	#endif
N
N	// This is an optimization for the point case. It is only worthwhile however if we
N	// have hardware fills or if we support both hardware pixel drawing and hardware streaming
N	#if GDISP_HARDWARE_FILLS || (GDISP_HARDWARE_DRAWPIXEL && GDISP_HARDWARE_STREAM_WRITE)
X	#if 0 || (-1 && 0)
S		// Is this a point
S		if (g->p.x == g->p.x1) {
S			drawpixel(g);
S			return;
S		}
N	#endif
N
N	// Best is hardware accelerated area fill
N	#if GDISP_HARDWARE_FILLS
X	#if 0
S		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->fill)
S		#endif
S		{
S			g->p.cx = g->p.x1 - g->p.x + 1;
S			g->p.cy = 1;
S			gdisp_lld_fill_area(g);
S			return;
S		}
N	#endif
N
N	// Next best is cursor based streaming
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0 && 0
S		#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S			if (gvmt(g)->writepos)
S		#endif
S		{
S			if (!(g->flags & GDISP_FLG_SCRSTREAM))
S				setglobalwindow(g);
S			g->p.cx = g->p.x1 - g->p.x + 1;
S			gdisp_lld_write_pos(g);
S			do { gdisp_lld_write_color(g); } while(--g->p.cx);
S			return;
S		}
N	#endif
N
N	// Next best is streaming
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_POS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0 != -1 && 0
S		#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S			if (gvmt(g)->writestart)
S		#endif
S		{
S			g->p.cx = g->p.x1 - g->p.x + 1;
S			g->p.cy = 1;
S			gdisp_lld_write_start(g);
S			do { gdisp_lld_write_color(g); } while(--g->p.cx);
S			gdisp_lld_write_stop(g);
S			return;
S		}
N	#endif
N
N	// Worst is drawing pixels
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_DRAWPIXEL
X	#if 0 != -1 && 0 != -1 && -1
N		// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
N		//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
N		//	if (gvmt(g)->pixel)
N		//#endif
N		{
N			for(; g->p.x <= g->p.x1; g->p.x++)
N				gdisp_lld_draw_pixel(g);
N			return;
N		}
N	#endif
N}
N
N// Parameters:	x,y and y1
N// Alters:		x,y x1,y1 cx,cy
Nstatic void vline_clip(GDisplay *g) {
N	// Swap the points if necessary so it always goes from y to y1
N	if (g->p.y1 < g->p.y) {
N		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
N	}
N
N	// Clipping
N	#if NEED_CLIPPING
X	#if (0 != -1 && (-1 || -1))
N		#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
X		#if 0 == 2
S			if (!gvmt(g)->setclip)
N		#endif
N		{
N			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
N			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
N			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
N			if (g->p.y1 < g->p.y) return;
N		}
N	#endif
N
N	// This is an optimization for the point case. It is only worthwhile however if we
N	// have hardware fills or if we support both hardware pixel drawing and hardware streaming
N	#if GDISP_HARDWARE_FILLS || (GDISP_HARDWARE_DRAWPIXEL && GDISP_HARDWARE_STREAM_WRITE) || (GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE)
X	#if 0 || (-1 && 0) || (0 && 0)
S		// Is this a point
S		if (g->p.y == g->p.y1) {
S			drawpixel(g);
S			return;
S		}
N	#endif
N
N	// Best is hardware accelerated area fill
N	#if GDISP_HARDWARE_FILLS
X	#if 0
S		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->fill)
S		#endif
S		{
S			g->p.cy = g->p.y1 - g->p.y + 1;
S			g->p.cx = 1;
S			gdisp_lld_fill_area(g);
S			return;
S		}
N	#endif
N
N	// Next best is streaming
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0
S		#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S			if (gvmt(g)->writestart)
S		#endif
S		{
S			#if GDISP_HARDWARE_STREAM_POS
S				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
S					gdisp_lld_write_stop(g);
S					g->flags &= ~GDISP_FLG_SCRSTREAM;
S				}
S			#endif
S			g->p.cy = g->p.y1 - g->p.y + 1;
S			g->p.cx = 1;
S			gdisp_lld_write_start(g);
S			#if GDISP_HARDWARE_STREAM_POS
S				#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S					if (gvmt(g)->writepos)
S				#endif
S				gdisp_lld_write_pos(g);
S			#endif
S			do { gdisp_lld_write_color(g); } while(--g->p.cy);
S			gdisp_lld_write_stop(g);
S			return;
S		}
N	#endif
N
N	// Worst is drawing pixels
N	#if GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_DRAWPIXEL
X	#if 0 != -1 && 0 != -1 && -1
N		// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
N		//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
N		//	if (gvmt(g)->pixel)
N		//#endif
N		{
N			for(; g->p.y <= g->p.y1; g->p.y++)
N				gdisp_lld_draw_pixel(g);
N			return;
N		}
N	#endif
N}
N
N// Parameters:	x,y and x1,y1
N// Alters:		x,y x1,y1 cx,cy
Nstatic void line_clip(GDisplay *g) {
N	int16_t dy, dx;
N	int16_t addx, addy;
N	int16_t P, diff, i;
N
N	// Is this a horizontal line (or a point)
N	if (g->p.y == g->p.y1) {
N		hline_clip(g);
N		return;
N	}
N
N	// Is this a vertical line (or a point)
N	if (g->p.x == g->p.x1) {
N		vline_clip(g);
N		return;
N	}
N
N	// Not horizontal or vertical
N
N	// Use Bresenham's line drawing algorithm.
N	//	This should be replaced with fixed point slope based line drawing
N	//	which is more efficient on modern processors as it branches less.
N	//	When clipping is needed, all the clipping could also be done up front
N	//	instead of on each pixel.
N
N	if (g->p.x1 >= g->p.x) {
N		dx = g->p.x1 - g->p.x;
N		addx = 1;
N	} else {
N		dx = g->p.x - g->p.x1;
N		addx = -1;
N	}
N	if (g->p.y1 >= g->p.y) {
N		dy = g->p.y1 - g->p.y;
N		addy = 1;
N	} else {
N		dy = g->p.y - g->p.y1;
N		addy = -1;
N	}
N
N	if (dx >= dy) {
N		dy <<= 1;
N		P = dy - dx;
N		diff = P - dx;
N
N		for(i=0; i<=dx; ++i) {
N			drawpixel_clip(g);
N			if (P < 0) {
N				P  += dy;
N				g->p.x += addx;
N			} else {
N				P  += diff;
N				g->p.x += addx;
N				g->p.y += addy;
N			}
N		}
N	} else {
N		dx <<= 1;
N		P = dx - dy;
N		diff = P - dy;
N
N		for(i=0; i<=dy; ++i) {
N			drawpixel_clip(g);
N			if (P < 0) {
N				P  += dx;
N				g->p.y += addy;
N			} else {
N				P  += diff;
N				g->p.x += addx;
N				g->p.y += addy;
N			}
N		}
N	}
N}
N
N#if GDISP_STARTUP_LOGO_TIMEOUT > 0
X#if 1000 > 0
N	static bool_t	gdispInitDone;
N	static void StartupLogoDisplay(GDisplay *g) {
N		coord_t			x, y, w;
N		const coord_t *	p;
N		static const coord_t blks[] = {
N				// u
N				2, 6, 1, 10,
N				3, 11, 4, 1,
N				6, 6, 1, 6,
N				// G
N				8, 0, 1, 12,
N				9, 0, 6, 1,
N				9, 11, 6, 1,
N				14, 6, 1, 5,
N				12, 6, 2, 1,
N				// F
N				16, 0, 1, 12,
N				17, 0, 6, 1,
N				17, 6, 3, 1,
N				// X
N				22, 6, 7, 1,
N				24, 0, 1, 6,
N				22, 7, 1, 5,
N				28, 0, 1, 6,
N				26, 7, 1, 5,
N		};
N
N		// Get a starting position and a scale
N		// Work on a 8x16 grid for each char, 4 chars (uGFX) in 1 line, using half the screen
N		w = g->g.Width/(8*4*2);
N		if (!w) w = 1;
N		x = (g->g.Width - (8*4)*w)/2;
N		y = (g->g.Height - (16*1)*w)/2;
N
N		// Simple but crude!
N		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
N			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, GDISP_STARTUP_LOGO_COLOR);
X			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, ((uint8_t)((((0xFFFFFF) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>8) & 0x0F)))-1))<<16)) >> (24-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) | (((0xFFFFFF) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>4) & 0x0F)))-1))<<8)) >> (16-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) | (((0xFFFFFF) & (0xFFL & ~((1<<(8-(((0x2000|0x0111)>>0) & 0x0F)))-1))) >> (8-((((0x2000|0x0111)>>0) & 0x0F)+0))))));
N	}
N#endif
N
N#if GDISP_NEED_TIMERFLUSH
X#if 0
S	static void FlushTimerFn(void *param) {
S		GDisplay *	g;
S		(void)		param;
S
S		for(g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, 0); g; g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, (GDriver *)g))
S			gdispGFlush(g);
S	}
N#endif
N
N/*===========================================================================*/
N/* Driver exported functions.                                                */
N/*===========================================================================*/
N
Nvoid _gdispInit(void)
N{
N	// GDISP_DRIVER_LIST is defined - create each driver instance
N	#if defined(GDISP_DRIVER_LIST)
X	#if 0L
S		{
S			unsigned	i;
S			typedef const GDISPVMT const GDISPVMTLIST[1];
S
S			extern GDISPVMTLIST						  GDISP_DRIVER_LIST;
S			static const GDISPVMT * const dclist[] = {GDISP_DRIVER_LIST};
S
S			for(i = 0; i < sizeof(dclist)/sizeof(dclist[0]); i++) {
S				if (!(dclist[i]->d.flags & GDISP_VFLG_DYNAMICONLY))
S					gdriverRegister(&dclist[i]->d, 0);
S			}
S		}
S	#elif GDISP_TOTAL_DISPLAYS > 1
X	#elif 1 > 1
S		{
S			unsigned	i;
S			extern const GDISPVMT const		GDISPVMT_OnlyOne[1];
S
S			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY)) {
S				for(i = 0; i < GDISP_TOTAL_DISPLAYS; i++)
S					gdriverRegister(&GDISPVMT_OnlyOne->d, 0);
S			}
S		}
N	#else
N		{
N			extern const GDISPVMT const		GDISPVMT_OnlyOne[1];
N
N			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
X			if (!(GDISPVMT_OnlyOne->d.flags & 0x0001))
N				gdriverRegister(&GDISPVMT_OnlyOne->d, 0);
N		}
N	#endif
N
N	// Re-clear the display after the timeout if we added the logo
N	#if GDISP_STARTUP_LOGO_TIMEOUT > 0
X	#if 1000 > 0
N		{
N			GDisplay	*g;
N
N			gfxSleepMilliseconds(GDISP_STARTUP_LOGO_TIMEOUT);
X			gfxSleepMilliseconds(1000);
N
N			for(g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, 0); g; g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, (GDriver *)g)) {
X			for(g = (GDisplay *)gdriverGetNext('g', 0); g; g = (GDisplay *)gdriverGetNext('g', (GDriver *)g)) {
N				gdispGClear(g, GDISP_STARTUP_COLOR);
X				gdispGClear(g, ((uint8_t)((((0x000000) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>8) & 0x0F)))-1))<<16)) >> (24-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) | (((0x000000) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>4) & 0x0F)))-1))<<8)) >> (16-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) | (((0x000000) & (0xFFL & ~((1<<(8-(((0x2000|0x0111)>>0) & 0x0F)))-1))) >> (8-((((0x2000|0x0111)>>0) & 0x0F)+0))))));
N				#if GDISP_HARDWARE_FLUSH
X				#if -1
N					gdispGFlush(g);
N				#endif
N			}
N
N			gdispInitDone = TRUE;
X			gdispInitDone = -1;
N		}
N	#endif
N
N	// Start the automatic timer flush (if required)
N	#if GDISP_NEED_TIMERFLUSH
X	#if 0
S		gtimerInit(&FlushTimer);
S		gtimerStart(&FlushTimer, FlushTimerFn, 0, TRUE, GDISP_NEED_TIMERFLUSH);
N	#endif
N}
N
Nvoid _gdispDeinit(void)
N{
N	/* ToDo */
N}
N
Nbool_t _gdispInitDriver(GDriver *g, void *param, unsigned driverinstance, unsigned systeminstance) {
N	#define		gd		((GDisplay *)g)
N	bool_t		ret;
N
N	// Intialise fields
N	gd->systemdisplay = systeminstance;
X	((GDisplay *)g)->systemdisplay = systeminstance;
N	gd->controllerdisplay = driverinstance;
X	((GDisplay *)g)->controllerdisplay = driverinstance;
N	gd->flags = 0;
X	((GDisplay *)g)->flags = 0;
N	gd->priv = param;
X	((GDisplay *)g)->priv = param;
N	MUTEX_INIT(gd);
X	;
N
N	// Call the driver init
N	MUTEX_ENTER(gd);
X	;
N	ret = gdisp_lld_init(gd);
X	ret = gdisp_lld_init(((GDisplay *)g));
N	MUTEX_EXIT(gd);
X	;
N	return ret;
N
N	#undef gd
N}
N
Nvoid _gdispPostInitDriver(GDriver *g) {
N	#define		gd		((GDisplay *)g)
N
N	// Set orientation, clip
N	#if defined(GDISP_DEFAULT_ORIENTATION) && GDISP_NEED_CONTROL && GDISP_HARDWARE_CONTROL
X	#if 0L && 0 && -1
S		#if GDISP_NEED_PIXMAP
S			// Pixmaps should stay in their created orientation (at least initially)
S			if (!(gvmt(gd)->d.flags & GDISP_VFLG_PIXMAP))
S		#endif
S			gdispGControl(gd, GDISP_CONTROL_ORIENTATION, (void *)GDISP_DEFAULT_ORIENTATION);
N	#endif
N	#if GDISP_NEED_VALIDATION || GDISP_NEED_CLIP
X	#if -1 || -1
N		gdispGSetClip(gd, 0, 0, gd->g.Width, gd->g.Height);
X		gdispGSetClip(((GDisplay *)g), 0, 0, ((GDisplay *)g)->g.Width, ((GDisplay *)g)->g.Height);
N	#endif
N
N	// Clear the Screen
N	gdispGClear(gd, GDISP_STARTUP_COLOR);
X	gdispGClear(((GDisplay *)g), ((uint8_t)((((0x000000) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>8) & 0x0F)))-1))<<16)) >> (24-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) | (((0x000000) & ((0xFFL & ~((1<<(8-(((0x2000|0x0111)>>4) & 0x0F)))-1))<<8)) >> (16-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) | (((0x000000) & (0xFFL & ~((1<<(8-(((0x2000|0x0111)>>0) & 0x0F)))-1))) >> (8-((((0x2000|0x0111)>>0) & 0x0F)+0))))));
N
N	// Display the startup logo if this is a static initialised display
N	#if GDISP_STARTUP_LOGO_TIMEOUT > 0
X	#if 1000 > 0
N		if (!gdispInitDone)
N			StartupLogoDisplay(gd);
X			StartupLogoDisplay(((GDisplay *)g));
N	#endif
N
N	// Flush
N	#if GDISP_HARDWARE_FLUSH
X	#if -1
N		gdispGFlush(gd);
X		gdispGFlush(((GDisplay *)g));
N	#endif
N
N	// If this is the first driver set GDISP
N	if (!GDISP)
N		GDISP = gd;
X		GDISP = ((GDisplay *)g);
N
N	#undef gd
N}
N
Nvoid _gdispDeInitDriver(GDriver *g) {
N	#define		gd		((GDisplay *)g)
N
N	if (GDISP == gd)
X	if (GDISP == ((GDisplay *)g))
N		GDISP = (GDisplay *)gdriverGetInstance(GDRIVER_TYPE_DISPLAY, 0);
X		GDISP = (GDisplay *)gdriverGetInstance('g', 0);
N
N	#if GDISP_HARDWARE_DEINIT
X	#if 0
S		#if GDISP_HARDWARE_DEINIT == HARDWARE_AUTODETECT
S			if (gvmt(gd)->deinit)
S		#endif
S		{
S			MUTEX_ENTER(gd);
S			gdisp_lld_deinit(gd);
S			MUTEX_EXIT(gd);
S		}
N	#endif
N	MUTEX_DEINIT(gd);
X	;
N
N	#undef gd
N}
N
NGDisplay *gdispGetDisplay(unsigned display) {
N	return (GDisplay *)gdriverGetInstance(GDRIVER_TYPE_DISPLAY, display);
X	return (GDisplay *)gdriverGetInstance('g', display);
N}
N
Nvoid gdispSetDisplay(GDisplay *g) {
N	if (g) GDISP = g;
N}
N
Nunsigned gdispGetDisplayCount(void) {
N	return gdriverInstanceCount(GDRIVER_TYPE_DISPLAY);
X	return gdriverInstanceCount('g');
N}
N
Ncoord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
Ncoord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
Npowermode_t gdispGGetPowerMode(GDisplay *g)		{ return g->g.Powermode; }
Norientation_t gdispGGetOrientation(GDisplay *g)	{ return g->g.Orientation; }
Nuint8_t gdispGGetBacklight(GDisplay *g)			{ return g->g.Backlight; }
Nuint8_t gdispGGetContrast(GDisplay *g)			{ return g->g.Contrast; }
N
Nvoid gdispGFlush(GDisplay *g) {
N	#if GDISP_HARDWARE_FLUSH
X	#if -1
N		#if GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
X		#if -1 == 2
S			if (gvmt(g)->flush)
N		#endif
N		{
N			MUTEX_ENTER(g);
X			;
N			gdisp_lld_flush(g);
N			MUTEX_EXIT(g);
X			;
N		}
N	#else
S		(void) g;
N	#endif
N}
N
N#if GDISP_NEED_STREAMING
X#if 0
S	void gdispGStreamStart(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy) {
S		MUTEX_ENTER(g);
S
S		#if NEED_CLIPPING
S			#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S				if (!gvmt(g)->setclip)
S			#endif
S			// Test if the area is valid - if not then exit
S			if (x < g->clipx0 || x+cx > g->clipx1 || y < g->clipy0 || y+cy > g->clipy1) {
S				MUTEX_EXIT(g);
S				return;
S			}
S		#endif
S
S		g->flags |= GDISP_FLG_INSTREAM;
S
S		// Best is hardware streaming
S		#if GDISP_HARDWARE_STREAM_WRITE
S			#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S				if (gvmt(g)->writestart)
S			#endif
S			{
S				g->p.x = x;
S				g->p.y = y;
S				g->p.cx = cx;
S				g->p.cy = cy;
S				gdisp_lld_write_start(g);
S				#if GDISP_HARDWARE_STREAM_POS
S					#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S						if (gvmt(g)->writepos)
S					#endif
S					gdisp_lld_write_pos(g);
S				#endif
S				return;
S			}
S		#endif
S
S		// Worst - save the parameters and use pixel drawing and/or area fills
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_DRAWPIXEL
S			// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
S			//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
S			//	if (gvmt(g)->pixel)
S			//#endif
S			{
S				// Use x,y as the current position, x1,y1 as the save position and x2,y2 as the end position, cx = bufpos
S				g->p.x1 = g->p.x = x;
S				g->p.y1 = g->p.y = y;
S				g->p.x2 = x + cx;
S				g->p.y2 = y + cy;
S				#if (GDISP_LINEBUF_SIZE != 0 && GDISP_HARDWARE_BITFILLS) || GDISP_HARDWARE_FILLS
S					g->p.cx = 0;
S					g->p.cy = 1;
S				#endif
S				return;
S			}
S		#endif
S
S		// Don't release the mutex as gdispStreamEnd() will do that.
S	}
S
S	void gdispGStreamColor(GDisplay *g, color_t color) {
S		#if !GDISP_HARDWARE_STREAM_WRITE && GDISP_LINEBUF_SIZE != 0 && GDISP_HARDWARE_BITFILLS
S			coord_t	 sx1, sy1;
S		#endif
S
S		// Don't touch the mutex as we should already own it
S
S		// Ignore this call if we are not streaming
S		if (!(g->flags & GDISP_FLG_INSTREAM))
S			return;
S
S		// Best is hardware streaming
S		#if GDISP_HARDWARE_STREAM_WRITE
S			#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S				if (gvmt(g)->writestart)
S			#endif
S			{
S				g->p.color = color;
S				gdisp_lld_write_color(g);
S				return;
S			}
S		#endif
S
S		// Next best is to use bitfills with our line buffer
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_LINEBUF_SIZE != 0 && GDISP_HARDWARE_BITFILLS
S			#if GDISP_HARDWARE_BITFILLS == HARDWARE_AUTODETECT
S				if (gvmt(g)->blit)
S			#endif
S			{
S				g->linebuf[g->p.cx++] = color;
S				if (g->p.cx >= GDISP_LINEBUF_SIZE) {
S					sx1 = g->p.x1;
S					sy1 = g->p.y1;
S					g->p.x1 = 0;
S					g->p.y1 = 0;
S					g->p.ptr = (void *)g->linebuf;
S					gdisp_lld_blit_area(g);
S					g->p.x1 = sx1;
S					g->p.y1 = sy1;
S					g->p.x += g->p.cx;
S					g->p.cx = 0;
S				}
S
S				// Just wrap at end-of-line and end-of-buffer
S				if (g->p.x+g->p.cx >= g->p.x2) {
S					if (g->p.cx) {
S						sx1 = g->p.x1;
S						sy1 = g->p.y1;
S						g->p.x1 = 0;
S						g->p.y1 = 0;
S						g->p.ptr = (void *)g->linebuf;
S						gdisp_lld_blit_area(g);
S						g->p.x1 = sx1;
S						g->p.y1 = sy1;
S						g->p.cx = 0;
S					}
S					g->p.x = g->p.x1;
S					if (++g->p.y >= g->p.y2)
S						g->p.y = g->p.y1;
S				}
S			}
S		#endif
S
S		// Only slightly better than drawing pixels is to look for runs and use fillarea
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && (GDISP_LINEBUF_SIZE == 0 || GDISP_HARDWARE_BITFILLS != TRUE) && GDISP_HARDWARE_FILLS
S			// We don't need to test for auto-detect on drawpixel as we know we have it because we don't have streaming.
S			#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S				if (gvmt(g)->fill)
S			#endif
S			{
S				if (!g->p.cx || g->p.color == color) {
S					g->p.cx++;
S					g->p.color = color;
S				} else {
S					if (g->p.cx == 1)
S						gdisp_lld_draw_pixel(g);
S					else
S						gdisp_lld_fill_area(g);
S					g->p.x += g->p.cx;
S					g->p.color = color;
S					g->p.cx = 1;
S				}
S				// Just wrap at end-of-line and end-of-buffer
S				if (g->p.x+g->p.cx >= g->p.x2) {
S					if (g->p.cx) {
S						if (g->p.cx == 1)
S							gdisp_lld_draw_pixel(g);
S						else
S							gdisp_lld_fill_area(g);
S						g->p.cx = 0;
S					}
S					g->p.x = g->p.x1;
S					if (++g->p.y >= g->p.y2)
S						g->p.y = g->p.y1;
S				}
S				return;
S			}
S		#endif
S
S		// Worst is using pixel drawing
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && (GDISP_LINEBUF_SIZE == 0 || GDISP_HARDWARE_BITFILLS != TRUE) && GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_DRAWPIXEL
S			// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
S			//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
S			//	if (gvmt(g)->pixel)
S			//#endif
S			{
S				g->p.color = color;
S				gdisp_lld_draw_pixel(g);
S
S				// Just wrap at end-of-line and end-of-buffer
S				if (++g->p.x >= g->p.x2) {
S					g->p.x = g->p.x1;
S					if (++g->p.y >= g->p.y2)
S						g->p.y = g->p.y1;
S				}
S				return;
S			}
S		#endif
S	}
S
S	void gdispGStreamStop(GDisplay *g) {
S		// Only release the mutex and end the stream if we are actually streaming.
S		if (!(g->flags & GDISP_FLG_INSTREAM))
S			return;
S
S		// Clear the flag
S		g->flags &= ~GDISP_FLG_INSTREAM;
S
S		// The cleanup below must match the streaming code above.
S
S		#if GDISP_HARDWARE_STREAM_WRITE
S			#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S				if (gvmt(g)->writestart)
S			#endif
S			{
S					gdisp_lld_write_stop(g);
S					autoflush_stopdone(g);
S					MUTEX_EXIT(g);
S					return;
S			}
S		#endif
S
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_LINEBUF_SIZE != 0 && GDISP_HARDWARE_BITFILLS
S			#if GDISP_HARDWARE_BITFILLS == HARDWARE_AUTODETECT
S				if (gvmt(g)->blit)
S			#endif
S			{
S				if (g->p.cx) {
S					g->p.x1 = 0;
S					g->p.y1 = 0;
S					g->p.ptr = (void *)g->linebuf;
S					gdisp_lld_blit_area(g);
S				}
S				autoflush_stopdone(g);
S				MUTEX_EXIT(g);
S				return;
S			}
S		#endif
S
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && (GDISP_LINEBUF_SIZE == 0 || GDISP_HARDWARE_BITFILLS != TRUE) && GDISP_HARDWARE_FILLS
S			// We don't need to test for auto-detect on drawpixel as we know we have it because we don't have streaming.
S			#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S				if (gvmt(g)->fill)
S			#endif
S			{
S				if (g->p.cx) {
S					if (g->p.cx == 1)
S						gdisp_lld_draw_pixel(g);
S					else
S						gdisp_lld_fill_area(g);
S				}
S				autoflush_stopdone(g);
S				MUTEX_EXIT(g);
S				return;
S			}
S		#endif
S
S		#if GDISP_HARDWARE_STREAM_WRITE != TRUE && (GDISP_LINEBUF_SIZE == 0 || GDISP_HARDWARE_BITFILLS != TRUE) && GDISP_HARDWARE_FILLS != TRUE
S			{
S				autoflush_stopdone(g);
S				MUTEX_EXIT(g);
S			}
S		#endif
S	}
N#endif
N
Nvoid gdispGDrawPixel(GDisplay *g, coord_t x, coord_t y, color_t color) {
N	MUTEX_ENTER(g);
X	;
N	g->p.x		= x;
N	g->p.y		= y;
N	g->p.color	= color;
N	drawpixel_clip(g);
N	autoflush(g);
X	;
N	MUTEX_EXIT(g);
X	;
N}
N
Nvoid gdispGDrawLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color) {
N	MUTEX_ENTER(g);
X	;
N	g->p.x = x0;
N	g->p.y = y0;
N	g->p.x1 = x1;
N	g->p.y1 = y1;
N	g->p.color = color;
N	line_clip(g);
N	autoflush(g);
X	;
N	MUTEX_EXIT(g);
X	;
N}
N
Nvoid gdispGClear(GDisplay *g, color_t color) {
N	// Note - clear() ignores the clipping area. It clears the screen.
N	MUTEX_ENTER(g);
X	;
N
N	// Best is hardware accelerated clear
N	#if GDISP_HARDWARE_CLEARS
X	#if 0
S		#if GDISP_HARDWARE_CLEARS == HARDWARE_AUTODETECT
S			if (gvmt(g)->clear)
S		#endif
S		{
S			g->p.color = color;
S			gdisp_lld_clear(g);
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Next best is hardware accelerated area fill
N	#if GDISP_HARDWARE_CLEARS != TRUE && GDISP_HARDWARE_FILLS
X	#if 0 != -1 && 0
S		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->fill)
S		#endif
S		{
S			g->p.x = g->p.y = 0;
S			g->p.cx = g->g.Width;
S			g->p.cy = g->g.Height;
S			g->p.color = color;
S			gdisp_lld_fill_area(g);
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Next best is streaming
N	#if GDISP_HARDWARE_CLEARS != TRUE && GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0 != -1 && 0
S		#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S			if (gvmt(g)->writestart)
S		#endif
S		{
S			uint32_t	area;
S
S			g->p.x = g->p.y = 0;
S			g->p.cx = g->g.Width;
S			g->p.cy = g->g.Height;
S			g->p.color = color;
S			area = (uint32_t)g->p.cx * g->p.cy;
S
S			gdisp_lld_write_start(g);
S			#if GDISP_HARDWARE_STREAM_POS
S				#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S					if (gvmt(g)->writepos)
S				#endif
S				gdisp_lld_write_pos(g);
S			#endif
S			for(; area; area--)
S				gdisp_lld_write_color(g);
S			gdisp_lld_write_stop(g);
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Worst is drawing pixels
N	#if GDISP_HARDWARE_CLEARS != TRUE && GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_DRAWPIXEL
X	#if 0 != -1 && 0 != -1 && 0 != -1 && -1
N		// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
N		//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
N		//	if (gvmt(g)->pixel)
N		//#endif
N		{
N			g->p.color = color;
N			for(g->p.y = 0; g->p.y < g->g.Height; g->p.y++)
N				for(g->p.x = 0; g->p.x < g->g.Width; g->p.x++)
N					gdisp_lld_draw_pixel(g);
N			autoflush_stopdone(g);
X			;
N			MUTEX_EXIT(g);
X			;
N			return;
N		}
N	#endif
N}
N
Nvoid gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
N	MUTEX_ENTER(g);
X	;
N	g->p.x = x;
N	g->p.y = y;
N	g->p.cx = cx;
N	g->p.cy = cy;
N	g->p.color = color;
N	TEST_CLIP_AREA(g) {
X	if ((g)->p . x < (g)->clipx0) { (g)->p . cx -= (g)->clipx0 - (g)->p . x; (g)->p . x = (g)->clipx0; } if ((g)->p . y < (g)->clipy0) { (g)->p . cy -= (g)->clipy0 - (g)->p . y; (g)->p . y = (g)->clipy0; } if ((g)->p . x + (g)->p . cx > (g)->clipx1) (g)->p . cx = (g)->clipx1 - (g)->p . x; if ((g)->p . y + (g)->p . cy > (g)->clipy1) (g)->p . cy = (g)->clipy1 - (g)->p . y; if ((g)->p . cx > 0 && (g)->p . cy > 0) {
N		fillarea(g);
N	}
N	autoflush_stopdone(g);
X	;
N	MUTEX_EXIT(g);
X	;
N}
N
Nvoid gdispGBlitArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer) {
N	MUTEX_ENTER(g);
X	;
N
N	#if NEED_CLIPPING
X	#if (0 != -1 && (-1 || -1))
N		#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
X		#if 0 == 2
S			if (!gvmt(g)->setclip)
N		#endif
N		{
N			// This is a different clipping to fillarea(g) as it needs to take into account srcx,srcy
N			if (x < g->clipx0) { cx -= g->clipx0 - x; srcx += g->clipx0 - x; x = g->clipx0; }
N			if (y < g->clipy0) { cy -= g->clipy0 - y; srcy += g->clipy0 - x; y = g->clipy0; }
N			if (x+cx > g->clipx1)	cx = g->clipx1 - x;
N			if (y+cy > g->clipy1)	cy = g->clipy1 - y;
N			if (srcx+cx > srccx) cx = srccx - srcx;
N			if (cx <= 0 || cy <= 0) { MUTEX_EXIT(g); return; }
X			if (cx <= 0 || cy <= 0) { ; return; }
N		}
N	#endif
N
N	// Best is hardware bitfills
N	#if GDISP_HARDWARE_BITFILLS
X	#if 0
S		#if GDISP_HARDWARE_BITFILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->blit)
S		#endif
S		{
S			g->p.x = x;
S			g->p.y = y;
S			g->p.cx = cx;
S			g->p.cy = cy;
S			g->p.x1 = srcx;
S			g->p.y1 = srcy;
S			g->p.x2 = srccx;
S			g->p.ptr = (void *)buffer;
S			gdisp_lld_blit_area(g);
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Next best is hardware streaming
N	#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE
X	#if 0 != -1 && 0
S		#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S			if (gvmt(g)->writestart)
S		#endif
S		{
S			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
S			buffer += srcy*srccx+srcx;
S			srcx = x + cx;
S			srcy = y + cy;
S			srccx -= cx;
S
S			g->p.x = x;
S			g->p.y = y;
S			g->p.cx = cx;
S			g->p.cy = cy;
S			gdisp_lld_write_start(g);
S			#if GDISP_HARDWARE_STREAM_POS
S				#if GDISP_HARDWARE_STREAM_POS == HARDWARE_AUTODETECT
S					if (gvmt(g)->writepos)
S				#endif
S				gdisp_lld_write_pos(g);
S			#endif
S			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
S				for(g->p.x = x; g->p.x < srcx; g->p.x++) {
S					g->p.color = *buffer++;
S					gdisp_lld_write_color(g);
S				}
S			}
S			gdisp_lld_write_stop(g);
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Only slightly better than drawing pixels is to look for runs and use fill area
N	#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_FILLS
X	#if 0 != -1 && 0 != -1 && 0
S		// We don't need to test for auto-detect on drawpixel as we know we have it because we don't have streaming.
S		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S			if (gvmt(g)->fill)
S		#endif
S		{
S			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
S			buffer += srcy*srccx+srcx;
S			srcx = x + cx;
S			srcy = y + cy;
S			srccx -= cx;
S
S			g->p.cy = 1;
S			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
S				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
S					g->p.cx=1;
S					g->p.color = *buffer++;
S					while(g->p.x+g->p.cx < srcx && *buffer == g->p.color) {
S						g->p.cx++;
S						buffer++;
S					}
S					if (g->p.cx == 1) {
S						gdisp_lld_draw_pixel(g);
S					} else {
S						gdisp_lld_fill_area(g);
S					}
S				}
S			}
S			autoflush_stopdone(g);
S			MUTEX_EXIT(g);
S			return;
S		}
N	#endif
N
N	// Worst is drawing pixels
N	#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_DRAWPIXEL
X	#if 0 != -1 && 0 != -1 && 0 != -1 && -1
N		// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
N		//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
N		//	if (gvmt(g)->pixel)
N		//#endif
N		{
N			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
N			buffer += srcy*srccx+srcx;
N			srcx = x + cx;
N			srcy = y + cy;
N			srccx -= cx;
N
N			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
N				for(g->p.x=x; g->p.x < srcx; g->p.x++) {
N					g->p.color = *buffer++;
N					gdisp_lld_draw_pixel(g);
N				}
N			}
N			autoflush_stopdone(g);
X			;
N			MUTEX_EXIT(g);
X			;
N			return;
N		}
N	#endif
N}
N
N#if GDISP_NEED_CLIP || GDISP_NEED_VALIDATION
X#if -1 || -1
N	void gdispGSetClip(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy) {
N		MUTEX_ENTER(g);
X		;
N
N		// Best is using hardware clipping
N		#if GDISP_HARDWARE_CLIP
X		#if 0
S			#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S				if (gvmt(g)->setclip)
S			#endif
S			{
S				g->p.x = x;
S				g->p.y = y;
S				g->p.cx = cx;
S				g->p.cy = cy;
S				gdisp_lld_set_clip(g);
S			}
S			#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S				else
S			#endif
N		#endif
N
N		// Worst is using software clipping
N		#if GDISP_HARDWARE_CLIP != TRUE
X		#if 0 != -1
N			{
N				if (x < 0) { cx += x; x = 0; }
N				if (y < 0) { cy += y; y = 0; }
N				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
N				g->clipx0 = x;
N				g->clipy0 = y;
N				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
N				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
N			}
N		#endif
N		MUTEX_EXIT(g);
X		;
N	}
N#endif
N
N#if GDISP_NEED_CIRCLE
X#if 0
S	void gdispGDrawCircle(GDisplay *g, coord_t x, coord_t y, coord_t radius, color_t color) {
S		coord_t a, b, P;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		a = 1;
S		b = radius;
S		P = 4 - radius;
S		g->p.color = color;
S
S		// Away we go using Bresenham's circle algorithm
S		// Optimized to prevent double drawing
S		g->p.x = x; g->p.y = y + b; drawpixel_clip(g);
S		g->p.x = x; g->p.y = y - b; drawpixel_clip(g);
S		g->p.x = x + b; g->p.y = y; drawpixel_clip(g);
S		g->p.x = x - b; g->p.y = y; drawpixel_clip(g);
S		do {
S			g->p.x = x + a; g->p.y = y + b; drawpixel_clip(g);
S			g->p.x = x + a; g->p.y = y - b; drawpixel_clip(g);
S			g->p.x = x + b; g->p.y = y + a; drawpixel_clip(g);
S			g->p.x = x - b; g->p.y = y + a; drawpixel_clip(g);
S			g->p.x = x - a; g->p.y = y + b; drawpixel_clip(g);
S			g->p.x = x - a; g->p.y = y - b; drawpixel_clip(g);
S			g->p.x = x + b; g->p.y = y - a; drawpixel_clip(g);
S			g->p.x = x - b; g->p.y = y - a; drawpixel_clip(g);
S			if (P < 0)
S				P += 3 + 2*a++;
S			else
S				P += 5 + 2*(a++ - b--);
S		} while(a < b);
S		g->p.x = x + a; g->p.y = y + b; drawpixel_clip(g);
S		g->p.x = x + a; g->p.y = y - b; drawpixel_clip(g);
S		g->p.x = x - a; g->p.y = y + b; drawpixel_clip(g);
S		g->p.x = x - a; g->p.y = y - b; drawpixel_clip(g);
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_CIRCLE
X#if 0
S	void gdispGFillCircle(GDisplay *g, coord_t x, coord_t y, coord_t radius, color_t color) {
S		coord_t a, b, P;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		a = 1;
S		b = radius;
S		P = 4 - radius;
S		g->p.color = color;
S
S		// Away we go using Bresenham's circle algorithm
S		// This is optimized to prevent overdrawing by drawing a line only when a variable is about to change value
S		g->p.y = y; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);
S		g->p.y = y+b; g->p.x = x; drawpixel_clip(g);
S		g->p.y = y-b; g->p.x = x; drawpixel_clip(g);
S		do {
S			g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);
S			g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);
S			if (P < 0) {
S				P += 3 + 2*a++;
S			} else {
S				g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);
S				g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);
S				P += 5 + 2*(a++ - b--);
S			}
S		} while(a < b);
S		g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);
S		g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ELLIPSE
X#if 0
S	void gdispGDrawEllipse(GDisplay *g, coord_t x, coord_t y, coord_t a, coord_t b, color_t color) {
S		coord_t	dx, dy;
S		int32_t	a2, b2;
S		int32_t	err, e2;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		dx = 0;
S		dy = b;
S		a2 = a*a;
S		b2 = b*b;
S		err = b2-(2*b-1)*a2;
S		g->p.color = color;
S
S		// Away we go using Bresenham's ellipse algorithm
S		do {
S			g->p.x = x + dx; g->p.y = y + dy; drawpixel_clip(g);
S			g->p.x = x - dx; g->p.y = y + dy; drawpixel_clip(g);
S			g->p.x = x - dx; g->p.y = y - dy; drawpixel_clip(g);
S			g->p.x = x + dx; g->p.y = y - dy; drawpixel_clip(g);
S
S			e2 = 2*err;
S			if(e2 <  (2*dx+1)*b2) {
S				dx++;
S				err += (2*dx+1)*b2;
S			}
S			if(e2 > -(2*dy-1)*a2) {
S				dy--;
S				err -= (2*dy-1)*a2;
S			}
S		} while(dy >= 0);
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ELLIPSE
X#if 0
S	void gdispGFillEllipse(GDisplay *g, coord_t x, coord_t y, coord_t a, coord_t b, color_t color) {
S		coord_t	dx, dy;
S		int32_t	a2, b2;
S		int32_t	err, e2;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		dx = 0;
S		dy = b;
S		a2 = a*a;
S		b2 = b*b;
S		err = b2-(2*b-1)*a2;
S		g->p.color = color;
S
S		// Away we go using Bresenham's ellipse algorithm
S		// This is optimized to prevent overdrawing by drawing a line only when a y is about to change value
S		do {
S			e2 = 2*err;
S			if(e2 <  (2*dx+1)*b2) {
S				dx++;
S				err += (2*dx+1)*b2;
S			}
S			if(e2 > -(2*dy-1)*a2) {
S				g->p.y = y + dy; g->p.x = x - dx; g->p.x1 = x + dx; hline_clip(g);
S				if (y) { g->p.y = y - dy; g->p.x = x - dx; g->p.x1 = x + dx; hline_clip(g); }
S				dy--;
S				err -= (2*dy-1)*a2;
S			}
S		} while(dy >= 0);
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ARCSECTORS
X#if 0
S	void gdispGDrawArcSectors(GDisplay *g, coord_t x, coord_t y, coord_t radius, uint8_t sectors, color_t color) {
S		coord_t a, b, P;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		a = 1;              // x in many explanations
S		b = radius;         // y in many explanations
S		P = 4 - radius;
S		g->p.color = color;
S
S		// Away we go using Bresenham's circle algorithm
S		// Optimized to prevent double drawing
S		if (sectors & 0x06) { g->p.x = x; g->p.y = y - b; drawpixel_clip(g); }				// Upper upper
S		if (sectors & 0x60) { g->p.x = x; g->p.y = y + b; drawpixel_clip(g); }				// Lower lower
S		if (sectors & 0x81) { g->p.x = x + b; g->p.y = y; drawpixel_clip(g); }				// Right right
S		if (sectors & 0x18) { g->p.x = x - b; g->p.y = y; drawpixel_clip(g); }				// Left left
S
S		do {
S			if (sectors & 0x01) { g->p.x = x + b; g->p.y = y - a; drawpixel_clip(g); }		// Upper right right
S			if (sectors & 0x02) { g->p.x = x + a; g->p.y = y - b; drawpixel_clip(g); }		// Upper upper right
S			if (sectors & 0x04) { g->p.x = x - a; g->p.y = y - b; drawpixel_clip(g); }		// Upper upper left
S			if (sectors & 0x08) { g->p.x = x - b; g->p.y = y - a; drawpixel_clip(g); }		// Upper left  left
S			if (sectors & 0x10) { g->p.x = x - b; g->p.y = y + a; drawpixel_clip(g); }		// Lower left  left
S			if (sectors & 0x20) { g->p.x = x - a; g->p.y = y + b; drawpixel_clip(g); }		// Lower lower left
S			if (sectors & 0x40) { g->p.x = x + a; g->p.y = y + b; drawpixel_clip(g); }		// Lower lower right
S			if (sectors & 0x80) { g->p.x = x + b; g->p.y = y + a; drawpixel_clip(g); }		// Lower right right
S			if (P < 0)
S				P += 3 + 2*a++;
S			else
S				P += 5 + 2*(a++ - b--);
S		} while(a < b);
S
S		if (sectors & 0xC0) { g->p.x = x + a; g->p.y = y + b; drawpixel_clip(g); }			// Lower right
S		if (sectors & 0x03) { g->p.x = x + a; g->p.y = y - b; drawpixel_clip(g); }			// Upper right
S		if (sectors & 0x30) { g->p.x = x - a; g->p.y = y + b; drawpixel_clip(g); }			// Lower left
S		if (sectors & 0x0C) { g->p.x = x - a; g->p.y = y - b; drawpixel_clip(g); }			// Upper left
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ARCSECTORS
X#if 0
S	void gdispGFillArcSectors(GDisplay *g, coord_t x, coord_t y, coord_t radius, uint8_t sectors, color_t color) {
S		coord_t a, b, P;
S
S		MUTEX_ENTER(g);
S
S		// Calculate intermediates
S		a = 1;              // x in many explanations
S		b = radius;         // y in many explanations
S		P = 4 - radius;
S		g->p.color = color;
S
S		// Away we go using Bresenham's circle algorithm
S		// Optimized to prevent double drawing
S		if (sectors & 0x06) { g->p.x = x; g->p.y = y - b; drawpixel_clip(g); }					// Upper upper
S		if (sectors & 0x60) { g->p.x = x; g->p.y = y + b; drawpixel_clip(g); }					// Lower lower
S		if (sectors & 0x81) {																	// Center right
S			g->p.y = y; g->p.x = x; g->p.x1 = x + b;
S			if (sectors & 0x18) g->p.x -= b;													// Left right
S			hline_clip(g);
S		} else if (sectors & 0x18) {															// Left center
S			g->p.x = x - b; g->p.x1 = x; g->p.y = y;
S			hline_clip(g);
S		}
S
S		do {
S			// Top half
S			switch(sectors & 0x0F) {
S			case 0x01:
S				g->p.y = y - a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x02:
S				g->p.y = y - b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x03:
S				g->p.y = y - b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x04:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				break;
S			case 0x05:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x06:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x07:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x08:
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				break;
S			case 0x09:
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0A:
S				g->p.y = y - b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x0B:
S				g->p.y = y - b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0C:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x; hline_clip(g);
S				break;
S			case 0x0D:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x; hline_clip(g);
S				g->p.y = y - a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0E:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x0F:
S				g->p.y = y - b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y - a; g->p.x = x - b; g->p.x1 = x + b; hline_clip(g);
S				break;
S			}
S
S			// Bottom half
S			switch((sectors & 0xF0)>>4) {
S			case 0x01:
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				break;
S			case 0x02:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				break;
S			case 0x03:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x; hline_clip(g);
S				break;
S			case 0x04:
S				g->p.y = y + b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x05:
S				g->p.y = y + b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x06:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x07:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x + a; hline_clip(g);
S				break;
S			case 0x08:
S				g->p.y = y + a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x09:
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0A:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0B:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x; hline_clip(g);
S				g->p.y = y + a; g->p.x = x + a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0C:
S				g->p.y = y + b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0D:
S				g->p.y = y + b; g->p.x = x; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x - a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0E:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - a; g->p.x1 = x + b; hline_clip(g);
S				break;
S			case 0x0F:
S				g->p.y = y + b; g->p.x = x - a; g->p.x1 = x + a; hline_clip(g);
S				g->p.y = y + a; g->p.x = x - b; g->p.x1 = x + b; hline_clip(g);
S				break;
S			}
S
S			if (P < 0)
S				P += 3 + 2*a++;
S			else
S				P += 5 + 2*(a++ - b--);
S		} while(a < b);
S
S		// Top half
S		if (sectors & 0x02)			{ g->p.y = y - a; g->p.x = x; g->p.x1 = x + a; hline_clip(g); }
S		else if (sectors & 0x01)	{ g->p.y = y - a; g->p.x = x + a; drawpixel_clip(g); }
S		if (sectors & 0x04)			{ g->p.y = y - a; g->p.x = x - a; g->p.x1 = x; hline_clip(g); }
S		else if (sectors & 0x08)	{ g->p.y = y - a; g->p.x = x - a; drawpixel_clip(g); }
S
S		// Bottom half
S		if (sectors & 0x40)			{ g->p.y = y + a; g->p.x = x; g->p.x1 = x + a; hline_clip(g); }
S		else if (sectors & 0x80)	{ g->p.y = y + a; g->p.x = x + a; drawpixel_clip(g); }
S		if (sectors & 0x20)			{ g->p.y = y + a; g->p.x = x - a; g->p.x1 = x; hline_clip(g); }
S		else if (sectors & 0x10)	{ g->p.y = y + a; g->p.x = x - a; drawpixel_clip(g); }
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ARC
X#if 0
S	#if (!GMISC_NEED_FIXEDTRIG && !GMISC_NEED_FASTTRIG) || !GFX_USE_GMISC
S		#include <math.h>
S	#endif
S
S	void gdispGDrawArc(GDisplay *g, coord_t x, coord_t y, coord_t radius, coord_t start, coord_t end, color_t color) {
S		coord_t a, b, P, sedge, eedge;
S		uint8_t	full, sbit, ebit, tbit;
S
S		// Normalize the angles
S		if (start < 0)
S			start -= (start/360-1)*360;
S		else if (start >= 360)
S			start %= 360;
S		if (end < 0)
S			end -= (end/360-1)*360;
S		else if (end >= 360)
S			end %= 360;
S
S		sbit = 1<<(start/45);
S		ebit = 1<<(end/45);
S		full = 0;
S		if (start == end) {
S			full = 0xFF;
S		} else if (end < start) {
S			for(tbit=sbit<<1; tbit; tbit<<=1) full |= tbit;
S			for(tbit=ebit>>1; tbit; tbit>>=1) full |= tbit;
S		} else if (sbit < 0x80) {
S			for(tbit=sbit<<1; tbit < ebit; tbit<<=1) full |= tbit;
S		}
S		tbit = start%45 == 0 ? sbit : 0;
S
S		MUTEX_ENTER(g);
S		g->p.color = color;
S
S		if (full) {
S			// Draw full sectors
S			// Optimized to prevent double drawing
S			a = 1;
S			b = radius;
S			P = 4 - radius;
S			if (full & 0x60) { g->p.y = y+b; g->p.x = x; drawpixel_clip(g); }
S			if (full & 0x06) { g->p.y = y-b; g->p.x = x; drawpixel_clip(g); }
S			if (full & 0x81) { g->p.y = y; g->p.x = x+b; drawpixel_clip(g); }
S			if (full & 0x18) { g->p.y = y; g->p.x = x-b; drawpixel_clip(g); }
S			do {
S				if (full & 0x01) { g->p.x = x+b; g->p.y = y-a; drawpixel_clip(g); }
S				if (full & 0x02) { g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S				if (full & 0x04) { g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S				if (full & 0x08) { g->p.x = x-b; g->p.y = y-a; drawpixel_clip(g); }
S				if (full & 0x10) { g->p.x = x-b; g->p.y = y+a; drawpixel_clip(g); }
S				if (full & 0x20) { g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S				if (full & 0x40) { g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S				if (full & 0x80) { g->p.x = x+b; g->p.y = y+a; drawpixel_clip(g); }
S				if (P < 0)
S					P += 3 + 2*a++;
S				else
S					P += 5 + 2*(a++ - b--);
S			} while(a < b);
S			if (full & 0xC0) { g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S			if (full & 0x0C) { g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S			if (full & 0x03) { g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S			if (full & 0x30) { g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S			if (full == 0xFF) {
S				autoflush(g);
S				MUTEX_EXIT(g);
S				return;
S			}
S		}
S
S		#if GFX_USE_GMISC && GMISC_NEED_FIXEDTRIG
S			sedge = NONFIXED(radius * ((sbit & 0x99) ? ffsin(start) : ffcos(start)) + FIXED0_5);
S			eedge = NONFIXED(radius * ((ebit & 0x99) ? ffsin(end) : ffcos(end)) + FIXED0_5);
S		#elif GFX_USE_GMISC && GMISC_NEED_FASTTRIG
S			sedge = round(radius * ((sbit & 0x99) ? fsin(start) : fcos(start)));
S			eedge = round(radius * ((ebit & 0x99) ? fsin(end) : fcos(end)));
S		#else
S			sedge = round(radius * ((sbit & 0x99) ? sin(start*GFX_PI/180) : cos(start*GFX_PI/180)));
S			eedge = round(radius * ((ebit & 0x99) ? sin(end*GFX_PI/180) : cos(end*GFX_PI/180)));
S		#endif
S		if (sbit & 0xB4) sedge = -sedge;
S		if (ebit & 0xB4) eedge = -eedge;
S
S		if (sbit != ebit) {
S			// Draw start and end sectors
S			// Optimized to prevent double drawing
S			a = 1;
S			b = radius;
S			P = 4 - radius;
S			if ((sbit & 0x20) || (tbit & 0x40) || (ebit & 0x40)) { g->p.x = x; g->p.y = y+b; drawpixel_clip(g); }
S			if ((sbit & 0x02) || (tbit & 0x04) || (ebit & 0x04)) { g->p.x = x; g->p.y = y-b; drawpixel_clip(g); }
S			if ((sbit & 0x80) || (tbit & 0x01) || (ebit & 0x01)) { g->p.x = x+b; g->p.y = y; drawpixel_clip(g); }
S			if ((sbit & 0x08) || (tbit & 0x10) || (ebit & 0x10)) { g->p.x = x-b; g->p.y = y; drawpixel_clip(g); }
S			do {
S				if (((sbit & 0x01) && a >= sedge) || ((ebit & 0x01) && a <= eedge)) { g->p.x = x+b; g->p.y = y-a; drawpixel_clip(g); }
S				if (((sbit & 0x02) && a <= sedge) || ((ebit & 0x02) && a >= eedge)) { g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S				if (((sbit & 0x04) && a >= sedge) || ((ebit & 0x04) && a <= eedge)) { g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S				if (((sbit & 0x08) && a <= sedge) || ((ebit & 0x08) && a >= eedge)) { g->p.x = x-b; g->p.y = y-a; drawpixel_clip(g); }
S				if (((sbit & 0x10) && a >= sedge) || ((ebit & 0x10) && a <= eedge)) { g->p.x = x-b; g->p.y = y+a; drawpixel_clip(g); }
S				if (((sbit & 0x20) && a <= sedge) || ((ebit & 0x20) && a >= eedge)) { g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S				if (((sbit & 0x40) && a >= sedge) || ((ebit & 0x40) && a <= eedge)) { g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S				if (((sbit & 0x80) && a <= sedge) || ((ebit & 0x80) && a >= eedge)) { g->p.x = x+b; g->p.y = y+a; drawpixel_clip(g); }
S				if (P < 0)
S					P += 3 + 2*a++;
S				else
S					P += 5 + 2*(a++ - b--);
S			} while(a < b);
S			if (((sbit & 0x40) && a >= sedge) || ((ebit & 0x40) && a <= eedge) || ((sbit & 0x80) && a <= sedge) || ((ebit & 0x80) && a >= eedge))
S				{ g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S			if (((sbit & 0x04) && a >= sedge) || ((ebit & 0x04) && a <= eedge) || ((sbit & 0x08) && a <= sedge) || ((ebit & 0x08) && a >= eedge))
S				{ g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x01) && a >= sedge) || ((ebit & 0x01) && a <= eedge) || ((sbit & 0x02) && a <= sedge) || ((ebit & 0x02) && a >= eedge))
S				{ g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x10) && a >= sedge) || ((ebit & 0x10) && a <= eedge) || ((sbit & 0x20) && a <= sedge) || ((ebit & 0x20) && a >= eedge))
S				{ g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S		} else if (end < start) {
S			// Draw start/end sector where it is a non-internal angle
S			// Optimized to prevent double drawing
S			a = 1;
S			b = radius;
S			P = 4 - radius;
S			if ((sbit & 0x60) || (tbit & 0xC0)) { g->p.x = x; g->p.y = y+b; drawpixel_clip(g); }
S			if ((sbit & 0x06) || (tbit & 0x0C)) { g->p.x = x; g->p.y = y-b; drawpixel_clip(g); }
S			if ((sbit & 0x81) || (tbit & 0x03)) { g->p.x = x+b; g->p.y = y; drawpixel_clip(g); }
S			if ((sbit & 0x18) || (tbit & 0x30)) { g->p.x = x-b; g->p.y = y; drawpixel_clip(g); }
S			do {
S				if ((sbit & 0x01) && (a >= sedge || a <= eedge)) { g->p.x = x+b; g->p.y = y-a; drawpixel_clip(g); }
S				if ((sbit & 0x02) && (a <= sedge || a >= eedge)) { g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S				if ((sbit & 0x04) && (a >= sedge || a <= eedge)) { g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S				if ((sbit & 0x08) && (a <= sedge || a >= eedge)) { g->p.x = x-b; g->p.y = y-a; drawpixel_clip(g); }
S				if ((sbit & 0x10) && (a >= sedge || a <= eedge)) { g->p.x = x-b; g->p.y = y+a; drawpixel_clip(g); }
S				if ((sbit & 0x20) && (a <= sedge || a >= eedge)) { g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S				if ((sbit & 0x40) && (a >= sedge || a <= eedge)) { g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S				if ((sbit & 0x80) && (a <= sedge || a >= eedge)) { g->p.x = x+b; g->p.y = y+a; drawpixel_clip(g); }
S				if (P < 0)
S					P += 3 + 2*a++;
S				else
S					P += 5 + 2*(a++ - b--);
S			} while(a < b);
S			if (((sbit & 0x04) && (a >= sedge || a <= eedge)) || ((sbit & 0x08) && (a <= sedge || a >= eedge)))
S				{ g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x40) && (a >= sedge || a <= eedge)) || ((sbit & 0x80) && (a <= sedge || a >= eedge)))
S				{ g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S			if (((sbit & 0x01) && (a >= sedge || a <= eedge)) || ((sbit & 0x02) && (a <= sedge || a >= eedge)))
S				{ g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x10) && (a >= sedge || a <= eedge)) || ((sbit & 0x20) && (a <= sedge || a >= eedge)))
S				{ g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S		} else {
S			// Draw start/end sector where it is a internal angle
S			// Optimized to prevent double drawing
S			a = 1;
S			b = radius;
S			P = 4 - radius;
S			if (((sbit & 0x20) && !eedge) || ((sbit & 0x40) && !sedge)) { g->p.x = x; g->p.y = y+b; drawpixel_clip(g); }
S			if (((sbit & 0x02) && !eedge) || ((sbit & 0x04) && !sedge)) { g->p.x = x; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x80) && !eedge) || ((sbit & 0x01) && !sedge)) { g->p.x = x+b; g->p.y = y; drawpixel_clip(g); }
S			if (((sbit & 0x08) && !eedge) || ((sbit & 0x10) && !sedge)) { g->p.x = x-b; g->p.y = y; drawpixel_clip(g); }
S			do {
S				if (((sbit & 0x01) && a >= sedge && a <= eedge)) { g->p.x = x+b; g->p.y = y-a; drawpixel_clip(g); }
S				if (((sbit & 0x02) && a <= sedge && a >= eedge)) { g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S				if (((sbit & 0x04) && a >= sedge && a <= eedge)) { g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S				if (((sbit & 0x08) && a <= sedge && a >= eedge)) { g->p.x = x-b; g->p.y = y-a; drawpixel_clip(g); }
S				if (((sbit & 0x10) && a >= sedge && a <= eedge)) { g->p.x = x-b; g->p.y = y+a; drawpixel_clip(g); }
S				if (((sbit & 0x20) && a <= sedge && a >= eedge)) { g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S				if (((sbit & 0x40) && a >= sedge && a <= eedge)) { g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S				if (((sbit & 0x80) && a <= sedge && a >= eedge)) { g->p.x = x+b; g->p.y = y+a; drawpixel_clip(g); }
S				if (P < 0)
S					P += 3 + 2*a++;
S				else
S					P += 5 + 2*(a++ - b--);
S			} while(a < b);
S			if (((sbit & 0x04) && a >= sedge && a <= eedge) || ((sbit & 0x08) && a <= sedge && a >= eedge))
S				{ g->p.x = x-a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x40) && a >= sedge && a <= eedge) || ((sbit & 0x80) && a <= sedge && a >= eedge))
S				{ g->p.x = x+a; g->p.y = y+b; drawpixel_clip(g); }
S			if (((sbit & 0x01) && a >= sedge && a <= eedge) || ((sbit & 0x02) && a <= sedge && a >= eedge))
S				{ g->p.x = x+a; g->p.y = y-b; drawpixel_clip(g); }
S			if (((sbit & 0x10) && a >= sedge && a <= eedge) || ((sbit & 0x20) && a <= sedge && a >= eedge))
S				{ g->p.x = x-a; g->p.y = y+b; drawpixel_clip(g); }
S		}
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ARC
X#if 0
S	void gdispGFillArc(GDisplay *g, coord_t x, coord_t y, coord_t radius, coord_t start, coord_t end, color_t color) {
S		coord_t a, b, P;
S		coord_t	sy, ey;
S		fixed	sxa, sxb, sxd, exa, exb, exd;
S		uint8_t	qtr;
S
S		MUTEX_ENTER(g);
S
S		// Do the trig to get the formulas for the start and end lines.
S		sxa = exa = FIXED(x)+FIXED0_5;
S		#if GFX_USE_GMISC && GMISC_NEED_FIXEDTRIG
S			sxb = radius*ffcos(start);	sy = -NONFIXED(radius*ffsin(start) + FIXED0_5);
S			exb = radius*ffcos(end);	ey = -NONFIXED(radius*ffsin(end) + FIXED0_5);
S		#elif GFX_USE_GMISC && GMISC_NEED_FASTTRIG
S			sxb = FP2FIXED(radius*fcos(start));	sy = -round(radius*fsin(start));
S			exb = FP2FIXED(radius*fcos(end));	ey = -round(radius*fsin(end));
S		#else
S			sxb = FP2FIXED(radius*cos(start*GFX_PI/180));	sy = -round(radius*sin(start*GFX_PI/180));
S			exb = FP2FIXED(radius*cos(end*GFX_PI/180));	ey = -round(radius*sin(end*GFX_PI/180));
S		#endif
S		sxd = sy ? sxb/sy : sxb;
S		exd = ey ? exb/ey : exb;
S
S		// Calculate which quarters and which direction we are traveling
S		qtr = 0;
S		if (sxb > 0)	qtr |= 0x01;		// S1=0001(1), S2=0000(0), S3=0010(2), S4=0011(3)
S		if (sy > 0) 	qtr |= 0x02;
S		if (exb > 0)	qtr |= 0x04;		// E1=0100(4), E2=0000(0), E3=1000(8), E4=1100(12)
S		if (ey > 0) 	qtr |= 0x08;
S		if (sy > ey)	qtr |= 0x10;		// order of start and end lines
S
S		// Calculate intermediates
S		a = 1;
S		b = radius;
S		P = 4 - radius;
S		g->p.color = color;
S		sxb += sxa;
S		exb += exa;
S
S		// Away we go using Bresenham's circle algorithm
S		// This is optimized to prevent overdrawing by drawing a line only when a variable is about to change value
S
S		switch(qtr) {
S		case 0:		// S2E2 sy <= ey
S		case 1:		// S1E2 sy <= ey
S			if (ey && sy) {
S				g->p.x = x; g->p.x1 = x;									// E2S
S				sxa -= sxd; exa -= exd;
S			} else if (sy) {
S				g->p.x = x-b; g->p.x1 = x;								// C2S
S				sxa -= sxd;
S			} else if (ey) {
S				g->p.x = x; g->p.x1 = x+b;								// E2C
S				exa -= exd;
S			} else {
S				g->p.x = x-b; g->p.x1 = x+b;								// C2C
S			}
S			g->p.y = y;
S			hline_clip(g);
S			do {
S				if (-a >= ey) {
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = NONFIXED(sxa); hline_clip(g);		// E2S
S					sxa -= sxd; exa -= exd;
S				} else if (-a >= sy) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);				// C2S
S					sxa -= sxd;
S				} else if (qtr & 1) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= ey) {
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = NONFIXED(sxb); hline_clip(g);	// E2S
S						sxb += sxd; exb += exd;
S					} else if (-b >= sy) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = NONFIXED(sxb); hline_clip(g);			// C2S
S						sxb += sxd;
S					} else if (qtr & 1) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= ey) {
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = NONFIXED(sxa); hline_clip(g);			// E2S
S			} else if (-a >= sy) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);					// C2S
S			} else if (qtr & 1) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			break;
S
S		case 2:		// S3E2 sy <= ey
S		case 3:		// S4E2 sy <= ey
S		case 6:		// S3E1 sy <= ey
S		case 7:		// S4E1 sy <= ey
S		case 18:	// S3E2 sy > ey
S		case 19:	// S4E2 sy > ey
S		case 22:	// S3E1 sy > ey
S		case 23:	// S4E1 sy > ey
S			g->p.y = y; g->p.x = x; g->p.x1 = x+b; hline_clip(g);								// SE2C
S			sxa += sxd; exa -= exd;
S			do {
S				if (-a >= ey) {
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);		// E2C
S					exa -= exd;
S				} else if (!(qtr & 4)) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);					// C2C
S				}
S				if (a <= sy) {
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);		// S2C
S					sxa += sxd;
S				} else if (!(qtr & 1)) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);					// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= ey) {
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = x+a; hline_clip(g);		// E2C
S						exb += exd;
S					} else if (!(qtr & 4)) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);					// C2C
S					}
S					if (b <= sy) {
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = x+a; hline_clip(g);		// S2C
S						sxb -= sxd;
S					} else if (!(qtr & 1)) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g); 				// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= ey) {
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);				// E2C
S			} else if (!(qtr & 4)) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S			}
S			if (a <= sy) {
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+a; hline_clip(g);				// S2C
S			} else if (!(qtr & 1)) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+a; hline_clip(g);							// C2C
S			}
S			break;
S
S		case 4:		// S2E1 sy <= ey
S		case 5:		// S1E1 sy <= ey
S			g->p.y = y; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			do {
S				if (-a >= ey) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);				// C2S
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);				// E2C
S					sxa -= sxd; exa -= exd;
S				} else if (-a >= sy) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);				// C2S
S					sxa -= sxd;
S				} else if (qtr & 1) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= ey) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = NONFIXED(sxb); hline_clip(g);			// C2S
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = x+a; hline_clip(g);			// E2C
S						sxb += sxd; exb += exd;
S					} else if (-b >= sy) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = NONFIXED(sxb); hline_clip(g);			// C2S
S						sxb += sxd;
S					} else if (qtr & 1) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);							// C2C
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= ey) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);					// C2S
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);					// E2C
S			} else if (-a >= sy) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);					// C2S
S			} else if (qtr & 1) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);									// C2C
S			break;
S
S		case 8:		// S2E3 sy <= ey
S		case 9:		// S1E3 sy <= ey
S		case 12:	// S2E4 sy <= ey
S		case 13:	// S1E4 sy <= ey
S		case 24:	// S2E3 sy > ey
S		case 25:	// S1E3 sy > ey
S		case 28:	// S2E3 sy > ey
S		case 29:	// S1E3 sy > ey
S			g->p.y = y; g->p.x = x-b; g->p.x1 = x; hline_clip(g);								// C2SE
S			sxa -= sxd; exa += exd;
S			do {
S				if (-a >= sy) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);		// C2S
S					sxa -= sxd;
S				} else if (qtr & 1) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);					// C2C
S				}
S				if (a <= ey) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);		// C2E
S					exa += exd;
S				} else if (qtr & 4) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);					// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= sy) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = NONFIXED(sxb); hline_clip(g);		// C2S
S						sxb += sxd;
S					} else if (qtr & 1) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);					// C2C
S					}
S					if (b <= ey) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = NONFIXED(exb); hline_clip(g);		// C2E
S						exb -= exd;
S					} else if (qtr & 4) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g); 				// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= sy) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);				// C2S
S			} else if (qtr & 1) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S			}
S			if (a <= ey) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S			} else if (qtr & 4) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+a; hline_clip(g);							// C2C
S			}
S			break;
S
S		case 10:	// S3E3 sy <= ey
S		case 14:	// S3E4 sy <= ey
S			g->p.y = y; g->p.x = x; drawpixel_clip(g);													// S2E
S			sxa += sxd; exa += exd;
S			do {
S				if (a <= sy) {
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = NONFIXED(exa); hline_clip(g);		// S2E
S					sxa += sxd; exa += exd;
S				} else if (a <= ey) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S					exa += exd;
S				} else if (qtr & 4) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (b <= sy) {
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = NONFIXED(exb); hline_clip(g);		// S2E
S						sxb -= sxd; exb -= exd;
S					} else if (b <= ey) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = NONFIXED(exb); hline_clip(g);				// C2E
S						exb -= exd;
S					} else if (qtr & 4) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);							// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (a <= sy) {
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = NONFIXED(exa); hline_clip(g);		// S2E
S			} else if (a <= ey) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S			} else if (qtr & 4) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S			}
S			break;
S
S		case 11:	// S4E3 sy <= ey
S		case 15:	// S4E4 sy <= ey
S			g->p.y = y; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			do {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S				if (a <= sy) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);				// S2C
S					sxa += sxd; exa += exd;
S				} else if (a <= ey) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S					exa += exd;
S				} else if (qtr & 4) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);							// C2C
S					if (b <= sy) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = NONFIXED(exb); hline_clip(g);			// C2E
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = x+a; hline_clip(g);			// S2C
S						sxb -= sxd; exb -= exd;
S					} else if (b <= ey) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = NONFIXED(exb); hline_clip(g);			// C2E
S						exb -= exd;
S					} else if (qtr & 4) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			if (a <= sy) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);					// C2E
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);					// S2C
S			} else if (a <= ey) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);					// C2E
S			} else if (qtr & 4) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			break;
S
S		case 16:	// S2E2	sy > ey
S		case 20:	// S2E1 sy > ey
S			g->p.y = y; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			sxa -= sxd; exa -= exd;
S			do {
S				if (-a >= sy) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);				// C2S
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);				// E2C
S					sxa -= sxd; exa -= exd;
S				} else if (-a >= ey) {
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);				// E2C
S					exa -= exd;
S				} else if (!(qtr & 4)){
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g); 						// C2C
S				}
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g); 							// C2C
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= sy) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = NONFIXED(sxb); hline_clip(g);			// C2S
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = x+a; hline_clip(g);			// E2C
S						sxb += sxd; exb += exd;
S					} else if (-b >= ey) {
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = x+a; hline_clip(g);			// E2C
S						exb += exd;
S					} else if (!(qtr & 4)){
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g); 					// C2C
S					}
S					g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g); 						// C2C
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= sy) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = NONFIXED(sxa); hline_clip(g);					// C2S
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);					// E2C
S			} else if (-a >= ey) {
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);					// E2C
S			} else if (!(qtr & 4)){
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g); 							// C2C
S			}
S			g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g); 								// C2C
S			break;
S
S		case 17:	// S1E2 sy > ey
S		case 21:	// S1E1 sy > ey
S			if (sy) {
S				g->p.x = x; g->p.x1 = x;																// E2S
S				sxa -= sxd; exa -= exd;
S			} else {
S				g->p.x = x; g->p.x1 = x+b;															// E2C
S				exa -= exd;
S			}
S			g->p.y = y;
S			hline_clip(g);
S			do {
S				if (-a >= sy) {
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = NONFIXED(sxa); hline_clip(g);		// E2S
S					sxa -= sxd; exa -= exd;
S				} else if (-a >= ey) {
S					g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);				// E2C
S					exa -= exd;
S				} else if (!(qtr & 4)) {
S					g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (-b >= sy) {
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = NONFIXED(sxb); hline_clip(g);	// E2S
S						sxb += sxd; exb += exd;
S					} else if (-b >= ey) {
S						g->p.y = y-b; g->p.x = NONFIXED(exb); g->p.x1 = x+a; hline_clip(g);			// E2C
S						exb += exd;
S					} else if (!(qtr & 4)) {
S						g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (-a >= sy) {
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = NONFIXED(sxa); hline_clip(g);			// E2S
S			} else if (-a >= ey) {
S				g->p.y = y-a; g->p.x = NONFIXED(exa); g->p.x1 = x+b; hline_clip(g);					// E2C
S			} else if (!(qtr & 4)) {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			break;
S
S		case 26:	// S3E3 sy > ey
S		case 27:	// S4E3 sy > ey
S			g->p.y = y; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			do {
S				g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S				if (a <= ey) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);				// C2E
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);				// S2C
S					sxa += sxd; exa += exd;
S				} else if (a <= sy) {
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);				// S2C
S					sxa += sxd;
S				} else if (!(qtr & 1)) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					g->p.y = y-b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);							// C2C
S					if (b <= ey) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = NONFIXED(exb); hline_clip(g);			// C2E
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = x+a; hline_clip(g);			// S2C
S						sxb -= sxd; exb -= exd;
S					} else if (b <= sy) {
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = x+a; hline_clip(g);			// S2C
S						sxb -= sxd;
S					} else if (!(qtr & 1)) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			g->p.y = y-a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);									// C2C
S			if (a <= ey) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = NONFIXED(exa); hline_clip(g);					// C2E
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);					// S2C
S			} else if (a <= sy) {
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);					// S2C
S			} else if (!(qtr & 4)) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			break;
S
S		case 30:	// S3E4 sy > ey
S		case 31:	// S4E4 sy > ey
S			do {
S				if (a <= ey) {
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = NONFIXED(exa); hline_clip(g);		// S2E
S					sxa += sxd; exa += exd;
S				} else if (a <= sy) {
S					g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);				// S2C
S					sxa += sxd;
S				} else if (!(qtr & 1)) {
S					g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);							// C2C
S				}
S				if (P < 0) {
S					P += 3 + 2*a++;
S				} else {
S					if (b <= ey) {
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = NONFIXED(exb); hline_clip(g);	// S2E
S						sxb -= sxd; exb -= exd;
S					} else if (b <= sy) {
S						g->p.y = y+b; g->p.x = NONFIXED(sxb); g->p.x1 = x+a; hline_clip(g);			// S2C
S						sxb -= sxd;
S					} else if (!(qtr & 1)) {
S						g->p.y = y+b; g->p.x = x-a; g->p.x1 = x+a; hline_clip(g);						// C2C
S					}
S					P += 5 + 2*(a++ - b--);
S				}
S			} while(a < b);
S			if (a <= ey) {
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);				// S2C
S			} else if (a <= sy) {
S				g->p.y = y+a; g->p.x = NONFIXED(sxa); g->p.x1 = x+b; hline_clip(g);					// S2C
S			} else if (!(qtr & 4)) {
S				g->p.y = y+a; g->p.x = x-b; g->p.x1 = x+b; hline_clip(g);								// C2C
S			}
S			break;
S		}
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_ARC || GDISP_NEED_ARCSECTORS
X#if 0 || 0
S	void gdispGDrawRoundedBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t radius, color_t color) {
S		if (2*radius > cx || 2*radius > cy) {
S			gdispGDrawBox(g, x, y, cx, cy, color);
S			return;
S		}
S
S		#if GDISP_NEED_ARCSECTORS
S			gdispGDrawArcSectors(g, x+radius, y+radius, radius, 0x0C, color);
S			gdispGDrawArcSectors(g, x+cx-1-radius, y+radius, radius, 0x03, color);
S			gdispGDrawArcSectors(g, x+cx-1-radius, y+cy-1-radius, radius, 0xC0, color);
S			gdispGDrawArcSectors(g, x+radius, y+cy-1-radius, radius, 0x30, color);
S		#else
S			gdispGDrawArc(g, x+radius, y+radius, radius, 90, 180, color);
S			gdispGDrawArc(g, x+cx-1-radius, y+radius, radius, 0, 90, color);
S			gdispGDrawArc(g, x+cx-1-radius, y+cy-1-radius, radius, 270, 360, color);
S			gdispGDrawArc(g, x+radius, y+cy-1-radius, radius, 180, 270, color);
S		#endif
S		gdispGDrawLine(g, x+radius+1, y, x+cx-2-radius, y, color);
S		gdispGDrawLine(g, x+cx-1, y+radius+1, x+cx-1, y+cy-2-radius, color);
S		gdispGDrawLine(g, x+radius+1, y+cy-1, x+cx-2-radius, y+cy-1, color);
S		gdispGDrawLine(g, x, y+radius+1, x, y+cy-2-radius, color);
S	}
N#endif
N
N#if GDISP_NEED_ARC || GDISP_NEED_ARCSECTORS
X#if 0 || 0
S	void gdispGFillRoundedBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t radius, color_t color) {
S		coord_t radius2;
S
S		radius2 = radius*2;
S		if (radius2 > cx || radius2 > cy) {
S			gdispGFillArea(g, x, y, cx, cy, color);
S			return;
S		}
S		#if GDISP_NEED_ARCSECTORS
S			gdispGFillArcSectors(g, x+radius, y+radius, radius, 0x0C, color);
S			gdispGFillArcSectors(g, x+cx-1-radius, y+radius, radius, 0x03, color);
S			gdispGFillArcSectors(g, x+cx-1-radius, y+cy-1-radius, radius, 0xC0, color);
S			gdispGFillArcSectors(g, x+radius, y+cy-1-radius, radius, 0x30, color);
S		#else
S			gdispGFillArc(g, x+radius, y+radius, radius, 90, 180, color);
S			gdispGFillArc(g, x+cx-1-radius, y+radius, radius, 0, 90, color);
S			gdispGFillArc(g, x+cx-1-radius, y+cy-1-radius, radius, 270, 360, color);
S			gdispGFillArc(g, x+radius, y+cy-1-radius, radius, 180, 270, color);
S		#endif
S		gdispGFillArea(g, x+radius+1, y, cx-radius2, radius, color);
S		gdispGFillArea(g, x+radius+1, y+cy-radius, cx-radius2, radius, color);
S		gdispGFillArea(g, x, y+radius, cx, cy-radius2, color);
S	}
N#endif
N
N#if GDISP_NEED_PIXELREAD
X#if 0
S	color_t gdispGGetPixelColor(GDisplay *g, coord_t x, coord_t y) {
S		color_t		c;
S
S		/* Always synchronous as it must return a value */
S		MUTEX_ENTER(g);
S		#if GDISP_HARDWARE_PIXELREAD
S			#if GDISP_HARDWARE_PIXELREAD == HARDWARE_AUTODETECT
S				if (gvmt(g)->get)
S			#endif
S			{
S				// Best is direct pixel read
S				g->p.x = x;
S				g->p.y = y;
S				c = gdisp_lld_get_pixel_color(g);
S				MUTEX_EXIT(g);
S				return c;
S			}
S		#endif
S		#if GDISP_HARDWARE_PIXELREAD != TRUE && GDISP_HARDWARE_STREAM_READ
S			#if GDISP_HARDWARE_STREAM_READ == HARDWARE_AUTODETECT
S				if (gvmt(g)->readcolor)
S			#endif
S			{
S				// Next best is hardware streaming
S				g->p.x = x;
S				g->p.y = y;
S				g->p.cx = 1;
S				g->p.cy = 1;
S				gdisp_lld_read_start(g);
S				c = gdisp_lld_read_color(g);
S				gdisp_lld_read_stop(g);
S				MUTEX_EXIT(g);
S				return c;
S			}
S		#endif
S		#if GDISP_HARDWARE_PIXELREAD != TRUE && GDISP_HARDWARE_STREAM_READ != TRUE
S			#if !GDISP_HARDWARE_PIXELREAD && !GDISP_HARDWARE_STREAM_READ
S				// Worst is "not possible"
S				#error "GDISP: GDISP_NEED_PIXELREAD has been set but there is no hardware support for reading the display"
S			#endif
S			MUTEX_EXIT(g);
S			return 0;
S		#endif
S	}
N#endif
N
N#if GDISP_NEED_SCROLL
X#if 0
S	void gdispGVerticalScroll(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, int lines, color_t bgcolor) {
S		coord_t		abslines;
S		#if GDISP_HARDWARE_SCROLL != TRUE
S			coord_t 	fy, dy, ix, fx, i, j;
S		#endif
S
S		if (!lines) return;
S
S		MUTEX_ENTER(g);
S		#if NEED_CLIPPING
S			#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S				if (!gvmt(g)->setclip)
S			#endif
S			{
S				if (x < g->clipx0) { cx -= g->clipx0 - x; x = g->clipx0; }
S				if (y < g->clipy0) { cy -= g->clipy0 - y; y = g->clipy0; }
S				if (cx <= 0 || cy <= 0 || x >= g->clipx1 || y >= g->clipy1) { MUTEX_EXIT(g); return; }
S				if (x+cx > g->clipx1)	cx = g->clipx1 - x;
S				if (y+cy > g->clipy1)	cy = g->clipy1 - y;
S			}
S		#endif
S
S		abslines = lines < 0 ? -lines : lines;
S		if (abslines >= cy) {
S			abslines = cy;
S			cy = 0;
S		} else {
S			// Best is hardware scroll
S			#if GDISP_HARDWARE_SCROLL
S				#if GDISP_HARDWARE_SCROLL == HARDWARE_AUTODETECT
S					if (gvmt(g)->vscroll)
S				#endif
S				{
S					g->p.x = x;
S					g->p.y = y;
S					g->p.cx = cx;
S					g->p.cy = cy;
S					g->p.y1 = lines;
S					g->p.color = bgcolor;
S					gdisp_lld_vertical_scroll(g);
S					cy -= abslines;
S				}
S				#if GDISP_HARDWARE_SCROLL == HARDWARE_AUTODETECT
S					else
S				#endif
S			#elif GDISP_LINEBUF_SIZE == 0
S				#error "GDISP: GDISP_NEED_SCROLL is set but there is no hardware support and GDISP_LINEBUF_SIZE is zero."
S			#endif
S
S			// Scroll Emulation
S			#if GDISP_HARDWARE_SCROLL != TRUE
S				{
S					cy -= abslines;
S					if (lines < 0) {
S						fy = y+cy-1;
S						dy = -1;
S					} else {
S						fy = y;
S						dy = 1;
S					}
S					// Move the screen - one line at a time
S					for(i = 0; i < cy; i++, fy += dy) {
S
S						// Handle where the buffer is smaller than a line
S						for(ix=0; ix < cx; ix += GDISP_LINEBUF_SIZE) {
S
S							// Calculate the data we can move in one operation
S							fx = cx - ix;
S							if (fx > GDISP_LINEBUF_SIZE)
S								fx = GDISP_LINEBUF_SIZE;
S
S							// Read one line of data from the screen
S
S							// Best line read is hardware streaming
S							#if GDISP_HARDWARE_STREAM_READ
S								#if GDISP_HARDWARE_STREAM_READ == HARDWARE_AUTODETECT
S									if (gvmt(g)->readstart)
S								#endif
S								{
S									g->p.x = x+ix;
S									g->p.y = fy+lines;
S									g->p.cx = fx;
S									g->p.cy = 1;
S									gdisp_lld_read_start(g);
S									for(j=0; j < fx; j++)
S										g->linebuf[j] = gdisp_lld_read_color(g);
S									gdisp_lld_read_stop(g);
S								}
S								#if GDISP_HARDWARE_STREAM_READ == HARDWARE_AUTODETECT
S									else
S								#endif
S							#endif
S
S							// Next best line read is single pixel reads
S							#if GDISP_HARDWARE_STREAM_READ != TRUE && GDISP_HARDWARE_PIXELREAD
S								#if GDISP_HARDWARE_PIXELREAD == HARDWARE_AUTODETECT
S									if (gvmt(g)->get)
S								#endif
S								{
S									for(j=0; j < fx; j++) {
S										g->p.x = x+ix+j;
S										g->p.y = fy+lines;
S										g->linebuf[j] = gdisp_lld_get_pixel_color(g);
S									}
S								}
S								#if GDISP_HARDWARE_PIXELREAD == HARDWARE_AUTODETECT
S									else {
S										// Worst is "not possible"
S										MUTEX_EXIT(g);
S										return;
S									}
S								#endif
S							#endif
S
S							// Worst is "not possible"
S							#if !GDISP_HARDWARE_STREAM_READ && !GDISP_HARDWARE_PIXELREAD
S								#error "GDISP: GDISP_NEED_SCROLL is set but there is no hardware support for scrolling or reading pixels."
S							#endif
S
S							// Write that line to the new location
S
S							// Best line write is hardware bitfills
S							#if GDISP_HARDWARE_BITFILLS
S								#if GDISP_HARDWARE_BITFILLS == HARDWARE_AUTODETECT
S									if (gvmt(g)->blit)
S								#endif
S								{
S									g->p.x = x+ix;
S									g->p.y = fy;
S									g->p.cx = fx;
S									g->p.cy = 1;
S									g->p.x1 = 0;
S									g->p.y1 = 0;
S									g->p.x2 = fx;
S									g->p.ptr = (void *)g->linebuf;
S									gdisp_lld_blit_area(g);
S								}
S								#if GDISP_HARDWARE_BITFILLS == HARDWARE_AUTODETECT
S									else
S								#endif
S							#endif
S
S							// Next best line write is hardware streaming
S							#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE
S								#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S									if (gvmt(g)->writestart)
S								#endif
S								{
S									g->p.x = x+ix;
S									g->p.y = fy;
S									g->p.cx = fx;
S									g->p.cy = 1;
S									gdisp_lld_write_start(g);
S									#if GDISP_HARDWARE_STREAM_POS
S										gdisp_lld_write_pos(g);
S									#endif
S									for(j = 0; j < fx; j++) {
S										g->p.color = g->linebuf[j];
S										gdisp_lld_write_color(g);
S									}
S									gdisp_lld_write_stop(g);
S								}
S								#if GDISP_HARDWARE_STREAM_WRITE == HARDWARE_AUTODETECT
S									else
S								#endif
S							#endif
S
S							// Next best line write is drawing pixels in combination with filling
S							#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_FILLS && GDISP_HARDWARE_DRAWPIXEL
S								// We don't need to test for auto-detect on drawpixel as we know we have it because we don't have streaming.
S								#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S									if (gvmt(g)->fill)
S								#endif
S								{
S									g->p.y = fy;
S									g->p.cy = 1;
S									g->p.x = x+ix;
S									g->p.cx = 1;
S									for(j = 0; j < fx; ) {
S										g->p.color = g->linebuf[j];
S										if (j + g->p.cx < fx && g->linebuf[j] == g->linebuf[j + g->p.cx])
S											g->p.cx++;
S										else if (g->p.cx == 1) {
S											gdisp_lld_draw_pixel(g);
S											j++;
S											g->p.x++;
S										} else {
S											gdisp_lld_fill_area(g);
S											j += g->p.cx;
S											g->p.x += g->p.cx;
S											g->p.cx = 1;
S										}
S									}
S								}
S								#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
S									else
S								#endif
S							#endif
S
S							// Worst line write is drawing pixels
S							#if GDISP_HARDWARE_BITFILLS != TRUE && GDISP_HARDWARE_STREAM_WRITE != TRUE && GDISP_HARDWARE_FILLS != TRUE && GDISP_HARDWARE_DRAWPIXEL
S								// The following test is unneeded because we are guaranteed to have draw pixel if we don't have streaming
S								//#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
S								//	if (gvmt(g)->pixel)
S								//#endif
S								{
S									g->p.y = fy;
S									for(g->p.x = x+ix, j = 0; j < fx; g->p.x++, j++) {
S										g->p.color = g->linebuf[j];
S										gdisp_lld_draw_pixel(g);
S									}
S								}
S							#endif
S						}
S					}
S				}
S			#endif
S		}
S
S		/* fill the remaining gap */
S		g->p.x = x;
S		g->p.y = lines > 0 ? (y+cy) : y;
S		g->p.cx = cx;
S		g->p.cy = abslines;
S		g->p.color = bgcolor;
S		fillarea(g);
S		autoflush_stopdone(g);
S		MUTEX_EXIT(g);
S	}
N#endif
N
N#if GDISP_NEED_CONTROL
X#if 0
S	#if GDISP_HARDWARE_CONTROL
S		void gdispGControl(GDisplay *g, unsigned what, void *value) {
S			#if GDISP_HARDWARE_CONTROL == HARDWARE_AUTODETECT
S				if (!gvmt(g)->control)
S					return;
S			#endif
S			MUTEX_ENTER(g);
S			g->p.x = what;
S			g->p.ptr = value;
S			if (what == GDISP_CONTROL_ORIENTATION) {
S				switch ((orientation_t) value) {
S				case GDISP_ROTATE_LANDSCAPE:
S					g->p.ptr = g->g.Width >= g->g.Height ? (void *)GDISP_ROTATE_0 : (void *)GDISP_ROTATE_90;
S					break;
S				case GDISP_ROTATE_PORTRAIT:
S					g->p.ptr = g->g.Width >= g->g.Height ? (void *)GDISP_ROTATE_90 : (void *)GDISP_ROTATE_0;
S					break;
S				default:
S					break;
S				}
S			}
S			gdisp_lld_control(g);
S			#if GDISP_NEED_CLIP || GDISP_NEED_VALIDATION
S				if (what == GDISP_CONTROL_ORIENTATION) {
S					// Best is hardware clipping
S					#if GDISP_HARDWARE_CLIP
S						#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S							if (gvmt(g)->setclip)
S						#endif
S						{
S							g->p.x = 0;
S							g->p.y = 0;
S							g->p.cx = g->g.Width;
S							g->p.cy = g->g.Height;
S							gdisp_lld_set_clip(g);
S						}
S						#if GDISP_HARDWARE_CLIP == HARDWARE_AUTODETECT
S							else
S						#endif
S					#endif
S
S					// Worst is software clipping
S					#if GDISP_HARDWARE_CLIP != TRUE
S						{
S							g->clipx0 = 0;
S							g->clipy0 = 0;
S							g->clipx1 = g->g.Width;
S							g->clipy1 = g->g.Height;
S						}
S					#endif
S				}
S			#endif
S			MUTEX_EXIT(g);
S		}
S	#else
S		void gdispGControl(GDisplay *g, unsigned what, void *value) {
S			(void)g;
S			(void)what;
S			(void)value;
S			/* Ignore everything */
S		}
S	#endif
N#endif
N
N#if GDISP_NEED_QUERY
X#if 0
S	#if GDISP_HARDWARE_QUERY
S		void *gdispGQuery(GDisplay *g, unsigned what) {
S			void *res;
S
S			#if GDISP_HARDWARE_QUERY == HARDWARE_AUTODETECT
S				if (!gvmt(g)->query)
S					return -1;
S			#endif
S			MUTEX_ENTER(g);
S			g->p.x = (coord_t)what;
S			res = gdisp_lld_query(g);
S			MUTEX_EXIT(g);
S			return res;
S		}
S	#else
S		void *gdispGQuery(GDisplay *g, unsigned what) {
S			(void) what;
S			return (void *)-1;
S		}
S	#endif
N#endif
N
N/*===========================================================================*/
N/* High Level Driver Routines.                                               */
N/*===========================================================================*/
N
Nvoid gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
N	if (cx <= 0 || cy <= 0) return;
N	cx = x+cx-1; cy = y+cy-1;			// cx, cy are now the end point.
N
N	MUTEX_ENTER(g);
X	;
N
N	g->p.color = color;
N
N	if (cx - x > 2) {
N		g->p.x = x; g->p.y = y; g->p.x1 = cx; hline_clip(g);
N		if (y != cy) {
N			g->p.x = x; g->p.y = cy; g->p.x1 = cx; hline_clip(g);
N			if (cy - y > 2) {
N				y++; cy--;
N				g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
N				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
N			}
N		}
N	} else {
N		g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
N		if (x != cx) {
N			g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
N		}
N	}
N
N	autoflush(g);
X	;
N	MUTEX_EXIT(g);
X	;
N}
N
N#if GDISP_NEED_CONVEX_POLYGON
X#if 0
S	void gdispGDrawPoly(GDisplay *g, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt, color_t color) {
S		const point	*epnt, *p;
S
S		epnt = &pntarray[cnt-1];
S
S		MUTEX_ENTER(g);
S		g->p.color = color;
S		for(p = pntarray; p < epnt; p++) {
S			g->p.x=tx+p->x; g->p.y=ty+p->y; g->p.x1=tx+p[1].x; g->p.y1=ty+p[1].y; line_clip(g);
S		}
S		g->p.x=tx+p->x; g->p.y=ty+p->y; g->p.x1=tx+pntarray->x; g->p.y1=ty+pntarray->y; line_clip(g);
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGFillConvexPoly(GDisplay *g, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt, color_t color) {
S		const point	*lpnt, *rpnt, *epnts;
S		fixed		lx, rx, lk, rk;
S		coord_t		y, ymax, lxc, rxc;
S
S		epnts = &pntarray[cnt-1];
S
S		/* Find a top point */
S		rpnt = pntarray;
S		for(lpnt=pntarray+1; lpnt <= epnts; lpnt++) {
S			if (lpnt->y < rpnt->y)
S				rpnt = lpnt;
S		}
S		lx = rx = FIXED(rpnt->x);
S		y = rpnt->y;
S
S		/* Work out the slopes of the two attached line segs */
S		for (lpnt = rpnt <= pntarray ? epnts : rpnt-1; lpnt->y == y; cnt--) {
S			if (!cnt) return;
S			lx = FIXED(lpnt->x);
S			lpnt = lpnt <= pntarray ? epnts : lpnt-1;
S		}
S		for (rpnt = rpnt >= epnts ? pntarray : rpnt+1; rpnt->y == y; cnt--) {
S			if (!cnt) return;
S			rx = FIXED(rpnt->x);
S			rpnt = rpnt >= epnts ? pntarray : rpnt+1;
S		}
S		lk = (FIXED(lpnt->x) - lx) / (lpnt->y - y);
S		rk = (FIXED(rpnt->x) - rx) / (rpnt->y - y);
S
S		// Add error correction for rounding
S		lx += FIXED0_5;
S		rx += FIXED0_5;
S
S		// Do all the line segments
S		MUTEX_ENTER(g);
S		g->p.color = color;
S		while(1) {
S			/* Determine our boundary */
S			ymax = rpnt->y < lpnt->y ? rpnt->y : lpnt->y;
S
S			/* Scan down the line segments until we hit a boundary */
S			for(; y < ymax; y++) {
S				lxc = NONFIXED(lx);
S				rxc = NONFIXED(rx);
S				/*
S				 * Doesn't print the right hand point in order to allow polygon joining.
S				 * Also ensures that we draw from left to right with the minimum number
S				 * of pixels.
S				 */
S				if (lxc < rxc) {
S					g->p.x=tx+lxc; g->p.y=ty+y; g->p.x1=tx+rxc-1; hline_clip(g);
S				} else if (lxc > rxc) {
S					g->p.x=tx+rxc; g->p.y=ty+y; g->p.x1=tx+lxc-1; hline_clip(g);
S				}
S
S				lx += lk;
S				rx += rk;
S			}
S
S			if (!cnt) {
S				autoflush(g);
S				MUTEX_EXIT(g);
S				return;
S			}
S			cnt--;
S
S			/* Replace the appropriate point */
S			if (ymax == lpnt->y) {
S				for (lpnt = lpnt <= pntarray ? epnts : lpnt-1; lpnt->y == y; cnt--) {
S					if (!cnt) {
S						autoflush(g);
S						MUTEX_EXIT(g);
S						return;
S					}
S					lx = FIXED(lpnt->x);
S					lpnt = lpnt <= pntarray ? epnts : lpnt-1;
S				}
S				lk = (FIXED(lpnt->x) - lx) / (lpnt->y - y);
S				lx += FIXED0_5;
S			} else {
S				for (rpnt = rpnt >= epnts ? pntarray : rpnt+1; rpnt->y == y; cnt--) {
S					if (!cnt) {
S						autoflush(g);
S						MUTEX_EXIT(g);
S						return;
S					}
S					rx = FIXED(rpnt->x);
S					rpnt = rpnt >= epnts ? pntarray : rpnt+1;
S				}
S				rk = (FIXED(rpnt->x) - rx) / (rpnt->y - y);
S				rx += FIXED0_5;
S			}
S		}
S	}
S
S	static int32_t rounding_div(const int32_t n, const int32_t d)
S	{
S		if ((n < 0) != (d < 0))
S			return (n - d/2) / d;
S		else
S			return (n + d/2) / d;
S	}
S
S	/* Find a vector (nx, ny) that is perpendicular to (dx, dy) and has length
S	 * equal to 'norm'. */
S	static void get_normal_vector(coord_t dx, coord_t dy, coord_t norm, coord_t *nx, coord_t *ny)
S	{
S		int32_t dx2, dy2, len_sq, norm_sq, norm_sq2;
S		int div, step, best, delta, abs_delta;
S
S		dx2 = dx; dy2 = dy;
S		norm_sq = (int32_t)norm * norm;
S		norm_sq2 = norm_sq * 512;
S
S		/* Scale dx2 and dy2 so that
S		 *     len_sq / 2 <= norm_sq * 512 <= len_sq * 2.
S		 * The scaling by 512 is to yield higher accuracy in division later. */
S		len_sq = dx2 * dx2 + dy2 * dy2;
S
S		if (len_sq < norm_sq2)
S		{
S			while (len_sq && len_sq < norm_sq2)
S			{
S				len_sq <<= 2; dx2 <<= 1; dy2 <<= 1;
S			}
S		}
S		else if (len_sq > norm_sq2)
S		{
S			while (len_sq && len_sq > norm_sq2)
S			{
S				len_sq >>= 2; dx2 >>= 1; dy2 >>= 1;
S			}
S		}
S
S		/* Now find the divider div so that
S		 *     len_sq / div^2 == norm_sq   i.e.  div = sqrt(len_sq / norm_sq)
S		 *
S		 * This is done using bisection search to avoid the need for floating
S		 * point sqrt.
S		 *
S		 * Based on previous scaling, we know that
S		 *     len_sq / 2 <= norm_sq * 512   <=>   div <= sqrt(1024) = 32
S		 *     len_sq * 2 >= norm_sq * 512   <=>   div >= sqrt(256) = 16
S		 */
S		div = 24; step = 8;
S		best = 256;
S
S		for (;;)
S		{
S			dx = dx2 / div;
S			dy = dy2 / div;
S			len_sq = dx*dx + dy*dy;
S
S			delta = len_sq - norm_sq;
S
S			abs_delta = (delta >= 0) ? delta : -delta;
S
S			if (abs_delta < best)
S			{
S				*nx = dy;
S				*ny = -dx;
S				best = abs_delta;
S			}
S
S			if (delta > 0)
S				div += step;
S			else if (delta < 0)
S				div -= step;
S			else if (delta == 0)
S				break;
S
S			if (step == 0)
S				break;
S			else
S				step >>= 1; /* Do one round with step = 0 to calculate final result. */
S		}
S	}
S
S	void gdispGDrawThickLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color, coord_t width, bool_t round) {
S		coord_t dx, dy, nx = 0, ny = 0;
S
S		/* Compute the direction vector for the line */
S		dx = x1 - x0;
S		dy = y1 - y0;
S
S		/* Draw a small dot if the line length is zero. */
S		if (dx == 0 && dy == 0)
S			dx += 1;
S
S		/* Compute a normal vector with length 'width'. */
S		get_normal_vector(dx, dy, width, &nx, &ny);
S
S		/* Handle 1px wide lines gracefully */
S		if (nx == 0 && ny == 0)
S			nx = 1;
S
S		/* Offset the x0,y0 by half the width of the line. This way we
S		 * can keep the width of the line accurate even if it is not evenly
S		 * divisible by 2.
S		 */
S		{
S			x0 -= rounding_div(nx, 2);
S			y0 -= rounding_div(ny, 2);
S		}
S
S		/* Fill in the point array */
S		if (!round) {
S			/* We use 4 points for the basic line shape:
S			 *
S			 *  pt1                                      pt2
S			 * (+n) ------------------------------------ (d+n)
S			 *   |                                       |
S			 * (0,0) ----------------------------------- (d)
S			 *  pt0                                      pt3
S			 */
S			point pntarray[4];
S
S			pntarray[0].x = 0;
S			pntarray[0].y = 0;
S			pntarray[1].x = nx;
S			pntarray[1].y = ny;
S			pntarray[2].x = dx + nx;
S			pntarray[2].y = dy + ny;
S			pntarray[3].x = dx;
S			pntarray[3].y = dy;
S
S			gdispGFillConvexPoly(g, x0, y0, pntarray, 4, color);
S		} else {
S			/* We use 4 points for basic shape, plus 4 extra points for ends:
S			 *
S			 *           pt3 ------------------ pt4
S			 *          /                         \
S			 *        pt2                        pt5
X
S			 *         |                          |
S			 *        pt1                        pt6
S			 *         \                         /
S			 *          pt0 -------------------pt7
S			 */
S			point pntarray[8];
S			coord_t nx2, ny2;
S
S			/* Magic numbers:
S			 * 75/256  = sin(45) / (1 + sqrt(2))		diagonal octagon segments
S			 * 106/256 = 1 / (1 + sqrt(2))				octagon side
S			 * 53/256  = 0.5 / (1 + sqrt(2))			half of octagon side
S			 * 150/256 = 1 - 1 / (1 + sqrt(2))	  		octagon height minus one side
S			 */
S
S			/* Rotate the normal vector 45 deg counter-clockwise and reduce
S			 * to 1 / (1 + sqrt(2)) length, for forming octagonal ends. */
S			nx2 = rounding_div((nx * 75 + ny * 75), 256);
S			ny2 = rounding_div((-nx * 75 + ny * 75), 256);
S
S			/* Offset and extend the line so that the center of the octagon
S			 * is at the specified points. */
S			x0 += ny * 53 / 256;
S			y0 -= nx * 53 / 256;
S			dx -= ny * 106 / 256;
S			dy += nx * 106 / 256;
S
S			/* Now fill in the points by summing the calculated vectors. */
S			pntarray[0].x = 0;
S			pntarray[0].y = 0;
S			pntarray[1].x = nx2;
S			pntarray[1].y = ny2;
S			pntarray[2].x = nx2 + nx * 106/256;
S			pntarray[2].y = ny2 + ny * 106/256;
S			pntarray[3].x = nx;
S			pntarray[3].y = ny;
S			pntarray[4].x = dx + nx;
S			pntarray[4].y = dy + ny;
S			pntarray[5].x = dx + nx - nx2;
S			pntarray[5].y = dy + ny - ny2;
S			pntarray[6].x = dx + nx * 150/256 - nx2;
S			pntarray[6].y = dy + ny * 150/256 - ny2;
S			pntarray[7].x = dx;
S			pntarray[7].y = dy;
S
S			gdispGFillConvexPoly(g, x0, y0, pntarray, 8, color);
S		}
S	}
N#endif
N
N#if GDISP_NEED_TEXT
X#if 0
S	#include "mcufont/mcufont.h"
S
S	#if GDISP_NEED_ANTIALIAS && GDISP_HARDWARE_PIXELREAD
S		static void drawcharline(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
S			#define GD	((GDisplay *)state)
S			if (y < GD->t.clipy0 || y >= GD->t.clipy1 || x+count <= GD->t.clipx0 || x >= GD->t.clipx1)
S				return;
S			if (x < GD->t.clipx0) {
S				count -= GD->t.clipx0 - x;
S				x = GD->t.clipx0;
S			}
S			if (x+count > GD->t.clipx1)
S				count = GD->t.clipx1 - x;
S			if (alpha == 255) {
S				GD->p.x = x; GD->p.y = y; GD->p.x1 = x+count-1; GD->p.color = GD->t.color;
S				hline_clip(GD);
S			} else {
S				for (; count; count--, x++) {
S					GD->p.x = x; GD->p.y = y;
S					GD->p.color = gdispBlendColor(GD->t.color, gdisp_lld_get_pixel_color(GD), alpha);
S					drawpixel_clip(GD);
S				}
S			}
S			#undef GD
S		}
S	#else
S		static void drawcharline(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
S			#define GD	((GDisplay *)state)
S			if (y < GD->t.clipy0 || y >= GD->t.clipy1 || x+count <= GD->t.clipx0 || x >= GD->t.clipx1)
S				return;
S			if (x < GD->t.clipx0) {
S				count -= GD->t.clipx0 - x;
S				x = GD->t.clipx0;
S			}
S			if (x+count > GD->t.clipx1)
S				count = GD->t.clipx1 - x;
S			if (alpha > 0x80) {			// A best approximation when using anti-aliased fonts but we can't actually draw them anti-aliased
S				GD->p.x = x; GD->p.y = y; GD->p.x1 = x+count-1; GD->p.color = GD->t.color;
S				hline_clip(GD);
S			}
S			#undef GD
S		}
S	#endif
S
S	#if GDISP_NEED_ANTIALIAS
S		static void fillcharline(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
S			#define GD	((GDisplay *)state)
S			if (y < GD->t.clipy0 || y >= GD->t.clipy1 || x+count <= GD->t.clipx0 || x >= GD->t.clipx1)
S				return;
S			if (x < GD->t.clipx0) {
S				count -= GD->t.clipx0 - x;
S				x = GD->t.clipx0;
S			}
S			if (x+count > GD->t.clipx1)
S				count = GD->t.clipx1 - x;
S			if (alpha == 255) {
S				GD->p.color = GD->t.color;
S			} else {
S				GD->p.color = gdispBlendColor(GD->t.color, GD->t.bgcolor, alpha);
S			}
S			GD->p.x = x; GD->p.y = y; GD->p.x1 = x+count-1;
S			hline_clip(GD);
S			#undef GD
S		}
S	#else
S		#define fillcharline	drawcharline
S	#endif
S
S	/* Callback to render characters. */
S	static uint8_t drawcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
S		#define GD	((GDisplay *)state)
S			return mf_render_character(GD->t.font, x, y, ch, drawcharline, state);
S		#undef GD
S	}
S
S	/* Callback to render characters. */
S	static uint8_t fillcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
S		#define GD	((GDisplay *)state)
S			return mf_render_character(GD->t.font, x, y, ch, fillcharline, state);
S		#undef GD
S	}
S
S	/* Callback to render string boxes with word wrap. */
S	#if GDISP_NEED_TEXT_WORDWRAP
S		static bool mf_countline_callback(mf_str line, uint16_t count, void *state) {
S			int *linecount = (int*)state;
S			(*linecount)++;
S
S			return TRUE;
S		}
S		static bool mf_drawline_callback(mf_str line, uint16_t count, void *state) {
S			wrapParameters_t* wrapParameters = (wrapParameters_t*)state;
S
S			mf_render_aligned(wrapParameters->font, wrapParameters->x, wrapParameters->y, wrapParameters->justify, line, count, drawcharglyph, wrapParameters->g);
S
S			wrapParameters->y += wrapParameters->font->line_height;
S			return TRUE;
S		}
S		static bool mf_fillline_callback(mf_str line, uint16_t count, void *state) {
S			wrapParameters_t* wrapParameters = (wrapParameters_t*)state;
S
S			mf_render_aligned(wrapParameters->font, wrapParameters->x, wrapParameters->y, wrapParameters->justify, line, count, fillcharglyph, wrapParameters->g);
S
S			wrapParameters->y += wrapParameters->font->line_height;
S			return TRUE;
S		}	
S	#endif
S
S	void gdispGDrawChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color) {
S		MUTEX_ENTER(g);
S		g->t.font = font;
S		g->t.clipx0 = x;
S		g->t.clipy0 = y;
S		g->t.clipx1 = x + mf_character_width(font, c) + font->baseline_x;
S		g->t.clipy1 = y + font->height;
S		g->t.color = color;
S		mf_render_character(font, x, y, c, drawcharline, g);
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGFillChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color, color_t bgcolor) {
S		MUTEX_ENTER(g);
S		g->p.cx = mf_character_width(font, c) + font->baseline_x;
S		g->p.cy = font->height;
S		g->t.font = font;
S		g->t.clipx0 = g->p.x = x;
S		g->t.clipy0 = g->p.y = y;
S		g->t.clipx1 = g->p.x+g->p.cx;
S		g->t.clipy1 = g->p.y+g->p.cy;
S		g->t.color = color;
S		g->t.bgcolor = g->p.color = bgcolor;
S
S		TEST_CLIP_AREA(g) {
S			fillarea(g);
S			mf_render_character(font, x, y, c, fillcharline, g);
S		}
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGDrawString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color) {
S		MUTEX_ENTER(g);
S		g->t.font = font;
S		g->t.clipx0 = x;
S		g->t.clipy0 = y;
S		g->t.clipx1 = x + mf_get_string_width(font, str, 0, 0) + font->baseline_x;
S		g->t.clipy1 = y + font->height;
S		g->t.color = color;
S
S		mf_render_aligned(font, x+font->baseline_x, y, MF_ALIGN_LEFT, str, 0, drawcharglyph, g);
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGFillString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color, color_t bgcolor) {
S		MUTEX_ENTER(g);
S		g->p.cx = mf_get_string_width(font, str, 0, 0) + font->baseline_x;
S		g->p.cy = font->height;
S		g->t.font = font;
S		g->t.clipx0 = g->p.x = x;
S		g->t.clipy0 = g->p.y = y;
S		g->t.clipx1 = g->p.x+g->p.cx;
S		g->t.clipy1 = g->p.y+g->p.cy;
S		g->t.color = color;
S		g->t.bgcolor = g->p.color = bgcolor;
S
S		TEST_CLIP_AREA(g) {
S			fillarea(g);
S			mf_render_aligned(font, x+font->baseline_x, y, MF_ALIGN_LEFT, str, 0, fillcharglyph, g);
S		}
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGDrawStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, justify_t justify) {
S		#if GDISP_NEED_TEXT_WORDWRAP
S			wrapParameters_t wrapParameters;
S			uint16_t nbrLines;
S		#endif
S
S		MUTEX_ENTER(g);
S
S		g->t.font = font;
S		g->t.clipx0 = x;
S		g->t.clipy0 = y;
S		g->t.clipx1 = x+cx;
S		g->t.clipy1 = y+cy;
S		g->t.color = color;
S
S		/* Select the anchor position */
S		switch(justify) {
S		case justifyCenter:
S			x += (cx + 1) / 2;
S			break;
S		case justifyRight:
S			x += cx;
S			break;
S		default:	// justifyLeft
S			x += font->baseline_x;
S			break;
S		}
S
S		/* Render */
S		#if GDISP_NEED_TEXT_WORDWRAP
S			wrapParameters.x = x;
S			wrapParameters.y = y;
S			wrapParameters.font = font;
S			wrapParameters.justify = justify;
S			wrapParameters.g = g;
S
S			// Count the number of lines
S			nbrLines = 0;
S			mf_wordwrap(font, cx, str, mf_countline_callback, &nbrLines);
S			wrapParameters.y += (cy+1 - nbrLines*font->height)/2;
S			
S			mf_wordwrap(font, cx, str, mf_fillline_callback, &wrapParameters);
S		#else
S			y += (cy+1 - font->height)/2;
S			mf_render_aligned(font, x, y, justify, str, 0, drawcharglyph, g);
S		#endif
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	void gdispGFillStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, color_t bgcolor, justify_t justify) {
S		#if GDISP_NEED_TEXT_WORDWRAP
S			wrapParameters_t wrapParameters;
S			uint16_t nbrLines;
S		#endif
S
S		MUTEX_ENTER(g);
S
S		g->p.cx = cx;
S		g->p.cy = cy;
S		g->t.font = font;
S		g->t.clipx0 = g->p.x = x;
S		g->t.clipy0 = g->p.y = y;
S		g->t.clipx1 = x+cx;
S		g->t.clipy1 = y+cy;
S		g->t.color = color;
S		g->t.bgcolor = g->p.color = bgcolor;
S
S		TEST_CLIP_AREA(g) {
S
S			// background fill
S			fillarea(g);
S
S			/* Select the anchor position */
S			switch(justify) {
S			case justifyCenter:
S				x += (cx + 1) / 2;
S				break;
S			case justifyRight:
S				x += cx;
S				break;
S			default:	// justifyLeft
S				x += font->baseline_x;
S				break;
S			}
S
S			/* Render */
S			#if GDISP_NEED_TEXT_WORDWRAP
S				wrapParameters.x = x;
S				wrapParameters.y = y;
S				wrapParameters.font = font;
S				wrapParameters.justify = justify;
S				wrapParameters.g = g;
S
S
S				// Count the number of lines
S				nbrLines = 0;
S				mf_wordwrap(font, cx, str, mf_countline_callback, &nbrLines);
S				wrapParameters.y += (cy+1 - nbrLines*font->height)/2;
S
S				mf_wordwrap(font, cx, str, mf_fillline_callback, &wrapParameters);
S			#else
S				y += (cy+1 - font->height)/2;
S				mf_render_aligned(font, x, y, justify, str, 0, fillcharglyph, g);
S			#endif
S		}
S
S		autoflush(g);
S		MUTEX_EXIT(g);
S	}
S
S	coord_t gdispGetFontMetric(font_t font, fontmetric_t metric) {
S		/* No mutex required as we only read static data */
S		switch(metric) {
S		case fontHeight:			return font->height;
S		case fontDescendersHeight:	return font->height - font->baseline_y;
S		case fontLineSpacing:		return font->line_height;
S		case fontCharPadding:		return 0;
S		case fontMinWidth:			return font->min_x_advance;
S		case fontMaxWidth:			return font->max_x_advance;
S		case fontBaselineX:			return font->baseline_x;
S		case fontBaselineY:			return font->baseline_y;
S		}
S		return 0;
S	}
S
S	coord_t gdispGetCharWidth(char c, font_t font) {
S		/* No mutex required as we only read static data */
S		return mf_character_width(font, c);
S	}
S
S	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count) {
S		if (!str)
S			return 0;
S
S		// No mutex required as we only read static data
S		#if GDISP_NEED_TEXT_KERNING
S			return mf_get_string_width(font, str, count, TRUE);
S		#else
S			return mf_get_string_width(font, str, count, FALSE);
S		#endif
S	}
S
S	coord_t gdispGetStringWidth(const char* str, font_t font) {
S		return gdispGetStringWidthCount(str, font, 0);
S	}
N#endif
N
Ncolor_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha)
N{
N	uint16_t fg_ratio = alpha + 1;
N	uint16_t bg_ratio = 256 - alpha;
N	uint16_t r, g, b;
N
N	r = RED_OF(fg) * fg_ratio;
X	r = (((fg) & (((1<<(((0x2000|0x0111)>>8) & 0x0F))-1) << ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)))) << (8-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) * fg_ratio;
N	g = GREEN_OF(fg) * fg_ratio;
X	g = (((fg) & (((1<<(((0x2000|0x0111)>>4) & 0x0F))-1) << (((0x2000|0x0111)>>0) & 0x0F))) << (8-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) * fg_ratio;
N	b = BLUE_OF(fg) * fg_ratio;
X	b = (((fg) & (((1<<(((0x2000|0x0111)>>0) & 0x0F))-1) << 0)) << (8-((((0x2000|0x0111)>>0) & 0x0F)+0))) * fg_ratio;
N
N	r += RED_OF(bg) * bg_ratio;
X	r += (((bg) & (((1<<(((0x2000|0x0111)>>8) & 0x0F))-1) << ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)))) << (8-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) * bg_ratio;
N	g += GREEN_OF(bg) * bg_ratio;
X	g += (((bg) & (((1<<(((0x2000|0x0111)>>4) & 0x0F))-1) << (((0x2000|0x0111)>>0) & 0x0F))) << (8-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) * bg_ratio;
N	b += BLUE_OF(bg) * bg_ratio;
X	b += (((bg) & (((1<<(((0x2000|0x0111)>>0) & 0x0F))-1) << 0)) << (8-((((0x2000|0x0111)>>0) & 0x0F)+0))) * bg_ratio;
N
N	r >>= 8;
N	g >>= 8;
N	b >>= 8;
N
N	return RGB2COLOR(r, g, b);
X	return ((((uint8_t)((r) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>8) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) | (((uint8_t)((g) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>4) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) | (((uint8_t)((b) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>0) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>0) & 0x0F)+0))));
N}
N
Ncolor_t gdispContrastColor(color_t color) {
N	uint16_t r, g, b;
N
N	r = RED_OF(color) > 128 ? 0 : 255;
X	r = (((color) & (((1<<(((0x2000|0x0111)>>8) & 0x0F))-1) << ((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F)))) << (8-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) > 128 ? 0 : 255;
N	g = GREEN_OF(color) > 128 ? 0 : 255;
X	g = (((color) & (((1<<(((0x2000|0x0111)>>4) & 0x0F))-1) << (((0x2000|0x0111)>>0) & 0x0F))) << (8-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) > 128 ? 0 : 255;
N	b = BLUE_OF(color) > 128 ? 0 : 255;
X	b = (((color) & (((1<<(((0x2000|0x0111)>>0) & 0x0F))-1) << 0)) << (8-((((0x2000|0x0111)>>0) & 0x0F)+0))) > 128 ? 0 : 255;
N
N	return RGB2COLOR(r, g, b);
X	return ((((uint8_t)((r) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>8) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>8) & 0x0F)+((((0x2000|0x0111)>>0) & 0x0F)+(((0x2000|0x0111)>>4) & 0x0F))))) | (((uint8_t)((g) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>4) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>4) & 0x0F)+(((0x2000|0x0111)>>0) & 0x0F)))) | (((uint8_t)((b) & (0xFF & ~((1<<(8-(((0x2000|0x0111)>>0) & 0x0F)))-1)))) >> (8-((((0x2000|0x0111)>>0) & 0x0F)+0))));
N}
N
N#if (!defined(gdispPackPixels) && !defined(GDISP_PIXELFORMAT_CUSTOM))
X#if (!1L && !0L)
S	void gdispPackPixels(pixel_t *buf, coord_t cx, coord_t x, coord_t y, color_t color) {
S		/* No mutex required as we only read static data */
S		#if defined(GDISP_PIXELFORMAT_RGB888)
S			#error "GDISP: Packed pixels not supported yet"
S		#elif defined(GDISP_PIXELFORMAT_RGB444)
S			#error "GDISP: Packed pixels not supported yet"
S		#elif defined(GDISP_PIXELFORMAT_RGB666)
S			#error "GDISP: Packed pixels not supported yet"
S		#elif
S			#error "GDISP: Unsupported packed pixel format"
S		#endif
S	}
N#endif
N
N#endif /* GFX_USE_GDISP */
L 22 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_fonts.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_fonts.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_TEXT
X#if -1 && 0
S
S#include "mcufont/mcufont.h"
S
S/* Custom flag to indicate dynamically allocated font */
S#define FONT_FLAG_DYNAMIC 0x80
S
S/**
S * Match a pattern against the font name.
S */
Sstatic bool_t matchfont(const char *pattern, const char *name) {
S	while(1) {
S		switch (pattern[0]) {
S		case '*':
S			if (name[0] == 0)
S				return pattern[1] == 0;
S			if (pattern[1] == name[0])
S				pattern++;
S			else
S				name++;
S			break;
S		case 0:
S			return name[0] == 0;
S		default:
S			if (name[0] != pattern[0])
S				return FALSE;
S			pattern++;
S			name++;
S			break;
S		}
S	}
S}
S
Sfont_t gdispOpenFont(const char *name) {
S	const struct mf_font_list_s *fp;
S	
S	
S	// Try the long names first
S	for(fp = mf_get_font_list(); fp; fp = fp->next) {
S		if (matchfont(name, fp->font->full_name))
S			return fp->font;
S	}
S
S	// Try the short names if no long names match
S	for(fp = mf_get_font_list(); fp; fp = fp->next) {
S		if (matchfont(name, fp->font->short_name))
S			return fp->font;
S	}
S	
S	/* Return default font.. better than nothing. */
S	return mf_get_font_list()->font;
S}
S
Svoid gdispCloseFont(font_t font) {
S	if (font->flags & FONT_FLAG_DYNAMIC)
S	{
S		struct mf_font_s *dfont = (struct mf_font_s *)font;
S		
S		/* Make sure that no-one can successfully use font after closing */
S		dfont->render_character = 0;
S		
S		/* Release the allocated memory */
S		gfxFree(dfont);
S	}
S}
S
Sfont_t gdispScaleFont(font_t font, uint8_t scale_x, uint8_t scale_y)
S{
S	struct mf_scaledfont_s *newfont = gfxAlloc(sizeof(struct mf_scaledfont_s));
S	mf_scale_font(newfont, font, scale_x, scale_y);
S	return (font_t)newfont;
S}
S
Sconst char *gdispGetFontName(font_t font) {
S	return font->short_name;
S}
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_TEXT */
L 23 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_pixmap.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_pixmap.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_PIXMAP
X#if -1 && 0
S
S// We undef everything because the system may think we are in a single controller situation
S//	but the pixmap supports adds another virtual display
S#undef GDISP_HARDWARE_DEINIT
S#undef GDISP_HARDWARE_FLUSH
S#undef GDISP_HARDWARE_STREAM_WRITE
S#undef GDISP_HARDWARE_STREAM_READ
S#undef GDISP_HARDWARE_STREAM_POS
S#undef GDISP_HARDWARE_DRAWPIXEL
S#undef GDISP_HARDWARE_CLEARS
S#undef GDISP_HARDWARE_FILLS
S#undef GDISP_HARDWARE_BITFILLS
S#undef GDISP_HARDWARE_SCROLL
S#undef GDISP_HARDWARE_PIXELREAD
S#undef GDISP_HARDWARE_CONTROL
S#undef GDISP_HARDWARE_QUERY
S#undef GDISP_HARDWARE_CLIP
S#define GDISP_HARDWARE_DEINIT			TRUE
S#define GDISP_HARDWARE_DRAWPIXEL		TRUE
S#define GDISP_HARDWARE_PIXELREAD		TRUE
S#define GDISP_HARDWARE_CONTROL			TRUE
S#define IN_PIXMAP_DRIVER				TRUE
S#define GDISP_DRIVER_VMT				GDISPVMT_pixmap
S#define GDISP_DRIVER_VMT_FLAGS			(GDISP_VFLG_DYNAMICONLY|GDISP_VFLG_PIXMAP)
S
S// This pseudo driver currently only supports unpacked formats with more than 8 bits per pixel
S//	that is, we only support GRAY_SCALE and PALETTE with 8 bits per pixel or any unpacked TRUE_COLOR format.
S#if (GDISP_LLD_PIXELFORMAT & GDISP_COLORSYSTEM_GRAYSCALE) && (GDISP_LLD_PIXELFORMAT & 0xFF) != 8
S	#error "GDISP Pixmap: Pixmap's do not currently support the specified GDISP_LLD_PIXELFORMAT"
S#endif
S
S#include "gdisp_driver.h"
S#include "../gdriver/gdriver.h"
S
Stypedef struct pixmap {
S	#if GDISP_NEED_PIXMAP_IMAGE
S		uint8_t		imghdr[8];			// This field must come just before the data member.
S	#endif
S	color_t			pixels[1];			// We really want pixels[0] but some compilers don't allow that even though it is C standard.
S	} pixmap;
S
SGDisplay *gdispPixmapCreate(coord_t width, coord_t height) {
S	GDisplay	*g;
S	pixmap		*p;
S	unsigned	i;
S
S	// Calculate the size of the display surface in bytes
S	i = width*height*sizeof(color_t);
S	if (i < 2*sizeof(coord_t))
S		i = 2*sizeof(coord_t);
S
S	// Allocate the pixmap
S	if (!(p = gfxAlloc(i+sizeof(pixmap)-sizeof(p->pixels))))
S		return 0;
S
S	// Fill in the image header (if required)
S	#if GDISP_NEED_PIXMAP_IMAGE
S		p->imghdr[0] = 'N';
S		p->imghdr[1] = 'I';
S		p->imghdr[2] = (uint8_t)(width >> 8);
S		p->imghdr[3] = (uint8_t)width;
S		p->imghdr[4] = (uint8_t)(height >> 8);
S		p->imghdr[5] = (uint8_t)height;
S		p->imghdr[6] = (uint8_t)(GDISP_PIXELFORMAT >> 8);
S		p->imghdr[7] = (uint8_t)(GDISP_PIXELFORMAT);
S	#endif
S
S	// Save the width and height so the driver can retrieve it.
S	((coord_t *)p->pixels)[0] = width;
S	((coord_t *)p->pixels)[1] = height;
S
S	// Register the driver
S	g = (GDisplay *)gdriverRegister(&GDISPVMT_pixmap->d, p);
S	if (!g)
S		gfxFree(p);
S	return g;
S}
S
Svoid gdispPixmapDelete(GDisplay *g) {
S	if (gvmt(g) != GDISPVMT_pixmap)
S		return;
S	gdriverUnRegister(&g->d);
S}
S
Spixel_t	*gdispPixmapGetBits(GDisplay *g) {
S	if (gvmt(g) != GDISPVMT_pixmap)
S		return 0;
S	return ((pixmap *)g->priv)->pixels;
S}
S
S#if GDISP_NEED_PIXMAP_IMAGE
S	void *gdispPixmapGetMemoryImage(GDisplay *g) {
S		if (gvmt(g) != GDISPVMT_pixmap)
S			return 0;
S		return ((pixmap *)g->priv)->imghdr;
S	}
S#endif
S
S/*===========================================================================*/
S/* Driver exported functions.                                                */
S/*===========================================================================*/
S
SLLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
S	// The user api function should have already allocated and initialised the pixmap
S	//	structure and put it into the priv member during driver initialisation.
S	if (!g->priv)
S		return FALSE;
S
S	// Initialize the GDISP structure
S	//	Width and height were saved into the start of the framebuffer.
S	g->g.Width = ((coord_t *)((pixmap *)g->priv)->pixels)[0];
S	g->g.Height = ((coord_t *)((pixmap *)g->priv)->pixels)[1];
S	g->g.Backlight = 100;
S	g->g.Contrast = 50;
S	g->g.Orientation = GDISP_ROTATE_0;
S	g->g.Powermode = powerOn;
S	g->board = 0;
S
S	return TRUE;
S}
S
SLLDSPEC	void gdisp_lld_deinit(GDisplay *g) {
S	gfxFree(g->priv);
S}
S
SLLDSPEC void gdisp_lld_draw_pixel(GDisplay *g) {
S	unsigned	pos;
S
S	#if GDISP_NEED_CONTROL
S		switch(g->g.Orientation) {
S		case GDISP_ROTATE_0:
S		default:
S			pos = g->p.y * g->g.Width + g->p.x;
S			break;
S		case GDISP_ROTATE_90:
S			pos = (g->g.Width-g->p.x-1) * g->g.Height + g->p.y;
S			break;
S		case GDISP_ROTATE_180:
S			pos = (g->g.Height-g->p.y-1) * g->g.Width + g->g.Width-g->p.x-1;
S			break;
S		case GDISP_ROTATE_270:
S			pos = g->p.x * g->g.Height + g->g.Height-g->p.y-1;
S			break;
S		}
S	#else
S		pos = g->p.y * g->g.Width + g->p.x;
S	#endif
S
S	((pixmap *)(g)->priv)->pixels[pos] = g->p.color;
S}
S
SLLDSPEC	color_t gdisp_lld_get_pixel_color(GDisplay *g) {
S	unsigned		pos;
S
S	#if GDISP_NEED_CONTROL
S		switch(g->g.Orientation) {
S		case GDISP_ROTATE_0:
S		default:
S			pos = g->p.y * g->g.Width + g->p.x;
S			break;
S		case GDISP_ROTATE_90:
S			pos = (g->g.Width-g->p.x-1) * g->g.Height + g->p.y;
S			break;
S		case GDISP_ROTATE_180:
S			pos = (g->g.Height-g->p.y-1) * g->g.Width + g->g.Width-g->p.x-1;
S			break;
S		case GDISP_ROTATE_270:
S			pos = g->p.x * g->g.Height + g->g.Height-g->p.y-1;
S			break;
S		}
S	#else
S		pos = g->p.y * g->g.Width + g->p.x;
S	#endif
S
S	return ((pixmap *)(g)->priv)->pixels[pos];
S}
S
S#if GDISP_NEED_CONTROL
S	LLDSPEC void gdisp_lld_control(GDisplay *g) {
S		switch(g->p.x) {
S		case GDISP_CONTROL_ORIENTATION:
S			if (g->g.Orientation == (orientation_t)g->p.ptr)
S				return;
S			switch((orientation_t)g->p.ptr) {
S				case GDISP_ROTATE_0:
S				case GDISP_ROTATE_180:
S					if (g->g.Orientation == GDISP_ROTATE_90 || g->g.Orientation == GDISP_ROTATE_270) {
S						coord_t		tmp;
S
S						tmp = g->g.Width;
S						g->g.Width = g->g.Height;
S						g->g.Height = tmp;
S					}
S					break;
S				case GDISP_ROTATE_90:
S				case GDISP_ROTATE_270:
S					if (g->g.Orientation == GDISP_ROTATE_0 || g->g.Orientation == GDISP_ROTATE_180) {
S						coord_t		tmp;
S
S						tmp = g->g.Width;
S						g->g.Width = g->g.Height;
S						g->g.Height = tmp;
S					}
S					break;
S				default:
S					return;
S			}
S			g->g.Orientation = (orientation_t)g->p.ptr;
S			return;
S		}
S	}
S#endif
S
N#endif /* GFX_USE_GDISP */
L 24 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE
X#if -1 && 0
S
S#include "gdisp_image_support.h"
S
S#if GDISP_NEED_IMAGE_NATIVE
S	extern gdispImageError gdispImageOpen_NATIVE(gdispImage *img);
S	extern void gdispImageClose_NATIVE(gdispImage *img);
S	extern gdispImageError gdispImageCache_NATIVE(gdispImage *img);
S	extern gdispImageError gdispGImageDraw_NATIVE(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	extern delaytime_t gdispImageNext_NATIVE(gdispImage *img);
S#endif
S
S#if GDISP_NEED_IMAGE_GIF
S	extern gdispImageError gdispImageOpen_GIF(gdispImage *img);
S	extern void gdispImageClose_GIF(gdispImage *img);
S	extern gdispImageError gdispImageCache_GIF(gdispImage *img);
S	extern gdispImageError gdispGImageDraw_GIF(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	extern delaytime_t gdispImageNext_GIF(gdispImage *img);
S#endif
S
S#if GDISP_NEED_IMAGE_BMP
S	extern gdispImageError gdispImageOpen_BMP(gdispImage *img);
S	extern void gdispImageClose_BMP(gdispImage *img);
S	extern gdispImageError gdispImageCache_BMP(gdispImage *img);
S	extern gdispImageError gdispGImageDraw_BMP(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	extern delaytime_t gdispImageNext_BMP(gdispImage *img);
S#endif
S
S#if GDISP_NEED_IMAGE_JPG
S	extern gdispImageError gdispImageOpen_JPG(gdispImage *img);
S	extern void gdispImageClose_JPG(gdispImage *img);
S	extern gdispImageError gdispImageCache_JPG(gdispImage *img);
S	extern gdispImageError gdispGImageDraw_JPG(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	extern delaytime_t gdispImageNext_JPG(gdispImage *img);
S#endif
S
S#if GDISP_NEED_IMAGE_PNG
S	extern gdispImageError gdispImageOpen_PNG(gdispImage *img);
S	extern void gdispImageClose_PNG(gdispImage *img);
S	extern gdispImageError gdispImageCache_PNG(gdispImage *img);
S	extern gdispImageError gdispGImageDraw_PNG(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy);
S	extern delaytime_t gdispImageNext_PNG(gdispImage *img);
S#endif
S
S/* The structure defining the routines for image drawing */
Stypedef struct gdispImageHandlers {
S	gdispImageError	(*open)(gdispImage *img);			/* The open function */
S	void			(*close)(gdispImage *img);			/* The close function */
S	gdispImageError	(*cache)(gdispImage *img);			/* The cache function */
S	gdispImageError	(*draw)(GDisplay *g,
S							gdispImage *img,
S							coord_t x, coord_t y,
S							coord_t cx, coord_t cy,
S							coord_t sx, coord_t sy);	/* The draw function */
S	delaytime_t		(*next)(gdispImage *img);			/* The next frame function */
S} gdispImageHandlers;
S
Sstatic gdispImageHandlers ImageHandlers[] = {
S	#if GDISP_NEED_IMAGE_NATIVE
S		{	gdispImageOpen_NATIVE,	gdispImageClose_NATIVE,
S			gdispImageCache_NATIVE,	gdispGImageDraw_NATIVE,	gdispImageNext_NATIVE,
S		},
S	#endif
S	#if GDISP_NEED_IMAGE_GIF
S		{	gdispImageOpen_GIF,		gdispImageClose_GIF,
S			gdispImageCache_GIF,	gdispGImageDraw_GIF,	gdispImageNext_GIF,
S		},
S	#endif
S	#if GDISP_NEED_IMAGE_BMP
S		{	gdispImageOpen_BMP,		gdispImageClose_BMP,
S			gdispImageCache_BMP,	gdispGImageDraw_BMP,	gdispImageNext_BMP,
S		},
S	#endif
S	#if GDISP_NEED_IMAGE_JPG
S		{	gdispImageOpen_JPG,		gdispImageClose_JPG,
S			gdispImageCache_JPG,	gdispGImageDraw_JPG,	gdispImageNext_JPG,
S		},
S	#endif
S	#if GDISP_NEED_IMAGE_PNG
S		{	gdispImageOpen_PNG,		gdispImageClose_PNG,
S			gdispImageCache_PNG,	gdispGImageDraw_PNG,	gdispImageNext_PNG,
S		},
S	#endif
S};
S
Svoid gdispImageInit(gdispImage *img) {
S	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
S}
S
SgdispImageError gdispImageOpenGFile(gdispImage *img, GFILE *f) {
S	gdispImageError err;
S
S	if (!f)
S		return GDISP_IMAGE_ERR_NOSUCHFILE;
S	img->f = f;
S	img->bgcolor = White;
S	for(img->fns = ImageHandlers; img->fns < ImageHandlers+sizeof(ImageHandlers)/sizeof(ImageHandlers[0]); img->fns++) {
S		err = img->fns->open(img);
S		if (err != GDISP_IMAGE_ERR_BADFORMAT) {
S			if ((err & GDISP_IMAGE_ERR_UNRECOVERABLE))
S				goto unrecoverable;
S
S			// Everything is possible
S			return err;
S		}
S
S		// Try the next decoder
S		gfileSetPos(img->f, 0);
S	}
S
S	err = GDISP_IMAGE_ERR_BADFORMAT;
S	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
S
Sunrecoverable:
S	gfileClose(img->f);
S	img->f = 0;
S	img->flags = 0;
S	img->fns = 0;
S	img->priv = 0;
S	return err;
S}
S
Svoid gdispImageClose(gdispImage *img) {
S	if (img->fns)
S		img->fns->close(img);
S	gfileClose(img->f);
S	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
S	img->flags = 0;
S	img->fns = 0;
S	img->priv = 0;
S}
S
Sbool_t gdispImageIsOpen(gdispImage *img) {
S	return img->type != GDISP_IMAGE_TYPE_UNKNOWN && img->fns != 0;
S}
S
Svoid gdispImageSetBgColor(gdispImage *img, color_t bgcolor) {
S	img->bgcolor = bgcolor;
S}
S
SgdispImageError gdispImageCache(gdispImage *img) {
S	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
S	return img->fns->cache(img);
S}
S
SgdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
S
S	// Check on window
S	if (cx <= 0 || cy <= 0) return GDISP_IMAGE_ERR_OK;
S	if (sx < 0) sx = 0;
S	if (sy < 0) sy = 0;
S	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
S	if (sx + cx > img->width)  cx = img->width - sx;
S	if (sy + cy > img->height) cy = img->height - sy;
S
S	// Draw
S	return img->fns->draw(g, img, x, y, cx, cy, sx, sy);
S}
S
Sdelaytime_t gdispImageNext(gdispImage *img) {
S	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
S	return img->fns->next(img);
S}
S
S// Helper Routines
Svoid *gdispImageAlloc(gdispImage *img, size_t sz) {
S	#if GDISP_NEED_IMAGE_ACCOUNTING
S		void *ptr;
S
S		ptr = gfxAlloc(sz);
S		if (ptr) {
S			img->memused += sz;
S			if (img->memused > img->maxmemused)
S				img->maxmemused = img->memused;
S		}
S		return ptr;
S	#else
S		(void) img;
S		return gfxAlloc(sz);
S	#endif
S}
S
Svoid gdispImageFree(gdispImage *img, void *ptr, size_t sz) {
S	#if GDISP_NEED_IMAGE_ACCOUNTING
S		gfxFree(ptr);
S		img->memused -= sz;
S	#else
S		(void) img;
S		(void) sz;
S		gfxFree(ptr);
S	#endif
S}
S
S#if GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_LITTLE && GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_BIG \
S		&& GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_WBDWL && GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_WLDWB
X#if GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_LITTLE && GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_BIG 		&& GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_WBDWL && GFX_CPU_ENDIAN != GFX_CPU_ENDIAN_WLDWB
S
S	union wbyteorder_u {
S		uint8_t		b[2];
S		uint32_t	w;
S	};
S	union dwbyteorder_u {
S		uint8_t		b[4];
S		uint32_t	l;
S	};
S
S	uint16_t gdispImageH16toLE16(uint16_t w) {
S		union wbyteorder_u	we;
S
S		we.w = w;
S		return	 (((uint16_t)we.b[0]))|(((uint16_t)we.b[1]) << 8);
S	}
S	uint16_t gdispImageH16toBE16(uint16_t w) {
S		union wbyteorder_u	we;
S
S		we.w = w;
S		return	 (((uint16_t)we.b[0]) << 8)|(((uint16_t)we.b[1]));
S	}
S
S	uint32_t gdispImageH32toLE32(uint32_t dw) {
S		union dwbyteorder_u	we;
S
S		we.l = dw;
S		return	 (((uint32_t)we.b[0]))
S				|(((uint32_t)we.b[1]) << 8)
S				|(((uint32_t)we.b[2]) << 16)
S				|(((uint32_t)we.b[3]) << 24);
S	}
S	uint32_t gdispImageH32toBE32(uint32_t dw) {
S		union dwbyteorder_u	we;
S
S		we.l = dw;
S		return	 (((uint32_t)we.b[0]) << 24)
S				|(((uint32_t)we.b[1]) << 16)
S				|(((uint32_t)we.b[2]) << 8)
S				|(((uint32_t)we.b[3]));
S	}
S#endif
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE */
L 25 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image_native.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image_native.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_NATIVE
X#if -1 && 0 && 0
S
S#include "gdisp_image_support.h"
S
S/**
S * How big a pixel array to allocate for blitting
S * Bigger is faster but uses more RAM.
S */
S#define BLIT_BUFFER_SIZE_NATIVE	32
S
S#define HEADER_SIZE_NATIVE			8
S#define FRAME0POS_NATIVE			(HEADER_SIZE_NATIVE)
S
S/**
S * Helper Routines Needed
S */
Svoid *gdispImageAlloc(gdispImage *img, size_t sz);
Svoid gdispImageFree(gdispImage *img, void *ptr, size_t sz);
S
Stypedef struct gdispImagePrivate_NATIVE {
S	pixel_t		*frame0cache;
S	pixel_t		buf[BLIT_BUFFER_SIZE_NATIVE];
S	} gdispImagePrivate_NATIVE;
S
Svoid gdispImageClose_NATIVE(gdispImage *img) {
S	gdispImagePrivate_NATIVE *	priv;
S
S	priv = (gdispImagePrivate_NATIVE *)img->priv;
S	if (priv) {
S		if (priv->frame0cache)
S			gdispImageFree(img, (void *)priv->frame0cache, img->width * img->height * sizeof(pixel_t));
S		gdispImageFree(img, (void *)priv, sizeof(gdispImagePrivate_NATIVE));
S		img->priv = 0;
S	}
S}
S
SgdispImageError gdispImageOpen_NATIVE(gdispImage *img) {
S	uint8_t		hdr[HEADER_SIZE_NATIVE];
S
S	/* Read the 8 byte header */
S	if (gfileRead(img->f, hdr, 8) != 8)
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	if (hdr[0] != 'N' || hdr[1] != 'I')
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	if (hdr[6] != GDISP_PIXELFORMAT/256 || hdr[7] != (GDISP_PIXELFORMAT & 0xFF))
S		return GDISP_IMAGE_ERR_UNSUPPORTED;		// Unsupported pixel format
S
S	/* We know we are a native format image */
S	img->flags = 0;
S	img->width = (((uint16_t)hdr[2])<<8) | (hdr[3]);
S	img->height = (((uint16_t)hdr[4])<<8) | (hdr[5]);
S	if (img->width < 1 || img->height < 1)
S		return GDISP_IMAGE_ERR_BADDATA;
S	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_NATIVE))))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S	((gdispImagePrivate_NATIVE *)(img->priv))->frame0cache = 0;
S
S	img->type = GDISP_IMAGE_TYPE_NATIVE;
S	return GDISP_IMAGE_ERR_OK;
S}
S
SgdispImageError gdispImageCache_NATIVE(gdispImage *img) {
S	size_t		len;
S	gdispImagePrivate_NATIVE *	priv;
S
S	/* If we are already cached - just return OK */
S	priv = (gdispImagePrivate_NATIVE *)img->priv;
S	if (priv->frame0cache)
S		return GDISP_IMAGE_ERR_OK;
S
S	/* We need to allocate the cache */
S	len = img->width * img->height * sizeof(pixel_t);
S	priv->frame0cache = (pixel_t *)gdispImageAlloc(img, len);
S	if (!priv->frame0cache)
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Read the entire bitmap into cache */
S	gfileSetPos(img->f, FRAME0POS_NATIVE);
S	if (gfileRead(img->f, priv->frame0cache, len) != len)
S		return GDISP_IMAGE_ERR_BADDATA;
S
S	return GDISP_IMAGE_ERR_OK;
S}
S
SgdispImageError gdispGImageDraw_NATIVE(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	coord_t		mx, mcx;
S	size_t		pos, len;
S	gdispImagePrivate_NATIVE *	priv;
S
S	priv = (gdispImagePrivate_NATIVE *)img->priv;
S
S	/* Check some reasonableness */
S	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
S	if (sx + cx > img->width) cx = img->width - sx;
S	if (sy + cy > img->height) cy = img->height - sy;
S
S	/* Draw from the image cache - if it exists */
S	if (priv->frame0cache) {
S		gdispGBlitArea(g, x, y, cx, cy, sx, sy, img->width, priv->frame0cache);
S		return GDISP_IMAGE_ERR_OK;
S	}
S
S	/* For this image decoder we cheat and just seek straight to the region we want to display */
S	pos = FRAME0POS_NATIVE + (img->width * sy + sx) * sizeof(pixel_t);
S
S	/* Cycle through the lines */
S	for(;cy;cy--, y++) {
S		/* Move to the start of the line */
S		gfileSetPos(img->f, pos);
S
S		/* Draw the line in chunks using BitBlt */
S		for(mx = x, mcx = cx; mcx > 0; mcx -= len, mx += len) {
S			// Read the data
S			len = gfileRead(img->f,
S						priv->buf,
S						mcx > BLIT_BUFFER_SIZE_NATIVE ? (BLIT_BUFFER_SIZE_NATIVE*sizeof(pixel_t)) : (mcx * sizeof(pixel_t)))
S					/ sizeof(pixel_t);
S			if (!len)
S				return GDISP_IMAGE_ERR_BADDATA;
S
S			/* Blit the chunk of data */
S			gdispGBlitArea(g, mx, y, len, 1, 0, 0, len, priv->buf);
S		}
S
S		/* Get the position for the start of the next line */
S		pos += img->width*sizeof(pixel_t);
S	}
S
S	return GDISP_IMAGE_ERR_OK;
S}
S
Sdelaytime_t gdispImageNext_NATIVE(gdispImage *img) {
S	(void) img;
S
S	/* No more frames/pages */
S	return TIME_INFINITE;
S}
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_NATIVE */
L 26 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image_gif.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image_gif.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_GIF
X#if -1 && 0 && 0
S
S#include "gdisp_image_support.h"
S
S/**
S * How big an array to allocate for blitting (in pixels)
S * Bigger is faster but uses more RAM.
S */
S#define BLIT_BUFFER_SIZE_GIF	32
S
S// We need a special error to indicate the end of file (which may not actually be an error)
S#define GDISP_IMAGE_GIF_EOF		((gdispImageError)-1)
S#define GDISP_IMAGE_GIF_LOOP	((gdispImageError)-2)
S
S#define GIF_MAX_CODE_BITS		12
S#define GIF_CODE_MAX			((1<<GIF_MAX_CODE_BITS)-1)	// Maximum legal code value
S#define GIF_CODE_FLUSH			(GIF_CODE_MAX+1)			// Illegal code to signal flush
S#define GIF_CODE_FIRST			(GIF_CODE_MAX+2)			// Illegal code to signal first
S#define GIF_CODE_NONE			(GIF_CODE_MAX+3)			// Illegal code to signal empty
S
S// Convert bits to masks for that number of bits
Sstatic const uint16_t GifBitMask[] = {
S		0x0000, 0x0001, 0x0003, 0x0007,
S		0x000f, 0x001f, 0x003f, 0x007f,
S		0x00ff, 0x01ff, 0x03ff, 0x07ff,
S		0x0fff
S		};
S
S// Structure for decoding a single frame
Stypedef struct gifimgdecode {
S	uint8_t		blocksz;								// The size of the block currently being processed
S	uint8_t		maxpixel;								// The maximum allowed pixel value
S	uint8_t		bitsperpixel;
S	uint8_t		bitspercode;
S	uint8_t		shiftbits;
S	uint16_t	maxcodesz;
S	uint16_t	stackcnt;								// The number of items on the stack
S	uint16_t	code_clear;
S	uint16_t	code_eof;
S	uint16_t	code_max;
S	uint16_t	code_last;
S	uint32_t	shiftdata;
S	color_t *	palette;
S	uint8_t		buf[BLIT_BUFFER_SIZE_GIF];					// Buffer for decoded pixels
S	uint16_t	prefix[1<<GIF_MAX_CODE_BITS];				// The LZW table
S    uint8_t		suffix[1<<GIF_MAX_CODE_BITS]; 				// So we can trace the codes
S    uint8_t 	stack[1<<GIF_MAX_CODE_BITS];				// Decoded pixels might be stacked here
S} gifimgdecode;
S
S// The data on a single frame
Stypedef struct gifimgframe {
S	coord_t				x, y;							// position relative to full image
S	coord_t				width, height;					// size of frame
S	uint16_t			delay;							// delay after processing
S	uint8_t				flags;							// Local flags
S		#define GIFL_TRANSPARENT	0x01					// There exists a transparent color
S		#define GIFL_DISPOSECLEAR	0x02					// Dispose this frame by clearing
S		#define GIFL_DISPOSEREST	0x04					// Dispose this frame by restoring
S		#define GIFL_INTERLACE		0x08					// Current frame is interlaced
S	uint8_t				paltrans;						// Transparency
S	uint16_t			palsize;						// Local palette size
S	size_t				posstart;						// The file position of the start of the image
S	size_t				pospal;							// The file position of the palette
S	size_t				posimg;							// The file position of the image bits
S	size_t				posend;							// The file position of the end of the frame
S} gifimgframe;
S
S// The data for a cache
Stypedef struct gifimgcache {
S	gifimgframe			frame;
S	color_t *			palette;						// Local palette
S	uint8_t *			imagebits;						// Image bits - only saved when caching
S	struct gifimgcache *next;							// Next cached frame
S} gifimgcache;
S
S// The data for a dispose area
Stypedef struct gifimgdispose {
S	uint8_t				flags;							// Frame flags
S	uint8_t				paltrans;						// Transparency
S	coord_t				x, y;							// position relative to full image
S	coord_t				width, height;					// size of dispose area
S} gifimgdispose;
S
Stypedef struct gdispImagePrivate_GIF {
S	uint8_t			flags;						// Flags (global)
S		#define GIF_LOOP			0x01			// Loop back to first frame
S		#define GIF_LOOPFOREVER		0x02			// Looping is forever
S	uint8_t			bgcolor;					// Background Color (global)
S	uint16_t		loops;						// Remaining frame loops (if animated)
S	uint16_t		palsize;					// Global palette size (global)
S	pixel_t			*palette;					// Global palette (global)
S	size_t			frame0pos;					// The position of the first frame
S	gifimgcache *	cache;						// The list of cached frames
S	gifimgcache *	curcache;					// The cache of the current frame (if created)
S	gifimgdecode *	decode;						// The decode data for the decode in progress
S	gifimgframe		frame;
S	gifimgdispose	dispose;
S	pixel_t			buf[BLIT_BUFFER_SIZE_GIF];	// Buffer for reading and blitting
S	} gdispImagePrivate_GIF;
S
S/**
S * Get ready for decoding a frame.
S *
S * Pre:		Frame info has been read.
S */
Sstatic gdispImageError startDecodeGif(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgdecode *			decode;
S	uint16_t				cnt;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S
S	// We need the decode ram, and possibly a palette
S	if (!(decode = (gifimgdecode *)gdispImageAlloc(img, sizeof(gifimgdecode)+priv->frame.palsize*sizeof(color_t))))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	// We currently have not read any image data block
S	decode->blocksz = 0;
S
S	// Set the palette
S	if (priv->frame.palsize) {
S		// Local palette
S		decode->maxpixel = priv->frame.palsize-1;
S		decode->palette = (color_t *)(decode+1);
S		gfileSetPos(img->f, priv->frame.pospal);
S		for(cnt = 0; cnt < priv->frame.palsize; cnt++) {
S			if (gfileRead(img->f, &decode->buf, 3) != 3)
S				goto baddatacleanup;
S			decode->palette[cnt] = RGB2COLOR(decode->buf[0], decode->buf[1], decode->buf[2]);
S		}
S	} else if (priv->palette) {
S		// Global palette
S		decode->maxpixel = priv->palsize-1;
S		decode->palette = priv->palette;
S	} else {
S		// Oops - we must have a palette
S		goto baddatacleanup;
S	}
S
S	// Get the initial lzw code size and values
S	gfileSetPos(img->f, priv->frame.posimg);
S	if (gfileRead(img->f, &decode->bitsperpixel, 1) != 1 || decode->bitsperpixel >= GIF_MAX_CODE_BITS)
S		goto baddatacleanup;
S	decode->code_clear = 1 << decode->bitsperpixel;
S	decode->code_eof = decode->code_clear + 1;
S	decode->code_max = decode->code_clear + 2;
S	decode->code_last = GIF_CODE_NONE;
S	decode->bitspercode = decode->bitsperpixel+1;
S	decode->maxcodesz = 1 << decode->bitspercode;
S	decode->shiftbits = 0;
S	decode->shiftdata = 0;
S	decode->stackcnt = 0;
S	for(cnt = 0; cnt <= GIF_CODE_MAX; cnt++)
S		decode->prefix[cnt] = GIF_CODE_NONE;
S
S	// All ready to go
S	priv->decode = decode;
S	return GDISP_IMAGE_ERR_OK;
S
Sbaddatacleanup:
S	gdispImageFree(img, decode, sizeof(gifimgdecode)+priv->frame.palsize*sizeof(color_t));
S	return GDISP_IMAGE_ERR_BADDATA;
S}
S
S/**
S * Stop decoding a frame.
S *
S * Pre:		Frame info has been read.
S */
Sstatic void stopDecodeGif(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S
S	// Free the decode data
S	if (priv->decode) {
S		gdispImageFree(img, (void *)priv->decode, sizeof(gifimgdecode)+priv->frame.palsize*sizeof(color_t));
S		priv->decode = 0;
S	}
S}
S
Sstatic uint16_t getPrefixGif(gifimgdecode *decode, uint16_t code) {
S	uint16_t i;
S
S	for(i=0; code > decode->code_clear && i <= GIF_CODE_MAX; i++, code = decode->prefix[code]) {
S		if (code > GIF_CODE_MAX)
S			return GIF_CODE_NONE;
S	}
S    return code;
S}
S
S/**
S * Decode some pixels from a frame.
S *
S * Pre:		We are ready for decoding.
S *
S * Return:	The number of pixels decoded 0 .. BLIT_BUFFER_SIZE_GIF-1. 0 means EOF
S *
S * Note:	The resulting pixels are stored in decode->buf
S */
Sstatic uint16_t getBytesGif(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgdecode *			decode;
S	uint16_t				cnt;
S	uint16_t				code, prefix;
S	uint8_t					bdata;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S	decode = priv->decode;
S	cnt = 0;
S
S	// At EOF
S	if (decode->code_last == decode->code_eof)
S		return 0;
S
S	while(cnt < sizeof(decode->buf)) {
S		// Use the stack up first
S		if (decode->stackcnt > 0) {
S			decode->buf[cnt++] = decode->stack[--decode->stackcnt];
S			continue;
S		}
S
S	    // Get another code - a code is made up of decode->bitspercode bits.
S	    while (decode->shiftbits < decode->bitspercode) {
S	    	// Get a byte - we may have to start a new data block
S	    	if ((!decode->blocksz && (gfileRead(img->f, &decode->blocksz, 1) != 1 || !decode->blocksz))
S	    			|| gfileRead(img->f, &bdata, 1) != 1) {
S	    		// Pretend we got the EOF code - some encoders seem to just end the file
S	    		decode->code_last = decode->code_eof;
S	    		return cnt;
S	    	}
S   	    	decode->blocksz--;
S
S	        decode->shiftdata |= ((unsigned long)bdata) << decode->shiftbits;
S	        decode->shiftbits += 8;
S	    }
S	    code = decode->shiftdata & GifBitMask[decode->bitspercode];
S	    decode->shiftdata >>= decode->bitspercode;
S	    decode->shiftbits -= decode->bitspercode;
S	    /**
S	     * If code cannot fit into bitspercode bits we must raise its size.
S	     * Note that codes above GIF_CODE_MAX are used for special signaling.
S	     * If we're using GIF_MAX_CODE_BITS bits already and we're at the max code, just
S	     * keep using the table as it is, don't increment decode->bitspercode.
S	     */
S	    if (decode->code_max < GIF_CODE_MAX + 2 && ++decode->code_max > decode->maxcodesz && decode->bitspercode < GIF_MAX_CODE_BITS) {
S	        decode->maxcodesz <<= 1;
S	        decode->bitspercode++;
S	    }
S
S		// EOF - the appropriate way to stop decoding
S		if (code == decode->code_eof) {
S			// Skip to the end of the data blocks
S			do {
S				gfileSetPos(img->f, gfileGetPos(img->f)+decode->blocksz);
S			} while (gfileRead(img->f, &decode->blocksz, 1) == 1 && decode->blocksz);
S
S			// Mark the end
S			decode->code_last = decode->code_eof;
S			break;
S		}
S
S		if (code == decode->code_clear) {
S			// Start again
S			for(prefix = 0; prefix <= GIF_CODE_MAX; prefix++)
S				decode->prefix[prefix] = GIF_CODE_NONE;
S			decode->code_max = decode->code_eof + 1;
S			decode->bitspercode = decode->bitsperpixel + 1;
S			decode->maxcodesz = 1 << decode->bitspercode;
S			decode->code_last = GIF_CODE_NONE;
S			continue;
S		}
S
S		if (code < decode->code_clear) {
S			// Simple unencoded pixel - add it
S			decode->buf[cnt++] = code;
S
S		} else {
S			/**
S			 * Its a LZW code - trace the linked list until the prefix is a
S			 * valid pixel while pushing the suffix pixels on the stack.
S			 * If done, pop the stack in reverse order adding the pixels
S			 */
S			if (decode->prefix[code] != GIF_CODE_NONE)
S				prefix = code;
S
S			/**
S			 * Only allowed if the code equals the partial code.
S			 * In that case code = XXXCode, CrntCode or the
S			 * prefix code is last code and the suffix char is
S			 * exactly the prefix of last code!
S			 */
S			else if (code == decode->code_max - 2 && decode->stackcnt < sizeof(decode->stack)) {
S				prefix = decode->code_last;
S				decode->suffix[decode->code_max - 2] = decode->stack[decode->stackcnt++] = getPrefixGif(decode, decode->code_last);
S			} else
S				return 0;
S
S			/**
S			 * If the image is OK we should not get a GIF_CODE_NONE while tracing.
S			 * To prevent looping with a bad image we use StackPtr as loop counter
S			 * and stop before overflowing Stack[].
S			 */
S			while (decode->stackcnt < sizeof(decode->stack) && prefix > decode->code_clear && prefix <= GIF_CODE_MAX) {
S				decode->stack[decode->stackcnt++] = decode->suffix[prefix];
S				prefix = decode->prefix[prefix];
S			}
S			if (decode->stackcnt >= sizeof(decode->stack) || prefix > GIF_CODE_MAX)
S				return 0;
S
S			/* Push the last character on stack: */
S			decode->stack[decode->stackcnt++] = prefix;
S		}
S
S		if (decode->code_last != GIF_CODE_NONE && decode->prefix[decode->code_max - 2] == GIF_CODE_NONE) {
S			decode->prefix[decode->code_max - 2] = decode->code_last;
S
S			/* Only allowed if code is exactly the running code:
S			* In that case code = XXXCode, CrntCode or the
S			* prefix code is last code and the suffix char is
S			* exactly the prefix of last code! */
S			decode->suffix[decode->code_max - 2] = getPrefixGif(decode, code == decode->code_max - 2 ? decode->code_last : code);
S		}
S		decode->code_last = code;
S	}
S	return cnt;
S}
S
S/**
S * Read the info on a frame.
S *
S * Pre:		The file position is at the start of the frame.
S */
Sstatic gdispImageError initFrameGif(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgcache *			cache;
S	uint8_t					blocktype;
S	uint8_t					blocksz;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S
S	// Save the dispose info from the existing frame
S	priv->dispose.flags = priv->frame.flags;
S	priv->dispose.paltrans = priv->frame.paltrans;
S	priv->dispose.x = priv->frame.x;
S	priv->dispose.y = priv->frame.y;
S	priv->dispose.width = priv->frame.width;
S	priv->dispose.height = priv->frame.height;
S
S	// Check for a cached version of this image
S	for(cache=priv->cache; cache && cache->frame.posstart <= (size_t)gfileGetPos(img->f); cache=cache->next) {
S		if (cache->frame.posstart == (size_t)gfileGetPos(img->f)) {
S			priv->frame = cache->frame;
S			priv->curcache = cache;
S			return GDISP_IMAGE_ERR_OK;
S		}
S	}
S
S	// Get ready for a new image
S	priv->curcache = 0;
S	priv->frame.posstart = gfileGetPos(img->f);
S	priv->frame.flags = 0;
S	priv->frame.delay = 0;
S	priv->frame.palsize = 0;
S
S	// Process blocks until we reach the image descriptor
S	while(1) {
S		if (gfileRead(img->f, &blocktype, 1) != 1)
S			return GDISP_IMAGE_ERR_BADDATA;
S
S		switch(blocktype) {
S		case 0x2C:			//',' - IMAGE_DESC_RECORD_TYPE;
S			// Read the Image Descriptor
S			if (gfileRead(img->f, priv->buf, 9) != 9)
S				return GDISP_IMAGE_ERR_BADDATA;
S			priv->frame.x = gdispImageGetAlignedLE16(priv->buf, 0);
S			priv->frame.y = gdispImageGetAlignedLE16(priv->buf, 2);
S			priv->frame.width = gdispImageGetAlignedLE16(priv->buf, 4);
S			priv->frame.height = gdispImageGetAlignedLE16(priv->buf, 6);
S			if (((uint8_t *)priv->buf)[8] & 0x80)				// Local color table?
S				priv->frame.palsize = 2 << (((uint8_t *)priv->buf)[8] & 0x07);
S			if (((uint8_t *)priv->buf)[8] & 0x40)				// Interlaced?
S				priv->frame.flags |= GIFL_INTERLACE;
S
S			// We are ready to go for the actual palette read and image decode
S			priv->frame.pospal = gfileGetPos(img->f);
S			priv->frame.posimg = priv->frame.pospal+priv->frame.palsize*3;
S			priv->frame.posend = 0;
S
S			// Mark this as an animated image if more than 1 frame.
S			if (priv->frame.posstart != priv->frame0pos)
S				img->flags |= GDISP_IMAGE_FLG_ANIMATED;
S			return GDISP_IMAGE_ERR_OK;
S
S		case 0x21:			//'!' - EXTENSION_RECORD_TYPE;
S			// Read the extension type
S			if (gfileRead(img->f, &blocktype, 1) != 1)
S				return GDISP_IMAGE_ERR_BADDATA;
S
S			switch(blocktype) {
S			case 0xF9:			// EXTENSION - Graphics Control Block
S				// Read the GCB
S				if (gfileRead(img->f, priv->buf, 6) != 6)
S					return GDISP_IMAGE_ERR_BADDATA;
S				// Check we have read a 4 byte data block and a data block terminator (0)
S				if (((uint8_t *)priv->buf)[0] != 4 || ((uint8_t *)priv->buf)[5] != 0)
S					return GDISP_IMAGE_ERR_BADDATA;
S				// Process the flags
S				switch(((uint8_t *)priv->buf)[1] & 0x1C) {
S				case 0x00: case 0x04:												break;		// Dispose = do nothing
S				case 0x08:				priv->frame.flags |= GIFL_DISPOSECLEAR;		break;		// Dispose = clear
S				case 0x0C: case 0x10:	priv->frame.flags |= GIFL_DISPOSEREST;		break;		// Dispose = restore. Value 0x10 is a hack for bad encoders
S				default:				return GDISP_IMAGE_ERR_UNSUPPORTED;
S				}
S				if (((uint8_t *)priv->buf)[1] & 0x01) {
S					priv->frame.flags |= GIFL_TRANSPARENT;
S					img->flags |= GDISP_IMAGE_FLG_TRANSPARENT;		// We set this but never clear it
S				}
S				if (((uint8_t *)priv->buf)[1] & 0x02)				// Wait for user input?
S					img->flags |= GDISP_IMAGE_FLG_MULTIPAGE;
S				else
S					img->flags &= ~GDISP_IMAGE_FLG_MULTIPAGE;
S				// Process frame delay and the transparent color (if any)
S				priv->frame.delay = gdispImageGetAlignedLE16(priv->buf, 2);
S				priv->frame.paltrans = ((uint8_t *)priv->buf)[4];
S				break;
S
S			case 0xFF:			// EXTENSION - Application
S				// We only handle this for the special Netscape loop counter for animation
S				if (priv->flags & GIF_LOOP)
S					goto skipdatablocks;
S				// Read the Application header
S				if (gfileRead(img->f, priv->buf, 16) != 16)
S					return GDISP_IMAGE_ERR_BADDATA;
S				// Check we have read a 11 byte data block
S				if (((uint8_t *)priv->buf)[0] != 11 && ((uint8_t *)priv->buf)[12] != 3)
S					return GDISP_IMAGE_ERR_BADDATA;
S				// Check the vendor
S				if (((uint8_t *)priv->buf)[1] == 'N' && ((uint8_t *)priv->buf)[2] == 'E' && ((uint8_t *)priv->buf)[3] == 'T'
S						&& ((uint8_t *)priv->buf)[4] == 'S' && ((uint8_t *)priv->buf)[5] == 'C' && ((uint8_t *)priv->buf)[6] == 'A'
S						&& ((uint8_t *)priv->buf)[7] == 'P' && ((uint8_t *)priv->buf)[8] == 'E' && ((uint8_t *)priv->buf)[9] == '2'
S						&& ((uint8_t *)priv->buf)[10] == '.' && ((uint8_t *)priv->buf)[11] == '0') {
S					if (((uint8_t *)priv->buf)[13] == 1) {
S						priv->loops = gdispImageGetAlignedLE16(priv->buf, 14);
S						priv->flags |= GIF_LOOP;
S						if (!priv->loops)
S							priv->flags |= GIF_LOOPFOREVER;
S					}
S				}
S				goto skipdatablocks;
S
S			case 0x01:			// EXTENSION - Plain Text (Graphics Rendering)
S			case 0xFE:			// EXTENSION - Comment
S			default:
S				// 0x00-0x7F (0-127) are the Graphic Rendering blocks
S				if (blocktype <= 0x7F)
S					return GDISP_IMAGE_ERR_UNSUPPORTED;
S				// 0x80-0xF9 (128-249) are the Control blocks
S				// 0xFA-0xFF (250-255) are the Special Purpose blocks
S				// We don't understand this extension - just skip it by skipping data blocks
S			skipdatablocks:
S				while(1) {
S					if (gfileRead(img->f, &blocksz, 1) != 1)
S						return GDISP_IMAGE_ERR_BADDATA;
S					if (!blocksz)
S						break;
S					gfileSetPos(img->f, gfileGetPos(img->f) + blocksz);
S				}
S				break;
S			}
S			break;
S
S		case 0x3B:			//';' - TERMINATE_RECORD_TYPE;
S			// Are we an looping animation
S			if (!(priv->flags & GIF_LOOP))
S				return GDISP_IMAGE_GIF_EOF;
S			if (!(priv->flags & GIF_LOOPFOREVER)) {
S				if (!priv->loops)
S					return GDISP_IMAGE_GIF_EOF;
S				priv->loops--;
S			}
S
S			// Seek back to frame0
S			gfileSetPos(img->f, priv->frame0pos);
S			return GDISP_IMAGE_GIF_LOOP;
S
S		default:			// UNDEFINED_RECORD_TYPE;
S			return GDISP_IMAGE_ERR_UNSUPPORTED;
S		}
S	}
S}
S
Svoid gdispImageClose_GIF(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgcache *			cache;
S	gifimgcache *			ncache;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S	if (priv) {
S		// Free any stored frames
S		cache = priv->cache;
S		while(cache) {
S			ncache = cache->next;
S			gdispImageFree(img, (void *)cache, sizeof(gifimgcache)+cache->frame.width*cache->frame.height+cache->frame.palsize*sizeof(color_t));
S			cache = ncache;
S		}
S		if (priv->palette)
S			gdispImageFree(img, (void *)priv->palette, priv->palsize*sizeof(color_t));
S		gdispImageFree(img, (void *)priv, sizeof(gdispImagePrivate_GIF));
S		img->priv = 0;
S	}
S}
S
SgdispImageError gdispImageOpen_GIF(gdispImage *img) {
S	gdispImagePrivate_GIF *priv;
S	uint8_t		hdr[6];
S	uint16_t	aword;
S
S	/* Read the file identifier */
S	if (gfileRead(img->f, hdr, 6) != 6)
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	/* Process the GIFFILEHEADER structure */
S
S	if (hdr[0] != 'G' || hdr[1] != 'I' || hdr[2] != 'F'
S			|| hdr[3] != '8' || (hdr[4] != '7' && hdr[4] != '9') || hdr[5] != 'a')
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	/* We know we are a GIF format image */
S	img->flags = 0;
S
S	/* Allocate our private area */
S	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_GIF))))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Initialise the essential bits in the private area */
S	priv = (gdispImagePrivate_GIF *)img->priv;
S	priv->flags = 0;
S	priv->palsize = 0;
S	priv->palette = 0;
S	priv->frame.flags = 0;
S	priv->cache = 0;
S	priv->curcache = 0;
S	priv->decode = 0;
S
S	/* Process the Screen Descriptor structure */
S
S	// Read the screen descriptor
S	if (gfileRead(img->f, priv->buf, 7) != 7)
S		goto baddatacleanup;
S	// Get the width
S	img->width = gdispImageGetAlignedLE16(priv->buf, 0);
S	// Get the height
S	img->height = gdispImageGetAlignedLE16(priv->buf, 2);
S	if (((uint8_t *)priv->buf)[4] & 0x80) {
S		// Global color table
S		priv->palsize = 2 << (((uint8_t *)priv->buf)[4] & 0x07);
S		// Allocate the global palette
S		if (!(priv->palette = (color_t *)gdispImageAlloc(img, priv->palsize*sizeof(color_t))))
S			goto nomemcleanup;
S		// Read the global palette
S		for(aword = 0; aword < priv->palsize; aword++) {
S			if (gfileRead(img->f, &priv->buf, 3) != 3)
S				goto baddatacleanup;
S			priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[0], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[2]);
S		}
S	}
S	priv->bgcolor = ((uint8_t *)priv->buf)[5];
S
S	// Save the fram0pos
S	priv->frame0pos = gfileGetPos(img->f);
S
S	// Read the first frame descriptor
S	switch(initFrameGif(img)) {
S	case GDISP_IMAGE_ERR_OK:					// Everything OK
S		img->type = GDISP_IMAGE_TYPE_GIF;
S		return GDISP_IMAGE_ERR_OK;
S	case GDISP_IMAGE_ERR_UNSUPPORTED:			// Unsupported
S		gdispImageClose_GIF(img);					// Clean up the private data area
S		return GDISP_IMAGE_ERR_UNSUPPORTED;
S	case GDISP_IMAGE_ERR_NOMEMORY:				// Out of Memory
S	nomemcleanup:
S		gdispImageClose_GIF(img);					// Clean up the private data area
S		return GDISP_IMAGE_ERR_NOMEMORY;
S	case GDISP_IMAGE_GIF_EOF:						// We should have a frame but we don't seem to
S	case GDISP_IMAGE_GIF_LOOP:						// We should have a frame but we don't seem to
S	case GDISP_IMAGE_ERR_BADDATA:				// Oops - something wrong with the data
S	default:
S	baddatacleanup:
S		gdispImageClose_GIF(img);					// Clean up the private data area
S		return GDISP_IMAGE_ERR_BADDATA;
S	}
S}
S
SgdispImageError gdispImageCache_GIF(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgcache *			cache;
S	gifimgdecode *			decode;
S	uint8_t *				p;
S	uint8_t *				q;
S	coord_t					mx, my;
S	uint16_t				cnt;
S
S	/* If we are already cached - just return OK */
S	priv = (gdispImagePrivate_GIF *)img->priv;
S	if (priv->curcache)
S		return GDISP_IMAGE_ERR_OK;
S
S	/* We need to allocate the frame, the palette and bits for the image */
S	if (!(cache = (gifimgcache *)gdispImageAlloc(img, sizeof(gifimgcache) + priv->frame.palsize*sizeof(color_t) + priv->frame.width*priv->frame.height)))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Initialise the cache */
S	decode = 0;
S	cache->frame = priv->frame;
S	cache->imagebits = (uint8_t *)(cache+1) + cache->frame.palsize*sizeof(color_t);
S	cache->next = 0;
S
S	/* Start the decode */
S	switch(startDecodeGif(img)) {
S	case GDISP_IMAGE_ERR_OK:			break;
S	case GDISP_IMAGE_ERR_NOMEMORY:		goto nomemcleanup;
S	case GDISP_IMAGE_ERR_BADDATA:
S	default:							goto baddatacleanup;
S	}
S	decode = priv->decode;
S
S	// Save the palette
S	if (cache->frame.palsize) {
S		cache->palette = (color_t *)(cache+1);
S
S		/* Copy the local palette into the cache */
S		for(cnt = 0; cnt < cache->frame.palsize; cnt++)
S			cache->palette[cnt] = decode->palette[cnt];
S	} else
S		cache->palette = priv->palette;
S
S	// Check for interlacing
S	cnt = 0;
S	q = 0;
S	if (cache->frame.flags & GIFL_INTERLACE) {
S		// Every 8th row starting at row 0
S		for(p=cache->imagebits, my=0; my < cache->frame.height; my+=8, p += cache->frame.width*7) {
S			for(mx=0; mx < cache->frame.width; mx++) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						while(cnt < sizeof(decode->buf))
S							decode->buf[cnt++] = (cache->frame.flags & GIFL_TRANSPARENT) ? cache->frame.paltrans : 0;
S					}
S					q = decode->buf;
S				}
S				*p++ = *q++;
S				cnt--;
S			}
S		}
S		// Every 8th row starting at row 4
S		for(p=cache->imagebits+cache->frame.width*4, my=4; my < cache->frame.height; my+=8, p += cache->frame.width*7) {
S			for(mx=0; mx < cache->frame.width; mx++) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						while(cnt < sizeof(decode->buf))
S							decode->buf[cnt++] = (cache->frame.flags & GIFL_TRANSPARENT) ? cache->frame.paltrans : 0;
S					}
S					q = decode->buf;
S				}
S				*p++ = *q++;
S				cnt--;
S			}
S		}
S		// Every 4th row starting at row 2
S		for(p=cache->imagebits+cache->frame.width*2, my=2; my < cache->frame.height; my+=4, p += cache->frame.width*3) {
S			for(mx=0; mx < cache->frame.width; mx++) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						while(cnt < sizeof(decode->buf))
S							decode->buf[cnt++] = (cache->frame.flags & GIFL_TRANSPARENT) ? cache->frame.paltrans : 0;
S					}
S					q = decode->buf;
S				}
S				*p++ = *q++;
S				cnt--;
S			}
S		}
S		// Every 2nd row starting at row 1
S		for(p=cache->imagebits+cache->frame.width, my=1; my < cache->frame.height; my+=2, p += cache->frame.width) {
S			for(mx=0; mx < cache->frame.width; mx++) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						while(cnt < sizeof(decode->buf))
S							decode->buf[cnt++] = (cache->frame.flags & GIFL_TRANSPARENT) ? cache->frame.paltrans : 0;
S					}
S					q = decode->buf;
S				}
S				*p++ = *q++;
S				cnt--;
S			}
S		}
S	} else {
S		// Every row in sequence
S		p=cache->imagebits;
S		for(my=0; my < cache->frame.height; my++) {
S			for(mx=0; mx < cache->frame.width; mx++) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						while(cnt < sizeof(decode->buf))
S							decode->buf[cnt++] = (cache->frame.flags & GIFL_TRANSPARENT) ? cache->frame.paltrans : 0;
S					}
S					q = decode->buf;
S				}
S				*p++ = *q++;
S				cnt--;
S			}
S		}
S	}
S	// We could be pedantic here but extra bytes won't hurt us
S	while(getBytesGif(img));
S	priv->frame.posend = cache->frame.posend = gfileGetPos(img->f);
S
S	// Save everything
S	priv->curcache = cache;
S	if (!priv->cache)
S		priv->cache = cache;
S	else if (priv->cache->frame.posstart > cache->frame.posstart) {
S		cache->next = priv->cache;
S		priv->cache = cache;
S	} else {
S		gifimgcache	*pc;
S
S		for(pc = priv->cache; pc; pc = pc->next) {
S			if (!pc->next || pc->next->frame.posstart > cache->frame.posstart) {
S				cache->next = pc->next;
S				pc->next = cache;
S				break;
S			}
S		}
S	}
S	stopDecodeGif(img);
S	return GDISP_IMAGE_ERR_OK;
S
Snomemcleanup:
S	stopDecodeGif(img);
S	gdispImageFree(img, cache, sizeof(gifimgcache) + priv->frame.palsize*sizeof(color_t) + priv->frame.width*priv->frame.height);
S	return GDISP_IMAGE_ERR_NOMEMORY;
S
Sbaddatacleanup:
S	stopDecodeGif(img);
S	gdispImageFree(img, cache, sizeof(gifimgcache) + priv->frame.palsize*sizeof(color_t) + priv->frame.width*priv->frame.height);
S	return GDISP_IMAGE_ERR_BADDATA;
S}
S
SgdispImageError gdispGImageDraw_GIF(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	gdispImagePrivate_GIF *	priv;
S	gifimgdecode *			decode;
S	uint8_t *				q = 0;
S	coord_t					mx, my, fx, fy;
S	uint16_t				cnt, gcnt;
S	uint8_t					col;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S
S	/* Handle previous frame disposing */
S	if (priv->dispose.flags & (GIFL_DISPOSECLEAR|GIFL_DISPOSEREST)) {
S		// Clip to the disposal area - clip area = mx,my -> fx, fy (sx,sy,cx,cy are unchanged)
S		mx = priv->dispose.x;
S		my = priv->dispose.y;
S		fx = priv->dispose.x+priv->dispose.width;
S		fy = priv->dispose.y+priv->dispose.height;
S		if (sx > mx) mx = sx;
S		if (sy > my) my = sy;
S		if (sx+cx <= fx) fx = sx+cx;
S		if (sy+cy <= fy) fy = sy+cy;
S		if (fx > mx && fy > my) {
S			// We only support clearing (not restoring). The specification says that we are allowed to do this.
S			// Calculate the bgcolor
S			// The spec says to restore the backgound color (priv->bgcolor) but in practice if there is transparency
S			//	image decoders tend to assume that a restore to the transparent color is required instead
S			if (((priv->dispose.flags & GIFL_TRANSPARENT) /*&& priv->dispose.paltrans == priv->bgcolor*/) || priv->bgcolor >= priv->palsize)
S				gdispGFillArea(g, x+mx-sx, y+my-sy, fx-mx, fy-my, img->bgcolor);
S			else
S				gdispGFillArea(g, x+mx-sx, y+my-sy, fx-mx, fy-my, priv->palette[priv->bgcolor]);
S		}
S	}
S
S	/* Clip to just this frame - clip area = sx,sy -> fx, fy */
S	fx = priv->frame.x+priv->frame.width;
S	fy = priv->frame.y+priv->frame.height;
S	if (sx >= fx || sy >= fy || sx+cx < priv->frame.x || sy+cy < priv->frame.y) return GDISP_IMAGE_ERR_OK;
S	if (sx < priv->frame.x) { mx = priv->frame.x - sx; x += mx; cx -= mx; sx = priv->frame.x; }
S	if (sy < priv->frame.y) { my = priv->frame.y - sy; y += my; cy -= my; sy = priv->frame.y; }
S	if (sx+cx > fx) cx = fx-sx;
S	if (sy+cy > fy) cy = fy-sy;
S
S	// Make sx, sy relative to this frame so we are not adding priv->frame.x & priv->frame.y each time
S	sx -= priv->frame.x; sy -= priv->frame.y;
S	fx = sx + cx;
S	fy = sy + cy;
S
S	/* Draw from the image cache - if it exists */
S	if (priv->curcache) {
S		gifimgcache *	cache;
S
S		cache = priv->curcache;
S		q = cache->imagebits+priv->frame.width*sy+sx;
S
S		for(my=sy; my < fy; my++, q += priv->frame.width - cx) {
S			for(gcnt=0, mx=sx, cnt=0; mx < fx; mx++) {
S				col = *q++;
S				if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S					// We have a transparent pixel - dump the buffer to the display
S					switch(gcnt) {
S					case 0:																							break;
S					case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S					default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S					}
S					continue;
S				}
S				priv->buf[gcnt++] = cache->palette[col];
S				if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S					// We have run out of buffer - dump it to the display
S					gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S					gcnt = 0;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S
S		return GDISP_IMAGE_ERR_OK;
S	}
S
S	/* Start the decode */
S	switch(startDecodeGif(img)) {
S	case GDISP_IMAGE_ERR_OK:			break;
S	case GDISP_IMAGE_ERR_NOMEMORY:		return GDISP_IMAGE_ERR_NOMEMORY;
S	case GDISP_IMAGE_ERR_BADDATA:
S	default:							return GDISP_IMAGE_ERR_BADDATA;
S	}
S	decode = priv->decode;
S
S	// Check for interlacing
S	cnt = 0;
S	if (priv->frame.flags & GIFL_INTERLACE) {
S		// Every 8th row starting at row 0
S		for(my=0; my < priv->frame.height; my+=8) {
S			for(gcnt=0, mx=0; mx < priv->frame.width; mx++, q++, cnt--) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						mx++;
S						break;
S					}
S					q = decode->buf;
S				}
S				if (my >= sy && my < fy && mx >= sx && mx < fx) {
S					col = *q;
S					if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S						// We have a transparent pixel - dump the buffer to the display
S						switch(gcnt) {
S						case 0:																							break;
S						case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S						default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S						}
S						continue;
S					}
S					priv->buf[gcnt++] = decode->palette[col];
S					if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S						// We have run out of buffer - dump it to the display
S						gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S						gcnt = 0;
S					}
S					continue;
S				}
S				// We have finished the visible area - dump the buffer to the display
S				switch(gcnt) {
S				case 0:																							break;
S				case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S				default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S		// Every 8th row starting at row 4
S		for(my=4; my < priv->frame.height; my+=8) {
S			for(gcnt=0, mx=0; mx < priv->frame.width; mx++, q++, cnt--) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						mx++;
S						break;
S					}
S					q = decode->buf;
S				}
S				if (my >= sy && my < fy && mx >= sx && mx < fx) {
S					col = *q;
S					if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S						// We have a transparent pixel - dump the buffer to the display
S						switch(gcnt) {
S						case 0:																							break;
S						case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S						default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S						}
S						continue;
S					}
S					priv->buf[gcnt++] = decode->palette[col];
S					if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S						// We have run out of buffer - dump it to the display
S						gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S						gcnt = 0;
S					}
S					continue;
S				}
S				// We have finished the visible area - dump the buffer to the display
S				switch(gcnt) {
S				case 0:																							break;
S				case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S				default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S		// Every 4th row starting at row 2
S		for(my=2; my < priv->frame.height; my+=4) {
S			for(gcnt=0, mx=0; mx < priv->frame.width; mx++, q++, cnt--) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						mx++;
S						break;
S					}
S					q = decode->buf;
S				}
S				if (my >= sy && my < fy && mx >= sx && mx < fx) {
S					col = *q;
S					if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S						// We have a transparent pixel - dump the buffer to the display
S						switch(gcnt) {
S						case 0:																							break;
S						case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S						default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S						}
S						continue;
S					}
S					priv->buf[gcnt++] = decode->palette[col];
S					if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S						// We have run out of buffer - dump it to the display
S						gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S						gcnt = 0;
S					}
S					continue;
S				}
S				// We have finished the visible area - dump the buffer to the display
S				switch(gcnt) {
S				case 0:																							break;
S				case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S				default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S		// Every 2nd row starting at row 1
S		for(my=1; my < priv->frame.height; my+=2) {
S			for(gcnt=0, mx=0; mx < priv->frame.width; mx++, q++, cnt--) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						mx++;
S						break;
S					}
S					q = decode->buf;
S				}
S				if (my >= sy && my < fy && mx >= sx && mx < fx) {
S					col = *q;
S					if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S						// We have a transparent pixel - dump the buffer to the display
S						switch(gcnt) {
S						case 0:																							break;
S						case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S						default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S						}
S						continue;
S					}
S					priv->buf[gcnt++] = decode->palette[col];
S					if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S						// We have run out of buffer - dump it to the display
S						gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S						gcnt = 0;
S					}
S					continue;
S				}
S				// We have finished the visible area - dump the buffer to the display
S				switch(gcnt) {
S				case 0:																							break;
S				case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S				default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S	} else {
S		// Every row in sequence
S		for(my=0; my < priv->frame.height; my++) {
S			for(gcnt=0, mx=0; mx < priv->frame.width; mx++, q++, cnt--) {
S				if (!cnt) {
S					if (!(cnt = getBytesGif(img))) {
S						// Sometimes the image EOF is a bit early - treat the rest as transparent
S						if (decode->code_last != decode->code_eof)
S							goto baddatacleanup;
S						mx++;
S						break;
S					}
S					q = decode->buf;
S				}
S				if (my >= sy && my < fy && mx >= sx && mx < fx) {
S					col = *q;
S					if ((priv->frame.flags & GIFL_TRANSPARENT) && col == priv->frame.paltrans) {
S						// We have a transparent pixel - dump the buffer to the display
S						switch(gcnt) {
S						case 0:																							break;
S						case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S						default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S						}
S						continue;
S					}
S					priv->buf[gcnt++] = decode->palette[col];
S					if (gcnt >= BLIT_BUFFER_SIZE_GIF) {
S						// We have run out of buffer - dump it to the display
S						gdispGBlitArea(g, x+mx-sx-gcnt+1, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);
S						gcnt = 0;
S					}
S					continue;
S				}
S				// We have finished the visible area - dump the buffer to the display
S				switch(gcnt) {
S				case 0:																							break;
S				case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]); gcnt = 0;					break;
S				default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf); gcnt = 0;	break;
S				}
S			}
S			// We have finished the line - dump the buffer to the display
S			switch(gcnt) {
S			case 0:																					break;
S			case 1:		gdispGDrawPixel(g, x+mx-sx-gcnt, y+my-sy, priv->buf[0]);					break;
S			default:	gdispGBlitArea(g, x+mx-sx-gcnt, y+my-sy, gcnt, 1, 0, 0, gcnt, priv->buf);	break;
S			}
S		}
S	}
S	// We could be pedantic here but extra bytes won't hurt us
S	while (getBytesGif(img));
S	priv->frame.posend = gfileGetPos(img->f);
S
S	stopDecodeGif(img);
S	return GDISP_IMAGE_ERR_OK;
S
Sbaddatacleanup:
S	stopDecodeGif(img);
S	return GDISP_IMAGE_ERR_BADDATA;
S}
S
Sdelaytime_t gdispImageNext_GIF(gdispImage *img) {
S	gdispImagePrivate_GIF *	priv;
S	delaytime_t				delay;
S	uint8_t					blocksz;
S
S	priv = (gdispImagePrivate_GIF *)img->priv;
S
S	// Save the delay and convert to millisecs
S	delay = (delaytime_t)priv->frame.delay * 10;
S
S	// We need to get to the end of this frame
S	if (!priv->frame.posend) {
S		// We don't know where the end of the frame is yet - find it!
S		gfileSetPos(img->f, priv->frame.posimg+1);				// Skip the code size byte too
S		while(1) {
S			if (gfileRead(img->f, &blocksz, 1) != 1)
S				return TIME_INFINITE;
S			if (!blocksz)
S				break;
S			gfileSetPos(img->f, gfileGetPos(img->f) + blocksz);
S		}
S		priv->frame.posend = gfileGetPos(img->f);
S	}
S
S	// Seek to the end of this frame
S	gfileSetPos(img->f, priv->frame.posend);
S
S	// Read the next frame descriptor
S	for(blocksz=0; blocksz < 2; blocksz++) {		// 2 loops max to prevent cycling forever with a bad file
S		switch(initFrameGif(img)) {
S		case GDISP_IMAGE_ERR_OK:					// Everything OK
S			return delay;
S		case GDISP_IMAGE_GIF_LOOP:						// Back to the beginning
S			break;
S		case GDISP_IMAGE_GIF_EOF:						// The real End-Of-File
S		case GDISP_IMAGE_ERR_BADDATA:				// Oops - something wrong with the data
S		case GDISP_IMAGE_ERR_NOMEMORY:				// Out of Memory
S		case GDISP_IMAGE_ERR_UNSUPPORTED:			// Unsupported
S		default:
S			return TIME_INFINITE;
S		}
S	}
S	return TIME_INFINITE;
S}
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_GIF */
L 27 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image_bmp.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image_bmp.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_BMP
X#if -1 && 0 && 0
S
S#include "gdisp_image_support.h"
S
S/**
S * How big a pixel array to allocate for blitting (in pixels)
S * Bigger is faster but uses more RAM.
S * This must be greater than 40 bytes and 32 pixels as we read our headers into this space as well
S */
S#define BLIT_BUFFER_SIZE_BMP	32
S
Stypedef struct gdispImagePrivate_BMP {
S	uint8_t		bmpflags;
S		#define BMP_V2				0x01		// Version 2 (old) header format
S		#define BMP_V4				0x02		// Version 4 (alpha support) header format
S		#define BMP_PALETTE			0x04		// Uses a palette
S		#define	BMP_COMP_RLE		0x08		// Uses RLE compression
S		#define	BMP_COMP_MASK		0x10		// Uses mask & shift decoding
S		#define BMP_RLE_ENC			0x20		// Currently in RLE encoded run
S		#define BMP_RLE_ABS			0x40		// Currently in RLE absolute run
S		#define BMP_TOP_TO_BOTTOM	0x80		// Decodes bottom to top line
S	uint8_t		bitsperpixel;
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S	uint16_t	palsize;
S	pixel_t		*palette;
S#endif
S#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
S	uint16_t	rlerun;
S	uint8_t		rlecode;
S#endif
S#if GDISP_NEED_IMAGE_BMP_16 || GDISP_NEED_IMAGE_BMP_32
S	int8_t		shiftred;
S	int8_t		shiftgreen;
S	int8_t		shiftblue;
S	int8_t		shiftalpha;
S	uint32_t	maskred;
S	uint32_t	maskgreen;
S	uint32_t	maskblue;
S	uint32_t	maskalpha;
S#endif
S	size_t		frame0pos;
S	pixel_t		*frame0cache;
S	pixel_t		buf[BLIT_BUFFER_SIZE_BMP];
S	} gdispImagePrivate_BMP;
S
Svoid gdispImageClose_BMP(gdispImage *img) {
S	gdispImagePrivate_BMP *priv;
S
S	priv = (gdispImagePrivate_BMP *)img->priv;
S	if (priv) {
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S		if (priv->palette)
S			gdispImageFree(img, (void *)priv->palette, priv->palsize*sizeof(color_t));
S#endif
S		if (priv->frame0cache)
S			gdispImageFree(img, (void *)priv->frame0cache, img->width*img->height*sizeof(pixel_t));
S		gdispImageFree(img, (void *)priv, sizeof(gdispImagePrivate_BMP));
S		img->priv = 0;
S	}
S}
S
SgdispImageError gdispImageOpen_BMP(gdispImage *img) {
S	gdispImagePrivate_BMP *priv;
S	uint8_t		hdr[2];
S	uint16_t	aword;
S	uint32_t	adword;
S	uint32_t	offsetColorTable;
S
S	/* Read the file identifier */
S	if (gfileRead(img->f, hdr, 2) != 2)
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	/* Process the BITMAPFILEHEADER structure */
S
S	/**
S	 * We only accept Windows V2+ bitmaps.
S	 *  - we don't support OS/2 bitmaps, icons, pointers, or Windows V1 bitmaps.
S	 */
S	if (hdr[0] != 'B' || hdr[1] != 'M')
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	/* We know we are a BMP format image */
S	img->flags = 0;
S
S	/* Allocate our private area */
S	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_BMP))))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Initialise the essential bits in the private area */
S	priv = (gdispImagePrivate_BMP *)img->priv;
S	priv->frame0cache = 0;
S	priv->bmpflags = 0;
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S	priv->palette = 0;
S#endif
S
S	/* Skip the size field and the 2 reserved fields */
S	if (gfileRead(img->f, priv->buf, 8) != 8)
S		goto baddatacleanup;
S
S	/* Get the offset to the bitmap data */
S	if (gfileRead(img->f, &priv->frame0pos, 4) != 4)
S		goto baddatacleanup;
S	gdispImageMakeLE32(priv->frame0pos);
S
S	/* Process the BITMAPCOREHEADER structure */
S
S	/* Get the offset to the colour data */
S	if (gfileRead(img->f, &offsetColorTable, 4) != 4)
S		goto baddatacleanup;
S	gdispImageMakeLE32(offsetColorTable);
S	offsetColorTable += 14;						// Add the size of the BITMAPFILEHEADER
S
S	// Detect our bitmap version
S	if (offsetColorTable == 12+14) {
S		priv->bmpflags |= BMP_V2;
S
S		// Read the header
S		if (gfileRead(img->f, priv->buf, 12-4) != 12-4)
S			goto baddatacleanup;
S		// Get the width
S		img->width = gdispImageGetAlignedLE16(priv->buf, 0);
S		// Get the height
S		img->height = gdispImageGetAlignedLE16(priv->buf, 2);
S		if (img->height < 0) {
S			priv->bmpflags |= BMP_TOP_TO_BOTTOM;
S			img->height = -img->height;
S		}
S		// Get the planes
S		aword = gdispImageGetAlignedLE16(priv->buf, 4);
S		if (aword != 1)
S			goto unsupportedcleanup;
S		// Get the bits per pixel
S		aword = gdispImageGetAlignedLE16(priv->buf, 6);
S		switch(aword) {
S#if GDISP_NEED_IMAGE_BMP_1
S		case 1:
S#endif
S#if GDISP_NEED_IMAGE_BMP_4
S		case 4:
S#endif
S#if GDISP_NEED_IMAGE_BMP_8
S		case 8:
S#endif
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
S			priv->bmpflags |= BMP_PALETTE;
S			priv->palsize = 1<<aword;
S			break;
S#endif
S#if GDISP_NEED_IMAGE_BMP_24
S		case 24:
S			break;
S#endif
S		default:
S			goto unsupportedcleanup;
S		}
S		priv->bitsperpixel = aword;
S
S	} else if (offsetColorTable >= 40+14) {
S		if (offsetColorTable > 40+14)
S			priv->bmpflags |= BMP_V4;
S
S		// Read the header
S		if (gfileRead(img->f, priv->buf, 40-4) != 40-4)
S			goto baddatacleanup;
S		// Get the width
S		adword = gdispImageGetAlignedLE32(priv->buf, 0);
S		if (adword > 32768)				// This also picks up negative values
S			goto unsupportedcleanup;
S		img->width = adword;
S		// Get the height
S		adword = gdispImageGetAlignedLE32(priv->buf, 4);
S		if ((int32_t)adword < 0) {		// Negative test
S			priv->bmpflags |= BMP_TOP_TO_BOTTOM;
S			adword = -adword;
S		}
S		if (adword > 32768)
S			goto unsupportedcleanup;
S		img->height = adword;
S		// Get the planes
S		aword = gdispImageGetAlignedLE16(priv->buf, 8);
S		if (aword != 1)
S			goto unsupportedcleanup;
S		// Get the bits per pixel
S		aword = gdispImageGetAlignedLE16(priv->buf, 10);
S		switch(aword) {
S#if GDISP_NEED_IMAGE_BMP_1
S		case 1:
S#endif
S#if GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE
S		case 4:
S#endif
S#if GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S		case 8:
S#endif
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S			priv->bmpflags |= BMP_PALETTE;
S			priv->palsize = 1<<aword;
S			break;
S#endif
S#if GDISP_NEED_IMAGE_BMP_16
S		case 16:
S#endif
S#if GDISP_NEED_IMAGE_BMP_24
S		case 24:
S#endif
S#if GDISP_NEED_IMAGE_BMP_32
S		case 32:
S#endif
S#if GDISP_NEED_IMAGE_BMP_16 || GDISP_NEED_IMAGE_BMP_24 || GDISP_NEED_IMAGE_BMP_32
S			break;
S#endif
S		default:
S			goto unsupportedcleanup;
S		}
S		priv->bitsperpixel = aword;
S		// Get the compression
S		adword = gdispImageGetAlignedLE32(priv->buf, 12);
S		switch(adword) {
S		case 0:					// BI_RGB - uncompressed
S			break;
S#if GDISP_NEED_IMAGE_BMP_8_RLE
S		case 1:					// BI_RLE8 compression
S			if (priv->bitsperpixel != 8)
S				goto unsupportedcleanup;
S			priv->bmpflags |= BMP_COMP_RLE;
S			break;
S#endif
S#if GDISP_NEED_IMAGE_BMP_4_RLE
S		case 2:					// BI_RLE4 compression
S			if (priv->bitsperpixel != 4)
S				goto unsupportedcleanup;
S			priv->bmpflags |= BMP_COMP_RLE;
S			break;
S#endif
S#if GDISP_NEED_IMAGE_BMP_16 || GDISP_NEED_IMAGE_BMP_32
S		case 3:					// BI_BITFIELDS decoding
S			if (priv->bitsperpixel < 16 || priv->bitsperpixel == 24)
S				goto unsupportedcleanup;
S			priv->bmpflags |= BMP_COMP_MASK;
S			if (priv->bmpflags & BMP_V4)		// V4 stored the masks in the header
S				offsetColorTable = 40+14;
S			break;
S#endif
S		default:
S			goto unsupportedcleanup;
S		}
S		priv->bitsperpixel = aword;
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S		// Get the actual colors used
S		adword = gdispImageGetAlignedLE32(priv->buf, 28);
S		if (adword && adword < priv->palsize)
S			priv->palsize = adword;
S#endif
S	} else
S		goto baddatacleanup;
S
S#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S	/* Load the palette tables */
S	if (priv->bmpflags & BMP_PALETTE) {
S		gfileSetPos(img->f, offsetColorTable);
S
S		if (!(priv->palette = (color_t *)gdispImageAlloc(img, priv->palsize*sizeof(color_t))))
S			return GDISP_IMAGE_ERR_NOMEMORY;
S		if (priv->bmpflags & BMP_V2) {
S			for(aword = 0; aword < priv->palsize; aword++) {
S				if (gfileRead(img->f, &priv->buf, 3) != 3) goto baddatacleanup;
S				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
S			}
S		} else {
S			for(aword = 0; aword < priv->palsize; aword++) {
S				if (gfileRead(img->f, &priv->buf, 4) != 4) goto baddatacleanup;
S				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
S			}
S		}
S
S	}
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_16 || GDISP_NEED_IMAGE_BMP_32
S	/* Load the bit masks */
S	if (priv->bmpflags & BMP_COMP_MASK) {
S		gfileSetPos(img->f, offsetColorTable);
S		if (gfileRead(img->f, &priv->maskred, 4) != 4) goto baddatacleanup;
S		gdispImageMakeLE32(priv->maskred);
S		if (gfileRead(img->f, &priv->maskgreen, 4) != 4) goto baddatacleanup;
S		gdispImageMakeLE32(priv->maskgreen);
S		if (gfileRead(img->f, &priv->maskblue, 4) != 4) goto baddatacleanup;
S		gdispImageMakeLE32(priv->maskblue);
S		if (priv->bmpflags & BMP_V4) {
S			if (gfileRead(img->f, &priv->maskalpha, 4) != 4) goto baddatacleanup;
S			gdispImageMakeLE32(priv->maskalpha);
S		} else
S			priv->maskalpha = 0;
S	} else if (priv->bitsperpixel == 16) {
S		priv->bmpflags |= BMP_COMP_MASK;
S		priv->maskred = 0x7C00;
S		priv->maskgreen = 0x03E0;
S		priv->maskblue = 0x001F;
S		priv->maskalpha = 0;
S	} else if (priv->bitsperpixel == 32) {
S		priv->bmpflags |= BMP_COMP_MASK;
S		priv->maskred = 0x00FF0000;
S		priv->maskgreen = 0x0000FF00;
S		priv->maskblue = 0x000000FF;
S		priv->maskalpha = 0;
S	}
S
S	/* We need to adjust the masks and calculate the shift values so the result scales 0 -> 255 */
S	if (priv->bmpflags & BMP_COMP_MASK) {
S		priv->shiftred = 0;
S		priv->shiftgreen = 0;
S		priv->shiftblue = 0;
S		if (priv->maskred) {
S			if (priv->maskred < 256)
S				for(adword = priv->maskred;  adword < 128; priv->shiftred--, adword <<= 1);
S			else
S				for(adword = priv->maskred;  adword > 255; priv->shiftred++, adword >>= 1);
S		}
S		if (priv->maskgreen) {
S			if (priv->maskgreen < 256)
S				for(adword = priv->maskgreen;  adword < 128; priv->shiftgreen--, adword <<= 1);
S			else
S				for(adword = priv->maskgreen;  adword > 255; priv->shiftgreen++, adword >>= 1);
S		}
S		if (priv->maskblue) {
S			if (priv->maskblue < 256)
S				for(adword = priv->maskblue;  adword < 128; priv->shiftblue--, adword <<= 1);
S			else
S				for(adword = priv->maskblue;  adword > 255; priv->shiftblue++, adword >>= 1);
S		}
S		if (priv->maskalpha) {
S			if (priv->maskalpha < 256)
S				for(adword = priv->maskalpha;  adword < 128; priv->shiftalpha--, adword <<= 1);
S			else
S				for(adword = priv->maskalpha;  adword > 255; priv->shiftalpha++, adword >>= 1);
S		}
S	}
S#endif
S
S	img->type = GDISP_IMAGE_TYPE_BMP;
S	return GDISP_IMAGE_ERR_OK;
S
Sbaddatacleanup:
S	gdispImageClose_BMP(img);				// Clean up the private data area
S	return GDISP_IMAGE_ERR_BADDATA;			// Oops - something wrong
S
Sunsupportedcleanup:
S	gdispImageClose_BMP(img);				// Clean up the private data area
S	return GDISP_IMAGE_ERR_UNSUPPORTED;		// Not supported
S}
S
Sstatic coord_t getPixels(gdispImage *img, coord_t x) {
S	gdispImagePrivate_BMP *	priv;
S	color_t *			pc;
S	coord_t				len;
S
S	priv = (gdispImagePrivate_BMP *)img->priv;
S	pc = priv->buf;
S	len = 0;
S
S	switch(priv->bitsperpixel) {
S#if GDISP_NEED_IMAGE_BMP_1
S	case 1:
S		{
S		uint8_t		b[4];
S		uint8_t		m;
S
S			priv = (gdispImagePrivate_BMP *)img->priv;
S			pc = priv->buf;
S			len = 0;
S
S			while(x < img->width && len <= BLIT_BUFFER_SIZE_BMP-32) {
S				if (gfileRead(img->f, &b, 4) != 4)
S					return 0;
S
S				for(m=0x80; m; m >>= 1, pc++)
S					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
S				for(m=0x80; m; m >>= 1, pc++)
S					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
S				for(m=0x80; m; m >>= 1, pc++)
S					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
S				for(m=0x80; m; m >>= 1, pc++)
S					pc[0] = priv->palette[(m&b[3]) ? 1 : 0];
S				len += 32;
S				x += 32;
S			}
S		}
S		return len;
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE
S	case 4:
S	#if GDISP_NEED_IMAGE_BMP_4_RLE
S		#if GDISP_NEED_IMAGE_BMP_4
S		if (priv->bmpflags & BMP_COMP_RLE)
S		#endif
S		{
S			uint8_t		b[4];
S
S			while(x < img->width) {
S				if (priv->bmpflags & BMP_RLE_ENC) {
S					while (priv->rlerun && len <= BLIT_BUFFER_SIZE_BMP-2 && x < img->width) {
S						*pc++ = priv->palette[priv->rlecode >> 4];
S						priv->rlerun--;
S						len++;
S						x++;
S						if (priv->rlerun) {
S							*pc++ = priv->palette[priv->rlecode & 0x0F];
S							priv->rlerun--;
S							len++;
S							x++;
S						}
S					}
S					if (priv->rlerun)			// Return if we have more run to do
S						return len;
S				} else if (priv->bmpflags & BMP_RLE_ABS) {
S					while (priv->rlerun && len <= BLIT_BUFFER_SIZE_BMP-2 && x < img->width) {
S						if (gfileRead(img->f, &b, 1) != 1)
S							return 0;
S						*pc++ = priv->palette[b[0] >> 4];
S						priv->rlerun--;
S						len++;
S						x++;
S						if (priv->rlerun) {
S							*pc++ = priv->palette[b[0] & 0x0F];
S							priv->rlerun--;
S							len++;
S							x++;
S						}
S					}
S					if (priv->rlerun)			// Return if we have more run to do
S						return len;
S					if ((gfileGetPos(img->f) - priv->frame0pos)&1) {	// Make sure we are on a word boundary
S						if (gfileRead(img->f, &b, 1) != 1)
S							return 0;
S					}
S				}
S
S				// We have finished the current run - read a new run
S				priv->bmpflags &= ~(BMP_RLE_ENC|BMP_RLE_ABS);
S
S				// There are always at least 2 bytes in an RLE code
S				if (gfileRead(img->f, &b, 2) != 2)
S					return 0;
S
S				if (b[0]) {								// Encoded mode
S					priv->rlerun = b[0];
S					priv->rlecode = b[1];
S					priv->bmpflags |= BMP_RLE_ENC;
S				} else if (b[1] == 0) {					// End of line
S					if (x < img->width) {
S						priv->rlerun = img->width - x;
S						priv->rlecode = 0;					// Who knows what color this should really be
S						priv->bmpflags |= BMP_RLE_ENC;
S					}
S				} else if (b[1] == 1) {					// End of file
S					return len;
S				} else if (b[1] == 2) {					// Delta x, y
S					// There are always at least 2 bytes in an RLE code
S					if (gfileRead(img->f, &b, 2) != 2)
S						return 0;
S					priv->rlerun = b[0] + (uint16_t)b[1] * img->width;
S					priv->rlecode = 0;					// Who knows what color this should really be
S					priv->bmpflags |= BMP_RLE_ENC;
S				} else {								// Absolute mode
S					priv->rlerun = b[1];
S					priv->bmpflags |= BMP_RLE_ABS;
S				}
S			}
S			return len;
S		}
S	#endif
S	#if GDISP_NEED_IMAGE_BMP_4
S		{
S			uint8_t		b[4];
S
S			while(x < img->width && len <= BLIT_BUFFER_SIZE_BMP-8) {
S				if (gfileRead(img->f, &b, 4) != 4)
S					return 0;
S
S				*pc++ = priv->palette[b[0] >> 4];
S				*pc++ = priv->palette[b[0] & 0x0F];
S				*pc++ = priv->palette[b[1] >> 4];
S				*pc++ = priv->palette[b[1] & 0x0F];
S				*pc++ = priv->palette[b[2] >> 4];
S				*pc++ = priv->palette[b[2] & 0x0F];
S				*pc++ = priv->palette[b[3] >> 4];
S				*pc++ = priv->palette[b[3] & 0x0F];
S				len += 8;
S				x += 8;
S			}
S			return len;
S		}
S	#endif
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
S	case 8:
S	#if GDISP_NEED_IMAGE_BMP_8_RLE
S		#if GDISP_NEED_IMAGE_BMP_8
S		if (priv->bmpflags & BMP_COMP_RLE)
S		#endif
S		{
S			uint8_t		b[4];
S
S			while(x < img->width) {
S				if (priv->bmpflags & BMP_RLE_ENC) {
S					while (priv->rlerun && len < BLIT_BUFFER_SIZE_BMP && x < img->width) {
S						*pc++ = priv->palette[priv->rlecode];
S						priv->rlerun--;
S						len++;
S						x++;
S					}
S					if (priv->rlerun)			// Return if we have more run to do
S						return len;
S				} else if (priv->bmpflags & BMP_RLE_ABS) {
S					while (priv->rlerun && len < BLIT_BUFFER_SIZE_BMP && x < img->width) {
S						if (gfileRead(img->f, &b, 1) != 1)
S							return 0;
S						*pc++ = priv->palette[b[0]];
S						priv->rlerun--;
S						len++;
S						x++;
S					}
S					if (priv->rlerun)			// Return if we have more run to do
S						return len;
S					if ((gfileGetPos(img->f) - priv->frame0pos)&1) {	// Make sure we are on a word boundary
S						if (gfileRead(img->f, &b, 1) != 1)
S							return 0;
S					}
S				}
S
S				// We have finished the current run - read a new run
S				priv->bmpflags &= ~(BMP_RLE_ENC|BMP_RLE_ABS);
S
S				// There are always at least 2 bytes in an RLE code
S				if (gfileRead(img->f, &b, 2) != 2)
S					return 0;
S
S				if (b[0]) {								// Encoded mode
S					priv->rlerun = b[0];
S					priv->rlecode = b[1];
S					priv->bmpflags |= BMP_RLE_ENC;
S				} else if (b[1] == 0) {					// End of line
S					if (x < img->width) {
S						priv->rlerun = img->width - x;
S						priv->rlecode = 0;					// Who knows what color this should really be
S						priv->bmpflags |= BMP_RLE_ENC;
S					}
S				} else if (b[1] == 1) {					// End of file
S					return len;
S				} else if (b[1] == 2) {					// Delta x, y
S					// There are always at least 2 bytes in an RLE code
S					if (gfileRead(img->f, &b, 2) != 2)
S						return GDISP_IMAGE_ERR_BADDATA;
S					priv->rlerun = b[0] + (uint16_t)b[1] * img->width;
S					priv->rlecode = 0;					// Who knows what color this should really be
S					priv->bmpflags |= BMP_RLE_ENC;
S				} else {								// Absolute mode
S					priv->rlerun = b[1];
S					priv->bmpflags |= BMP_RLE_ABS;
S				}
S			}
S			return len;
S		}
S	#endif
S	#if GDISP_NEED_IMAGE_BMP_8
S		{
S			uint8_t		b[4];
S
S			while(x < img->width && len <= BLIT_BUFFER_SIZE_BMP-4) {
S				if (gfileRead(img->f, &b, 4) != 4)
S					return 0;
S
S				*pc++ = priv->palette[b[0]];
S				*pc++ = priv->palette[b[1]];
S				*pc++ = priv->palette[b[2]];
S				*pc++ = priv->palette[b[3]];
S				len += 4;
S				x += 4;
S			}
S			return len;
S		}
S	#endif
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_16
S	case 16:
S		{
S		uint16_t	w[2];
S		color_t		r, g, b;
S
S			while(x < img->width && len <= BLIT_BUFFER_SIZE_BMP-2) {
S				if (gfileRead(img->f, &w, 4) != 4)
S					return 0;
S				gdispImageMakeLE16(w[0]);
S				gdispImageMakeLE16(w[1]);
S				if (priv->shiftred < 0)
S					r = (color_t)((w[0] & priv->maskred) << -priv->shiftred);
S				else
S					r = (color_t)((w[0] & priv->maskred) >> priv->shiftred);
S				if (priv->shiftgreen < 0)
S					g = (color_t)((w[0] & priv->maskgreen) << -priv->shiftgreen);
S				else
S					g = (color_t)((w[0] & priv->maskgreen) >> priv->shiftgreen);
S				if (priv->shiftblue < 0)
S					b = (color_t)((w[0] & priv->maskblue) << -priv->shiftblue);
S				else
S					b = (color_t)((w[0] & priv->maskblue) >> priv->shiftblue);
S				/* We don't support alpha yet */
S				*pc++ = RGB2COLOR(r, g, b);
S				if (priv->shiftred < 0)
S					r = (color_t)((w[1] & priv->maskred) << -priv->shiftred);
S				else
S					r = (color_t)((w[1] & priv->maskred) >> priv->shiftred);
S				if (priv->shiftgreen < 0)
S					g = (color_t)((w[1] & priv->maskgreen) << -priv->shiftgreen);
S				else
S					g = (color_t)((w[1] & priv->maskgreen) >> priv->shiftgreen);
S				if (priv->shiftblue < 0)
S					b = (color_t)((w[1] & priv->maskblue) << -priv->shiftblue);
S				else
S					b = (uint8_t)((w[1] & priv->maskblue) >> priv->shiftblue);
S				/* We don't support alpha yet */
S				*pc++ = RGB2COLOR(r, g, b);
S				x += 2;
S				len += 2;
S			}
S		}
S		return len;
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_24
S	case 24:
S		{
S		uint8_t		b[3];
S
S			while(x < img->width && len < BLIT_BUFFER_SIZE_BMP) {
S				if (gfileRead(img->f, &b, 3) != 3)
S					return 0;
S				*pc++ = RGB2COLOR(b[2], b[1], b[0]);
S				x++;
S				len++;
S			}
S
S			if (x >= img->width) {
S				// Make sure we have read a multiple of 4 bytes for the line
S				if ((x & 3) && gfileRead(img->f, &b, x & 3) != (x & 3))
S					return 0;
S			}
S		}
S		return len;
S#endif
S
S#if GDISP_NEED_IMAGE_BMP_32
S	case 32:
S		{
S		uint32_t	dw;
S		color_t		r, g, b;
S
S			while(x < img->width && len < BLIT_BUFFER_SIZE_BMP) {
S				if (gfileRead(img->f, &dw, 4) != 4)
S					return 0;
S				gdispImageMakeLE32(dw);
S				if (priv->shiftred < 0)
S					r = (color_t)((dw & priv->maskred) << -priv->shiftred);
S				else
S					r = (color_t)((dw & priv->maskred) >> priv->shiftred);
S				if (priv->shiftgreen < 0)
S					g = (color_t)((dw & priv->maskgreen) << -priv->shiftgreen);
S				else
S					g = (color_t)((dw & priv->maskgreen) >> priv->shiftgreen);
S				if (priv->shiftblue < 0)
S					b = (color_t)((dw & priv->maskblue) << -priv->shiftblue);
S				else
S					b = (color_t)((dw & priv->maskblue) >> priv->shiftblue);
S				/* We don't support alpha yet */
S				*pc++ = RGB2COLOR(r, g, b);
S				x++;
S				len++;
S			}
S		}
S		return len;
S#endif
S
S	default:
S		return len;
S	}
S}
S
SgdispImageError gdispImageCache_BMP(gdispImage *img) {
S	gdispImagePrivate_BMP *	priv;
S	color_t *			pcs;
S	color_t *			pcd;
S	coord_t				pos, x, y;
S	size_t				len;
S
S	/* If we are already cached - just return OK */
S	priv = (gdispImagePrivate_BMP *)img->priv;
S	if (priv->frame0cache)
S		return GDISP_IMAGE_ERR_OK;
S
S	/* We need to allocate the cache */
S	len = img->width * img->height * sizeof(pixel_t);
S	priv->frame0cache = (pixel_t *)gdispImageAlloc(img, len);
S	if (!priv->frame0cache)
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Read the entire bitmap into cache */
S	gfileSetPos(img->f, priv->frame0pos);
S#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
S	priv->rlerun = 0;
S	priv->rlecode = 0;
S#endif
S
S	pcs = priv->buf;				// This line is just to prevent a compiler warning.
S
S	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
S		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
S			x = 0; pos = 0;
S			while(x < img->width) {
S				if (!pos) {
S					if (!(pos = getPixels(img, x)))
S						return GDISP_IMAGE_ERR_BADDATA;
S					pcs = priv->buf;
S				}
S				*pcd++ = *pcs++;
S				x++; pos--;
S			}
S		}
S	} else {
S		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
S			x = 0; pos = 0;
S			while(x < img->width) {
S				if (!pos) {
S					if (!(pos = getPixels(img, x)))
S						return GDISP_IMAGE_ERR_BADDATA;
S					pcs = priv->buf;
S				}
S				*pcd++ = *pcs++;
S				x++; pos--;
S			}
S		}
S	}
S
S	return GDISP_IMAGE_ERR_OK;
S}
S
SgdispImageError gdispGImageDraw_BMP(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	gdispImagePrivate_BMP *	priv;
S	coord_t				mx, my;
S	coord_t				pos, len, st;
S
S	priv = (gdispImagePrivate_BMP *)img->priv;
S
S	/* Check some reasonableness */
S	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
S	if (sx + cx > img->width) cx = img->width - sx;
S	if (sy + cy > img->height) cy = img->height - sy;
S
S	/* Draw from the image cache - if it exists */
S	if (priv->frame0cache) {
S		gdispGBlitArea(g, x, y, cx, cy, sx, sy, img->width, priv->frame0cache);
S		return GDISP_IMAGE_ERR_OK;
S	}
S
S	/* Start decoding from the beginning */
S	gfileSetPos(img->f, priv->frame0pos);
S#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
S	priv->rlerun = 0;
S	priv->rlecode = 0;
S#endif
S
S	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
S		for(my = 0; my < img->height; my++) {
S			mx = 0;
S			while(mx < img->width) {
S				if (!(pos = getPixels(img, mx)))
S					return GDISP_IMAGE_ERR_BADDATA;
S				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
S					st = mx < sx ? sx - mx : 0;
S					len = pos-st;
S					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
S					if (len == 1)
S						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
S					else
S						gdispGBlitArea(g, x+mx+st-sx, y+my-sy, len, 1, st, 0, pos, priv->buf);
S				}
S				mx += pos;
S			}
S		}
S	} else {
S		for(my = img->height-1; my >= 0; my--) {
S			mx = 0;
S			while(mx < img->width) {
S				if (!(pos = getPixels(img, mx)))
S					return GDISP_IMAGE_ERR_BADDATA;
S				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
S					st = mx < sx ? sx - mx : 0;
S					len = pos-st;
S					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
S					if (len == 1)
S						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
S					else
S						gdispGBlitArea(g, x+mx+st-sx, y+my-sy, len, 1, st, 0, pos, priv->buf);
S				}
S				mx += pos;
S			}
S		}
S	}
S
S	return GDISP_IMAGE_ERR_OK;
S}
S
Sdelaytime_t gdispImageNext_BMP(gdispImage *img) {
S	(void) img;
S
S	/* No more frames/pages */
S	return TIME_INFINITE;
S}
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_BMP */
L 28 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image_jpg.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image_jpg.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_JPG
X#if -1 && 0 && 0
S
S#include "gdisp_image_support.h"
S
S#error "JPG support not implemented yet"
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_JPG */
L 29 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
N#include "gdisp_image_png.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_image_png.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_PNG
X#if -1 && 0 && 0
S
S#include "gdisp_image_support.h"
S
S/**
S * How big a pixel array to allocate for blitting the image to the display (in pixels)
S * Bigger is faster but uses more RAM.
S */
S#define PNG_BLIT_BUFFER_SIZE	32
S/**
S * How big a byte array to use for input file buffer
S * Bigger is faster but uses more RAM.
S * Must be more than 8 bytes
S */
S#define PNG_FILE_BUFFER_SIZE	8
S/**
S * How big a byte array to use for inflate decompression
S * Bigger is faster but uses more RAM.
S * Must be >= 32768 due to the PNG 32K sliding window
S * More efficient code is generated if it is a power of 2
S */
S#define PNG_Z_BUFFER_SIZE		32768
S
S/*-----------------------------------------------------------------
S * Structure definitions
S *---------------------------------------------------------------*/
S
Sstruct PNG_decode;
S
S// PNG info (comes from the PNG header)
Stypedef struct PNG_info {
S	uint8_t		flags;								// Flags (global)
S		#define PNG_FLG_HEADERDONE			0x01		// The header has been processed
S		#define PNG_FLG_TRANSPARENT			0x02		// Has transparency
S		#define PNG_FLG_INTERLACE			0x04		// Is Interlaced
S		#define PNG_FLG_BACKGROUND			0x08		// Has a specified background color
S	uint8_t		bitdepth;							// 1, 2, 4, 8, 16
S	uint8_t		mode;								// The PNG color-mode
S		#define PNG_COLORMODE_GRAY			0x00		// Grayscale
S		#define PNG_COLORMODE_RGB			0x02		// RGB
S		#define PNG_COLORMODE_PALETTE		0x03		// Pallete
S		#define PNG_COLORMODE_GRAYALPHA		0x04		// Grayscale with Alpha
S		#define PNG_COLORMODE_RGBA			0x06		// RGBA
S	uint8_t		bpp;								// Bits per pixel
S
S	uint8_t		*cache;								// The image cache
S	unsigned	cachesz;							// The image cache size
S
S	void 		(*out)(struct PNG_decode *);		// The scan line output function
S
S	#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S		color_t		bg;								// The background color
S	#endif
S	#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S		uint16_t	trans_r;						// Red/grayscale component of the transparent color (PNG_COLORMODE_GRAY and PNG_COLORMODE_RGB only)
S		uint16_t	trans_g;						// Green component of the transparent color (PNG_COLORMODE_RGB only)
S		uint16_t	trans_b;						// Blue component of the transparent color (PNG_COLORMODE_RGB only)
S	#endif
S	#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S		uint16_t	palsize;						// palette size in number of colors
S		uint8_t 	*palette;						// palette in RGBA RGBA... order (4 bytes per entry - PNG_COLORMODE_PALETTE only)
S	#endif
S	} PNG_info;
S
S// Handle the PNG file stream
Stypedef struct PNG_input {
S	GFILE *		f;								// The gfile to retrieve data from
S	unsigned	buflen;							// The number of bytes left in the buffer
S	uint8_t		*pbuf;							// The pointer to the next byte
S	uint32_t	chunklen;						// The number of bytes left in the current PNG chunk
S	uint32_t	chunknext;						// The file position of the next PNG chunk
S	uint8_t		buf[PNG_FILE_BUFFER_SIZE];		// Must be a minimum of 8 bytes to hold a chunk header
S	} PNG_input;
S
S// Handle the display output and windowing
Stypedef struct PNG_output {
S	GDisplay	*g;
S	coord_t		x, y;
S	coord_t		cx, cy;
S	coord_t		sx, sy;
S	coord_t		ix, iy;
S	unsigned	cnt;
S	pixel_t		buf[PNG_BLIT_BUFFER_SIZE];
S	} PNG_output;
S
S// Handle the PNG scan line filter
Stypedef struct PNG_filter {
S	unsigned	scanbytes;
S	unsigned	bytewidth;
S	uint8_t		*line;
S	uint8_t		*prev;
S	} PNG_filter;
S
S// Handle the PNG inflate decompression
Stypedef struct PNG_zTree {
S	uint16_t table[16];			// Table of code length counts
S	uint16_t trans[288];		// Code to symbol translation table
S	} PNG_zTree;
S
Stypedef struct PNG_zinflate {
S	uint8_t		data;					// The current input stream data byte
S	uint8_t		bits;					// The number of bits left in the data byte
S	uint8_t		flags;					// Decompression flags
S	#define PNG_ZFLG_EOF			0x01	// No more input data
S	#define PNG_ZFLG_FINAL			0x02	// This is the final block
S	#define PNG_ZFLG_RESUME_MASK	0x0C	// The mask of bits for the resume state
S	#define PNG_ZFLG_RESUME_NEW		0x00	// Process a new block
S	#define PNG_ZFLG_RESUME_COPY	0x04	// Resume a byte copy from the input stream (length in tmp)
S	#define PNG_ZFLG_RESUME_INFLATE	0x08	// Resume using the specified symbol (symbol in tmp[0])
S	#define PNG_ZFLG_RESUME_OFFSET	0x0C	// Resume a byte offset copy from the buffer (length and offset in tmp)
S
S	unsigned		bufpos;				// The current buffer output position
S	unsigned		bufend;				// The current buffer end position (wraps)
S
S	PNG_zTree	ltree;					// The dynamic length tree
S	PNG_zTree	dtree;					// The dynamic distance tree
S	uint8_t		tmp[288+32];			// Temporary space for decoding dynamic trees and other temporary uses
S	uint8_t		buf[PNG_Z_BUFFER_SIZE];	// The decoding buffer and sliding window
S	} PNG_zinflate;
S
S// Put all the decoding structures together.
S// Note this is immediately followed by 2 scan lines of uncompressed image data for filtering (dynamic size).
Stypedef struct PNG_decode {
S	gdispImage		*img;
S	PNG_info		*pinfo;
S	PNG_input		i;
S	PNG_output		o;
S	PNG_filter		f;
S	PNG_zinflate	z;
S	} PNG_decode;
S
S/*-----------------------------------------------------------------
S * PNG input data stream functions
S *---------------------------------------------------------------*/
S
S// Input initialization
Sstatic void PNG_iInit(PNG_decode *d) {
S	if (d->pinfo->cache) {
S		d->i.pbuf = d->pinfo->cache;
S		d->i.buflen = d->pinfo->cachesz;
S		d->i.f = 0;
S	} else {
S		d->i.buflen = 0;
S		d->i.chunklen = 0;
S		d->i.chunknext = 8;
S		d->i.f = d->img->f;
S	}
S}
S
S// Load the next byte of image data from the PNG file
Sstatic bool_t PNG_iLoadData(PNG_decode *d) {
S	uint32_t	sz;
S
S	// Is there data still left in the buffer?
S	if (d->i.buflen)
S		return TRUE;
S
S	// If we are cached then we have no more data
S	if (!d->i.f)
S		return FALSE;
S
S	// Have we finished the current chunk?
S	if (!d->i.chunklen) {
S		while(1) {
S			// Find a new chunk
S			gfileSetPos(d->i.f, d->i.chunknext);
S			if (gfileRead(d->i.f, d->i.buf, 8) != 8)
S				return FALSE;
S
S			// Calculate the chunk length and next chunk
S			d->i.chunklen = gdispImageGetAlignedBE32(d->i.buf, 0);
S			d->i.chunknext += d->i.chunklen + 12;
S
S			// Process only image data chunks
S			switch (gdispImageGetAlignedBE32(d->i.buf, 4)) {
S			case 0x49444154:		// "IDAT" - Image Data
S				if (!d->i.chunklen)
S					break;
S				goto gotchunk;
S			case 0x49454E44:		// "IEND"	- All done
S				return FALSE;
S			}
S		}
S	}
S
Sgotchunk:
S
S	// Try to read data some from the chunk
S	sz = d->i.chunklen;
S	if (sz > PNG_FILE_BUFFER_SIZE)
S		sz = PNG_FILE_BUFFER_SIZE;
S	if (gfileRead(d->i.f, d->i.buf, sz) != sz)
S		return FALSE;
S	d->i.chunklen -= sz;
S	d->i.buflen = sz;
S	d->i.pbuf = d->i.buf;
S	return TRUE;
S}
S
S// Get the last loaded byte of image data from the PNG file
Sstatic uint8_t PNG_iGetByte(PNG_decode *d) {
S	d->i.buflen--;
S	return *d->i.pbuf++;
S}
S
S/*-----------------------------------------------------------------
S * Display output and windowing functions
S *---------------------------------------------------------------*/
S
S// Initialize the display output window
Sstatic void PNG_oInit(PNG_output *o, GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	o->g = g;
S	o->x = x;
S	o->y = y;
S	o->cx = cx;
S	o->cy = cy;
S	o->sx = sx;
S	o->sy = sy;
S	o->ix = o->iy = 0;
S	o->cnt = 0;
S}
S
S// Flush the output buffer to the display
Sstatic void PNG_oFlush(PNG_output *o) {
S	switch(o->cnt) {
S	case 0:		return;
S	case 1:		gdispGDrawPixel(o->g, o->x+o->ix-o->sx, o->y+o->iy-o->sy, o->buf[0]); 						break;
S	default:	gdispGBlitArea(o->g, o->x+o->ix-o->sx, o->y+o->iy-o->sy, o->cnt, 1, 0, 0, o->cnt, o->buf);	break;
S	}
S	o->ix += o->cnt;
S	o->cnt = 0;
S}
S
S// Start a new image line
Sstatic bool_t PNG_oStartY(PNG_output *o, coord_t y) {
S	if (y < o->sy || y >= o->sy+o->cy)
S		return FALSE;
S	o->ix = 0;
S	o->iy = y;
S	return TRUE;
S}
S
S// Feed a pixel color to the display buffer
Sstatic void PNG_oColor(PNG_output *o, color_t c) {
S	// Is it in the window
S	if (o->ix+(coord_t)o->cnt < o->sx || o->ix+(coord_t)o->cnt >= o->sx+o->cx) {
S		// No - just skip the pixel
S		PNG_oFlush(o);
S		o->ix++;
S		return;
S	}
S
S	// Is the buffer full
S	if (o->cnt >= sizeof(o->buf)/sizeof(o->buf[0]))
S		PNG_oFlush(o);
S
S	// Save the pixel
S	o->buf[o->cnt++] = c;
S}
S
S#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY || GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S	// Feed a transparent pixel to the display buffer
S	static void PNG_oTransparent(PNG_output *o) {
S		// Flush any existing pixels
S		PNG_oFlush(o);
S
S		// Just skip the pixel
S		o->ix++;
S	}
S#endif
S
S/*-----------------------------------------------------------------
S * Inflate uncompress functions
S *---------------------------------------------------------------*/
S
S// Wrap the zInflate buffer position (after increment)
S#if (PNG_Z_BUFFER_SIZE & ~(PNG_Z_BUFFER_SIZE-1)) == PNG_Z_BUFFER_SIZE
S	#define WRAP_ZBUF(x)	{ x &= PNG_Z_BUFFER_SIZE-1; }
S#else
S	#warning "PNG: PNG_Z_BUFFER_SIZE is more efficient as a power of 2"
S	#define WRAP_ZBUF(x)	{ if (x >= PNG_Z_BUFFER_SIZE) x = 0; }
S#endif
S
S// Initialize the inflate decompressor
Sstatic void PNG_zInit(PNG_zinflate *z) {
S	z->bits = 0;
S	z->flags = 0;
S	z->bufpos = z->bufend = 0;
S}
S
S// Get the inflate header (slightly customized for PNG validity testing)
Sstatic bool_t PNG_zGetHeader(PNG_decode *d) {
S	if (!PNG_iLoadData(d))
S		return FALSE;
S	d->z.tmp[0] = PNG_iGetByte(d);
S	if (!PNG_iLoadData(d))
S		return FALSE;
S	d->z.tmp[1] = PNG_iGetByte(d);
S	if (gdispImageGetAlignedBE16(d->z.tmp, 0) % 31 != 0				// Must be modulo 31, the FCHECK value is made that way
S			|| (d->z.tmp[0] & 0x0F) != 8 || (d->z.tmp[0] & 0x80)	// only method 8: inflate 32k sliding window
S			|| (d->z.tmp[1] & 0x20))								// no preset dictionary
S		return FALSE;
S	return TRUE;
S}
S
S// Get a bit from the input (treated as a LSB first stream)
Sstatic unsigned PNG_zGetBit(PNG_decode *d) {
S	unsigned	bit;
S
S	// Check for EOF
S	if ((d->z.flags & PNG_ZFLG_EOF))
S		return 1;
S
S	// Check if data is empty
S	if (!d->z.bits) {
S		if (!PNG_iLoadData(d)) {
S			d->z.flags |= PNG_ZFLG_EOF;
S			return 1;
S		}
S		d->z.data = PNG_iGetByte(d);
S		d->z.bits = 8;
S	}
S
S	// Get the next bit
S	d->z.bits--;
S	bit = d->z.data & 0x01;
S	d->z.data >>= 1;
S	return bit;
S}
S
S// Get multiple bits from the input (treated as a LSB first stream with bit order retained)
Sstatic unsigned PNG_zGetBits(PNG_decode *d, unsigned num) {
S	unsigned val;
S	unsigned limit;
S	unsigned mask;
S
S	val = 0;
S	limit = 1 << num;
S
S	for (mask = 1; mask < limit; mask <<= 1)
S		if (PNG_zGetBit(d))
S			val += mask;
S	return val;
S}
S
S// Build an inflate dynamic tree using a string of byte lengths
Sstatic void PNG_zBuildTree(PNG_zTree *t, const uint8_t *lengths, unsigned num) {
S	unsigned		i, sum;
S	uint16_t		offs[16];
S
S	for (i = 0; i < 16; ++i)
S		t->table[i] = 0;
S	for (i = 0; i < num; ++i)
S		t->table[lengths[i]]++;
S
S	t->table[0] = 0;
S
S	for (sum = 0, i = 0; i < 16; ++i) {
S		offs[i] = sum;
S		sum += t->table[i];
S	}
S	for (i = 0; i < num; ++i) {
S		if (lengths[i])
S			t->trans[offs[lengths[i]]++] = i;
S	}
S}
S
S// Get an inflate decode symbol
Sstatic uint16_t PNG_zGetSymbol(PNG_decode *d, PNG_zTree *t) {
S	int			sum, cur;
S	unsigned	len;
S
S	sum = cur = 0;
S	len = 0;
S	do {
S		cur <<= 1;
S		cur += PNG_zGetBit(d);
S		if ((d->z.flags & PNG_ZFLG_EOF))
S			return 0;
S		len++;
S
S		sum += t->table[len];
S		cur -= t->table[len];
S	} while (cur >= 0);
S
S	return t->trans[sum + cur];
S}
S
S// Build inflate fixed length and distance trees
Sstatic void PNG_zBuildFixedTrees(PNG_decode *d) {
S	unsigned	i;
S
S	for (i = 0; i < 16; ++i)	d->z.ltree.table[i] = 0;
S	d->z.ltree.table[7] = 24;
S	d->z.ltree.table[8] = 152;
S	d->z.ltree.table[9] = 112;
S	for (i = 0; i < 24; ++i)	d->z.ltree.trans[i] = 256 + i;
S	for (i = 0; i < 144; ++i)	d->z.ltree.trans[24 + i] = i;
S	for (i = 0; i < 8; ++i)		d->z.ltree.trans[24 + 144 + i] = 280 + i;
S	for (i = 0; i < 112; ++i)	d->z.ltree.trans[24 + 144 + 8 + i] = 144 + i;
S
S	for (i = 0; i < 16; ++i)	d->z.dtree.table[i] = 0;
S	d->z.dtree.table[5] = 32;
S	for (i = 0; i < 32; ++i)	d->z.dtree.trans[i] = i;
S	for ( ; i < 288; ++i)		d->z.dtree.trans[i] = 0;
S}
S
S// Build inflate dynamic length and distance trees
Sstatic bool_t PNG_zDecodeTrees(PNG_decode *d) {
S	static const uint8_t IndexLookup[19] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };
S	unsigned	hlit, hdist, hclen;
S	unsigned	i, num;
S	uint16_t	symbol;
S	uint8_t		val;
S
S	hlit	= PNG_zGetBits(d, 5) + 257;		// 257 - 286
S	hdist	= PNG_zGetBits(d, 5) + 1;		// 1 - 32
S	hclen	= PNG_zGetBits(d, 4) + 4;		// 4 - 19
S
S	if ((d->z.flags & PNG_ZFLG_EOF))
S		return FALSE;
S
S	for (i = 0; i < 19; ++i)
S		d->z.tmp[i] = 0;
S
S	// Get code lengths for the code length alphabet
S	for (i = 0; i < hclen; ++i)
S		d->z.tmp[IndexLookup[i]] = PNG_zGetBits(d, 3);
S
S	if ((d->z.flags & PNG_ZFLG_EOF))
S		return FALSE;
S
S	// Build the code length tree
S	PNG_zBuildTree(&d->z.ltree, d->z.tmp, 19);
S
S	// Decode code lengths
S	for (num = 0; num < hlit + hdist; ) {
S		symbol = PNG_zGetSymbol(d, &d->z.ltree);
S		if ((d->z.flags & PNG_ZFLG_EOF))
S			return FALSE;
S
S		switch(symbol) {
S		case 16:		// Copy the previous code length 3-6 times
S			val = d->z.tmp[num - 1];
S			for (i = PNG_zGetBits(d, 2) + 3; i; i--)
S				d->z.tmp[num++] = val;
S			break;
S		case 17:		// Repeat code length 0 for 3-10 times
S			for (i = PNG_zGetBits(d, 3) + 3; i; i--)
S				d->z.tmp[num++] = 0;
S			break;
S		case 18:		// Repeat code length 0 for 11-138 times
S			for (i = PNG_zGetBits(d, 7) + 11; i; i--)
S				d->z.tmp[num++] = 0;
S			break;
S		default:		// symbols 0-15 are the actual code lengths
S			d->z.tmp[num++] = symbol;
S			break;
S		}
S	}
S
S	// Build the trees
S	PNG_zBuildTree(&d->z.ltree, d->z.tmp, hlit);
S	PNG_zBuildTree(&d->z.dtree, d->z.tmp + hlit, hdist);
S	return TRUE;
S}
S
S// Copy bytes from the input stream. Completing the copy completes the block.
Sstatic bool_t PNG_zCopyInput(PNG_decode *d, unsigned length) {
S	// Copy the block
S	while(length--) {
S		if (!PNG_iLoadData(d)) {				// EOF?
S			d->z.flags |= PNG_ZFLG_EOF;
S			return FALSE;
S		}
S		d->z.buf[d->z.bufend++] = PNG_iGetByte(d);
S		WRAP_ZBUF(d->z.bufend);
S		if (d->z.bufend == d->z.bufpos) {		// Buffer full?
S			d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_COPY;
S			((unsigned *)d->z.tmp)[0] = length;
S			return TRUE;
S		}
S	}
S
S	// The block is done
S	d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_NEW;
S	return TRUE;
S}
S
S// Copy an uncompressed inflate block into the output
Sstatic bool_t PNG_zUncompressedBlock(PNG_decode *d) {
S	unsigned	length;
S
S	// This block works on byte boundaries
S	d->z.bits = 0;
S
S	// Get 4 byte header
S	for (length = 0; length < 4; length++) {
S		if (!PNG_iLoadData(d)) {			// EOF?
S			d->z.flags |= PNG_ZFLG_EOF;
S			return FALSE;
S		}
S		d->z.tmp[length] = PNG_iGetByte(d);
S	}
S
S	// Get length
S	length = gdispImageGetAlignedLE16(d->z.tmp, 0);
S
S	// Check length
S	if ((uint16_t)length != (uint16_t)~gdispImageGetAlignedLE16(d->z.tmp, 2)) {
S		d->z.flags |= PNG_ZFLG_EOF;
S		return FALSE;
S	}
S
S	// Copy the block
S	return PNG_zCopyInput(d, length);
S}
S
S// Inflate a compressed inflate block into the output
Sstatic bool_t PNG_zInflateBlock(PNG_decode *d) {
S	static const uint8_t	lbits[30]	= { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 6 };
S	static const uint16_t	lbase[30]	= { 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 323 };
S	static const uint8_t	dbits[30]	= { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 };
S	static const uint16_t	dbase[30]	= { 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 };
S	unsigned	length, dist, offset;
S	uint16_t	symbol;
S
S	while(1) {
S		symbol = PNG_zGetSymbol(d, &d->z.ltree);							// EOF?
S		if ((d->z.flags & PNG_ZFLG_EOF))
S			goto iserror;
S
S		// Is the block done?
S		if (symbol == 256) {
S			d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_NEW;
S			return TRUE;
S		}
S
S		if (symbol < 256) {
S			// The symbol is the data
S			d->z.buf[d->z.bufend++] = (uint8_t)symbol;
S			WRAP_ZBUF(d->z.bufend);
S			if (d->z.bufend == d->z.bufpos) {								// Buffer full?
S				d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_INFLATE;
S				return TRUE;
S			}
S			continue;
S		}
S
S		// Shift the symbol down into an index
S		symbol -= 257;
S
S		if (symbol >= sizeof(lbits))										// Bad index?
S			goto iserror;
S
S		// Get more bits from length code
S		length = PNG_zGetBits(d, lbits[symbol]) + lbase[symbol];
S		if ((d->z.flags & PNG_ZFLG_EOF) || length >= PNG_Z_BUFFER_SIZE)		// Bad length?
S			goto iserror;
S
S		// Get the distance code
S		dist = PNG_zGetSymbol(d, &d->z.dtree);								// Bad distance?
S		if ((d->z.flags & PNG_ZFLG_EOF) || dist >= sizeof(dbits))
S			goto iserror;
S
S		// Get more bits from distance code
S		offset = PNG_zGetBits(d, dbits[dist]) + dbase[dist];
S		if ((d->z.flags & PNG_ZFLG_EOF) || offset >= PNG_Z_BUFFER_SIZE)		// Bad offset?
S			goto iserror;
S
S		// Work out the source buffer position allowing for wrapping
S		if (offset > d->z.bufend)
S			offset -= PNG_Z_BUFFER_SIZE;
S		offset = d->z.bufend - offset;
S
S		// Copy the matching string
S		while (length--) {
S			d->z.buf[d->z.bufend++] = d->z.buf[offset++];
S			WRAP_ZBUF(d->z.bufend);
S			WRAP_ZBUF(offset);
S			if (d->z.bufend == d->z.bufpos) {								// Buffer full?
S				d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_OFFSET;
S				((unsigned *)d->z.tmp)[0] = length;
S				((unsigned *)d->z.tmp)[1] = offset;
S				return TRUE;
S			}
S		}
S	}
S
Siserror:
S	d->z.flags |= PNG_ZFLG_EOF;
S	return FALSE;
S}
S
S// Start a new uncompressed/inflate block
Sstatic bool_t PNG_zStartBlock(PNG_decode *d) {
S	// Check for previous error, EOF or no more blocks
S	if ((d->z.flags & (PNG_ZFLG_EOF|PNG_ZFLG_FINAL)))
S		return FALSE;
S
S	// Is this the final inflate block?
S	if (PNG_zGetBit(d))
S		d->z.flags |= PNG_ZFLG_FINAL;
S
S	// Get the block type
S	switch (PNG_zGetBits(d, 2)) {
S
S	case 0:			// Decompress uncompressed block
S		if (!PNG_zUncompressedBlock(d))
S			return FALSE;
S		break;
S
S	case 1:			// Decompress block with fixed huffman trees
S		PNG_zBuildFixedTrees(d);
S		if (!PNG_zInflateBlock(d))
S			return FALSE;
S		break;
S
S	case 2:			// Decompress block with dynamic huffman trees
S		if (!PNG_zDecodeTrees(d))
S			return FALSE;
S		if (!PNG_zInflateBlock(d))
S			return FALSE;
S		break;
S
S	default:		// Bad block type
S		// Mark it as an error
S		d->z.flags |= PNG_ZFLG_EOF;
S		return FALSE;
S	}
S	return TRUE;
S}
S
S// Resume an offset copy
Sstatic bool_t PNG_zResumeOffset(PNG_decode *d, unsigned length, unsigned offset) {
S	// Copy the matching string
S	while (length--) {
S		d->z.buf[d->z.bufend++] = d->z.buf[offset++];
S		WRAP_ZBUF(d->z.bufend);
S		WRAP_ZBUF(offset);
S		if (d->z.bufend == d->z.bufpos) {						// Buffer full?
S			d->z.flags = (d->z.flags & ~PNG_ZFLG_RESUME_MASK) | PNG_ZFLG_RESUME_OFFSET;
S			((unsigned *)d->z.tmp)[0] = length;
S			((unsigned *)d->z.tmp)[1] = offset;
S			return TRUE;
S		}
S	}
S	return PNG_zInflateBlock(d);
S}
S
S// Get a fully decompressed byte from the inflate data stream
Sstatic uint8_t PNG_zGetByte(PNG_decode *d) {
S	uint8_t		data;
S
S	// Do we have any data in the buffers
S	while (d->z.bufpos == d->z.bufend) {
S
S		// No, get some more data
S
S		switch((d->z.flags & PNG_ZFLG_RESUME_MASK)) {
S		case PNG_ZFLG_RESUME_NEW:			// Start a new inflate block
S			if (!PNG_zStartBlock(d))
S				return 0xFF;
S			break;
S		case PNG_ZFLG_RESUME_COPY:			// Resume uncompressed block copy for length bytes
S			if (!PNG_zCopyInput(d, ((unsigned *)d->z.tmp)[0]))
S				return 0xFF;
S			break;
S		case PNG_ZFLG_RESUME_INFLATE:		// Resume compressed block
S			if (!PNG_zInflateBlock(d))
S				return 0xFF;
S			break;
S		case PNG_ZFLG_RESUME_OFFSET:		// Resume compressed block using offset copy for length bytes
S			if (!PNG_zResumeOffset(d, ((unsigned *)d->z.tmp)[0], ((unsigned *)d->z.tmp)[1]))
S				return 0xFF;
S			break;
S		}
S
S		// Check for no data being provided
S		// A resume code means the buffer is completely full so the test must be skipped
S		if ((d->z.flags & PNG_ZFLG_RESUME_MASK) != PNG_ZFLG_RESUME_NEW)
S			break;
S	}
S
S	// Get the next data byte
S	data = d->z.buf[d->z.bufpos++];
S	WRAP_ZBUF(d->z.bufpos);
S
S	return data;
S}
S
S/*-----------------------------------------------------------------
S * Scan-line filter functions
S *---------------------------------------------------------------*/
S
S// Initialise the scan-line engine
Sstatic void PNG_fInit(PNG_filter *f, uint8_t *buf, unsigned bytewidth, unsigned scanbytes) {
S	f->scanbytes = scanbytes;
S	f->bytewidth = bytewidth;
S	f->line = buf;
S	f->prev = 0;
S}
S
S// Get ready for the next scan-line
Sstatic void PNG_fNext(PNG_filter *f) {
S	if (f->prev && f->line > f->prev) {
S		f->line = f->prev;
S		f->prev += f->scanbytes;
S	} else {
S		f->prev = f->line;
S		f->line += f->scanbytes;
S	}
S}
S
S// Predictor function for filter0 mode 4
Sstatic uint8_t PNG_fCalcPath(uint16_t a, uint16_t b, uint16_t c) {
S	uint16_t pa = b > c ? (b - c) : (c - b);
S	uint16_t pb = a > c ? (a - c) : (c - a);
S	uint16_t pc = a + b > c + c ? (a + b - c - c) : (c + c - a - b);
S
S	if (pc < pa && pc < pb)
S		return (uint8_t)c;
S	if (pb < pa)
S		return (uint8_t)b;
S	return (uint8_t)a;
S}
S
S// Scan-line filter type 0
Sstatic bool_t PNG_unfilter_type0(PNG_decode *d) {		// PNG filter method 0
S	uint8_t		ft;
S	unsigned	i;
S
S	// Get the filter type and check for validity (eg not EOF)
S	ft = PNG_zGetByte(d);
S	if (ft > 0x04)
S		return FALSE;
S
S	// Uncompress the scan line
S	for(i = 0; i < d->f.scanbytes; i++)
S		d->f.line[i] = PNG_zGetByte(d);
S
S	// Adjust the scan line based on the filter type
S	// 0 = no adjustment
S	switch(ft) {
S	case 1:
S		for(i = d->f.bytewidth; i < d->f.scanbytes; i++)
S			d->f.line[i] += d->f.line[i - d->f.bytewidth];
S		break;
S	case 2:
S		if (d->f.prev) {
S			for(i = 0; i < d->f.scanbytes; i++)
S				d->f.line[i] += d->f.prev[i];
S		}
S		break;
S	case 3:
S		if (d->f.prev) {
S			for(i = 0; i < d->f.bytewidth; i++)
S				d->f.line[i] += d->f.prev[i] / 2;
S			for( ; i < d->f.scanbytes; i++)
S				d->f.line[i] += (d->f.line[i - d->f.bytewidth] + d->f.prev[i]) / 2;
S		} else {
S			for(i = d->f.bytewidth; i < d->f.scanbytes; i++)
S				d->f.line[i] += d->f.line[i - d->f.bytewidth] / 2;
S		}
S		break;
S	case 4:
S		if (d->f.prev) {
S			for(i = 0; i < d->f.bytewidth; i++)
S				d->f.line[i] += d->f.prev[i];					// PNG_fCalcPath(0, val, 0) is always val
S			for( ; i < d->f.scanbytes; i++)
S				d->f.line[i] += PNG_fCalcPath(d->f.line[i - d->f.bytewidth], d->f.prev[i], d->f.prev[i - d->f.bytewidth]);
S		} else {
S			for(i = d->f.bytewidth; i < d->f.scanbytes; i++)
S				d->f.line[i] += d->f.line[i - d->f.bytewidth];	// PNG_fCalcPath(val, 0, 0) is always val
S		}
S		break;
S	}
S
S	return TRUE;
S}
S
S/*-----------------------------------------------------------------
S * Scan-line output and color conversion functions
S *---------------------------------------------------------------*/
S
S#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124
S	static void PNG_OutGRAY124(PNG_decode *d) {
S		unsigned	i;
S		PNG_info 	*pinfo;
S		uint8_t		px;
S		uint8_t		bits;
S
S		pinfo = d->pinfo;
S		for(i = 0; i < d->f.scanbytes; i++) {
S			for(bits = 8; bits; bits -= pinfo->bitdepth) {
S				px = (d->f.line[i] >> (bits - pinfo->bitdepth)) & ((1U << pinfo->bitdepth)-1);
S				#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S					if ((pinfo->flags & PNG_FLG_TRANSPARENT) && (uint16_t)px == pinfo->trans_r) {
S						#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S							if ((pinfo->flags & PNG_FLG_BACKGROUND)) {
S								PNG_oColor(&d->o, pinfo->bg);
S								continue;
S							}
S						#endif
S						PNG_oTransparent(&d->o);
S						continue;
S					}
S				#endif
S				px = px << (8-pinfo->bitdepth);
S				if (px >= 0x80) px += ((1U << (8-pinfo->bitdepth))-1);
S				PNG_oColor(&d->o, LUMA2COLOR(px));
S			}
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_8
S	static void PNG_OutGRAY8(PNG_decode *d) {
S		unsigned		i;
S		uint8_t			px;
S		#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i++) {
S			px = d->f.line[i];
S			#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S				if ((pinfo->flags & PNG_FLG_TRANSPARENT) && (uint16_t)px == pinfo->trans_r) {
S					#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S						if ((pinfo->flags & PNG_FLG_BACKGROUND)) {
S							PNG_oColor(&d->o, pinfo->bg);
S							continue;
S						}
S					#endif
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S			PNG_oColor(&d->o, LUMA2COLOR(px));
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_16
S	static void PNG_OutGRAY16(PNG_decode *d) {
S		unsigned		i;
S		uint8_t			px;
S		#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=2) {
S			px = d->f.line[i];
S			#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S				if ((pinfo->flags & PNG_FLG_TRANSPARENT) && gdispImageGetBE16(d->f.line, i) == pinfo->trans_r) {
S					#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S						if ((pinfo->flags & PNG_FLG_BACKGROUND)) {
S							PNG_oColor(&d->o, pinfo->bg);
S							continue;
S						}
S					#endif
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S			PNG_oColor(&d->o, LUMA2COLOR(px));
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_RGB_8
S	static void PNG_OutRGB8(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=3) {
S			#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S				if ((pinfo->flags & PNG_FLG_TRANSPARENT)
S							&& (uint16_t)d->f.line[i+0] == pinfo->trans_r
S							&& (uint16_t)d->f.line[i+1] == pinfo->trans_g
S							&& (uint16_t)d->f.line[i+2] == pinfo->trans_b) {
S					#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S						if ((pinfo->flags & PNG_FLG_BACKGROUND)) {
S							PNG_oColor(&d->o, pinfo->bg);
S							continue;
S						}
S					#endif
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S			PNG_oColor(&d->o, RGB2COLOR(d->f.line[i+0], d->f.line[i+1], d->f.line[i+2]));
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_RGB_16
S	static void PNG_OutRGB16(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=6) {
S			#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S				if ((pinfo->flags & PNG_FLG_TRANSPARENT)
S							&& gdispImageGetBE16(d->f.line, i+0) == pinfo->trans_r
S							&& gdispImageGetBE16(d->f.line, i+2) == pinfo->trans_g
S							&& gdispImageGetBE16(d->f.line, i+4) == pinfo->trans_b) {
S					#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S						if ((pinfo->flags & PNG_FLG_BACKGROUND)) {
S							PNG_oColor(&d->o, pinfo->bg);
S							continue;
S						}
S					#endif
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S			PNG_oColor(&d->o, RGB2COLOR(d->f.line[i+0], d->f.line[i+2], d->f.line[i+4]));
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_PALETTE_124
S	static void PNG_OutPAL124(PNG_decode *d) {
S		unsigned	i;
S		PNG_info 	*pinfo;
S		unsigned	idx;
S		uint8_t 	bits;
S
S		pinfo = d->pinfo;
S		for(i = 0; i < d->f.scanbytes; i++) {
S			for(bits = 8; bits; bits -= pinfo->bitdepth) {
S				idx = (d->f.line[i] >> (bits - pinfo->bitdepth)) & ((1U << pinfo->bitdepth)-1);
S
S				if ((uint16_t)idx >= pinfo->palsize) {
S					PNG_oColor(&d->o, RGB2COLOR(0, 0, 0));
S					continue;
S				}
S				idx *= 4;
S
S				#define pix_color	RGB2COLOR(pinfo->palette[idx], pinfo->palette[idx+1], pinfo->palette[idx+2])
S				#define pix_alpha	pinfo->palette[idx+3]
S
S				#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S					#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S						if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S							PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S							continue;
S						}
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S						if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S							PNG_oTransparent(&d->o);
S							continue;
S						}
S					#endif
S				#endif
S
S				PNG_oColor(&d->o, pix_color);
S
S				#undef pix_color
S				#undef pix_alpha
S			}
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_PALETTE_8
S	static void PNG_OutPAL8(PNG_decode *d) {
S		unsigned	i;
S		PNG_info 	*pinfo;
S		unsigned	idx;
S
S		pinfo = d->pinfo;
S		for(i = 0; i < d->f.scanbytes; i++) {
S			idx = (unsigned)d->f.line[i];
S
S			if ((uint16_t)idx >= pinfo->palsize) {
S				PNG_oColor(&d->o, RGB2COLOR(0, 0, 0));
S				continue;
S			}
S			idx *= 4;
S
S			#define pix_color	RGB2COLOR(pinfo->palette[idx], pinfo->palette[idx+1], pinfo->palette[idx+2])
S			#define pix_alpha	pinfo->palette[idx+3]
S
S			#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S				#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S					if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S						PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S						continue;
S					}
S				#endif
S				#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S					if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S						PNG_oTransparent(&d->o);
S						continue;
S					}
S				#endif
S			#endif
S
S			PNG_oColor(&d->o, pix_color);
S
S			#undef pix_color
S			#undef pix_alpha
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_GRAYALPHA_8
S	static void PNG_OutGRAYA8(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=2) {
S			#define pix_color	LUMA2COLOR(d->f.line[i])
S			#define pix_alpha	d->f.line[i+1]
S
S			#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S				if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S					PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S					continue;
S				}
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S				if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S
S			PNG_oColor(&d->o, pix_color);
S
S			#undef pix_color
S			#undef pix_alpha
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
S	static void PNG_OutGRAYA16(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=4) {
S			#define pix_color	LUMA2COLOR(d->f.line[i])
S			#define pix_alpha	d->f.line[i+2]
S
S			#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S				if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S					PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S					continue;
S				}
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S				if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S
S			PNG_oColor(&d->o, pix_color);
S
S			#undef pix_color
S			#undef pix_alpha
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_RGBALPHA_8
S	static void PNG_OutRGBA8(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=4) {
S			#define pix_color	RGB2COLOR(d->f.line[i+0], d->f.line[i+1], d->f.line[i+2])
S			#define pix_alpha	d->f.line[i+3]
S
S			#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S				if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S					PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S					continue;
S				}
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S				if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S
S			PNG_oColor(&d->o, pix_color);
S
S			#undef pix_color
S			#undef pix_alpha
S		}
S	}
S#endif
S#if GDISP_NEED_IMAGE_PNG_RGBALPHA_16
S	static void PNG_OutRGBA16(PNG_decode *d) {
S		unsigned		i;
S		#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S			PNG_info 	*pinfo = d->pinfo;
S		#endif
S
S		for(i = 0; i < d->f.scanbytes; i+=8) {
S			#define pix_color	RGB2COLOR(d->f.line[i+0], d->f.line[i+2], d->f.line[i+4])
S			#define pix_alpha	d->f.line[i+6]
S
S			#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S				if (pix_alpha != 255 && (pinfo->flags & PNG_FLG_BACKGROUND)) {
S					PNG_oColor(&d->o, gdispBlendColor(pix_color, pinfo->bg, pix_alpha));
S					continue;
S				}
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_ALPHACLIFF > 0
S				if (pix_alpha < GDISP_NEED_IMAGE_PNG_ALPHACLIFF) {
S					PNG_oTransparent(&d->o);
S					continue;
S				}
S			#endif
S
S			PNG_oColor(&d->o, pix_color);
S
S			#undef pix_color
S			#undef pix_alpha
S		}
S	}
S#endif
S
S/*-----------------------------------------------------------------
S * Public PNG functions
S *---------------------------------------------------------------*/
S
Svoid gdispImageClose_PNG(gdispImage *img) {
S	PNG_info *pinfo;
S
S	pinfo = (PNG_info *)img->priv;
S	if (pinfo) {
S		if (pinfo->palette)
S			gdispImageFree(img, (void *)pinfo->palette, pinfo->palsize*4);
S		if (pinfo->cache)
S			gdispImageFree(img, (void *)pinfo->cache, pinfo->cachesz);
S		gdispImageFree(img, (void *)pinfo, sizeof(PNG_info));
S		img->priv = 0;
S	}
S}
S
SgdispImageError gdispImageOpen_PNG(gdispImage *img) {
S	PNG_info	*pinfo;
S	uint32_t	pos;
S	uint32_t	len;
S	uint8_t		buf[13];
S
S	/* Read the file identifier */
S	if (gfileRead(img->f, buf, 8) != 8)
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	// Check the PNG signature
S	if(buf[0] != 137 || buf[1] != 80 || buf[2] != 78 || buf[3] != 71 || buf[4] != 13 || buf[5] != 10 || buf[6] != 26 || buf[7] != 10)
S		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
S
S	/* We know we are a PNG format image */
S	img->flags = 0;
S	img->priv = 0;
S	img->type = GDISP_IMAGE_TYPE_PNG;
S
S	/* Allocate our private area */
S	if (!(img->priv = gdispImageAlloc(img, sizeof(PNG_info))))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	/* Initialise the essential bits in the private area */
S	pinfo = (PNG_info *)img->priv;
S	pinfo->flags = 0;
S	pinfo->cache = 0;
S	pinfo->trans_r = 0;
S	pinfo->trans_g = 0;
S	pinfo->trans_b = 0;
S	#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S		pinfo->palsize = 0;
S		pinfo->palette = 0;
S	#endif
S
S	// Cycle the chunks to get other information
S	for(pos = 8; ; pos += len+12, gfileSetPos(img->f, pos)) {
S		// Get a chunk header
S		if (gfileRead(img->f, buf, 8) != 8)
S			goto exit_baddata;
S
S		// Calculate the chunk length
S		len = gdispImageGetAlignedBE32(buf, 0);
S
S		// Process the interesting information chunks
S		switch (gdispImageGetAlignedBE32(buf, 4)) {
S		case 0x49484452:		// "IHDR" - Header block
S
S			// Check if the header is already done
S			if ((pinfo->flags & PNG_FLG_HEADERDONE))
S				goto exit_baddata;
S
S			// Read the image parameters
S			if (len < 13 || gfileRead(img->f, buf, 13) != 13)
S				goto exit_baddata;
S
S			img->width = gdispImageGetAlignedBE16(buf, 2);
S			img->height = gdispImageGetAlignedBE16(buf, 6);
S			pinfo->bitdepth = gdispImageGetVar(uint8_t, buf, 8);
S			pinfo->mode = gdispImageGetVar(uint8_t, buf, 9);
S			if (gdispImageGetVar(uint8_t, buf, 12)) {
S				pinfo->flags |= PNG_FLG_INTERLACE;
S				#if !GDISP_NEED_IMAGE_PNG_INTERLACED
S					goto exit_unsupported;
S				#endif
S			}
S
S			// Check width and height, filter, compression and interlacing
S			if (gdispImageGetVar(uint16_t, buf, 0) != 0 || img->width <= 0			// width
S					|| gdispImageGetVar(uint16_t, buf, 4) != 0  || img->height <= 0	// height
S					|| gdispImageGetVar(uint8_t, buf, 10) != 0						// compression
S					|| gdispImageGetVar(uint8_t, buf, 11) != 0						// filter
S					|| gdispImageGetVar(uint8_t, buf, 12) > 1						// interlace
S					)
S				goto exit_unsupported;
S
S			// Check mode, bitdepth and calculate bits per pixel
S			switch(pinfo->mode) {
S			#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_8 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_16
S				case PNG_COLORMODE_GRAY:
S					switch(pinfo->bitdepth) {
S					#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124
S						case 1:
S						case 2:
S						case 4:		pinfo->out = PNG_OutGRAY124;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_8
S						case 8:		pinfo->out = PNG_OutGRAY8;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_16
S						case 16:	pinfo->out = PNG_OutGRAY16;	break;
S					#endif
S					default:	goto exit_unsupported;
S					}
S					pinfo->bpp = pinfo->bitdepth;
S					break;
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_RGB_8 || GDISP_NEED_IMAGE_PNG_RGB_16
S				case PNG_COLORMODE_RGB:
S					switch(pinfo->bitdepth) {
S					#if GDISP_NEED_IMAGE_PNG_RGB_8
S						case 8:		pinfo->out = PNG_OutRGB8;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_RGB_16
S						case 16:	pinfo->out = PNG_OutRGB16;	break;
S					#endif
S					default:	goto exit_unsupported;
S					}
S					pinfo->bpp = pinfo->bitdepth * 3;
S					break;
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S				case PNG_COLORMODE_PALETTE:
S					switch(pinfo->bitdepth) {
S					#if GDISP_NEED_IMAGE_PNG_PALETTE_124
S						case 1:
S						case 2:
S						case 4:		pinfo->out = PNG_OutPAL124;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_PALETTE_8
S						case 8:		pinfo->out = PNG_OutPAL8;	break;
S					#endif
S					default:	goto exit_unsupported;
S					}
S					pinfo->bpp = pinfo->bitdepth;
S					break;
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_GRAYALPHA_8 || GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
S				case PNG_COLORMODE_GRAYALPHA:
S					switch(pinfo->bitdepth) {
S					#if GDISP_NEED_IMAGE_PNG_GRAYALPHA_8
S						case 8:		pinfo->out = PNG_OutGRAYA8;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
S						case 16:	pinfo->out = PNG_OutGRAYA16;	break;
S					#endif
S					default:	goto exit_unsupported;
S					}
S					pinfo->bpp = pinfo->bitdepth * 2;
S					break;
S			#endif
S			#if GDISP_NEED_IMAGE_PNG_RGBALPHA_8 || GDISP_NEED_IMAGE_PNG_RGBALPHA_16
S				case PNG_COLORMODE_RGBA:
S					switch(pinfo->bitdepth) {
S					#if GDISP_NEED_IMAGE_PNG_RGBALPHA_8
S						case 8:		pinfo->out = PNG_OutRGBA8;	break;
S					#endif
S					#if GDISP_NEED_IMAGE_PNG_RGBALPHA_16
S						case 16:	pinfo->out = PNG_OutRGBA16;	break;
S					#endif
S					default:	goto exit_unsupported;
S					}
S					pinfo->bpp = pinfo->bitdepth * 4;
S					break;
S			#endif
S			default:
S				goto exit_unsupported;
S			}
S
S			pinfo->flags |= PNG_FLG_HEADERDONE;
S			break;
S
S		case 0x49454E44:		// "IEND"	- All done
S			goto exit_baddata;			// Oops we didn't get any data.
S
S		case 0x49444154:		// "IDAT" - Image Data
S
S			// Check if the header is already done
S			if (!(pinfo->flags & PNG_FLG_HEADERDONE))
S				goto exit_baddata;
S
S			#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S				// Make sure a palette image actually has a palette
S				if (pinfo->mode == PNG_COLORMODE_PALETTE && !pinfo->palette)
S					goto exit_baddata;
S			#endif
S
S			// All good
S			return GDISP_IMAGE_ERR_OK;
S
S		#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S			case 0x504C5445:		// "PLTE"	- Palette
S
S				// Check if the header is already done
S				if (!(pinfo->flags & PNG_FLG_HEADERDONE))
S					goto exit_baddata;
S
S				// Skip a palette if we don't need it.
S				if (pinfo->mode != PNG_COLORMODE_PALETTE)
S					break;
S
S				// Check the size and that we don't have one already
S				if (len > 3 * 256 || pinfo->palette)
S					goto exit_baddata;
S
S				// Allocate the palette
S				pinfo->palsize = len / 3;
S				if (!(pinfo->palette = gfxAlloc(pinfo->palsize * 4)))
S					goto exit_nonmem;
S
S				// Read the palette
S				{
S					uint16_t	idx;
S					uint8_t		*p;
S
S					for(idx=pinfo->palsize, p=pinfo->palette; idx; p += 4, idx--) {
S						if (gfileRead(img->f, p, 3) != 3)
S							goto exit_baddata;
S						p[3] = 255;
S					}
S				}
S
S				break;
S		#endif
S
S		#if GDISP_NEED_IMAGE_PNG_TRANSPARENCY
S			case 0x74524E53:		// "tRNS"	- Transparency
S
S				// Check if the header is already done
S				if (!(pinfo->flags & PNG_FLG_HEADERDONE))
S					goto exit_baddata;
S
S				// Transparency is handled differently depending on the mode
S				switch(pinfo->mode) {
S
S				#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S					case PNG_COLORMODE_PALETTE:
S						if (len > pinfo->palsize)
S							goto exit_baddata;
S
S						// Adjust the palette
S						{
S							uint16_t	idx;
S							uint8_t		*p;
S
S							for(idx=len, p=pinfo->palette+3; idx; p += 4, idx--) {
S								if (gfileRead(img->f, p, 1) != 1)
S									goto exit_baddata;
S							}
S						}
S						break;
S				#endif
S
S				#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_8 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_16
S					case PNG_COLORMODE_GRAY:
S						// Read the transparency color
S						if (len != 2 || gfileRead(img->f, buf, 2) != 2)
S							goto exit_baddata;
S
S						pinfo->flags |= PNG_FLG_TRANSPARENT;
S						pinfo->trans_r = gdispImageGetAlignedBE16(buf, 0);
S						break;
S				#endif
S				#if GDISP_NEED_IMAGE_PNG_RGB_8 || GDISP_NEED_IMAGE_PNG_RGB_16
S					case PNG_COLORMODE_RGB:
S						// Read the transparency color
S						if (len != 6 || gfileRead(img->f, buf, 6) != 6)
S							goto exit_baddata;
S
S						pinfo->flags |= PNG_FLG_TRANSPARENT;
S						pinfo->trans_r = gdispImageGetAlignedBE16(buf, 0);
S						pinfo->trans_g = gdispImageGetAlignedBE16(buf, 2);
S						pinfo->trans_b = gdispImageGetAlignedBE16(buf, 4);
S						break;
S				#endif
S				default:
S					goto exit_unsupported;
S				}
S
S				break;
S		#endif
S
S		#if GDISP_NEED_IMAGE_PNG_BACKGROUND
S			case 0x624B4744:		// "bKGD"	- Background
S
S				// Check if the header is already done
S				if (!(pinfo->flags & PNG_FLG_HEADERDONE))
S					goto exit_baddata;
S
S				pinfo->flags |= PNG_FLG_BACKGROUND;
S
S				// Background data is handled differently depending on the mode
S				switch(pinfo->mode) {
S
S				#if GDISP_NEED_IMAGE_PNG_PALETTE_124 || GDISP_NEED_IMAGE_PNG_PALETTE_8
S					case PNG_COLORMODE_PALETTE:
S						if (!pinfo->palette || len < 1 || gfileRead(img->f, buf, 1) != 1 || (uint16_t)buf[0] >= pinfo->palsize)
S							goto exit_baddata;
S						pinfo->bg = RGB2COLOR(pinfo->palette[((unsigned)buf[0])*4+0],
S												pinfo->palette[((unsigned)buf[0])*4+1],
S												pinfo->palette[((unsigned)buf[0])*4+2]);
S						break;
S				#endif
S
S				#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_8 || GDISP_NEED_IMAGE_PNG_GRAYSCALE_16 || GDISP_NEED_IMAGE_PNG_GRAYALPHA_8 || GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
S					case PNG_COLORMODE_GRAY:
S					case PNG_COLORMODE_GRAYALPHA:
S						if (len < 2 || gfileRead(img->f, buf, 2) != 2)
S							goto exit_baddata;
S						switch(pinfo->bitdepth) {
S						#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_124
S							case 1:
S							case 2:
S							case 4:
S								buf[1] <<= 8-pinfo->bitdepth;
S								if (buf[1] >= 0x80)
S									buf[1] += ((1U << (8-pinfo->bitdepth))-1);
S								pinfo->bg = LUMA2COLOR(buf[1]);
S								break;
S						#endif
S						#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_8 || GDISP_NEED_IMAGE_PNG_GRAYALPHA_8
S							case 8:
S								pinfo->bg = LUMA2COLOR(buf[1]);
S								break;
S						#endif
S						#if GDISP_NEED_IMAGE_PNG_GRAYSCALE_16 || GDISP_NEED_IMAGE_PNG_GRAYALPHA_16
S							case 16:
S								pinfo->bg = LUMA2COLOR(buf[0]);
S								break;
S						#endif
S						}
S						break;
S				#endif
S				#if GDISP_NEED_IMAGE_PNG_RGB_8 || GDISP_NEED_IMAGE_PNG_RGB_16 || GDISP_NEED_IMAGE_PNG_RGBALPHA_8 || GDISP_NEED_IMAGE_PNG_RGBALPHA_16
S					case PNG_COLORMODE_RGB:
S					case PNG_COLORMODE_RGBA:
S						if (len < 6 || gfileRead(img->f, buf, 6) != 6)
S							goto exit_baddata;
S
S						#if GDISP_NEED_IMAGE_PNG_RGB_16 || GDISP_NEED_IMAGE_PNG_RGBALPHA_16
S							if (pinfo->bitdepth == 16) {
S								pinfo->bg = RGB2COLOR(buf[0], buf[2], buf[4]);
S							} else
S						#endif
S								pinfo->bg = RGB2COLOR(buf[1], buf[3], buf[5]);
S						break;
S				#endif
S				default:
S					goto exit_unsupported;
S				}
S				break;
S		#endif
S
S		}
S	}
Sexit_baddata:
S	gdispImageClose_PNG(img);
S	return GDISP_IMAGE_ERR_BADDATA;
Sexit_unsupported:
S	gdispImageClose_PNG(img);
S	return GDISP_IMAGE_ERR_UNSUPPORTED;
Sexit_nonmem:
S	gdispImageClose_PNG(img);
S	return GDISP_IMAGE_ERR_NOMEMORY;
S}
S
SgdispImageError gdispGImageDraw_PNG(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S	PNG_info 	*pinfo;
S	PNG_decode	*d;
S
S	// Allocate the space to decode with including space for 2 full scan lines for filtering.
S	pinfo = (PNG_info *)img->priv;
S	if (!(d = gdispImageAlloc(img, sizeof(PNG_decode) + (img->width * pinfo->bpp + 7) / 4)))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S
S	// Initialise the decoder
S	d->img = img;
S	d->pinfo = pinfo;
S	PNG_iInit(d);
S	PNG_oInit(&d->o, g, x, y, cx, cy, sx, sy);
S	PNG_zInit(&d->z);
S
S	// Process the zlib inflate header
S	if (!PNG_zGetHeader(d))
S		goto exit_baddata;
S
S	#if GDISP_NEED_IMAGE_PNG_INTERLACED
S		if ((pinfo->flags & PNG_FLG_INTERLACE)) {
S			// Interlaced decoding
S			#error "PNG Decoder: Interlaced PNG's are not supported yet!"
S		} else
S	#endif
S	{
S		// Non-interlaced decoding
S		PNG_fInit(&d->f, (uint8_t *)(d+1), (pinfo->bpp + 7) / 8, (img->width * pinfo->bpp + 7) / 8);
S		for(y = 0; y < sy+cy; PNG_fNext(&d->f), y++) {
S			if (!PNG_unfilter_type0(d))
S				goto exit_baddata;
S			if (PNG_oStartY(&d->o, y)) {
S				pinfo->out(d);
S				PNG_oFlush(&d->o);
S			}
S		}
S	}
S
S	// Clean up
S	gdispImageFree(img, d, sizeof(PNG_decode) + (img->width * pinfo->bpp + 7) / 4);
S	return GDISP_IMAGE_ERR_OK;
S
Sexit_baddata:
S	gdispImageFree(img, d, sizeof(PNG_decode) + (img->width * pinfo->bpp + 7) / 4);
S	return GDISP_IMAGE_ERR_BADDATA;
S}
S
SgdispImageError gdispImageCache_PNG(gdispImage *img) {
S	PNG_info 	*pinfo;
S	unsigned	chunknext;
S	unsigned	chunklen;
S	uint8_t		*pcache;
S	uint8_t		buf[8];
S
S	// If we are already cached - just return OK
S	pinfo = (PNG_info *)img->priv;
S	if (pinfo->cache)
S		return GDISP_IMAGE_ERR_OK;
S
S	// Calculate the size of all the image data blocks in the image
S	pinfo->cachesz = 0;
S	chunknext = 8;
S	while(1) {
S		// Find a new chunk
S		gfileSetPos(img->f, chunknext);
S		if (gfileRead(img->f, buf, 8) != 8)
S			return GDISP_IMAGE_ERR_BADDATA;
S
S		// Calculate the chunk length and next chunk
S		chunklen = gdispImageGetAlignedBE32(buf, 0);
S		chunknext += chunklen + 12;
S
S		// Process only image data chunks
S		switch (gdispImageGetAlignedBE32(buf, 4)) {
S		case 0x49444154:		// "IDAT" - Image Data
S			pinfo->cachesz += chunklen;
S			break;
S		case 0x49454E44:		// "IEND"	- All done
S			if (!pinfo->cachesz)
S				return GDISP_IMAGE_ERR_BADDATA;
S			goto gotsize;
S		}
S	}
S
Sgotsize:
S	// Allocate the cache
S	if (!(pcache = gdispImageAlloc(img, pinfo->cachesz)))
S		return GDISP_IMAGE_ERR_NOMEMORY;
S
S	pinfo->cache = pcache;
S
S	// Read the image data into the cache
S	chunknext = 8;
S	while(1) {
S		// Find a new chunk
S		gfileSetPos(img->f, chunknext);
S		if (gfileRead(img->f, buf, 8) != 8)
S			goto baddata;
S
S		// Calculate the chunk length and next chunk
S		chunklen = gdispImageGetAlignedBE32(buf, 0);
S		chunknext += chunklen + 12;
S
S		// Process only image data chunks
S		switch (gdispImageGetAlignedBE32(buf, 4)) {
S		case 0x49444154:		// "IDAT" - Image Data
S			if (gfileRead(img->f, pcache, chunklen) != chunklen)
S				goto baddata;
S			pcache += chunklen;
S			break;
S		case 0x49454E44:		// "IEND"	- All done
S			return GDISP_IMAGE_ERR_OK;
S		}
S	}
S
Sbaddata:
S	// Oops - can't read the data. Throw away the cache.
S	gdispImageFree(img, pinfo->cache, pinfo->cachesz);
S	pinfo->cache = 0;
S	return GDISP_IMAGE_ERR_BADDATA;
S}
S
Sdelaytime_t gdispImageNext_PNG(gdispImage *img) {
S	(void) img;
S
S	/* No more frames/pages */
S	return TIME_INFINITE;
S}
S
N#endif /* GFX_USE_GDISP && GDISP_NEED_IMAGE && GDISP_NEED_IMAGE_PNG */
L 30 "..\..\..\..\..\..\external\ugfx\src\gdisp/gdisp_mk.c" 2
L 13 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gevent/gevent_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gevent/gevent_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gevent.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gevent/gevent.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GEVENT || defined(__DOXYGEN__)
X#if 0 || 0L
S
S#if GEVENT_ASSERT_NO_RESOURCE
S	#define GEVENT_ASSERT(x)		assert(x)
S#else
S	#define GEVENT_ASSERT(x)
S#endif
S
S/* Flags in the listener structure */
S#define GLISTENER_EVENTBUSY			0x0001			// The event buffer is busy
S#define GLISTENER_WAITING			0x0002			// The listener is waiting for a signal
S#define GLISTENER_WITHSOURCE		0x0004			// The listener is being looked at by a source for a possible event
S#define GLISTENER_PENDING			0x0008			// There is an event waiting ready to go without a current listener
S
S/* This mutex protects access to our tables */
Sstatic gfxMutex	geventMutex;
S
S/* Our table of listener/source pairs */
Sstatic GSourceListener		Assignments[GEVENT_MAX_SOURCE_LISTENERS];
S
S/* Send an exit event if possible. */
S/* We already have the geventMutex */
Sstatic void doExitEvent(GListener *pl) {
S	// Don't do the exit if someone else currently has the event lock
S	if ((pl->flags & (GLISTENER_WAITING|GLISTENER_EVENTBUSY)) == GLISTENER_WAITING) {
S		pl->flags |= GLISTENER_EVENTBUSY;							// Event buffer is in use
S		pl->event.type = GEVENT_EXIT;								// Set up the EXIT event
S		pl->flags &= ~GLISTENER_WAITING;							// Wake up the listener (with data)
S		gfxSemSignal(&pl->waitqueue);
S	}
S}
S
S/* Loop through the assignment table deleting this listener/source pair. */
S/*	Null is treated as a wildcard. */
S/* We already have the geventMutex */
Sstatic void deleteAssignments(GListener *pl, GSourceHandle gsh) {
S	GSourceListener *psl;
S
S	for(psl = Assignments; psl < Assignments+GEVENT_MAX_SOURCE_LISTENERS; psl++) {
S		if ((!pl || psl->pListener == pl) && (!gsh || psl->pSource == gsh)) {
S			doExitEvent(psl->pListener);
S			psl->pListener = 0;
S			psl->pSource = 0;
S		}
S	}
S}
S
Svoid _geventInit(void)
S{
S	gfxMutexInit(&geventMutex);
S}
S
Svoid _geventDeinit(void)
S{
S	gfxMutexDestroy(&geventMutex);	
S}
S
Svoid geventListenerInit(GListener *pl) {
S	gfxSemInit(&pl->waitqueue, 0, MAX_SEMAPHORE_COUNT);		// Next wait'er will block
S	pl->callback = 0;										// No callback active
S	pl->event.type = GEVENT_NULL;							// Always safety
S	pl->flags = 0;
S}
S
Sbool_t geventAttachSource(GListener *pl, GSourceHandle gsh, uint32_t flags) {
S	GSourceListener *psl, *pslfree;
S
S	// Safety first
S	if (!pl || !gsh) {
S		GEVENT_ASSERT(FALSE);
S		return FALSE;
S	}
S
S	gfxMutexEnter(&geventMutex);
S
S	// Check if this pair is already in the table (scan for a free slot at the same time)
S	pslfree = 0;
S	for(psl = Assignments; psl < Assignments+GEVENT_MAX_SOURCE_LISTENERS; psl++) {
S		
S		if (pl == psl->pListener && gsh == psl->pSource) {
S			// Just update the flags
S			psl->listenflags = flags;
S			gfxMutexExit(&geventMutex);
S			return TRUE;
S		}
S		if (!pslfree && !psl->pListener)
S			pslfree = psl;
S	}
S	
S	// A free slot was found - allocate it
S	if (pslfree) {
S		pslfree->pListener = pl;
S		pslfree->pSource = gsh;
S		pslfree->listenflags = flags;
S		pslfree->srcflags = 0;
S	}
S	gfxMutexExit(&geventMutex);
S	GEVENT_ASSERT(pslfree != 0);
S	return pslfree != 0;
S}
S
Svoid geventDetachSource(GListener *pl, GSourceHandle gsh) {
S	if (pl) {
S		gfxMutexEnter(&geventMutex);
S		deleteAssignments(pl, gsh);
S		if (!gsh)
S			doExitEvent(pl);
S		gfxMutexExit(&geventMutex);
S	}
S}
S
SGEvent *geventEventWait(GListener *pl, delaytime_t timeout) {
S	gfxMutexEnter(&geventMutex);
S	// Don't allow waiting if we are on callbacks or if there is already a thread waiting
S	if (pl->callback || (pl->flags & GLISTENER_WAITING)) {
S		gfxMutexExit(&geventMutex);
S		return 0;
S	}
S
S	// Check to see if there is a pending event ready for us
S	if ((pl->flags & GLISTENER_PENDING)) {
S		pl->flags &= ~GLISTENER_PENDING;				// We have now got this
S		pl->flags |= GLISTENER_EVENTBUSY;				// Event buffer is definitely busy
S		gfxMutexExit(&geventMutex);
S		return &pl->event;
S	}
S
S	// No - wait for one.
S	pl->flags &= ~GLISTENER_EVENTBUSY;				// Event buffer is definitely not busy
S	pl->flags |= GLISTENER_WAITING;					// We will now be waiting on the thread
S	gfxMutexExit(&geventMutex);
S	if (gfxSemWait(&pl->waitqueue, timeout))
S		return &pl->event;
S
S	// Timeout - clear the waiting flag.
S	// We know this is safe as any other thread will still think there is someone waiting.
S	gfxMutexEnter(&geventMutex);
S	pl->flags &= ~GLISTENER_WAITING;
S	gfxMutexExit(&geventMutex);
S	return 0;
S}
S
Svoid geventEventComplete(GListener *pl) {
S	pl->flags &= ~GLISTENER_EVENTBUSY;
S}
S
Svoid geventRegisterCallback(GListener *pl, GEventCallbackFn fn, void *param) {
S	if (pl) {
S		gfxMutexEnter(&geventMutex);
S		doExitEvent(pl);
S		pl->param = param;						// Set the param
S		pl->callback = fn;						// Set the callback function
S		if (fn)
S			pl->flags &= ~GLISTENER_EVENTBUSY;	// The event buffer is immediately available
S		gfxMutexExit(&geventMutex);
S	}
S}
S
SGSourceListener *geventGetSourceListener(GSourceHandle gsh, GSourceListener *lastlr) {
S	GSourceListener *psl;
S
S	// Safety first
S	if (!gsh)
S		return 0;
S
S	gfxMutexEnter(&geventMutex);
S
S	// Unlock the last listener event buffer if it wasn't used.
S	if (lastlr && lastlr->pListener && (lastlr->pListener->flags & GLISTENER_WITHSOURCE))
S		lastlr->pListener->flags &= ~(GLISTENER_WITHSOURCE|GLISTENER_EVENTBUSY);
S		
S	// Loop through the table looking for attachments to this source
S	for(psl = lastlr ? (lastlr+1) : Assignments; psl < Assignments+GEVENT_MAX_SOURCE_LISTENERS; psl++) {
S		if (gsh == psl->pSource) {
S			gfxMutexExit(&geventMutex);
S			return psl;
S		}
S	}
S	gfxMutexExit(&geventMutex);
S	return 0;
S}
S
SGEvent *geventGetEventBuffer(GSourceListener *psl) {
S	gfxMutexEnter(&geventMutex);
S	if ((psl->pListener->flags & GLISTENER_EVENTBUSY)) {
S		// Oops - event buffer is still in use
S		gfxMutexExit(&geventMutex);
S		return 0;
S	}
S
S	// Allocate the event buffer
S	psl->pListener->flags |= (GLISTENER_WITHSOURCE|GLISTENER_EVENTBUSY);
S	gfxMutexExit(&geventMutex);
S	return &psl->pListener->event;
S}
S
Svoid geventSendEvent(GSourceListener *psl) {
S	gfxMutexEnter(&geventMutex);
S	if (psl->pListener->callback) {
S
S		// Mark it back as free and as sent. This is early to be marking as free but it protects
S		//	if the callback alters the listener in any way
S		psl->pListener->flags &= ~(GLISTENER_WITHSOURCE|GLISTENER_EVENTBUSY|GLISTENER_PENDING);
S		gfxMutexExit(&geventMutex);
S
S		// Do the callback
S		psl->pListener->callback(psl->pListener->param, &psl->pListener->event);
S
S	} else {
S		// Wake up the listener
S		psl->pListener->flags &= ~GLISTENER_WITHSOURCE;
S		if ((psl->pListener->flags & GLISTENER_WAITING)) {
S			psl->pListener->flags &= ~(GLISTENER_WAITING|GLISTENER_PENDING);
S			gfxSemSignal(&psl->pListener->waitqueue);
S		} else
S			psl->pListener->flags |= GLISTENER_PENDING;
S
S		// The listener thread will free the event buffer when ready
S		gfxMutexExit(&geventMutex);
S	}
S}
S
Svoid geventDetachSourceListeners(GSourceHandle gsh) {
S	gfxMutexEnter(&geventMutex);
S	deleteAssignments(0, gsh);
S	gfxMutexExit(&geventMutex);
S}
S
N#endif /* GFX_USE_GEVENT */
L 9 "..\..\..\..\..\..\external\ugfx\src\gevent/gevent_mk.c" 2
L 14 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gtimer/gtimer_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gtimer/gtimer_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gtimer.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gtimer/gtimer.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GTIMER || defined(__DOXYGEN__)
X#if 0 || 0L
S
S#define GTIMER_FLG_PERIODIC		0x0001
S#define GTIMER_FLG_INFINITE		0x0002
S#define GTIMER_FLG_JABBED		0x0004
S#define GTIMER_FLG_SCHEDULED	0x0008
S
S/* Don't rework this macro to use a ternary operator - the gcc compiler stuffs it up */
S#define TimeIsWithin(x, start, end)	((end >= start && x >= start && x <= end) || (end < start && (x >= start || x <= end)))
S
S/* This mutex protects access to our tables */
Sstatic gfxMutex			mutex;
Sstatic gfxThreadHandle	hThread = 0;
Sstatic GTimer			*pTimerHead = 0;
Sstatic gfxSem			waitsem;
Sstatic systemticks_t	ticks2ms;
Sstatic DECLARE_THREAD_STACK(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE);
S
S/*===========================================================================*/
S/* Driver local functions.                                                   */
S/*===========================================================================*/
S
Sstatic DECLARE_THREAD_FUNCTION(GTimerThreadHandler, arg) {
S	GTimer			*pt;
S	systemticks_t	tm;
S	systemticks_t	nxtTimeout;
S	systemticks_t	lastTime;
S	GTimerFunction	fn;
S	void			*param;
S	(void)			arg;
S
S	nxtTimeout = TIME_INFINITE;
S	lastTime = 0;
S	while(1) {
S		/* Wait for work to do. */
S		gfxYield();					// Give someone else a go no matter how busy we are
S		gfxSemWait(&waitsem, nxtTimeout);
S		
S	restartTimerChecks:
S	
S		// Our reference time
S		tm = gfxSystemTicks();
S		nxtTimeout = TIME_INFINITE;
S		
S		/* We need to obtain the mutex */
S		gfxMutexEnter(&mutex);
S
S		if (pTimerHead) {
S			pt = pTimerHead;
S			do {
S				// Do we have something to do for this timer?
S				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
S				
S					// Is this timer periodic?
S					if ((pt->flags & GTIMER_FLG_PERIODIC) && pt->period != TIME_IMMEDIATE) {
S						// Yes - Update ready for the next period
S						if (!(pt->flags & GTIMER_FLG_INFINITE)) {
S							// We may have skipped a period.
S							// We use this complicated formulae rather than a loop
S							//	because the gcc compiler stuffs up the loop so that it
S							//	either loops forever or doesn't get executed at all.
S							pt->when += ((tm + pt->period - pt->when) / pt->period) * pt->period;
S						}
S
S						// We are definitely no longer jabbed
S						pt->flags &= ~GTIMER_FLG_JABBED;
S						
S					} else {
S						// No - get us off the timers list
S						if (pt->next == pt)
S							pTimerHead = 0;
S						else {
S							pt->next->prev = pt->prev;
S							pt->prev->next = pt->next;
S							if (pTimerHead == pt)
S								pTimerHead = pt->next;
S						}
S						pt->flags = 0;
S					}
S					
S					// Call the callback function
S					fn = pt->fn;
S					param = pt->param;
S					gfxMutexExit(&mutex);
S					fn(param);
S					
S					// We no longer hold the mutex, the callback function may have taken a while
S					// and our list may have been altered so start again!
S					goto restartTimerChecks;
S				}
S				
S				// Find when we next need to wake up
S				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
S					nxtTimeout = (pt->when - tm)/ticks2ms;
S				pt = pt->next;
S			} while(pt != pTimerHead);
S		}
S
S		// Ready for the next loop
S		lastTime = tm;
S		gfxMutexExit(&mutex);
S	}
S	THREAD_RETURN(0);
S}
S
Svoid _gtimerInit(void)
S{
S	gfxSemInit(&waitsem, 0, 1);
S	gfxMutexInit(&mutex);
S	ticks2ms = gfxMillisecondsToTicks(1);
S}
S
Svoid _gtimerDeinit(void)
S{
S	gfxSemDestroy(&waitsem);
S	gfxMutexDestroy(&mutex);
S	// Need to destroy GTimer thread here
S}
S
Svoid gtimerInit(GTimer* pt)
S{
S	pt->flags = 0;
S}
S
Svoid gtimerDeinit(GTimer* pt)
S{
S	gtimerStop(pt);
S}
S
Svoid gtimerStart(GTimer *pt, GTimerFunction fn, void *param, bool_t periodic, delaytime_t millisec) {
S	gfxMutexEnter(&mutex);
S	
S	// Start our thread if not already going
S	if (!hThread) {
S		hThread = gfxThreadCreate(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE, GTIMER_THREAD_PRIORITY, GTimerThreadHandler, 0);
S		if (hThread) {gfxThreadClose(hThread);}		// We never really need the handle again
S	}
S
S	// Is this already scheduled?
S	if (pt->flags & GTIMER_FLG_SCHEDULED) {
S		// Cancel it!
S		if (pt->next == pt)
S			pTimerHead = 0;
S		else {
S			pt->next->prev = pt->prev;
S			pt->prev->next = pt->next;
S			if (pTimerHead == pt)
S				pTimerHead = pt->next;
S		}
S	}
S	
S	// Set up the timer structure
S	pt->fn = fn;
S	pt->param = param;
S	pt->flags = GTIMER_FLG_SCHEDULED;
S	if (periodic)
S		pt->flags |= GTIMER_FLG_PERIODIC;
S	if (millisec == TIME_INFINITE) {
S		pt->flags |= GTIMER_FLG_INFINITE;
S		pt->period = TIME_INFINITE;
S	} else {
S		pt->period = gfxMillisecondsToTicks(millisec);
S		pt->when = gfxSystemTicks() + pt->period;
S	}
S
S	// Just pop it on the end of the queue
S	if (pTimerHead) {
S		pt->next = pTimerHead;
S		pt->prev = pTimerHead->prev;
S		pt->prev->next = pt;
S		pt->next->prev = pt;
S	} else
S		pt->next = pt->prev = pTimerHead = pt;
S
S	// Bump the thread
S	if (!(pt->flags & GTIMER_FLG_INFINITE))
S		gfxSemSignal(&waitsem);
S	gfxMutexExit(&mutex);
S}
S
Svoid gtimerStop(GTimer *pt) {
S	gfxMutexEnter(&mutex);
S	if (pt->flags & GTIMER_FLG_SCHEDULED) {
S		// Cancel it!
S		if (pt->next == pt)
S			pTimerHead = 0;
S		else {
S			pt->next->prev = pt->prev;
S			pt->prev->next = pt->next;
S			if (pTimerHead == pt)
S				pTimerHead = pt->next;
S		}
S		// Make sure we know the structure is dead!
S		pt->flags = 0;
S	}
S	gfxMutexExit(&mutex);
S}
S
Sbool_t gtimerIsActive(GTimer *pt) {
S	return (pt->flags & GTIMER_FLG_SCHEDULED) ? TRUE : FALSE;
S}
S
Svoid gtimerJab(GTimer *pt) {
S	gfxMutexEnter(&mutex);
S	
S	// Jab it!
S	pt->flags |= GTIMER_FLG_JABBED;
S
S	// Bump the thread
S	gfxSemSignal(&waitsem);
S	gfxMutexExit(&mutex);
S}
S
Svoid gtimerJabI(GTimer *pt) {
S	// Jab it!
S	pt->flags |= GTIMER_FLG_JABBED;
S
S	// Bump the thread
S	gfxSemSignalI(&waitsem);
S}
S
N#endif /* GFX_USE_GTIMER */
L 9 "..\..\..\..\..\..\external\ugfx\src\gtimer/gtimer_mk.c" 2
L 15 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gwin/gwin_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gwin.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file	src/gwin/gwin.c
N * @brief	GWIN sub-system code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN
X#if 0
S
S#include "gwin_class.h"
S
S#include <string.h>
S
S/*-----------------------------------------------
S * Data
S *-----------------------------------------------*/
S
Sstatic const gwinVMT basegwinVMT = {
S		"GWIN",					// The classname
S		sizeof(GWindowObject),	// The object size
S		0,						// The destroy routine
S		0,						// The redraw routine
S		0,						// The after-clear routine
S};
S
Sstatic color_t	defaultFgColor = White;
Sstatic color_t	defaultBgColor = Black;
S#if GDISP_NEED_TEXT
S	static font_t	defaultFont;
S#endif
S
S/* These init functions are defined by each module but not published */
Sextern void _gwmInit(void);
Sextern void _gwmDeinit(void);
S#if GWIN_NEED_WIDGET
S	extern void _gwidgetInit(void);
S	extern void _gwidgetDeinit(void);
S#endif
S#if GWIN_NEED_CONTAINERS
S	extern void _gcontainerInit(void);
S	extern void _gcontainerDeinit(void);
S#endif
S
S/*-----------------------------------------------
S * Helper Routines
S *-----------------------------------------------*/
S
S/*-----------------------------------------------
S * Class Routines
S *-----------------------------------------------*/
S
Svoid _gwinInit(void)
S{
S	_gwmInit();
S
S	#if GWIN_NEED_WIDGET
S		_gwidgetInit();
S	#endif
S
S	#if GWIN_NEED_CONTAINERS
S		_gcontainerInit();
S	#endif
S}
S
Svoid _gwinDeinit(void)
S{
S	#if GWIN_NEED_CONTAINERS
S		_gcontainerDeinit();
S	#endif
S
S	#if GWIN_NEED_WIDGET
S		_gwidgetDeinit();
S	#endif
S
S	_gwmDeinit();
S}
S
S// Internal routine for use by GWIN components only
S// Initialise a window creating it dynamically if required.
SGHandle _gwindowCreate(GDisplay *g, GWindowObject *pgw, const GWindowInit *pInit, const gwinVMT *vmt, uint32_t flags) {
S	// Allocate the structure if necessary
S	if (!pgw) {
S		if (!(pgw = gfxAlloc(vmt->size)))
S			return 0;
S		pgw->flags = flags|GWIN_FLG_DYNAMIC;
S	} else
S		pgw->flags = flags;
S	
S	// Initialise all basic fields
S	pgw->display = g;
S	pgw->vmt = vmt;
S	pgw->color = defaultFgColor;
S	pgw->bgcolor = defaultBgColor;
S	#if GDISP_NEED_TEXT
S		pgw->font = defaultFont;
S	#endif
S
S	// Make sure we don't create nasty problems for ourselves
S	if (vmt->size > sizeof(GWindowObject))
S		memset(pgw+1, 0, vmt->size - sizeof(GWindowObject));
S
S	if (!_gwinWMAdd(pgw, pInit)) {
S		if ((pgw->flags & GWIN_FLG_DYNAMIC))
S			gfxFree(pgw);
S		return 0;
S	}
S
S	return (GHandle)pgw;
S}
S
S// Internal routine for use by GWIN components only
Svoid _gwinDestroy(GHandle gh, GRedrawMethod how) {
S	if (!gh)
S		return;
S
S	// Make the window invisible
S	gwinSetVisible(gh, FALSE);
S
S	// Make sure it is flushed first - must be REDRAW_WAIT or REDRAW_INSESSION
S	_gwinFlushRedraws(how);
S
S	#if GWIN_NEED_CONTAINERS
S		// Notify the parent it is about to be deleted
S		if (gh->parent && ((gcontainerVMT *)gh->parent->vmt)->NotifyDelete)
S			((gcontainerVMT *)gh->parent->vmt)->NotifyDelete(gh->parent, gh);
S	#endif
S
S	// Remove from the window manager
S	#if GWIN_NEED_WINDOWMANAGER
S		_GWINwm->vmt->Delete(gh);
S	#endif
S
S	// Class destroy routine
S	if (gh->vmt->Destroy)
S		gh->vmt->Destroy(gh);
S
S	// Clean up the structure
S	if (gh->flags & GWIN_FLG_DYNAMIC) {
S		gh->flags = 0;							// To be sure, to be sure
S		gfxFree((void *)gh);
S	} else
S		gh->flags = 0;							// To be sure, to be sure
S}
S
S/*-----------------------------------------------
S * Routines that affect all windows
S *-----------------------------------------------*/
S
Svoid gwinClearInit(GWindowInit *pwi) {
S	char		*p;
S	unsigned	len;
S
S	for(p = (char *)pwi, len = sizeof(GWindowInit); len; len--)
S		*p++ = 0;
S}
S
Svoid gwinSetDefaultColor(color_t clr) {
S	defaultFgColor = clr;
S}
S
Scolor_t gwinGetDefaultColor(void) {
S	return defaultFgColor;
S}
S
Svoid gwinSetDefaultBgColor(color_t bgclr) {
S	defaultBgColor = bgclr;
S}
S
Scolor_t gwinGetDefaultBgColor(void) {
S	return defaultBgColor;
S}
S
S#if GDISP_NEED_TEXT
S	void gwinSetDefaultFont(font_t font) {
S		defaultFont = font;
S	}
S
S	font_t gwinGetDefaultFont(void) {
S		return defaultFont;
S	}
S#endif
S
S/*-----------------------------------------------
S * The GWindow Routines
S *-----------------------------------------------*/
S
SGHandle gwinGWindowCreate(GDisplay *g, GWindowObject *pgw, const GWindowInit *pInit) {
S	if (!(pgw = _gwindowCreate(g, pgw, pInit, &basegwinVMT, 0)))
S		return 0;
S
S	gwinSetVisible(pgw, pInit->show);
S	_gwinFlushRedraws(REDRAW_WAIT);
S
S	return pgw;
S}
S
Svoid gwinDestroy(GHandle gh) {
S	_gwinDestroy(gh, REDRAW_WAIT);
S}
S
Sconst char *gwinGetClassName(GHandle gh) {
S	return gh->vmt->classname;
S}
S
Sbool_t gwinGetVisible(GHandle gh) {
S	return (gh->flags & GWIN_FLG_SYSVISIBLE) ? TRUE : FALSE;
S}
S
Sbool_t gwinGetEnabled(GHandle gh) {
S	return (gh->flags & GWIN_FLG_SYSENABLED) ? TRUE : FALSE;
S}
S
S#if GDISP_NEED_TEXT
S	void gwinSetFont(GHandle gh, font_t font) {
S		gh->font = font;
S	}
S#endif
S
Svoid gwinClear(GHandle gh) {
S	/*
S	 * Don't render anything when the window is not visible but 
S	 * still call the AfterClear() routine as some widgets will
S	 * need this to clear internal buffers or similar
S	 */
S	if (_gwinDrawStart(gh)) {
S		gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S		_gwinDrawEnd(gh);
S	}
S	if (gh->vmt->AfterClear)
S		gh->vmt->AfterClear(gh);
S}
S
Svoid gwinDrawPixel(GHandle gh, coord_t x, coord_t y) {
S	if (!_gwinDrawStart(gh)) return;
S	gdispGDrawPixel(gh->display, gh->x+x, gh->y+y, gh->color);
S	_gwinDrawEnd(gh);
S}
S
Svoid gwinDrawLine(GHandle gh, coord_t x0, coord_t y0, coord_t x1, coord_t y1) {
S	if (!_gwinDrawStart(gh)) return;
S	gdispGDrawLine(gh->display, gh->x+x0, gh->y+y0, gh->x+x1, gh->y+y1, gh->color);
S	_gwinDrawEnd(gh);
S}
S
Svoid gwinDrawBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy) {
S	if (!_gwinDrawStart(gh)) return;
S	gdispGDrawBox(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
S	_gwinDrawEnd(gh);
S}
S
Svoid gwinFillArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy) {
S	if (!_gwinDrawStart(gh)) return;
S	gdispGFillArea(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
S	_gwinDrawEnd(gh);
S}
S
Svoid gwinBlitArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer) {
S	if (!_gwinDrawStart(gh)) return;
S	gdispGBlitArea(gh->display, gh->x+x, gh->y+y, cx, cy, srcx, srcy, srccx, buffer);
S	_gwinDrawEnd(gh);
S}
S
S#if GDISP_NEED_CIRCLE
S	void gwinDrawCircle(GHandle gh, coord_t x, coord_t y, coord_t radius) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawCircle(gh->display, gh->x+x, gh->y+y, radius, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillCircle(GHandle gh, coord_t x, coord_t y, coord_t radius) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGFillCircle(gh->display, gh->x+x, gh->y+y, radius, gh->color);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_ELLIPSE
S	void gwinDrawEllipse(GHandle gh, coord_t x, coord_t y, coord_t a, coord_t b) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawEllipse(gh->display, gh->x+x, gh->y+y, a, b, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillEllipse(GHandle gh, coord_t x, coord_t y, coord_t a, coord_t b) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGFillEllipse(gh->display, gh->x+x, gh->y+y, a, b, gh->color);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_ARC
S	void gwinDrawArc(GHandle gh, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawArc(gh->display, gh->x+x, gh->y+y, radius, startangle, endangle, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillArc(GHandle gh, coord_t x, coord_t y, coord_t radius, coord_t startangle, coord_t endangle) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGFillArc(gh->display, gh->x+x, gh->y+y, radius, startangle, endangle, gh->color);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_ARCSECTORS
S	void gwinDrawArcSectors(GHandle gh, coord_t x, coord_t y, coord_t radius, uint8_t sectors) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawArcSectors(gh->display, gh->x+x, gh->y+y, radius, sectors, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillArcSectors(GHandle gh, coord_t x, coord_t y, coord_t radius, uint8_t sectors) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGFillArcSectors(gh->display, gh->x+x, gh->y+y, radius, sectors, gh->color);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_PIXELREAD
S	color_t gwinGetPixelColor(GHandle gh, coord_t x, coord_t y) {
S		if (!_gwinDrawStart(gh)) return (color_t)0;
S		return gdispGGetPixelColor(gh->display, gh->x+x, gh->y+y);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_TEXT
S	void gwinDrawChar(GHandle gh, coord_t x, coord_t y, char c) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGDrawChar(gh->display, gh->x+x, gh->y+y, c, gh->font, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillChar(GHandle gh, coord_t x, coord_t y, char c) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGFillChar(gh->display, gh->x+x, gh->y+y, c, gh->font, gh->color, gh->bgcolor);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinDrawString(GHandle gh, coord_t x, coord_t y, const char *str) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGDrawString(gh->display, gh->x+x, gh->y+y, str, gh->font, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillString(GHandle gh, coord_t x, coord_t y, const char *str) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGFillString(gh->display, gh->x+x, gh->y+y, str, gh->font, gh->color, gh->bgcolor);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinDrawStringBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, justify_t justify) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGDrawStringBox(gh->display, gh->x+x, gh->y+y, cx, cy, str, gh->font, gh->color, justify);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillStringBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, justify_t justify) {
S		if (!gh->font || !_gwinDrawStart(gh)) return;
S		gdispGFillStringBox(gh->display, gh->x+x, gh->y+y, cx, cy, str, gh->font, gh->color, gh->bgcolor, justify);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_CONVEX_POLYGON
S	void gwinDrawPoly(GHandle gh, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawPoly(gh->display, tx+gh->x, ty+gh->y, pntarray, cnt, gh->color);
S		_gwinDrawEnd(gh);
S	}
S
S	void gwinFillConvexPoly(GHandle gh, coord_t tx, coord_t ty, const point *pntarray, unsigned cnt) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGFillConvexPoly(gh->display, tx+gh->x, ty+gh->y, pntarray, cnt, gh->color);
S		_gwinDrawEnd(gh);
S	}
S	void gwinDrawThickLine(GHandle gh, coord_t x0, coord_t y0, coord_t x1, coord_t y1, coord_t width, bool_t round) {
S		if (!_gwinDrawStart(gh)) return;
S		gdispGDrawThickLine(gh->display, gh->x+x0, gh->y+y0, gh->x+x1, gh->y+y1, gh->color, width, round);
S		_gwinDrawEnd(gh);
S	}
S#endif
S
S#if GDISP_NEED_IMAGE
S	gdispImageError gwinDrawImage(GHandle gh, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
S		gdispImageError		ret;
S
S		if (!_gwinDrawStart(gh)) return GDISP_IMAGE_ERR_OK;
S		ret = gdispGImageDraw(gh->display, img, gh->x+x, gh->y+y, cx, cy, sx, sy);
S		_gwinDrawEnd(gh);
S		return ret;
S	}
S#endif
S
N#endif /* GFX_USE_GWIN */
N/** @} */
N
L 9 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_widget.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_widget.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_widget.c
N * @brief   GWIN sub-system widget code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_WIDGET
X#if 0 && 0
S
S#include <string.h>
S
S#include "gwin_class.h"
S
S// Our listener for events for widgets
Sstatic GListener gl;
S
S#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S	// Our current focus window
S	static GHandle				_widgetInFocus;
S#endif
S
S// Our default style - a white background theme
Sconst GWidgetStyle WhiteWidgetStyle = {
S	HTML2COLOR(0xFFFFFF),			// window background
S	HTML2COLOR(0x2A8FCD),			// focused
S
S	// enabled color set
S	{
S		HTML2COLOR(0x000000),		// text
S		HTML2COLOR(0x404040),		// edge
S		HTML2COLOR(0xE0E0E0),		// fill
S		HTML2COLOR(0x00E000)		// progress - active area
S	},
S
S	// disabled color set
S	{
S		HTML2COLOR(0xC0C0C0),		// text
S		HTML2COLOR(0x808080),		// edge
S		HTML2COLOR(0xE0E0E0),		// fill
S		HTML2COLOR(0xC0E0C0)		// progress - active area
S	},
S
S	// pressed color set
S	{
S		HTML2COLOR(0x404040),		// text
S		HTML2COLOR(0x404040),		// edge
S		HTML2COLOR(0x808080),		// fill
S		HTML2COLOR(0x00E000)		// progress - active area
S	}
S};
S
S/* Our black style */
Sconst GWidgetStyle BlackWidgetStyle = {
S	HTML2COLOR(0x000000),			// window background
S	HTML2COLOR(0x2A8FCD),			// focused
S
S	// enabled color set
S	{
S		HTML2COLOR(0xC0C0C0),		// text
S		HTML2COLOR(0xC0C0C0),		// edge
S		HTML2COLOR(0x606060),		// fill
S		HTML2COLOR(0x008000)		// progress - active area
S	},
S
S	// disabled color set
S	{
S		HTML2COLOR(0x808080),		// text
S		HTML2COLOR(0x404040),		// edge
S		HTML2COLOR(0x404040),		// fill
S		HTML2COLOR(0x004000)		// progress - active area
S	},
S
S	// pressed color set
S	{
S		HTML2COLOR(0xFFFFFF),		// text
S		HTML2COLOR(0xC0C0C0),		// edge
S		HTML2COLOR(0xE0E0E0),		// fill
S		HTML2COLOR(0x008000)		// progress - active area
S	}
S};
S
Sstatic const GWidgetStyle *	defaultStyle = &BlackWidgetStyle;
S
S// We use these everywhere in this file
S#define gw		((GWidgetObject *)gh)
S#define wvmt	((gwidgetVMT *)gh->vmt)
S
S// Process an event
Sstatic void gwidgetEvent(void *param, GEvent *pe) {
S	#define pme		((GEventMouse *)pe)
S	#define pke		((GEventKeyboard *)pe)
S	#define pte		((GEventToggle *)pe)
S	#define pde		((GEventDial *)pe)
S
S	GHandle				h;
S	GHandle				gh;
S	#if GFX_USE_GINPUT && (GINPUT_NEED_TOGGLE || GINPUT_NEED_DIAL)
S		uint16_t		role;
S	#endif
S	(void)				param;
S
S	// Process various events
S	switch (pe->type) {
S
S	#if GFX_USE_GINPUT && GINPUT_NEED_MOUSE
S	case GEVENT_MOUSE:
S	case GEVENT_TOUCH:
S		// Cycle through all windows
S		for (gh = 0, h = gwinGetNextWindow(0); h; h = gwinGetNextWindow(h)) {
S
S			// The window must be on this display and visible to be relevant
S			if (h->display != pme->display || !(h->flags & GWIN_FLG_SYSVISIBLE))
S				continue;
S
S			// Is the mouse currently captured by this widget?
S			if ((h->flags & (GWIN_FLG_WIDGET|GWIN_FLG_MOUSECAPTURE)) == (GWIN_FLG_WIDGET|GWIN_FLG_MOUSECAPTURE)) {
S				gh = h;
S				if ((pme->buttons & GMETA_MOUSE_UP)) {
S					gh->flags &= ~GWIN_FLG_MOUSECAPTURE;
S					if (wvmt->MouseUp)
S						wvmt->MouseUp(gw, pme->x - gh->x, pme->y - gh->y);
S				} else if (wvmt->MouseMove)
S					wvmt->MouseMove(gw, pme->x - gh->x, pme->y - gh->y);
S
S				// There is only ever one captured mouse. Prevent normal mouse processing if there is a captured mouse
S				gh = 0;
S			
S				break;
S			}
S
S			// Save the highest z-order window that the mouse is over
S			if (pme->x >= h->x && pme->x < h->x + h->width && pme->y >= h->y && pme->y < h->y + h->height)
S				gh = h;
S		}
S
S		// Process any mouse down over the highest order window if it is an enabled widget
S		if (gh && (gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED)) == (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED)) {
S			if ((pme->buttons & GMETA_MOUSE_DOWN)) {
S				gh->flags |= GWIN_FLG_MOUSECAPTURE;
S
S				#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S					// We should try and capture the focus on this window.
S					// If we can't then we don't change the focus
S					gwinSetFocus(gh);
S				#endif
S
S				if (wvmt->MouseDown)
S					wvmt->MouseDown(gw, pme->x - gh->x, pme->y - gh->y);
S			}
S		}
S		break;
S	#endif
S
S	#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S	case GEVENT_KEYBOARD:
S		// If Tab key pressed then set focus to next widget
S		if (pke->bytecount == 1 && pke->c[0] == GKEY_TAB) {
S			if (!(pke->keystate & GKEYSTATE_KEYUP))
S				_gwinMoveFocus();
S			break;
S		}
S
S		// Otherwise, send keyboard events only to widget in focus
S		if (_widgetInFocus)
S			((gwidgetVMT*)_widgetInFocus->vmt)->KeyboardEvent((GWidgetObject*)_widgetInFocus, pke);
S		break;
S	#endif
S
S	#if GFX_USE_GINPUT && GINPUT_NEED_TOGGLE
S	case GEVENT_TOGGLE:
S		// Cycle through all windows
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S
S			// check if it a widget that is enabled and visible
S			if ((gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED|GWIN_FLG_SYSVISIBLE)) != (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED|GWIN_FLG_SYSVISIBLE))
S				continue;
S
S			for(role = 0; role < wvmt->toggleroles; role++) {
S				if (wvmt->ToggleGet(gw, role) == pte->instance) {
S					if (pte->on) {
S						if (wvmt->ToggleOn)
S							wvmt->ToggleOn(gw, role);
S					} else {
S						if (wvmt->ToggleOff)
S							wvmt->ToggleOff(gw, role);
S					}
S				}
S			}
S		}
S		break;
S	#endif
S
S	#if GFX_USE_GINPUT && GINPUT_NEED_DIAL
S	case GEVENT_DIAL:
S		// Cycle through all windows
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S
S			// check if it a widget that is enabled and visible
S			if ((gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED|GWIN_FLG_SYSVISIBLE)) != (GWIN_FLG_WIDGET|GWIN_FLG_SYSENABLED|GWIN_FLG_SYSVISIBLE))
S				continue;
S
S			for(role = 0; role < wvmt->dialroles; role++) {
S				if (wvmt->DialGet(gw, role) == pte->instance) {
S					if (wvmt->DialMove)
S						wvmt->DialMove(gw, role, pde->value, pde->maxvalue);
S				}
S			}
S		}
S		break;
S	#endif
S
S	default:
S		break;
S	}
S
S	#undef pme
S	#undef pte
S	#undef pke
S	#undef pde
S}
S
S#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S	GHandle gwinGetFocus(void) {
S		return _widgetInFocus;
S	}
S
S	bool_t gwinSetFocus(GHandle gh) {
S		GHandle	oldFocus;
S
S		// Do we already have the focus?
S		if (gh == _widgetInFocus)
S			return TRUE;
S
S		// The new window must be NULLL or a visible enabled widget with a keyboard handler
S		if (!gh || ((gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)) == (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)
S						&& ((gwidgetVMT*)gh->vmt)->KeyboardEvent)) {
S			// Move the current focus
S			oldFocus = _widgetInFocus;
S			_widgetInFocus = gh;
S			if (oldFocus)	_gwinUpdate(oldFocus);
S			if (gh)			_gwinUpdate(gh);
S			return TRUE;
S		}
S		return FALSE;
S	}
S
S	void _gwinMoveFocus(void) {
S		GHandle	gh;
S		bool_t	looponce;
S
S		// Find a new focus window (one may or may not exist).
S		looponce = FALSE;
S		for(gh = gwinGetNextWindow(_widgetInFocus); ; gh = gwinGetNextWindow(gh)) {
S			if (!gh && !looponce) {
S				looponce = TRUE;
S				gh = gwinGetNextWindow(0);
S			}
S			if (gwinSetFocus(gh))
S				break;
S		}
S	}
S
S	void _gwinFixFocus(GHandle gh) {
S		GHandle	oldFocus;
S
S		if ((gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)) == (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)
S				&& ((gwidgetVMT*)gh->vmt)->KeyboardEvent) {
S
S			// We are a candidate to be able to claim the focus
S
S			// Claim the focus if no-one else has
S			if (!_widgetInFocus)
S				_widgetInFocus = gh;
S
S			return;
S		}
S
S		// We have lost any right to the focus
S
S		// Did we have the focus
S		if (gh != _widgetInFocus)
S			return;
S
S		// We did - we need to find a new focus window
S		oldFocus = _widgetInFocus;
S		for(gh = gwinGetNextWindow(oldFocus); gh && gh != oldFocus; gh = gwinGetNextWindow(gh)) {
S
S			// Must be a visible enabled widget with a keyboard handler
S			if ((gh->flags & (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)) == (GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED|GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE)
S					&& ((gwidgetVMT*)gh->vmt)->KeyboardEvent) {
S
S				// Grab the focus for the new window
S				_widgetInFocus = gh;
S
S				// This new window still needs to be marked for redraw (but don't actually do it yet).
S				gh->flags |= GWIN_FLG_NEEDREDRAW;
S				// RedrawPending |= DOREDRAW_VISIBLES;			- FIX LATER
S				return;
S			}
S		}
S
S		// No-one has the right to the focus
S		_widgetInFocus = 0;
S	}
S
S	void _gwidgetDrawFocusRect(GWidgetObject *gx, coord_t x, coord_t y, coord_t cx, coord_t cy) {
S		uint16_t i;
S		
S		// Don't do anything if we don't have the focus
S		if (&gx->g != _widgetInFocus)
S			return;
S
S		// Use the very simplest possible focus rectangle for now
S		for (i = 0; i < GWIN_FOCUS_HIGHLIGHT_WIDTH; i++) {
S			gdispGDrawBox(gx->g.display, gx->g.x+x+i, gx->g.y+y+i, cx-2*i, cy-2*i, gx->pstyle->focus);
S		}
S	}
S
S#endif
S
S#if GFX_USE_GINPUT && GINPUT_NEED_TOGGLE
S	static GHandle FindToggleUser(uint16_t instance) {
S		GHandle			gh;
S		uint16_t		role;
S
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			if (!(gh->flags & GWIN_FLG_WIDGET))		// check if it a widget
S				continue;
S
S			for(role = 0; role < wvmt->toggleroles; role++) {
S				if (wvmt->ToggleGet(gw, role) == instance)
S					return gh;
S			}
S		}
S		return 0;
S	}
S#endif
S
S#if GFX_USE_GINPUT && GINPUT_NEED_DIAL
S	static GHandle FindDialUser(uint16_t instance) {
S		GHandle			gh;
S		uint16_t		role;
S
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			if (!(gh->flags & GWIN_FLG_WIDGET))		// check if it a widget
S				continue;
S
S			for(role = 0; role < wvmt->dialroles; role++) {
S				if (wvmt->DialGet(gw, role) == instance)
S					return gh;
S			}
S		}
S		return 0;
S	}
S#endif
S
Svoid _gwidgetInit(void)
S{
S	geventListenerInit(&gl);
S	geventRegisterCallback(&gl, gwidgetEvent, 0);
S	#if GINPUT_NEED_MOUSE
S		geventAttachSource(&gl, ginputGetMouse(GMOUSE_ALL_INSTANCES), GLISTEN_MOUSEMETA|GLISTEN_MOUSEDOWNMOVES);
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		geventAttachSource(&gl, ginputGetKeyboard(GKEYBOARD_ALL_INSTANCES), GLISTEN_KEYUP);
S	#endif
S}
S
Svoid _gwidgetDeinit(void)
S{
S	/* ToDo */
S}
S
SGHandle _gwidgetCreate(GDisplay *g, GWidgetObject *pgw, const GWidgetInit *pInit, const gwidgetVMT *vmt) {
S	if (!(pgw = (GWidgetObject *)_gwindowCreate(g, &pgw->g, &pInit->g, &vmt->g, GWIN_FLG_WIDGET|GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED)))
S		return 0;
S
S	#if GWIN_NEED_CONTAINERS
S		// This window can't be system enabled if the parent is not enabled
S		if (pgw->g.parent && !(pgw->g.parent->flags & GWIN_FLG_SYSENABLED))
S			pgw->g.flags &= ~GWIN_FLG_SYSENABLED;
S	#endif
S	pgw->text = pInit->text ? pInit->text : "";
S	pgw->fnDraw = pInit->customDraw ? pInit->customDraw : vmt->DefaultDraw;
S	pgw->fnParam = pInit->customParam;
S	pgw->pstyle = pInit->customStyle ? pInit->customStyle : defaultStyle;
S	#if GWIN_WIDGET_TAGS
S			pgw->tag = pInit->tag;
S	#endif
S
S	return 	&pgw->g;
S}
S
Svoid _gwidgetDestroy(GHandle gh) {
S	#if GFX_USE_GINPUT && (GINPUT_NEED_TOGGLE || GINPUT_NEED_DIAL)
S		uint16_t	role, instance;
S	#endif
S
S	// Make the window is invisible so it is not eligible for focus
S	gh->flags &= ~GWIN_FLG_VISIBLE;
S	_gwinFixFocus(gh);
S
S	// Deallocate the text (if necessary)
S	if ((gh->flags & GWIN_FLG_ALLOCTXT)) {
S		gh->flags &= ~GWIN_FLG_ALLOCTXT;
S		gfxFree((void *)gw->text);
S	}
S
S	#if GFX_USE_GINPUT && GINPUT_NEED_TOGGLE
S		// Detach any toggles from this object
S		for(role = 0; role < wvmt->toggleroles; role++) {
S			instance = wvmt->ToggleGet(gw, role);
S			if (instance != GWIDGET_NO_INSTANCE) {
S				wvmt->ToggleAssign(gw, role, GWIDGET_NO_INSTANCE);
S				if (!FindToggleUser(instance))
S					geventDetachSource(&gl, ginputGetToggle(instance));
S			}
S		}
S	#endif
S
S	#if GFX_USE_GINPUT && GINPUT_NEED_DIAL
S		// Detach any dials from this object
S		for(role = 0; role < wvmt->dialroles; role++) {
S			instance = wvmt->DialGet(gw, role);
S			if (instance != GWIDGET_NO_INSTANCE) {
S				wvmt->DialAssign(gw, role, GWIDGET_NO_INSTANCE);
S				if (!FindDialUser(instance))
S					geventDetachSource(&gl, ginputGetDial(instance));
S			}
S		}
S	#endif
S
S	// Remove any listeners on this object.
S	geventDetachSourceListeners((GSourceHandle)gh);
S}
S
Svoid _gwidgetRedraw(GHandle gh) {
S	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S		return;
S
S	gw->fnDraw(gw, gw->fnParam);
S}
S
Svoid _gwinSendEvent(GHandle gh, GEventType type) {
S	GSourceListener	*	psl;
S	GEventGWin *		pge;
S
S	// Trigger a GWIN Event
S	psl = 0;
S	while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S		if (!(pge = (GEventGWin *)geventGetEventBuffer(psl)))
S			continue;
S		pge->type = type;
S		pge->gwin = gh;
S		#if GWIN_WIDGET_TAGS
S			pge->tag = (gh->flags & GWIN_FLG_WIDGET) ? ((GWidgetObject *)gh)->tag : 0;
S		#endif
S		geventSendEvent(psl);
S	}
S}
S
Svoid gwinWidgetClearInit(GWidgetInit *pwi) {
S	char		*p;
S	unsigned	len;
S
S	for(p = (char *)pwi, len = sizeof(GWidgetInit); len; len--)
S		*p++ = 0;
S}
S
Svoid gwinSetDefaultStyle(const GWidgetStyle *pstyle, bool_t updateAll) {
S	if (!pstyle)
S		pstyle = &BlackWidgetStyle;
S
S	if (updateAll) {
S		GHandle						gh;
S
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			if ((gh->flags & GWIN_FLG_WIDGET) && ((GWidgetObject *)gh)->pstyle == defaultStyle)
S				gwinSetStyle(gh, pstyle);
S			else
S				gwinRedraw(gh);
S		}
S	}
S	gwinSetDefaultBgColor(pstyle->background);
S	defaultStyle = pstyle;
S}
S
S/**
S * @brief   Get the current default style.
S *
S * @api
S */
Sconst GWidgetStyle *gwinGetDefaultStyle(void) {
S	return defaultStyle;
S}
S
Svoid gwinSetText(GHandle gh, const char *text, bool_t useAlloc) {
S	if (!(gh->flags & GWIN_FLG_WIDGET))
S		return;
S
S	// Dispose of the old string
S	if ((gh->flags & GWIN_FLG_ALLOCTXT)) {
S		gh->flags &= ~GWIN_FLG_ALLOCTXT;
S		if (gw->text) {
S			gfxFree((void *)gw->text);
S			gw->text = "";
S		}
S	}
S
S	// Alloc the new text if required
S	if (!text || !*text)
S		gw->text = "";
S	else if (useAlloc) {
S		char *str;
S
S		if ((str = gfxAlloc(strlen(text)+1))) {
S			gh->flags |= GWIN_FLG_ALLOCTXT;
S			strcpy(str, text);
S		}
S		gw->text = (const char *)str;
S	} else
S		gw->text = text;
S	_gwinUpdate(gh);
S}
S
S#if GFX_USE_GFILE && GFILE_NEED_PRINTG && GFILE_NEED_STRINGS
S	#include <stdarg.h>
S
S	void gwinPrintg(GHandle gh, const char * fmt, ...) {
S		char *str;
S		va_list va;
S		int size;
S		
S		if (!(gh->flags & GWIN_FLG_WIDGET))
S			return;
S
S		// Dispose of the old string
S		if ((gh->flags & GWIN_FLG_ALLOCTXT)) {
S			gh->flags &= ~GWIN_FLG_ALLOCTXT;
S			if (gw->text) {
S				gfxFree((void *)gw->text);
S				gw->text = "";
S			}
S		}
S
S		// Alloc the new text
S		va_start (va, fmt);
S
S		size = vsnprintg(0, 0, fmt, va) + 1;		//determine the buffer size required
S
S		if ((str = gfxAlloc(size))) {
S			gh->flags |= GWIN_FLG_ALLOCTXT;
S			vsnprintg(str, size, fmt, va);
S			gw->text = (const char *)str;
S		} else
S			gw->text = "";
S		
S		va_end (va);
S
S		_gwinUpdate(gh);
S	}
S#endif
S
Sconst char *gwinGetText(GHandle gh) {
S	if (!(gh->flags & GWIN_FLG_WIDGET))
S		return 0;
S
S	return gw->text;
S}
S
Sbool_t gwinIsWidget(GHandle gh) {
S	if (gh->flags & GWIN_FLG_WIDGET) {
S		return TRUE;
S	}
S
S	return FALSE;
S}
S
Svoid gwinSetStyle(GHandle gh, const GWidgetStyle *pstyle) {
S	if (!(gh->flags & GWIN_FLG_WIDGET))
S		return;
S
S	gw->pstyle = pstyle ? pstyle : defaultStyle;
S	gh->bgcolor = pstyle->background;
S	gh->color = pstyle->enabled.text;
S
S	_gwinUpdate(gh);
S}
S
Sconst GWidgetStyle *gwinGetStyle(GHandle gh) {
S	if (!(gh->flags & GWIN_FLG_WIDGET))
S		return 0;
S
S	return gw->pstyle;
S}
S
Svoid gwinSetCustomDraw(GHandle gh, CustomWidgetDrawFunction fn, void *param) {
S	if (!(gh->flags & GWIN_FLG_WIDGET))
S		return;
S
S	gw->fnDraw = fn ? fn : wvmt->DefaultDraw;
S	gw->fnParam = param;
S	_gwinUpdate(gh);
S}
S
Sbool_t gwinAttachListener(GListener *pl) {
S	return geventAttachSource(pl, GWIDGET_SOURCE, 0);
S}
S
S#if GFX_USE_GINPUT && GINPUT_NEED_MOUSE
S	bool_t DEPRECATED("This call can now be removed. Attaching the mouse to GWIN is now automatic.") gwinAttachMouse(uint16_t instance) {
S		// This is now a NULL event because we automatically attach to all mice in the system.
S		(void) instance;
S		return TRUE;
S	}
S#endif
S
S#if GFX_USE_GINPUT && GINPUT_NEED_TOGGLE
S	bool_t gwinAttachToggle(GHandle gh, uint16_t role, uint16_t instance) {
S		GSourceHandle	gsh;
S		uint16_t		oi;
S
S		// Is this a widget
S		if (!(gh->flags & GWIN_FLG_WIDGET))
S			return FALSE;
S
S		// Is the role valid
S		if (role >= wvmt->toggleroles)
S			return FALSE;
S
S		// Is this a valid device
S		if (!(gsh = ginputGetToggle(instance)))
S			return FALSE;
S
S		// Is this already done?
S		oi = wvmt->ToggleGet(gw, role);
S		if (instance == oi)
S			return TRUE;
S
S		// Remove the old instance
S		if (oi != GWIDGET_NO_INSTANCE) {
S			wvmt->ToggleAssign(gw, role, GWIDGET_NO_INSTANCE);
S			if (!FindToggleUser(oi))
S				geventDetachSource(&gl, ginputGetToggle(oi));
S		}
S
S		// Assign the new
S		wvmt->ToggleAssign(gw, role, instance);
S		return geventAttachSource(&gl, gsh, GLISTEN_TOGGLE_ON|GLISTEN_TOGGLE_OFF);
S	}
S
S	bool_t gwinDetachToggle(GHandle gh, uint16_t role) {
S		uint16_t		oi;
S
S		// Is this a widget
S		if (!(gh->flags & GWIN_FLG_WIDGET))
S			return FALSE;
S
S		// Is the role valid
S		if (role >= ((gwidgetVMT *)gh->vmt)->toggleroles)
S			return FALSE;
S
S		oi = ((gwidgetVMT *)gh->vmt)->ToggleGet(gw, role);
S
S		// Remove the instance
S		if (oi != GWIDGET_NO_INSTANCE) {
S			((gwidgetVMT *)gh->vmt)->ToggleAssign(gw, role, GWIDGET_NO_INSTANCE);
S			if (!FindToggleUser(oi))
S				geventDetachSource(&gl, ginputGetToggle(oi));
S		}
S		return TRUE;
S	}
S
S#endif
S
S#if GFX_USE_GINPUT && GINPUT_NEED_DIAL
S	bool_t gwinAttachDial(GHandle gh, uint16_t role, uint16_t instance) {
S		GSourceHandle	gsh;
S		uint16_t		oi;
S
S		if (!(gh->flags & GWIN_FLG_WIDGET))
S			return FALSE;
S
S		// Is the role valid
S		if (role >= wvmt->dialroles)
S			return FALSE;
S
S		// Is this a valid device
S		if (!(gsh = ginputGetDial(instance)))
S			return FALSE;
S
S		// Is this already done?
S		oi = wvmt->DialGet(gw, role);
S		if (instance == oi)
S			return TRUE;
S
S		// Remove the old instance
S		if (oi != GWIDGET_NO_INSTANCE) {
S			wvmt->DialAssign(gw, role, GWIDGET_NO_INSTANCE);
S			if (!FindDialUser(oi))
S				geventDetachSource(&gl, ginputGetDial(oi));
S		}
S
S		// Assign the new
S		wvmt->DialAssign(gw, role, instance);
S		return geventAttachSource(&gl, gsh, 0);
S	}
S#endif
S
S#if GWIN_WIDGET_TAGS
S	void gwinSetTag(GHandle gh, WidgetTag tag) {
S		if ((gh->flags & GWIN_FLG_WIDGET))
S			gw->tag = tag;
S	}
S
S	WidgetTag gwinGetTag(GHandle gh) {
S		return ((gh->flags & GWIN_FLG_WIDGET)) ? gw->tag : 0;
S	}
S#endif
S
S#undef gw
S#undef wvmt
N#endif /* GFX_USE_GWIN && GWIN_NEED_WIDGET */
N/** @} */
L 10 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_wm.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_wm.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_wm.c
N * @brief   GWIN sub-system window manager code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && !GWIN_NEED_WINDOWMANAGER
X#if 0 && !0
S	/**
S	 * A really nasty default implementation for the simplest of systems
S	 */
S
S
S	#include "gwin_class.h"
S
S	// Needed if there is no window manager
S	#define MIN_WIN_WIDTH	1
S	#define MIN_WIN_HEIGHT	1
S
S	static gfxMutex		gmutex;
S
S	void _gwmInit(void)	{
S		gfxMutexInit(&gmutex);
S	}
S
S	void _gwmDeinit(void) {
S		gfxMutexDestroy(&gmutex);
S	}
S
S	bool_t _gwinWMAdd(GHandle gh, const GWindowInit *pInit) {
S		gh->x = gh->y = gh->width = gh->height = 0;
S		gwinMove(gh, pInit->x, pInit->y);
S		gwinResize(gh, pInit->width, pInit->height);
S		return TRUE;
S	}
S
S	void _gwinFlushRedraws(GRedrawMethod how) {
S		(void) how;
S
S		// We are always flushed
S	}
S
S
S	#if GDISP_NEED_CLIP
S		static void getLock(GHandle gh) {
S			gfxMutexEnter(&gmutex);
S			gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
S		}
S		static void exitLock(GHandle gh) {
S			gdispGUnsetClip(gh->display);
S			gfxMutexExit(&gmutex);
S		}
S	#else
S		#define getLock(gh)		gfxMutexEnter(&gmutex)
S		#define exitLock(gh)	gfxMutexExit(&gmutex)
S	#endif
S
S	void _gwinUpdate(GHandle gh) {
S		if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
S			if (gh->vmt->Redraw) {
S				getLock(gh);
S				gh->vmt->Redraw(gh);
S				exitLock(gh);
S			} else if ((gh->flags & GWIN_FLG_BGREDRAW)) {
S				getLock(gh);
S				gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S				exitLock(gh);
S				if (gh->vmt->AfterClear)
S					gh->vmt->AfterClear(gh);
S			}
S		} else if ((gh->flags & GWIN_FLG_BGREDRAW)) {
S			getLock(gh);
S			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gwinGetDefaultBgColor());
S			exitLock(gh);
S		}
S		gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
S	}
S
S	bool_t _gwinDrawStart(GHandle gh) {
S		if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S			return FALSE;
S
S		getLock(gh);
S		return TRUE;
S	}
S
S	void _gwinDrawEnd(GHandle gh) {
S		(void)	gh;
S		exitLock(gh);
S	}
S
S	void gwinSetVisible(GHandle gh, bool_t visible) {
S		if (visible) {
S			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
S				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_BGREDRAW);
S				_gwinUpdate(gh);
S			}
S		} else {
S			if ((gh->flags & GWIN_FLG_VISIBLE)) {
S				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
S				gh->flags |= GWIN_FLG_BGREDRAW;
S				_gwinUpdate(gh);
S			}
S		}
S	}
S
S	void gwinSetEnabled(GHandle gh, bool_t enabled) {
S		if (enabled) {
S			if (!(gh->flags & GWIN_FLG_ENABLED)) {
S				gh->flags |= (GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
S				_gwinUpdate(gh);
S			}
S		} else {
S			if ((gh->flags & GWIN_FLG_ENABLED)) {
S				gh->flags &= ~(GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
S				_gwinUpdate(gh);
S			}
S		}
S	}
S
S	void gwinMove(GHandle gh, coord_t x, coord_t y) {
S		gh->x = x; gh->y = y;
S		if (gh->x < 0) gh->x = 0;
S		if (gh->y < 0) gh->y = 0;
S		if (gh->x > gdispGGetWidth(gh->display)-MIN_WIN_WIDTH)		gh->x = gdispGGetWidth(gh->display)-MIN_WIN_WIDTH;
S		if (gh->y > gdispGGetHeight(gh->display)-MIN_WIN_HEIGHT)	gh->y = gdispGGetHeight(gh->display)-MIN_WIN_HEIGHT;
S		if (gh->x+gh->width > gdispGGetWidth(gh->display)) 			gh->width = gdispGGetWidth(gh->display) - gh->x;
S		if (gh->y+gh->height > gdispGGetHeight(gh->display)) 		gh->height = gdispGGetHeight(gh->display) - gh->y;
S		_gwinUpdate(gh);
S	}
S
S	void gwinResize(GHandle gh, coord_t width, coord_t height) {
S		gh->width = width; gh->height = height;
S		if (gh->width < MIN_WIN_WIDTH) { gh->width = MIN_WIN_WIDTH; }
S		if (gh->height < MIN_WIN_HEIGHT) { gh->height = MIN_WIN_HEIGHT; }
S		if (gh->x+gh->width > gdispGGetWidth(gh->display))		gh->width = gdispGGetWidth(gh->display) - gh->x;
S		if (gh->y+gh->height > gdispGGetHeight(gh->display))	gh->height = gdispGGetHeight(gh->display) - gh->y;
S		_gwinUpdate(gh);
S	}
S
S	void gwinRedraw(GHandle gh) {
S		_gwinUpdate(gh);
S	}
N#endif
N
N#if GFX_USE_GWIN && GWIN_NEED_WINDOWMANAGER
X#if 0 && 0
S
S#include "gwin_class.h"
S
S/*-----------------------------------------------
S * Data
S *-----------------------------------------------*/
S
S// The default window manager
Sextern const GWindowManager	GNullWindowManager;
SGWindowManager *			_GWINwm;
Sbool_t						_gwinFlashState;
Sstatic gfxSem				gwinsem;
Sstatic gfxQueueASync		_GWINList;
S#if GWIN_NEED_FLASHING
S	static GTimer			FlashTimer;
S#endif
S#if !GWIN_REDRAW_IMMEDIATE
S	static GTimer			RedrawTimer;
S	static void				RedrawTimerFn(void *param);
S#endif
Sstatic volatile uint8_t		RedrawPending;
S	#define DOREDRAW_INVISIBLES		0x01
S	#define DOREDRAW_VISIBLES		0x02
S	#define DOREDRAW_FLASHRUNNING	0x04
S
S
S/*-----------------------------------------------
S * Window Routines
S *-----------------------------------------------*/
S
Svoid _gwmInit(void)
S{
S	gfxSemInit(&gwinsem, 1, 1);
S	gfxQueueASyncInit(&_GWINList);
S	#if GWIN_NEED_FLASHING
S		gtimerInit(&FlashTimer);
S	#endif
S	#if !GWIN_REDRAW_IMMEDIATE
S		gtimerInit(&RedrawTimer);
S		gtimerStart(&RedrawTimer, RedrawTimerFn, 0, TRUE, TIME_INFINITE);
S	#endif
S	_GWINwm = (GWindowManager *)&GNullWindowManager;
S	_GWINwm->vmt->Init();
S}
S
Svoid _gwmDeinit(void)
S{
S	GHandle		gh;
S
S	while((gh = gwinGetNextWindow(0)))
S		gwinDestroy(gh);
S
S	_GWINwm->vmt->DeInit();
S	#if !GWIN_REDRAW_IMMEDIATE
S		gtimerDeinit(&RedrawTimer);
S	#endif
S	gfxQueueASyncDeinit(&_GWINList);
S	gfxSemDestroy(&gwinsem);
S}
S
S#if GWIN_REDRAW_IMMEDIATE
S	#define TriggerRedraw(void) _gwinFlushRedraws(REDRAW_NOWAIT);
S#else
S	#define TriggerRedraw()		gtimerJab(&RedrawTimer);
S
S	static void RedrawTimerFn(void *param) {
S		(void)		param;
S		_gwinFlushRedraws(REDRAW_NOWAIT);
S	}
S#endif
S
Svoid _gwinFlushRedraws(GRedrawMethod how) {
S	GHandle		gh;
S
S	// Do we really need to do anything?
S	if (!RedrawPending)
S		return;
S
S	// Obtain the drawing lock
S	if (how == REDRAW_WAIT)
S		gfxSemWait(&gwinsem, TIME_INFINITE);
S	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
S		// Someone is drawing - They will do the redraw when they are finished
S		return;
S
S	// Do loss of visibility first
S	while ((RedrawPending & DOREDRAW_INVISIBLES)) {
S		RedrawPending &= ~DOREDRAW_INVISIBLES;				// Catch new requests
S
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) != GWIN_FLG_NEEDREDRAW)
S				continue;
S
S			// Do the redraw
S			#if GDISP_NEED_CLIP
S				gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
S				_GWINwm->vmt->Redraw(gh);
S				gdispGUnsetClip(gh->display);
S			#else
S				_GWINwm->vmt->Redraw(gh);
S			#endif
S
S			// Postpone further redraws
S			#if !GWIN_REDRAW_IMMEDIATE && !GWIN_REDRAW_SINGLEOP
S				if (how == REDRAW_NOWAIT) {
S					RedrawPending |= DOREDRAW_INVISIBLES;
S					TriggerRedraw();
S					goto releaselock;
S				}
S			#endif
S		}
S	}
S
S	// Do the visible windows next
S	while ((RedrawPending & DOREDRAW_VISIBLES)) {
S		RedrawPending &= ~DOREDRAW_VISIBLES;				// Catch new requests
S
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) != (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE))
S				continue;
S
S			// Do the redraw
S			#if GDISP_NEED_CLIP
S				gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
S				_GWINwm->vmt->Redraw(gh);
S				gdispGUnsetClip(gh->display);
S			#else
S				_GWINwm->vmt->Redraw(gh);
S			#endif
S
S			// Postpone further redraws (if there are any and the options are set right)
S			#if !GWIN_REDRAW_IMMEDIATE && !GWIN_REDRAW_SINGLEOP
S				if (how == REDRAW_NOWAIT) {
S					while((gh = gwinGetNextWindow(gh))) {
S						if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) == (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) {
S							RedrawPending |= DOREDRAW_VISIBLES;
S							TriggerRedraw();
S							break;
S						}
S					}
S					goto releaselock;
S				}
S			#endif
S		}
S	}
S
S	#if !GWIN_REDRAW_IMMEDIATE && !GWIN_REDRAW_SINGLEOP
S		releaselock:
S	#endif
S
S	// Release the lock
S	if (how == REDRAW_WAIT || how == REDRAW_NOWAIT)
S		gfxSemSignal(&gwinsem);
S}
S
Svoid _gwinUpdate(GHandle gh) {
S	// Only redraw if visible
S	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S		return;
S
S	// Mark for redraw
S	gh->flags |= GWIN_FLG_NEEDREDRAW;
S	RedrawPending |= DOREDRAW_VISIBLES;
S
S	// Asynchronous redraw
S	TriggerRedraw();
S}
S
S#if GWIN_NEED_CONTAINERS
S	void _gwinRippleVisibility(void) {
S		GHandle		gh;
S
S		// Check each window's visibility is consistent with its parents
S		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S			switch(gh->flags & (GWIN_FLG_SYSVISIBLE|GWIN_FLG_VISIBLE)) {
S			case GWIN_FLG_VISIBLE:
S				if (!gh->parent || (gh->parent->flags & GWIN_FLG_SYSVISIBLE)) {
S					// We have been made visible
S					gh->flags |= (GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
S
S					// Do we want to grab the focus
S					_gwinFixFocus(gh);
S
S					RedrawPending |= DOREDRAW_VISIBLES;
S				}
S				break;
S			case (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE):
S				if (!gh->parent || (gh->parent->flags & GWIN_FLG_SYSVISIBLE))
S					break;
S
S				// Parent has been made invisible
S				gh->flags &= ~GWIN_FLG_SYSVISIBLE;
S
S				// No focus for us anymore
S				_gwinFixFocus(gh);
S
S				break;
S			case GWIN_FLG_SYSVISIBLE:
S				// We have been made invisible
S				gh->flags &= ~GWIN_FLG_SYSVISIBLE;
S				if (!gh->parent || (gh->parent->flags & GWIN_FLG_SYSVISIBLE)) {
S					// The parent is visible so we must clear the area we took
S					gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
S
S					// No focus for us anymore
S					_gwinFixFocus(gh);
S
S					RedrawPending |= DOREDRAW_INVISIBLES;
S				}
S				break;
S			}
S		}
S	}
S#endif
S
Sbool_t _gwinDrawStart(GHandle gh) {
S	// This test should occur inside the lock. We do this
S	//	here as well as an early out (more efficient).
S	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S		return FALSE;
S
S	// Obtain the drawing lock
S	gfxSemWait(&gwinsem, TIME_INFINITE);
S
S	// Re-test visibility as we may have waited a while
S	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
S		_gwinDrawEnd(gh);
S		return FALSE;
S	}
S
S	// OK - we are ready to draw.
S	#if GDISP_NEED_CLIP
S		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
S	#endif
S	return TRUE;
S}
S
Svoid _gwinDrawEnd(GHandle gh) {
S	// Ensure there is no clip set
S	#if GDISP_NEED_CLIP
S		gdispGUnsetClip(gh->display);
S	#endif
S
S	// Look for something to redraw
S	_gwinFlushRedraws(REDRAW_INSESSION);
S
S	// Release the lock
S	gfxSemSignal(&gwinsem);
S}
S
Sbool_t _gwinWMAdd(GHandle gh, const GWindowInit *pInit) {
S	#if GWIN_NEED_CONTAINERS
S		// Save the parent
S		gh->parent = pInit->parent;
S
S		// Ensure the display is consistent with any parents
S		if (gh->parent && (!(gh->parent->flags & GWIN_FLG_CONTAINER) || gh->display != gh->parent->display))
S			return FALSE;
S	#endif
S
S	// Add to the window manager
S	if (!_GWINwm->vmt->Add(gh, pInit))
S		return FALSE;
S
S	#if GWIN_NEED_CONTAINERS
S		// Notify the parent it has been added
S		if (gh->parent && ((gcontainerVMT *)gh->parent->vmt)->NotifyAdd)
S			((gcontainerVMT *)gh->parent->vmt)->NotifyAdd(gh->parent, gh);
S	#endif
S
S	return TRUE;
S}
S
Svoid gwinSetWindowManager(struct GWindowManager *gwm) {
S	if (!gwm)
S		gwm = (GWindowManager *)&GNullWindowManager;
S	if (_GWINwm != gwm) {
S		_GWINwm->vmt->DeInit();
S		_GWINwm = gwm;
S		_GWINwm->vmt->Init();
S	}
S}
S
Svoid gwinRedraw(GHandle gh) {
S	// Only redraw if visible
S	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S		return;
S
S	// Mark for redraw
S	gh->flags |= GWIN_FLG_NEEDREDRAW;
S	RedrawPending |= DOREDRAW_VISIBLES;
S
S	// Synchronous redraw
S	_gwinFlushRedraws(REDRAW_WAIT);
S}
S
S#if GWIN_NEED_CONTAINERS
S	void gwinSetVisible(GHandle gh, bool_t visible) {
S		if (visible) {
S			// Mark us as visible
S			gh->flags |= GWIN_FLG_VISIBLE;
S		} else {
S			// Mark us as not visible
S			gh->flags &= ~GWIN_FLG_VISIBLE;
S		}
S
S		// Fix everything up
S		_gwinRippleVisibility();
S		if (RedrawPending)
S			TriggerRedraw();
S	}
S#else
S	void gwinSetVisible(GHandle gh, bool_t visible) {
S		if (visible) {
S			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
S				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
S
S				// Do we want to grab the focus
S				_gwinFixFocus(gh);
S
S				RedrawPending |= DOREDRAW_VISIBLES;
S				TriggerRedraw();
S			}
S		} else {
S			if ((gh->flags & GWIN_FLG_VISIBLE)) {
S				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
S				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
S
S				// No focus for us anymore
S				_gwinFixFocus(gh);
S
S				RedrawPending |= DOREDRAW_INVISIBLES;
S				TriggerRedraw();
S			}
S		}
S	}
S#endif
S
S#if GWIN_NEED_CONTAINERS
S	// These two sub-functions set/clear system enable recursively.
S	void gwinSetEnabled(GHandle gh, bool_t enabled) {
S		if (enabled) {
S			// Mark us as enabled
S			gh->flags |= GWIN_FLG_ENABLED;
S
S			// Do we change our real enabled state
S			if (!(gh->flags & GWIN_FLG_SYSENABLED) && (!gh->parent || (gh->parent->flags & GWIN_FLG_SYSENABLED))) {
S				// Check each window's enabled state is consistent with its parents
S				for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S					if ((gh->flags & (GWIN_FLG_SYSENABLED|GWIN_FLG_ENABLED)) == GWIN_FLG_ENABLED && (!gh->parent || (gh->parent->flags & GWIN_FLG_SYSENABLED))) {
S						gh->flags |= GWIN_FLG_SYSENABLED;							// Fix it
S
S						// Do we want to grab the focus
S						_gwinFixFocus(gh);
S
S						_gwinUpdate(gh);
S					}
S				}
S			}
S		} else {
S			gh->flags &= ~GWIN_FLG_ENABLED;
S
S			// Do we need to change our real enabled state
S			if ((gh->flags & GWIN_FLG_SYSENABLED)) {
S				// Check each window's visibility is consistent with its parents
S				for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S					if ((gh->flags & GWIN_FLG_SYSENABLED) && (!(gh->flags & GWIN_FLG_ENABLED) || (gh->parent && !(gh->parent->flags & GWIN_FLG_SYSENABLED)))) {
S						gh->flags &= ~GWIN_FLG_SYSENABLED;			// Fix it
S
S						// No focus for us anymore
S						_gwinFixFocus(gh);
S
S						_gwinUpdate(gh);
S					}
S				}
S			}
S		}
S	}
S#else
S	void gwinSetEnabled(GHandle gh, bool_t enabled) {
S		if (enabled) {
S			if (!(gh->flags & GWIN_FLG_ENABLED)) {
S				gh->flags |= (GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
S
S				// Do we want to grab the focus
S				_gwinFixFocus(gh);
S
S				_gwinUpdate(gh);
S			}
S		} else {
S			if ((gh->flags & GWIN_FLG_ENABLED)) {
S				gh->flags &= ~(GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
S
S				// No focus for us anymore
S				_gwinFixFocus(gh);
S
S				_gwinUpdate(gh);
S			}
S		}
S	}
S#endif
S
Svoid gwinMove(GHandle gh, coord_t x, coord_t y) {
S	_GWINwm->vmt->Move(gh, x, y);
S}
S
Svoid gwinResize(GHandle gh, coord_t width, coord_t height) {
S	_GWINwm->vmt->Size(gh, width, height);
S}
S
Svoid gwinSetMinMax(GHandle gh, GWindowMinMax minmax) {
S	_GWINwm->vmt->MinMax(gh, minmax);
S}
S
Svoid gwinRaise(GHandle gh) {
S	_GWINwm->vmt->Raise(gh);
S}
S
SGWindowMinMax gwinGetMinMax(GHandle gh) {
S	if (gh->flags & GWIN_FLG_MINIMIZED)
S		return GWIN_MINIMIZE;
S	if (gh->flags & GWIN_FLG_MAXIMIZED)
S		return GWIN_MAXIMIZE;
S	return GWIN_NORMAL;
S}
S
Svoid gwinRedrawDisplay(GDisplay *g, bool_t preserve) {
S	GHandle	gh;
S
S	for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S
S		// Skip if it is for a different display
S		if (g && gh->display != g)
S			continue;
S
S		#if GWIN_NEED_CONTAINERS
S			// Skip if it is not a top level window (parents internally take care of their children)
S			if (gh->parent)
S				continue;
S		#endif
S
S		// Only visible windows are to be redrawn
S		if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
S			continue;
S
S		if (!preserve)
S			gh->flags |= GWIN_FLG_BGREDRAW;
S
S		_gwinUpdate(gh);
S	}
S}
S
SGHandle gwinGetNextWindow(GHandle gh) {
S	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
S}
S
S#if GWIN_NEED_FLASHING
S	static void FlashTimerFn(void *param) {
S		GHandle		gh;
S		(void)		param;
S
S		// Assume we will be stopping
S		RedrawPending &= ~DOREDRAW_FLASHRUNNING;
S
S		// Swap the flash state
S		_gwinFlashState = !_gwinFlashState;
S
S		// Redraw all flashing windows
S		for(gh = (GHandle)gfxQueueASyncPeek(&_GWINList); gh; gh = (GHandle)gfxQueueASyncNext(&gh->wmq)) {
S			if ((gh->flags & GWIN_FLG_FLASHING)) {
S				RedrawPending |= DOREDRAW_FLASHRUNNING;
S				_gwinUpdate(gh);
S			}
S		}
S
S		// Do we have no flashers left?
S		if (!(RedrawPending & DOREDRAW_FLASHRUNNING))
S			gtimerStop(&FlashTimer);
S	}
S
S	void gwinSetFlashing(GHandle gh, bool_t flash) {
S
S		// Start flashing?
S		if (flash) {
S			gh->flags |= GWIN_FLG_FLASHING;			// A redraw will occur on the next flash period.
S
S			// Start the flash timer if needed
S			if (!(RedrawPending & DOREDRAW_FLASHRUNNING)) {
S				RedrawPending |= DOREDRAW_FLASHRUNNING;
S
S				// Ensure we start the timer with flash bit on
S				_gwinFlashState = FALSE;
S				FlashTimerFn(0);														// First flash
S				gtimerStart(&FlashTimer, FlashTimerFn, 0, TRUE, GWIN_FLASHING_PERIOD);	// Subsequent flashes
S			}
S
S		// Stop flashing?
S		} else if ((gh->flags & GWIN_FLG_FLASHING)) {
S			gh->flags &= ~GWIN_FLG_FLASHING;
S			// We need to manually redraw as the timer is now turned off for this window
S			_gwinUpdate(gh);
S		}
S	}
S
S	#if GWIN_NEED_WIDGET
S		const GColorSet *_gwinGetFlashedColor(GWidgetObject *gw, const GColorSet *pcol, bool_t flashOffState) {
S			// Does the flashing state affect the current colors?
S			if ((gw->g.flags & GWIN_FLG_FLASHING) && _gwinFlashState) {
S
S				// For a pressed state show an unpressed state
S				if (pcol == &gw->pstyle->pressed)
S					pcol = &gw->pstyle->enabled;
S
S				// For a non-pressed state (if allowed) show a pressed state
S				else if (flashOffState && pcol == &gw->pstyle->enabled)
S					pcol = &gw->pstyle->pressed;
S			}
S			return pcol;
S		}
S	#endif
S#endif
S
S
S/*-----------------------------------------------
S * "Null" Window Manager Routines
S *-----------------------------------------------*/
S
S// This is a parent reveal operation
S#define GWIN_FLG_PARENTREVEAL		(GWIN_FIRST_WM_FLAG << 0)
S
S// Minimum dimensions
S#define MIN_WIN_WIDTH	3
S#define MIN_WIN_HEIGHT	3
S
S
Sstatic void WM_Init(void);
Sstatic void WM_DeInit(void);
Sstatic bool_t WM_Add(GHandle gh, const GWindowInit *pInit);
Sstatic void WM_Delete(GHandle gh);
Sstatic void WM_Redraw(GHandle gh);
Sstatic void WM_Size(GHandle gh, coord_t w, coord_t h);
Sstatic void WM_Move(GHandle gh, coord_t x, coord_t y);
Sstatic void WM_Raise(GHandle gh);
Sstatic void WM_MinMax(GHandle gh, GWindowMinMax minmax);
S
Sstatic const gwmVMT GNullWindowManagerVMT = {
S	WM_Init,
S	WM_DeInit,
S	WM_Add,
S	WM_Delete,
S	WM_Redraw,
S	WM_Size,
S	WM_Move,
S	WM_Raise,
S	WM_MinMax,
S};
S
Sconst GWindowManager	GNullWindowManager = {
S	&GNullWindowManagerVMT,
S};
S
Sstatic void WM_Init(void) {
S	// We don't need to do anything here.
S	// A full window manager would move the windows around, add borders etc
S
S	// clear the screen
S	// cycle through the windows already defined displaying them
S	// or cut all the window areas out of the screen and clear the remainder
S}
S
Sstatic void WM_DeInit(void) {
S	// We don't need to do anything here.
S	// A full window manager would remove any borders etc
S}
S
Sstatic bool_t WM_Add(GHandle gh, const GWindowInit *pInit) {
S	// Note the window will not currently be marked as visible
S
S	// Put it on the end of the queue
S	gfxQueueASyncPut(&_GWINList, &gh->wmq);
S
S	// Make sure the size/position is valid - prefer position over size.
S	gh->width = MIN_WIN_WIDTH; gh->height = MIN_WIN_HEIGHT;
S	gh->x = gh->y = 0;
S	WM_Move(gh, pInit->x, pInit->y);
S	WM_Size(gh, pInit->width, pInit->height);
S	return TRUE;
S}
S
Sstatic void WM_Delete(GHandle gh) {
S	// Remove it from the window list
S	gfxQueueASyncRemove(&_GWINList, &gh->wmq);
S}
S
Sstatic void WM_Redraw(GHandle gh) {
S	#if GWIN_NEED_CONTAINERS
S		redo_redraw:
S	#endif
S	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
S		if (gh->vmt->Redraw)
S			gh->vmt->Redraw(gh);
S		else if ((gh->flags & GWIN_FLG_BGREDRAW)) {
S			// We can't redraw but we want full coverage so just clear the area
S			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S
S			// Only do an after clear if this is not a parent reveal
S			if (!(gh->flags & GWIN_FLG_PARENTREVEAL) && gh->vmt->AfterClear)
S				gh->vmt->AfterClear(gh);
S		}
S
S		#if GWIN_NEED_CONTAINERS
S			// If this is container but not a parent reveal, mark any visible children for redraw
S			//	We redraw our children here as we have overwritten them in redrawing the parent
S			//	as GDISP/GWIN doesn't support complex clipping regions.
S			if ((gh->flags & (GWIN_FLG_CONTAINER|GWIN_FLG_PARENTREVEAL)) == GWIN_FLG_CONTAINER) {
S
S				// Container redraw is done
S				gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
S
S				for(gh = gwinGetFirstChild(gh); gh; gh = gwinGetSibling(gh))
S					_gwinUpdate(gh);
S				return;
S			}
S		#endif
S
S	} else {
S		if ((gh->flags & GWIN_FLG_BGREDRAW)) {
S			GHandle		gx;
S
S			#if GWIN_NEED_CONTAINERS
S				if (gh->parent) {
S					// Child redraw is done
S					gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
S
S
S					// Get the parent to redraw the area
S					gh = gh->parent;
S
S					// The parent is already marked for redraw - don't do it now.
S					if ((gh->flags & GWIN_FLG_NEEDREDRAW))
S						return;
S
S					// Use the existing clipping region and redraw now
S					gh->flags |= (GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
S					goto redo_redraw;
S				}
S			#endif
S
S			// Clear the area to the background color
S			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gwinGetDefaultBgColor());
S
S			// Now loop over all windows looking for overlaps. Redraw them if they overlap the newly exposed area.
S			for(gx = gwinGetNextWindow(0); gx; gx = gwinGetNextWindow(gx)) {
S				if ((gx->flags & GWIN_FLG_SYSVISIBLE)
S						&& gx->display == gh->display
S						&& gx->x < gh->x+gh->width && gx->y < gh->y+gh->height && gx->x+gx->width >= gh->x && gx->y+gx->height >= gh->y) {
S					if (gx->vmt->Redraw)
S						gx->vmt->Redraw(gx);
S					else
S						// We can't redraw this window but we want full coverage so just clear the area
S						gdispGFillArea(gx->display, gx->x, gx->y, gx->width, gx->height, gx->bgcolor);
S				}
S			}
S
S		}
S	}
S
S	// Redraw is done
S	gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
S}
S
Sstatic void WM_Size(GHandle gh, coord_t w, coord_t h) {
S	coord_t		v;
S
S	#if GWIN_NEED_CONTAINERS
S		if (gh->parent) {
S			// Clip to the container
S			v = gh->parent->x + gh->parent->width - ((const gcontainerVMT *)gh->parent->vmt)->RightBorder(gh->parent);
S			if (gh->x+w > v)	w = v - gh->x;
S			v = gh->parent->y + gh->parent->height - ((const gcontainerVMT *)gh->parent->vmt)->BottomBorder(gh->parent);
S			if (gh->y+h > v) 	h = v - gh->y;
S		}
S	#endif
S
S	// Clip to the screen
S	v = gdispGGetWidth(gh->display);
S	if (gh->x+w > v) 	w = v - gh->x;
S	v = gdispGGetHeight(gh->display);
S	if (gh->y+h > v) 	h = v - gh->y;
S
S	// Give it a minimum size
S	if (w < MIN_WIN_WIDTH)	w = MIN_WIN_WIDTH;
S	if (h < MIN_WIN_HEIGHT)	h = MIN_WIN_HEIGHT;
S
S	// If there has been no resize just exit
S	if (gh->width == w && gh->height == h)
S		return;
S
S	// Set the new size and redraw
S	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
S		if (w >= gh->width && h >= gh->height) {
S
S			// The new size is larger - just redraw
S			gh->width = w; gh->height = h;
S			_gwinUpdate(gh);
S
S		} else {
S			// We need to make this window invisible and ensure that has been drawn
S			gwinSetVisible(gh, FALSE);
S			_gwinFlushRedraws(REDRAW_WAIT);
S
S			// Resize
S			gh->width = w; gh->height = h;
S
S			#if GWIN_NEED_CONTAINERS
S				// Any children outside the new area need to be moved
S				if ((gh->flags & GWIN_FLG_CONTAINER)) {
S					GHandle		child;
S
S					// Move to their old relative location. THe WM_Move() will adjust as necessary
S					for(child = gwinGetFirstChild(gh); child; child = gwinGetSibling(child))
S						WM_Move(child, child->x-gh->x-((const gcontainerVMT *)gh->vmt)->LeftBorder(gh), child->y-gh->y-((const gcontainerVMT *)gh->vmt)->TopBorder(gh));
S				}
S			#endif
S
S			// Mark it visible again in its new location
S			gwinSetVisible(gh, TRUE);
S		}
S	} else {
S		gh->width = w; gh->height = h;
S
S		#if GWIN_NEED_CONTAINERS
S			// Any children outside the new area need to be moved
S			if ((gh->flags & GWIN_FLG_CONTAINER)) {
S				GHandle		child;
S
S				// Move to their old relative location. THe WM_Move() will adjust as necessary
S				for(child = gwinGetFirstChild(gh); child; child = gwinGetSibling(child))
S					WM_Move(child, child->x-gh->x-((const gcontainerVMT *)gh->vmt)->LeftBorder(gh), child->y-gh->y-((const gcontainerVMT *)gh->vmt)->TopBorder(gh));
S			}
S		#endif
S	}
S}
S
Sstatic void WM_Move(GHandle gh, coord_t x, coord_t y) {
S	coord_t		u, v;
S
S	#if GWIN_NEED_CONTAINERS
S		if (gh->parent) {
S			// Clip to the parent size
S			u = gh->parent->width - ((const gcontainerVMT *)gh->parent->vmt)->LeftBorder(gh->parent) - ((const gcontainerVMT *)gh->parent->vmt)->RightBorder(gh->parent);
S			v = gh->parent->height - ((const gcontainerVMT *)gh->parent->vmt)->TopBorder(gh->parent) - ((const gcontainerVMT *)gh->parent->vmt)->BottomBorder(gh->parent);
S		} else
S	#endif
S	{
S		// Clip to the screen
S		u = gdispGGetWidth(gh->display);
S		v = gdispGGetHeight(gh->display);
S	}
S
S	// Make sure we are positioned in the appropriate area
S	if (x+gh->width > u)	x = u-gh->width;
S	if (x < 0) x = 0;
S	if (y+gh->height > v)	y = v-gh->height;
S	if (y < 0) y = 0;
S
S	// Make sure we don't overflow the appropriate area
S	u -= x;
S	v -= y;
S	if (gh->width < u)	u = gh->width;
S	if (gh->height < v)	v = gh->height;
S	if (u != gh->width || v != gh->height)
S		WM_Size(gh, u, v);
S
S	#if GWIN_NEED_CONTAINERS
S		if (gh->parent) {
S			// Convert to a screen relative position
S			x += gh->parent->x + ((const gcontainerVMT *)gh->parent->vmt)->LeftBorder(gh->parent);
S			y += gh->parent->y + ((const gcontainerVMT *)gh->parent->vmt)->TopBorder(gh->parent);
S		}
S	#endif
S
S	// If there has been no move just exit
S	if (gh->x == x && gh->y == y)
S		return;
S
S	// Clear the old area and then redraw
S	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
S		// We need to make this window invisible and ensure that has been drawn
S		gwinSetVisible(gh, FALSE);
S		_gwinFlushRedraws(REDRAW_WAIT);
S
S		// Do the move
S		u = gh->x; gh->x = x;
S		v = gh->y; gh->y = y;
S
S		#if GWIN_NEED_CONTAINERS
S			// Any children need to be moved
S			if ((gh->flags & GWIN_FLG_CONTAINER)) {
S				GHandle		child;
S
S				// Move to their old relative location. THe WM_Move() will adjust as necessary
S				for(child = gwinGetFirstChild(gh); child; child = gwinGetSibling(child))
S					WM_Move(child, child->x-u-((const gcontainerVMT *)gh->vmt)->LeftBorder(gh), child->y-v-((const gcontainerVMT *)gh->vmt)->TopBorder(gh));
S			}
S		#endif
S
S		gwinSetVisible(gh, TRUE);
S	} else {
S		u = gh->x; gh->x = x;
S		v = gh->y; gh->y = y;
S
S		#if GWIN_NEED_CONTAINERS
S			// Any children need to be moved
S			if ((gh->flags & GWIN_FLG_CONTAINER)) {
S				GHandle		child;
S
S				// Move to their old relative location. THe WM_Move() will adjust as necessary
S				for(child = gwinGetFirstChild(gh); child; child = gwinGetSibling(child))
S					WM_Move(child, child->x-u-((const gcontainerVMT *)gh->vmt)->LeftBorder(gh), child->y-v-((const gcontainerVMT *)gh->vmt)->TopBorder(gh));
S			}
S		#endif
S	}
S}
S
Sstatic void WM_MinMax(GHandle gh, GWindowMinMax minmax) {
S	(void)gh; (void) minmax;
S	// We don't support minimising, maximising or restoring
S}
S
Sstatic void WM_Raise(GHandle gh) {
S	// Take it off the list and then put it back on top
S	// The order of the list then reflects the z-order.
S
S	gfxQueueASyncRemove(&_GWINList, &gh->wmq);
S	gfxQueueASyncPut(&_GWINList, &gh->wmq);
S
S	#if GWIN_NEED_CONTAINERS
S		// Any children need to be raised too
S		if ((gh->flags & GWIN_FLG_CONTAINER)) {
S			GHandle		gx;
S			GHandle		child;
S			bool_t		restart;
S
S			// Raise the children too
S			// Note: Children can also have their own children so after each move we have to start again.
S			for (gx = gwinGetNextWindow(0); gx; gx = gwinGetNextWindow(gx)) {
S				if ((gx->flags & GWIN_FLG_CONTAINER)) {
S					restart = FALSE;
S					for (child = gwinGetNextWindow(0); child && child != gx; child = gwinGetNextWindow(child)) {
S						if (child->parent == gx) {
S							// Oops - this child is behind its parent. Move it to the front.
S							gfxQueueASyncRemove(&_GWINList, &child->wmq);
S							gfxQueueASyncPut(&_GWINList, &child->wmq);
S
S							// Restart at the front of the list for this parent container as we have moved this child
S							// to the end of the list. We also need to restart everything once this container is done.
S							child = 0;
S							restart = TRUE;
S						}
S					}
S					if (restart)
S						gx = 0;
S				}
S			}
S		}
S	#endif
S	
S	// Redraw the window
S	_gwinUpdate(gh);
S}
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_WINDOWMANAGER */
N/** @} */
L 11 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_console.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_console.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_console.c
N * @brief   GWIN sub-system console code.
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_CONSOLE
X#if 0 && 0
S
S#include <string.h>
S
S#include "gwin_class.h"
S
S#define GWIN_CONSOLE_USE_CLEAR_LINES			TRUE			// Clear each line before using it
S#define GWIN_CONSOLE_USE_FILLED_CHARS			FALSE			// Use filled characters instead of drawn characters
S#define GWIN_CONSOLE_BUFFER_SCROLLING			TRUE			// Use the history buffer to scroll when it is available
S
S// Our control flags
S#define GCONSOLE_FLG_NOSTORE					(GWIN_FIRST_CONTROL_FLAG<<0)
S#define GCONSOLE_FLG_OVERRUN					(GWIN_FIRST_CONTROL_FLAG<<1)
S
S// Meaning of our attribute bits.
S#define	ESC_REDBIT		0x01
S#define	ESC_GREENBIT	0x02
S#define	ESC_BLUEBIT		0x04
S#define ESC_USECOLOR	0x08
S#define ESC_UNDERLINE	0x10
S#define ESC_BOLD		0x20
S
S/*
S * Stream interface implementation. The interface is write only
S */
S
S#if GFX_USE_OS_CHIBIOS && GWIN_CONSOLE_USE_BASESTREAM
S	#define Stream2GWindow(ip)		((GHandle)(((char *)(ip)) - (size_t)(&(((GConsoleObject *)0)->stream))))
S
S#if CH_KERNEL_MAJOR == 2
S	static size_t GWinStreamWrite(void *ip, const uint8_t *bp, size_t n) { gwinPutCharArray(Stream2GWindow(ip), (const char *)bp, n); return RDY_OK; }
S	static size_t GWinStreamRead(void *ip, uint8_t *bp, size_t n) {	(void)ip; (void)bp; (void)n; return 0; }
S	static msg_t GWinStreamPut(void *ip, uint8_t b) { gwinPutChar(Stream2GWindow(ip), (char)b); return RDY_OK; }
S	static msg_t GWinStreamGet(void *ip) {(void)ip; return RDY_OK; }
S	static msg_t GWinStreamPutTimed(void *ip, uint8_t b, systime_t time) { (void)time; gwinPutChar(Stream2GWindow(ip), (char)b); return RDY_OK; }
S	static msg_t GWinStreamGetTimed(void *ip, systime_t timeout) { (void)ip; (void)timeout; return RDY_OK; }
S	static size_t GWinStreamWriteTimed(void *ip, const uint8_t *bp, size_t n, systime_t time) { (void)time; gwinPutCharArray(Stream2GWindow(ip), (const char *)bp, n); return RDY_OK; }
S	static size_t GWinStreamReadTimed(void *ip, uint8_t *bp, size_t n, systime_t time) { (void)ip; (void)bp; (void)n; (void)time; return 0; }
S#elif CH_KERNEL_MAJOR == 3
S    static size_t GWinStreamWrite(void *ip, const uint8_t *bp, size_t n) { gwinPutCharArray(Stream2GWindow(ip), (const char *)bp, n); return MSG_OK; }
S    static size_t GWinStreamRead(void *ip, uint8_t *bp, size_t n) { (void)ip; (void)bp; (void)n; return 0; }
S    static msg_t GWinStreamPut(void *ip, uint8_t b) { gwinPutChar(Stream2GWindow(ip), (char)b); return MSG_OK; }
S    static msg_t GWinStreamGet(void *ip) {(void)ip; return MSG_OK; }
S    static msg_t GWinStreamPutTimed(void *ip, uint8_t b, systime_t time) { (void)time; gwinPutChar(Stream2GWindow(ip), (char)b); return MSG_OK; }
S    static msg_t GWinStreamGetTimed(void *ip, systime_t timeout) { (void)ip; (void)timeout; return MSG_OK; }
S    static size_t GWinStreamWriteTimed(void *ip, const uint8_t *bp, size_t n, systime_t time) { (void)time; gwinPutCharArray(Stream2GWindow(ip), (const char *)bp, n); return MSG_OK; }
S    static size_t GWinStreamReadTimed(void *ip, uint8_t *bp, size_t n, systime_t time) { (void)ip; (void)bp; (void)n; (void)time; return 0; }
S#endif
S
S	struct GConsoleWindowVMT_t {
S		_base_asynchronous_channel_methods
S	};
S
S	static const struct GConsoleWindowVMT_t GWindowConsoleVMT = {
S		GWinStreamWrite,
S		GWinStreamRead,
S		GWinStreamPut,
S		GWinStreamGet,
S		GWinStreamPutTimed,
S		GWinStreamGetTimed,
S		GWinStreamWriteTimed,
S		GWinStreamReadTimed
S	};
S#endif
S
S#if GWIN_CONSOLE_ESCSEQ
S	// Convert escape sequences to attributes
S	static bool_t ESCtoAttr(char c, uint8_t *pattr) {
S		uint8_t		attr;
S
S		attr = pattr[0];
S		switch(c) {
S		case '0': case '1': case '2': case '3':
S		case '4': case '5': case '6': case '7':
S			attr &= ~(ESC_REDBIT|ESC_GREENBIT|ESC_BLUEBIT);
S			attr |= (c - '0') | ESC_USECOLOR;
S			break;
S		case 'C':
S			attr &= ~(ESC_REDBIT|ESC_GREENBIT|ESC_BLUEBIT|ESC_USECOLOR);
S			break;
S		case 'u':
S			attr |= ESC_UNDERLINE;
S			break;
S		case 'U':
S			attr &= ~ESC_UNDERLINE;
S			break;
S		case 'b':
S			attr |= ESC_BOLD;
S			break;
S		case 'B':
S			attr &= ~ESC_BOLD;
S			break;
S		default:
S			return FALSE;
S		}
S		if (attr == pattr[0])
S			return FALSE;
S		pattr[0] = attr;
S		return TRUE;
S	}
S
S	static color_t ESCPrintColor(GConsoleObject *gcw) {
S		switch(gcw->currattr & (ESC_REDBIT|ESC_GREENBIT|ESC_BLUEBIT|ESC_USECOLOR)) {
S		case (ESC_USECOLOR):
S			return Black;
S		case (ESC_USECOLOR|ESC_REDBIT):
S			return Red;
S		case (ESC_USECOLOR|ESC_GREENBIT):
S			return Green;
S		case (ESC_USECOLOR|ESC_REDBIT|ESC_GREENBIT):
S			return Yellow;
S		case (ESC_USECOLOR|ESC_BLUEBIT):
S			return Blue;
S		case (ESC_USECOLOR|ESC_REDBIT|ESC_BLUEBIT):
S			return Magenta;
S		case (ESC_USECOLOR|ESC_GREENBIT|ESC_BLUEBIT):
S			return Cyan;
S		case (ESC_USECOLOR|ESC_REDBIT|ESC_GREENBIT|ESC_BLUEBIT):
S			return White;
S		default:
S			return gcw->g.color;
S		}
S	}
S#else
S	#define ESCPrintColor(gcw)		((gcw)->g.color)
S#endif
S
S#if GWIN_CONSOLE_USE_HISTORY
S	static void HistoryDestroy(GWindowObject *gh) {
S		#define gcw		((GConsoleObject *)gh)
S
S		// Deallocate the history buffer if required.
S		if (gcw->buffer) {
S			gfxFree(gcw->buffer);
S			gcw->buffer = 0;
S		}
S
S		#undef gcw
S	}
S
S	static void HistoryRedraw(GWindowObject *gh) {
S		#define gcw		((GConsoleObject *)gh)
S
S		// No redrawing if there is no history
S		if (!gcw->buffer)
S			return;
S
S		// We are printing the buffer - don't store it again
S		gh->flags |= GCONSOLE_FLG_NOSTORE;
S
S		#if !GWIN_CONSOLE_USE_CLEAR_LINES
S			// Clear the screen
S			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S		#endif
S
S		// Reset the cursor
S		gcw->cx = 0;
S		gcw->cy = 0;
S
S		// Reset the current attributes
S		#if GWIN_CONSOLE_ESCSEQ
S			gcw->currattr = gcw->startattr;
S		#endif
S
S		// Print the buffer
S		gwinPutCharArray(gh, gcw->buffer, gcw->bufpos);
S
S		#if GWIN_CONSOLE_USE_CLEAR_LINES
S			// Clear the remaining space
S			{
S				coord_t		y;
S
S				y = gcw->cy;
S				if (gcw->cx)
S					y += gdispGetFontMetric(gh->font, fontHeight);
S				if (y < gh->height)
S					gdispGFillArea(gh->display, gh->x, gh->y+y, gh->width, gh->height-y, gh->bgcolor);
S			}
S		#endif
S
S		// Turn back on storing of buffer contents
S		gh->flags &= ~GCONSOLE_FLG_NOSTORE;
S
S		#undef gcw
S	}
S
S	/**
S	 * Put a character into our history buffer
S	 */
S	static void putCharInBuffer(GConsoleObject *gcw, char c) {
S		// Only store if we need to
S		if (!gcw->buffer || (gcw->g.flags & GCONSOLE_FLG_NOSTORE))
S			return;
S
S		// Do we have enough space in the buffer
S		if (gcw->bufpos >= gcw->bufsize) {
S			char	*p, *ep;
S			size_t	dp;
S
S			/**
S			 * This should never really happen except if the user has changed the window
S			 * size without turning off and then on the buffer. Even then it is unlikely
S			 * because of our conservative allocation strategy.
S			 * If it really is needed we scroll one line to make some space. We also mark
S			 * it is an overrun so that if asked to really scroll later we know we already have.
S			 * Note we only use one bit to indicate an overrun, so an overrun of more
S			 * than one line will lead to some interesting scrolling and refreshing
S			 * effects.
S			 */
S
S			// Remove one line from the start
S			ep = gcw->buffer+gcw->bufpos;
S			for(p = gcw->buffer; p < ep && *p != '\n'; p++) {
S				#if GWIN_CONSOLE_ESCSEQ
S					if (*p == 27)
S						ESCtoAttr(p[1], &gcw->startattr);
S				#endif
S			}
S
S			// Was there a newline?
S			if (*p != '\n')
S				p = gcw->buffer;						// Oops - no newline, just delete one char
S			else
S				gcw->g.flags |= GCONSOLE_FLG_OVERRUN;	// Mark the overrun
S
S			// Delete the data
S			dp = ++p - gcw->buffer;						// Calculate the amount to to be removed
S			gcw->bufpos -= dp;							// Calculate the new size
S			if (gcw->bufpos)
S				memcpy(gcw->buffer, p, gcw->bufpos);	// Move the rest of the data
S		}
S
S		// Save the character
S		gcw->buffer[gcw->bufpos++] = c;
S	}
S
S	/**
S	 * Scroll the history buffer by one line
S	 */
S	static void scrollBuffer(GConsoleObject *gcw) {
S		char	*p, *ep;
S		size_t	dp;
S
S		// Only scroll if we need to
S		if (!gcw->buffer || (gcw->g.flags & GCONSOLE_FLG_NOSTORE))
S			return;
S
S		// If a buffer overrun has been marked don't scroll as we have already
S		if ((gcw->g.flags & GCONSOLE_FLG_OVERRUN)) {
S			gcw->g.flags &= ~GCONSOLE_FLG_OVERRUN;
S			return;
S		}
S
S		// Remove one line from the start
S		ep = gcw->buffer+gcw->bufpos;
S		for(p = gcw->buffer; p < ep && *p != '\n'; p++) {
S			#if GWIN_CONSOLE_ESCSEQ
S				if (*p == 27)
S					ESCtoAttr(p[1], &gcw->startattr);
S			#endif
S		}
S
S		// Was there a newline, if not delete everything.
S		if (*p != '\n') {
S			gcw->bufpos = 0;
S			return;
S		}
S
S		// Delete the data
S		dp = ++p - gcw->buffer;						// Calculate the amount to to be removed
S		gcw->bufpos -= dp;							// Calculate the new size
S		if (gcw->bufpos)
S			memcpy(gcw->buffer, p, gcw->bufpos);	// Move the rest of the data
S	}
S
S	/**
S	 * Clear the history buffer
S	 */
S	static void clearBuffer(GConsoleObject *gcw) {
S
S		// Only clear if we need to
S		if (!gcw->buffer || (gcw->g.flags & GCONSOLE_FLG_NOSTORE))
S			return;
S
S		gcw->bufpos = 0;
S	}
S
S#else
S	#define putCharInBuffer(gcw, c)
S	#define scrollBuffer(gcw)
S	#define clearBuffer(gcw)
S#endif
S
Sstatic void AfterClear(GWindowObject *gh) {
S	#define gcw		((GConsoleObject *)gh)
S	gcw->cx = 0;
S	gcw->cy = 0;
S	clearBuffer(gcw);
S	#if GWIN_CONSOLE_ESCSEQ
S		gcw->startattr = gcw->currattr;
S	#endif
S	#undef gcw		
S}
S
Sstatic const gwinVMT consoleVMT = {
S	"Console",				// The classname
S	sizeof(GConsoleObject),	// The object size
S	#if GWIN_CONSOLE_USE_HISTORY
S		HistoryDestroy,		// The destroy routine (custom)
S		HistoryRedraw,		// The redraw routine (custom)
S	#else
S		0,					// The destroy routine
S		0,					// The redraw routine (default)
S	#endif
S	AfterClear,				// The after-clear routine
S};
S
SGHandle gwinGConsoleCreate(GDisplay *g, GConsoleObject *gc, const GWindowInit *pInit) {
S	if (!(gc = (GConsoleObject *)_gwindowCreate(g, &gc->g, pInit, &consoleVMT, 0)))
S		return 0;
S
S	#if GFX_USE_OS_CHIBIOS && GWIN_CONSOLE_USE_BASESTREAM
S		gc->stream.vmt = &GWindowConsoleVMT;
S	#endif
S
S	#if GWIN_CONSOLE_USE_HISTORY
S		gc->buffer = 0;
S		#if GWIN_CONSOLE_HISTORY_ATCREATE
S			gwinConsoleSetBuffer(&gc->g, TRUE);
S		#endif
S	#endif
S
S	gc->cx = 0;
S	gc->cy = 0;
S
S	#if GWIN_CONSOLE_ESCSEQ
S		gc->startattr = gc->currattr = 0;
S		gc->escstate = 0;
S	#endif
S
S	gwinSetVisible((GHandle)gc, pInit->show);
S	_gwinFlushRedraws(REDRAW_WAIT);
S
S	return (GHandle)gc;
S}
S
S#if GFX_USE_OS_CHIBIOS && GWIN_CONSOLE_USE_BASESTREAM
S	BaseSequentialStream *gwinConsoleGetStream(GHandle gh) {
S		if (gh->vmt != &consoleVMT)
S			return 0;
S
S		return (BaseSequentialStream *)&(((GConsoleObject *)(gh))->stream);
S	}
S#endif
S
S#if GWIN_CONSOLE_USE_HISTORY
S	bool_t gwinConsoleSetBuffer(GHandle gh, bool_t onoff) {
S		#define gcw		((GConsoleObject *)gh)
S
S		if (gh->vmt != &consoleVMT)
S			return FALSE;
S
S		// Do we want the buffer turned off?
S		if (!onoff) {
S			if (gcw->buffer) {
S				gfxFree(gcw->buffer);
S				gcw->buffer = 0;
S			}
S			return FALSE;
S		}
S
S		// Is the buffer already on?
S		if (gcw->buffer)
S			return TRUE;
S
S		// Get the number of characters that fit in the x direction
S		#if GWIN_CONSOLE_HISTORY_AVERAGING
S			gcw->bufsize = gh->width / ((2*gdispGetFontMetric(gh->font, fontMinWidth)+gdispGetFontMetric(gh->font, fontMaxWidth))/3);
S		#else
S			gcw->bufsize = gh->width / gdispGetFontMetric(gh->font, fontMinWidth);
S		#endif
S		gcw->bufsize++;				// Allow space for a newline on each line.
S
S		// Multiply by the number of lines
S		gcw->bufsize *= gh->height / gdispGetFontMetric(gh->font, fontHeight);
S
S		// Allocate the buffer
S		if (!(gcw->buffer = gfxAlloc(gcw->bufsize)))
S			return FALSE;
S
S		// All good!
S		gh->flags &= ~GCONSOLE_FLG_OVERRUN;
S		gcw->bufpos = 0;
S		return TRUE;
S		
S		#undef gcw
S	}
S#endif
S
S/*
S *  We can get into gwinPutChar() 2 ways -
S *  	1. when the user calls us, and
S *  	2. when the redraw uses us to redraw the display.
S *  When called by option 2 we MUST not try to obtain a draw session
S *  as we already have one.
S *
S *  We use these macro's below to make sure we do that safely
S */
S#define DrawStart(gh)		((gh->flags & GCONSOLE_FLG_NOSTORE) || _gwinDrawStart(gh))
S#define DrawEnd(gh)			{ if (!(gh->flags & GCONSOLE_FLG_NOSTORE)) _gwinDrawEnd(gh); }
S
Svoid gwinPutChar(GHandle gh, char c) {
S	#define gcw		((GConsoleObject *)gh)
S	uint8_t			width, fy;
S
S	if (gh->vmt != &consoleVMT || !gh->font)
S		return;
S
S	fy = gdispGetFontMetric(gh->font, fontHeight);
S
S	#if GWIN_CONSOLE_ESCSEQ
S		/**
S		 * Handle escape sequences
S		 * 			ESC color		Change subsequent text color
S		 * 							color:	"0" = black, "1" = red, "2" = green, "3" = yellow, "4" = blue,
S		 * 									"5" = magenta, "6" = cyan, "7" = white
S		 * 			ESC C			Revert subsequent text color to the window default
S		 * 			ESC u			Turn on underline
S		 * 			ESC U			Turn off underline
S		 * 			ESC b			Turn on bold
S		 * 			ESC B			Turn off bold
S		 * 			ESC J			Clear the window
S		 */
S		switch (gcw->escstate) {
S		case 1:
S			gcw->escstate = 0;
S			if (ESCtoAttr(c, &gcw->currattr)) {
S				if (gcw->cx == 0 && gcw->cy == 0)
S					gcw->startattr = gcw->currattr;
S				else {
S					putCharInBuffer(gcw, 27);
S					putCharInBuffer(gcw, c);
S				}
S			} else {
S				switch(c) {
S				case 'J':
S					// Clear the console and reset the cursor
S					clearBuffer(gcw);
S					if (DrawStart(gh)) {
S						gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S						DrawEnd(gh);
S					}
S					gcw->cx = 0;
S					gcw->cy = 0;
S					gcw->startattr = gcw->currattr;
S					break;
S				}
S			}
S			return;
S		}
S	#endif
S
S	/**
S	 * Special Characters:
S	 *
S	 * Carriage returns and line feeds (\r & \n) are handled in unix terminal cooked mode; that is,
S	 * line feeds perform both actions and carriage-returns are ignored.
S	 *
S	 * if GWIN_CONSOLE_ESCSEQ is turned on then ESC is trapped ready for the escape command.
S	 *
S	 * All other characters are treated as printable.
S	 */
S	switch (c) {
S	case '\n':
S		// clear to the end of the line
S		#if GWIN_CONSOLE_USE_CLEAR_LINES
S			if (gcw->cx == 0 && gcw->cy+fy < gh->height && DrawStart(gh)) {
S				gdispGFillArea(gh->display, gh->x, gh->y + gcw->cy, gh->width, fy, gh->bgcolor);
S				DrawEnd(gh);
S			}
S		#endif
S		// update the cursor
S		gcw->cx = 0;
S		gcw->cy += fy;
S		putCharInBuffer(gcw, '\n');
S		// We use lazy scrolling here and only scroll when the next char arrives
S		return;
S
S	case '\r':
S		// gcw->cx = 0;
S		return;
S
S	#if GWIN_CONSOLE_ESCSEQ
S		case 27:		// ESC
S			gcw->escstate = 1;
S			return;
S	#endif
S	}
S
S	// Characters with no width are ignored
S	if (!(width = gdispGetCharWidth(c, gh->font)))
S		return;
S
S	// Allow space for (very crude) bold
S	#if GWIN_CONSOLE_ESCSEQ
S		if ((gcw->currattr & ESC_BOLD))
S			width++;
S	#endif
S
S	// Do we need to go to the next line to fit this character?
S	if (gcw->cx + width >= gh->width) {
S		gcw->cx = 0;
S		gcw->cy += fy;
S		putCharInBuffer(gcw, '\n');
S	}
S
S	// Do we need to scroll to fit this character?
S	if (gcw->cy + fy > gh->height) {
S		#if GWIN_CONSOLE_USE_HISTORY && GWIN_CONSOLE_BUFFER_SCROLLING
S			if (gcw->buffer) {
S				// Scroll the buffer and then redraw using the buffer
S				scrollBuffer(gcw);
S				if (DrawStart(gh)) {
S					HistoryRedraw(gh);
S					DrawEnd(gh);
S				}
S			} else
S		#endif
S		#if GDISP_NEED_SCROLL
S			{
S				// Scroll the console using hardware
S				scrollBuffer(gcw);
S				if (DrawStart(gh)) {
S					gdispGVerticalScroll(gh->display, gh->x, gh->y, gh->width, gh->height, fy, gh->bgcolor);
S					DrawEnd(gh);
S				}
S
S				// Set the cursor to the start of the last line
S				gcw->cx = 0;
S				gcw->cy = (((coord_t)(gh->height/fy))-1)*fy;
S			}
S		#else
S			{
S				// Clear the console and reset the cursor
S				clearBuffer(gcw);
S				if (DrawStart(gh)) {
S					gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
S					DrawEnd(gh);
S				}
S				gcw->cx = 0;
S				gcw->cy = 0;
S				#if GWIN_CONSOLE_ESCSEQ
S					gcw->startattr = gcw->currattr;
S				#endif
S			}
S		#endif
S	}
S
S	// Save the char
S	putCharInBuffer(gcw, c);
S
S	// Draw the character
S	if (DrawStart(gh)) {
S
S		// If we are at the beginning of a new line clear the line
S		#if GWIN_CONSOLE_USE_CLEAR_LINES
S			if (gcw->cx == 0)
S				gdispGFillArea(gh->display, gh->x, gh->y + gcw->cy, gh->width, fy, gh->bgcolor);
S		#endif
S
S		#if GWIN_CONSOLE_USE_FILLED_CHARS
S			gdispGFillChar(gh->display, gh->x + gcw->cx, gh->y + gcw->cy, c, gh->font, ESCPrintColor(gcw), gh->bgcolor);
S		#else
S			gdispGDrawChar(gh->display, gh->x + gcw->cx, gh->y + gcw->cy, c, gh->font, ESCPrintColor(gcw));
S		#endif
S
S		#if GWIN_CONSOLE_ESCSEQ
S			// Draw the underline
S			if ((gcw->currattr & ESC_UNDERLINE))
S				gdispGDrawLine(gh->display, gh->x + gcw->cx, gh->y + gcw->cy + fy - gdispGetFontMetric(gh->font, fontDescendersHeight),
S											gh->x + gcw->cx + width + gdispGetFontMetric(gh->font, fontCharPadding), gh->y + gcw->cy + fy - gdispGetFontMetric(gh->font, fontDescendersHeight),
S											ESCPrintColor(gcw));
S			// Bold (very crude)
S			if ((gcw->currattr & ESC_BOLD))
S				gdispGDrawChar(gh->display, gh->x + gcw->cx + 1, gh->y + gcw->cy, c, gh->font, ESCPrintColor(gcw));
S		#endif
S
S		DrawEnd(gh);
S	}
S
S	// Update the cursor
S	gcw->cx += width + gdispGetFontMetric(gh->font, fontCharPadding);
S
S	#undef gcw
S}
S
Svoid gwinPutString(GHandle gh, const char *str) {
S	while(*str)
S		gwinPutChar(gh, *str++);
S}
S
Svoid gwinPutCharArray(GHandle gh, const char *str, size_t n) {
S	while(n--)
S		gwinPutChar(gh, *str++);
S}
S
S#include <stdarg.h>
S
S#define MAX_FILLER 11
S#define FLOAT_PRECISION 100000
S
Sstatic char *consltoa_wd(char *p, long num, unsigned radix, long divisor) {
S	int i;
S	char *q;
S
S	if (!divisor) divisor = num;
S
S	q = p + MAX_FILLER;
S	do {
S		i = (int)(num % radix);
S		i += '0';
S		if (i > '9')
S		  i += 'A' - '0' - 10;
S		*--q = i;
S		num /= radix;
S	} while ((divisor /= radix) != 0);
S
S	i = (int)(p + MAX_FILLER - q);
S	do {
S		*p++ = *q++;
S	} while (--i);
S
S	return p;
S}
S
S#if GWIN_CONSOLE_USE_FLOAT
S	static char *ftoa(char *p, double num) {
S		long l;
S		unsigned long precision = FLOAT_PRECISION;
S
S		l = num;
S		p = consltoa_wd(p, l, 10, 0);
S		*p++ = '.';
S		l = (num - l) * precision;
S		return consltoa_wd(p, l, 10, precision / 10);
S	}
S#endif
S
Svoid gwinPrintf(GHandle gh, const char *fmt, ...) {
S	va_list ap;
S	char *p, *s, c, filler;
S	int i, precision, width;
S	bool_t is_long, left_align;
S	long l;
S	#if GWIN_CONSOLE_USE_FLOAT
S		float f;
S		char tmpbuf[2*MAX_FILLER + 1];
S	#else
S		char tmpbuf[MAX_FILLER + 1];
S	#endif
S
S	if (gh->vmt != &consoleVMT || !gh->font)
S		return;
S
S	va_start(ap, fmt);
S	while (TRUE) {
S		c = *fmt++;
S		if (c == 0) {
S			va_end(ap);
S			return;
S		}
S		if (c != '%') {
S			gwinPutChar(gh, c);
S			continue;
S		}
S
S		p = tmpbuf;
S		s = tmpbuf;
S		left_align = FALSE;
S		if (*fmt == '-') {
S			fmt++;
S			left_align = TRUE;
S		}
S		filler = ' ';
S		if (*fmt == '0') {
S			fmt++;
S			filler = '0';
S		}
S		width = 0;
S
S		while (TRUE) {
S			c = *fmt++;
S			if (c >= '0' && c <= '9')
S				c -= '0';
S			else if (c == '*')
S				c = va_arg(ap, int);
S			else
S				break;
S			width = width * 10 + c;
S		}
S		precision = 0;
S		if (c == '.') {
S			while (TRUE) {
S				c = *fmt++;
S				if (c >= '0' && c <= '9')
S					c -= '0';
S				else if (c == '*')
S					c = va_arg(ap, int);
S				else
S					break;
S				precision = precision * 10 + c;
S			}
S		}
S		/* Long modifier.*/
S		if (c == 'l' || c == 'L') {
S			is_long = TRUE;
S			if (*fmt)
S				c = *fmt++;
S		}
S		else
S			is_long = (c >= 'A') && (c <= 'Z');
S
S		/* Command decoding.*/
S		switch (c) {
S		case 'c':
S			filler = ' ';
S			*p++ = va_arg(ap, int);
S			break;
S		case 's':
S			filler = ' ';
S			if ((s = va_arg(ap, char *)) == 0)
S				s = "(null)";
S			if (precision == 0)
S				precision = 32767;
S			for (p = s; *p && (--precision >= 0); p++);
S			break;
S		case 'D':
S		case 'd':
S			if (is_long)
S				l = va_arg(ap, long);
S			else
S				l = va_arg(ap, int);
S			if (l < 0) {
S				*p++ = '-';
S				l = -l;
S			}
S			p = consltoa_wd(p, l, 10, 0);
S			break;
S		#if GWIN_CONSOLE_USE_FLOAT
S			case 'f':
S				f = (float) va_arg(ap, double);
S				if (f < 0) {
S					*p++ = '-';
S					f = -f;
S				}
S				p = ftoa(p, f);
S				break;
S		#endif
S		case 'X':
S		case 'x':
S			c = 16;
S			goto unsigned_common;
S		case 'U':
S		case 'u':
S			c = 10;
S			goto unsigned_common;
S		case 'O':
S		case 'o':
S			c = 8;
S		unsigned_common:
S			if (is_long)
S				l = va_arg(ap, long);
S			else
S				l = va_arg(ap, int);
S			p = consltoa_wd(p, l, c, 0);
S			break;
S		default:
S			*p++ = c;
S			break;
S		}
S
S		i = (int)(p - s);
S		if ((width -= i) < 0)
S			width = 0;
S		if (left_align == FALSE)
S			width = -width;
S		if (width < 0) {
S			if (*s == '-' && filler == '0') {
S				gwinPutChar(gh, *s++);
S				i--;
S			}
S			do {
S				gwinPutChar(gh, filler);
S			} while (++width != 0);
S		}
S		while (--i >= 0)
S			gwinPutChar(gh, *s++);
S		while (width) {
S			gwinPutChar(gh, filler);
S			width--;
S		}
S	}
S}
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_CONSOLE */
N
N
L 12 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_graph.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_graph.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_graph.c
N * @brief   GWIN sub-system button code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_GRAPH
X#if 0 && 0
S
S#include "gwin_class.h"
S
S#define GGRAPH_FLG_CONNECTPOINTS			(GWIN_FIRST_CONTROL_FLAG<<0)
S#define GGRAPH_ARROW_SIZE					5
S
Sstatic const GGraphStyle GGraphDefaultStyle = {
S	{ GGRAPH_POINT_DOT, 0, White },			// point
S	{ GGRAPH_LINE_DOT, 2, Gray },			// line
S	{ GGRAPH_LINE_SOLID, 0, White },		// x axis
S	{ GGRAPH_LINE_SOLID, 0, White },		// y axis
S	{ GGRAPH_LINE_NONE, 0, White, 0 },		// x grid
S	{ GGRAPH_LINE_NONE, 0, White, 0 },		// y grid
S	GWIN_GRAPH_STYLE_XAXIS_ARROWS|GWIN_GRAPH_STYLE_YAXIS_ARROWS		// flags
S};
S
Sstatic const gwinVMT graphVMT = {
S		"Graph",				// The classname
S		sizeof(GGraphObject),	// The object size
S		0,						// The destroy routine
S		0,						// The redraw routine
S		0,						// The after-clear routine
S};
S
Sstatic void pointto(GGraphObject *gg, coord_t x, coord_t y, const GGraphPointStyle *style) {
S	if (style->type == GGRAPH_POINT_NONE)
S		return;
S
S	// Convert to device space. Note the y-axis is inverted.
S	x += gg->g.x + gg->xorigin;
S	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
S
S	if (style->size <= 1) {
S		gdispGDrawPixel(gg->g.display, x, y, style->color);
S		return;
S	}
S
S	switch(style->type) {
S	case GGRAPH_POINT_SQUARE:
S		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
S		break;
S#if GDISP_NEED_CIRCLE
S	case GGRAPH_POINT_CIRCLE:
S		gdispGDrawCircle(gg->g.display, x, y, style->size, style->color);
S		break;
S#endif
S	case GGRAPH_POINT_DOT:
S	default:
S		gdispGDrawPixel(gg->g.display, x, y, style->color);
S		break;
S	}
S}
S
Sstatic void lineto(GGraphObject *gg, coord_t x0, coord_t y0, coord_t x1, coord_t y1, const GGraphLineStyle *style) {
S	coord_t	dy, dx;
S	coord_t addx, addy;
S	coord_t P, diff, i;
S	coord_t	run_on, run_off, run;
S
S	if (style->type == GGRAPH_LINE_NONE)
S		return;
S
S	// Convert to device space. Note the y-axis is inverted.
S	x0 += gg->g.x + gg->xorigin;
S	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
S	x1 += gg->g.x + gg->xorigin;
S	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
S
S	if (style->size <= 0) {
S		// Use the driver to draw a solid line
S		gdispGDrawLine(gg->g.display, x0, y0, x1, y1, style->color);
S		return;
S	}
S
S	switch (style->type) {
S	case GGRAPH_LINE_DOT:
S		run_on = 1;
S		run_off = -style->size;
S		break;
S
S	case GGRAPH_LINE_DASH:
S		run_on = style->size;
S		run_off = -style->size;
S		break;
S
S	case GGRAPH_LINE_SOLID:
S	default:
S		// Use the driver to draw a solid line
S		gdispGDrawLine(gg->g.display, x0, y0, x1, y1, style->color);
S		return;
S	}
S
S	// Use Bresenham's algorithm modified to draw a stylized line
S	run = 0;
S	if (x1 >= x0) {
S		dx = x1 - x0;
S		addx = 1;
S	} else {
S		dx = x0 - x1;
S		addx = -1;
S	}
S	if (y1 >= y0) {
S		dy = y1 - y0;
S		addy = 1;
S	} else {
S		dy = y0 - y1;
S		addy = -1;
S	}
S
S	if (dx >= dy) {
S		dy *= 2;
S		P = dy - dx;
S		diff = P - dx;
S
S		for(i=0; i<=dx; ++i) {
S			if (run++ >= 0) {
S				if (run >= run_on)
S					run = run_off;
S				gdispGDrawPixel(gg->g.display, x0, y0, style->color);
S			}
S			if (P < 0) {
S				P  += dy;
S				x0 += addx;
S			} else {
S				P  += diff;
S				x0 += addx;
S				y0 += addy;
S			}
S		}
S	} else {
S		dx *= 2;
S		P = dx - dy;
S		diff = P - dy;
S
S		for(i=0; i<=dy; ++i) {
S			if (run++ >= 0) {
S				if (run >= run_on)
S					run = run_off;
S				gdispGDrawPixel(gg->g.display, x0, y0, style->color);
S			}
S			if (P < 0) {
S				P  += dx;
S				y0 += addy;
S			} else {
S				P  += diff;
S				x0 += addx;
S				y0 += addy;
S			}
S		}
S	}
S}
S
SGHandle gwinGGraphCreate(GDisplay *g, GGraphObject *gg, const GWindowInit *pInit) {
S	if (!(gg = (GGraphObject *)_gwindowCreate(g, &gg->g, pInit, &graphVMT, 0)))
S		return 0;
S	gg->xorigin = gg->yorigin = 0;
S	gg->lastx = gg->lasty = 0;
S	gwinGraphSetStyle((GHandle)gg, &GGraphDefaultStyle);
S	gwinSetVisible((GHandle)gg, pInit->show);
S	_gwinFlushRedraws(REDRAW_WAIT);
S	return (GHandle)gg;
S}
S
Svoid gwinGraphSetStyle(GHandle gh, const GGraphStyle *pstyle) {
S	#define gg	((GGraphObject *)gh)
S
S	if (gh->vmt != &graphVMT)
S		return;
S
S	gg->style.point = pstyle->point;
S	gg->style.line = pstyle->line;
S	gg->style.xaxis = pstyle->xaxis;
S	gg->style.yaxis = pstyle->yaxis;
S	gg->style.xgrid = pstyle->xgrid;
S	gg->style.ygrid = pstyle->ygrid;
S	gg->style.flags = pstyle->flags;
S
S	#undef gg
S}
S
Svoid gwinGraphSetOrigin(GHandle gh, coord_t x, coord_t y) {
S	#define gg	((GGraphObject *)gh)
S
S	if (gh->vmt != &graphVMT)
S		return;
S
S	gg->xorigin = x;
S	gg->yorigin = y;
S
S	#undef gg
S}
S
Svoid gwinGraphDrawAxis(GHandle gh) {
S	#define gg	((GGraphObject *)gh)
S	coord_t		i, xmin, ymin, xmax, ymax;
S
S	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
S		return;
S
S	xmin = -gg->xorigin;
S	xmax = gh->width-gg->xorigin-1;
S	ymin = -gg->yorigin;
S	ymax = gh->height-gg->yorigin-1;
S
S	// x grid - this code assumes that the GGraphGridStyle is a superset of GGraphListStyle
S	if (gg->style.xgrid.type != GGRAPH_LINE_NONE && gg->style.xgrid.spacing >= 2) {
S		for(i = gg->style.xgrid.spacing; i <= xmax; i += gg->style.xgrid.spacing)
S			lineto(gg, i, ymin, i, ymax, (GGraphLineStyle *)&gg->style.xgrid);
S		for(i = -gg->style.xgrid.spacing; i >= xmin; i -= gg->style.xgrid.spacing)
S			lineto(gg, i, ymin, i, ymax, (GGraphLineStyle *)&gg->style.xgrid);
S	}
S
S	// y grid - this code assumes that the GGraphGridStyle is a superset of GGraphListStyle
S	if (gg->style.ygrid.type != GGRAPH_LINE_NONE && gg->style.ygrid.spacing >= 2) {
S		for(i = gg->style.ygrid.spacing; i <= ymax; i += gg->style.ygrid.spacing)
S			lineto(gg, xmin, i, xmax, i, (GGraphLineStyle *)&gg->style.ygrid);
S		for(i = -gg->style.ygrid.spacing; i >= ymin; i -= gg->style.ygrid.spacing)
S			lineto(gg, xmin, i, xmax, i, (GGraphLineStyle *)&gg->style.ygrid);
S	}
S
S	// x axis
S	lineto(gg, xmin, 0, xmax, 0, &gg->style.xaxis);
S	if ((gg->style.flags & GWIN_GRAPH_STYLE_XAXIS_NEGATIVE_ARROWS)) {
S		if (xmin > 0 || xmin < -(GGRAPH_ARROW_SIZE+1)) {
S			lineto(gg, xmin, 0, xmin+GGRAPH_ARROW_SIZE, GGRAPH_ARROW_SIZE, &gg->style.xaxis);
S			lineto(gg, xmin, 0, xmin+GGRAPH_ARROW_SIZE, -GGRAPH_ARROW_SIZE, &gg->style.xaxis);
S		}
S	}
S	if ((gg->style.flags & GWIN_GRAPH_STYLE_XAXIS_POSITIVE_ARROWS)) {
S		if (xmax < 0 || xmax > (GGRAPH_ARROW_SIZE+1)) {
S			lineto(gg, xmax, 0, xmax-GGRAPH_ARROW_SIZE, GGRAPH_ARROW_SIZE, &gg->style.xaxis);
S			lineto(gg, xmax, 0, xmax-GGRAPH_ARROW_SIZE, -GGRAPH_ARROW_SIZE, &gg->style.xaxis);
S		}
S	}
S
S	// y axis
S	lineto(gg, 0, ymin, 0, ymax, &gg->style.yaxis);
S	if ((gg->style.flags & GWIN_GRAPH_STYLE_YAXIS_NEGATIVE_ARROWS)) {
S		if (ymin > 0 || ymin < -(GGRAPH_ARROW_SIZE+1)) {
S			lineto(gg, 0, ymin, GGRAPH_ARROW_SIZE, ymin+GGRAPH_ARROW_SIZE, &gg->style.yaxis);
S			lineto(gg, 0, ymin, -GGRAPH_ARROW_SIZE, ymin+GGRAPH_ARROW_SIZE, &gg->style.yaxis);
S		}
S	}
S	if ((gg->style.flags & GWIN_GRAPH_STYLE_YAXIS_POSITIVE_ARROWS)) {
S		if (ymax < 0 || ymax > (GGRAPH_ARROW_SIZE+1)) {
S			lineto(gg, 0, ymax, GGRAPH_ARROW_SIZE, ymax-GGRAPH_ARROW_SIZE, &gg->style.yaxis);
S			lineto(gg, 0, ymax, -GGRAPH_ARROW_SIZE, ymax-GGRAPH_ARROW_SIZE, &gg->style.yaxis);
S		}
S	}
S
S	_gwinDrawEnd(gh);
S	#undef gg
S}
S
Svoid gwinGraphStartSet(GHandle gh) {
S	if (gh->vmt != &graphVMT)
S		return;
S
S	gh->flags &= ~GGRAPH_FLG_CONNECTPOINTS;
S}
S
Svoid gwinGraphDrawPoint(GHandle gh, coord_t x, coord_t y) {
S	#define gg	((GGraphObject *)gh)
S
S	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
S		return;
S
S	if ((gh->flags & GGRAPH_FLG_CONNECTPOINTS)) {
S		// Draw the line
S		lineto(gg, gg->lastx, gg->lasty, x, y, &gg->style.line);
S
S		// Redraw the previous point because the line may have overwritten it
S		pointto(gg, gg->lastx, gg->lasty, &gg->style.point);
S
S	} else
S		gh->flags |= GGRAPH_FLG_CONNECTPOINTS;
S
S	// Save this point for next time.
S	gg->lastx = x;
S	gg->lasty = y;
S
S	// Draw this point.
S	pointto(gg, x, y, &gg->style.point);
S
S	_gwinDrawEnd(gh);
S	#undef gg
S}
S
Svoid gwinGraphDrawPoints(GHandle gh, const point *points, unsigned count) {
S	#define gg	((GGraphObject *)gh)
S	unsigned		i;
S	const point		*p;
S
S	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
S		return;
S
S	// Draw the connecting lines
S	for(p = points, i = 0; i < count; p++, i++) {
S		if ((gh->flags & GGRAPH_FLG_CONNECTPOINTS)) {
S			// Draw the line
S			lineto(gg, gg->lastx, gg->lasty, p->x, p->y, &gg->style.line);
S
S			// Redraw the previous point because the line may have overwritten it
S			if (i == 0)
S				pointto(gg, gg->lastx, gg->lasty, &gg->style.point);
S
S		} else
S			gh->flags |= GGRAPH_FLG_CONNECTPOINTS;
S
S		// Save this point for next time.
S		gg->lastx = p->x;
S		gg->lasty = p->y;
S	}
S
S
S	// Draw the points.
S	for(p = points, i = 0; i < count; p++, i++)
S		pointto(gg, p->x, p->y, &gg->style.point);
S
S	_gwinDrawEnd(gh);
S	#undef gg
S}
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_GRAPH */
L 13 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_button.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_button.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_button.c
N * @brief   GWIN sub-system button code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_BUTTON
X#if 0 && 0
S
S#include "gwin_class.h"
S
S// Parameters for various shapes
S#define BTN_CNR_SIZE			5		// Rounded corner size for rounded buttons
S#define BTN_ARROWHEAD_DIV		0		// What fraction of the length for the arrow head. Use 0 for 45 degree arrow head.
S#define BTN_ARROWBODY_DIV		2		// What fraction of the width for the arrow body
S#define BTN_TOP_FADE			50		// (BTN_TOP_FADE/255)% fade to white for top of button
S#define BTN_BOTTOM_FADE			25		// (BTN_BOTTOM_FADE/255)% fade to black for bottom of button
S
S#if GINPUT_NEED_MOUSE
S	// A mouse down has occurred over the button
S	static void ButtonMouseDown(GWidgetObject *gw, coord_t x, coord_t y) {
S		(void) x; (void) y;
S		gw->g.flags |= GBUTTON_FLG_PRESSED;
S		_gwinUpdate((GHandle)gw);
S	}
S
S	// A mouse up has occurred (it may or may not be over the button)
S	static void ButtonMouseUp(GWidgetObject *gw, coord_t x, coord_t y) {
S		(void) x; (void) y;
S		gw->g.flags &= ~GBUTTON_FLG_PRESSED;
S		_gwinUpdate((GHandle)gw);
S
S		#if !GWIN_BUTTON_LAZY_RELEASE
S			// If the mouse up was not over the button then cancel the event
S			if (x < 0 || y < 0 || x >= gw->g.width || y >= gw->g.height)
S				return;
S		#endif
S
S		_gwinSendEvent(&gw->g, GEVENT_GWIN_BUTTON);
S	}
S#endif
S
S#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S	static void ButtonKeyboard(GWidgetObject* gw, GEventKeyboard* pke)
S	{
S		// ENTER and SPACE keys to press the button
S		if (pke->c[0] == GKEY_ENTER || pke->c[0] == GKEY_SPACE) {
S
S			// Press or release event?
S			if (pke->keystate & GKEYSTATE_KEYUP) {
S				gw->g.flags &= ~GBUTTON_FLG_PRESSED;
S			} else {
S				gw->g.flags |= GBUTTON_FLG_PRESSED;
S			}
S		}
S
S		_gwinUpdate((GHandle)gw);
S	}
S#endif
S
S#if GINPUT_NEED_TOGGLE
S	// A toggle off has occurred
S	static void ButtonToggleOff(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		gw->g.flags &= ~GBUTTON_FLG_PRESSED;
S		_gwinUpdate((GHandle)gw);
S	}
S
S	// A toggle on has occurred
S	static void ButtonToggleOn(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		gw->g.flags |= GBUTTON_FLG_PRESSED;
S		_gwinUpdate((GHandle)gw);
S		// Trigger the event on button down (different than for mouse/touch)
S		_gwinSendEvent(&gw->g, GEVENT_GWIN_BUTTON);
S	}
S
S	static void ButtonToggleAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		(void) role;
S		((GButtonObject *)gw)->toggle = instance;
S	}
S
S	static uint16_t ButtonToggleGet(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		return ((GButtonObject *)gw)->toggle;
S	}
S#endif
S
S// The button VMT table
Sstatic const gwidgetVMT buttonVMT = {
S	{
S		"Button",				// The classname
S		sizeof(GButtonObject),	// The object size
S		_gwidgetDestroy,		// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinButtonDraw_Normal,			// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			ButtonMouseDown,		// Process mouse down events
S			ButtonMouseUp,			// Process mouse up events
S			0,						// Process mouse move events (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			ButtonKeyboard			// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			1,						// 1 toggle role
S			ButtonToggleAssign,		// Assign Toggles
S			ButtonToggleGet,		// Get Toggles
S			ButtonToggleOff,		// Process toggle off events
S			ButtonToggleOn,			// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0,						// Get Dials (NOT USED)
S			0,						// Process dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGButtonCreate(GDisplay *g, GButtonObject *gw, const GWidgetInit *pInit) {
S	if (!(gw = (GButtonObject *)_gwidgetCreate(g, &gw->w, pInit, &buttonVMT)))
S		return 0;
S
S	#if GINPUT_NEED_TOGGLE
S		gw->toggle = GWIDGET_NO_INSTANCE;
S	#endif
S	gwinSetVisible((GHandle)gw, pInit->g.show);
S	return (GHandle)gw;
S}
S
Sbool_t gwinButtonIsPressed(GHandle gh) {
S	if (gh->vmt != (gwinVMT *)&buttonVMT)
S		return FALSE;
S
S	return (gh->flags & GBUTTON_FLG_PRESSED) ? TRUE : FALSE;
S}
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
Sstatic const GColorSet *getButtonColors(GWidgetObject *gw) {
S	if (!(gw->g.flags & GWIN_FLG_SYSENABLED))	return &gw->pstyle->disabled;
S	if ((gw->g.flags & GBUTTON_FLG_PRESSED))	return &gw->pstyle->pressed;
S	return &gw->pstyle->enabled;
S}
S
S#if GWIN_FLAT_STYLING
S	void gwinButtonDraw_Normal(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S
S		// Render highlighted border if focused
S		_gwidgetDrawFocusRect(gw, 1, 1, gw->g.width-2, gw->g.height-2);
S	}
S#else
S	void gwinButtonDraw_Normal(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		fixed				alpha;
S		fixed				dalpha;
S		coord_t				i;
S		color_t				tcol, bcol;
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S	
S		/* Fill the box blended from variants of the fill color */
S		tcol = gdispBlendColor(White, pcol->fill, BTN_TOP_FADE);
S		bcol = gdispBlendColor(Black, pcol->fill, BTN_BOTTOM_FADE);
S		dalpha = FIXED(255)/gw->g.height;
S		for(alpha = 0, i = 0; i < gw->g.height; i++, alpha += dalpha)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+i, gw->g.x+gw->g.width-2, gw->g.y+i, gdispBlendColor(bcol, tcol, NONFIXED(alpha)));
S
S		gdispGDrawStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S
S		// Render highlighted border if focused
S		_gwidgetDrawFocusRect(gw, 0, 0, gw->g.width-1, gw->g.height-1);
S	}
S#endif
S
S#if GDISP_NEED_ARC
S	void gwinButtonDraw_Rounded(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		if (gw->g.width >= 2*BTN_CNR_SIZE+10) {
S			gdispGFillRoundedBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, BTN_CNR_SIZE-1, pcol->fill);
S			gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+BTN_CNR_SIZE, gw->g.width-2, gw->g.height-(2*BTN_CNR_SIZE), gw->text, gw->g.font, pcol->text, justifyCenter);
S			gdispGDrawRoundedBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, BTN_CNR_SIZE, pcol->edge);
S		} else {
S			gdispGFillStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S			gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);
S		}
S	}
S#endif
S
S#if GDISP_NEED_ELLIPSE
S	void gwinButtonDraw_Ellipse(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		gdispGFillEllipse(gw->g.display, gw->g.x+gw->g.width/2, gw->g.y+gw->g.height/2, gw->g.width/2-2, gw->g.height/2-2, pcol->fill);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S		gdispGDrawEllipse(gw->g.display, gw->g.x+gw->g.width/2, gw->g.y+gw->g.height/2, gw->g.width/2-1, gw->g.height/2-1, pcol->edge);
S	}
S#endif
S
S#if GDISP_NEED_CONVEX_POLYGON
S	void gwinButtonDraw_ArrowUp(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		point				arw[7];
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		// Create the arrow polygon
S		arw[0].x = (gw->g.width-1)/2;				// Point center
S		arw[0].y = 0;								// Arrow start
S		arw[3].y = gw->g.height-1;					// Arrow end
S		#if BTN_ARROWHEAD_DIV == 0
S			if (gw->g.height <= arw[0].x) {
S				arw[1].y = arw[3].y;				// End of head
S				arw[1].x = arw[0].x+arw[3].y;		// Width of head  (side 1)
S				arw[2].x = arw[1].x;				// Width of shaft (side 1)
S				arw[4].x = arw[0].x-arw[3].y;		// Width of head  (side 2)
S				arw[6].x = arw[4].x;				// Width of shaft (side 2)
S			} else {
S				arw[1].y = arw[0].x;
S				arw[1].x = arw[0].x << 1;
S				arw[2].x = arw[0].x + arw[0].x/BTN_ARROWBODY_DIV;
S				arw[4].x = arw[0].x - arw[0].x/BTN_ARROWBODY_DIV;
S				arw[6].x = 0;
S			}
S		#else
S			arw[1].y = gw->g.height/BTN_ARROWHEAD_DIV;
S			arw[1].x = arw[0].x << 1;
S			arw[2].x = arw[0].x + arw[0].x/BTN_ARROWBODY_DIV;
S			arw[4].x = arw[0].x - arw[0].x/BTN_ARROWBODY_DIV;
S			arw[6].x = 0;
S		#endif
S
S		// Fill in the rest from the special points
S		/* arw[0].x set */											/* arw[0].y set */
S		/* arw[1].x set */											/* arw[1].y set */
S		/* arw[2].x set */											arw[2].y = arw[1].y;
S		arw[3].x = arw[2].x;										/* arw[3].y set */
S		/* arw[4].x set */											arw[4].y = arw[3].y;
S		arw[5].x = arw[4].x;										arw[5].y = arw[1].y;
S		/* arw[6].x set */											arw[6].y = arw[1].y;
S
S		// Draw
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		gdispGFillConvexPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->fill);
S		gdispGDrawPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->edge);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S	}
S
S	void gwinButtonDraw_ArrowDown(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		point				arw[7];
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		// Create the arrow polygon
S		arw[0].x = (gw->g.width-1)/2;				// Point center
S		arw[0].y = gw->g.height-1;					// Arrow start
S		arw[3].y = 0;								// Arrow end
S		#if BTN_ARROWHEAD_DIV == 0
S			if (gw->g.height <= arw[0].x) {
S				arw[1].y = arw[3].y;				// End of head
S				arw[1].x = arw[0].x+arw[0].y;		// Width of head  (side 1)
S				arw[2].x = arw[1].x;				// Width of shaft (side 1)
S				arw[4].x = arw[0].x-arw[0].y;		// Width of head  (side 2)
S				arw[6].x = arw[4].x;				// Width of shaft (side 2)
S			} else {
S				arw[1].y = arw[0].y - arw[0].x;
S				arw[1].x = arw[0].x << 1;
S				arw[2].x = arw[0].x + arw[0].x/BTN_ARROWBODY_DIV;
S				arw[4].x = arw[0].x - arw[0].x/BTN_ARROWBODY_DIV;
S				arw[6].x = 0;
S			}
S		#else
S			arw[1].y = arw[0].y - gw->g.height/BTN_ARROWHEAD_DIV;
S			arw[1].x = arw[0].x << 1;
S			arw[2].x = arw[0].x + arw[0].x/BTN_ARROWBODY_DIV;
S			arw[4].x = arw[0].x - arw[0].x/BTN_ARROWBODY_DIV;
S			arw[6].x = 0;
S		#endif
S
S		// Fill in the rest from the special points
S		/* arw[0].x set */											/* arw[0].y set */
S		/* arw[1].x set */											/* arw[1].y set */
S		/* arw[2].x set */											arw[2].y = arw[1].y;
S		arw[3].x = arw[2].x;										/* arw[3].y set */
S		/* arw[4].x set */											arw[4].y = arw[3].y;
S		arw[5].x = arw[4].x;										arw[5].y = arw[1].y;
S		/* arw[6].x set */											arw[6].y = arw[1].y;
S
S		// Draw
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		gdispGFillConvexPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->fill);
S		gdispGDrawPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->edge);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S	}
S
S	void gwinButtonDraw_ArrowLeft(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		point				arw[7];
S
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		// Create the arrow polygon
S		arw[0].y = (gw->g.height-1)/2;				// Point center
S		arw[0].x = 0;								// Arrow start
S		arw[3].x = gw->g.width-1;					// Arrow end
S		#if BTN_ARROWHEAD_DIV == 0
S			if (gw->g.width <= arw[0].y) {
S				arw[1].x = arw[3].x;				// End of head
S				arw[1].y = arw[0].y+arw[3].x;		// Width of head  (side 1)
S				arw[2].y = arw[1].y;				// Width of shaft (side 1)
S				arw[4].y = arw[0].y-arw[3].x;		// Width of head  (side 2)
S				arw[6].y = arw[4].y;				// Width of shaft (side 2)
S			} else {
S				arw[1].x = arw[0].y;
S				arw[1].y = arw[0].y << 1;
S				arw[2].y = arw[0].y + arw[0].y/BTN_ARROWBODY_DIV;
S				arw[4].y = arw[0].y - arw[0].y/BTN_ARROWBODY_DIV;
S				arw[6].y = 0;
S			}
S		#else
S			arw[1].x = gw->g.width/BTN_ARROWHEAD_DIV;
S			arw[1].y = arw[0].y << 1;
S			arw[2].y = arw[0].y + arw[0].y/BTN_ARROWBODY_DIV;
S			arw[4].y = arw[0].y - arw[0].y/BTN_ARROWBODY_DIV;
S			arw[6].y = 0;
S		#endif
S
S		// Fill in the rest from the special points
S		/* arw[0].x set */											/* arw[0].y set */
S		/* arw[1].x set */											/* arw[1].y set */
S		arw[2].x = arw[1].x;										/* arw[2].y set */
S		/* arw[3].y set */											arw[3].y = arw[2].y;
S		arw[4].x = arw[3].x;										/* arw[4].y set */
S		arw[5].x = arw[1].x;										arw[5].y = arw[4].y;
S		arw[6].x = arw[1].x;										/* arw[6].y set */
S
S		// Draw
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		gdispGFillConvexPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->fill);
S		gdispGDrawPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->edge);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S	}
S
S	void gwinButtonDraw_ArrowRight(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		point				arw[7];
S		
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		// Create the arrow polygon
S		arw[0].y = (gw->g.height-1)/2;				// Point center
S		arw[0].x = gw->g.width-1;					// Arrow start
S		arw[3].x = 0;								// Arrow end
S		#if BTN_ARROWHEAD_DIV == 0
S			if (gw->g.width <= arw[0].y) {
S				arw[1].x = arw[3].x;				// End of head
S				arw[1].y = arw[0].y+arw[0].x;		// Width of head  (side 1)
S				arw[2].y = arw[1].y;				// Width of shaft (side 1)
S				arw[4].y = arw[0].y-arw[0].x;		// Width of head  (side 2)
S				arw[6].y = arw[4].y;				// Width of shaft (side 2)
S			} else {
S				arw[1].x = arw[0].x - arw[0].y;
S				arw[1].y = arw[0].y << 1;
S				arw[2].y = arw[0].y + arw[0].y/BTN_ARROWBODY_DIV;
S				arw[4].y = arw[0].y - arw[0].y/BTN_ARROWBODY_DIV;
S				arw[6].y = 0;
S			}
S		#else
S			arw[1].x = arw[0].x - gw->g.width/BTN_ARROWHEAD_DIV;
S			arw[1].y = arw[0].y << 1;
S			arw[2].y = arw[0].y + arw[0].y/BTN_ARROWBODY_DIV;
S			arw[4].y = arw[0].y - arw[0].y/BTN_ARROWBODY_DIV;
S			arw[6].y = 0;
S		#endif
S
S		// Fill in the rest from the special points
S		/* arw[0].x set */											/* arw[0].y set */
S		/* arw[1].x set */											/* arw[1].y set */
S		arw[2].x = arw[1].x;										/* arw[2].y set */
S		/* arw[3].y set */											arw[3].y = arw[2].y;
S		arw[4].x = arw[3].x;										/* arw[4].y set */
S		arw[5].x = arw[1].x;										arw[5].y = arw[4].y;
S		arw[6].x = arw[1].x;										/* arw[6].y set */
S
S		// Draw
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S		gdispGFillConvexPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->fill);
S		gdispGDrawPoly(gw->g.display, gw->g.x, gw->g.y, arw, 7, pcol->edge);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S	}
S#endif
S
S#if GDISP_NEED_IMAGE || defined(__DOXYGEN__)
S	void gwinButtonDraw_Image(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		coord_t				sy;
S
S		if (gw->g.vmt != (gwinVMT *)&buttonVMT)	return;
S		pcol = getButtonColors(gw);
S
S		if (!(gw->g.flags & GWIN_FLG_SYSENABLED)) {
S			sy = 2 * gw->g.height;
S		} else if ((gw->g.flags & GBUTTON_FLG_PRESSED)) {
S			sy = gw->g.height;
S		} else {
S			sy = 0;
S		}
S
S		gdispGImageDraw(gw->g.display, (gdispImage *)param, gw->g.x, gw->g.y, gw->g.width, gw->g.height, 0, sy);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S	}
S#endif
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_BUTTON */
L 14 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_slider.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_slider.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_slider.c
N * @brief   GWIN sub-system slider code
N */
N
N#include "../../gfx.h"
N
N#if (GFX_USE_GWIN && GWIN_NEED_SLIDER) || defined(__DOXYGEN__)
X#if (0 && 0) || 0L
S
S#include "gwin_class.h"
S
S// Calculate the slider position from the display position
Sstatic int SliderCalcPosFromDPos(GSliderObject *gsw) {
S	int		halfbit;
S
S	// Set the new position
S	if (gsw->w.g.width < gsw->w.g.height) {
S		if (gsw->dpos >= gsw->w.g.height-GWIN_SLIDER_DEAD_BAND)
S			return gsw->min;
S		if (gsw->dpos < GWIN_SLIDER_DEAD_BAND)
S			return gsw->max;
S		halfbit = gsw->w.g.height/2-GWIN_SLIDER_DEAD_BAND;
S		if (gsw->min > gsw->max)
S			halfbit = -halfbit;
S		return (((int)(gsw->w.g.height-(GWIN_SLIDER_DEAD_BAND+1)-gsw->dpos))*(gsw->max-gsw->min) + halfbit)/(gsw->w.g.height-(2*GWIN_SLIDER_DEAD_BAND+1)) + gsw->min;
S	}
S	if (gsw->dpos >= gsw->w.g.width-GWIN_SLIDER_DEAD_BAND)
S		return gsw->max;
S	if (gsw->dpos < GWIN_SLIDER_DEAD_BAND)
S		return gsw->min;
S	halfbit = gsw->w.g.width/2-GWIN_SLIDER_DEAD_BAND;
S	if (gsw->min > gsw->max)
S		halfbit = -halfbit;
S	return (((int)gsw->dpos-GWIN_SLIDER_DEAD_BAND)*(gsw->max-gsw->min) + halfbit)/(gsw->w.g.width-(2*GWIN_SLIDER_DEAD_BAND+1)) + gsw->min;
S}
S
S// Send the slider event
Sstatic void SendSliderEvent(GSliderObject *gsw, uint8_t action) {
S	GSourceListener	*	psl;
S	GEvent *			pe;
S	#define pse			((GEventGWinSlider *)pe)
S
S	// Does this slider want more than just SET events?
S	if (action != GSLIDER_EVENT_SET && !(gsw->w.g.flags & GSLIDER_FLG_EXTENDED_EVENTS))
S		return;
S
S	psl = 0;
S	while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S		// Work out which action to send.
S		// This precedence order helps provide some protection against missed events.
S		// Saving it into srcflags works regardless of if a buffer is available.
S		if (psl->srcflags < action)
S			psl->srcflags = action;
S
S		// Skip sending if no buffer is available
S		if (!(pe = geventGetEventBuffer(psl)))
S			continue;
S
S		// Fill in the event
S		pse->type = GEVENT_GWIN_SLIDER;
S		pse->gwin = (GHandle)gsw;
S		pse->action = psl->srcflags;
S		#if GWIN_WIDGET_TAGS
S			pse->tag = gsw->w.tag;
S		#endif
S
S		// If it is a cancel or set use the defined position else use the calculated position.
S		pse->position = pse->action >= GSLIDER_EVENT_CANCEL ? gsw->pos : SliderCalcPosFromDPos(gsw);
S
S		// Cleanup and send.
S		psl->srcflags = 0;
S		geventSendEvent(psl);
S	}
S
S	#undef pse
S}
S
S// Reset the display position back to the value predicted by the saved slider position
Sstatic void SliderResetDisplayPos(GSliderObject *gsw) {
S	if (gsw->w.g.width < gsw->w.g.height)
S		gsw->dpos = gsw->w.g.height-1-(gsw->w.g.height-1)*(gsw->pos-gsw->min)/(gsw->max-gsw->min);
S	else
S		gsw->dpos = (gsw->w.g.width-1)*(gsw->pos-gsw->min)/(gsw->max-gsw->min);
S}
S
S#if GINPUT_NEED_MOUSE
S	// Set the display position from the mouse position
S	static void SetDisplayPosFromMouse(GSliderObject *gsw, coord_t x, coord_t y) {
S		if (gsw->w.g.width < gsw->w.g.height)
S			gsw->dpos = y < 0 ? 0 : (y >= gsw->w.g.height ? gsw->w.g.height-1 : y);
S		else
S			gsw->dpos = x < 0 ? 0 : (x >= gsw->w.g.width ? gsw->w.g.width-1 : x);
S	}
S
S	// A mouse up event
S	static void SliderMouseUp(GWidgetObject *gw, coord_t x, coord_t y) {
S		#define gsw		((GSliderObject *)gw)
S
S		#if !GWIN_BUTTON_LAZY_RELEASE
S			// Are we over the slider?
S			if (x < 0 || x >= gsw->w.g.width || y < 0 || y >= gsw->w.g.height) {
S				// No - restore the slider
S				SliderResetDisplayPos(gsw);
S				_gwinUpdate(&gsw->w.g);
S				SendSliderEvent(gsw, GSLIDER_EVENT_CANCEL);
S				return;
S			}
S		#endif
S
S		// Set the new position
S		SetDisplayPosFromMouse(gsw, x, y);
S		gsw->pos = SliderCalcPosFromDPos(gsw);
S
S		// Update the display
S		#if GWIN_SLIDER_NOSNAP
S			//only adjust dpos if it equals one of the end values.
S			if (gsw->w.g.width < gsw->w.g.height) {
S				if (gsw->pos == gsw->min)
S					gsw->dpos = gsw->w.g.height-1;
S				else if (gsw->pos == gsw->max)
S					gsw->dpos = 0;
S			} else {
S				if (gsw->pos == gsw->max)
S					gsw->dpos = gsw->w.g.width-1;
S				else if (gsw->pos == gsw->min)
S					gsw->dpos = 0;
S			}
S		#else
S			SliderResetDisplayPos(gsw);
S		#endif
S		_gwinUpdate(&gsw->w.g);
S
S		// Generate the event
S		SendSliderEvent(gsw, GSLIDER_EVENT_SET);
S
S		#undef gsw
S	}
S
S	// A mouse down event
S	static void SliderMouseDown(GWidgetObject *gw, coord_t x, coord_t y) {
S		#define gsw		((GSliderObject *)gw)
S
S		// Determine the display position
S		SetDisplayPosFromMouse(gsw, x, y);
S
S		// Update the display
S		_gwinUpdate(&gsw->w.g);
S
S		// Send the event
S		SendSliderEvent(gsw, GSLIDER_EVENT_START);
S
S		#undef gsw
S	}
S
S	// A mouse move event
S	static void SliderMouseMove(GWidgetObject *gw, coord_t x, coord_t y) {
S		#define gsw		((GSliderObject *)gw)
S
S		// Determine the display position
S		SetDisplayPosFromMouse(gsw, x, y);
S
S		// Update the display
S		_gwinUpdate(&gsw->w.g);
S
S		// Send the event
S		SendSliderEvent(gsw, GSLIDER_EVENT_MOVE);
S
S		#undef gsw
S	}
S#endif
S
S#if GINPUT_NEED_TOGGLE
S	// A toggle on has occurred
S	static void SliderToggleOn(GWidgetObject *gw, uint16_t role) {
S		#define gsw		((GSliderObject *)gw)
S
S		if (role) {
S			gwinSliderSetPosition(&gsw->w.g, gsw->pos+(gsw->max-gsw->min)/GWIN_SLIDER_TOGGLE_INC);
S			SendSliderEvent(gsw, GSLIDER_EVENT_SET);
S		} else {
S			gwinSliderSetPosition(&gsw->w.g, gsw->pos-(gsw->max-gsw->min)/GWIN_SLIDER_TOGGLE_INC);
S			SendSliderEvent(gsw, GSLIDER_EVENT_SET);
S		}
S		#undef gsw
S	}
S
S	static void SliderToggleAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		if (role)
S			((GSliderObject *)gw)->t_up = instance;
S		else
S			((GSliderObject *)gw)->t_dn = instance;
S	}
S
S	static uint16_t SliderToggleGet(GWidgetObject *gw, uint16_t role) {
S		return role ? ((GSliderObject *)gw)->t_up : ((GSliderObject *)gw)->t_dn;
S	}
S#endif
S
S#if GINPUT_NEED_DIAL
S	// A dial move event
S	static void SliderDialMove(GWidgetObject *gw, uint16_t role, uint16_t value, uint16_t max) {
S		#define gsw		((GSliderObject *)gw)
S		(void)			role;
S
S		// Set the new position
S		gsw->pos = (uint16_t)((uint32_t)value*(gsw->max-gsw->min)/max + gsw->min);
S
S		SliderResetDisplayPos(gsw);
S		_gwinUpdate(&gsw->w.g);
S
S		// Generate the event
S		SendSliderEvent(gsw, GSLIDER_EVENT_SET);
S		#undef gsw
S	}
S
S	static void SliderDialAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		(void) role;
S		((GSliderObject *)gw)->dial = instance;
S	}
S
S	static uint16_t SliderDialGet(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		return ((GSliderObject *)gw)->dial;
S	}
S#endif
S
S// The slider VMT table
Sstatic const gwidgetVMT sliderVMT = {
S	{
S		"Slider",				// The classname
S		sizeof(GSliderObject),	// The object size
S		_gwidgetDestroy,		// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinSliderDraw_Std,			// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			SliderMouseDown,		// Process mouse down events
S			SliderMouseUp,			// Process mouse up events
S			SliderMouseMove,		// Process mouse move events
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			2,						// 1 toggle role
S			SliderToggleAssign,		// Assign Toggles
S			SliderToggleGet,		// Get Toggles
S			0,						// Process toggle off events (NOT USED)
S			SliderToggleOn,			// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			1,						// 1 dial roles
S			SliderDialAssign,		// Assign Dials
S			SliderDialGet,			// Get Dials
S			SliderDialMove,			// Process dial move events
S		},
S	#endif
S};
S
SGHandle gwinGSliderCreate(GDisplay *g, GSliderObject *gs, const GWidgetInit *pInit) {
S	if (!(gs = (GSliderObject *)_gwidgetCreate(g, &gs->w, pInit, &sliderVMT)))
S		return 0;
S	#if GINPUT_NEED_TOGGLE
S		gs->t_dn = GWIDGET_NO_INSTANCE;
S		gs->t_up = GWIDGET_NO_INSTANCE;
S	#endif
S	#if GINPUT_NEED_DIAL
S		gs->dial = GWIDGET_NO_INSTANCE;
S	#endif
S	gs->min = 0;
S	gs->max = 100;
S	gs->pos = 0;
S	SliderResetDisplayPos(gs);
S	gwinSetVisible((GHandle)gs, pInit->g.show);
S	return (GHandle)gs;
S}
S
Svoid gwinSliderSetRange(GHandle gh, int min, int max) {
S	#define gsw		((GSliderObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&sliderVMT)
S		return;
S
S	if (min == max)		// prevent divide by 0 errors.
S		max++;
S	gsw->min = min;
S	gsw->max = max;
S	gsw->pos = min;
S	SliderResetDisplayPos(gsw);
S	#undef gsw
S}
S
Svoid gwinSliderSetPosition(GHandle gh, int pos) {
S	#define gsw		((GSliderObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&sliderVMT)
S		return;
S
S	if (gsw->min <= gsw->max) {
S		if (pos < gsw->min) gsw->pos = gsw->min;
S		else if (pos > gsw->max) gsw->pos = gsw->max;
S		else gsw->pos = pos;
S	} else {
S		if (pos > gsw->min) gsw->pos = gsw->min;
S		else if (pos < gsw->max) gsw->pos = gsw->max;
S		else gsw->pos = pos;
S	}
S	SliderResetDisplayPos(gsw);
S	_gwinUpdate(gh);
S
S	#undef gsw
S}
S
Svoid gwinSliderSendExtendedEvents(GHandle gh, bool_t enabled) {
S	if (gh->vmt != (gwinVMT *)&sliderVMT)
S		return;
S
S	if (enabled)
S		gh->flags |= GSLIDER_FLG_EXTENDED_EVENTS;
S	else
S		gh->flags &= ~GSLIDER_FLG_EXTENDED_EVENTS;
S}
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
Svoid gwinSliderDraw_Std(GWidgetObject *gw, void *param) {
S	#define gsw			((GSliderObject *)gw)
S	const GColorSet *	pcol;
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&sliderVMT)
S		return;
S
S	if ((gw->g.flags & GWIN_FLG_SYSENABLED))
S		pcol = &gw->pstyle->enabled;
S	else
S		pcol = &gw->pstyle->disabled;
S
S	// Vertical slider
S	if (gw->g.width < gw->g.height) {
S		if (gsw->dpos != gw->g.height-1)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y+gsw->dpos, gw->g.width, gw->g.height - gsw->dpos, pcol->progress);		// Active area
S		if (gsw->dpos != 0)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gsw->dpos, pcol->fill);									// Inactive area
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);										// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gsw->dpos, gw->g.x+gw->g.width-1, gw->g.y+gsw->dpos, pcol->edge);			// Thumb
S		if (gsw->dpos >= 2)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gsw->dpos-2, gw->g.x+gw->g.width-1, gw->g.y+gsw->dpos-2, pcol->edge);	// Thumb
S		if (gsw->dpos <= gw->g.height-2)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gsw->dpos+2, gw->g.x+gw->g.width-1, gw->g.y+gsw->dpos+2, pcol->edge);	// Thumb
S
S	// Horizontal slider
S	} else {
S		if (gsw->dpos != gw->g.width-1)
S			gdispGFillArea(gw->g.display, gw->g.x+gsw->dpos, gw->g.y, gw->g.width-gsw->dpos, gw->g.height, pcol->fill);				// Inactive area
S		if (gsw->dpos != 0)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gsw->dpos, gw->g.height, pcol->progress);								// Active area
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);										// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos, gw->g.y, gw->g.x+gsw->dpos, gw->g.y+gw->g.height-1, pcol->edge);			// Thumb
S		if (gsw->dpos >= 2)
S			gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos-2, gw->g.y, gw->g.x+gsw->dpos-2, gw->g.y+gw->g.height-1, pcol->edge);	// Thumb
S		if (gsw->dpos <= gw->g.width-2)
S			gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos+2, gw->g.y, gw->g.x+gsw->dpos+2, gw->g.y+gw->g.height-1, pcol->edge);	// Thumb
S	}
S
S	// Draw the string
S	gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S
S	#undef gsw
S}
S
S#if GDISP_NEED_IMAGE
Svoid gwinSliderDraw_Image(GWidgetObject *gw, void *param) {
S	#define gsw			((GSliderObject *)gw)
S	#define gi			((gdispImage *)param)
S	const GColorSet *	pcol;
S	coord_t				z, v;
S
S	if (gw->g.vmt != (gwinVMT *)&sliderVMT)
S		return;
S
S	if ((gw->g.flags & GWIN_FLG_SYSENABLED))
S		pcol = &gw->pstyle->enabled;
S	else
S		pcol = &gw->pstyle->disabled;
S
S	if (gw->g.width < gw->g.height) {			// Vertical slider
S		if (gsw->dpos != 0)							// The unfilled area
S			gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gsw->dpos-1, gw->pstyle->enabled.progress);	// Inactive area
S		if (gsw->dpos != gw->g.height-1) {			// The filled area
S			for(z=gw->g.height, v=gi->height; z > gsw->dpos;) {
S				z -= v;
S				if (z < gsw->dpos) {
S					v -= gsw->dpos - z;
S					z = gsw->dpos;
S				}
S				gdispGImageDraw(gw->g.display, gi, gw->g.x+1, gw->g.y+z+1, gw->g.width-1, v-2, 0, gi->height-v);
S			}
S		}
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);								// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+1, gw->g.y+gsw->dpos, gw->g.x+gw->g.width-2, gw->g.y+gsw->dpos, pcol->edge);	// Thumb
S
S	// Horizontal slider
S	} else {
S		if (gsw->dpos != gw->g.width-1)				// The unfilled area
S			gdispGFillArea(gw->g.display, gw->g.x+gsw->dpos+1, gw->g.y+1, gw->g.width-gsw->dpos-2, gw->g.height-2, gw->pstyle->enabled.progress);	// Inactive area
S		if (gsw->dpos != 0) {						// The filled area
S			for(z=0, v=gi->width; z < gsw->dpos; z += v) {
S				if (z+v > gsw->dpos)
S					v -= z+v - gsw->dpos;
S				gdispGImageDraw(gw->g.display, gi, gw->g.x+z+1, gw->g.y+1, v-1, gw->g.height-2, 0, 0);
S			}
S		}
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);								// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos, gw->g.y+1, gw->g.x+gsw->dpos, gw->g.y+gw->g.height-2, pcol->edge);	// Thumb
S	}
S	gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S
S	#undef gsw
S	#undef gi
S}
S#endif /* GDISP_NEED_IMAGE */
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_BUTTON */
L 15 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_checkbox.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_checkbox.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_checkbox.c
N * @brief   GWIN sub-system button code
N */
N
N#include "../../gfx.h"
N
N#if (GFX_USE_GWIN && GWIN_NEED_CHECKBOX) || defined(__DOXYGEN__)
X#if (0 && 0) || 0L
S
S#include "gwin_class.h"
S
S// Parameters for button custom draw
S#define CHK_TOP_FADE			50		// (CHK_TOP_FADE/255)% fade to white for top of button
S#define CHK_BOTTOM_FADE			25		// (CHK_BOTTOM_FADE/255)% fade to black for bottom of button
S
S// Send the checkbox event
Sstatic void SendCheckboxEvent(GWidgetObject *gw) {
S	GSourceListener	*	psl;
S	GEvent *			pe;
S	#define pce			((GEventGWinCheckbox *)pe)
S
S	// Trigger a GWIN Checkbox Event
S	psl = 0;
S	while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S		if (!(pe = geventGetEventBuffer(psl)))
S			continue;
S		pce->type = GEVENT_GWIN_CHECKBOX;
S		pce->gwin = &gw->g;
S		pce->isChecked = (gw->g.flags & GCHECKBOX_FLG_CHECKED) ? TRUE : FALSE;
S		#if GWIN_WIDGET_TAGS
S			pce->tag = gw->tag;
S		#endif
S		geventSendEvent(psl);
S	}
S
S	#undef pce
S}
S
S#if GINPUT_NEED_MOUSE
S	static void CheckboxMouseDown(GWidgetObject *gw, coord_t x, coord_t y) {
S		(void) x; (void) y;
S		gw->g.flags ^= GCHECKBOX_FLG_CHECKED;
S		_gwinUpdate((GHandle)gw);
S		SendCheckboxEvent(gw);
S	}
S#endif
S
S#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S	static void CheckboxKeyboard(GWidgetObject* gw, GEventKeyboard* pke)
S	{
S		// Only react on KEYDOWN events. Ignore KEYUP events.
S		if (pke->keystate & GKEYSTATE_KEYUP) {
S			return;
S		}
S
S		// ENTER and SPACE keys to check/uncheck the checkbox
S		if (pke->c[0] == GKEY_ENTER || pke->c[0] == GKEY_SPACE) {
S			gw->g.flags ^= GCHECKBOX_FLG_CHECKED;
S		}
S
S		_gwinUpdate((GHandle)gw);
S	}
S#endif
S
S#if GINPUT_NEED_TOGGLE
S	static void CheckboxToggleOn(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		gw->g.flags ^= GCHECKBOX_FLG_CHECKED;
S		_gwinUpdate((GHandle)gw);
S		SendCheckboxEvent(gw);
S	}
S
S	static void CheckboxToggleAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		(void) role;
S		((GCheckboxObject *)gw)->toggle = instance;
S	}
S
S	static uint16_t CheckboxToggleGet(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		return ((GCheckboxObject *)gw)->toggle;
S	}
S#endif
S
S// The checkbox VMT table
Sstatic const gwidgetVMT checkboxVMT = {
S	{
S		"Checkbox",				// The classname
S		sizeof(GCheckboxObject),// The object size
S		_gwidgetDestroy,		// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinCheckboxDraw_CheckOnLeft,	// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			CheckboxMouseDown,		// Process mouse down events
S			0,						// Process mouse up events (NOT USED)
S			0,						// Process mouse move events (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			CheckboxKeyboard		// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			1,						// 1 toggle role
S			CheckboxToggleAssign,	// Assign Toggles
S			CheckboxToggleGet,		// Get Toggles
S			0,						// Process toggle off events (NOT USED)
S			CheckboxToggleOn,		// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0,						// Get Dials (NOT USED)
S			0,						// Process dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGCheckboxCreate(GDisplay *g, GCheckboxObject *gb, const GWidgetInit *pInit) {
S	if (!(gb = (GCheckboxObject *)_gwidgetCreate(g, &gb->w, pInit, &checkboxVMT)))
S		return 0;
S
S	#if GINPUT_NEED_TOGGLE
S		gb->toggle = GWIDGET_NO_INSTANCE;
S	#endif
S	gwinSetVisible((GHandle)gb, pInit->g.show);
S	return (GHandle)gb;
S}
S
Svoid gwinCheckboxCheck(GHandle gh, bool_t isChecked) {
S	if (gh->vmt != (gwinVMT *)&checkboxVMT)
S		return;
S
S	if (isChecked) {
S		if ((gh->flags & GCHECKBOX_FLG_CHECKED)) return;
S		gh->flags |= GCHECKBOX_FLG_CHECKED;
S	} else {
S		if (!(gh->flags & GCHECKBOX_FLG_CHECKED)) return;
S		gh->flags &= ~GCHECKBOX_FLG_CHECKED;
S	}
S	_gwinUpdate(gh);
S	SendCheckboxEvent((GWidgetObject *)gh);
S}
S
Sbool_t gwinCheckboxIsChecked(GHandle gh) {
S	if (gh->vmt != (gwinVMT *)&checkboxVMT)
S		return FALSE;
S
S	return (gh->flags & GCHECKBOX_FLG_CHECKED) ? TRUE : FALSE;
S}
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
Sstatic const GColorSet *getCheckboxColors(GWidgetObject *gw) {
S	if (!(gw->g.flags & GWIN_FLG_SYSENABLED))	return &gw->pstyle->disabled;
S	if ((gw->g.flags & GCHECKBOX_FLG_CHECKED))	return &gw->pstyle->pressed;
S	return &gw->pstyle->enabled;
S}
S
Svoid gwinCheckboxDraw_CheckOnLeft(GWidgetObject *gw, void *param) {
S	#define gcw			((GCheckboxObject *)gw)
S	coord_t				ld, df;
S	const GColorSet *	pcol;
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&checkboxVMT) return;
S	pcol = getCheckboxColors(gw);
S
S	// Get the dimension of the check box (sans text)
S	ld = gw->g.width < gw->g.height ? gw->g.width : gw->g.height;
S
S	// Draw the empty check box
S	gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+1, ld, ld-2, gw->pstyle->background);
S	gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, ld, ld, pcol->edge);
S
S	// Draw the check
S	df = ld < 4 ? 1 : 2;
S	if (gw->g.flags & GCHECKBOX_FLG_CHECKED)
S		gdispGFillArea(gw->g.display, gw->g.x+df, gw->g.y+df, ld-2*df, ld-2*df, pcol->fill);
S
S	// Render highlighted border if focused
S	_gwidgetDrawFocusRect(gw, 1, 1, ld-2, ld-2);
S
S	// Draw the text
S	gdispGFillStringBox(gw->g.display, gw->g.x+ld+1, gw->g.y, gw->g.width-ld-1, gw->g.height, gw->text, gw->g.font, pcol->text, gw->pstyle->background, justifyLeft);
S	#undef gcw
S}
S
Svoid gwinCheckboxDraw_CheckOnRight(GWidgetObject *gw, void *param) {
S	#define gcw			((GCheckboxObject *)gw)
S	coord_t				ep, ld, df;
S	const GColorSet *	pcol;
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&checkboxVMT) return;
S	pcol = getCheckboxColors(gw);
S
S	// Get the dimension of the check box (sans text)
S	ld = gw->g.width < gw->g.height ? gw->g.width : gw->g.height;
S
S	// Get the position of the check box
S	ep = gw->g.width-ld;
S
S	// Draw the empty check box
S	gdispGFillArea(gw->g.display, gw->g.x+ep-1, gw->g.y+1, ld, ld-2, gw->pstyle->background);
S	gdispGDrawBox(gw->g.display, gw->g.x+ep, gw->g.y, ld, ld, pcol->edge);
S
S	// Draw the check
S	df = ld < 4 ? 1 : 2;
S	if (gw->g.flags & GCHECKBOX_FLG_CHECKED)
S		gdispGFillArea(gw->g.display, gw->g.x+ep+df, gw->g.y+df, ld-2*df, ld-2*df, pcol->fill);
S
S	// Render highlighted border if focused
S	_gwidgetDrawFocusRect(gw, ep+1, 1, ld-2, ld-2);
S
S	// Draw the text
S	gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, ep-1, gw->g.height, gw->text, gw->g.font, pcol->text, gw->pstyle->background, justifyRight);
S	#undef gcw
S}
S
S#if GWIN_FLAT_STYLING
S	void gwinCheckboxDraw_Button(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&checkboxVMT)	return;
S		pcol = getCheckboxColors(gw);
S
S		#if GWIN_NEED_FLASHING
S			// Flash the on and off state.
S			pcol = _gwinGetFlashedColor(gw, pcol, TRUE);
S		#endif
S
S		gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S	}
S#else
S	void gwinCheckboxDraw_Button(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		fixed				alpha;
S		fixed				dalpha;
S		coord_t				i;
S		color_t				tcol, bcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&checkboxVMT)	return;
S		pcol = getCheckboxColors(gw);
S
S		#if GWIN_NEED_FLASHING
S			// Flash the on and off state.
S			pcol = _gwinGetFlashedColor(gw, pcol, TRUE);
S		#endif
S
S		/* Fill the box blended from variants of the fill color */
S		tcol = gdispBlendColor(White, pcol->fill, CHK_TOP_FADE);
S		bcol = gdispBlendColor(Black, pcol->fill, CHK_BOTTOM_FADE);
S		dalpha = FIXED(255)/gw->g.height;
S		for(alpha = 0, i = 0; i < gw->g.height; i++, alpha += dalpha)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+i, gw->g.x+gw->g.width-2, gw->g.y+i, gdispBlendColor(bcol, tcol, NONFIXED(alpha)));
S
S		gdispGDrawStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S	}
S#endif
S
N#endif /* (GFX_USE_GWIN && GWIN_NEED_CHECKBOX) */
L 16 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_image.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_image.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file	src/gwin/gwin_image.c
N * @brief	GWIN sub-system image code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_IMAGE
X#if 0 && 0
S
S#include "gwin_class.h"
S
S#define gw	((GImageObject *)gh)
S
Sstatic void ImageDestroy(GWindowObject *gh) {
S	if (gdispImageIsOpen(&gw->image))
S		gdispImageClose(&gw->image);
S}
S
S#if GWIN_NEED_IMAGE_ANIMATION
S	static void ImageTimer(void *param) {
S		_gwinUpdate((GHandle)param);
S	}
S#endif
S
Sstatic void ImageRedraw(GHandle gh) {
S	coord_t		x, y, w, h, dx, dy;
S	color_t		bg;
S	#if GWIN_NEED_IMAGE_ANIMATION
S		delaytime_t	delay;
S	#endif
S
S	// The default display area
S	dx = 0;
S	dy = 0;
S	x = gh->x;
S	y = gh->y;
S	w = gh->width;
S	h = gh->height;
S	bg = gwinGetDefaultBgColor();
S
S	// If the image isn't open just clear the area
S	if (!gdispImageIsOpen(&gw->image)) {
S		gdispGFillArea(gh->display, x, y, w, h, bg);
S		return;
S	}
S
S	// Center horizontally if the area is larger than the image
S	if (gw->image.width < w) {
S		w = gw->image.width;
S		dx = (gh->width-w)/2;
S		x += dx;
S		if (dx)
S			gdispGFillArea(gh->display, gh->x, y, dx, h, bg);
S		gdispGFillArea(gh->display, x+w, y, gh->width-dx-w, h, bg);
S		dx = 0;
S	}
S
S	// Center image horizontally if the area is smaller than the image
S	else if (gw->image.width > w) {
S		dx = (gw->image.width - w)/2;
S	}
S
S	// Center vertically if the area is larger than the image
S	if (gw->image.height < h) {
S		h = gw->image.height;
S		dy = (gh->height-h)/2;
S		y += dy;
S		if (dy)
S			gdispGFillArea(gh->display, x, gh->y, w, dy, bg);
S		gdispGFillArea(gh->display, x, y+h, w, gh->height-dy-h, bg);
S		dy = 0;
S	}
S
S	// Center image vertically if the area is smaller than the image
S	else if (gw->image.height > h) {
S		dy = (gw->image.height - h)/2;
S	}
S
S	// Reset the background color in case it has changed
S	gdispImageSetBgColor(&gw->image, bg);
S
S	// Display the image
S	gdispGImageDraw(gh->display, &gw->image, x, y, w, h, dx, dy);
S
S	#if GWIN_NEED_IMAGE_ANIMATION
S		// read the delay for the next frame
S		delay = gdispImageNext(&gw->image);
S
S		// Wait for that delay if required
S		switch(delay) {
S		case TIME_INFINITE:
S			// Everything is done
S			break;
S		case TIME_IMMEDIATE:
S			// We can't allow a continuous loop here as it would lock the system up so we delay for the minimum period
S			delay = 1;
S			// Fall through
S		default:
S			// Start the timer to draw the next frame of the animation
S			gtimerStart(&gw->timer, ImageTimer, (void*)gh, FALSE, delay);
S			break;
S		}
S	#endif
S}
S
Sstatic const gwinVMT imageVMT = {
S	"Image",					// The class name
S	sizeof(GImageObject),		// The object size
S	ImageDestroy,				// The destroy routine
S	ImageRedraw,				// The redraw routine
S	0,							// The after-clear routine
S};
S
SGHandle gwinGImageCreate(GDisplay *g, GImageObject *gobj, GWindowInit *pInit) {
S	if (!(gobj = (GImageObject *)_gwindowCreate(g, &gobj->g, pInit, &imageVMT, 0)))
S		return 0;
S
S	// Ensure the gdispImageIsOpen() gives valid results
S	gdispImageInit(&gobj->image);
S
S	// Initialise the timer
S	#if GWIN_NEED_IMAGE_ANIMATION
S		gtimerInit(&gobj->timer);
S	#endif
S	
S	gwinSetVisible((GHandle)gobj, pInit->show);
S
S	return (GHandle)gobj;
S}
S
Sbool_t gwinImageOpenGFile(GHandle gh, GFILE *f) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&imageVMT)
S		return FALSE;
S
S	if (gdispImageIsOpen(&gw->image))
S		gdispImageClose(&gw->image);
S
S	if ((gdispImageOpenGFile(&gw->image, f) & GDISP_IMAGE_ERR_UNRECOVERABLE))
S		return FALSE;
S
S	_gwinUpdate(gh);
S
S	return TRUE;
S}
S
SgdispImageError gwinImageCache(GHandle gh) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&imageVMT)
S		return GDISP_IMAGE_ERR_BADFORMAT;
S
S	return gdispImageCache(&gw->image);
S}
S
S#undef gw
N#endif // GFX_USE_GWIN && GWIN_NEED_IMAGE
L 17 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_label.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_label.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file	src/gwin/gwin_label.c
N * @brief	GWIN label widget header file
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_LABEL
X#if 0 && 0
S
S#include "gwin_class.h"
S
S// macros to assist in data type conversions
S#define gh2obj					((GLabelObject *)gh)
S#define gw2obj					((GLabelObject *)gw)
S
S// simple: single line with no wrapping
Sstatic coord_t getwidth(const char *text, font_t font, coord_t maxwidth) {
S	(void) maxwidth;
S
S	return gdispGetStringWidth(text, font)+2;		// Allow one pixel of padding on each side
S}
S
S// simple: single line with no wrapping
Sstatic coord_t getheight(const char *text, font_t font, coord_t maxwidth) {
S	(void) text;
S	(void) maxwidth;
S
S	return gdispGetFontMetric(font, fontHeight);
S}
S
Sstatic const gwidgetVMT labelVMT = {
S	{
S		"Label",					// The class name
S		sizeof(GLabelObject),		// The object size
S		_gwidgetDestroy,			// The destroy routine
S		_gwidgetRedraw, 			// The redraw routine
S		0,							// The after-clear routine
S	},
S	gwinLabelDrawJustifiedLeft,		// default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			0,						// Process mose down events (NOT USED)
S			0,						// Process mouse up events (NOT USED)
S			0,						// Process mouse move events (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard key down events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			0,						// No toggle role
S			0,						// Assign Toggles (NOT USED)
S			0,						// Get Toggles (NOT USED)
S			0,						// Process toggle off event (NOT USED)
S			0,						// Process toggle on event (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0, 						// Get Dials (NOT USED)
S			0,						// Procees dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGLabelCreate(GDisplay *g, GLabelObject *widget, GWidgetInit *pInit) {
S	uint16_t flags = 0;
S
S	// auto assign width
S	if (pInit->g.width <= 0) {
S
S		flags |= GLABEL_FLG_WAUTO;
S		pInit->g.width = getwidth(pInit->text, gwinGetDefaultFont(), gdispGGetWidth(g) - pInit->g.x);
S	}
S 
S	// auto assign height
S	if (pInit->g.height <= 0) {
S		flags |= GLABEL_FLG_HAUTO;
S		pInit->g.height = getheight(pInit->text, gwinGetDefaultFont(), gdispGGetWidth(g) - pInit->g.x);
S	}
S
S	if (!(widget = (GLabelObject *)_gwidgetCreate(g, &widget->w, pInit, &labelVMT)))
S		return 0;
S
S	#if GWIN_LABEL_ATTRIBUTE
S		widget->tab = 0;
S		widget->attr = 0;
S	#endif
S
S	widget->w.g.flags |= flags;	
S	gwinSetVisible(&widget->w.g, pInit->g.show);
S
S	return (GHandle)widget;
S}
S
Svoid gwinLabelSetBorder(GHandle gh, bool_t border) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&labelVMT)
S		return;
S	
S	if (border)
S		gh2obj->w.g.flags |= GLABEL_FLG_BORDER;
S	else
S		gh2obj->w.g.flags &=~ GLABEL_FLG_BORDER;
S}
S
S#if GWIN_LABEL_ATTRIBUTE
S	void gwinLabelSetAttribute(GHandle gh, coord_t tab, const char* attr) {
S		// is it a valid handle?
S		if (gh->vmt != (gwinVMT *)&labelVMT)
S			return;
S	
S		gh2obj->tab = tab;
S		gh2obj->attr = attr;
S
S		gwinRedraw(gh); 
S	}
S#endif // GWIN_LABEL_ATTRIBUTE
S
Sstatic void gwinLabelDraw(GWidgetObject *gw, justify_t justify) {
S	coord_t				w, h;
S	color_t				c;
S
S	// is it a valid handle?
S	if (gw->g.vmt != (gwinVMT *)&labelVMT)
S		return;
S
S	w = (gw->g.flags & GLABEL_FLG_WAUTO) ? getwidth(gw->text, gw->g.font, gdispGGetWidth(gw->g.display) - gw->g.x) : gw->g.width;
S	h = (gw->g.flags & GLABEL_FLG_HAUTO) ? getheight(gw->text, gw->g.font, gdispGGetWidth(gw->g.display) - gw->g.x) : gw->g.height;
S	c = (gw->g.flags & GWIN_FLG_SYSENABLED) ? gw->pstyle->enabled.text : gw->pstyle->disabled.text;
S
S	if (gw->g.width != w || gw->g.height != h) {
S		/* Only allow the widget to be resize if it will grow larger.
S		 * Growing smaller is problematic because it requires a temporary change in visibility.
S		 * This is a work-around for a crashing bug caused by calling gwinResize() in the draw function
S		 * (dubious) as it may try to reclaim the drawing lock.
S		 */
S		if (gw->g.width < w || gw->g.height < h) {
S			gwinResize(&gw->g, (w > gw->g.width ? w : gw->g.width), (h > gw->g.height ? h : gw->g.height));
S			return;
S		}
S		w = gw->g.width;
S		h = gw->g.height;
S	}
S
S	#if GWIN_LABEL_ATTRIBUTE
S		if (gw2obj->attr) {
S			gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw2obj->tab, h, gw2obj->attr, gw->g.font, c, gw->pstyle->background, justify);
S			gdispGFillStringBox(gw->g.display, gw->g.x + gw2obj->tab, gw->g.y, w-gw2obj->tab, h, gw->text, gw->g.font, c, gw->pstyle->background, justify);
S		} else
S			gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, w, h, gw->text, gw->g.font, c, gw->pstyle->background, justify);
S	#else
S		gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, w, h, gw->text, gw->g.font, c, gw->pstyle->background, justify);
S	#endif
S
S	// render the border (if any)
S	if (gw->g.flags & GLABEL_FLG_BORDER)
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, w, h, (gw->g.flags & GWIN_FLG_SYSENABLED) ? gw->pstyle->enabled.edge : gw->pstyle->disabled.edge);
S}
S
Svoid gwinLabelDrawJustifiedLeft(GWidgetObject *gw, void *param) {
S	(void)param;
S	
S	gwinLabelDraw(gw, justifyLeft);
S}
S
Svoid gwinLabelDrawJustifiedRight(GWidgetObject *gw, void *param) {
S	(void)param;
S	
S	gwinLabelDraw(gw, justifyRight);
S}
S
Svoid gwinLabelDrawJustifiedCenter(GWidgetObject *gw, void *param) {
S	(void)param;
S	
S	gwinLabelDraw(gw, justifyCenter);
S}
S
S#undef gh2obj
S#undef gw2obj
N#endif // GFX_USE_GWIN && GFX_NEED_LABEL
L 18 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_radio.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_radio.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_radio.c
N * @brief   GWIN sub-system radio button code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_RADIO
X#if 0 && 0
S
S#include "gwin_class.h"
S
S#define GRADIO_TAB_CNR			8		// Diagonal corner on active tab
S#define GRADIO_TOP_FADE			50		// (GRADIO_TOP_FADE/255)% fade to white for top of tab/button
S#define GRADIO_BOTTOM_FADE		25		// (GRADIO_BOTTOM_FADE/255)% fade to black for bottom of tab/button
S#define GRADIO_OUTLINE_FADE		128		// (GRADIO_OUTLINE_FADE/255)% fade to background for active tab edge
S
S// Send the button event
Sstatic void SendRadioEvent(GWidgetObject *gw) {
S	GSourceListener	*	psl;
S	GEvent *			pe;
S	#define pbe			((GEventGWinRadio *)pe)
S
S	// Trigger a GWIN Button Event
S	psl = 0;
S	while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S		if (!(pe = geventGetEventBuffer(psl)))
S			continue;
S		pbe->type = GEVENT_GWIN_RADIO;
S		pbe->gwin = (GHandle)gw;
S		pbe->group = ((GRadioObject *)gw)->group;
S		#if GWIN_WIDGET_TAGS
S			pbe->tag = gw->tag;
S		#endif
S		geventSendEvent(psl);
S	}
S
S	#undef pbe
S}
S
S#if GINPUT_NEED_MOUSE
S	// A mouse down has occurred over the button
S	static void RadioMouseDown(GWidgetObject *gw, coord_t x, coord_t y) {
S		(void) x; (void) y;
S
S		gwinRadioPress((GHandle)gw);
S	}
S#endif
S
S#if GINPUT_NEED_TOGGLE
S	// A toggle on has occurred
S	static void RadioToggleOn(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S
S		gwinRadioPress((GHandle)gw);
S	}
S
S	static void RadioToggleAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		(void) role;
S		((GRadioObject *)gw)->toggle = instance;
S	}
S
S	static uint16_t RadioToggleGet(GWidgetObject *gw, uint16_t role) {
S		(void) role;
S		return ((GRadioObject *)gw)->toggle;
S	}
S#endif
S
S// The radio button VMT table
Sstatic const gwidgetVMT radioVMT = {
S	{
S		"Radio",				// The classname
S		sizeof(GRadioObject),	// The object size
S		_gwidgetDestroy,		// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinRadioDraw_Radio,		// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			RadioMouseDown,			// Process mouse down events
S			0,						// Process mouse up events (NOT USED)
S			0,						// Process mouse move events (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			1,						// 1 toggle role
S			RadioToggleAssign,		// Assign Toggles
S			RadioToggleGet,			// Get Toggles
S			0,						// Process toggle off events (NOT USED)
S			RadioToggleOn,				// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0,						// Get Dials (NOT USED)
S			0,						// Process dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGRadioCreate(GDisplay *g, GRadioObject *gw, const GWidgetInit *pInit, uint16_t group) {
S	if (!(gw = (GRadioObject *)_gwidgetCreate(g, &gw->w, pInit, &radioVMT)))
S		return 0;
S
S	#if GINPUT_NEED_TOGGLE
S		gw->toggle = GWIDGET_NO_INSTANCE;
S	#endif
S	gw->group = group;
S	gwinSetVisible((GHandle)gw, pInit->g.show);
S	return (GHandle)gw;
S}
S
Svoid gwinRadioPress(GHandle gh) {
S	GHandle		gx;
S
S	if (gh->vmt != (gwinVMT *)&radioVMT || (gh->flags & GRADIO_FLG_PRESSED))
S		return;
S
S	if ((gx = gwinRadioGetActive(((GRadioObject *)gh)->group))) {
S		gx->flags &= ~GRADIO_FLG_PRESSED;
S		_gwinUpdate(gx);
S	}
S	gh->flags |= GRADIO_FLG_PRESSED;
S	_gwinUpdate(gh);
S	SendRadioEvent((GWidgetObject *)gh);
S}
S
Sbool_t gwinRadioIsPressed(GHandle gh) {
S	if (gh->vmt != (gwinVMT *)&radioVMT)
S		return FALSE;
S
S	return (gh->flags & GRADIO_FLG_PRESSED) ? TRUE : FALSE;
S}
S
SGHandle gwinRadioGetActive(uint16_t group) {
S	GHandle		gh;
S
S	for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
S		if (gh->vmt == (gwinVMT *)&radioVMT && ((GRadioObject *)gh)->group == group && (gh->flags & GRADIO_FLG_PRESSED))
S			return gh;
S	}
S	return 0;
S}
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
Sstatic const GColorSet *getDrawColors(GWidgetObject *gw) {
S	if (!(gw->g.flags & GWIN_FLG_SYSENABLED))	return &gw->pstyle->disabled;
S	if ((gw->g.flags & GRADIO_FLG_PRESSED))	return &gw->pstyle->pressed;
S	return &gw->pstyle->enabled;
S}
S
Svoid gwinRadioDraw_Radio(GWidgetObject *gw, void *param) {
S	#define gcw			((GRadioObject *)gw)
S	coord_t				ld, df;
S	const GColorSet *	pcol;
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&radioVMT) return;
S	pcol = getDrawColors(gw);
S
S	ld = gw->g.width < gw->g.height ? gw->g.width : gw->g.height;
S
S	#if GDISP_NEED_CIRCLE
S		df = (ld-1)/2;
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, ld, ld, gw->pstyle->background);
S		gdispGDrawCircle(gw->g.display, gw->g.x+df, gw->g.y+df, df, pcol->edge);
S
S		if (gw->g.flags & GRADIO_FLG_PRESSED)
S			gdispGFillCircle(gw->g.display, gw->g.x+df, gw->g.y+df, df <= 2 ? 1 : (df-2), pcol->fill);
S	#else
S		gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+1, ld, ld-2, gw->pstyle->background);
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, ld, ld, pcol->edge);
S
S		df = ld < 4 ? 1 : 2;
S		if (gw->g.flags & GRADIO_FLG_PRESSED)
S			gdispGFillArea(gw->g.display, gw->g.x+df, gw->g.y+df, ld-2*df, ld-2*df, pcol->fill);
S	#endif
S
S	gdispGFillStringBox(gw->g.display, gw->g.x+ld+1, gw->g.y, gw->g.width-ld-1, gw->g.height, gw->text, gw->g.font, pcol->text, gw->pstyle->background, justifyLeft);
S	#undef gcw
S}
S
S#if GWIN_FLAT_STYLING
S	void gwinRadioDraw_Button(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&radioVMT) return;
S		pcol = getDrawColors(gw);
S
S		#if GWIN_NEED_FLASHING
S			// Flash only the on state.
S			pcol = _gwinGetFlashedColor(gw, pcol, FALSE);
S		#endif
S
S		gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S	}
S	void gwinRadioDraw_Tab(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&radioVMT)	return;
S		pcol = getDrawColors(gw);
S
S		#if GWIN_NEED_FLASHING
S			// Flash only the on state.
S			pcol = _gwinGetFlashedColor(gw, pcol, FALSE);
S		#endif
S
S		if ((gw->g.flags & GRADIO_FLG_PRESSED)) {
S			gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);
S			gdispGFillStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-1, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S		} else {
S			gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S			gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S		}
S	}
S#else
S	void gwinRadioDraw_Button(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		fixed				alpha;
S		fixed				dalpha;
S		coord_t				i;
S		color_t				tcol, bcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&radioVMT) return;
S		pcol = getDrawColors(gw);
S	
S		/* Fill the box blended from variants of the fill color */
S		tcol = gdispBlendColor(White, pcol->fill, GRADIO_TOP_FADE);
S		bcol = gdispBlendColor(Black, pcol->fill, GRADIO_BOTTOM_FADE);
S		dalpha = FIXED(255)/gw->g.height;
S		for(alpha = 0, i = 0; i < gw->g.height; i++, alpha += dalpha)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+i, gw->g.x+gw->g.width-2, gw->g.y+i, gdispBlendColor(bcol, tcol, NONFIXED(alpha)));
S
S		gdispGDrawStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width-1, gw->g.height-1, gw->text, gw->g.font, pcol->text, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gw->g.height-1, gw->g.x+gw->g.width-2, gw->g.y+gw->g.height-1, pcol->edge);
S	}
S	void gwinRadioDraw_Tab(GWidgetObject *gw, void *param) {
S		const GColorSet *	pcol;
S		fixed				alpha;
S		fixed				dalpha;
S		coord_t				i;
S		color_t				tcol, bcol;
S		(void)				param;
S
S		if (gw->g.vmt != (gwinVMT *)&radioVMT)	return;
S		pcol = getDrawColors(gw);
S
S		if ((gw->g.flags & GRADIO_FLG_PRESSED)) {
S			tcol = gdispBlendColor(pcol->edge, gw->pstyle->background, GRADIO_OUTLINE_FADE);
S			gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->text, gw->g.font, pcol->text, gw->g.bgcolor, justifyCenter);
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y, gw->g.x+gw->g.width-(GRADIO_TAB_CNR+1), gw->g.y, tcol);
S			gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-(GRADIO_TAB_CNR+1), gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+GRADIO_TAB_CNR, tcol);
S			gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y+GRADIO_TAB_CNR, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, tcol);
S		} else {
S			/* Fill the box blended from variants of the fill color */
S			tcol = gdispBlendColor(White, pcol->fill, GRADIO_TOP_FADE);
S			bcol = gdispBlendColor(Black, pcol->fill, GRADIO_BOTTOM_FADE);
S			dalpha = FIXED(255)/gw->g.height;
S			for(alpha = 0, i = 0; i < gw->g.height; i++, alpha += dalpha)
S				gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+i, gw->g.x+gw->g.width-2, gw->g.y+i, gdispBlendColor(bcol, tcol, NONFIXED(alpha)));
S			gdispGDrawLine(gw->g.display, gw->g.x+gw->g.width-1, gw->g.y, gw->g.x+gw->g.width-1, gw->g.y+gw->g.height-1, pcol->edge);
S			gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S		}
S	}
S#endif
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_BUTTON */
L 19 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_list.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_list.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file	src/gwin/gwin_list.c
N * @brief	GWIN list widget header file
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_LIST
X#if 0 && 0
S
S#include "gwin_class.h"
S#include <string.h>
S#include <stdlib.h>
S
S// user for the default drawing routine
S#define LST_SCROLLWIDTH		16	// the border from the scroll buttons to the frame
S#define LST_ARROW_SZ		10	// arrow side length
S#define LST_HORIZ_PAD		5	// extra horizontal padding for text
S#define LST_VERT_PAD		2	// extra vertical padding for text
S
S// Macro's to assist in data type conversions
S#define gh2obj		((GListObject *)gh)
S#define gw2obj		((GListObject *)gw)
S#define qi2li		((ListItem *)qi)
S#define qix2li		((ListItem *)qix)
S#define ple			((GEventGWinList *)pe)
S
Sstatic void sendListEvent(GWidgetObject *gw, int item) {
S	GSourceListener*	psl;
S	GEvent*				pe;
S
S	// Trigger a GWIN list event
S	psl = 0;
S
S	while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S		if (!(pe = geventGetEventBuffer(psl)))
S			continue;
S
S		ple->type = GEVENT_GWIN_LIST;
S		ple->gwin = (GHandle)gw;
S		ple->item = item;
S		#if GWIN_WIDGET_TAGS
S			ple->tag = gw->tag;
S		#endif
S
S		geventSendEvent(psl);
S	}
S}
S
S#if GINPUT_NEED_MOUSE
S    static void ListMouseSelect(GWidgetObject* gw, coord_t x, coord_t y) {
S        const gfxQueueASyncItem*    qi;
S        int                         item, i;
S        coord_t                     iheight;
S        (void)						x;
S
S        iheight = gdispGetFontMetric(gw->g.font, fontHeight) + LST_VERT_PAD;
S
S        // Handle click over the list area
S        item = (gw2obj->top + y) / iheight;
S
S        if (item < 0 || item >= gw2obj->cnt)
S            return;
S
S        for(qi = gfxQueueASyncPeek(&gw2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S            if ((gw->g.flags & GLIST_FLG_MULTISELECT)) {
S                if (item == i) {
S                    qi2li->flags ^= GLIST_FLG_SELECTED;
S                    break;
S                }
S            } else {
S                if (item == i)
S                    qi2li->flags |= GLIST_FLG_SELECTED;
S                else
S                    qi2li->flags &=~ GLIST_FLG_SELECTED;
S            }
S        }
S
S        _gwinUpdate(&gw->g);
S        sendListEvent(gw, item);
S
S    }
S
S	// a mouse down has occurred over the list area
S	static void ListMouseDown(GWidgetObject* gw, coord_t x, coord_t y) {
S		coord_t		iheight, pgsz;
S
S		// Save our mouse start position
S        gw2obj->start_mouse_x = x;
S        gw2obj->start_mouse_y = y;
S		gw2obj->last_mouse_y = y;
S
S		// For smooth scrolling, scrolling is done in the ListMouseMove and selection is done on ListMouseUp
S		if (gw->g.flags & GLIST_FLG_SCROLLSMOOTH)
S		    return;
S
S		// Some initial stuff
S		iheight = gdispGetFontMetric(gw->g.font, fontHeight) + LST_VERT_PAD;
S		pgsz = gw->g.height-2;
S
S		// Handle click over the scroll bar
S		if (x >= gw->g.width-(LST_SCROLLWIDTH+2) && (gw2obj->cnt > pgsz/iheight || (gw->g.flags & GLIST_FLG_SCROLLALWAYS))) {
S			if (y < 2*LST_ARROW_SZ) {
S				if (gw2obj->top > 0) {
S					gw2obj->top -= iheight;
S					if (gw2obj->top < 0)
S					    gw2obj->top = 0;
S					_gwinUpdate(&gw->g);
S				}
S			} else if (y >= gw->g.height - 2*LST_ARROW_SZ) {
S				if (gw2obj->top < gw2obj->cnt * iheight - pgsz) {
S				    gw2obj->top += iheight;
S				    if (gw2obj->top > gw2obj->cnt * iheight - pgsz)
S				        gw2obj->top = gw2obj->cnt * iheight - pgsz;
S				    _gwinUpdate(&gw->g);
S				}
S			} else if (y < gw->g.height/2) {
S				if (gw2obj->top > 0) {
S					if (gw2obj->top > pgsz)
S						gw2obj->top -= pgsz;
S					else
S						gw2obj->top = 0;
S					_gwinUpdate(&gw->g);
S				}
S			} else {
S				if (gw2obj->top < gw2obj->cnt * iheight - pgsz) {
S					if (gw2obj->top < gw2obj->cnt * iheight - 2*pgsz)
S						gw2obj->top += pgsz;
S					else
S						gw2obj->top = gw2obj->cnt * iheight - pgsz;
S					_gwinUpdate(&gw->g);
S				}
S			}
S			return;
S		}
S
S        ListMouseSelect(gw, x, y);
S	}
S
S    static void ListMouseUp(GWidgetObject* gw, coord_t x, coord_t y) {
S        // Only act when we are a smooth scrolling list
S        if (!(gw->g.flags & GLIST_FLG_SCROLLSMOOTH))
S            return;
S
S        // Only allow selection when we did not scroll
S        if (abs(gw2obj->start_mouse_x - x) > 4 || abs(gw2obj->start_mouse_y - y) > 4)
S            return;
S
S        ListMouseSelect(gw, x, y);
S    }
S
S	static void ListMouseMove(GWidgetObject* gw, coord_t x, coord_t y) {
S        int iheight, oldtop;
S        (void) x;
S
S        if (!(gw->g.flags & GLIST_FLG_SCROLLSMOOTH)) return;
S
S        if (gw2obj->last_mouse_y != y) {
S            oldtop = gw2obj->top;
S            iheight = gdispGetFontMetric(gw->g.font, fontHeight) + LST_VERT_PAD;
S
S            gw2obj->top -= y - gw2obj->last_mouse_y;
S            if (gw2obj->top >= gw2obj->cnt * iheight - (gw->g.height-2))
S                gw2obj->top = gw2obj->cnt * iheight - (gw->g.height-2) - 1;
S            if (gw2obj->top < 0)
S                gw2obj->top = 0;
S            gw2obj->last_mouse_y = y;
S            if (oldtop != gw2obj->top)
S            	_gwinUpdate(&gw->g);
S        }
S	}
S#endif
S
S#if GINPUT_NEED_TOGGLE
S	// a toggle-on has occurred
S	static void ListToggleOn(GWidgetObject *gw, uint16_t role) {
S		const gfxQueueASyncItem	*	qi;
S		const gfxQueueASyncItem	*	qix;
S		int							i;
S		
S		coord_t		iheight;
S		iheight = gdispGetFontMetric(gw->g.font, fontHeight) + LST_VERT_PAD;
S
S		switch (role) {
S			// select down
S			case 0:
S				for (i = 0, qi = gfxQueueASyncPeek(&gw2obj->list_head); qi; qi = gfxQueueASyncNext(qi), i++) {
S					if ((qi2li->flags & GLIST_FLG_SELECTED)) {
S						qix = gfxQueueASyncNext(qi);
S						if (qix) {
S							qi2li->flags &=~ GLIST_FLG_SELECTED;
S							qix2li->flags |= GLIST_FLG_SELECTED;
S
S							//if we need to scroll down
S							if (((i+2)*iheight - gw2obj->top) > gw->g.height){
S								gw2obj->top += iheight;
S							}
S
S							_gwinUpdate(&gw->g);
S						}
S						break;
S					}
S				}
S				break;
S
S			// select up
S			case 1:
S				qi = gfxQueueASyncPeek(&gw2obj->list_head);
S				qix = 0;
S
S				for (i = 0; qi; qix = qi, qi = gfxQueueASyncNext(qi), i++) {
S					if ((qi2li->flags & GLIST_FLG_SELECTED)) {
S						if (qix) {
S							qi2li->flags &=~ GLIST_FLG_SELECTED;
S							qix2li->flags |= GLIST_FLG_SELECTED;
S
S							//if we need to scroll up
S							if (((i-1)*iheight) < gw2obj->top){
S								gw2obj->top -= iheight;
S								if (gw2obj->top < 0)
S									gw2obj->top = 0;
S							}
S
S							_gwinUpdate(&gw->g);
S						}
S						break;
S					}
S				}
S				break;
S		}
S	}
S
S	static void ListToggleAssign(GWidgetObject *gw, uint16_t role, uint16_t instance) {
S		if (role)
S			gw2obj->t_up = instance;
S		else
S			gw2obj->t_dn = instance;
S	}
S
S	static uint16_t ListToggleGet(GWidgetObject *gw, uint16_t role) {
S		return role ? gw2obj->t_up : gw2obj->t_dn;
S	}
S#endif
S
Sstatic void ListDestroy(GHandle gh) {
S	const gfxQueueASyncItem* qi;
S
S	while((qi = gfxQueueASyncGet(&gh2obj->list_head)))
S		gfxFree((void *)qi);
S
S	_gwidgetDestroy(gh);
S}
S
Sstatic const gwidgetVMT listVMT = {
S	{
S		"List",					// The class name
S		sizeof(GListObject),	// The object size
S		ListDestroy,			// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinListDefaultDraw,		// default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			ListMouseDown,
S			ListMouseUp,
S			ListMouseMove,
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			2,					// two toggle roles
S			ListToggleAssign,	// Assign toggles
S			ListToggleGet,		// Get toggles
S			0,
S			ListToggleOn,		// Process toggle on event
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,
S			0,
S			0,
S			0,
S		},
S	#endif
S};
S
SGHandle gwinGListCreate(GDisplay *g, GListObject* gobj, GWidgetInit* pInit, bool_t multiselect) {
S	if (!(gobj = (GListObject *)_gwidgetCreate(g, &gobj->w, pInit, &listVMT)))
S		return 0;
S
S	// initialize the item queue
S	gfxQueueASyncInit(&gobj->list_head);
S	gobj->cnt = 0;
S	gobj->top = 0;
S	if (multiselect)
S		gobj->w.g.flags |= GLIST_FLG_MULTISELECT;
S	gobj->w.g.flags |= GLIST_FLG_SCROLLALWAYS;
S	gobj->w.g.flags |= GLIST_FLG_ENABLERENDER;
S
S	gwinSetVisible(&gobj->w.g, pInit->g.show);
S
S	return (GHandle)gobj;
S}
S
Svoid gwinListEnableRender(GHandle gh, bool_t ena) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	if (ena) {
S		gh->flags |= GLIST_FLG_ENABLERENDER;
S		gwinRedraw(gh);
S	} else {
S		gh->flags &=~ GLIST_FLG_ENABLERENDER;
S	}
S}
S
Svoid gwinListSetScroll(GHandle gh, scroll_t flag) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S    ((GListObject*)gh)->w.g.flags &=~(GLIST_FLG_SCROLLSMOOTH | GLIST_FLG_SCROLLALWAYS);
S	switch (flag) {
S		case scrollAlways:
S			((GListObject*)gh)->w.g.flags |= GLIST_FLG_SCROLLALWAYS;
S			break;
S
S		case scrollAuto:
S			break;
S
S		case scrollSmooth:
S		    ((GListObject*)gh)->w.g.flags |= GLIST_FLG_SCROLLSMOOTH;
S		    break;
S	}
S}
S
Sint gwinListAddItem(GHandle gh, const char* item_name, bool_t useAlloc) {
S	ListItem	*newItem;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return -1;
S
S	if (useAlloc) {
S		size_t len = strlen(item_name)+1;
S		if (!(newItem = gfxAlloc(sizeof(ListItem) + len)))
S			return -1;
S
S		memcpy((char *)(newItem+1), item_name, len);
S		item_name = (const char *)(newItem+1);
S	} else {
S		if (!(newItem = gfxAlloc(sizeof(ListItem))))
S			return -1;
S	}
S
S	// the item is not selected when added
S	newItem->flags = 0;
S	newItem->param = 0;
S	newItem->text = item_name;
S	#if GWIN_NEED_LIST_IMAGES
S		newItem->pimg = 0;
S	#endif
S
S	// select the item if it's the first in the list
S	if (gh2obj->cnt == 0 && !(gh->flags & GLIST_FLG_MULTISELECT))
S		newItem->flags |= GLIST_FLG_SELECTED;
S
S	// add the new item to the list
S	gfxQueueASyncPut(&gh2obj->list_head, &newItem->q_item);
S
S	// increment the total amount of entries in the list widget
S	gh2obj->cnt++;
S
S	_gwinUpdate(gh);
S
S	// return the position in the list (-1 because we start with index 0)
S	return gh2obj->cnt-1;
S}
S
Sconst char* gwinListItemGetText(GHandle gh, int item) {
S	const gfxQueueASyncItem*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return 0;
S
S	// watch out for an invalid item
S	if (item < 0 || item >= gh2obj->cnt)
S		return 0;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item)
S			return qi2li->text;
S	}
S	return 0;
S}
S
Sint gwinListFindText(GHandle gh, const char* text) {
S	const gfxQueueASyncItem*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return -1;
S
S	// watch out for NULL pointers
S	if (!text)
S		return -1;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (strcmp(((ListItem *)qi)->text, text) == 0)
S			return i;	
S	}
S
S	return -1;
S}
S
Sint gwinListGetSelected(GHandle gh) {
S	const gfxQueueASyncItem	*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return -1;
S
S	// Multi-select always returns -1. Use gwinListItemIsSelected() instead
S	if ((gh->flags & GLIST_FLG_MULTISELECT))
S		return -1;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (qi2li->flags & GLIST_FLG_SELECTED)
S			return i;
S	}
S
S	return -1;
S}
S
Svoid gwinListItemSetParam(GHandle gh, int item, uint16_t param) {
S	const gfxQueueASyncItem	*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	// watch out for an invalid item
S	if (item < 0 || item > (gh2obj->cnt) - 1)
S		return;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item) {
S			qi2li->param = param;
S			break;
S		}
S	}
S}
S
Svoid gwinListDeleteAll(GHandle gh) {
S	gfxQueueASyncItem* qi;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	while((qi = gfxQueueASyncGet(&gh2obj->list_head)))
S		gfxFree(qi);
S
S	gh->flags &= ~GLIST_FLG_HASIMAGES;
S	gh2obj->cnt = 0;
S	gh2obj->top = 0;
S	_gwinUpdate(gh);
S}
S
Svoid gwinListItemDelete(GHandle gh, int item) {
S	const gfxQueueASyncItem	*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	// watch out for an invalid item
S	if (item < 0 || item >= gh2obj->cnt)
S		return;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item) {
S			gfxQueueASyncRemove(&gh2obj->list_head, (gfxQueueASyncItem*)qi);
S			gfxFree((void *)qi);
S			gh2obj->cnt--;
S			if (gh2obj->top >= item && gh2obj->top)
S				gh2obj->top--;
S			_gwinUpdate(gh);
S			break;
S		}
S	}
S}
S
Suint16_t gwinListItemGetParam(GHandle gh, int item) {
S	const gfxQueueASyncItem	*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return 0;
S
S	// watch out for an invalid item
S	if (item < 0 || item > (gh2obj->cnt) - 1)
S		return 0;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item)
S			return qi2li->param;
S	}
S	return 0;
S}
S
Sbool_t gwinListItemIsSelected(GHandle gh, int item) {
S	const gfxQueueASyncItem	*	qi;
S	int							i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return FALSE;
S
S	// watch out for an invalid item
S	if (item < 0 || item > (gh2obj->cnt) - 1)
S		return FALSE;
S
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item)
S			return (qi2li->flags &  GLIST_FLG_SELECTED) ? TRUE : FALSE;
S	}
S	return FALSE;
S}
S
Sint gwinListItemCount(GHandle gh) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return 0;
S
S	return gh2obj->cnt;
S}
S
Sconst char* gwinListGetSelectedText(GHandle gh) {
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return 0;
S
S	// return NULL if nothing is selected (or multi-select)
S	if (gwinListGetSelected(gh) < 0)
S		return 0;
S
S	return gwinListItemGetText(gh, gwinListGetSelected(gh));
S}
S
Svoid gwinListSetSelected(GHandle gh, int item, bool_t doSelect) {
S	const gfxQueueASyncItem   *   qi;
S	int                     i;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	// watch out for an invalid item
S	if (item < 0 || item >= gh2obj->cnt)
S		return;
S
S	// If not a multiselect mode - clear previous selected item
S	if (doSelect && !(gh->flags & GLIST_FLG_MULTISELECT)) {
S		for(qi = gfxQueueASyncPeek(&gh2obj->list_head); qi; qi = gfxQueueASyncNext(qi)) {
S			if (qi2li->flags & GLIST_FLG_SELECTED) {
S				qi2li->flags &= ~GLIST_FLG_SELECTED;
S				break;
S			}
S		}
S	}
S
S	// Find item and set selected or not
S	for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S		if (i == item) {
S			if (doSelect)
S				qi2li->flags |= GLIST_FLG_SELECTED;
S			else
S				qi2li->flags &= ~GLIST_FLG_SELECTED;
S			break;
S		}
S	}
S	_gwinUpdate(gh);
S}
S
Svoid gwinListViewItem(GHandle gh, int item) {
S	coord_t iheight;
S
S	// is it a valid handle?
S	if (gh->vmt != (gwinVMT *)&listVMT)
S		return;
S
S	// watch out for an invalid item
S	if (item < 0 || item >= gh2obj->cnt)
S		return;
S
S	// Work out a possible new top for the list
S	iheight = gdispGetFontMetric(gh->font, fontHeight) + LST_VERT_PAD;
S	gh2obj->top = iheight * item;
S
S	// Adjust the list
S	if (gh2obj->top > gh2obj->cnt * iheight - gh->height-2)
S		gh2obj->top = gh2obj->cnt * iheight - gh->height-2;
S	if (gh2obj->top < 0)
S		gh2obj->top = 0;
S
S	_gwinUpdate(gh);
S}
S
S#if GWIN_NEED_LIST_IMAGES
S	void gwinListItemSetImage(GHandle gh, int item, gdispImage *pimg) {
S		const gfxQueueASyncItem	*	qi;
S		int							i;
S
S		// is it a valid handle?
S		if (gh->vmt != (gwinVMT *)&listVMT)
S			return;
S
S		// watch out for an invalid item
S		if (item < 0 || item > (gh2obj->cnt) - 1)
S			return;
S
S		for(qi = gfxQueueASyncPeek(&gh2obj->list_head), i = 0; qi; qi = gfxQueueASyncNext(qi), i++) {
S			if (i == item) {
S				qi2li->pimg = pimg;
S				if (pimg)
S					gh->flags |= GLIST_FLG_HASIMAGES;
S				break;
S			}
S		}
S	}
S#endif
S
Svoid gwinListDefaultDraw(GWidgetObject* gw, void* param) {
S	const gfxQueueASyncItem*	qi;
S	int							i;
S	coord_t						x, y, iheight, iwidth;
S	color_t						fill;
S	const GColorSet *			ps;
S	#if GWIN_NEED_LIST_IMAGES
S		coord_t					sy;
S	#endif
S	#if GDISP_NEED_CONVEX_POLYGON
S		static const point upArrow[] = { {0, LST_ARROW_SZ}, {LST_ARROW_SZ, LST_ARROW_SZ}, {LST_ARROW_SZ/2, 0} };
S		static const point downArrow[] = { {0, 0}, {LST_ARROW_SZ, 0}, {LST_ARROW_SZ/2, LST_ARROW_SZ} };
S	#endif
S
S	(void)param;
S
S	// is it a valid handle?
S	if (gw->g.vmt != (gwinVMT *)&listVMT)
S		return;
S
S	// don't render if render has been disabled
S	if (!(gw->g.flags & GLIST_FLG_ENABLERENDER))
S		return;
S
S	ps = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->enabled : &gw->pstyle->disabled;
S	iheight = gdispGetFontMetric(gw->g.font, fontHeight) + LST_VERT_PAD;
S	x = 1;
S
S	// the scroll area
S	if (gw->g.flags & GLIST_FLG_SCROLLSMOOTH) {
S		iwidth = gw->g.width - 2 - 4;
S		if (gw2obj->cnt > 0) {
S			int max_scroll_value = gw2obj->cnt * iheight - gw->g.height-2;
S			if (max_scroll_value > 0) {
S				int bar_height = (gw->g.height-2) * (gw->g.height-2) / (gw2obj->cnt * iheight);
S				gdispGFillArea(gw->g.display, gw->g.x + gw->g.width-4, gw->g.y + 1, 2, gw->g.height-1, gw->pstyle->background);
S				gdispGFillArea(gw->g.display, gw->g.x + gw->g.width-4, gw->g.y + gw2obj->top * ((gw->g.height-2)-bar_height) / max_scroll_value, 2, bar_height, ps->edge);
S			}
S		}
S	} else if ((gw2obj->cnt > (gw->g.height-2) / iheight) || (gw->g.flags & GLIST_FLG_SCROLLALWAYS)) {
S		iwidth = gw->g.width - (LST_SCROLLWIDTH+3);
S		gdispGFillArea(gw->g.display, gw->g.x+iwidth+2, gw->g.y+1, LST_SCROLLWIDTH, gw->g.height-2, gdispBlendColor(ps->fill, gw->pstyle->background, 128));
S		gdispGDrawLine(gw->g.display, gw->g.x+iwidth+1, gw->g.y+1, gw->g.x+iwidth+1, gw->g.y+gw->g.height-2, ps->edge);
S		#if GDISP_NEED_CONVEX_POLYGON
S			gdispGFillConvexPoly(gw->g.display, gw->g.x+iwidth+((LST_SCROLLWIDTH-LST_ARROW_SZ)/2+2), gw->g.y+(LST_ARROW_SZ/2+1), upArrow, 3, ps->fill);
S			gdispGFillConvexPoly(gw->g.display, gw->g.x+iwidth+((LST_SCROLLWIDTH-LST_ARROW_SZ)/2+2), gw->g.y+gw->g.height-(LST_ARROW_SZ+LST_ARROW_SZ/2+1), downArrow, 3, ps->fill);
S		#else
S			#warning "GWIN: Lists display better when GDISP_NEED_CONVEX_POLYGON is turned on"
S			gdispGFillArea(gw->g.display, gw->g.x+iwidth+((LST_SCROLLWIDTH-LST_ARROW_SZ)/2+2), gw->g.y+(LST_ARROW_SZ/2+1), LST_ARROW_SZ, LST_ARROW_SZ, ps->fill);
S			gdispGFillArea(gw->g.display, gw->g.x+iwidth+((LST_SCROLLWIDTH-LST_ARROW_SZ)/2+2), gw->g.y+gw->g.height-(LST_ARROW_SZ+LST_ARROW_SZ/2+1), LST_ARROW_SZ, LST_ARROW_SZ, ps->fill);
S		#endif
S	} else
S		iwidth = gw->g.width - 2;
S
S	#if GWIN_NEED_LIST_IMAGES
S		if ((gw->g.flags & GLIST_FLG_HASIMAGES)) {
S			x += iheight;
S			iwidth -= iheight;
S		}
S	#endif
S
S
S	// Find the top item
S	for (qi = gfxQueueASyncPeek(&gw2obj->list_head), i = iheight - 1; i < gw2obj->top && qi; qi = gfxQueueASyncNext(qi), i+=iheight);
S
S	// the list frame
S	gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, ps->edge);
S
S	// Set the clipping region so we do not override the frame.
S	#if GDISP_NEED_CLIP
S		gdispGSetClip(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2);
S	#endif
S
S	// Draw until we run out of room or items
S	for (y = 1-(gw2obj->top%iheight); y < gw->g.height-2 && qi; qi = gfxQueueASyncNext(qi), y += iheight) {
S		fill = (qi2li->flags & GLIST_FLG_SELECTED) ? ps->fill : gw->pstyle->background;
S		gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+y, iwidth, iheight, fill);
S		#if GWIN_NEED_LIST_IMAGES
S			if ((gw->g.flags & GLIST_FLG_HASIMAGES)) {
S				// Clear the image area
S				if (qi2li->pimg && gdispImageIsOpen(qi2li->pimg)) {
S					// Calculate which image
S					sy = (qi2li->flags & GLIST_FLG_SELECTED) ? 0 : (iheight-LST_VERT_PAD);
S					if (!(gw->g.flags & GWIN_FLG_SYSENABLED))
S						sy += 2*(iheight-LST_VERT_PAD);
S					while (sy > qi2li->pimg->height)
S						sy -= iheight-LST_VERT_PAD;
S					// Draw the image
S					gdispImageSetBgColor(qi2li->pimg, fill);
S					gdispGImageDraw(gw->g.display, qi2li->pimg, gw->g.x+1, gw->g.y+y, iheight-LST_VERT_PAD, iheight-LST_VERT_PAD, 0, sy);
S				}
S			}
S		#endif
S		gdispGFillStringBox(gw->g.display, gw->g.x+x+LST_HORIZ_PAD, gw->g.y+y, iwidth-LST_HORIZ_PAD, iheight, qi2li->text, gw->g.font, ps->text, fill, justifyLeft);
S	}
S
S	// Fill any remaining item space
S	if (y < gw->g.height-1)
S		gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+y, iwidth, gw->g.height-1-y, gw->pstyle->background);
S}
S
S#undef gh2obj
S#undef gw2obj
S#undef qi2li
S#undef qix2li
S#undef ple
N#endif // GFX_USE_GWIN && GWIN_NEED_LIST
L 20 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_progressbar.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_progressbar.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_progressbar.c
N * @brief   GWIN sub-system progressbar code
N */
N
N#include "../../gfx.h"
N
N#if (GFX_USE_GWIN && GWIN_NEED_PROGRESSBAR) || defined(__DOXYGEN__)
X#if (0 && 0) || 0L
S
S#include "gwin_class.h"
S
S// Reset the display position back to the value predicted by the saved progressbar position
Sstatic void PBResetDisplayPos(GProgressbarObject *gsw) {
S	if (gsw->w.g.width < gsw->w.g.height)
S		gsw->dpos = gsw->w.g.height-1-((gsw->w.g.height-1)*(gsw->pos-gsw->min))/(gsw->max-gsw->min);
S	else
S		gsw->dpos = ((gsw->w.g.width-1)*(gsw->pos-gsw->min))/(gsw->max-gsw->min);
S}
S
S// We have to deinitialize the timer which auto updates the progressbar if any
Sstatic void PBDestroy(GHandle gh) {
S	#if GWIN_PROGRESSBAR_AUTO
S		gtimerStop(&((GProgressbarObject *)gh)->gt);
S		gtimerDeinit(&((GProgressbarObject *)gh)->gt);
S	#endif
S
S	_gwidgetDestroy(gh);
S}
S
S// The progressbar VMT table
Sstatic const gwidgetVMT progressbarVMT = {
S	{
S		"Progressbar",				// The classname
S		sizeof(GProgressbarObject),	// The object size
S		PBDestroy,				// The destroy routine
S		_gwidgetRedraw,			// The redraw routine
S		0,						// The after-clear routine
S	},
S	gwinProgressbarDraw_Std,			// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			0,						// Process mouse down events (NOT USED)
S			0,						// Process mouse up events
S			0,						// Process mouse move events
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			0,						// 1 toggle role
S			0,						// Assign Toggles
S			0,						// Get Toggles
S			0,						// Process toggle off events (NOT USED)
S			0,						// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// 1 dial roles
S			0,						// Assign Dials
S			0,						// Get Dials
S			0,						// Process dial move events
S		},
S	#endif
S};
S
SGHandle gwinGProgressbarCreate(GDisplay *g, GProgressbarObject *gs, const GWidgetInit *pInit) {
S	if (!(gs = (GProgressbarObject *)_gwidgetCreate(g, &gs->w, pInit, &progressbarVMT)))
S		return 0;
S
S	gs->min = 0;
S	gs->max = 100;
S	gs->res = 1;
S	gs->pos = 0;
S
S	#if GWIN_PROGRESSBAR_AUTO
S		gtimerInit(&gs->gt);
S	#endif
S
S	PBResetDisplayPos(gs);
S	gwinSetVisible((GHandle)gs, pInit->g.show);
S
S	return (GHandle)gs;
S}
S
Svoid gwinProgressbarSetRange(GHandle gh, int min, int max) {
S	#define gsw		((GProgressbarObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if (min == max)		// prevent divide by 0 errors.
S		max++;
S	gsw->min = min;
S	gsw->max = max;
S	gsw->pos = min;
S
S	PBResetDisplayPos(gsw);
S
S	#undef gsw
S}
S
Svoid gwinProgressbarSetPosition(GHandle gh, int pos) {
S	#define gsw		((GProgressbarObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if (gsw->min <= gsw->max) {
S		if (pos < gsw->min) gsw->pos = gsw->min;
S		else if (pos > gsw->max) gsw->pos = gsw->max;
S		else gsw->pos = pos;
S	} else {
S		if (pos > gsw->min) gsw->pos = gsw->min;
S		else if (pos < gsw->max) gsw->pos = gsw->max;
S		else gsw->pos = pos;
S	}
S
S	PBResetDisplayPos(gsw);
S	_gwinUpdate(gh);
S
S	#undef gsw
S}
S
Svoid gwinProgressbarSetResolution(GHandle gh, int resolution) {
S	#define gsw		((GProgressbarObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if (resolution <= 0)
S		resolution = 1;
S
S	gsw->res = resolution;
S
S	#undef gsw
S}
S
Svoid gwinProgressbarIncrement(GHandle gh) {
S	#define gsw		((GProgressbarObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if (gsw->max - gsw->pos > gsw->res)
S		gsw->pos += gsw->res;
S	else
S		gsw->pos = gsw->max;
S
S	PBResetDisplayPos(gsw);
S	_gwinUpdate(gh);
S
S	#undef gsw
S}
S
Svoid gwinProgressbarDecrement(GHandle gh) {
S	#define gsw		((GProgressbarObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if (gsw->pos > gsw->res)
S		gsw->pos -= gsw->min;
S	else
S		gsw->pos = gsw->min;
S
S	gsw->pos -= gsw->res;
S
S	PBResetDisplayPos(gsw);
S	_gwinUpdate(gh);
S
S	#undef gsw
S}
S
S#if GWIN_PROGRESSBAR_AUTO
S	// used by gwinProgressbarStart();
S	static void _progressbarCallback(void *param) {
S		#define gsw		((GProgressbarObject *)gh)
S		GHandle gh = (GHandle)param;
S
S		if (gh->vmt != (gwinVMT *)&progressbarVMT)
S			return;
S
S		gwinProgressbarIncrement(gh);
S
S		if (gsw->pos >= gsw->max)
S			gtimerStop(&gsw->gt);
S
S		#undef gsw
S	}
S
S	void gwinProgressbarStart(GHandle gh, delaytime_t delay) {
S		#define gsw		((GProgressbarObject *)gh)
S
S		if (gh->vmt != (gwinVMT *)&progressbarVMT)
S			return;
S
S		gtimerStart(&gsw->gt, _progressbarCallback, gh, TRUE, delay);
S
S		#undef gsw
S	}
S
S	void gwinProgressbarStop(GHandle gh) {
S		#define gsw		((GProgressbarObject *)gh)
S
S		if (gh->vmt != (gwinVMT *)&progressbarVMT)
S			return;
S
S		gtimerStop(&gsw->gt);
S
S		#undef gsw
S	}
S#endif /* GWIN_PROGRESSBAR_AUTO */
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
Svoid gwinProgressbarDraw_Std(GWidgetObject *gw, void *param) {
S	#define gsw			((GProgressbarObject *)gw)
S
S	const GColorSet *	pcol;
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	// get the colors right
S	if ((gw->g.flags & GWIN_FLG_SYSENABLED))
S		pcol = &gw->pstyle->enabled;
S	else
S		pcol = &gw->pstyle->disabled;
S
S	// Vertical progressbar
S	if (gw->g.width < gw->g.height) {
S		if (gsw->dpos != gw->g.height-1)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y+gsw->dpos, gw->g.width, gw->g.height - gsw->dpos, pcol->progress);				// Active Area
S		if (gsw->dpos != 0)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gsw->dpos, pcol->fill);											// Inactive area
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);												// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+gsw->dpos, gw->g.x+gw->g.width-1, gw->g.y+gsw->dpos, pcol->edge);					// Thumb
S
S	// Horizontal progressbar
S	} else {
S		if (gsw->dpos != gw->g.width-1)
S			gdispGFillArea(gw->g.display, gw->g.x+gsw->dpos, gw->g.y, gw->g.width-gsw->dpos, gw->g.height, pcol->fill);						// Inactive area
S		if (gsw->dpos != 0)
S			gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gsw->dpos, gw->g.height, pcol->progress);										// Active Area
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);												// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos, gw->g.y, gw->g.x+gsw->dpos, gw->g.y+gw->g.height-1, pcol->edge);					// Thumb
S	}
S	gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S
S	#undef gsw
S}
S
S#if GDISP_NEED_IMAGE
Svoid gwinProgressbarDraw_Image(GWidgetObject *gw, void *param) {
S	#define gsw			((GProgressbarObject *)gw)
S	#define gi			((gdispImage *)param)
S	const GColorSet *	pcol;
S	coord_t				z, v;
S
S	if (gw->g.vmt != (gwinVMT *)&progressbarVMT)
S		return;
S
S	if ((gw->g.flags & GWIN_FLG_SYSENABLED))
S		pcol = &gw->pstyle->enabled;
S	else
S		pcol = &gw->pstyle->disabled;
S
S	// Vertical progressbar
S	if (gw->g.width < gw->g.height) {
S		if (gsw->dpos != 0)							// The unfilled area
S			gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gsw->dpos-1, gw->pstyle->enabled.progress);	// Inactive area
S		if (gsw->dpos != gw->g.height-1) {			// The filled area
S			for(z=gw->g.height, v=gi->height; z > gsw->dpos;) {
S				z -= v;
S				if (z < gsw->dpos) {
S					v -= gsw->dpos - z;
S					z = gsw->dpos;
S				}
S				gdispGImageDraw(gw->g.display, gi, gw->g.x+1, gw->g.y+z+1, gw->g.width-1, v-2, 0, gi->height-v);
S			}
S		}
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);								// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+1, gw->g.y+gsw->dpos, gw->g.x+gw->g.width-2, gw->g.y+gsw->dpos, pcol->edge);	// Thumb
S
S	// Horizontal progressbar
S	} else {
S		if (gsw->dpos != gw->g.width-1)				// The unfilled area
S			gdispGFillArea(gw->g.display, gw->g.x+gsw->dpos+1, gw->g.y+1, gw->g.width-gsw->dpos-2, gw->g.height-2, gw->pstyle->enabled.progress);	// Inactive area
S		if (gsw->dpos != 0) {						// The filled area
S			for(z=0, v=gi->width; z < gsw->dpos; z += v) {
S				if (z+v > gsw->dpos)
S					v -= z+v - gsw->dpos;
S				gdispGImageDraw(gw->g.display, gi, gw->g.x+z+1, gw->g.y+1, v-1, gw->g.height-2, 0, 0);
S			}
S		}
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);								// Edge
S		gdispGDrawLine(gw->g.display, gw->g.x+gsw->dpos, gw->g.y+1, gw->g.x+gsw->dpos, gw->g.y+gw->g.height-2, pcol->edge);	// Thumb
S	}
S	gdispGDrawStringBox(gw->g.display, gw->g.x+1, gw->g.y+1, gw->g.width-2, gw->g.height-2, gw->text, gw->g.font, pcol->text, justifyCenter);
S
S	#undef gsw
S}
S#endif /* GDISP_NEED_IMAGE */
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_BUTTON */
L 21 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_container.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_container.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_container.c
N * @brief   GWIN sub-system container code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_CONTAINERS
X#if 0 && 0
S
S#include "gwin_class.h"
S
Svoid _gcontainerInit(void)
S{
S}
S
Svoid _gcontainerDeinit(void)
S{
S}
S
SGHandle _gcontainerCreate(GDisplay *g, GContainerObject *pgc, const GWidgetInit *pInit, const gcontainerVMT *vmt) {
S	if (!(pgc = (GContainerObject *)_gwidgetCreate(g, (GWidgetObject *)pgc, pInit, &vmt->gw)))
S		return 0;
S
S	pgc->g.flags |= GWIN_FLG_CONTAINER;
S
S	return 	&pgc->g;
S}
S
Svoid _gcontainerDestroy(GHandle gh) {
S	GHandle		child;
S
S	while((child = gwinGetFirstChild(gh)))
S		gwinDestroy(child);
S	_gwidgetDestroy(gh);
S}
S
SGHandle gwinGetFirstChild(GHandle gh) {
S	GHandle		child;
S
S	for(child = gwinGetNextWindow(0); child; child = gwinGetNextWindow(child))
S		if (child->parent == gh)
S			return child;
S	return 0;
S}
S
SGHandle gwinGetSibling(GHandle gh) {
S	GHandle		child;
S
S	for(child = gwinGetNextWindow(gh), gh = gh->parent; child; child = gwinGetNextWindow(child))
S		if (child->parent == gh)
S			return child;
S	return 0;
S}
S
Scoord_t gwinGetInnerWidth(GHandle gh) {
S	if (!(gh->flags & GWIN_FLG_CONTAINER))
S		return 0;
S	return gh->width - ((const gcontainerVMT *)gh->vmt)->LeftBorder(gh) - ((const gcontainerVMT *)gh->vmt)->RightBorder(gh);
S}
S
Scoord_t gwinGetInnerHeight(GHandle gh) {
S	if (!(gh->flags & GWIN_FLG_CONTAINER))
S		return 0;
S	return gh->height - ((const gcontainerVMT *)gh->vmt)->TopBorder(gh) - ((const gcontainerVMT *)gh->vmt)->BottomBorder(gh);
S}
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_CONTAINERS */
N/** @} */
N
N/*-----------------------------------------------
N * The simplest container type - a container
N *-----------------------------------------------
N *
N * @defgroup Containers Containers
N * @ingroup GWIN
N *
N * @{
N */
N
N#if GFX_USE_GWIN && GWIN_NEED_CONTAINER
X#if 0 && 0
S
S#if GWIN_CONTAINER_BORDER != GWIN_FIRST_CONTROL_FLAG
S	#error "GWIN Container: - Flag definitions don't match"
S#endif
S
S#define BORDER_WIDTH		2
S
Sstatic coord_t ContainerBorderSize(GHandle gh)	{ return (gh->flags & GWIN_CONTAINER_BORDER) ? BORDER_WIDTH : 0; }
S
S// The container VMT table
Sstatic const gcontainerVMT containerVMT = {
S	{
S		{
S			"Container",				// The classname
S			sizeof(GContainerObject),	// The object size
S			_gcontainerDestroy,			// The destroy routine
S			_gcontainerRedraw,			// The redraw routine
S			0,							// The after-clear routine
S		},
S		gwinContainerDraw_Std,			// The default drawing routine
S		#if GINPUT_NEED_MOUSE
S			{
S				0, 0, 0,				// No mouse
S			},
S		#endif
S		#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S			{
S				0						// Process keyboard events
S			},
S		#endif
S		#if GINPUT_NEED_TOGGLE
S			{
S				0, 0, 0, 0, 0,			// No toggles
S			},
S		#endif
S		#if GINPUT_NEED_DIAL
S			{
S				0, 0, 0, 0,				// No dials
S			},
S		#endif
S	},
S	ContainerBorderSize,				// The size of the left border (mandatory)
S	ContainerBorderSize,				// The size of the top border (mandatory)
S	ContainerBorderSize,				// The size of the right border (mandatory)
S	ContainerBorderSize,				// The size of the bottom border (mandatory)
S	0,									// A child has been added (optional)
S	0,									// A child has been deleted (optional)
S};
S
SGHandle gwinGContainerCreate(GDisplay *g, GContainerObject *gc, const GWidgetInit *pInit, uint32_t flags) {
S	if (!(gc = (GContainerObject *)_gcontainerCreate(g, gc, pInit, &containerVMT)))
S		return 0;
S
S	gc->g.flags |= (flags & GWIN_CONTAINER_BORDER);
S
S	gwinSetVisible((GHandle)gc, pInit->g.show);
S	return (GHandle)gc;
S}
S
Svoid gwinContainerDraw_Transparent(GWidgetObject *gw, void *param) {
S	(void)param;
S
S	if (gw->g.vmt != (gwinVMT *)&containerVMT)
S		return;
S
S	if ((gw->g.flags & GWIN_CONTAINER_BORDER))
S		gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, (gw->g.flags & GWIN_FLG_SYSENABLED) ? gw->pstyle->enabled.edge : gw->pstyle->disabled.edge);
S
S	// Don't touch the client area
S}
S
Svoid gwinContainerDraw_Std(GWidgetObject *gw, void *param) {
S	(void)param;
S
S	if (gw->g.vmt != (gwinVMT *)&containerVMT)
S		return;
S
S	gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, gw->pstyle->background);
S	gwinContainerDraw_Transparent(gw, param);
S}
S
S#if GDISP_NEED_IMAGE
S	void gwinContainerDraw_Image(GWidgetObject *gw, void *param) {
S		#define gi			((gdispImage *)param)
S		coord_t				x, y, iw, ih, mx, my;
S
S		if (gw->g.vmt != (gwinVMT *)&containerVMT)
S			return;
S
S		// Draw the frame
S		gwinContainerDraw_Transparent(gw, param);
S
S		// Draw the client area by tiling the image
S		mx = gw->g.x+gw->g.width;
S		my = gw->g.y+gw->g.height;
S		y = gw->g.y;
S		if ((gw->g.flags & GWIN_CONTAINER_BORDER)) {
S			mx--;
S			my--;
S			y++;
S		}
S		for(ih=gi->height; y < my; y += ih) {
S			if (ih > my - y)
S				ih = my - y;
S			x = gw->g.x;
S			if ((gw->g.flags & GWIN_CONTAINER_BORDER))
S				x++;
S			for(iw=gi->width; x < mx; x += iw) {
S				if (iw > mx - x)
S					iw = mx - x;
S				gdispGImageDraw(gw->g.display, gi, x, y, iw, ih, 0, 0);
S			}
S		}
S
S		#undef gi
S	}
S#endif
S
N#endif
L 22 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_frame.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_frame.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_frame.c
N * @brief   GWIN sub-system frame code.
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_FRAME
X#if 0 && 0
S
S#include "gwin_class.h"
S
S/* Some position values */
S#define FRM_BUTTON_X	18					// Button Width
S#define FRM_BUTTON_Y	18					// Button Height
S#define FRM_BUTTON_I	3					// Button inner margin
S#define FRM_BUTTON_T	2					// Gap from top of window to button
S#define FRM_BUTTON_B	2					// Gap from button to the bottom of the frame title area
S#define FRM_BORDER_L	2					// Left Border
S#define FRM_BORDER_R	2					// Right Border
S#define FRM_BORDER_T	(FRM_BUTTON_Y+FRM_BUTTON_T+FRM_BUTTON_B)	// Top Border (Title area)
S#define FRM_BORDER_B	2					// Bottom Border
S
S/* Internal state flags */
S#define GWIN_FRAME_USER_FLAGS		(GWIN_FRAME_CLOSE_BTN|GWIN_FRAME_MINMAX_BTN|GWIN_FRAME_KEEPONCLOSE)
S
S#if GWIN_FRAME_CLOSE_BTN < GWIN_FIRST_CONTROL_FLAG
S	#error "GWIN Frame: - Flag definitions don't match"
S#endif
S#if GWIN_FRAME_REDRAW_FRAME > GWIN_LAST_CONTROL_FLAG
S	#error "GWIN Frame: - Flag definitions don't match"
S#endif
S
Sstatic coord_t FrameBorderSizeL(GHandle gh)	{ (void)gh; return FRM_BORDER_L; }
Sstatic coord_t FrameBorderSizeR(GHandle gh)	{ (void)gh; return FRM_BORDER_R; }
Sstatic coord_t FrameBorderSizeT(GHandle gh)	{ (void)gh; return FRM_BORDER_T; }
Sstatic coord_t FrameBorderSizeB(GHandle gh)	{ (void)gh; return FRM_BORDER_B; }
S
Sstatic void forceFrameRedraw(GWidgetObject *gw) {
S	// Force a redraw of just the frame.
S	// This is a big naughty but who really cares.
S	gw->g.flags |= GWIN_FRAME_REDRAW_FRAME;
S	gw->fnDraw(gw, gw->fnParam);
S	gw->g.flags &= ~GWIN_FRAME_REDRAW_FRAME;
S}
S
S#if GINPUT_NEED_MOUSE
S	static void FrameMouseDown(GWidgetObject *gw, coord_t x, coord_t y) {
S		coord_t		pos;
S
S		// We must be clicking on the frame button area to be of interest
S		if (y < FRM_BUTTON_T || y >= FRM_BUTTON_T+FRM_BUTTON_Y)
S			return;
S
S		pos = gw->g.width - (FRM_BORDER_R+FRM_BUTTON_X);
S		if ((gw->g.flags & GWIN_FRAME_CLOSE_BTN)) {
S			if (x >= pos && x < pos+FRM_BUTTON_X) {
S				// Close is pressed - force redraw the frame only
S				gw->g.flags |= GWIN_FRAME_CLOSE_PRESSED;
S				forceFrameRedraw(gw);
S				return;
S			}
S			pos -= FRM_BUTTON_X;
S		}
S		if ((gw->g.flags & GWIN_FRAME_MINMAX_BTN)) {
S			if (x >= pos && x < pos+FRM_BUTTON_X) {
S				// Close is pressed - force redraw the frame only
S				gw->g.flags |= GWIN_FRAME_MAX_PRESSED;
S				forceFrameRedraw(gw);
S				return;
S			}
S			pos -= FRM_BUTTON_X;
S			if (x >= pos && x < pos+FRM_BUTTON_X) {
S				// Close is pressed - force redraw the frame only
S				gw->g.flags |= GWIN_FRAME_MIN_PRESSED;
S				forceFrameRedraw(gw);
S				return;
S			}
S			pos -= FRM_BUTTON_X;
S		}
S	}
S
S	static void FrameMouseUp(GWidgetObject *gw, coord_t x, coord_t y) {
S		#if GWIN_BUTTON_LAZY_RELEASE
S			if ((gw->g.flags & GWIN_FRAME_CLOSE_PRESSED)) {
S				// Close is released - destroy the window
S				gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S				forceFrameRedraw(gw);
S				_gwinSendEvent(&gw->g, GEVENT_GWIN_CLOSE);
S				if (!(gw->g.flags & GWIN_FRAME_KEEPONCLOSE))
S					_gwinDestroy(&gw->g, REDRAW_INSESSION);
S				return;
S			}
S			if ((gw->g.flags & GWIN_FRAME_MAX_PRESSED)) {
S				// Max is released - maximize the window
S				gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S				forceFrameRedraw(gw);
S				gwinSetMinMax(&gw->g, GWIN_MAXIMIZE);
S				return;
S			}
S			if ((gw->g.flags & GWIN_FRAME_MIN_PRESSED)) {
S				// Min is released - minimize the window
S				gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S				forceFrameRedraw(gw);
S				gwinSetMinMax(&gw->g, GWIN_MINIMIZE);
S				return;
S			}
S		#else
S			// If nothing is pressed we have nothing to do.
S			if (!(gw->g.flags & (GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED)))
S				return;
S
S			// We must be releasing over the button
S			if (y >= FRM_BUTTON_T && y < FRM_BUTTON_T+FRM_BUTTON_Y) {
S				coord_t		pos;
S
S				pos = gw->g.width - (FRM_BORDER_R+FRM_BUTTON_X);
S				if ((gw->g.flags & GWIN_FRAME_CLOSE_BTN)) {
S					if ((gw->g.flags & GWIN_FRAME_CLOSE_PRESSED) && x >= pos && x <= pos+FRM_BUTTON_X) {
S						// Close is released - destroy the window. This is tricky as we already have the drawing lock.
S						gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S						forceFrameRedraw(gw);
S						_gwinSendEvent(&gw->g, GEVENT_GWIN_CLOSE);
S						if (!(gw->g.flags & GWIN_FRAME_KEEPONCLOSE))
S							_gwinDestroy(&gw->g, REDRAW_INSESSION);
S						return;
S					}
S					pos -= FRM_BUTTON_X;
S				}
S				if ((gw->g.flags & GWIN_FRAME_MINMAX_BTN)) {
S					if ((gw->g.flags & GWIN_FRAME_MAX_PRESSED) && x >= pos && x <= pos+FRM_BUTTON_X) {
S						// Max is released - maximize the window
S						gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S						forceFrameRedraw(gw);
S						gwinSetMinMax(&gw->g, GWIN_MAXIMIZE);
S						return;
S					}
S					pos -= FRM_BUTTON_X;
S					if ((gw->g.flags & GWIN_FRAME_MIN_PRESSED) && x >= pos && x <= pos+FRM_BUTTON_X) {
S						// Min is released - minimize the window
S						gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S						forceFrameRedraw(gw);
S						gwinSetMinMax(&gw->g, GWIN_MINIMIZE);
S						return;
S					}
S					pos -= FRM_BUTTON_X;
S				}
S			}
S
S			// Clear any flags and redraw the frame
S			gw->g.flags &= ~(GWIN_FRAME_CLOSE_PRESSED|GWIN_FRAME_MAX_PRESSED|GWIN_FRAME_MIN_PRESSED);
S			forceFrameRedraw(gw);
S		#endif
S	}
S#endif
S
Sstatic const gcontainerVMT frameVMT = {
S	{
S		{
S			"Frame",					// The classname
S			sizeof(GFrameObject),		// The object size
S			_gcontainerDestroy,			// The destroy routine
S			_gcontainerRedraw,			// The redraw routine
S			0,							// The after-clear routine
S		},
S		gwinFrameDraw_Std,				// The default drawing routine
S		#if GINPUT_NEED_MOUSE
S			{
S				FrameMouseDown,			// Process mouse down event
S				FrameMouseUp,			// Process mouse up events
S				0,						// Process mouse move events
S			},
S		#endif
S		#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S			{
S				0						// Process keyboard events
S			},
S		#endif
S		#if GINPUT_NEED_TOGGLE
S			{
S				0,						// 1 toggle role
S				0,						// Assign Toggles
S				0,						// Get Toggles
S				0,						// Process toggle off events
S				0,						// Process toggle on events
S			},
S		#endif
S		#if GINPUT_NEED_DIAL
S			{
S				0,						// 1 dial roles
S				0,						// Assign Dials
S				0,						// Get Dials
S				0,						// Process dial move events
S			},
S		#endif
S	},
S	FrameBorderSizeL,					// The size of the left border (mandatory)
S	FrameBorderSizeT,					// The size of the top border (mandatory)
S	FrameBorderSizeR,					// The size of the right border (mandatory)
S	FrameBorderSizeB,					// The size of the bottom border (mandatory)
S	0,									// A child has been added (optional)
S	0,									// A child has been deleted (optional)
S};
S
SGHandle gwinGFrameCreate(GDisplay *g, GFrameObject *fo, GWidgetInit *pInit, uint32_t flags) {
S	if (!(fo = (GFrameObject *)_gcontainerCreate(g, (GContainerObject *)fo, pInit, &frameVMT)))
S		return 0;
S
S	// Make sure we only have "safe" flags.
S	flags &= GWIN_FRAME_USER_FLAGS;
S
S	/* Apply flags. We apply these here so the controls above are outside the child area */
S	fo->g.flags |= flags;
S
S	gwinSetVisible(&fo->g, pInit->g.show);
S
S	return &fo->g;
S}
S
S///////////////////////////////////////////////////////////////////////////////////////////////////
S// Default render routines                                                                       //
S///////////////////////////////////////////////////////////////////////////////////////////////////
S
Svoid gwinFrameDraw_Transparent(GWidgetObject *gw, void *param) {
S	const GColorSet		*pcol;
S	coord_t				pos;
S	color_t				contrast;
S	color_t				btn;
S	(void)param;
S
S	if (gw->g.vmt != (gwinVMT *)&frameVMT)
S		return;
S
S	pcol = 	(gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->enabled : &gw->pstyle->disabled;
S	contrast = gdispContrastColor(pcol->edge);
S	btn = gdispBlendColor(pcol->edge, contrast, 128);
S
S	// Render the frame
S	gdispGFillStringBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, FRM_BORDER_T, gw->text, gw->g.font, contrast, pcol->edge, justifyCenter);
S	gdispGFillArea(gw->g.display, gw->g.x, gw->g.y+FRM_BORDER_T, FRM_BORDER_L, gw->g.height-(FRM_BORDER_T+FRM_BORDER_B), pcol->edge);
S	gdispGFillArea(gw->g.display, gw->g.x+gw->g.width-FRM_BORDER_R, gw->g.y+FRM_BORDER_T, FRM_BORDER_R, gw->g.height-(FRM_BORDER_T+FRM_BORDER_B), pcol->edge);
S	gdispGFillArea(gw->g.display, gw->g.x, gw->g.y+gw->g.height-FRM_BORDER_B, gw->g.width, FRM_BORDER_B, pcol->edge);
S
S	// Add the buttons
S	pos = gw->g.x+gw->g.width - (FRM_BORDER_R+FRM_BUTTON_X);
S
S	if ((gw->g.flags & GWIN_FRAME_CLOSE_BTN)) {
S		if ((gw->g.flags & GWIN_FRAME_CLOSE_PRESSED))
S			gdispFillArea(pos, gw->g.y+FRM_BUTTON_T, FRM_BUTTON_X, FRM_BUTTON_Y, btn);
S		gdispDrawLine(pos+FRM_BUTTON_I, gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I), pos+(FRM_BUTTON_X-FRM_BUTTON_I-1), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_Y-FRM_BUTTON_I-1), contrast);
S		gdispDrawLine(pos+(FRM_BUTTON_X-FRM_BUTTON_I-1), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I), pos+FRM_BUTTON_I, gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_Y-FRM_BUTTON_I-1), contrast);
S		pos -= FRM_BUTTON_X;
S	}
S
S	if ((gw->g.flags & GWIN_FRAME_MINMAX_BTN)) {
S		if ((gw->g.flags & GWIN_FRAME_MAX_PRESSED))
S			gdispFillArea(pos, gw->g.y+FRM_BUTTON_T, FRM_BUTTON_X, FRM_BUTTON_Y, btn);
S		// the symbol
S		gdispDrawBox(pos+FRM_BUTTON_I, gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I), FRM_BUTTON_X-2*FRM_BUTTON_I, FRM_BUTTON_Y-2*FRM_BUTTON_I, contrast);
S		gdispDrawLine(pos+(FRM_BUTTON_I+1), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I+1), pos+(FRM_BUTTON_X-FRM_BUTTON_I-2), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I+1), contrast);
S		gdispDrawLine(pos+(FRM_BUTTON_I+1), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I+2), pos+(FRM_BUTTON_X-FRM_BUTTON_I-2), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_I+2), contrast);
S		pos -= FRM_BUTTON_X;
S		if ((gw->g.flags & GWIN_FRAME_MIN_PRESSED))
S			gdispFillArea(pos, gw->g.y+FRM_BUTTON_T, FRM_BUTTON_X, FRM_BUTTON_Y, btn);
S		gdispDrawLine(pos+FRM_BUTTON_I, gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_Y-FRM_BUTTON_I-1), pos+(FRM_BUTTON_X-FRM_BUTTON_I-1), gw->g.y+(FRM_BUTTON_T+FRM_BUTTON_Y-FRM_BUTTON_I-1), contrast);
S		pos -= FRM_BUTTON_X;
S	}
S
S	// Don't touch the client area
S}
S
Svoid gwinFrameDraw_Std(GWidgetObject *gw, void *param) {
S	(void)param;
S
S	if (gw->g.vmt != (gwinVMT *)&frameVMT)
S		return;
S
S	// Draw the frame
S	gwinFrameDraw_Transparent(gw, param);
S
S	// Drop out if that is all we want to draw
S	if ((gw->g.flags & GWIN_FRAME_REDRAW_FRAME))
S		return;
S
S	// Draw the client area
S	gdispGFillArea(gw->g.display, gw->g.x + FRM_BORDER_L, gw->g.y + FRM_BORDER_T, gw->g.width - (FRM_BORDER_L+FRM_BORDER_R), gw->g.height - (FRM_BORDER_T+FRM_BORDER_B), gw->pstyle->background);
S}
S
S#if GDISP_NEED_IMAGE
S	void gwinFrameDraw_Image(GWidgetObject *gw, void *param) {
S		#define gi			((gdispImage *)param)
S		coord_t				x, y, iw, ih, mx, my;
S
S		if (gw->g.vmt != (gwinVMT *)&frameVMT)
S			return;
S
S		// Draw the frame
S		gwinFrameDraw_Transparent(gw, param);
S
S		// Drop out if that is all we want to draw
S		if ((gw->g.flags & GWIN_FRAME_REDRAW_FRAME))
S			return;
S
S		// Draw the client area by tiling the image
S		mx = gw->g.x+gw->g.width - FRM_BORDER_R;
S		my = gw->g.y+gw->g.height - FRM_BORDER_B;
S		for(y = gw->g.y+FRM_BORDER_T, ih = gi->height; y < my; y += ih) {
S			if (ih > my - y)
S				ih = my - y;
S			for(x = gw->g.x+FRM_BORDER_L, iw = gi->width; x < mx; x += iw) {
S				if (iw > mx - x)
S					iw = mx - x;
S				gdispGImageDraw(gw->g.display, gi, x, y, iw, ih, 0, 0);
S			}
S		}
S
S		#undef gi
S	}
S#endif
S
N#endif  /* (GFX_USE_GWIN && GWIN_NEED_FRAME) || defined(__DOXYGEN__) */
L 23 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_tabset.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_tabset.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_tabset.c
N * @brief   GWIN sub-system tabset code.
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_TABSET
X#if 0 && 0
S
S#include "gwin_class.h"
S
S#include <string.h>
S
S// Some position values
S#define GTABSET_BORDER			2
S#define GTABSET_TXT_PAD			5
S
S// Some color blending
S#define GTABSET_TAB_CNR			8		// Diagonal corner on active tab
S#define GTABSET_TOP_FADE		50		// (GTABSET_TOP_FADE/255)% fade to white for top of tab/button
S#define GTABSET_BOTTOM_FADE		25		// (GTABSET_BOTTOM_FADE/255)% fade to black for bottom of tab/button
S#define GTABSET_OUTLINE_FADE	128		// (GTABSET_OUTLINE_FADE/255)% fade to background for active tab edge
S
S/* Internal state flags */
S#define GWIN_TABSET_USER_FLAGS		(GWIN_TABSET_BORDER)
S#if GWIN_TABSET_BORDER < GWIN_FIRST_CONTROL_FLAG
S	#error "GWIN Tabset: - Flag definitions don't match"
S#endif
S#if GWIN_TABSET_BORDER > GWIN_LAST_CONTROL_FLAG
S	#error "GWIN Tabset: - Flag definitions don't match"
S#endif
S
S/********************************************************************************************************************
S * Tab-page stuff
S */
S
Sstatic void FixTabSizePos(GHandle gh);
S
Stypedef GContainerObject GTabpageObject;
S
Sstatic coord_t TabpageBorderSize(GHandle gh)	{ (void)gh; return 0; }
S
Sstatic void gwinTabpageDraw_Std(GWidgetObject *gw, void *param) {
S	(void)gw;
S	(void)param;
S
S	// The page is effectively transparent
S}
S
Sstatic void TabpageDestroy(GHandle gh) {
S	_gcontainerDestroy(gh);
S
S	FixTabSizePos(gh->parent);
S}
S
Sstatic const gcontainerVMT tabpageVMT = {
S	{
S		{
S			"Tabpage",					// The classname
S			sizeof(GTabpageObject),		// The object size
S			TabpageDestroy,				// The destroy routine
S			_gcontainerRedraw,			// The redraw routine
S			0,							// The after-clear routine
S		},
S		gwinTabpageDraw_Std,			// The default drawing routine
S		#if GINPUT_NEED_MOUSE
S			{
S				0,						// Process mouse down event
S				0,						// Process mouse up events
S				0,						// Process mouse move events
S			},
S		#endif
S		#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S			{
S				0						// Process keyboard events
S			},
S		#endif
S		#if GINPUT_NEED_TOGGLE
S			{
S				0,						// 1 toggle role
S				0,						// Assign Toggles
S				0,						// Get Toggles
S				0,						// Process toggle off events
S				0,						// Process toggle on events
S			},
S		#endif
S		#if GINPUT_NEED_DIAL
S			{
S				0,						// 1 dial roles
S				0,						// Assign Dials
S				0,						// Get Dials
S				0,						// Process dial move events
S			},
S		#endif
S	},
S	TabpageBorderSize,					// The size of the left border (mandatory)
S	TabpageBorderSize,					// The size of the top border (mandatory)
S	TabpageBorderSize,					// The size of the right border (mandatory)
S	TabpageBorderSize,					// The size of the bottom border (mandatory)
S	0,									// A child has been added (optional)
S	0,									// A child has been deleted (optional)
S};
S
Svoid gwinTabsetSetTitle(GHandle gh, const char *title, bool_t useAlloc) {
S	if (gh->vmt != (gwinVMT *)&tabpageVMT)
S		return;
S
S	gwinSetText(gh, title, useAlloc);
S	FixTabSizePos(gh->parent);
S	gwinRedraw(gh->parent);
S}
S
S/********************************************************************************************************************
S * Tab-set stuff
S */
S
Sstatic coord_t	CalcTabHeight(GHandle gh) {
S	GHandle		ph;
S	coord_t		x, y, w;
S
S	x = w = 0;
S	y = GWIN_TABSET_TABHEIGHT;
S	for(ph = gwinGetFirstChild(gh); ph; ph = gwinGetSibling(ph)) {
S		if (ph->vmt == (gwinVMT *)&tabpageVMT) {
S			w = gdispGetStringWidth(((GWidgetObject *)ph)->text, gh->font) + GTABSET_TXT_PAD*2;
S			x += w;
S			if (x > gh->width) {
S				y += GWIN_TABSET_TABHEIGHT;
S				x = w;
S			}
S		}
S	}
S	return y;
S}
S
Sstatic void FixTabSizePos(GHandle gh) {
S	coord_t		w, h, oldth;
S	GHandle		vis, ph;
S
S	oldth = ((GTabsetObject *)gh)->border_top;
S	((GTabsetObject *)gh)->border_top = CalcTabHeight(gh);
S	oldth -= ((GTabsetObject *)gh)->border_top;
S	if (oldth == 0)
S		return;
S
S	vis = 0;
S	w = gwinGetInnerWidth(gh);
S	h = gwinGetInnerHeight(gh);
S	for(ph = gwinGetFirstChild(gh); ph; ph = gwinGetSibling(ph)) {
S		if (ph->vmt == (gwinVMT *)&tabpageVMT) {
S			if (!vis || (ph->flags & GWIN_FLG_VISIBLE))
S				vis = ph;
S			gwinMove(ph, 0, 0);
S			gwinResize(ph, w, h);
S		} else {
S			gwinMove(ph, ph->x-gh->x-((gh->flags & GWIN_TABSET_BORDER) ? GTABSET_BORDER : 0) , ph->y-oldth-gh->y);
S		}
S	}
S	if (vis && !(vis->flags & GWIN_FLG_VISIBLE)) {
S		vis->flags |= GWIN_FLG_VISIBLE;
S		_gwinRippleVisibility();
S	}
S}
S
Sstatic coord_t TabSetBorderSize(GHandle gh)		{ return (gh->flags & GWIN_TABSET_BORDER) ? GTABSET_BORDER : 0; }
Sstatic coord_t TabSetBorderTop(GHandle gh)		{ return ((GTabsetObject *)gh)->border_top; }
S
S#if GINPUT_NEED_MOUSE
S	static void mouseDown(GWidgetObject *gw, coord_t mx, coord_t my) {
S		GHandle		ph, gh;
S		int			cnt;
S
S		if (my < 0 || my > ((GTabsetObject *)gw)->border_top)
S			return;
S
S		// Work out which tab was pressed
S		{
S			coord_t		x, w, y;
S
S			cnt = 0;
S			x = w = 0;
S			y = GWIN_TABSET_TABHEIGHT;
S			gh = 0;
S			for(ph = gwinGetFirstChild(&gw->g); ph; ph = gwinGetSibling(ph)) {
S				if (ph->vmt == (gwinVMT *)&tabpageVMT) {
S					w = gdispGetStringWidth(((GWidgetObject *)ph)->text, gw->g.font) + GTABSET_TXT_PAD*2;
S					x += w;
S					if (x > gw->g.width) {
S						y += GWIN_TABSET_TABHEIGHT;
S						x = w;
S					}
S					if (my < y && mx < x) {
S						gh = ph;
S						break;
S					}
S					cnt++;
S				}
S			}
S			if (!gh || (gh->flags & GWIN_FLG_VISIBLE))
S				return;
S		}
S
S		// Mark the existing tab as not visible
S		for(ph = gwinGetFirstChild(&gw->g); ph; ph = gwinGetSibling(ph)) {
S			if (ph->vmt == (gwinVMT *)&tabpageVMT && (ph->flags & GWIN_FLG_VISIBLE)) {
S				// Mark this page invisible
S				ph->flags &= ~GWIN_FLG_VISIBLE;
S				break;
S			}
S		}
S
S		// Mark this tab as visible
S		gh->flags |= GWIN_FLG_VISIBLE;
S		_gwinRippleVisibility();
S
S		// Force a redraw of the whole tabset
S		_gwinUpdate(&gw->g);
S
S		// Send the Tabset Event
S		{
S			GSourceListener	*	psl;
S			GEventGWinTabset *	pge;
S
S			psl = 0;
S			while ((psl = geventGetSourceListener(GWIDGET_SOURCE, psl))) {
S				if (!(pge = (GEventGWinTabset *)geventGetEventBuffer(psl)))
S					continue;
S				pge->type = GEVENT_GWIN_TABSET;
S				pge->gwin = &gw->g;
S				#if GWIN_WIDGET_TAGS
S					pge->tag = gw->tag;
S				#endif
S				pge->ghPage = gh;
S				pge->nPage = cnt;
S				geventSendEvent(psl);
S			}
S		}
S	}
S#endif
S
Sstatic const gcontainerVMT tabsetVMT = {
S	{
S		{
S			"Tabset",					// The classname
S			sizeof(GTabsetObject),		// The object size
S			_gcontainerDestroy,			// The destroy routine
S			_gcontainerRedraw,			// The redraw routine
S			0,							// The after-clear routine
S		},
S		gwinTabsetDraw_Std,				// The default drawing routine
S		#if GINPUT_NEED_MOUSE
S			{
S				mouseDown,				// Process mouse down event
S				0,						// Process mouse up events
S				0,						// Process mouse move events
S			},
S		#endif
S		#if GINPUT_NEED_TOGGLE
S			{
S				0,						// 1 toggle role
S				0,						// Assign Toggles
S				0,						// Get Toggles
S				0,						// Process toggle off events
S				0,						// Process toggle on events
S			},
S		#endif
S		#if GINPUT_NEED_DIAL
S			{
S				0,						// 1 dial roles
S				0,						// Assign Dials
S				0,						// Get Dials
S				0,						// Process dial move events
S			},
S		#endif
S	},
S	TabSetBorderSize,					// The size of the left border (mandatory)
S	TabSetBorderTop,					// The size of the top border (mandatory)
S	TabSetBorderSize,					// The size of the right border (mandatory)
S	TabSetBorderSize,					// The size of the bottom border (mandatory)
S	0,									// A child has been added (optional)
S	0,									// A child has been deleted (optional)
S};
S
SGHandle gwinGTabsetCreate(GDisplay *g, GTabsetObject *fo, GWidgetInit *pInit, uint32_t flags) {
S	if (!(fo = (GTabsetObject *)_gcontainerCreate(g, (GContainerObject *)fo, pInit, &tabsetVMT)))
S		return 0;
S
S	// Set Tabset specific stuff
S	fo->c.g.flags |= flags & GWIN_TABSET_USER_FLAGS;
S	fo->border_top = GWIN_TABSET_TABHEIGHT;
S
S	gwinSetVisible(&fo->c.g, pInit->g.show);
S
S	return &fo->c.g;
S}
S
S///////////////////////////////////////////////////////////////////////////////////////////////////
S// API calls
S///////////////////////////////////////////////////////////////////////////////////////////////////
S
SGHandle gwinTabsetAddTab(GHandle gh, const char *title, bool_t useAlloc) {
S	GWidgetInit		wi;
S
S	if (gh->vmt != (gwinVMT *)&tabsetVMT)
S		return 0;
S
S	// Set up the init structure
S	gwinWidgetClearInit(&wi);
S	wi.g.x = wi.g.y = 0;
S	wi.g.width = gwinGetInnerWidth(gh);
S	wi.g.height = gwinGetInnerHeight(gh);
S	wi.g.show = !gwinTabsetCountTabs(gh);
S	wi.g.parent = gh;
S
S	// Create the page
S	if (!(gh = _gcontainerCreate(gh->display, 0, &wi, &tabpageVMT)))
S		return 0;
S
S	// Set the text and visibility
S	gwinSetText(gh, title, useAlloc);
S	FixTabSizePos(gh->parent);
S
S	gwinSetVisible(gh, wi.g.show);
S	gwinRedraw(gh->parent);
S	return gh;
S}
S
Sint gwinTabsetCountTabs(GHandle gh) {
S	int		cnt;
S
S	if (gh->vmt != (gwinVMT *)&tabsetVMT)
S		return 0;
S
S	for(cnt = 0, gh = gwinGetFirstChild(gh); gh; gh = gwinGetSibling(gh)) {
S		if (gh->vmt == (gwinVMT *)&tabpageVMT)
S			cnt++;
S	}
S	return cnt;
S}
S
SGHandle gwinTabsetGetTabByIndex(GHandle gh, int index) {
S	if (gh->vmt != (gwinVMT *)&tabsetVMT)
S		return 0;
S
S	for(gh = gwinGetFirstChild(gh); gh; gh = gwinGetSibling(gh)) {
S		if (gh->vmt == (gwinVMT *)&tabpageVMT && !index--)
S			return gh;
S	}
S	return 0;
S}
S
SGHandle gwinTabsetGetTabByTitle(GHandle gh, const char *title) {
S	if (gh->vmt != (gwinVMT *)&tabsetVMT)
S		return 0;
S
S	for(gh = gwinGetFirstChild(gh); gh; gh = gwinGetSibling(gh)) {
S		if (gh->vmt == (gwinVMT *)&tabpageVMT && !strcmp(title, ((GWidgetObject *)gh)->text))
S			return gh;
S	}
S	return 0;
S}
S
Svoid gwinTabsetSetTab(GHandle gh) {
S	GHandle ph;
S
S	if (gh->vmt != (gwinVMT *)&tabpageVMT || (gh->flags & GWIN_FLG_VISIBLE))
S		return;
S
S	// We alter the visibility flags here directly as we know we are going to redraw everything
S	for(ph = gwinGetFirstChild(gh->parent); ph; ph = gwinGetSibling(ph)) {
S		if (ph->vmt == (gwinVMT *)&tabpageVMT && (ph->flags & GWIN_FLG_VISIBLE)) {
S			// Mark this page invisible
S			ph->flags &= ~GWIN_FLG_VISIBLE;
S			break;
S		}
S	}
S
S	// Mark this tab as visible
S	gh->flags |= GWIN_FLG_VISIBLE;
S	_gwinRippleVisibility();
S
S	// Force a redraw of the tabset
S	gwinRedraw(gh->parent);
S}
S
S///////////////////////////////////////////////////////////////////////////////////////////////////
S// Default render routines                                                                       //
S///////////////////////////////////////////////////////////////////////////////////////////////////
S
S#if GWIN_FLAT_STYLING
S	static void fgarea(GWidgetObjset *gw, const char *text, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->pressed : &gw->pstyle->disabled;
S
S		gdispGDrawBox(gw->g.display, gw->g.x+x, gw->g.y+y, w, GWIN_TABSET_TABHEIGHT, pcol->edge);
S		gdispGFillStringBox(gw->g.display, gw->g.x+x+1, gw->g.y+y+1, w-2, GWIN_TABSET_TABHEIGHT-1, text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S	}
S	static void bgarea(GWidgetObjset *gw, const char *text, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->enabled : &gw->pstyle->disabled;
S
S		gdispGFillStringBox(gw->g.display, gw->g.x+x, gw->g.y+y, w-1, GWIN_TABSET_TABHEIGHT, text, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+x+w-1, gw->g.y+y, gw->g.x+x+w-1, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x+x, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, gw->g.x+x+w-2, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, pcol->edge);
S	}
S	static void ntarea(GWidgetObjset *gw, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->pressed : &gw->pstyle->disabled;
S
S		gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y, w+y, GWIN_TABSET_TABHEIGHT-1, gw->g.bgcolor);
S		gdispGDrawLine(gw->g.display, gw->g.x+x, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, gw->g.x+x+w-1, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, pcol->edge);
S	}
S#else
S	static void fgarea(GWidgetObject *gw, const char *text, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S		color_t				tcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->pressed : &gw->pstyle->disabled;
S
S		tcol = gdispBlendColor(pcol->edge, gw->pstyle->background, GTABSET_OUTLINE_FADE);
S		gdispGFillStringBox(gw->g.display, gw->g.x+x, gw->g.y+y, w, GWIN_TABSET_TABHEIGHT, text, gw->g.font, pcol->text, gw->g.bgcolor, justifyCenter);
S		gdispGDrawLine(gw->g.display, gw->g.x+x, gw->g.y+y, gw->g.x+x+w-(GTABSET_TAB_CNR+1), gw->g.y+y, tcol);
S		gdispGDrawLine(gw->g.display, gw->g.x+x+w-(GTABSET_TAB_CNR+1), gw->g.y+y, gw->g.x+x+w-1, gw->g.y+y+GTABSET_TAB_CNR, tcol);
S		gdispGDrawLine(gw->g.display, gw->g.x+x+w-1, gw->g.y+y+GTABSET_TAB_CNR, gw->g.x+x+w-1, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, tcol);
S		if (!x)
S			gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+y, gw->g.x, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, tcol);
S	}
S	static void bgarea(GWidgetObject *gw, const char *text, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S		fixed				alpha;
S		coord_t				i;
S		color_t				tcol, bcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->enabled : &gw->pstyle->disabled;
S
S		/* Fill the box blended from variants of the fill color */
S		tcol = gdispBlendColor(White, pcol->fill, GTABSET_TOP_FADE);
S		bcol = gdispBlendColor(Black, pcol->fill, GTABSET_BOTTOM_FADE);
S		for(alpha = 0, i = 0; i < GWIN_TABSET_TABHEIGHT; i++, alpha += FIXED(255)/GWIN_TABSET_TABHEIGHT)
S			gdispGDrawLine(gw->g.display, gw->g.x+x, gw->g.y+y+i, gw->g.x+x+w-2, gw->g.y+y+i, gdispBlendColor(bcol, tcol, NONFIXED(alpha)));
S		gdispGDrawLine(gw->g.display, gw->g.x+x+w-1, gw->g.y+y, gw->g.x+x+w-1, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, pcol->edge);
S		gdispGDrawStringBox(gw->g.display, gw->g.x+x+1, gw->g.y+y+1, w-2, GWIN_TABSET_TABHEIGHT-2, text, gw->g.font, pcol->text, justifyCenter);
S	}
S	static void ntarea(GWidgetObject *gw, coord_t y, coord_t x, coord_t w) {
S		const GColorSet *	pcol;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->pressed : &gw->pstyle->disabled;
S
S		gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, w, GWIN_TABSET_TABHEIGHT-1, gw->g.bgcolor);
S		gdispGDrawLine(gw->g.display, gw->g.x+x, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, gw->g.x+x+w-1, gw->g.y+y+GWIN_TABSET_TABHEIGHT-1, pcol->edge);
S	}
S#endif
S
Sstatic coord_t drawtabs(GWidgetObject *gw) {
S	GHandle		ph;
S	coord_t		x, y, w;
S
S	x = w = 0;
S	y = 0;
S	for(ph = gwinGetFirstChild(&gw->g); ph; ph = gwinGetSibling(ph)) {
S		if (ph->vmt == (gwinVMT *)&tabpageVMT) {
S			w = gdispGetStringWidth(((GWidgetObject *)ph)->text, gw->g.font) + GTABSET_TXT_PAD*2;
S			if (x+w > gw->g.width) {
S				ntarea(gw, y, x, gw->g.width - x);
S				y += GWIN_TABSET_TABHEIGHT;
S				x = 0;
S			}
S			if (ph->flags & GWIN_FLG_VISIBLE)
S				fgarea(gw, ((GWidgetObject *)ph)->text, y, x, w);
S			else
S				bgarea(gw, ((GWidgetObject *)ph)->text, y, x, w);
S			x += w;
S		}
S	}
S	if (x < gw->g.width)
S		ntarea(gw, y, x, gw->g.width - x);
S	return y + GWIN_TABSET_TABHEIGHT;
S}
S
Sstatic void drawborder(GWidgetObject *gw, coord_t y) {
S	if ((gw->g.flags & GWIN_CONTAINER_BORDER)) {
S		const GColorSet *	pcol;
S		coord_t				x, w;
S
S		pcol = (gw->g.flags & GWIN_FLG_SYSENABLED) ? &gw->pstyle->enabled : &gw->pstyle->disabled;
S		x = gw->g.x+gw->g.width-1;
S		w = gw->g.y+gw->g.height-1;
S		gdispGDrawLine(gw->g.display, gw->g.x, gw->g.y+y, gw->g.x, w-1, pcol->edge);
S		gdispGDrawLine(gw->g.display, gw->g.x, w, x, w, pcol->edge);
S		gdispGDrawLine(gw->g.display, x, gw->g.y+y, x, w-1, pcol->edge);
S	}
S}
S
Svoid gwinTabsetDraw_Transparent(GWidgetObject *gw, void *param) {
S	(void)				param;
S
S	if (gw->g.vmt != (gwinVMT *)&tabsetVMT)
S		return;
S
S	drawborder(gw, drawtabs(gw));
S
S	// Don't touch the client area
S}
S
Svoid gwinTabsetDraw_Std(GWidgetObject *gw, void *param) {
S	coord_t		y;
S	(void)		param;
S
S	if (gw->g.vmt != (gwinVMT *)&tabsetVMT)
S		return;
S
S	// Draw the frame
S	y = drawtabs(gw);
S	drawborder(gw, y);
S
S	// Draw the client area
S	if ((gw->g.flags & GWIN_CONTAINER_BORDER))
S		gdispGFillArea(gw->g.display, gw->g.x+1, gw->g.y+y, gw->g.width-2, gw->g.height-y-1, gw->pstyle->background);
S	else
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y+y, gw->g.width, gw->g.height-y, gw->pstyle->background);
S}
S
S#if GDISP_NEED_IMAGE
S	void gwinTabsetDraw_Image(GWidgetObject *gw, void *param) {
S		#define gi			((gdispImage *)param)
S		coord_t				x, y, iw, ih, mx, my;
S
S		if (gw->g.vmt != (gwinVMT *)&tabsetVMT)
S			return;
S
S		// Draw the frame
S		y = drawtabs(gw);
S		drawborder(gw, y);
S
S		// Draw the client area by tiling the image
S		mx = gw->g.x+gw->g.width;
S		my = gw->g.y+gw->g.height;
S		if ((gw->g.flags & GWIN_CONTAINER_BORDER)) {
S			mx -= 2;
S			my -= 1;
S		}
S		for(y = gw->g.y+y, ih = gi->height; y < my; y += ih) {
S			if (ih > my - y)
S				ih = my - y;
S			x = gw->g.x;
S			if ((gw->g.flags & GWIN_CONTAINER_BORDER))
S				x++;
S			for(iw = gi->width; x < mx; x += iw) {
S				if (iw > mx - x)
S					iw = mx - x;
S				gdispGImageDraw(gw->g.display, gi, x, y, iw, ih, 0, 0);
S			}
S		}
S
S		#undef gi
S	}
S#endif
S
N#endif  /* (GFX_USE_GWIN && GWIN_NEED_TABSET) || defined(__DOXYGEN__) */
L 24 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_gl3d.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_gl3d.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_gl3d.c
N * @brief   GWIN sub-system button code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_GL3D
X#if 0 && 0
S
S#if GDISP_PIXELFORMAT != GDISP_PIXELFORMAT_RGB565
S	#error "GWIN: GL3D only support GDISP_PIXELFORMAT_RGB565 color format (TinyGL limitation)"
S#endif
S
S#include "gwin_class.h"
S
S#include "../../3rdparty/tinygl-0.4-ugfx/src/zgl.h"
S
S// Forward definitions
Sstatic void gl3dDestroy(GWindowObject *gh);
Sstatic void gl3dRedraw(GWindowObject *gh);
Sstatic int gl3dResizeGLViewport(GLContext *c, int *xsize_ptr, int *ysize_ptr);
S
Sstatic const gwinVMT gl3dVMT = {
S		"GL3D",					// The classname
S		sizeof(GGL3DObject),	// The object size
S		gl3dDestroy,			// The destroy routine
S		gl3dRedraw,				// The redraw routine
S		0,						// The after-clear routine
S};
S
Sstatic bool_t	haveGLwindow = FALSE;
S
SGHandle gwinGGL3DCreate(GDisplay *g, GGL3DObject *gl, const GWindowInit *pInit) {
S	ZBuffer *	zb;
S	GLContext *	glcxt;
S
S	// Only one GL3D window allowed at a time (TinyGL limitation)
S	if (haveGLwindow)
S		return 0;
S
S	if (!(gl = (GGL3DObject *)_gwindowCreate(g, &gl->g, pInit, &gl3dVMT, 0)))
S		return 0;
S
S	// Must be a multiple of 4 bytes
S	gl->g.width &= ~3;
S	gl->g.height &= ~3;
S
S    zb = ZB_open(gl->g.width, gl->g.height, ZB_MODE_5R6G5B, 0, NULL, NULL, NULL);
S    if (!zb) {
S		if ((gl->g.flags & GWIN_FLG_DYNAMIC))
S			gfxFree(gl);
S		return 0;
S    }
S
S    /* initialisation of the TinyGL interpreter */
S    glInit(zb);
S    gl->glcxt = glcxt = gl_get_context();
S    glcxt->opaque = gl;
S    glcxt->gl_resize_viewport = gl3dResizeGLViewport;
S
S    /* set the viewport : we force a call to the viewport resize routine */
S    glcxt->viewport.xsize=-1;
S    glcxt->viewport.ysize=-1;
S
S    glViewport(0, 0, gl->g.width, gl->g.height);
S
S    haveGLwindow = TRUE;
S	gwinSetVisible((GHandle)gl, pInit->show);
S	return (GHandle)gl;
S}
S
Sstatic void gl3dDestroy(GWindowObject *gh) {
S	(void) gh;
S    glClose();
S    haveGLwindow = FALSE;
S}
S
Sstatic void gl3dRedraw(GWindowObject *gh) {
S	ZBuffer *	zb;
S
S	zb = ((GGL3DObject *)gh)->glcxt->zb;
S	gdispGBlitArea(gh->display, gh->x, gh->y, zb->xsize, zb->ysize, 0, 0, zb->linesize/sizeof(color_t), (const pixel_t *)zb->pbuf);
S}
S
Sstatic int gl3dResizeGLViewport(GLContext *c, int *xsize_ptr, int *ysize_ptr) {
S	int		cx, cy;
S
S	cx = *xsize_ptr;
S	cy = *ysize_ptr;
S
S	// We ensure that cx and cy are multiples of 4 for the zbuffer. TODO: find a better solution
S	cx &= ~3;
S	cy &= ~3;
S
S	if (cx <= 0 || cy <= 0)
S		return -1;
S
S	*xsize_ptr = cx;
S	*ysize_ptr = cy;
S
S	// Resize the GWIN???
S
S	// Resize the Z buffer
S	ZB_resize(c->zb, NULL, cx, cy);
S	return 0;
S}
S
S/**
S * TinyGL support routines
S */
S
S#include <string.h>
S
S#define NO_CLIBRARY
S
Svoid tgl_warning(const char *format, ...)	{ (void)format; }
Svoid tgl_trace(const char *format, ...)		{ (void)format; }
Svoid tgl_fixme(const char *format, ...)		{ (void)format; }
Svoid gl_fatal_error(char *format, ...)		{ gfxHalt(format); }
Svoid gl_assert(int test)					{ if (!test) gfxHalt("TinyGL Assert"); }
S
Svoid gl_free(void *p)						{ gfxFree(p); }
Svoid *gl_malloc(int size)					{ return gfxAlloc(size); }
S
Svoid *gl_zalloc(int size) {
S	void	*p;
S
S	p = gfxAlloc(size);
S	if (p)
S		memset(p, 0, size);
S    return p;
S}
S
S
S/**
S * Pre-load TinyGL headers
S */
S
S/**
S * TinyGL wrapper code
S */
S
S#include "../../3rdparty/tinygl-0.4-ugfx/src/api.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/list.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/vertex.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/init.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/matrix.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/texture.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/misc.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/clear.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/light.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/clip.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/select.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/get.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/zbuffer.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/zline.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/zdither.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/ztriangle.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/zmath.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/image_util.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/arrays.c"
S#include "../../3rdparty/tinygl-0.4-ugfx/src/specbuf.c"
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_GL3D */
L 25 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_keyboard.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_keyboard.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/gwin/gwin_keyboard.c
N * @brief   GWIN sub-system virtual keyboard code
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_KEYBOARD
X#if 0 && 0
S
S#include "gwin_class.h"
S#include "gwin_keyboard_layout.h"
S
Stypedef uint8_t		utf8;
Stypedef uint16_t	utf16;
Stypedef uint32_t	utf32;
S
S// A character code - note this is not UTF-32 but a representation of the UTF-8 code stream for a single character.
Stypedef uint32_t	ucode;
S
Sstatic GSourceHandle	AllKeyboards;
S
S// Get the length of a UTF-8 string
Sstatic int UTF8StrLen(const utf8 *s) {
S	int				len;
S
S	len = 0;
S	if (s) {
S		while (*s) {
S			len++;
S			if (!(s[0] & 0x80))
S				s++;
S			else if ((s[0] & 0xE0) == 0xC0 && (s[1] & 0xC0) == 0x80)
S				s+=2;
S			else if ((s[0] & 0xF0) == 0xE0 && (s[1] & 0xC0) == 0x80 && (s[2] & 0xC0) == 0x80)
S				s+=3;
S			else if ((s[0] & 0xF8) == 0xF0 && (s[1] & 0xC0) == 0x80 && (s[2] & 0xC0) == 0x80 && (s[3] & 0xC0) == 0x80)
S				s+=4;
S			else
S				// Invalid UTF-8 sequence - assume a single byte
S				s++;
S		}
S	}
S	return len;
S}
S
S// Return the nth character of a UTF8 string
Sstatic ucode UTF8CharAt(const utf8 *s, int n) {
S	ucode		u;
S
S	u = 0;
S	if (!s) return 0;
S
S	while(*s) {
S		if (!(s[0] & 0x80)) {
S			u = s[0];
S			s++;
S		} else if ((s[0] & 0xE0) == 0xC0 && (s[1] & 0xC0) == 0x80) {
S			u = s[1] | ((ucode)s[0] << 8);
S			s+=2;
S		} else if ((s[0] & 0xF0) == 0xE0 && (s[1] & 0xC0) == 0x80 && (s[2] & 0xC0) == 0x80) {
S			u = s[2] | ((ucode)s[1] << 8) | ((ucode)s[0] << 16);
S			s+=3;
S		} else if ((s[0] & 0xF8) == 0xF0 && (s[1] & 0xC0) == 0x80 && (s[2] & 0xC0) == 0x80 && (s[3] & 0xC0) == 0x80) {
S			u = s[3] | ((ucode)s[2] << 8) | ((ucode)s[1] << 16) | ((ucode)s[0] << 24);
S			s+=4;
S		} else {
S			// Invalid UTF-8 sequence - assume a single byte
S			u = s[0];
S			s++;
S		}
S		if (--n < 0)
S			return u;
S	}
S	return 0;
S}
S
S// Convert a ucode to a UTF8 string (with no NULL on the end). Returns the number of bytes.
Sstatic unsigned UCode2UTF8(utf8 *dst, ucode u) {
S	if (!(u & 0xFFFFFF00)) {
S		dst[0] = u;
S		return 1;
S	}
S	if (!(u & 0xFFFF0000)) {
S		dst[0] = u >> 8;
S		dst[1] = u;
S		return 2;
S	}
S	if (!(u & 0xFF000000)) {
S		dst[0] = u >> 16;
S		dst[1] = u >> 8;
S		dst[2] = u;
S		return 3;
S	}
S	dst[0] = u >> 24;
S	dst[1] = u >> 16;
S	dst[2] = u >> 8;
S	dst[3] = u;
S	return 4;
S}
S
Sstatic int NumKeyRows(const char **keyset) {
S	int				len;
S
S	len = 0;
S	while(*keyset++)
S		len++;
S	return len;
S}
S
Sstatic void SendKeyboardEventToListener(GSourceListener	*psl, GKeyboardObject *gk) {
S	GEventKeyboard		*pe;
S	const GVSpecialKey	*skey;
S	unsigned			i;
S
S	// If there is no event buffer just mark a missed event
S	if (!(pe = (GEventKeyboard *)geventGetEventBuffer(psl))) {
S		// This listener is missing - save the meta events that have happened
S		psl->srcflags |= GKEYSTATE_MISSED_EVENT;
S		return;
S	}
S
S	// The virtual keyboard can't generate repeats
S	//if ((psl->listenflags & GLISTEN_KEYREPEATSOFF) && (k->keystate & GKEYSTATE_REPEAT))
S	//	return;
S
S	// The virtual keyboard can't generate special keys
S	//if ((psl->listenflags & GLISTEN_KEYNOSPECIALS) && (k->keystate & GKEYSTATE_SPECIAL))
S	//	return;
S
S	// The virtual keyboard treats a key release as a keydown
S	//if (!(psl->listenflags & GLISTEN_KEYUP) && (k->keystate & GKEYSTATE_KEYUP))
S	//	k->cntc = 0;
S
S	// The virtual keyboard has no transitions
S	//if (!(psl->listenflags & GLISTEN_KEYTRANSITIONS) && !k->cntc)
S	//	return;
S
S	pe->type = GEVENT_KEYBOARD;
S	if (gk->key < 0x20) {
S		skey = &gk->keytable->skeys[gk->key-1];
S		for(i=0; skey->sendkey[i]; i++)
S			pe->c[i] = skey->sendkey[i];
S	} else
S		i = UCode2UTF8((utf8 *)pe->c, gk->key);
S	pe->bytecount = i;
S	for(; i < 8; i++)
S		pe->c[i] = 0;
S	pe->keystate = psl->srcflags;
S	psl->srcflags = 0;
S	geventSendEvent(psl);
S}
S
Sstatic void SendKeyboardEvent(GKeyboardObject *gk) {
S	GSourceListener	*psl;
S
S	// Send to the "All Keyboards" source listeners
S	psl = 0;
S	while ((psl = geventGetSourceListener(AllKeyboards, psl)))
S		SendKeyboardEventToListener(psl, gk);
S
S	// Send to the keyboard specific source listeners
S	psl = 0;
S	while ((psl = geventGetSourceListener((GSourceHandle)gk, psl)))
S		SendKeyboardEventToListener(psl, gk);
S}
S
S
S#if GINPUT_NEED_MOUSE
S	// Find the key from the keyset and the x, y position
S	static void KeyFindKey(GKeyboardObject *gk, coord_t x, coord_t y) {
S		const utf8		*krow;
S		fixed			f;
S		int				idx;
S
S		if (x < 0 || y < 0 || x >= gk->w.g.width || y >= gk->w.g.height) {
S			gk->keyrow = gk->keycol = GKEY_BAD_ROWCOL;
S			return;
S		}
S
S		// Get the y parameters
S		f = FIXED(gk->w.g.height) / NumKeyRows(gk->keyset);
S		gk->keyrow = FIXED(y) / f;
S		gk->keyy = NONFIXED(f * gk->keyrow + FIXED0_5);
S		gk->keycy = NONFIXED(f * (gk->keyrow+1) + FIXED0_5) - gk->keyy;
S
S		// Get the current row
S		krow = (const utf8 *)gk->keyset[gk->keyrow];
S
S		// Get the x parameters
S		f = FIXED(gk->w.g.width) / UTF8StrLen(krow);
S		gk->keycol = FIXED(x) / f;
S
S		// Get the key
S		gk->key = UTF8CharAt(krow, gk->keycol);
S
S		// Amalgamate identical keys into one big key
S		idx = gk->keycol;
S		while(gk->keycol > 0 && UTF8CharAt(krow, gk->keycol-1) == gk->key)
S			gk->keycol--;
S		while(UTF8CharAt(krow, ++idx) == gk->key);
S		gk->keyx = NONFIXED(f * gk->keycol + FIXED0_5);
S		gk->keycx = NONFIXED(f * idx + FIXED0_5) - gk->keyx;
S	}
S
S	// A mouse up has occurred (it may or may not be over the button)
S	static void KeyMouseUp(GWidgetObject *gw, coord_t x, coord_t y) {
S		#define gk		((GKeyboardObject *)gw)
S
S		KeyFindKey(gk, x, y);
S
S		// Do we have a valid key?
S		if (gk->keyrow == GKEY_BAD_ROWCOL) {
S			if (gk->lastkeyrow != GKEY_BAD_ROWCOL) {
S				gw->g.flags |= GKEYBOARD_FLG_QUICKUPDATE;
S				_gwinUpdate((GHandle)gw);
S			}
S			return;
S		}
S
S		// We are turning off the display of the key
S		gk->keyrow = gk->keycol = GKEY_BAD_ROWCOL;
S
S		// Is this one of the special keys
S		if (gk->key < 0x20) {
S			// This is a special key
S			const GVSpecialKey	*skey;
S
S			skey = &gk->keytable->skeys[gk->key - 1];
S
S			if ((skey->flags & GVKEY_SINGLESET)) {
S				// Single character switch to a new layout
S				gk->keyset = gk->keytable->ksets[skey->newset];
S				gk->w.g.flags &= ~(GKEYBOARD_FLG_QUICKUPDATE|GKEYBOARD_FLG_REVERTSET);
S				gk->w.g.flags |= GKEYBOARD_FLG_REVERTSET;
S
S			} else if ((skey->flags & GVKEY_LOCKSET)) {
S				// Locked switch to a new layout
S				gk->keyset = gk->keytable->ksets[skey->newset];
S				gk->w.g.flags &= ~(GKEYBOARD_FLG_QUICKUPDATE|GKEYBOARD_FLG_REVERTSET);
S
S			} else if ((gk->w.g.flags & GKEYBOARD_FLG_REVERTSET)) {
S				// Revert to default layout
S				gk->keyset = gk->keytable->ksets[0];
S				gk->w.g.flags &= ~(GKEYBOARD_FLG_QUICKUPDATE|GKEYBOARD_FLG_REVERTSET);
S
S			} else {
S				// Just turning off a key
S				gw->g.flags |= GKEYBOARD_FLG_QUICKUPDATE;
S			}
S
S			// Send the key if required
S			if (skey->sendkey && skey->sendkey[0])
S				SendKeyboardEvent(gk);
S
S			// Update the display
S			_gwinUpdate((GHandle)gw);
S
S			return;
S		}
S
S		// Do we need to revert to the standard layout?
S		if ((gk->w.g.flags & GKEYBOARD_FLG_REVERTSET)) {
S			gk->keyset = gk->keytable->ksets[0];
S			gk->w.g.flags &= ~(GKEYBOARD_FLG_QUICKUPDATE|GKEYBOARD_FLG_REVERTSET);
S		} else {
S			gw->g.flags |= GKEYBOARD_FLG_QUICKUPDATE;
S		}
S
S		// Send the key
S		SendKeyboardEvent(gk);
S
S		// Update the display
S		_gwinUpdate((GHandle)gw);
S	}
S
S	// A mouse move has occurred (it may or may not be over the button)
S	static void KeyMouseMove(GWidgetObject *gw, coord_t x, coord_t y) {
S		#define gk		((GKeyboardObject *)gw)
S
S		KeyFindKey(gk, x, y);
S
S		if (gk->keyrow != gk->lastkeyrow || gk->keycol != gk->lastkeycol) {
S			gk->w.g.flags |= GKEYBOARD_FLG_QUICKUPDATE;
S			_gwinUpdate((GHandle)gw);
S		}
S		#undef gk
S	}
S#endif
S
Sextern const GVKeyTable GWIN_KEYBOARD_DEFAULT_LAYOUT;
S
S// The button VMT table
Sstatic const gwidgetVMT keyboardVMT = {
S	{
S		"VKeyboard",				// The classname
S		sizeof(GKeyboardObject),	// The object size
S		_gwidgetDestroy,			// The destroy routine
S		_gwidgetRedraw,				// The redraw routine
S		0,							// The after-clear routine
S	},
S	gwinKeyboardDraw_Normal,		// The default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			KeyMouseMove,			// Process mouse down events
S			KeyMouseUp,				// Process mouse up events
S			KeyMouseMove,			// Process mouse move events
S		},
S	#endif
S	#if GINPUT_NEED_KEYBOARD || GWIN_NEED_KEYBOARD
S		{
S			0						// Process keyboard events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			0,						// No toggle roles
S			0,						// Assign Toggles
S			0,						// Get Toggles
S			0,						// Process toggle off events
S			0,						// Process toggle on events
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0,						// Get Dials (NOT USED)
S			0,						// Process dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGKeyboardCreate(GDisplay *g, GKeyboardObject *gk, const GWidgetInit *pInit) {
S	if (!(gk = (GKeyboardObject *)_gwidgetCreate(g, &gk->w, pInit, &keyboardVMT)))
S		return 0;
S
S	gk->keytable = &GWIN_KEYBOARD_DEFAULT_LAYOUT;
S	gk->keyset = gk->keytable->ksets[0];
S	gk->lastkeyrow = gk->lastkeycol = gk->keyrow = gk->keycol = GKEY_BAD_ROWCOL;
S
S	if (!AllKeyboards)
S		AllKeyboards = ginputGetKeyboard(GKEYBOARD_ALL_INSTANCES);
S
S	gwinSetVisible((GHandle)gk, pInit->g.show);
S	return (GHandle)gk;
S}
S
SGSourceHandle gwinKeyboardGetEventSource(GHandle gh) {
S	if (gh->vmt != (gwinVMT *)&keyboardVMT)
S		return 0;
S	return (GSourceHandle)gh;
S}
S
Svoid gwinKeyboardSetLayout(GHandle gh, const struct GVKeyTable *layout) {
S	#define gk		((GKeyboardObject *)gh)
S
S	if (gh->vmt != (gwinVMT *)&keyboardVMT)
S		return;
S
S	if (!layout)
S		layout = &GWIN_KEYBOARD_DEFAULT_LAYOUT;
S	gk->keytable = layout;
S	gk->keyset = gk->keytable->ksets[0];
S	gk->lastkeyrow = gk->lastkeycol = gk->keyrow = gk->keycol = GKEY_BAD_ROWCOL;
S	gk->w.g.flags &= ~(GKEYBOARD_FLG_QUICKUPDATE|GKEYBOARD_FLG_REVERTSET);
S	gwinRedraw(gh);
S	#undef gk
S}
S
S/*----------------------------------------------------------
S * Custom Draw Routines
S *----------------------------------------------------------*/
S
S/*
Sstatic const GColorSet *getDrawColors(GWidgetObject *gw) {
S	if (!(gw->g.flags & GWIN_FLG_SYSENABLED))	return &gw->pstyle->disabled;
S	if ((gw->g.flags & GBUTTON_FLG_PRESSED))	return &gw->pstyle->pressed;
S	return &gw->pstyle->enabled;
S}
S*/
S
Svoid gwinKeyboardDraw_Normal(GWidgetObject *gw, void *param) {
S	#define gk ((GKeyboardObject *)gw)
S
S	char cap[5];
S	const char *pcap;
S	const utf8 *krow;
S	coord_t x, y, cx, cy;
S	uint8_t rows, cols, row, col, kcols;
S	ucode key;
S	fixed fx, fy;
S	const GColorSet *pcol;
S
S	(void) param;
S
S	// Make sure that this is a keyboard widget object
S	if (gw->g.vmt != (gwinVMT *)&keyboardVMT)
S		return;
S
S	// Get the y parameters
S	rows = NumKeyRows(gk->keyset);
S	fy = FIXED(gk->w.g.height) / rows;
S	for (row = 0; row < rows; row++) {
S		y = NONFIXED(fy * row + FIXED0_5);
S		cy = NONFIXED(fy * (row+1) + FIXED0_5) - y;
S
S		// Get the current row
S		krow = (const utf8 *)gk->keyset[row];
S
S		// Get the x parameters
S		cols = UTF8StrLen(krow);
S		fx = FIXED(gk->w.g.width) / cols;
S		for (col = 0; col < cols; col=kcols) {
S
S			// Get the correct color set
S			if (!(gk->w.g.flags & GWIN_FLG_SYSENABLED))
S					pcol = &gk->w.pstyle->disabled;
S			else 
S				pcol = &gk->w.pstyle->enabled;
S        	 
S			// Get the key
S			key = UTF8CharAt(krow, col);
S	
S			// Fuse identical keys into one big key
S			kcols = col+1;
S			while (UTF8CharAt(krow, kcols) == key)
S				kcols++;
S        	 
S			// If quick update needed and keyboard already drawn (if not use this flag, then bug when screen touched before keyboard was drawn)
S			if ( (gk->w.g.flags & GKEYBOARD_FLG_QUICKUPDATE) && !(gk->w.g.flags & GWIN_FLG_BGREDRAW) )  {
S
S				// If key pressed
S				if ( (gk->keyrow != GKEY_BAD_ROWCOL) && (gk->keycol != GKEY_BAD_ROWCOL) ) {
S
S					// And previous key have
S					if ( (gk->lastkeyrow != GKEY_BAD_ROWCOL) && (gk->lastkeycol != GKEY_BAD_ROWCOL) ) {
S						
S						if (gk->lastkeyrow == row && gk->lastkeycol == col) {
S							// If keyboard has no "disabled" color
S							if (pcol != &gk->w.pstyle->disabled)
S								pcol = &gk->w.pstyle->enabled;
S							gk->lastkeyrow = gk->lastkeycol = GKEY_BAD_ROWCOL;
S						} else {
S							continue;
S						}
S					}
S
S					// If no previous key
S					else {
S
S						if (gk->keyrow == row && gk->keycol == col) {
S							if (pcol != &gk->w.pstyle->disabled)
S								pcol = &gk->w.pstyle->pressed;
S							gk->lastkeyrow = row;
S							gk->lastkeycol = col;
S						}
S						else if (gk->lastkeyrow == row && gk->lastkeycol == col)
S						{
S							if (pcol != &gk->w.pstyle->disabled) pcol = &gk->w.pstyle->enabled;
S						}
S						else continue;
S					}
S				}
S
S				// If key up, and need clear the previous key
S				else if ( (gk->lastkeyrow != GKEY_BAD_ROWCOL) && (gk->lastkeycol != GKEY_BAD_ROWCOL) )
S				{
S					if ( (gk->lastkeyrow == row) && (gk->lastkeycol == col) )
S					{
S						if (pcol != &gk->w.pstyle->disabled) pcol = &gk->w.pstyle->enabled;
S					}
S					else continue;
S				}
S			}                  
S			else
S			{
S				gk->lastkeyrow = gk->lastkeycol = GKEY_BAD_ROWCOL;
S			}
S
S			x = NONFIXED(fx * col + FIXED0_5);
S			cx = NONFIXED(fx * kcols + FIXED0_5) - x;
S			
S			if (key < 0x20) {
S				pcap = gk->keytable->skeys[key-1].keycap;
S			} else {
S				cap[UCode2UTF8((utf8 *)cap, key)] = 0;
S				pcap = cap;
S			}
S			
S			switch(*pcap) {
S
S			case  '\001':	// Shift (up-arrow)
S				gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->fill);
S
S				gdispGDrawLine(gw->g.display, gw->g.x+x    +cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y +cy/4, pcol->text);               /*    / \    */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx -cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y +cy/4, pcol->text); 
S				gdispGDrawLine(gw->g.display, gw->g.x+x    +cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy/2, pcol->text);           /*    _ _    */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx -cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy/2, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy/2, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy -cy/3, pcol->text);      /*    ||     */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy/2, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy -cy/3, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy -cy/3, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy -cy/3, pcol->text);  /*    _      */
S
S				break;
S
S			case '\002':	// Shift locked (underlined up-arrow)
S				gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->fill);
S
S				gdispGDrawLine(gw->g.display, gw->g.x+x    +cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y +cy/4, pcol->text);               /*   / \     */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx -cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y +cy/4, pcol->text);    
S				gdispGDrawLine(gw->g.display, gw->g.x+x    +cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy/2, pcol->text);           /*   _ _     */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx -cx/4, gw->g.y+y+cy/2, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy/2, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy/2, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy -cy/3, pcol->text);      /*    ||     */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy/2, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy -cy/3, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2-cx/6, gw->g.y+y+cy -cy/3, gw->g.x+x+cx/2+cx/6, gw->g.y+y+cy -cy/3, pcol->text);  /*     _     */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx/2-cx/5, gw->g.y+y+cy -cy/4, gw->g.x+x+cx/2+cx/5, gw->g.y+y+cy -cy/4, pcol->text);  /*    ___    */
S
S				break;
S
S			case '\t':	// Tabulator
S				gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->fill);
S
S				gdispGDrawLine(gw->g.display, gw->g.x+x+1, gw->g.y+y+1, gw->g.x+x+cx-1, gw->g.y+y+cy/2, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+1, gw->g.y+y+cy-1, gw->g.x+x+cx-1, gw->g.y+y+cy/2, pcol->text);
S				gdispGDrawLine(gw->g.display, gw->g.x+x+cx-1, gw->g.y+y+1, gw->g.x+x+cx-1, gw->g.y+y+cy-1, pcol->text);
S
S				break;
S
S			case '\b': // Backspace
S				gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->fill);
S
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/8, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y    +cy/3, pcol->text);               /* /      */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/8, gw->g.y+y+cy/2, gw->g.x+x+cx-cx/8, gw->g.y+y+cy/2, pcol->text);                /*  --    */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/8, gw->g.y+y+cy/2, gw->g.x+x+cx/2, gw->g.y+y+cy -cy/3, pcol->text);               /* \      */
S
S				break;
S
S			case '\r': // Enter
S				gdispGFillArea(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->fill);
S
S				gdispGDrawLine(gw->g.display, gw->g.x+x+(cx/3)*2, gw->g.y+y+cy/2, gw->g.x+x+(cx/3)*2, gw->g.y+y+cy/5, pcol->text);            /*      | */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/3, gw->g.y+y+cy/2, gw->g.x+x+cx/3 +cx/8, gw->g.y+y+cy/3, pcol->text);             /* /      */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/3, gw->g.y+y+cy/2, gw->g.x+x+(cx/3)*2, gw->g.y+y+cy/2, pcol->text);               /*  --    */
S				gdispGDrawLine(gw->g.display, gw->g.x+x+ cx/3, gw->g.y+y+cy/2, gw->g.x+x+cx/3 +cx/8, gw->g.y+y+cy -cy/3, pcol->text);         /* \      */
S
S				break;
S
S			default:   // Regular character
S				gdispGFillStringBox(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcap, gw->g.font, pcol->text, pcol->fill, justifyCenter);
S				
S				break;
S			}
S			
S			// Draw the frame (border around the entire widget)
S			gdispGDrawBox(gw->g.display, gw->g.x+x, gw->g.y+y, cx, cy, pcol->edge);
S			
S			// If key up and we already cleared the previous key
S			if ( (gk->keyrow == GKEY_BAD_ROWCOL) && (gk->keycol == GKEY_BAD_ROWCOL) && (gk->lastkeyrow == row) && (gk->lastkeycol == col) ) {
S			   gk->lastkeyrow = gk->lastkeycol = GKEY_BAD_ROWCOL;
S			   return;
S			}
S
S			// Just quit the cycle if we did all the work in order not to waste any CPU time
S			if ( (row >= gk->keyrow && col >= gk->keycol) && (row >= gk->lastkeyrow && col >= gk->lastkeycol) ) {
S				return;
S			}
S		}
S	}
S
S	#undef gk
S}
S
S#if !(GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD)
S	GSourceHandle ginputGetKeyboard(unsigned instance) {
S		if (instance == GKEYBOARD_ALL_INSTANCES)
S			return (GSourceHandle)&AllKeyboards;
S		return 0;
S	}
S#endif
S
N#endif /* GFX_USE_GWIN && GWIN_NEED_KEYBOARD */
L 26 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_keyboard_layout.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_keyboard_layout.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_KEYBOARD
X#if 0 && 0
S
S#include "gwin_keyboard_layout.h"
S
S#if GWIN_NEED_KEYBOARD_ENGLISH1
S	/* For this keyboard mapping we use:
S	 * Set 0 = Lowercase letters
S	 * Set 1 = Uppercase letters (transient)
S	 * Set 2 = Uppercase letters (locked)
S	 * Set 3 = Numbers
S	 * Set 4 = Symbols
S	 */
S	static const GVSpecialKey Eng1SKeys[] = {
S			{ "\001", 0, GVKEY_SINGLESET, 1 },				// \001 (1)	= Shift Lower to Upper
S			{ "\001", 0, GVKEY_INVERT|GVKEY_LOCKSET, 2 },	// \002 (2)	= Shift Upper to Upper Lock
S			{ "\002", 0, GVKEY_INVERT|GVKEY_LOCKSET, 0 },	// \003 (3)	= Shift Upper Lock to Lower
S			{ "123", 0, GVKEY_LOCKSET, 3 },					// \004 (4)	= Change to Numbers
S			{ "\010", "\b", 0, 0 },							// \005 (5)	= Backspace
S			{ "\015", "\r", 0, 0 },							// \006 (6)	= Enter 1
S			{ "\015", "\r", 0, 0 },							// \007 (7)	= Enter 2 (Short keycap)
S			{ "Sym", 0, GVKEY_LOCKSET, 4 },					// \010 (8)	= Change to Symbols
S			{ "aA", 0, GVKEY_LOCKSET, 0 },					// \011 (9)	= Change to Lower Alpha
S	};
S	static const char Eng1Set0Row3[] = "\004  .\006\006";
S	static const char Eng1Set1Row0[] = "QWERTYUIOP";
S	static const char Eng1Set1Row1[] = "ASDFGHJKL";
S	static const char *Eng1Set0[] = { "qwertyuiop",	"asdfghjkl",	"\001zxcvbnm\005",	Eng1Set0Row3,		0 };
S	static const char *Eng1Set1[] = { Eng1Set1Row0,	Eng1Set1Row1,	"\002ZXCVBNM\005",	Eng1Set0Row3,		0 };
S	static const char *Eng1Set2[] = { Eng1Set1Row0,	Eng1Set1Row1,	"\003ZXCVBNM\005",	Eng1Set0Row3,		0 };
S	static const char *Eng1Set3[] = { "+-*/",		"@789",			"\007456",		"\010123",			"\01100.",	0 };
S	static const char *Eng1Set4[] = { "#$%^&*()",	"~`:;\"'{}",	"<>?/\\|[]",	"\011\004,!  .@",	0 };
S	static const GVKeySet Eng1Sets[] = { Eng1Set0, Eng1Set1, Eng1Set2, Eng1Set3, Eng1Set4, 0 };
S	const GVKeyTable VirtualKeyboard_English1 = { Eng1SKeys, Eng1Sets };
S#endif // GWIN_NEED_KEYBOARD_ENGLISH1
S
N#endif // GFX_USE_GWIN && GWIN_NEED_KEYBOARD
L 27 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
N#include "gwin_textedit.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_textedit.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file	src/gwin/gwin_textedit.c
N * @brief	GWIN TextEdit widget header file
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GWIN && GWIN_NEED_TEXTEDIT
X#if 0 && 0
S
S#include "gwin_class.h"
S#include <string.h>
S
S// Some settings
S#define TEXT_PADDING_LEFT		4
S#define CURSOR_PADDING_LEFT		0
S#define CURSOR_EXTRA_HEIGHT		1
S
S// Macros to assist in data type conversions
S#define gh2obj ((GTexteditObject *)gh)
S#define gw2obj ((GTexteditObject *)gw)
S
Sstatic bool_t resizeText(GWidgetObject* gw, size_t pos, int32_t diff) {
S	char	*p, *q;
S	size_t	sz;
S
S	p = (char *)gw->text;
S	sz = strlen(p)+1;
S	if (diff < 0)
S		memcpy(p+pos, p+pos-diff, sz-pos+diff);
S	if (!(p = gfxRealloc(p, sz, sz+diff)))
S		return FALSE;
S	gw->text = p;
S	if (diff > 0) {
S		q = p + sz;
S		p += pos;
S		while(--q >= p)
S			q[diff] = q[0];
S	}
S	return TRUE;
S}
S
S// Function that allows to set the cursor to any position in the string
S// This should be optimized. Currently it is an O(n^2) problem and therefore very
S// slow. An optimized version would copy the behavior of mf_get_string_width()
S// and do the comparation directly inside of that loop so we only iterate
S// the string once.
Sstatic void TextEditMouseDown(GWidgetObject* gw, coord_t x, coord_t y) {
S	uint16_t i = 0;
S
S	(void)y;
S
S	// Directly jump to the end of the string
S	if (x > gdispGetStringWidth(gw->text, gw->g.font)) {
S		gw2obj->cursorPos = strlen(gw->text);
S
S	// Otherwise iterate through each character and get the size in pixels to compare
S	} else {
S		i = 1;
S		while (gdispGetStringWidthCount(gw->text, gw->g.font, i) < x) {
S			i++;
S		}
S
S		gw2obj->cursorPos = i-1;
S	}
S
S	_gwinUpdate((GHandle)gw);
S}
S
S#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S	static void TextEditKeyboard(GWidgetObject* gw, GEventKeyboard* pke) {
S		// Only react on KEYDOWN events. Ignore KEYUP events.
S		if ((pke->keystate & GKEYSTATE_KEYUP) || !pke->bytecount)
S			return;
S
S		// Is it a special key?
S		if (pke->keystate & GKEYSTATE_SPECIAL) {
S
S			// Arrow keys to move the cursor
S			switch ((uint8_t)pke->c[0]) {
S			case GKEY_LEFT:
S				if (!gw2obj->cursorPos)
S					return;
S				gw2obj->cursorPos--;
S				break;
S			case GKEY_RIGHT:
S				if (!gw->text[gw2obj->cursorPos])
S					return;
S				gw2obj->cursorPos++;
S				break;
S			case GKEY_HOME:
S				if (!gw2obj->cursorPos)
S					return;
S				gw2obj->cursorPos = 0;
S				break;
S			case GKEY_END:
S				if (!gw->text[gw2obj->cursorPos])
S					return;
S				gw2obj->cursorPos = strlen(gw->text);
S				break;
S			default:
S				return;
S			}
S
S		} else {
S
S			// Normal key press
S			switch((uint8_t)pke->c[0]) {
S			case GKEY_BACKSPACE:
S				// Backspace
S				if (!gw2obj->cursorPos)
S					return;
S				gw2obj->cursorPos--;
S				resizeText(gw, gw2obj->cursorPos, -1);
S				break;
S			case GKEY_TAB:
S			case GKEY_LF:
S			case GKEY_CR:
S				// Move to the next field
S				_gwinMoveFocus();
S				return;
S			case GKEY_DEL:
S				// Delete
S				if (!gw->text[gw2obj->cursorPos])
S					return;
S				resizeText(gw, gw2obj->cursorPos, -1);
S				break;
S			default:
S				// Ignore any other control characters
S				if ((uint8_t)pke->c[0] < GKEY_SPACE)
S					return;
S
S				// Keep the edit length to less than the maximum
S				if (gw2obj->maxSize && gw2obj->cursorPos+pke->bytecount > gw2obj->maxSize)
S					return;
S
S				// Make space
S				resizeText(gw, gw2obj->cursorPos, pke->bytecount);
S
S				// Insert the character
S				memcpy((char *)gw->text+gw2obj->cursorPos, pke->c, pke->bytecount);
S				gw2obj->cursorPos += pke->bytecount;
S				break;
S			}
S		}
S
S		_gwinUpdate((GHandle)gw);
S	}
S#endif
S
Sstatic const gwidgetVMT texteditVMT = {
S	{
S		"TextEdit",					// The class name
S		sizeof(GTexteditObject),	// The object size
S		_gwidgetDestroy,			// The destroy routine
S		_gwidgetRedraw, 			// The redraw routine
S		0,							// The after-clear routine
S	},
S	gwinTexteditDefaultDraw,		// default drawing routine
S	#if GINPUT_NEED_MOUSE
S		{
S			TextEditMouseDown,		// Process mouse down events (NOT USED)
S			0,						// Process mouse up events (NOT USED)
S			0,						// Process mouse move events (NOT USED)
S		},
S	#endif
S	#if (GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD) || GWIN_NEED_KEYBOARD
S		{
S			TextEditKeyboard		// Process keyboard key down events
S		},
S	#endif
S	#if GINPUT_NEED_TOGGLE
S		{
S			0,						// No toggle role
S			0,						// Assign Toggles (NOT USED)
S			0,						// Get Toggles (NOT USED)
S			0,						// Process toggle off event (NOT USED)
S			0,						// Process toggle on event (NOT USED)
S		},
S	#endif
S	#if GINPUT_NEED_DIAL
S		{
S			0,						// No dial roles
S			0,						// Assign Dials (NOT USED)
S			0, 						// Get Dials (NOT USED)
S			0,						// Procees dial move events (NOT USED)
S		},
S	#endif
S};
S
SGHandle gwinGTexteditCreate(GDisplay* g, GTexteditObject* wt, GWidgetInit* pInit, size_t maxSize)
S{
S	char	*p;
S
S	// Create the underlying widget
S	if (!(wt = (GTexteditObject*)_gwidgetCreate(g, &wt->w, pInit, &texteditVMT)))
S		return 0;
S
S	wt->maxSize = maxSize;
S
S	// Reallocate the text (if necessary)
S	if (!(wt->w.g.flags & GWIN_FLG_ALLOCTXT)) {
S		if (!(p = gfxAlloc(wt->maxSize+1)))
S			return 0;
S		strncpy(p, wt->w.text, wt->maxSize);
S		wt->w.text = p;
S		wt->w.g.flags |= GWIN_FLG_ALLOCTXT;
S	}
S
S	// Set text and cursor position
S	wt->cursorPos = strlen(wt->w.text);
S
S	gwinSetVisible(&wt->w.g, pInit->g.show);
S
S	return (GHandle)wt;
S}
S
Svoid gwinTexteditDefaultDraw(GWidgetObject* gw, void* param)
S{
S	const char*			p;
S	coord_t				cpos, tpos;
S	const GColorSet*	pcol;
S
S	(void)param;
S
S	// Is it a valid handle?
S	if (gw->g.vmt != (gwinVMT*)&texteditVMT)
S		return;
S
S	// Retrieve colors
S	if ((gw->g.flags & GWIN_FLG_SYSENABLED))
S		pcol = &gw->pstyle->enabled;
S	else
S		pcol = &gw->pstyle->disabled;
S
S	// Adjust the text position so the cursor fits in the window
S	p = gw->text;
S	if (!gw2obj->cursorPos)
S		tpos = 0;
S	else {
S		for(cpos = gw2obj->cursorPos; ; p++, cpos--) {
S			tpos = gdispGetStringWidthCount(p, gw->g.font, cpos);
S			if (tpos < gw->g.width-(TEXT_PADDING_LEFT+CURSOR_PADDING_LEFT))
S				break;
S		}
S	}
S
S	// Render background and string
S	#if TEXT_PADDING_LEFT
S		gdispGFillArea(gw->g.display, gw->g.x, gw->g.y, TEXT_PADDING_LEFT, gw->g.height, pcol->fill);
S	#endif
S	gdispGFillStringBox(gw->g.display, gw->g.x + TEXT_PADDING_LEFT, gw->g.y, gw->g.width-TEXT_PADDING_LEFT, gw->g.height, p, gw->g.font, pcol->text, pcol->fill, justifyLeft);
S
S	// Render cursor (if focused)
S	if (gwinGetFocus() == (GHandle)gw) {
S		// Calculate cursor stuff
S
S		// Draw cursor
S		tpos += gw->g.x + CURSOR_PADDING_LEFT + TEXT_PADDING_LEFT + gdispGetFontMetric(gw->g.font, fontBaselineX)/2;
S		cpos = (gw->g.height - gdispGetFontMetric(gw->g.font, fontHeight))/2 - CURSOR_EXTRA_HEIGHT;
S		gdispGDrawLine(gw->g.display, tpos, gw->g.y + cpos, tpos, gw->g.y + gw->g.height - cpos, pcol->edge);
S	}
S
S	// Render border
S	gdispGDrawBox(gw->g.display, gw->g.x, gw->g.y, gw->g.width, gw->g.height, pcol->edge);
S
S	// Render highlighted border if focused
S	_gwidgetDrawFocusRect(gw, 0, 0, gw->g.width, gw->g.height);
S
S}
S
S#undef gh2obj
S#undef gw2obj
S
N#endif // GFX_USE_GWIN && GWIN_NEED_TEXTEDIT
L 28 "..\..\..\..\..\..\external\ugfx\src\gwin/gwin_mk.c" 2
L 16 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "ginput/ginput_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "ginput.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput.c
N * @brief   GINPUT subsystem common code.
N *
N * @addtogroup GINPUT
N * @{
N */
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT
X#if 0
S
S#if GINPUT_NEED_MOUSE
S    extern void _gmouseInit(void);
S    extern void _gmouseDeinit(void);
S#endif
S#if GINPUT_NEED_KEYBOARD
S    extern void _gkeyboardInit(void);
S    extern void _gkeyboardDeinit(void);
S#endif
S
Svoid _ginputInit(void)
S{
S    #if GINPUT_NEED_MOUSE
S        _gmouseInit();
S    #endif
S	#if GINPUT_NEED_KEYBOARD
S		_gkeyboardInit();
S	#endif
S	/**
S	 * This should really call an init routine for each ginput sub-system.
S	 * Maybe we'll do this later.
S	 */
S}
S
Svoid _ginputDeinit(void)
S{
S	#if GINPUT_NEED_KEYBOARD
S		_gkeyboardDeinit();
S	#endif
S    #if GINPUT_NEED_MOUSE
S        _gmouseDeinit();
S    #endif
S}
S
N#endif /* GFX_USE_GINPUT */
N/** @} */
N
L 9 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
N#include "ginput_mouse.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mouse.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_mouse.c
N * @brief   GINPUT mouse/touch code.
N */
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT && GINPUT_NEED_MOUSE
X#if 0 && 0
S
S// Just to make code easier
S#if !GFX_USE_GDISP
S	#define GDISP	0
S#endif
S
S// Local Settings
S#define CALIBRATION_POLL_PERIOD			20				// milliseconds
S#define CALIBRATION_MINPRESS_PERIOD		300				// milliseconds
S#define CALIBRATION_MAXPRESS_PERIOD		5000			// milliseconds
S
S#define CALIBRATION_FONT				"* Double"
S#define CALIBRATION_FONT2				"* Narrow"
S#define CALIBRATION_BACKGROUND			Blue
S
S#define CALIBRATION_CROSS_COLOR1		White
S#define CALIBRATION_CROSS_COLOR2		RGB2COLOR(184,158,131)
S#define CALIBRATION_CROSS_INNERGAP		2
S#define CALIBRATION_CROSS_RADIUS		15
S
S#define CALIBRATION_TITLE				"Calibration"
S#define CALIBRATION_TITLE_Y				5
S#define CALIBRATION_TITLE_HEIGHT		30
S#define CALIBRATION_TITLE_COLOR			White
S#define CALIBRATION_TITLE_BACKGROUND	Blue
S
S#define CALIBRATION_ERROR_TEXT			"Calibration Failed!"
S#define CALIBRATION_ERROR_DELAY			3000
S#define CALIBRATION_ERROR_COLOR			Red
S#define CALIBRATION_ERROR_BACKGROUND	Yellow
S#define CALIBRATION_ERROR_Y				35
S#define CALIBRATION_ERROR_HEIGHT		40
S
S// Get the mouse driver interface
S#include "ginput_driver_mouse.h"
S
S// The mouse poll timer
Sstatic GTIMER_DECL(MouseTimer);
S
S// Calibration application
S#if !GINPUT_TOUCH_NOCALIBRATE
S	#include <string.h>							// Required for memcpy
S
S	static GFXINLINE void CalibrationTransform(GMouseReading *pt, const GMouseCalibration *c) {
S		coord_t x, y;
S
S		x = (coord_t) (c->ax * pt->x + c->bx * pt->y + c->cx);
S		y = (coord_t) (c->ay * pt->x + c->by * pt->y + c->cy);
S		
S		pt->x = x;
S		pt->y = y;
S	}
S#endif
S
Sstatic void SendMouseEvent(GSourceListener	*psl, GMouse *m, GMouseReading *r) {
S	GEventMouse		*pe;
S
S	// If there is no event buffer just mark a missed event
S	if (!(pe = (GEventMouse *)geventGetEventBuffer(psl))) {
S		// This listener is missing - save the meta events that have happened
S		psl->srcflags |= ((r->buttons & GMETA_MASK)|GINPUT_MISSED_MOUSE_EVENT);
S		return;
S	}
S
S	// If we haven't really moved (and there are no meta events) don't bother sending the event
S	if (!(r->buttons & GMETA_MASK) && !psl->srcflags && !(psl->listenflags & GLISTEN_MOUSENOFILTER)
S			&& r->x == m->r.x && r->y == m->r.y && (r->buttons & GINPUT_MOUSE_BTN_MASK) == (m->r.buttons & GINPUT_MOUSE_BTN_MASK))
S		return;
S
S	// Send the event only if we are listening for it
S	if (!((r->buttons & GINPUT_MOUSE_BTN_LEFT) && (psl->listenflags & GLISTEN_MOUSEDOWNMOVES))
S			&& !(!(r->buttons & GINPUT_MOUSE_BTN_LEFT) && (psl->listenflags & GLISTEN_MOUSEUPMOVES))
S			&& !((r->buttons & GMETA_MASK) && (psl->listenflags & GLISTEN_MOUSEMETA)))
S		return;
S
S	#if !GINPUT_TOUCH_NOTOUCH
S		pe->type = (gmvmt(m)->d.flags & GMOUSE_VFLG_TOUCH) ? GEVENT_TOUCH : GEVENT_MOUSE;
S	#else
S		pe->type = GEVENT_MOUSE;
S	#endif
S	pe->x = r->x;
S	pe->y = r->y;
S	pe->z = r->z;
S	pe->buttons = r->buttons | psl->srcflags;
S	psl->srcflags = 0;
S	pe->display = m->display;
S	geventSendEvent(psl);
S}
S
Sstatic void GetMouseReading(GMouse *m) {
S	GMouseReading	r;
S
S	// Step 1 - Get the Raw Reading
S	{
S		m->flags &= ~GMOUSE_FLG_NEEDREAD;
S		if (!gmvmt(m)->get(m, &r))
S			return;
S	}
S
S	// Step 2 - Handle touch and button 0 debouncing
S	{
S		// Clean off button garbage
S		r.buttons &= GINPUT_MOUSE_BTN_MASK;
S
S		#if !GINPUT_TOUCH_NOTOUCH
S			// If touch then calculate button 0 from z
S			if ((gmvmt(m)->d.flags & GMOUSE_VFLG_TOUCH)) {
S				if (gmvmt(m)->z_min <= gmvmt(m)->z_max) {
S					if (r.z >= gmvmt(m)->z_touchon)			r.buttons |= GINPUT_MOUSE_BTN_LEFT;
S					else if (r.z <= gmvmt(m)->z_touchoff)	r.buttons &= ~GINPUT_MOUSE_BTN_LEFT;
S					else									return;				// bad transitional reading
S				} else {
S					if (r.z <= gmvmt(m)->z_touchon)			r.buttons |= GINPUT_MOUSE_BTN_LEFT;
S					else if (r.z >= gmvmt(m)->z_touchoff)	r.buttons &= ~GINPUT_MOUSE_BTN_LEFT;
S					else									return;				// bad transitional reading
S				}
S			}
S
S			// Devices with poor button 0 transitioning need debouncing
S			if ((gmvmt(m)->d.flags & GMOUSE_VFLG_POORUPDOWN)) {
S				// Are we in a transition test
S				if ((m->flags & GMOUSE_FLG_INDELTA)) {
S					if (!((r.buttons ^ m->r.buttons) & GINPUT_MOUSE_BTN_LEFT)) {
S						// Transition failed
S						m->flags &= ~GMOUSE_FLG_INDELTA;
S						return;
S					}
S					// Transition succeeded
S					m->flags &= ~GMOUSE_FLG_INDELTA;
S
S				// Should we start a transition test
S				} else if (((r.buttons ^ m->r.buttons) & GINPUT_MOUSE_BTN_LEFT)) {
S					m->flags |= GMOUSE_FLG_INDELTA;
S					return;
S				}
S			}
S		#endif
S
S		#if !GINPUT_TOUCH_NOCALIBRATE_GUI
S			// Stop here with just the raw x,y reading during calibration
S			if ((m->flags & GMOUSE_FLG_IN_CAL)) {
S				if ((r.buttons & GINPUT_MOUSE_BTN_LEFT)) {
S					m->r.x = r.x;
S					m->r.y = r.y;
S				}
S				m->r.buttons = r.buttons;
S				return;
S			}
S		#endif
S	}
S
S	// Step 3 - Apply calibration, rotation and display clipping
S	{
S		// If the mouse is up we may need to keep our previous position
S		if ((gmvmt(m)->d.flags & GMOUSE_VFLG_ONLY_DOWN) && !(r.buttons & GINPUT_MOUSE_BTN_LEFT)) {
S			r.x = m->r.x;
S			r.y = m->r.y;
S
S		} else {
S
S			#if !GINPUT_TOUCH_NOCALIBRATE
S				// Do we need to calibrate the reading?
S				if ((m->flags & GMOUSE_FLG_CALIBRATE))
S					CalibrationTransform(&r, &m->caldata);
S			#endif
S
S			// We can't clip or rotate if we don't have a display
S			if (m->display) {
S				coord_t			w, h;
S
S				// We now need display information
S				w = gdispGGetWidth(m->display);
S				h = gdispGGetHeight(m->display);
S
S				#if GDISP_NEED_CONTROL
S					// Do we need to rotate the reading to match the display
S					if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_SELFROTATION)) {
S						coord_t		t;
S
S						switch(gdispGGetOrientation(m->display)) {
S							case GDISP_ROTATE_0:
S								break;
S							case GDISP_ROTATE_90:
S								t = r.x;
S								r.x = w - 1 - r.y;
S								r.y = t;
S								break;
S							case GDISP_ROTATE_180:
S								r.x = w - 1 - r.x;
S								r.y = h - 1 - r.y;
S								break;
S							case GDISP_ROTATE_270:
S								t = r.y;
S								r.y = h - 1 - r.x;
S								r.x = t;
S								break;
S							default:
S								break;
S						}
S					}
S				#endif
S
S				// Do we need to clip the reading to the display
S				if ((m->flags & GMOUSE_FLG_CLIP)) {
S					if (r.x < 0)		r.x = 0;
S					else if (r.x >= w)	r.x = w-1;
S					if (r.y < 0)		r.y = 0;
S					else if (r.y >= h)	r.y = h-1;
S				}
S			}
S		}
S	}
S
S	// Step 4 - Apply jitter detection
S	#if !GINPUT_TOUCH_NOTOUCH
S	{
S		const GMouseJitter	*pj;
S		uint32_t			diff;
S
S		// Are we in pen or finger mode
S		pj = (m->flags & GMOUSE_FLG_FINGERMODE) ? &gmvmt(m)->finger_jitter : &gmvmt(m)->pen_jitter;
S
S		// Is this just movement jitter
S		if (pj->move > 0) {
S			diff = (uint32_t)(r.x - m->r.x) * (uint32_t)(r.x - m->r.x) + (uint32_t)(r.y - m->r.y) * (uint32_t)(r.y - m->r.y);
S			if (diff < (uint32_t)pj->move * (uint32_t)pj->move) {
S				r.x = m->r.x;
S				r.y = m->r.y;
S			}
S		}
S
S		// Check if the click has moved outside the click area and if so cancel the click
S		if (pj->click > 0 && (m->flags & GMOUSE_FLG_CLICK_TIMER)) {
S			diff = (uint32_t)(r.x - m->clickpos.x) * (uint32_t)(r.x - m->clickpos.x) + (uint32_t)(r.y - m->clickpos.y) * (uint32_t)(r.y - m->clickpos.y);
S			if (diff > (uint32_t)pj->click * (uint32_t)pj->click)
S				m->flags &= ~GMOUSE_FLG_CLICK_TIMER;
S		}
S	}
S	#endif
S
S	// Step 5 - Click, context-click and other meta event detection
S	{
S		uint16_t		upbtns, dnbtns;
S
S		// Calculate button transitions
S		dnbtns = r.buttons & ~m->r.buttons;
S		upbtns = ~r.buttons & m->r.buttons;
S
S		// Left mouse down generates the Mouse-down meta event
S		if ((dnbtns & GINPUT_MOUSE_BTN_LEFT))
S			r.buttons |= GMETA_MOUSE_DOWN;
S
S		// Left mouse up generates the Mouse-up meta event
S		if ((upbtns & GINPUT_MOUSE_BTN_LEFT))
S			r.buttons |= GMETA_MOUSE_UP;
S
S		// Left/Right mouse down starts the click timer
S		if ((dnbtns & (GINPUT_MOUSE_BTN_LEFT|GINPUT_MOUSE_BTN_RIGHT))) {
S			m->clickpos.x = r.x;
S			m->clickpos.y = r.y;
S			m->clicktime = gfxSystemTicks();
S			m->flags |= GMOUSE_FLG_CLICK_TIMER;
S		}
S
S		// Left/Right mouse up with the click timer still running may generate a click or context click
S		if ((upbtns & (GINPUT_MOUSE_BTN_LEFT|GINPUT_MOUSE_BTN_RIGHT)) && (m->flags & GMOUSE_FLG_CLICK_TIMER)) {
S			m->flags &= ~GMOUSE_FLG_CLICK_TIMER;
S			m->clicktime = gfxSystemTicks() - m->clicktime;
S
S			// Was this a short click?
S			if (m->clicktime <= gfxMillisecondsToTicks(GINPUT_MOUSE_CLICK_TIME)) {
S				if ((upbtns & GINPUT_MOUSE_BTN_RIGHT))
S					r.buttons |= GMETA_MOUSE_CXTCLICK;
S				if ((upbtns & GINPUT_MOUSE_BTN_LEFT))
S					r.buttons |= GMETA_MOUSE_CLICK;
S			}
S
S			#if !GINPUT_TOUCH_NOTOUCH
S				// Was this a long click on a touch device?
S				if ((gmvmt(m)->d.flags & GMOUSE_VFLG_TOUCH) && m->clicktime >= gfxMillisecondsToTicks(GINPUT_TOUCH_CXTCLICK_TIME))
S					r.buttons |= GMETA_MOUSE_CXTCLICK;
S			#endif
S		}
S	}
S
S	// Step 6 - Send the event to the listeners that are interested.
S	{
S		GSourceListener	*psl;
S
S		// Send to the "All Mice" source listeners
S		psl = 0;
S		while ((psl = geventGetSourceListener((GSourceHandle)&MouseTimer, psl)))
S			SendMouseEvent(psl, m, &r);
S
S		// Send to the mouse specific source listeners
S		psl = 0;
S		while ((psl = geventGetSourceListener((GSourceHandle)m, psl)))
S			SendMouseEvent(psl, m, &r);
S	}
S
S	// Step 7 - Finally save the results
S	m->r.x = r.x;
S	m->r.y = r.y;
S	m->r.z = r.z;
S	m->r.buttons = r.buttons;
S}
S
Sstatic void MousePoll(void *param) {
S	GMouse *	m;
S	(void) 		param;
S
S	for(m = (GMouse *)gdriverGetNext(GDRIVER_TYPE_MOUSE, 0); m; m = (GMouse *)gdriverGetNext(GDRIVER_TYPE_MOUSE, (GDriver *)m)) {
S		if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_NOPOLL) || (m->flags & GMOUSE_FLG_NEEDREAD))
S			GetMouseReading(m);
S	}
S}
S
S// Calibration user interface
S#if !GINPUT_TOUCH_NOCALIBRATE_GUI
S	#if !defined(GFX_USE_GDISP) || !GFX_USE_GDISP
S		#error "GINPUT: GFX_USE_GDISP must be defined when calibration is required"
S	#endif
S
S	static GFXINLINE void CalibrationCrossDraw(GMouse *m, const point *pp) {
S		gdispGDrawLine(m->display, pp->x-CALIBRATION_CROSS_RADIUS, pp->y, pp->x-CALIBRATION_CROSS_INNERGAP, pp->y, CALIBRATION_CROSS_COLOR1);
S		gdispGDrawLine(m->display, pp->x+CALIBRATION_CROSS_INNERGAP, pp->y, pp->x+CALIBRATION_CROSS_RADIUS, pp->y, CALIBRATION_CROSS_COLOR1);
S		gdispGDrawLine(m->display, pp->x, pp->y-CALIBRATION_CROSS_RADIUS, pp->x, pp->y-CALIBRATION_CROSS_INNERGAP, CALIBRATION_CROSS_COLOR1);
S		gdispGDrawLine(m->display, pp->x, pp->y+CALIBRATION_CROSS_INNERGAP, pp->x, pp->y+CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR1);
S		gdispGDrawLine(m->display, pp->x-CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS, pp->x-CALIBRATION_CROSS_RADIUS/2, pp->y+CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x-CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS/2, pp->x-CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x-CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS, pp->x-CALIBRATION_CROSS_RADIUS/2, pp->y-CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x-CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS/2, pp->x-CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x+CALIBRATION_CROSS_RADIUS/2, pp->y+CALIBRATION_CROSS_RADIUS, pp->x+CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x+CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS/2, pp->x+CALIBRATION_CROSS_RADIUS, pp->y+CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x+CALIBRATION_CROSS_RADIUS/2, pp->y-CALIBRATION_CROSS_RADIUS, pp->x+CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_COLOR2);
S		gdispGDrawLine(m->display, pp->x+CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS, pp->x+CALIBRATION_CROSS_RADIUS, pp->y-CALIBRATION_CROSS_RADIUS/2, CALIBRATION_CROSS_COLOR2);
S	}
S
S	static GFXINLINE void CalibrationCrossClear(GMouse *m, const point *pp) {
S		gdispGFillArea(m->display, pp->x - CALIBRATION_CROSS_RADIUS, pp->y - CALIBRATION_CROSS_RADIUS, CALIBRATION_CROSS_RADIUS*2+1, CALIBRATION_CROSS_RADIUS*2+1, CALIBRATION_BACKGROUND);
S	}
S
S	static GFXINLINE void CalibrationCalculate(GMouse *m, const point *cross, const point *points) {
S		float		dx;
S		coord_t		c0, c1, c2;
S		(void)		m;
S
S		// Work on x values
S		c0 = cross[0].x;
S		c1 = cross[1].x;
S		c2 = cross[2].x;
S
S		#if GDISP_NEED_CONTROL
S			if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_SELFROTATION)) {
S				/* Convert all cross points back to GDISP_ROTATE_0 convention
S				 * before calculating the calibration matrix.
S				 */
S				switch(gdispGGetOrientation(m->display)) {
S				case GDISP_ROTATE_90:
S					c0 = cross[0].y;
S					c1 = cross[1].y;
S					c2 = cross[2].y;
S					break;
S				case GDISP_ROTATE_180:
S					c0 = c1 = c2 = gdispGGetWidth(m->display) - 1;
S					c0 -= cross[0].x;
S					c1 -= cross[1].x;
S					c2 -= cross[2].x;
S					break;
S				case GDISP_ROTATE_270:
S					c0 = c1 = c2 = gdispGGetHeight(m->display) - 1;
S					c0 -= cross[0].y;
S					c1 -= cross[1].y;
S					c2 -= cross[2].y;
S					break;
S                default:
S                    break;
S				}
S			}
S		#endif
S
S		/* Compute all the required determinants */
S		dx  = (float)(points[0].x - points[2].x) * (float)(points[1].y - points[2].y)
S				- (float)(points[1].x - points[2].x) * (float)(points[0].y - points[2].y);
S
S		m->caldata.ax = ((float)(c0 - c2) * (float)(points[1].y - points[2].y)
S							- (float)(c1 - c2) * (float)(points[0].y - points[2].y)) / dx;
S		m->caldata.bx = ((float)(c1 - c2) * (float)(points[0].x - points[2].x)
S							- (float)(c0 - c2) * (float)(points[1].x - points[2].x)) / dx;
S		m->caldata.cx = (c0 * ((float)points[1].x * (float)points[2].y - (float)points[2].x * (float)points[1].y)
S							- c1 * ((float)points[0].x * (float)points[2].y - (float)points[2].x * (float)points[0].y)
S							+ c2 * ((float)points[0].x * (float)points[1].y - (float)points[1].x * (float)points[0].y)) / dx;
S
S		// Work on y values
S		c0 = cross[0].y;
S		c1 = cross[1].y;
S		c2 = cross[2].y;
S
S		#if GDISP_NEED_CONTROL
S			if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_SELFROTATION)) {
S				switch(gdispGGetOrientation(m->display)) {
S				case GDISP_ROTATE_90:
S					c0 = c1 = c2 = gdispGGetWidth(m->display) - 1;
S					c0 -= cross[0].x;
S					c1 -= cross[1].x;
S					c2 -= cross[2].x;
S					break;
S				case GDISP_ROTATE_180:
S					c0 = c1 = c2 = gdispGGetHeight(m->display) - 1;
S					c0 -= cross[0].y;
S					c1 -= cross[1].y;
S					c2 -= cross[2].y;
S					break;
S				case GDISP_ROTATE_270:
S					c0 = cross[0].x;
S					c1 = cross[1].x;
S					c2 = cross[2].x;
S					break;
S                default:
S                    break;
S				}
S			}
S		#endif
S
S		m->caldata.ay = ((float)(c0 - c2) * (float)(points[1].y - points[2].y)
S							- (float)(c1 - c2) * (float)(points[0].y - points[2].y)) / dx;
S		m->caldata.by = ((float)(c1 - c2) * (float)(points[0].x - points[2].x)
S							- (float)(c0 - c2) * (float)(points[1].x - points[2].x)) / dx;
S		m->caldata.cy = (c0 * ((float)points[1].x * (float)points[2].y - (float)points[2].x * (float)points[1].y)
S							- c1 * ((float)points[0].x * (float)points[2].y - (float)points[2].x * (float)points[0].y)
S							+ c2 * ((float)points[0].x * (float)points[1].y - (float)points[1].x * (float)points[0].y)) / dx;
S	}
S
S	static uint32_t CalibrateMouse(GMouse *m) {
S		coord_t		w, h;
S		point		cross[4];		// The locations of the test points on the display
S		point		points[4];		// The x, y readings obtained from the mouse for each test point
S		uint32_t	err;
S		#if GDISP_NEED_TEXT
S			font_t		font1, font2;
S		#endif
S
S		#if GDISP_NEED_TEXT
S			font1 = gdispOpenFont(CALIBRATION_FONT);
S			if (!font1) font1 = gdispOpenFont("*");
S			font2 = gdispOpenFont(CALIBRATION_FONT2);
S			if (!font2) font2 = gdispOpenFont("*");
S		#endif
S		err = 0;
S		w  =  gdispGGetWidth(m->display);
S		h  =  gdispGGetHeight(m->display);
S		#if GDISP_NEED_CLIP
S			gdispGSetClip(m->display, 0, 0, w, h);
S		#endif
S
S		// Ensure we get minimally processed readings for the calibration
S		m->flags |= GMOUSE_FLG_IN_CAL;
S
S		// Set up our calibration locations
S        if ((gmvmt(m)->d.flags & GMOUSE_VFLG_CAL_EXTREMES)) {
S            cross[0].x = 0;		cross[0].y = 0;
S            cross[1].x = w-1;	cross[1].y = 0;
S            cross[2].x = w-1;	cross[2].y = h-1;
S            cross[3].x = w/2;	cross[3].y = h/2;
S        } else {
S            cross[0].x = w/4;	cross[0].y = h/4;
S            cross[1].x = w-w/4;	cross[1].y = h/4;
S            cross[2].x = w-w/4;	cross[2].y = h-h/4;
S            cross[3].x = w/2;	cross[3].y = h/2;
S        }
S
S		// Set up the calibration display
S		gdispGClear(m->display, Blue);
S		#if GDISP_NEED_TEXT
S			gdispGFillStringBox(m->display,
S								0, CALIBRATION_TITLE_Y, w, CALIBRATION_TITLE_HEIGHT,
S								CALIBRATION_TITLE, font1,  CALIBRATION_TITLE_COLOR, CALIBRATION_TITLE_BACKGROUND,
S								justifyCenter);
S		#endif
S
S		// Calculate the calibration
S		{
S			unsigned	i, maxpoints;
S
S			maxpoints = (gmvmt(m)->d.flags & GMOUSE_VFLG_CAL_TEST) ? 4 : 3;
S
S			// Loop through the calibration points
S			for(i = 0; i < maxpoints; i++) {
S				int32_t		px, py;
S				unsigned	j;
S
S				// Draw the current calibration point
S				CalibrationCrossDraw(m, &cross[i]);
S
S				// Get a valid "point pressed" average reading
S				do {
S					// Wait for the mouse to be pressed
S					while(!(m->r.buttons & GINPUT_MOUSE_BTN_LEFT))
S						gfxSleepMilliseconds(CALIBRATION_POLL_PERIOD);
S
S					// Sum samples taken every CALIBRATION_POLL_PERIOD milliseconds while the mouse is down
S					px = py = j = 0;
S					while((m->r.buttons & GINPUT_MOUSE_BTN_LEFT)) {
S						// Limit sampling period to prevent overflow
S						if (j < CALIBRATION_MAXPRESS_PERIOD/CALIBRATION_POLL_PERIOD) {
S							px += m->r.x;
S							py += m->r.y;
S							j++;
S						}
S						gfxSleepMilliseconds(CALIBRATION_POLL_PERIOD);
S					}
S
S					// Ignore presses less than CALIBRATION_MINPRESS_PERIOD milliseconds
S				} while(j < CALIBRATION_MINPRESS_PERIOD/CALIBRATION_POLL_PERIOD);
S				points[i].x = px / j;
S				points[i].y = py / j;
S
S				// Clear the current calibration point
S				CalibrationCrossClear(m, &cross[i]);
S			}
S		}
S
S		// Apply 3 point calibration algorithm
S		CalibrationCalculate(m, cross, points);
S
S		 /* Verification of correctness of calibration (optional) :
S		 *  See if the 4th point (Middle of the screen) coincides with the calibrated
S		 *  result. If point is within +/- Squareroot(ERROR) pixel margin, then successful calibration
S		 *  Else return the error.
S		 */
S		if ((gmvmt(m)->d.flags & GMOUSE_VFLG_CAL_TEST)) {
S			const GMouseJitter	*pj;
S
S			// Are we in pen or finger mode
S			pj = (m->flags & GMOUSE_FLG_FINGERMODE) ? &gmvmt(m)->finger_jitter : &gmvmt(m)->pen_jitter;
S
S			// Transform the co-ordinates
S			CalibrationTransform((GMouseReading *)&points[3], &m->caldata);
S
S			// Do we need to rotate the reading to match the display
S			#if GDISP_NEED_CONTROL
S				if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_SELFROTATION)) {
S					coord_t		t;
S
S					switch(gdispGGetOrientation(m->display)) {
S						case GDISP_ROTATE_0:
S							break;
S						case GDISP_ROTATE_90:
S							t = points[3].x;
S							points[3].x = w - 1 - points[3].y;
S							points[3].y = t;
S							break;
S						case GDISP_ROTATE_180:
S							points[3].x = w - 1 - points[3].x;
S							points[3].y = h - 1 - points[3].y;
S							break;
S						case GDISP_ROTATE_270:
S							t = points[3].y;
S							points[3].y = h - 1 - points[3].x;
S							points[3].x = t;
S							break;
S						default:
S							break;
S					}
S				}
S			#endif
S
S			// Is this accurate enough?
S			err = (points[3].x - cross[3].x) * (points[3].x - cross[3].x) + (points[3].y - cross[3].y) * (points[3].y - cross[3].y);
S			if (err > (uint32_t)pj->calibrate * (uint32_t)pj->calibrate) {
S				#if GDISP_NEED_TEXT
S					// No - Display error and return
S					gdispGFillStringBox(m->display,
S											0, CALIBRATION_ERROR_Y, w, CALIBRATION_ERROR_HEIGHT,
S											CALIBRATION_ERROR_TEXT, font2,  CALIBRATION_ERROR_COLOR, CALIBRATION_ERROR_BACKGROUND,
S											justifyCenter);
S					gfxSleepMilliseconds(CALIBRATION_ERROR_DELAY);
S				#endif
S			} else
S				err = 0;
S		}
S
S		// We are done calibrating
S		#if GDISP_NEED_TEXT
S			gdispCloseFont(font1);
S			gdispCloseFont(font2);
S		#endif
S		m->flags &= ~GMOUSE_FLG_IN_CAL;
S		m->flags |= GMOUSE_FLG_CLIP;
S
S		// Save the calibration data (if possible)
S		if (!err) {
S			m->flags |= GMOUSE_FLG_CALIBRATE;
S
S			#if GINPUT_TOUCH_USER_CALIBRATION_SAVE
S				SaveMouseCalibration(gdriverGetDriverInstanceNumber((GDriver *)m), &m->caldata, sizeof(GMouseCalibration));
S			#endif
S			if (gmvmt(m)->calsave)
S				gmvmt(m)->calsave(m, &m->caldata, sizeof(GMouseCalibration));
S		}
S
S		// Force an initial reading
S		m->r.buttons = 0;
S		GetMouseReading(m);
S
S		// Clear the screen using the GWIN default background color
S		#if GFX_USE_GWIN
S			gdispGClear(m->display, gwinGetDefaultBgColor());
S		#else
S			gdispGClear(m->display, GDISP_STARTUP_COLOR);
S		#endif
S
S		return err;
S	}
S#endif
S
Svoid _gmouseInit(void) {
S	// GINPUT_MOUSE_DRIVER_LIST is defined - create each driver instance
S	#if defined(GINPUT_MOUSE_DRIVER_LIST)
S		{
S			int		i;
S			typedef const GMouseVMT const GMOUSEVMTLIST[1];
S
S			extern GMOUSEVMTLIST GINPUT_MOUSE_DRIVER_LIST;
S			static const GMouseVMT * const dclist[] = {GINPUT_MOUSE_DRIVER_LIST};
S
S			for(i = 0; i < sizeof(dclist)/sizeof(dclist[0]); i++) {
S                if (!(dclist[i]->d.flags & GMOUSE_VFLG_DYNAMICONLY))
S					gdriverRegister(&dclist[i]->d, GDISP);
S			}
S		}
S
S	// One and only one mouse
S	#else
S		{
S			extern const GMouseVMT const GMOUSEVMT_OnlyOne[1];
S
S            if (!(GMOUSEVMT_OnlyOne->d.flags & GMOUSE_VFLG_DYNAMICONLY))
S					gdriverRegister(&GMOUSEVMT_OnlyOne->d, GDISP);
S		}
S	#endif
S
S}
S
Svoid _gmouseDeinit(void) {
S	gtimerDeinit(&MouseTimer);
S}
S
Sbool_t _gmouseInitDriver(GDriver *g, void *display, unsigned driverinstance, unsigned systeminstance) {
S    #define m   ((GMouse *)g)
S    (void) systeminstance;
S
S	// The initial display is passed in the parameter for mice
S	m->display = display;
S
S	#if !GINPUT_TOUCH_NOTOUCH
S		// Should this mouse start in finger mode? (according to the VMT)
S		if ((gmvmt(m)->d.flags & GMOUSE_VFLG_DEFAULTFINGER))
S			m->flags |= GMOUSE_FLG_FINGERMODE;
S	#endif
S
S	// Init the mouse
S    if (!gmvmt(m)->init((GMouse *)g, driverinstance))
S        return FALSE;
S
S	// Ensure the Poll timer is started
S	if (!gtimerIsActive(&MouseTimer))
S		gtimerStart(&MouseTimer, MousePoll, 0, TRUE, GINPUT_MOUSE_POLL_PERIOD);
S
S    return TRUE;
S
S    #undef m
S}
S
Svoid _gmousePostInitDriver(GDriver *g) {
S    #define     m   ((GMouse *)g)
S
S	#if !GINPUT_TOUCH_STARTRAW
S		m->flags |= GMOUSE_FLG_CLIP;
S	#endif
S
S    #if !GINPUT_TOUCH_NOCALIBRATE && !GINPUT_TOUCH_STARTRAW
S        if ((gmvmt(m)->d.flags & GMOUSE_VFLG_CALIBRATE)) {
S            #if GINPUT_TOUCH_USER_CALIBRATION_LOAD
S                if (LoadMouseCalibration(gdriverGetDriverInstanceNumber((GDriver *)m), &m->caldata, sizeof(GMouseCalibration)))
S                    m->flags |= GMOUSE_FLG_CALIBRATE;
S                else
S            #endif
S            if (gmvmt(m)->calload && gmvmt(m)->calload(m, &m->caldata, sizeof(GMouseCalibration)))
S                m->flags |= GMOUSE_FLG_CALIBRATE;
S			#if !GINPUT_TOUCH_NOCALIBRATE_GUI
S				else
S					while (CalibrateMouse(m));
S			#endif
S        }
S    #endif
S
S    // Get the first reading
S    GetMouseReading(m);
S
S    #undef m
S}
S
Svoid _gmouseDeInitDriver(GDriver *g) {
S    (void) g;
S}
S
SGSourceHandle ginputGetMouse(unsigned instance) {
S	if (instance == GMOUSE_ALL_INSTANCES)
S		return (GSourceHandle)&MouseTimer;
S    return (GSourceHandle)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance);
S}
S
Svoid ginputSetMouseDisplay(unsigned instance, GDisplay *g) {
S	GMouse *m;
S
S	if (!(m = (GMouse *)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance)))
S		return;
S
S	m->display = g ? g : GDISP;
S}
S
SGDisplay *ginputGetMouseDisplay(unsigned instance) {
S	GMouse *m;
S
S	if (!(m = (GMouse *)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance)))
S		return 0;
S
S	return m->display;
S}
S
Sbool_t ginputGetMouseStatus(unsigned instance, GEventMouse *pe) {
S	GMouse *m;
S
S	// Win32 threads don't seem to recognise priority and/or pre-emption
S	// so we add a sleep here to prevent 100% polled applications from locking up.
S	gfxSleepMilliseconds(1);
S
S	if (!(m = (GMouse *)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance)))
S		return FALSE;
S
S	#if !GINPUT_TOUCH_NOCALIBRATE_GUI
S		if ((m->flags & GMOUSE_FLG_IN_CAL))
S			return FALSE;
S	#endif
S
S	#if !GINPUT_TOUCH_NOTOUCH
S		pe->type = (gmvmt(m)->d.flags & GMOUSE_VFLG_TOUCH) ? GEVENT_TOUCH : GEVENT_MOUSE;
S	#else
S		pe->type = GEVENT_MOUSE;
S	#endif
S	pe->x = m->r.x;
S	pe->y = m->r.y;
S	pe->z = m->r.z;
S	pe->buttons = m->r.buttons;
S	pe->display = m->display;
S	return TRUE;
S}
S
S#if !GINPUT_TOUCH_NOTOUCH
S	void ginputSetFingerMode(unsigned instance, bool_t on) {
S		GMouse *m;
S
S		if (!(m = (GMouse *)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance)))
S			return;
S
S		if (on)
S			m->flags |= GMOUSE_FLG_FINGERMODE;
S		else
S			m->flags &= ~GMOUSE_FLG_FINGERMODE;
S
S	}
S#endif
S
S#if !GINPUT_TOUCH_NOCALIBRATE_GUI
S	uint32_t ginputCalibrateMouse(unsigned instance) {
S		GMouse *m;
S
S		// Find the instance
S		if (!(m = (GMouse *)gdriverGetInstance(GDRIVER_TYPE_MOUSE, instance)))
S			return 0;
S
S		// Check it needs calibration
S        if (!(gmvmt(m)->d.flags & GMOUSE_VFLG_CALIBRATE))
S        	return 0;
S
S		return CalibrateMouse(m);
S	}
S#endif
S
S/* Wake up the mouse driver from an interrupt service routine (there may be new readings available) */
Svoid _gmouseWakeup(GMouse *m) {
S	if (m)
S		m->flags |= GMOUSE_FLG_NEEDREAD;
S	gtimerJab(&MouseTimer);
S}
S
S/* Wake up the mouse driver from an interrupt service routine (there may be new readings available) */
Svoid _gmouseWakeupI(GMouse *m) {
S	if (m)
S		m->flags |= GMOUSE_FLG_NEEDREAD;
S	gtimerJabI(&MouseTimer);
S}
S
N#endif /* GFX_USE_GINPUT && GINPUT_NEED_MOUSE */
N/** @} */
L 10 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
N#include "ginput_keyboard.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_keyboard.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_keyboard.c
N * @brief   GINPUT keyboard code.
N */
N
N// We need to include stdio.h below for MICROCODE_DEBUG. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD
X#if 0 && 0
S
S#define MICROCODE_DEBUG		FALSE
S
S#if MICROCODE_DEBUG
S	#include <stdio.h>
S#endif
S
S// Get the keyboard driver interface
S#include "ginput_driver_keyboard.h"
S#include "ginput_keyboard_microcode.h"
S
S// The keyboard poll timer
Sstatic GTIMER_DECL(KeyboardTimer);
S
Sstatic void SendKeyboardEventToListener(GSourceListener	*psl, GKeyboard *k) {
S	GEventKeyboard		*pe;
S	int					i;
S
S	// If there is no event buffer just mark a missed event
S	if (!(pe = (GEventKeyboard *)geventGetEventBuffer(psl))) {
S		// This listener is missing - save the meta events that have happened
S		psl->srcflags |= GKEYSTATE_MISSED_EVENT;
S		return;
S	}
S
S	if ((psl->listenflags & GLISTEN_KEYRAW)) {
S		pe->type = GEVENT_KEYBOARD;
S		pe->bytecount = k->cntsc;
S		for(i = 0; i < k->cntsc; i++)	pe->c[i] = k->sc[i];
S		for(; i < 8; i++)				pe->c[i] = 0;
S		pe->keystate = k->keystate | psl->srcflags | GKEYSTATE_RAW;
S		psl->srcflags = 0;
S		return;
S	}
S
S	if ((psl->listenflags & GLISTEN_KEYREPEATSOFF) && (k->keystate & GKEYSTATE_REPEAT))
S		return;
S
S	if ((psl->listenflags & GLISTEN_KEYNOSPECIALS) && (k->keystate & GKEYSTATE_SPECIAL))
S		return;
S
S	if (!(psl->listenflags & GLISTEN_KEYUP) && (k->keystate & GKEYSTATE_KEYUP))
S		k->cntc = 0;
S
S	if (!(psl->listenflags & GLISTEN_KEYTRANSITIONS) && !k->cntc)
S		return;
S
S	pe->type = GEVENT_KEYBOARD;
S	pe->bytecount = k->cntc;
S	for(i = 0; i < k->cntc; i++)	pe->c[i] = k->c[i];
S	for(; i < 8; i++)				pe->c[i] = 0;
S	pe->keystate = k->keystate | psl->srcflags;
S	psl->srcflags = 0;
S	geventSendEvent(psl);
S}
S
Sstatic void SendKeyboardEvent(GKeyboard *k) {
S	GSourceListener	*psl;
S
S	// Send to the "All Keyboards" source listeners
S	psl = 0;
S	while ((psl = geventGetSourceListener((GSourceHandle)&KeyboardTimer, psl)))
S		SendKeyboardEventToListener(psl, k);
S
S	// Send to the keyboard specific source listeners
S	psl = 0;
S	while ((psl = geventGetSourceListener((GSourceHandle)k, psl)))
S		SendKeyboardEventToListener(psl, k);
S}
S
S#define FLAG_ERROR		0x01
S#define FLAG_INIT		0x02
S
S#if GKEYBOARD_LAYOUT_OFF
S	static void microengine(GKeyboard *k, uint8_t code, uint8_t flags) {
S		if (flags)
S			return;
S
S		// Just send an event using the char
S		k->c[0] = k->sc[0] = code;
S		k->cntc = k->cntsc = 1;
S		SendKeyboardEvent(k);
S		k->cntc = k->cntsc = 0;
S	}
S#else
S	static void microengine(GKeyboard *k, uint8_t code, uint8_t flags) {
S		const uint8_t	*pc;
S		const uint8_t	*nrec;
S		uint8_t			ver, diff, p1, p2;
S		#if MICROCODE_DEBUG
S			unsigned	cnt;
S		#endif
S
S		pc = k->pLayout;
S		if (!pc) {
S			if (flags)
S				return;
S
S			// Default is to just send an event using the char
S			k->c[0] = k->sc[0] = code;
S			k->cntc = k->cntsc = 1;
S			SendKeyboardEvent(k);
S			k->cntc = k->cntsc = 0;
S			return;
S		}
S
S		// Check the layout header
S		if (*pc++ != KMC_HEADERSTART || *pc++ != KMC_HEADER_ID1 || *pc++ != KMC_HEADER_ID2)
S			return;
S
S		// We only understand version 1 currently
S		ver = *pc++;
S		if (ver < KMC_HEADER_VER_MIN || ver > KMC_HEADER_VER_MAX)
S			return;
S
S		// Setup
S		diff = code;
S		if (k->cntsc >= sizeof(k->sc))
S			flags |= FLAG_ERROR;
S		else
S			k->sc[k->cntsc++] = code;
S
S		#if MICROCODE_DEBUG
S			cnt = 0;
S		#endif
S
S		while(*pc++ == KMC_RECORDSTART) {
S			// Get the record length
S			p1 = *pc++;
S			if (!p1) break;
S			nrec = pc + p1;
S
S			#if MICROCODE_DEBUG
S				cnt++;
S			#endif
S
S			while(pc < nrec) {
S				switch(*pc++) {
S				case KMC_TEST_INIT:
S					if (!(flags & FLAG_INIT))  goto nextrecord;
S					break;
S				case KMC_TEST_ERROR:
S					if (!(flags & FLAG_ERROR)) goto nextrecord;
S					break;
S				case KMC_TEST_CODE:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					if (p1 != code) goto nextrecord;
S					diff = 0;
S					break;
S				case KMC_TEST_CODERANGE:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					p2 = *pc++;
S					if (code < p1 || code > p2) goto nextrecord;
S					diff = code - p1;
S					break;
S				case KMC_TEST_CODETABLE:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					for(p2 = 0; ; p2++, p1--, pc++) {
S						if (!p1) goto nextrecord;
S						if (*pc == code) break;
S					}
S					pc += p1;
S					diff = p2;
S					break;
S				case KMC_TEST_STATEBIT:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((k->keystate & (1 << (p1 & 31)))) goto nextrecord;
S					} else {
S						if (!(k->keystate & (1 << (p1 & 31)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_STATEOR:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if (!(k->keystate & (1 << (p1 & 31)))) break;
S					} else {
S						if ((k->keystate & (1 << (p1 & 31)))) break;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if (!(k->keystate & (1 << (p2 & 31)))) break;
S					} else {
S						if ((k->keystate & (1 << (p2 & 31)))) break;
S					}
S					goto nextrecord;
S				case KMC_TEST_STATEAND:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((k->keystate & (1 << (p1 & 31)))) goto nextrecord;
S					} else {
S						if (!(k->keystate & (1 << (p1 & 31)))) goto nextrecord;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if ((k->keystate & (1 << (p2 & 31)))) goto nextrecord;
S					} else {
S						if (!(k->keystate & (1 << (p2 & 31)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_LAYOUTBIT:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((k->laystate & (1 << (p1 & 15)))) goto nextrecord;
S					} else {
S						if (!(k->laystate & (1 << (p1 & 15)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_LAYOUTOR:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if (!(k->laystate & (1 << (p1 & 15)))) break;
S					} else {
S						if ((k->laystate & (1 << (p1 & 15)))) break;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if (!(k->laystate & (1 << (p2 & 15)))) break;
S					} else {
S						if ((k->laystate & (1 << (p2 & 15)))) break;
S					}
S					goto nextrecord;
S				case KMC_TEST_LAYOUTAND:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((k->laystate & (1 << (p1 & 15)))) goto nextrecord;
S					} else {
S						if (!(k->laystate & (1 << (p1 & 15)))) goto nextrecord;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if ((k->laystate & (1 << (p2 & 15)))) goto nextrecord;
S					} else {
S						if (!(k->laystate & (1 << (p2 & 15)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_CODEBIT:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((code & (1 << (p1 & 7)))) goto nextrecord;
S					} else {
S						if (!(code & (1 << (p1 & 7)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_CODEOR:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if (!(code & (1 << (p1 & 7)))) break;
S					} else {
S						if ((code & (1 << (p1 & 7)))) break;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if (!(code & (1 << (p2 & 7)))) break;
S					} else {
S						if ((code & (1 << (p2 & 7)))) break;
S					}
S					goto nextrecord;
S				case KMC_TEST_CODEAND:
S					if (flags != 0) goto nextrecord;
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_CLEAR)) {
S						if ((code & (1 << (p1 & 7)))) goto nextrecord;
S					} else {
S						if (!(code & (1 << (p1 & 7)))) goto nextrecord;
S					}
S					p2 = *pc++;
S					if ((p2 & KMC_BIT_CLEAR)) {
S						if ((code & (1 << (p2 & 7)))) goto nextrecord;
S					} else {
S						if (!(code & (1 << (p2 & 7)))) goto nextrecord;
S					}
S					break;
S				case KMC_TEST_LASTCODE:
S					p1 = *pc++;
S					if (k->cntsc < 2) goto nextrecord;
S					if (p1 != k->sc[k->cntsc-2]) goto nextrecord;
S					break;
S				case KMC_TEST_SHIFT:
S					if ((k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					goto nextrecord;
S				case KMC_TEST_NOSHIFT:
S					if (!(k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					goto nextrecord;
S				case KMC_TEST_CTRL:
S					if ((k->keystate & (GKEYSTATE_CTRL_L|GKEYSTATE_CTRL_R))) break;
S					goto nextrecord;
S				case KMC_TEST_NOCTRL:
S					if (!(k->keystate & (GKEYSTATE_CTRL_L|GKEYSTATE_CTRL_R))) break;
S					goto nextrecord;
S				case KMC_TEST_ALT:
S					if ((k->keystate & (GKEYSTATE_ALT_L|GKEYSTATE_ALT_R))) break;
S					goto nextrecord;
S				case KMC_TEST_NOALT:
S					if (!(k->keystate & (GKEYSTATE_ALT_L|GKEYSTATE_ALT_R))) break;
S					goto nextrecord;
S				case KMC_TEST_CAPS:
S					if ((k->keystate & GKEYSTATE_CAPSLOCK)) {
S						if (!(k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					} else {
S						if ((k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					}
S					goto nextrecord;
S				case KMC_TEST_NOCAPS:
S					if ((k->keystate & GKEYSTATE_CAPSLOCK)) {
S						if ((k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					} else {
S						if (!(k->keystate & (GKEYSTATE_SHIFT_L|GKEYSTATE_SHIFT_R))) break;
S					}
S					goto nextrecord;
S				case KMC_TEST_NUMLOCK:
S					if ((k->keystate & GKEYSTATE_NUMLOCK)) break;
S					goto nextrecord;
S				case KMC_TEST_NONUMLOCK:
S					if (!(k->keystate & GKEYSTATE_NUMLOCK)) break;
S					goto nextrecord;
S
S				case KMC_ACT_STOP:
S					#if MICROCODE_DEBUG
S						fprintf(stderr, "Executed STOP:  Records=%2u Flags=0x%02X Code=0x%02X\n", cnt, flags, code); fflush(stderr);
S					#endif
S					return;
S				case KMC_ACT_DONE:
S					SendKeyboardEvent(k);
S					k->cntc = k->cntsc = 0;
S					k->keystate &= ~(GKEYSTATE_KEYUP|GKEYSTATE_SPECIAL);
S					#if MICROCODE_DEBUG
S						fprintf(stderr, "Executed DONE:  Records=%2u Flags=0x%02X Code=0x%02X\n", cnt, flags, code); fflush(stderr);
S					#endif
S					return;
S				case KMC_ACT_RESET:
S					k->cntc = k->cntsc = 0;
S					k->keystate &= ~(GKEYSTATE_KEYUP|GKEYSTATE_SPECIAL);
S					break;
S				case KMC_ACT_STATEBIT:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_INVERT))
S						k->keystate ^= (1 << (p1 & 31));
S					else if ((p1 & KMC_BIT_CLEAR))
S						k->keystate &= ~(1 << (p1 & 31));
S					else
S						k->keystate |= (1 << (p1 & 31));
S					break;
S				case KMC_ACT_LAYOUTBIT:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_INVERT))
S						k->laystate ^= (1 << (p1 & 15));
S					else if ((p1 & KMC_BIT_CLEAR))
S						k->laystate &= ~(1 << (p1 & 15));
S					else
S						k->laystate |= (1 << (p1 & 15));
S					break;
S				case KMC_ACT_CODEBIT:
S					p1 = *pc++;
S					if ((p1 & KMC_BIT_INVERT))
S						code ^= (1 << (p1 & 7));
S					else if ((p1 & KMC_BIT_CLEAR))
S						code &= ~(1 << (p1 & 7));
S					else
S						code |= (1 << (p1 & 7));
S					break;
S				case KMC_ACT_CHAR:
S					if (k->cntc >= sizeof(k->c)) goto codeerror;
S					k->c[k->cntc++] = *pc++;
S					break;
S				case KMC_ACT_CHARCODE:
S					if (k->cntc >= sizeof(k->c)) goto codeerror;
S					k->c[k->cntc++] = code;
S					break;
S				case KMC_ACT_CHARRANGE:
S					if (k->cntc >= sizeof(k->c)) goto codeerror;
S					k->c[k->cntc++] = diff + *pc++;
S					break;
S				case KMC_ACT_CHARTABLE:
S					p1 = *pc++;
S					if (diff < p1) {
S						if (k->cntc >= sizeof(k->c)) goto codeerror;
S						k->c[k->cntc++] = pc[diff];
S					}
S					pc += p1;
S					break;
S				case KMC_ACT_CLEAR:
S					k->cntc = 0;
S					break;
S				case KMC_ACT_CHARADD:
S					p1 = *pc++;
S					if (!k->cntc)
S						k->c[k->cntc++] = 0;
S					k->c[k->cntc-1] = k->c[k->cntc-1] * p1 + diff;
S					break;
S				case KMC_ACT_DATA:
S					p1 = *pc++;
S					if (gkvmt(k)->putdata)
S						gkvmt(k)->putdata(k, p1);
S					break;
S
S				default:
S				codeerror:
S					#if MICROCODE_DEBUG
S						fprintf(stderr, "Executed ERROR: Records=%2u Flags=0x%02X Code=0x%02X\n", cnt, flags, code);	cnt = 0; fflush(stderr);
S					#endif
S
S					// Prevent recursion
S					if (flags & FLAG_ERROR)
S						return;
S
S					// Process as an error
S					flags |= FLAG_ERROR;
S					nrec = k->pLayout + 4;			// Jump back to the end of the header to process the error
S					goto nextrecord;				// Nothing left to do here.
S				}
S			}
S
S		nextrecord:
S			pc = nrec;
S		}
S
S		#if MICROCODE_DEBUG
S			fprintf(stderr, "Executed END:   Records=%2u Flags=0x%02X Code=0x%02X\n", cnt, flags, code); fflush(stderr);
S		#endif
S	}
S#endif
S
Sstatic void KeyboardPoll(void *param) {
S	GKeyboard *	k;
S	uint8_t		scancodes[8];
S	int			sz, i;
S	(void) 		param;
S
S	for(k = (GKeyboard *)gdriverGetNext(GDRIVER_TYPE_KEYBOARD, 0); k; k = (GKeyboard *)gdriverGetNext(GDRIVER_TYPE_KEYBOARD, (GDriver *)k)) {
S		if (!(gkvmt(k)->d.flags & GKEYBOARD_VFLG_NOPOLL) || (k->flags & GKEYBOARD_FLG_NEEDREAD)) {
S			k->flags &= ~GKEYBOARD_FLG_NEEDREAD;
S			sz = gkvmt(k)->getdata(k, scancodes, sizeof(scancodes));
S			for(i = 0; i < sz; i++)
S				microengine(k, scancodes[i], 0);
S		}
S	}
S}
S
Svoid _gkeyboardInit(void) {
S	// GINPUT_KEYBOARD_DRIVER_LIST is defined - create each driver instance
S	#if defined(GINPUT_KEYBOARD_DRIVER_LIST)
S		{
S			int		i;
S			typedef const GKeyboardVMT const GKEYBOARDVMTLIST[1];
S
S			extern GKEYBOARDVMTLIST GINPUT_KEYBOARD_DRIVER_LIST;
S			static const GKeyboardVMT *	const dclist[] = {GINPUT_KEYBOARD_DRIVER_LIST};
S
S			for(i = 0; i < sizeof(dclist)/sizeof(dclist[0]); i++) {
S                if (!(dclist[i]->d.flags & GKEYBOARD_VFLG_DYNAMICONLY))
S					gdriverRegister(&dclist[i]->d, 0);
S			}
S		}
S
S	// One and only one mouse
S	#else
S		{
S			extern const GKeyboardVMT const GKEYBOARDVMT_OnlyOne[1];
S
S            if (!(GKEYBOARDVMT_OnlyOne->d.flags & GKEYBOARD_VFLG_DYNAMICONLY))
S					gdriverRegister(&GKEYBOARDVMT_OnlyOne->d, 0);
S		}
S	#endif
S
S}
S
Svoid _gkeyboardDeinit(void) {
S	gtimerDeinit(&KeyboardTimer);
S}
S
Sbool_t _gkeyboardInitDriver(GDriver *g, void *param, unsigned driverinstance, unsigned systeminstance) {
S    #define k   ((GKeyboard *)g)
S	(void) param;
S    (void) systeminstance;
S
S	// The initial keyboard layout comes from the VMT
S	k->pLayout = gkvmt(k)->defLayout;
S
S	// Init the mouse
S    if (!gkvmt(k)->init((GKeyboard *)g, driverinstance))
S        return FALSE;
S
S	// Ensure the Poll timer is started
S	if (!gtimerIsActive(&KeyboardTimer))
S		gtimerStart(&KeyboardTimer, KeyboardPoll, 0, TRUE, GINPUT_KEYBOARD_POLL_PERIOD);
S
S    return TRUE;
S
S    #undef k
S}
S
Svoid _gkeyboardPostInitDriver(GDriver *g) {
S    #define     k   ((GKeyboard *)g)
S
S	// Run the init sequence from the layout microcode.
S	microengine(k, 0, FLAG_INIT);
S
S    #undef k
S}
S
Svoid _gkeyboardDeInitDriver(GDriver *g) {
S    (void) g;
S}
S
SGSourceHandle ginputGetKeyboard(unsigned instance) {
S	if (instance == GKEYBOARD_ALL_INSTANCES)
S		return (GSourceHandle)&KeyboardTimer;
S    return (GSourceHandle)gdriverGetInstance(GDRIVER_TYPE_KEYBOARD, instance);
S}
S
Sbool_t ginputGetKeyboardStatus(unsigned instance, GEventKeyboard *pe) {
S	GKeyboard *k;
S
S	// Win32 threads don't seem to recognise priority and/or pre-emption
S	// so we add a sleep here to prevent 100% polled applications from locking up.
S	gfxSleepMilliseconds(1);
S
S	if (!(k = (GKeyboard *)gdriverGetInstance(GDRIVER_TYPE_KEYBOARD, instance)))
S		return FALSE;
S
S	pe->type = GEVENT_KEYBOARD;
S	// TODO
S	return TRUE;
S}
S
S#if !GKEYBOARD_LAYOUT_OFF
S	bool_t ginputSetKeyboardLayout(unsigned instance, const void *pLayout) {
S		GKeyboard *k;
S
S		if (!(k = (GKeyboard *)gdriverGetInstance(GDRIVER_TYPE_KEYBOARD, instance)))
S			return FALSE;
S
S		if (pLayout)
S			k->pLayout = pLayout;
S		else
S			k->pLayout = gkvmt(k)->defLayout;
S
S		return TRUE;
S	}
S#endif
S
S/* Wake up the keyboard driver from an interrupt service routine (there may be new readings available) */
Svoid _gkeyboardWakeup(GKeyboard *k) {
S	if (k)
S		k->flags |= GKEYBOARD_FLG_NEEDREAD;
S	gtimerJab(&KeyboardTimer);
S}
S
S/* Wake up the keyboard driver from an interrupt service routine (there may be new readings available) */
Svoid _gkeyboardWakeupI(GKeyboard *k) {
S	if (k)
S		k->flags |= GKEYBOARD_FLG_NEEDREAD;
S	gtimerJabI(&KeyboardTimer);
S}
S
N#endif /* GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD */
L 11 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
N#include "ginput_keyboard_microcode.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_keyboard_microcode.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_keyboard_microcode.c
N * @brief   GINPUT keyboard standard microcode definitions.
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD && !GKEYBOARD_LAYOUT_OFF
X#if 0 && 0 && !0
S
S#include "ginput_keyboard_microcode.h"
S
S#if GKEYBOARD_LAYOUT_SCANCODE2_US
S
S	#error "Keyboard Layout SCANCODE2_US is not fully implemented yet"
S
S	uint8_t	KeyboardLayout_ScancodeSet2_US[] = {
S		KMC_HEADERSTART, KMC_HEADER_ID1, KMC_HEADER_ID2, KMC_HEADER_VER_1,
S
S		KMC_RECORDSTART, 0x03,													// Handle E0 codes (ignore for now assuming a single character)
S			KMC_TEST_LASTCODE, 0xE0,
S			KMC_ACT_DONE,
S		KMC_RECORDSTART, 0x03,
S			KMC_TEST_CODE, 0xE0,
S			KMC_ACT_STOP,
S
S		KMC_RECORDSTART, 0x03,													// Handle E1 codes (ignore for now assuming a single character)
S			KMC_TEST_LASTCODE, 0xE1,
S			KMC_ACT_DONE,
S		KMC_RECORDSTART, 0x03,
S			KMC_TEST_CODE, 0xE1,
S			KMC_ACT_STOP,
S
S		KMC_RECORDSTART, 0x03,													// Handle E2 codes (ignore for now assuming a single character)
S			KMC_TEST_LASTCODE, 0xE2,
S			KMC_ACT_DONE,
S		KMC_RECORDSTART, 0x03,
S			KMC_TEST_CODE, 0xE2,
S			KMC_ACT_STOP,
S
S		KMC_RECORDSTART, 0x06,													// KeyUp
S			KMC_TEST_CODEBIT, 0x80,
S			KMC_ACT_STATEBIT, GKEYSTATE_KEYUP_BIT,
S			KMC_ACT_CODEBIT, 0x80 | KMC_BIT_CLEAR,
S
S		KMC_RECORDSTART, 0x05,													// CapsLock (on keyup to avoid repeats)
S			KMC_TEST_CODE, 0x58,
S			KMC_TEST_STATEBIT, GKEYSTATE_KEYUP_BIT | KMC_BIT_CLEAR,
S			KMC_ACT_DONE,
S		KMC_RECORDSTART, 0x05,
S			KMC_TEST_CODE, 0x58,
S			KMC_ACT_STATEBIT, GKEYSTATE_CAPSLOCK_BIT | KMC_BIT_INVERT,
S			KMC_ACT_DONE,
S
S		KMC_RECORDSTART, 0x05,													// Detect Shift Keys
S			//KMC_ACT_LAYOUTBIT, SCANCODESET2_LAYOUT_E0_BIT | KMC_BIT_CLEAR,
S			KMC_ACT_STOP,
S
S		KMC_RECORDSTART, 0x03,
S			KMC_ACT_CHARRANGE, 0x00,
S			KMC_ACT_DONE,
S
S		KMC_RECORDSTART, 0x00,
S	};
S#endif // GKEYBOARD_LAYOUT_SCANCODE2_US
S
N#endif // GFX_USE_GINPUT && GINPUT_NEED_KEYBOARD && !GKEYBOARD_LAYOUT_OFF
L 12 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
N#include "ginput_toggle.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_toggle.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_toggle.c
N * @brief   GINPUT toggle code.
N *
N * @defgroup Toggle Toggle
N * @ingroup GINPUT
N * @{
N */
N#include "../../gfx.h"
N
N#if (GFX_USE_GINPUT && GINPUT_NEED_TOGGLE) || defined(__DOXYGEN__)
X#if (0 && 0) || 0L
S
S#include "ginput_driver_toggle.h"
S
S#define GINPUT_TOGGLE_ISON		0x01
S#define GINPUT_TOGGLE_INVERT	0x02
S
Sstatic GTIMER_DECL(ToggleTimer);
Sstatic struct GEventToggleStatus_t {
S	uint8_t		status;
S} ToggleStatus[GINPUT_TOGGLE_NUM_PORTS];
S
S// Our polling function
Sstatic void TogglePoll(void *param) {
S	(void) param;
S
S	const GToggleConfig	*ptc;
S	GSourceListener	*psl;
S	GEventToggle	*pe;
S	unsigned		i, bits, mask;
S	uint8_t 		state;
S	
S	// Loop while there are bits to get
S	for(ptc = GInputToggleConfigTable, i=0; i < GINPUT_TOGGLE_NUM_PORTS; ptc++) {
S	
S		// Get the next block of bits
S		bits = ginput_lld_toggle_getbits(ptc) ^ ptc->invert;
S
S		// Extract the bits of use
S		for(mask = ptc->mask; i < GINPUT_TOGGLE_NUM_PORTS && mask; mask >>= 1, bits >>= 1) {
S			// Ignore bits not in our mask
S			if (!(mask & 1))
S				continue;
S		
S			// Calculate our new state
S			state = ToggleStatus[i].status & ~GINPUT_TOGGLE_ISON;
S			if (state & GINPUT_TOGGLE_INVERT)
S				bits ^= 1;
S			if (bits & 1)
S				state |= GINPUT_TOGGLE_ISON;
S
S			// Has it changed?
S			if ((state ^ ToggleStatus[i].status) & GINPUT_TOGGLE_ISON) {
S			
S				// Save the new state
S				ToggleStatus[i].status = state;
S				
S				// Send the event to the listeners that are interested.
S				psl = 0;
S				while ((psl = geventGetSourceListener((GSourceHandle)(ToggleStatus+i), psl))) {
S					if (!(pe = (GEventToggle *)geventGetEventBuffer(psl)))
S						continue;
S					if ((state & GINPUT_TOGGLE_ISON)) {
S						if ((psl->listenflags & GLISTEN_TOGGLE_ON)) {
S							pe->type = GEVENT_TOGGLE;
S							pe->instance = i;
S							pe->on = TRUE;
S							geventSendEvent(psl);
S						}
S					} else {
S						if ((psl->listenflags & GLISTEN_TOGGLE_OFF)) {
S							pe->type = GEVENT_TOGGLE;
S							pe->instance = i;
S							pe->on = FALSE;
S							geventSendEvent(psl);
S						}
S					}
S				}
S			}
S
S			// Next toggle switch
S			i++;
S		}
S	}
S}
S
S/* Hardware Toggle/Switch/Button Functions */
SGSourceHandle ginputGetToggle(uint16_t instance) {
S	const GToggleConfig	*ptc;
S
S	if (instance >= GINPUT_TOGGLE_NUM_PORTS)
S		return 0;
S
S	// Do we need to initialise the toggle subsystem?
S	if (!gtimerIsActive(&ToggleTimer)) {
S		for(ptc = GInputToggleConfigTable; ptc < GInputToggleConfigTable+sizeof(GInputToggleConfigTable)/sizeof(GInputToggleConfigTable[0]); ptc++)
S			ginput_lld_toggle_init(ptc);
S		gtimerStart(&ToggleTimer, TogglePoll, 0, TRUE, GINPUT_TOGGLE_POLL_PERIOD);
S	}
S		
S	// OK - return this input
S	return (GSourceHandle)(ToggleStatus+instance);
S}
S
S// If invert is true, invert the on/off sense for the toggle
Svoid ginputInvertToggle(uint16_t instance, bool_t invert) {
S	if (instance >= GINPUT_TOGGLE_NUM_PORTS)
S		return;
S	if (invert) {
S		if (!(ToggleStatus[instance].status & GINPUT_TOGGLE_INVERT)) {
S			ToggleStatus[instance].status |= GINPUT_TOGGLE_INVERT;
S			ToggleStatus[instance].status ^= GINPUT_TOGGLE_ISON;
S		}
S	} else {
S		if ((ToggleStatus[instance].status & GINPUT_TOGGLE_INVERT)) {
S			ToggleStatus[instance].status &= ~GINPUT_TOGGLE_INVERT;
S			ToggleStatus[instance].status ^= GINPUT_TOGGLE_ISON;
S		}
S	}
S}
S
S/* Get the current toggle status.
S *	Returns FALSE on error (eg invalid instance)
S */
Sbool_t ginputGetToggleStatus(uint16_t instance, GEventToggle *ptoggle) {
S	// Win32 threads don't seem to recognise priority and/or pre-emption
S	// so we add a sleep here to prevent 100% polled applications from locking up.
S	gfxSleepMilliseconds(1);
S
S	if (instance >= GINPUT_TOGGLE_NUM_PORTS)
S		return FALSE;
S	ptoggle->type = GEVENT_TOGGLE;
S	ptoggle->instance = instance;
S	ptoggle->on = (ToggleStatus[instance].status & GINPUT_TOGGLE_ISON) ? TRUE : FALSE;
S	return TRUE;
S}
S
S/* Wake up the mouse driver from an interrupt service routine (there may be new readings available) */
Svoid ginputToggleWakeup(void) {
S	gtimerJab(&ToggleTimer);
S}
S
S/* Wake up the mouse driver from an interrupt service routine (there may be new readings available) */
Svoid ginputToggleWakeupI(void) {
S	gtimerJabI(&ToggleTimer);
S}
S
N#endif /* GFX_USE_GINPUT && GINPUT_NEED_TOGGLE */
N/** @} */
L 13 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
N#include "ginput_dial.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_dial.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/**
N * @file    src/ginput/ginput_dial.c
N * @brief   GINPUT dial code.
N *
N * @defgroup Dial Dial
N * @ingroup GINPUT
N * @{
N */
N#include "../../gfx.h"
N
N#if GFX_USE_GINPUT && GINPUT_NEED_DIAL
X#if 0 && 0
S
S#include "ginput_driver_dial.h"
S
Sstatic GTIMER_DECL(DialTimer);
Sstatic struct DialStatus_t {
S	uint16_t	sensitivity;
S	uint16_t	lastvalue;
S	uint16_t	max;
S} DialStatus[GINPUT_DIAL_NUM_PORTS];
S
S// The reading callback function
Sstatic void DialCallback(uint16_t instance, uint16_t rawvalue) {
S	struct DialStatus_t *pds;
S	GSourceListener		*psl;
S	GEventDial			*pe;
S
S	/* Get the information we need */
S	pds = DialStatus+instance;
S
S	/* Range scale - if needed */
S	if (pds->max != GINPUT_DIAL_MAX_VALUE)
S		rawvalue = (uint16_t)((uint32_t)rawvalue * pds->max / GINPUT_DIAL_MAX_VALUE);
S
S	/* Forget about changes below our sensitivity threshold */
S	if (rawvalue >= pds->lastvalue) {
S		if (rawvalue - pds->lastvalue < pds->sensitivity) return;
S	} else {
S		if (pds->lastvalue - rawvalue < pds->sensitivity) return;
S	}
S
S	/* Save the value */
S	pds->lastvalue = rawvalue;
S
S	// Send the event to the listeners that are interested.
S	psl = 0;
S	while ((psl = geventGetSourceListener((GSourceHandle)(DialStatus+instance), psl))) {
S		if (!(pe = (GEventDial *)geventGetEventBuffer(psl)))
S			continue;
S		pe->type = GEVENT_DIAL;
S		pe->instance = instance;
S		pe->value = pds->lastvalue;
S		pe->maxvalue = pds->max;
S		geventSendEvent(psl);
S	}
S}
S
SGSourceHandle ginputGetDial(uint16_t instance) {
S	struct DialStatus_t *pds;
S
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return 0;
S
S	// Do we need to initialise the dial subsystem?
S	if (!gtimerIsActive(&DialTimer)) {
S		for(pds = DialStatus; pds < DialStatus+GINPUT_DIAL_NUM_PORTS; pds++) {
S			pds->max = GINPUT_DIAL_MAX_VALUE;
S#if GINPUT_DIAL_MAX_VALUE < 100
S			pds->sensitivity = 1;
S#else
S			pds->sensitivity = GINPUT_DIAL_MAX_VALUE/100;
S#endif
S			pds->lastvalue = 0;
S		}
S		ginput_lld_dial_init();
S		gtimerStart(&DialTimer, (GTimerFunction)ginput_lld_dial_poll, DialCallback, TRUE, GINPUT_DIAL_POLL_PERIOD);
S	}
S
S	// OK - return this input
S	return (GSourceHandle)(DialStatus+instance);
S}
S
Svoid ginputResetDialRange(uint16_t instance) {
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return;
S
S	ginputSetDialRange(instance, GINPUT_DIAL_MAX_VALUE);
S}
S
Suint16_t ginputGetDialRange(uint16_t instance) {
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return 0;
S
S	return DialStatus[instance].max;
S}
S
Svoid ginputSetDialRange(uint16_t instance, uint16_t max) {
S	struct DialStatus_t *pds;
S
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return;
S
S	pds = DialStatus+instance;
S
S	// Rescale the last value and the sensitivity
S	if (max != pds->max) {
S		pds->lastvalue = (uint16_t)((uint32_t)pds->lastvalue * max / pds->max);
S		pds->sensitivity = (uint16_t)((uint32_t)pds->sensitivity * max / pds->max);
S		pds->max = max;
S	}
S}
S
S/**
S * @brief	Set the level change required before a dial even is generated (threshold)
S * @note	This is done after range scaling
S *
S * @param[in] instance	The ID of the dial input instance
S * @param[in] diff		The amount of level changes
S */
Svoid ginputSetDialSensitivity(uint16_t instance, uint16_t diff) {
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return;
S
S	DialStatus[instance].sensitivity = diff;
S}
S
S/**
S * @brief	Get the current dial status
S *
S * @param[in] instance	The ID of the dial input instance
S * @param[in] pdial		The dial event struct
S *
S * @return	Returns FALSE on an error (eg invalid instance)
S */
Sbool_t ginputGetDialStatus(uint16_t instance, GEventDial *pdial) {
S	if (instance >= GINPUT_DIAL_NUM_PORTS)
S		return FALSE;
S	pdial->type = GEVENT_DIAL;
S	pdial->instance = instance;
S	pdial->value = DialStatus[instance].lastvalue;
S	pdial->maxvalue = DialStatus[instance].max;
S	return TRUE;
S}
S
N#endif /* GFX_USE_GINPUT && GINPUT_NEED_DIAL */
N/** @} */
L 14 "..\..\..\..\..\..\external\ugfx\src\ginput/ginput_mk.c" 2
L 17 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gadc/gadc_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gadc/gadc_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gadc.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gadc/gadc.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GADC
X#if 0
S
S/* Include the driver defines */
S#include "gadc_driver.h"
S
S#if GADC_MAX_HIGH_SPEED_SAMPLERATE > GADC_MAX_SAMPLE_FREQUENCY/2
S	#error "GADC: GADC_MAX_HIGH_SPEED_SAMPLERATE has been set too high. It must be less than half the maximum CPU rate"
S#endif
S
S#define GADC_HSADC_GTIMER		0x8000
S#define GADC_ADC_RUNNING		0x4000
S#define GADC_HSADC_CONVERTION	0x2000
S
Stypedef struct NonTimerData_t {
S	gfxQueueGSyncItem		next;
S	GADCCallbackFunction	callback;
S	union {
S		void				*param;
S		gfxSem				sigdone;
S	};
S	GadcNonTimerJob			job;
S	} NonTimerData;
S
Sstatic volatile uint16_t		hsFlags;
Sstatic size_t					hsBytesPerConv;
Sstatic GadcTimerJob				hsJob;
Sstatic GDataBuffer				*hsData;
Sstatic gfxQueueGSync			hsListDone;
Sstatic GADCISRCallbackFunction	hsISRcallback;
S#if GFX_USE_GEVENT
S	static GTimer				hsGTimer;
S#endif
S
Sstatic GTimer					lsGTimer;
Sstatic gfxQueueGSync			lsListToDo;
Sstatic gfxQueueGSync			lsListDone;
Sstatic NonTimerData				*lsData;
S
Svoid gadcGotDataI(size_t n) {
S	if ((hsFlags & GADC_HSADC_CONVERTION)) {
S
S		// A set of timer conversions is done - add them
S		hsJob.done += n;
S
S		// Are we finished yet? (or driver signalled complete now)
S		if (n && hsJob.done < hsJob.todo)
S			return;
S
S		// Clear event flags we might set
S		hsFlags &= ~(GADC_HSADC_GOTBUFFER|GADC_HSADC_STALL);
S
S		// Is there any data in it
S		if (!hsJob.done) {
S
S			// Oops - no data in this buffer. Just return it to the free-list
S			gfxBufferReleaseI(hsData);
S			goto starttimerjob;					// Restart the timer job
S		}
S
S		// Save the buffer on the hsListDone list
S		hsData->len = hsJob.done * hsBytesPerConv;
S		gfxQueueGSyncPutI(&hsListDone, (gfxQueueGSyncItem *)hsData);
S		hsFlags |= GADC_HSADC_GOTBUFFER;
S
S		/* Signal a buffer completion */
S		if (hsISRcallback)
S			hsISRcallback();
S		#if GFX_USE_GEVENT
S			if (hsFlags & GADC_HSADC_GTIMER)
S				gtimerJabI(&hsGTimer);
S		#endif
S
S		// Stop if we have been told to
S		if (!(hsFlags & GADC_HSADC_RUNNING)) {
S			gadc_lld_stop_timerI();
S
S		// Get the next free buffer
S		} else if (!(hsData = gfxBufferGetI())) {
S
S			// Oops - no free buffers. Stall
S			hsFlags &= ~GADC_HSADC_RUNNING;
S			hsFlags |= GADC_HSADC_STALL;
S			gadc_lld_stop_timerI();
S
S		// Prepare the next job
S		} else {
S
S			// Return this new job
S			#if GFX_USE_OS_CHIBIOS
S				// ChibiOS api bug - samples must be even
S				hsJob.todo = (hsData->size / hsBytesPerConv) & ~1;
S			#else
S				hsJob.todo = hsData->size / hsBytesPerConv;
S			#endif
S			hsJob.done = 0;
S			hsJob.buffer = (adcsample_t *)(hsData+1);
S		}
S
S		// Start a job preferring a non-timer job
S		if ((lsData = (NonTimerData *)gfxQueueGSyncGetI(&lsListToDo))) {
S			hsFlags &= ~GADC_HSADC_CONVERTION;
S			gadc_lld_nontimerjobI(&lsData->job);
S		} else if ((hsFlags & GADC_HSADC_RUNNING)) {
S			hsFlags |= GADC_HSADC_CONVERTION;
S			gadc_lld_timerjobI(&hsJob);
S		} else
S			hsFlags &= ~GADC_ADC_RUNNING;
S
S	} else {
S
S		// Did it fail
S		if (!n) {
S			// Push it back on the head of the queue - it didn't actually get done
S			gfxQueueGSyncPushI(&lsListToDo, (gfxQueueGSyncItem *)lsData);
S			lsData = 0;
S			goto starttimerjob;
S		}
S
S		// A non-timer job completed - signal
S		if (lsData->callback) {
S			// Put it on the completed list and signal the timer to do the call-backs
S			gfxQueueGSyncPutI(&lsListDone, (gfxQueueGSyncItem *)lsData);
S			gtimerJabI(&lsGTimer);
S		} else {
S			// Signal the thread directly
S			gfxSemSignalI(&lsData->sigdone);
S		}
S		lsData = 0;
S
S		// Start a job preferring a timer job
Sstarttimerjob:
S		if ((hsFlags & GADC_HSADC_RUNNING)) {
S			hsFlags |= GADC_HSADC_CONVERTION;
S			gadc_lld_timerjobI(&hsJob);
S		} else if ((lsData = (NonTimerData *)gfxQueueGSyncGetI(&lsListToDo))) {
S			hsFlags &= ~GADC_HSADC_CONVERTION;
S			gadc_lld_nontimerjobI(&lsData->job);
S		} else
S			hsFlags &= ~GADC_ADC_RUNNING;
S	}
S}
S
S/* Our module initialiser */
Svoid _gadcInit(void)
S{
S	gadc_lld_init();
S
S	gfxQueueGSyncInit(&hsListDone);
S	#if GFX_USE_GEVENT
S		gtimerInit(&hsGTimer);
S	#endif
S	gtimerInit(&lsGTimer);
S	gfxQueueGSyncInit(&lsListToDo);
S	gfxQueueGSyncInit(&lsListDone);
S}
S
Svoid _gadcDeinit(void)
S{
S	/* commented stuff is ToDo */
S
S	// gadc_lld_deinit();
S	gfxQueueGSyncDeinit(&hsListDone);
S	#if GFX_USE_GEVENT
S		gtimerDeinit(&hsGTimer);
S	#endif	
S	gtimerDeinit(&lsGTimer);
S	gfxQueueGSyncDeinit(&lsListToDo);
S	gfxQueueGSyncDeinit(&lsListDone);
S}
S
S#if GFX_USE_GEVENT
S	static void HighSpeedGTimerCallback(void *param) {
S		(void) param;
S		GSourceListener	*psl;
S		GEventADC		*pe;
S
S		psl = 0;
S		while ((psl = geventGetSourceListener((GSourceHandle)(&hsGTimer), psl))) {
S			if (!(pe = (GEventADC *)geventGetEventBuffer(psl))) {
S				// This listener is missing - save this.
S				psl->srcflags |= GADC_HSADC_LOSTEVENT;
S				continue;
S			}
S
S			pe->type = GEVENT_ADC;
S			pe->flags = (hsFlags & (GADC_HSADC_RUNNING|GADC_HSADC_GOTBUFFER|GADC_HSADC_STALL)) | psl->srcflags;
S			psl->srcflags = 0;
S			geventSendEvent(psl);
S		}
S	}
S#endif
S
Svoid gadcHighSpeedInit(uint32_t physdev, uint32_t frequency)
S{
S	if ((hsFlags & GADC_HSADC_RUNNING))
S		gadcHighSpeedStop();
S
S	/* Just save the details and reset everything for now */
S	hsJob.physdev = physdev;
S	hsJob.frequency = frequency;
S	hsISRcallback = 0;
S	hsBytesPerConv = gadc_lld_samplesperconversion(physdev) * sizeof(adcsample_t);
S}
S
S#if GFX_USE_GEVENT
S	GSourceHandle gadcHighSpeedGetSource(void) {
S		if (!gtimerIsActive(&hsGTimer))
S			gtimerStart(&hsGTimer, HighSpeedGTimerCallback, 0, TRUE, TIME_INFINITE);
S		hsFlags |= GADC_HSADC_GTIMER;
S		return (GSourceHandle)&hsGTimer;
S	}
S#endif
S
Svoid gadcHighSpeedSetISRCallback(GADCISRCallbackFunction isrfn) {
S	hsISRcallback = isrfn;
S}
S
SGDataBuffer *gadcHighSpeedGetData(delaytime_t ms) {
S	return (GDataBuffer *)gfxQueueGSyncGet(&hsListDone, ms);
S}
S
SGDataBuffer *gadcHighSpeedGetDataI(void) {
S	return (GDataBuffer *)gfxQueueGSyncGetI(&hsListDone);
S}
S
Svoid gadcHighSpeedStart(void) {
S	// Safety first
S	if (!hsJob.frequency || !hsBytesPerConv)
S		return;
S
S	gfxSystemLock();
S	if (!(hsFlags & GADC_HSADC_RUNNING)) {
S		if (!(hsData = gfxBufferGetI())) {
S			// Oops - no free buffers. Stall
S			hsFlags |= GADC_HSADC_STALL;
S			#if GFX_USE_GEVENT
S				if (hsFlags & GADC_HSADC_GTIMER)
S					gtimerJabI(&hsGTimer);
S			#endif
S
S		// Prepare the next job
S		} else {
S
S			#if GFX_USE_OS_CHIBIOS
S				// ChibiOS api bug - samples must be even
S				hsJob.todo = (hsData->size / hsBytesPerConv) & ~1;
S			#else
S				hsJob.todo = hsData->size / hsBytesPerConv;
S			#endif
S			hsJob.done = 0;
S			hsJob.buffer = (adcsample_t *)(hsData+1);
S			hsFlags |= GADC_HSADC_RUNNING;
S
S			// Start the timer
S			gadc_lld_start_timerI(hsJob.frequency);
S
S			// If nothing is running start the job
S			if (!(hsFlags & GADC_ADC_RUNNING)) {
S				hsFlags |= (GADC_HSADC_CONVERTION|GADC_ADC_RUNNING);
S				gadc_lld_timerjobI(&hsJob);
S			}
S		}
S	}
S	gfxSystemUnlock();
S}
S
Svoid gadcHighSpeedStop(void) {
S	// Stop it and wait for completion
S	hsFlags &= ~GADC_HSADC_RUNNING;
S	while ((hsFlags & GADC_HSADC_CONVERTION))
S		gfxYield();
S}
S
Sstatic void LowSpeedGTimerCallback(void *param) {
S	(void) param;
S	NonTimerData		*pdata;
S
S	// Look for completed non-timer jobs and call the call-backs for each
S	while ((pdata = (NonTimerData *)gfxQueueGSyncGet(&lsListDone, TIME_IMMEDIATE))) {
S		pdata->callback(pdata->job.buffer, pdata->param);
S		gfxFree(pdata);
S	}
S}
S
Svoid gadcLowSpeedGet(uint32_t physdev, adcsample_t *buffer) {
S	NonTimerData ndata;
S
S	// Prepare the job
S	gfxSemInit(&ndata.sigdone, 0, 1);
S	ndata.job.physdev = physdev;
S	ndata.job.buffer = buffer;
S	ndata.callback = 0;
S
S	// Activate it
S	gfxSystemLock();
S	if (!(hsFlags & GADC_ADC_RUNNING)) {
S		// Nothing is running - start the job
S		lsData = &ndata;
S		hsFlags |= GADC_ADC_RUNNING;
S		hsFlags &= ~GADC_HSADC_CONVERTION;
S		gadc_lld_nontimerjobI(&ndata.job);
S	} else {
S		// Just put it on the queue
S		gfxQueueGSyncPutI(&lsListToDo, (gfxQueueGSyncItem *)&ndata);
S	}
S	gfxSystemUnlock();
S
S	// Wait for it to complete
S	gfxSemWait(&ndata.sigdone, TIME_INFINITE);
S	gfxSemDestroy(&ndata.sigdone);
S}
S
Sbool_t gadcLowSpeedStart(uint32_t physdev, adcsample_t *buffer, GADCCallbackFunction fn, void *param) {
S	NonTimerData *pdata;
S
S	/* Start the Low Speed Timer */
S	if (!gtimerIsActive(&lsGTimer))
S		gtimerStart(&lsGTimer, LowSpeedGTimerCallback, 0, TRUE, TIME_INFINITE);
S
S	// Prepare the job
S	if (!(pdata = gfxAlloc(sizeof(NonTimerData))))
S		return FALSE;
S	pdata->job.physdev = physdev;
S	pdata->job.buffer = buffer;
S	pdata->callback = fn;
S	pdata->param = param;
S
S	// Activate it
S	gfxSystemLock();
S	if (!(hsFlags & GADC_ADC_RUNNING)) {
S		// Nothing is running - start the job
S		lsData = pdata;
S		hsFlags |= GADC_ADC_RUNNING;
S		hsFlags &= ~GADC_HSADC_CONVERTION;
S		gadc_lld_nontimerjobI(&pdata->job);
S	} else {
S		// Just put it on the queue
S		gfxQueueGSyncPutI(&lsListToDo, (gfxQueueGSyncItem *)pdata);
S	}
S	gfxSystemUnlock();
S	return TRUE;
S}
S
N#endif /* GFX_USE_GADC */
L 9 "..\..\..\..\..\..\external\ugfx\src\gadc/gadc_mk.c" 2
L 18 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gaudio/gaudio_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gaudio/gaudio_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gaudio.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gaudio/gaudio.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GAUDIO
X#if 0
S
S#if GAUDIO_NEED_PLAY
S	#include "gaudio_driver_play.h"
S
S	static gfxQueueASync	playList;
S	static gfxSem			playComplete;
S	static uint16_t			playFlags;
S		#define PLAYFLG_USEEVENTS	0x0001
S		#define PLAYFLG_PLAYING		0x0002
S		#define PLAYFLG_ISINIT		0x0004
S	#if GFX_USE_GEVENT
S		static GTimer playTimer;
S		static void PlayTimerCallback(void *param);
S	#endif
S#endif
S
S#if GAUDIO_NEED_RECORD
S	#include "gaudio_driver_record.h"
S
S	static gfxQueueGSync	recordList;
S	static uint16_t			recordFlags;
S		#define RECORDFLG_USEEVENTS		0x0001
S		#define RECORDFLG_RECORDING		0x0002
S		#define RECORDFLG_STALLED		0x0004
S		#define RECORDFLG_ISINIT		0x0008
S	#if GFX_USE_GEVENT
S		static GTimer recordTimer;
S		static void RecordTimerCallback(void *param);
S	#endif
S#endif
S
S
Svoid _gaudioInit(void)
S{
S	#if GAUDIO_NEED_PLAY
S		gfxQueueASyncInit(&playList);
S		#if GFX_USE_GEVENT
S			gtimerInit(&playTimer);
S		#endif
S		gfxSemInit(&playComplete, 0, 0);
S	#endif
S	#if GAUDIO_NEED_RECORD
S		gfxQueueGSyncInit(&recordList);
S		#if GFX_USE_GEVENT
S			gtimerInit(&recordTimer);
S		#endif
S	#endif
S}
S
Svoid _gaudioDeinit(void)
S{
S	#if GAUDIO_NEED_PLAY
S		gfxQueueASyncDeinit(&playList);
S		#if GFX_USE_GEVENT
S			gtimerDeinit(&playTimer);
S		#endif
S		gfxSemDestroy(&playComplete);
S	#endif
S	#if GAUDIO_NEED_RECORD
S		gfxQueueGSyncDeinit(&recordList);
S		#if GFX_USE_GEVENT
S			gtimerDeinit(&recordTimer);
S		#endif
S	#endif
S}
S
S#if GAUDIO_NEED_PLAY
S
S	bool_t gaudioPlayInit(uint16_t channel, uint32_t frequency, ArrayDataFormat format) {
S		gaudioPlayStop();
S		playFlags &= ~PLAYFLG_ISINIT;
S		if (!gaudio_play_lld_init(channel, frequency, format))
S			return FALSE;
S		playFlags |= PLAYFLG_ISINIT;
S		return TRUE;
S	}
S
S	void gaudioPlay(GDataBuffer *pd) {
S		if (!(playFlags & PLAYFLG_ISINIT)) {
S			// Oops - init failed - return it directly to the free-list
S			if (pd) {
S				gfxBufferRelease(pd);
S				gfxYield();				// Make sure we get no endless cpu hogging loops
S			}
S			return;
S		}
S
S		if (pd)
S			gfxQueueASyncPut(&playList, (gfxQueueASyncItem *)pd);
S		playFlags |= PLAYFLG_PLAYING;
S		gaudio_play_lld_start();
S	}
S
S	void gaudioPlayPause(void) {
S		if ((playFlags & (PLAYFLG_ISINIT|PLAYFLG_PLAYING)) == (PLAYFLG_ISINIT|PLAYFLG_PLAYING))
S			gaudio_play_lld_stop();
S	}
S
S	void gaudioPlayStop(void) {
S		GDataBuffer	*pd;
S
S		if (playFlags & PLAYFLG_PLAYING)
S			gaudio_play_lld_stop();
S		while((pd = (GDataBuffer *)gfxQueueASyncGet(&playList)))
S			gfxBufferRelease(pd);
S	}
S
S	bool_t gaudioPlaySetVolume(uint8_t vol) {
S		return gaudio_play_lld_set_volume(vol);
S	}
S
S	bool_t gaudioPlayWait(delaytime_t ms) {
S		if (!(playFlags & PLAYFLG_PLAYING))
S			return TRUE;
S		return gfxSemWait(&playComplete, ms);
S	}
S
S	#if GFX_USE_GEVENT
S		static void PlayTimerCallback(void *param) {
S			(void) param;
S			GSourceListener	*psl;
S			GEventAudioPlay	*pe;
S
S			psl = 0;
S			while ((psl = geventGetSourceListener((GSourceHandle)&playTimer, psl))) {
S				if (!(pe = (GEventAudioPlay *)geventGetEventBuffer(psl))) {
S					// This listener is missing - save this.
S					psl->srcflags |= GAUDIO_PLAY_LOSTEVENT;
S					continue;
S				}
S
S				pe->type = GEVENT_AUDIO_PLAY;
S				pe->flags = psl->srcflags;
S				psl->srcflags = 0;
S				if ((playFlags & PLAYFLG_PLAYING))
S					pe->flags |= GAUDIO_PLAY_PLAYING;
S				if (gfxBufferIsAvailable())
S					pe->flags |= GAUDIO_PLAY_FREEBLOCK;
S				geventSendEvent(psl);
S			}
S		}
S
S		GSourceHandle gaudioPlayGetSource(void) {
S			if (!gtimerIsActive(&playTimer))
S				gtimerStart(&playTimer, PlayTimerCallback, 0, TRUE, TIME_INFINITE);
S			playFlags |= PLAYFLG_USEEVENTS;
S			return (GSourceHandle)&playTimer;
S		}
S	#endif
S
S	/**
S	 * Routines provided for use by drivers.
S	 */
S
S	GDataBuffer *gaudioPlayGetDataBlockI(void) {
S		return (GDataBuffer *)gfxQueueASyncGetI(&playList);
S	}
S
S	void gaudioPlayReleaseDataBlockI(GDataBuffer *pd) {
S		gfxBufferReleaseI(pd);
S		#if GFX_USE_GEVENT
S			if (playFlags & PLAYFLG_USEEVENTS)
S				gtimerJabI(&playTimer);
S		#endif
S	}
S
S	void gaudioPlayDoneI(void) {
S		playFlags &= ~PLAYFLG_PLAYING;
S		#if GFX_USE_GEVENT
S			if (playFlags & PLAYFLG_USEEVENTS)
S				gtimerJabI(&playTimer);
S		#endif
S		gfxSemSignalI(&playComplete);			// This should really be gfxSemSignalAllI(&playComplete);
S	}
S#endif
S
S#if GAUDIO_NEED_RECORD
S	bool_t gaudioRecordInit(uint16_t channel, uint32_t frequency, ArrayDataFormat format) {
S		gaudioRecordStop();
S		recordFlags &= ~RECORDFLG_ISINIT;
S		if (!gaudio_record_lld_init(channel, frequency, format))
S			return FALSE;
S		recordFlags |= RECORDFLG_ISINIT;
S		return TRUE;
S	}
S
S	void gaudioRecordStart(void) {
S		if (!(recordFlags & RECORDFLG_ISINIT))
S			return;							// Oops - init failed
S
S		recordFlags |= RECORDFLG_RECORDING;
S		recordFlags &= ~RECORDFLG_STALLED;
S		gaudio_record_lld_start();
S	}
S
S	void gaudioRecordStop(void) {
S		GDataBuffer	*pd;
S
S		if ((recordFlags & (RECORDFLG_RECORDING|RECORDFLG_STALLED)) == RECORDFLG_RECORDING)
S			gaudio_record_lld_stop();
S		recordFlags &= ~(RECORDFLG_RECORDING|RECORDFLG_STALLED);
S		while((pd = (GDataBuffer *)gfxQueueGSyncGet(&recordList, TIME_IMMEDIATE)))
S			gfxBufferRelease(pd);
S	}
S
S	GDataBuffer *gaudioRecordGetData(delaytime_t ms) {
S		return (GDataBuffer *)gfxQueueGSyncGet(&recordList, ms);
S	}
S
S	#if GFX_USE_GEVENT
S		static void RecordTimerCallback(void *param) {
S			(void) param;
S			GSourceListener		*psl;
S			GEventAudioRecord	*pe;
S
S			psl = 0;
S			while ((psl = geventGetSourceListener((GSourceHandle)&recordTimer, psl))) {
S				if (!(pe = (GEventAudioRecord *)geventGetEventBuffer(psl))) {
S					// This listener is missing - save this.
S					psl->srcflags |= GAUDIO_RECORD_LOSTEVENT;
S					continue;
S				}
S				pe->type = GEVENT_AUDIO_RECORD;
S				pe->flags = psl->srcflags;
S				psl->srcflags = 0;
S				if ((recordFlags & RECORDFLG_RECORDING))
S					pe->flags |= GAUDIO_RECORD_RECORDING;
S				if ((recordFlags & RECORDFLG_STALLED))
S					pe->flags |= GAUDIO_RECORD_STALL;
S				if (!gfxQueueGSyncIsEmpty(&recordList))
S					pe->flags |= GAUDIO_RECORD_GOTBUFFER;
S				geventSendEvent(psl);
S			}
S		}
S
S		GSourceHandle gaudioRecordGetSource(void) {
S			if (!gtimerIsActive(&recordTimer))
S				gtimerStart(&recordTimer, RecordTimerCallback, 0, TRUE, TIME_INFINITE);
S			recordFlags |= RECORDFLG_USEEVENTS;
S			return (GSourceHandle)&recordTimer;
S		}
S	#endif
S
S	/**
S	 * Routines provided for use by drivers.
S	 */
S
S	void gaudioRecordSaveDataBlockI(GDataBuffer *paud) {
S		gfxQueueGSyncPutI(&recordList, (gfxQueueGSyncItem *)paud);
S		#if GFX_USE_GEVENT
S			if (recordFlags & RECORDFLG_USEEVENTS)
S				gtimerJabI(&recordTimer);
S		#endif
S	}
S
S	void gaudioRecordDoneI(void) {
S		recordFlags |= RECORDFLG_STALLED;
S		#if GFX_USE_GEVENT
S			if (recordFlags & RECORDFLG_USEEVENTS)
S				gtimerJabI(&recordTimer);
S		#endif
S	}
S#endif
S
N#endif /* GFX_USE_GAUDIO */
L 9 "..\..\..\..\..\..\external\ugfx\src\gaudio/gaudio_mk.c" 2
L 19 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gmisc/gmisc_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gmisc.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GMISC
X#if 0
S
Svoid _gmiscInit(void)
S{
S
S}
S
Svoid _gmiscDeinit(void)
S{
S
S}
S
N#endif /* GFX_USE_GMISC */
L 9 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_mk.c" 2
N#include "gmisc_arrayops.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_arrayops.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GMISC && GMISC_NEED_ARRAYOPS
X#if 0 && 0
S
Svoid gmiscArrayConvert(ArrayDataFormat srcfmt, void *src, ArrayDataFormat dstfmt, void *dst, size_t cnt) {
S	uint8_t		*src8, *dst8;
S	uint16_t	*src16, *dst16;
S
S	dst8 = dst;
S	dst16 = dst;
S	src8 = src;
S	src16 = src;
S
S	/* We do this as a big switch in order to optimise efficiency for each transfer type */
S	switch(dstfmt) {
S	case ARRAY_DATA_4BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	if (dst != src) while(cnt--) { *dst8++ = *src8++; }		break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst8++ = (*src8++ ^ 8); }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst8++ = *src8++ >> 4; }				break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst8++ = (*src8++ ^ 128) >> 4; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 6; }				break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 512) >> 6; }		break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 8; }				break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 2048) >> 8; }		break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 10; }				break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 8192) >> 10; }		break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 12; }				break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 32768) >> 12; }	break;
S		}
S		break;
S	case ARRAY_DATA_4BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst8++ = (*src8++ ^ 8); }				break;
S		case ARRAY_DATA_4BITSIGNED:		if (dst != src) while(cnt--) { *dst8++ = *src8++; }		break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst8++ = (*src8++ ^ 128) >> 4; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst8++ = *src8++ >> 4; }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 512) >> 6; }		break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 6; }				break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 2048) >> 8; }		break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 8; }				break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 8192) >> 10; }		break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 10; }				break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 32768) >> 12; }	break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 12; }				break;
S		}
S		break;
S	case ARRAY_DATA_8BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst8++ = *src8++ << 4; }				break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst8++ = (*src8++ ^ 8) << 4; }			break;
S		case ARRAY_DATA_8BITUNSIGNED:	if (dst != src) while(cnt--) { *dst8++ = *src8++; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst8++ = (*src8++ ^ 128); }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 512) >> 2; }		break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 4; }				break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 2048) >> 4; }		break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 6; }				break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 8192) >> 6; }		break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 8; }				break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 32768) >> 8; }		break;
S		}
S		break;
S	case ARRAY_DATA_8BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst8++ = (*src8++ ^ 8) << 4; }			break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst8++ = *src8++ << 4; }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst8++ = (*src8++ ^ 128); }				break;
S		case ARRAY_DATA_8BITSIGNED:		if (dst != src) while(cnt--) { *dst8++ = *src8++; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 512) >> 2; }		break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 2048) >> 4; }		break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 4; }				break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 8192) >> 6; }		break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 6; }				break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst8++ = (*src16++ ^ 32768) >> 8; }		break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst8++ = *src16++ >> 8; }				break;
S		}
S		break;
S	case ARRAY_DATA_10BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 6; }				break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 8) << 6; }			break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 2; }				break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 128) << 2; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512); }			break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) >> 2; }		break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 4; }				break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) >> 4; }		break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 6; }				break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 6; }	break;
S		}
S		break;
S	case ARRAY_DATA_10BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 8) << 6; }			break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 6; }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 128) << 2; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 2; }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512); }			break;
S		case ARRAY_DATA_10BITSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) >> 2; }		break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) >> 4; }		break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 4; }				break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 6; }	break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 6; }				break;
S		}
S		break;
S	case ARRAY_DATA_12BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 8; }				break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 8) << 8; }			break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 4; }				break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 128) << 4; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ << 2; }				break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 2; }		break;
S		case ARRAY_DATA_12BITUNSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048); }			break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) >> 2; }		break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 4; }				break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 4; }	break;
S		}
S		break;
S	case ARRAY_DATA_12BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 8) << 8; }			break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 8; }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 128) << 4; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 4; }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 2; }		break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = *src16++ << 2; }				break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048); }			break;
S		case ARRAY_DATA_12BITSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) >> 2; }		break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 4; }	break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 4; }				break;
S		}
S		break;
S	case ARRAY_DATA_14BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 10; }				break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 8) << 10; }		break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 6; }				break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 128) << 6; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ << 4; }				break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 4; }		break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ << 2; }				break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) >> 2; }		break;
S		case ARRAY_DATA_14BITUNSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192); }			break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 2; }	break;
S		}
S		break;
S	case ARRAY_DATA_14BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 8) << 10; }		break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 10; }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 128) << 6; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 6; }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 4; }		break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = *src16++ << 4; }				break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) << 2; }		break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = *src16++ << 2; }				break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192); }			break;
S		case ARRAY_DATA_14BITSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768) >> 2; }	break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		}
S		break;
S	case ARRAY_DATA_16BITUNSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 12; }				break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 8) << 12; }		break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = *src8++ << 8; }				break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = (*src8++ ^ 128) << 8; }		break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ << 6; }				break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 6; }		break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ << 4; }				break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) >> 4; }		break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) >> 2; }		break;
S		case ARRAY_DATA_16BITUNSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		case ARRAY_DATA_16BITSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768); }			break;
S		}
S		break;
S	case ARRAY_DATA_16BITSIGNED:
S		switch(srcfmt) {
S		case ARRAY_DATA_4BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 8) << 12; }		break;
S		case ARRAY_DATA_4BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 12; }				break;
S		case ARRAY_DATA_8BITUNSIGNED:	while(cnt--) { *dst16++ = (*src8++ ^ 128) << 8; }		break;
S		case ARRAY_DATA_8BITSIGNED:		while(cnt--) { *dst16++ = *src8++ << 8; }				break;
S		case ARRAY_DATA_10BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 512) << 6; }		break;
S		case ARRAY_DATA_10BITSIGNED:	while(cnt--) { *dst16++ = *src16++ << 6; }				break;
S		case ARRAY_DATA_12BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 2048) << 4; }		break;
S		case ARRAY_DATA_12BITSIGNED:	while(cnt--) { *dst16++ = *src16++ << 4; }				break;
S		case ARRAY_DATA_14BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 8192) << 2; }		break;
S		case ARRAY_DATA_14BITSIGNED:	while(cnt--) { *dst16++ = *src16++ >> 2; }				break;
S		case ARRAY_DATA_16BITUNSIGNED:	while(cnt--) { *dst16++ = (*src16++ ^ 32768); }			break;
S		case ARRAY_DATA_16BITSIGNED:	if (dst != src) while(cnt--) { *dst16++ = *src16++; }	break;
S		}
S		break;
S	}
S}
S
N#endif /* GFX_USE_GMISC && GMISC_NEED_ARRAYOPS */
L 10 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_mk.c" 2
N#include "gmisc_matrix2d.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_matrix2d.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GMISC
X#if 0
S
S#if GMISC_NEED_MATRIXFLOAT2D
S
S#if !GMISC_NEED_FASTTRIG
S	#include <math.h>
S#endif
S
Svoid gmiscMatrixFloat2DSetIdentity(MatrixFloat2D *m) {
S	m->a00 = m->a11 = m->a22 = 1.0;
S	m->a01 = m->a02 = m->a10 = m->a12 = m->a20 = m->a21 = 0.0;
S}
S
Svoid gmiscMatrixFloat2DMultiply(MatrixFloat2D *dst, const MatrixFloat2D *src1, const MatrixFloat2D *src2) {
S	dst->a00 = src1->a00*src2->a00 + src1->a01*src2->a10 + src1->a02*src2->a20;
S	dst->a01 = src1->a00*src2->a01 + src1->a01*src2->a11 + src1->a02*src2->a21;
S	dst->a02 = src1->a00*src2->a02 + src1->a01*src2->a12 + src1->a02*src2->a22;
S	dst->a10 = src1->a10*src2->a00 + src1->a11*src2->a10 + src1->a12*src2->a20;
S	dst->a11 = src1->a10*src2->a01 + src1->a11*src2->a11 + src1->a12*src2->a21;
S	dst->a12 = src1->a10*src2->a02 + src1->a11*src2->a12 + src1->a12*src2->a22;
S	dst->a20 = src1->a20*src2->a00 + src1->a21*src2->a10 + src1->a22*src2->a20;
S	dst->a21 = src1->a20*src2->a01 + src1->a21*src2->a11 + src1->a22*src2->a21;
S	dst->a22 = src1->a20*src2->a02 + src1->a21*src2->a12 + src1->a22*src2->a22;
S}
S
Svoid gmiscMatrixFloat2DApplyTranslation(MatrixFloat2D *dst, const MatrixFloat2D *src, float tx, float ty) {
S	if (src) {
S		dst->a00 = src->a00; dst->a01 = src->a01; dst->a02 = src->a02+tx;
S		dst->a10 = src->a10; dst->a11 = src->a11; dst->a12 = src->a12+ty;
S		dst->a20 = src->a20; dst->a21 = src->a21; dst->a22 = src->a22;
S	} else {
S		dst->a00 = 1.0; dst->a01 = 0.0; dst->a02 = tx;
S		dst->a10 = 0.0; dst->a11 = 1.0; dst->a12 = ty;
S		dst->a20 = 0.0; dst->a21 = 0.0; dst->a22 = 1.0;
S	}
S}
S
Svoid gmiscMatrixFloat2DApplyScale(MatrixFloat2D *dst, const MatrixFloat2D *src, float sx, float sy) {
S	if (src) {
S		dst->a00 = src->a00*sx; dst->a01 = src->a01*sy; dst->a02 = src->a02;
S		dst->a10 = src->a10*sx; dst->a11 = src->a11*sy; dst->a12 = src->a12;
S		dst->a20 = src->a20*sx; dst->a21 = src->a21*sy; dst->a22 = src->a22;
S	} else {
S		dst->a00 = sx;  dst->a01 = 0.0; dst->a02 = 0.0;
S		dst->a10 = 0.0; dst->a11 = sy;  dst->a12 = 0.0;
S		dst->a20 = 0.0; dst->a21 = 0.0; dst->a22 = 1.0;
S	}
S}
S
Svoid gmiscMatrixFloat2DApplyShear(MatrixFloat2D *dst, const MatrixFloat2D *src, float sx, float sy) {
S	if (src) {
S		dst->a00 = src->a00 + src->a01*sy; dst->a01 = src->a00*sx + src->a01; dst->a02 = src->a02;
S		dst->a10 = src->a10 + src->a11*sy; dst->a11 = src->a10*sx + src->a11; dst->a12 = src->a12;
S		dst->a20 = src->a20 + src->a21*sy; dst->a21 = src->a20*sx + src->a21; dst->a22 = src->a22;
S	} else {
S		dst->a00 = 1.0; dst->a01 = sx;  dst->a02 = 0.0;
S		dst->a10 = sy;  dst->a11 = 1.0; dst->a12 = 0.0;
S		dst->a20 = 0.0; dst->a21 = 0.0; dst->a22 = 1.0;
S	}
S}
S
Svoid gmiscMatrixFloat2DApplyRotation(MatrixFloat2D *dst, const MatrixFloat2D *src, int angle) {
S	float	s, c;
S
S	#if GMISC_NEED_FASTTRIG
S		s = fsin(angle);
S		c = fcos(angle);
S	#else
S		c = angle*GFX_PI/180;
S		s = sin(c);
S		c = cos(c);
S	#endif
S
S	if (src) {
S		dst->a00 = src->a00*c - src->a01*s;	dst->a01 = src->a00*s + src->a01*c;	dst->a02 = src->a02;
S		dst->a10 = src->a10*c - src->a11*s;	dst->a11 = src->a10*s + src->a11*c;	dst->a12 = src->a12;
S		dst->a20 = src->a20*c - src->a21*s;	dst->a21 = src->a20*s + src->a21*c;	dst->a22 = src->a22;
S	} else {
S		dst->a00 = c;   dst->a01 = s;   dst->a02 = 0.0;
S		dst->a10 = -s;  dst->a11 = c;   dst->a12 = 0.0;
S		dst->a20 = 0.0; dst->a21 = 0.0; dst->a22 = 1.0;
S	}
S}
S
Svoid gmiscMatrixFloat2DApplyToPoints(point *dst, const point *src, const MatrixFloat2D *m, int cnt) {
S	float	x;
S
S	for( ;cnt--; dst++, src++) {
S		x = src->x;						// This allows in-place operation
S		dst->x = round(x*m->a00+src->y*m->a01+m->a02);
S		dst->y = round(x*m->a10+src->y*m->a11+m->a12);
S	}
S}
S
S#endif // GMISC_NEED_MATRIXFLOAT2D
S
S#if GMISC_NEED_MATRIXFIXED2D
S
Svoid gmiscMatrixFixed2DSetIdentity(MatrixFixed2D *m) {
S	m->a00 = m->a11 = m->a22 = FIXED(1);
S	m->a01 = m->a02 = m->a10 = m->a12 = m->a20 = m->a21 = 0;
S}
S
Svoid gmiscMatrixFixed2DMultiply(MatrixFixed2D *dst, const MatrixFixed2D *src1, const MatrixFixed2D *src2) {
S	dst->a00 = FIXEDMUL(src1->a00,src2->a00) + FIXEDMUL(src1->a01,src2->a10) + FIXEDMUL(src1->a02,src2->a20);
S	dst->a01 = FIXEDMUL(src1->a00,src2->a01) + FIXEDMUL(src1->a01,src2->a11) + FIXEDMUL(src1->a02,src2->a21);
S	dst->a02 = FIXEDMUL(src1->a00,src2->a02) + FIXEDMUL(src1->a01,src2->a12) + FIXEDMUL(src1->a02,src2->a22);
S	dst->a10 = FIXEDMUL(src1->a10,src2->a00) + FIXEDMUL(src1->a11,src2->a10) + FIXEDMUL(src1->a12,src2->a20);
S	dst->a11 = FIXEDMUL(src1->a10,src2->a01) + FIXEDMUL(src1->a11,src2->a11) + FIXEDMUL(src1->a12,src2->a21);
S	dst->a12 = FIXEDMUL(src1->a10,src2->a02) + FIXEDMUL(src1->a11,src2->a12) + FIXEDMUL(src1->a12,src2->a22);
S	dst->a20 = FIXEDMUL(src1->a20,src2->a00) + FIXEDMUL(src1->a21,src2->a10) + FIXEDMUL(src1->a22,src2->a20);
S	dst->a21 = FIXEDMUL(src1->a20,src2->a01) + FIXEDMUL(src1->a21,src2->a11) + FIXEDMUL(src1->a22,src2->a21);
S	dst->a22 = FIXEDMUL(src1->a20,src2->a02) + FIXEDMUL(src1->a21,src2->a12) + FIXEDMUL(src1->a22,src2->a22);
S}
S
Svoid gmiscMatrixFixed2DApplyTranslation(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed tx, fixed ty) {
S	if (src) {
S		dst->a00 = src->a00; dst->a01 = src->a01; dst->a02 = src->a02+tx;
S		dst->a10 = src->a10; dst->a11 = src->a11; dst->a12 = src->a12+ty;
S		dst->a20 = src->a20; dst->a21 = src->a21; dst->a22 = src->a22;
S	} else {
S		dst->a00 = FIXED(1); dst->a01 = 0; dst->a02 = tx;
S		dst->a10 = 0; dst->a11 = FIXED(1); dst->a12 = ty;
S		dst->a20 = 0; dst->a21 = 0; dst->a22 = FIXED(1);
S	}
S}
S
Svoid gmiscMatrixFixed2DApplyScale(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed sx, fixed sy) {
S	if (src) {
S		dst->a00 = FIXEDMUL(sx,src->a00); dst->a01 = FIXEDMUL(sy,src->a01); dst->a02 = src->a02;
S		dst->a10 = FIXEDMUL(sx,src->a10); dst->a11 = FIXEDMUL(sy,src->a11); dst->a12 = src->a12;
S		dst->a20 = FIXEDMUL(sx,src->a20); dst->a21 = FIXEDMUL(sy,src->a21); dst->a22 = src->a22;
S	} else {
S		dst->a00 = sx; dst->a01 = 0;  dst->a02 = 0;
S		dst->a10 = 0;  dst->a11 = sy; dst->a12 = 0;
S		dst->a20 = 0;  dst->a21 = 0;  dst->a22 = FIXED(1);
S	}
S}
S
Svoid gmiscMatrixFixed2DApplyShear(MatrixFixed2D *dst, const MatrixFixed2D *src, fixed sx, fixed sy) {
S	if (src) {
S		dst->a00 = src->a00 + FIXEDMUL(sy,src->a01); dst->a01 = FIXEDMUL(sx,src->a00) + src->a01; dst->a02 = src->a02;
S		dst->a10 = src->a10 + FIXEDMUL(sy,src->a11); dst->a11 = FIXEDMUL(sx,src->a10) + src->a11; dst->a12 = src->a12;
S		dst->a20 = src->a20 + FIXEDMUL(sy,src->a21); dst->a21 = FIXEDMUL(sx,src->a20) + src->a21; dst->a22 = src->a22;
S	} else {
S		dst->a00 = FIXED(1); dst->a01 = sx; dst->a02 = 0;
S		dst->a10 = sy; dst->a11 = FIXED(1); dst->a12 = 0;
S		dst->a20 = 0; dst->a21 = 0; dst->a22 = FIXED(1);
S	}
S}
S
S#if GMISC_NEED_FIXEDTRIG
S	void gmiscMatrixFixed2DApplyRotation(MatrixFixed2D *dst, const MatrixFixed2D *src, int angle) {
S		fixed	s, c;
S
S		s = ffsin(angle);
S		c = ffcos(angle);
S
S		if (src) {
S			dst->a00 = FIXEDMUL(c,src->a00) - FIXEDMUL(s,src->a01);	dst->a01 = FIXEDMUL(s,src->a00) + FIXEDMUL(c,src->a01);	dst->a02 = src->a02;
S			dst->a10 = FIXEDMUL(c,src->a10) - FIXEDMUL(s,src->a11);	dst->a11 = FIXEDMUL(s,src->a10) + FIXEDMUL(c,src->a11);	dst->a12 = src->a12;
S			dst->a20 = FIXEDMUL(c,src->a20) - FIXEDMUL(s,src->a21);	dst->a21 = FIXEDMUL(s,src->a20) + FIXEDMUL(c,src->a21);	dst->a22 = src->a22;
S		} else {
S			dst->a00 = c;  dst->a01 = s; dst->a02 = 0;
S			dst->a10 = -s; dst->a11 = c; dst->a12 = 0;
S			dst->a20 = 0;  dst->a21 = 0; dst->a22 = FIXED(1);
S		}
S	}
S#endif
S
Svoid gmiscMatrixFixed2DApplyToPoints(point *dst, const point *src, const MatrixFixed2D *m, int cnt) {
S	coord_t	x;
S
S	for( ;cnt--; dst++, src++) {
S		x = src->x;						// This allows in-place operation
S		dst->x = NONFIXED(x*m->a00+src->y*m->a01+m->a02+FIXED0_5);
S		dst->y = NONFIXED(x*m->a10+src->y*m->a11+m->a12+FIXED0_5);
S	}
S}
S
S#endif // GMISC_NEED_MATRIXFIXED2D
S
N#endif // GFX_USE_GMISC
L 11 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_mk.c" 2
N#include "gmisc_trig.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_trig.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GMISC
X#if 0
S
S#if GMISC_NEED_FASTTRIG
S	const double sintabledouble[] = {
S		0.000000, 0.017452, 0.034899, 0.052336, 0.069756, 0.087156, 0.104528, 0.121869,
S		0.139173, 0.156434, 0.173648, 0.190809, 0.207912, 0.224951, 0.241922, 0.258819,
S		0.275637, 0.292372, 0.309017, 0.325568, 0.342020, 0.358368, 0.374607, 0.390731,
S		0.406737, 0.422618, 0.438371, 0.453990, 0.469472, 0.484810, 0.500000, 0.515038,
S		0.529919, 0.544639, 0.559193, 0.573576, 0.587785, 0.601815, 0.615661, 0.629320,
S		0.642788, 0.656059, 0.669131, 0.681998, 0.694658, 0.707107, 0.719340, 0.731354,
S		0.743145, 0.754710, 0.766044, 0.777146, 0.788011, 0.798636, 0.809017, 0.819152,
S		0.829038, 0.838671, 0.848048, 0.857167, 0.866025, 0.874620, 0.882948, 0.891007,
S		0.898794, 0.906308, 0.913545, 0.920505, 0.927184, 0.933580, 0.939693, 0.945519,
S		0.951057, 0.956305, 0.961262, 0.965926, 0.970296, 0.974370, 0.978148, 0.981627,
S		0.984808, 0.987688, 0.990268, 0.992546, 0.994522, 0.996195, 0.997564, 0.998630,
S		0.999391, 0.999848, 1.000000, 0.999848, 0.999391, 0.998630, 0.997564, 0.996195,
S		0.994522, 0.992546, 0.990268, 0.987688, 0.984808, 0.981627, 0.978148, 0.974370,
S		0.970296, 0.965926, 0.961262, 0.956305, 0.951057, 0.945519, 0.939693, 0.933580,
S		0.927184, 0.920505, 0.913545, 0.906308, 0.898794, 0.891007, 0.882948, 0.874620,
S		0.866025, 0.857167, 0.848048, 0.838671, 0.829038, 0.819152, 0.809017, 0.798636,
S		0.788011, 0.777146, 0.766044, 0.754710, 0.743145, 0.731354, 0.719340, 0.707107,
S		0.694658, 0.681998, 0.669131, 0.656059, 0.642788, 0.629320, 0.615661, 0.601815,
S		0.587785, 0.573576, 0.559193, 0.544639, 0.529919, 0.515038, 0.500000, 0.484810,
S		0.469472, 0.453990, 0.438371, 0.422618, 0.406737, 0.390731, 0.374607, 0.358368,
S		0.342020, 0.325568, 0.309017, 0.292372, 0.275637, 0.258819, 0.241922, 0.224951,
S		0.207912, 0.190809, 0.173648, 0.156434, 0.139173, 0.121869, 0.104528, 0.087156,
S		0.069756, 0.052336, 0.034899, 0.017452, 0.000000, -0.017452, -0.034899, -0.052336,
S		-0.069756, -0.087156, -0.104528, -0.121869, -0.139173, -0.156434, -0.173648, -0.190809,
S		-0.207912, -0.224951, -0.241922, -0.258819, -0.275637, -0.292372, -0.309017, -0.325568,
S		-0.342020, -0.358368, -0.374607, -0.390731, -0.406737, -0.422618, -0.438371, -0.453990,
S		-0.469472, -0.484810, -0.500000, -0.515038, -0.529919, -0.544639, -0.559193, -0.573576,
S		-0.587785, -0.601815, -0.615661, -0.629320, -0.642788, -0.656059, -0.669131, -0.681998,
S		-0.694658, -0.707107, -0.719340, -0.731354, -0.743145, -0.754710, -0.766044, -0.777146,
S		-0.788011, -0.798636, -0.809017, -0.819152, -0.829038, -0.838671, -0.848048, -0.857167,
S		-0.866025, -0.874620, -0.882948, -0.891007, -0.898794, -0.906308, -0.913545, -0.920505,
S		-0.927184, -0.933580, -0.939693, -0.945519, -0.951057, -0.956305, -0.961262, -0.965926,
S		-0.970296, -0.974370, -0.978148, -0.981627, -0.984808, -0.987688, -0.990268, -0.992546,
S		-0.994522, -0.996195, -0.997564, -0.998630, -0.999391, -0.999848, -1.000000, -0.999848,
S		-0.999391, -0.998630, -0.997564, -0.996195, -0.994522, -0.992546, -0.990268, -0.987688,
S		-0.984808, -0.981627, -0.978148, -0.974370, -0.970296, -0.965926, -0.961262, -0.956305,
S		-0.951057, -0.945519, -0.939693, -0.933580, -0.927184, -0.920505, -0.913545, -0.906308,
S		-0.898794, -0.891007, -0.882948, -0.874620, -0.866025, -0.857167, -0.848048, -0.838671,
S		-0.829038, -0.819152, -0.809017, -0.798636, -0.788011, -0.777146, -0.766044, -0.754710,
S		-0.743145, -0.731354, -0.719340, -0.707107, -0.694658, -0.681998, -0.669131, -0.656059,
S		-0.642788, -0.629320, -0.615661, -0.601815, -0.587785, -0.573576, -0.559193, -0.544639,
S		-0.529919, -0.515038, -0.500000, -0.484810, -0.469472, -0.453990, -0.438371, -0.422618,
S		-0.406737, -0.390731, -0.374607, -0.358368, -0.342020, -0.325568, -0.309017, -0.292372,
S		-0.275637, -0.258819, -0.241922, -0.224951, -0.207912, -0.190809, -0.173648, -0.156434,
S		-0.139173, -0.121869, -0.104528, -0.087156, -0.069756, -0.052336, -0.034899, -0.017452
S		};
S
S	double fsin(int degrees) {
S		if (degrees < 0)
S			degrees -= (degrees/360-1)*360;
S		else if (degrees >= 360)
S			degrees %= 360;
S		return sintabledouble[degrees];
S	}
S
S	double fcos(int degrees) {
S		return fsin(degrees+90);
S	}
S
S#endif
S
S#if GMISC_NEED_FIXEDTRIG
S	const fixed sintablefixed[] = {
S		0, 1143, 2287, 3429, 4571, 5711, 6850, 7986,
S		9120, 10252, 11380, 12504, 13625, 14742, 15854, 16961,
S		18064, 19160, 20251, 21336, 22414, 23486, 24550, 25606,
S		26655, 27696, 28729, 29752, 30767, 31772, 32767, 33753,
S		34728, 35693, 36647, 37589, 38521, 39440, 40347, 41243,
S		42125, 42995, 43852, 44695, 45525, 46340, 47142, 47929,
S		48702, 49460, 50203, 50931, 51643, 52339, 53019, 53683,
S		54331, 54963, 55577, 56175, 56755, 57319, 57864, 58393,
S		58903, 59395, 59870, 60326, 60763, 61183, 61583, 61965,
S		62328, 62672, 62997, 63302, 63589, 63856, 64103, 64331,
S		64540, 64729, 64898, 65047, 65176, 65286, 65376, 65446,
S		65496, 65526, 65536, 65526, 65496, 65446, 65376, 65286,
S		65176, 65047, 64898, 64729, 64540, 64331, 64103, 63856,
S		63589, 63302, 62997, 62672, 62328, 61965, 61583, 61183,
S		60763, 60326, 59870, 59395, 58903, 58393, 57864, 57319,
S		56755, 56175, 55577, 54963, 54331, 53683, 53019, 52339,
S		51643, 50931, 50203, 49460, 48702, 47929, 47142, 46340,
S		45525, 44695, 43852, 42995, 42125, 41243, 40347, 39440,
S		38521, 37589, 36647, 35693, 34728, 33753, 32767, 31772,
S		30767, 29752, 28729, 27696, 26655, 25606, 24550, 23486,
S		22414, 21336, 20251, 19160, 18064, 16961, 15854, 14742,
S		13625, 12504, 11380, 10252, 9120, 7986, 6850, 5711,
S		4571, 3429, 2287, 1143, 0, -1143, -2287, -3429,
S		-4571, -5711, -6850, -7986, -9120, -10252, -11380, -12504,
S		-13625, -14742, -15854, -16961, -18064, -19160, -20251, -21336,
S		-22414, -23486, -24550, -25606, -26655, -27696, -28729, -29752,
S		-30767, -31772, -32768, -33753, -34728, -35693, -36647, -37589,
S		-38521, -39440, -40347, -41243, -42125, -42995, -43852, -44695,
S		-45525, -46340, -47142, -47929, -48702, -49460, -50203, -50931,
S		-51643, -52339, -53019, -53683, -54331, -54963, -55577, -56175,
S		-56755, -57319, -57864, -58393, -58903, -59395, -59870, -60326,
S		-60763, -61183, -61583, -61965, -62328, -62672, -62997, -63302,
S		-63589, -63856, -64103, -64331, -64540, -64729, -64898, -65047,
S		-65176, -65286, -65376, -65446, -65496, -65526, -65536, -65526,
S		-65496, -65446, -65376, -65286, -65176, -65047, -64898, -64729,
S		-64540, -64331, -64103, -63856, -63589, -63302, -62997, -62672,
S		-62328, -61965, -61583, -61183, -60763, -60326, -59870, -59395,
S		-58903, -58393, -57864, -57319, -56755, -56175, -55577, -54963,
S		-54331, -53683, -53019, -52339, -51643, -50931, -50203, -49460,
S		-48702, -47929, -47142, -46340, -45525, -44695, -43852, -42995,
S		-42125, -41243, -40347, -39440, -38521, -37589, -36647, -35693,
S		-34728, -33753, -32768, -31772, -30767, -29752, -28729, -27696,
S		-26655, -25606, -24550, -23486, -22414, -21336, -20251, -19160,
S		-18064, -16961, -15854, -14742, -13625, -12504, -11380, -10252,
S		-9120, -7986, -6850, -5711, -4571, -3429, -2287, -1143
S		};
S
S	fixed ffsin(int degrees) {
S		if (degrees < 0)
S			degrees -= (degrees/360-1)*360;
S		else if (degrees >= 360)
S			degrees %= 360;
S		return sintablefixed[degrees];
S	}
S
S	fixed ffcos(int degrees) {
S		return ffsin(degrees+90);
S	}
S
S#endif
S
S#if GMISC_NEED_INVSQRT
S	// Algorithm based on Quake code.
S	#if GMISC_INVSQRT_REAL_SLOW
S		#include <math.h>
S		float invsqrt(float n) {
S			return 1.0/sqrt(n);
S		}
S	#else
S		float invsqrt(float n) {
S			int32_t		i;
S			float		x2;
S
S			x2 = n * 0.5F;
S
S			// Convert into an int32 (no binary format conversion)
S			#if GMISC_INVSQRT_MIXED_ENDIAN
S				((char *)&i)[0] = ((char *)&n)[3];
S				((char *)&i)[1] = ((char *)&n)[2];
S				((char *)&i)[2] = ((char *)&n)[1];
S				((char *)&i)[3] = ((char *)&n)[0];
S			#else
S				i  = *(int32_t *)&n;
S			#endif
S
S			// evil floating point bit level hacking
S			i  = 0x5F375A86 - (i >> 1);					// The quake code used 0x5F3759DF but this is better.
S
S			// Convert back to a float (no binary format conversion)
S			#if GMISC_INVSQRT_MIXED_ENDIAN
S				((char *)&n)[0] = ((char *)&i)[3];
S				((char *)&n)[1] = ((char *)&i)[2];
S				((char *)&n)[2] = ((char *)&i)[1];
S				((char *)&n)[3] = ((char *)&i)[0];
S			#else
S				n  = *(float *)&i;
S			#endif
S
S			n  = n * (1.5F - (x2 * n * n));				// 1st iteration
S			//n  = n * (1.5F - (x2 * n * n));			// 2nd iteration for extra precision, this can be removed
S			return n;
S		}
S	#endif
S#endif
S
N#endif /* GFX_USE_GMISC */
L 12 "..\..\..\..\..\..\external\ugfx\src\gmisc/gmisc_mk.c" 2
L 20 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gfile/gfile_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gfile.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE
X#if 0
S
S#include "gfile_fs.h"
S
S/**
S * Define the VMT's for the file-systems we want to search for files.
S * Virtual file-systems that have special open() calls do not need to
S * be in this list.
S */
S#if GFILE_NEED_ROMFS
S	extern const GFILEVMT FsROMVMT;
S#endif
S#if GFILE_NEED_NATIVEFS
S	extern const GFILEVMT FsNativeVMT;
S#endif
S#if GFILE_NEED_FATFS
S	extern const GFILEVMT FsFatFSVMT;
S#endif
S#if GFILE_NEED_RAMFS
S	extern const GFILEVMT FsRAMVMT;
S#endif
S
S
S/**
S * The order of the file-systems below determines the order
S * that they are searched to find a file.
S */
Sstatic const GFILEVMT const * FsArray[] = {
S	#if GFILE_NEED_ROMFS
S		&FsROMVMT,
S	#endif
S	#if GFILE_NEED_NATIVEFS
S		&FsNativeVMT,
S	#endif
S	#if GFILE_NEED_FATFS
S		&FsFatFSVMT,
S	#endif
S	#if GFILE_NEED_RAMFS
S		&FsRAMVMT,
S	#endif
S};
S
S/*
S * The table of GFILE's
S */
Sstatic GFILE gfileArr[GFILE_MAX_GFILES];
SGFILE *gfileStdIn;
SGFILE *gfileStdOut;
SGFILE *gfileStdErr;
S
S/**
S * The init routine
S */
Svoid _gfileInit(void) {
S	#if GFILE_NEED_NATIVEFS
S		extern void _gfileNativeAssignStdio(void);
S		_gfileNativeAssignStdio();
S	#endif
S}
S
Svoid _gfileDeinit(void)
S{
S	GFILE *	f;
S	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
S		if (f->flags & GFILEFLG_OPEN)
S			gfileClose(f);
S	}
S}
S
S/**
S * Internal routine to find an empty GFILE slot and interpret flags.
S */
SGFILE *_gfileFindSlot(const char *mode) {
S	GFILE *			f;
S
S	// First find an available GFILE slot.
S	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
S		if (!(f->flags & GFILEFLG_OPEN)) {
S			// Get the flags
S			switch(mode[0]) {
S			case 'r':
S				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
S				while (*++mode) {
S					switch(mode[0]) {
S					case '+':	f->flags |= GFILEFLG_WRITE;			break;
S					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
S					}
S				}
S				break;
S			case 'w':
S				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
S				while (*++mode) {
S					switch(mode[0]) {
S					case '+':	f->flags |= GFILEFLG_READ;			break;
S					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
S					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
S					}
S				}
S				break;
S			case 'a':
S				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
S				while (*++mode) {
S					switch(mode[0]) {
S					case '+':	f->flags |= GFILEFLG_READ;			break;
S					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
S					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
S					}
S				}
S				break;
S			default:
S				return 0;
S			}
S			return f;
S		}
S	}
S	return 0;
S}
S
S/********************************************************
S * IO routines
S ********************************************************/
S
Sbool_t gfileExists(const char *fname) {
S	const GFILEVMT * const *p;
S
S	#if GFILE_ALLOW_DEVICESPECIFIC
S		if (fname[0] && fname[1] == '|') {
S			for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S				if (p[0]->prefix == fname[0])
S					return p[0]->exists && p[0]->exists(fname+2);
S			}
S			return FALSE;
S		}
S	#endif
S
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->exists && p[0]->exists(fname))
S			return TRUE;
S	}
S	return FALSE;
S}
S
Sbool_t gfileDelete(const char *fname) {
S	const GFILEVMT **p;
S
S	#if GFILE_ALLOW_DEVICESPECIFIC
S		if (fname[0] && fname[1] == '|') {
S			for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S				if (p[0]->prefix == fname[0])
S					return p[0]->del && p[0]->del(fname+2);
S			}
S			return FALSE;
S		}
S	#endif
S
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->del && p[0]->del(fname))
S			return TRUE;
S	}
S	return FALSE;
S}
S
Slong int gfileGetFilesize(const char *fname) {
S	const GFILEVMT * const *p;
S	long int res;
S
S	#if GFILE_ALLOW_DEVICESPECIFIC
S		if (fname[0] && fname[1] == '|') {
S			for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S				if (p[0]->prefix == fname[0])
S					return p[0]->filesize ? p[0]->filesize(fname+2) : -1;
S			}
S			return -1;
S		}
S	#endif
S
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->filesize && (res = p[0]->filesize(fname)) != -1)
S			return res;
S	}
S	return -1;
S}
S
Sbool_t gfileRename(const char *oldname, const char *newname) {
S	const GFILEVMT * const *p;
S
S	#if GFILE_ALLOW_DEVICESPECIFIC
S		if ((oldname[0] && oldname[1] == '|') || (newname[0] && newname[1] == '|')) {
S			char ch;
S
S			if (oldname[0] && oldname[1] == '|') {
S				ch = oldname[0];
S				oldname += 2;
S				if (newname[0] && newname[1] == '|') {
S					if (newname[0] != ch)
S						// Both oldname and newname are fs specific but different ones.
S						return FALSE;
S					newname += 2;
S				}
S			} else {
S				ch = newname[0];
S				newname += 2;
S			}
S			for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S				if (p[0]->prefix == ch)
S					return p[0]->ren && p[0]->ren(oldname, newname);
S			}
S			return FALSE;
S		}
S	#endif
S
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->ren && p[0]->ren(oldname,newname))
S			return TRUE;
S	}
S	return FALSE;
S}
S
Sstatic bool_t testopen(const GFILEVMT *p, GFILE *f, const char *fname) {
S	// If we want write but the fs doesn't allow it then return
S	if ((f->flags & GFILEFLG_WRITE) && !(p->flags & GFSFLG_WRITEABLE))
S		return FALSE;
S
S	// Try to open
S	if (!p->open || !p->open(f, fname))
S		return FALSE;
S
S	// File is open - fill in all the details
S	f->vmt = p;
S	f->pos = 0;
S	f->flags |= GFILEFLG_OPEN;
S	if (p->flags & GFSFLG_SEEKABLE)
S		f->flags |= GFILEFLG_CANSEEK;
S	return TRUE;
S}
S
SGFILE *gfileOpen(const char *fname, const char *mode) {
S	GFILE *			f;
S	const GFILEVMT * const *p;
S
S	// Get an empty file and set the flags
S	if (!(f = _gfileFindSlot(mode)))
S		return 0;
S
S	#if GFILE_ALLOW_DEVICESPECIFIC
S		if (fname[0] && fname[1] == '|') {
S			for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S				if (p[0]->prefix == fname[0])
S					return testopen(p[0], f, fname+2) ? f : 0;
S			}
S
S			// File not found
S			return 0;
S		}
S	#endif
S
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (testopen(p[0], f, fname))
S			return f;
S	}
S
S	// File not found
S	return 0;
S}
S
Svoid gfileClose(GFILE *f) {
S	if (!f || !(f->flags & GFILEFLG_OPEN))
S		return;
S	if (f->vmt->close)
S		f->vmt->close(f);
S	f->flags = 0;
S}
S
Ssize_t gfileRead(GFILE *f, void *buf, size_t len) {
S	size_t	res;
S
S	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_READ)) != (GFILEFLG_OPEN|GFILEFLG_READ))
S		return 0;
S	if (!f->vmt->read)
S		return 0;
S	if ((res = f->vmt->read(f, buf, len)) <= 0)
S		return 0;
S	f->pos += res;
S	return res;
S}
S
Ssize_t gfileWrite(GFILE *f, const void *buf, size_t len) {
S	size_t	res;
S
S	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_WRITE)) != (GFILEFLG_OPEN|GFILEFLG_WRITE))
S		return 0;
S	if (!f->vmt->write)
S		return 0;
S	if ((res = f->vmt->write(f, buf, len)) <= 0)
S		return 0;
S	f->pos += res;
S	return res;
S}
S
Slong int gfileGetPos(GFILE *f) {
S	if (!f || !(f->flags & GFILEFLG_OPEN))
S		return 0;
S	return f->pos;
S}
S
Sbool_t gfileSetPos(GFILE *f, long int pos) {
S	if (!f || !(f->flags & GFILEFLG_OPEN))
S		return FALSE;
S	if (!f->vmt->setpos || !f->vmt->setpos(f, pos))
S		return FALSE;
S	f->pos = pos;
S	return TRUE;
S}
S
Slong int gfileGetSize(GFILE *f) {
S	if (!f || !(f->flags & GFILEFLG_OPEN))
S		return 0;
S	if (!f->vmt->getsize)
S		return 0;
S	return f->vmt->getsize(f);
S}
S
Sbool_t gfileEOF(GFILE *f) {
S	if (!f || !(f->flags & GFILEFLG_OPEN))
S		return TRUE;
S	if (!f->vmt->eof)
S		return FALSE;
S	return f->vmt->eof(f);
S}
S
Sbool_t gfileMount(char fs, const char* drive) {
S	const GFILEVMT * const *p;
S
S	// Find the correct VMT
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->prefix == fs) {
S			if (!p[0]->mount)
S				return FALSE;
S			return p[0]->mount(drive);
S		}
S	}
S	return FALSE;
S}
S
Sbool_t gfileUnmount(char fs, const char* drive) {
S	const GFILEVMT * const *p;
S
S	// Find the correct VMT
S	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S		if (p[0]->prefix == fs) {
S			if (!p[0]->mount)
S				return FALSE;
S			return p[0]->unmount(drive);
S		}
S	}
S	return FALSE;
S}
S
Sbool_t gfileSync(GFILE *f) {
S	if (!f->vmt->sync)
S		return FALSE;
S	return f->vmt->sync(f);
S}
S
S#if GFILE_NEED_FILELISTS
S	gfileList *gfileOpenFileList(char fs, const char *path, bool_t dirs) {
S		const GFILEVMT * const *p;
S		gfileList *		pfl;
S
S		// Find the correct VMT
S		for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
S			if (p[0]->prefix == fs) {
S				if (!p[0]->flopen)
S					return 0;
S				pfl = p[0]->flopen(path, dirs);
S				if (pfl) {
S					pfl->vmt = p[0];
S					pfl->dirs = dirs;
S				}
S				return pfl;
S			}
S		}
S		return 0;
S	}
S
S	const char *gfileReadFileList(gfileList *pfl) {
S		return pfl->vmt->flread ? pfl->vmt->flread(pfl) : 0;
S	}
S
S	void gfileCloseFileList(gfileList *pfl) {
S		if (pfl->vmt->flclose)
S			pfl->vmt->flclose(pfl);
S	}
S#endif
S
N#endif /* GFX_USE_GFILE */
L 9 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_native.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_native.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The native file-system
N ********************************************************/
N
N// We need to include stdio.h below. Turn off GFILE_NEED_STDIO just for this file to prevent conflicts
N#define GFILE_NEED_STDIO_MUST_BE_OFF
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_NATIVEFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S
S#include <stdio.h>
S#include <sys/types.h>
S#include <sys/stat.h>
S
Sstatic bool_t NativeDel(const char *fname);
Sstatic bool_t NativeExists(const char *fname);
Sstatic long int	NativeFilesize(const char *fname);
Sstatic bool_t NativeRen(const char *oldname, const char *newname);
Sstatic bool_t NativeOpen(GFILE *f, const char *fname);
Sstatic void NativeClose(GFILE *f);
Sstatic int NativeRead(GFILE *f, void *buf, int size);
Sstatic int NativeWrite(GFILE *f, const void *buf, int size);
Sstatic bool_t NativeSetpos(GFILE *f, long int pos);
Sstatic long int NativeGetsize(GFILE *f);
Sstatic bool_t NativeEof(GFILE *f);
S#if GFILE_NEED_FILELISTS
S	static gfileList *NativeFlOpen(const char *path, bool_t dirs);
S	static const char *NativeFlRead(gfileList *pfl);
S	static void NativeFlClose(gfileList *pfl);
S#endif
S
Sconst GFILEVMT FsNativeVMT = {
S	#if defined(WIN32) || GFX_USE_OS_WIN32
S		GFSFLG_TEXTMODES|
S	#else
S		GFSFLG_CASESENSITIVE|
S	#endif
S	GFSFLG_WRITEABLE|GFSFLG_SEEKABLE|GFSFLG_FAST,		// flags
S	'N',												// prefix
S	NativeDel, NativeExists, NativeFilesize, NativeRen,
S	NativeOpen, NativeClose, NativeRead, NativeWrite,
S	NativeSetpos, NativeGetsize, NativeEof,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		NativeFlOpen, NativeFlRead, NativeFlClose
S	#endif
S};
S
Svoid _gfileNativeAssignStdio(void) {
S	static GFILE NativeStdIn;
S	static GFILE NativeStdOut;
S	static GFILE NativeStdErr;
S
S	NativeStdIn.flags = GFILEFLG_OPEN|GFILEFLG_READ;
S	NativeStdIn.vmt = &FsNativeVMT;
S	NativeStdIn.obj = (void *)stdin;
S	NativeStdIn.pos = 0;
S	gfileStdIn = &NativeStdIn;
S	NativeStdOut.flags = GFILEFLG_OPEN|GFILEFLG_WRITE|GFILEFLG_APPEND;
S	NativeStdOut.vmt = &FsNativeVMT;
S	NativeStdOut.obj = (void *)stdout;
S	NativeStdOut.pos = 0;
S	gfileStdOut = &NativeStdOut;
S	NativeStdErr.flags = GFILEFLG_OPEN|GFILEFLG_WRITE|GFILEFLG_APPEND;
S	NativeStdErr.vmt = &FsNativeVMT;
S	NativeStdErr.obj = (void *)stderr;
S	NativeStdErr.pos = 0;
S	gfileStdErr = &NativeStdErr;
S}
S
Sstatic void Native_flags2mode(char *buf, uint16_t flags) {
S	if (flags & GFILEFLG_MUSTEXIST)
S		*buf = 'r';
S	else if (flags & GFILEFLG_APPEND)
S		*buf = 'a';
S	else
S		*buf = 'w';
S	buf++;
S	if ((flags & (GFILEFLG_READ|GFILEFLG_WRITE)) == (GFILEFLG_READ|GFILEFLG_WRITE))
S		*buf++ = '+';
S	if (flags & GFILEFLG_BINARY)
S		*buf++ = 'b';
S	if (flags & GFILEFLG_MUSTNOTEXIST)
S		*buf++ = 'x';
S	*buf++ = 0;
S}
S
Sstatic bool_t NativeDel(const char *fname)							{ return remove(fname) ? FALSE : TRUE; }
Sstatic void NativeClose(GFILE *f)									{ fclose((FILE *)f->obj); }
Sstatic int NativeRead(GFILE *f, void *buf, int size)				{ return fread(buf, 1, size, (FILE *)f->obj); }
Sstatic int NativeWrite(GFILE *f, const void *buf, int size)			{ return fwrite(buf, 1, size, (FILE *)f->obj); }
Sstatic bool_t NativeSetpos(GFILE *f, long int pos)					{ return fseek((FILE *)f->obj, pos, SEEK_SET) ?  FALSE : TRUE; }
Sstatic bool_t NativeEof(GFILE *f)									{ return feof((FILE *)f->obj) ? TRUE : FALSE; }
Sstatic bool_t NativeRen(const char *oldname, const char *newname)	{ return rename(oldname, newname) ? FALSE : TRUE; }
Sstatic bool_t NativeExists(const char *fname) {
S	// We define access this way so we don't have to include <unistd.h> which may
S	//	(and does under windows) contain conflicting definitions for types such as uint16_t.
S	extern int access(const char *pathname, int mode);
S	return access(fname, 0) ? FALSE : TRUE;
S}
Sstatic long int	NativeFilesize(const char *fname) {
S	struct stat st;
S	if (stat(fname, &st)) return -1;
S	return st.st_size;
S}
Sstatic bool_t NativeOpen(GFILE *f, const char *fname) {
S	FILE *fd;
S	char mode[5];
S
S	Native_flags2mode(mode, f->flags);
S	if (!(fd = fopen(fname, mode)))
S		return FALSE;
S	f->obj = (void *)fd;
S	return TRUE;
S}
Sstatic long int NativeGetsize(GFILE *f) {
S	struct stat st;
S	if (fstat(fileno((FILE *)f->obj), &st)) return -1;
S	return st.st_size;
S}
S
S#if GFILE_NEED_FILELISTS
S	#if defined(WIN32) || GFX_USE_OS_WIN32
S		typedef struct NativeFileList {
S			gfileList			fl;
S			HANDLE				d;
S			WIN32_FIND_DATA		f;
S			bool_t				first;
S		} NativeFileList;
S
S		static gfileList *NativeFlOpen(const char *path, bool_t dirs) {
S			NativeFileList		*p;
S			(void)				dirs;
S
S			if (!(p = gfxAlloc(sizeof(NativeFileList))))
S				return 0;
S			if ((p->d = FindFirstFile(path, &p->f)) == INVALID_HANDLE_VALUE) {
S				gfxFree(p);
S				return 0;
S			}
S			p->first = TRUE;
S			return &p->fl;
S		}
S
S		static const char *NativeFlRead(gfileList *pfl) {
S			#define nfl		((NativeFileList *)pfl)
S			while(1) {
S				if (!nfl->first && !FindNextFile(nfl->d, &nfl->f))
S					return 0;
S				nfl->first = FALSE;
S				if (nfl->f.cFileName[0] == '.')
S					continue;
S				if (nfl->fl.dirs) {
S					if ((nfl->f.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
S						break;
S				} else {
S					if (!(nfl->f.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
S						break;
S				}
S			}
S			return nfl->f.cFileName;
S			#undef nfl
S		}
S
S		static void NativeFlClose(gfileList *pfl) {
S			CloseHandle(((NativeFileList *)pfl)->d);
S			gfxFree(pfl);
S		}
S
S	#else
S		#include <dirent.h>
S
S		typedef struct NativeFileList {
S			gfileList			fl;
S			DIR *				d;
S			struct dirent *		f;
S		} NativeFileList;
S
S		static gfileList *NativeFlOpen(const char *path, bool_t dirs) {
S			NativeFileList		*p;
S			(void)				dirs;
S
S			if (!(p = gfxAlloc(sizeof(NativeFileList))))
S				return 0;
S			if (!(p->d = opendir(path))) {
S				gfxFree(p);
S				return 0;
S			}
S			return &p->fl;
S		}
S
S		static const char *NativeFlRead(gfileList *pfl) {
S			#define nfl		((NativeFileList *)pfl)
S			while(1) {
S				if (!(nfl->f = readdir(nfl->d)))
S					return 0;
S				if (nfl->f->d_name[0] == '.')
S					continue;
S
S				#ifdef _DIRENT_HAVE_D_TYPE
S					if (nfl->fl.dirs) {
S						if (nfl->f->d_type == DT_DIR)
S							break;
S					} else {
S						if (nfl->f->d_type == DT_REG)
S							break;
S					}
S				#else
S					// Oops - no type field. We could use stat() here but that would mean
S					//			concatting the supplied path to the found filename.
S					//			That all just seems too hard. Instead we just don't
S					//			distinguish between files and directories.
S					break;
S				#endif
S			}
S			return nfl->f->d_name;
S			#undef nfl
S		}
S
S		static void NativeFlClose(gfileList *pfl) {
S			closedir(((NativeFileList *)pfl)->d);
S			gfxFree(pfl);
S		}
S	#endif
S#endif
S
N#endif //GFX_USE_GFILE && GFILE_NEED_NATIVEFS
L 10 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_ram.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_ram.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The RAM file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_RAMFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S
S#error "GFILE: RAMFS Not implemented yet"
S
Sconst GFILEVMT FsRAMVMT = {
S	0,								// flags
S	'R',							// prefix
S	0, 0, 0, 0,
S	0, 0, 0, 0,
S	0, 0, 0,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		0, 0, 0,
S	#endif
S};
S
N#endif //GFX_USE_GFILE && GFILE_NEED_RAMFS
L 11 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_rom.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_rom.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The ROM file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_ROMFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S
S#include <string.h>
S
S// What directory file formats do we understand
S#define ROMFS_DIR_VER_MAX			0x0000
S
S// Compression Formats
S#define ROMFS_CMP_UNCOMPRESSED		0
S
Stypedef struct ROMFS_DIRENTRY {
S	uint16_t						ver;			// Directory Entry Version
S	uint16_t						cmp;			// Compression format
S	const struct ROMFS_DIRENTRY *	next;			// The next entry
S	const char *					name;			// The file name
S	long int						size;			// The file size
S	const char *					file;			// The file data
S} ROMFS_DIRENTRY;
S
S#define ROMFS_DIRENTRY_HEAD		0
S#include "romfs_files.h"
Sstatic const ROMFS_DIRENTRY const *FsROMHead = ROMFS_DIRENTRY_HEAD;
S
Stypedef struct ROMFileList {
S	gfileList				fl;
S	const ROMFS_DIRENTRY	*pdir;
S} ROMFileList;
S
S
Sstatic bool_t ROMExists(const char *fname);
Sstatic long int	ROMFilesize(const char *fname);
Sstatic bool_t ROMOpen(GFILE *f, const char *fname);
Sstatic void ROMClose(GFILE *f);
Sstatic int ROMRead(GFILE *f, void *buf, int size);
Sstatic bool_t ROMSetpos(GFILE *f, long int pos);
Sstatic long int ROMGetsize(GFILE *f);
Sstatic bool_t ROMEof(GFILE *f);
S#if GFILE_NEED_FILELISTS
S	static gfileList *ROMFlOpen(const char *path, bool_t dirs);
S	static const char *ROMFlRead(gfileList *pfl);
S	static void ROMFlClose(gfileList *pfl);
S#endif
S
Sconst GFILEVMT FsROMVMT = {
S	GFSFLG_CASESENSITIVE|GFSFLG_SEEKABLE|GFSFLG_FAST,	// flags
S	'S',												// prefix
S	0, ROMExists, ROMFilesize, 0,
S	ROMOpen, ROMClose, ROMRead, 0,
S	ROMSetpos, ROMGetsize, ROMEof,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		ROMFlOpen, ROMFlRead, ROMFlClose
S	#endif
S};
S
Sstatic const ROMFS_DIRENTRY *ROMFindFile(const char *fname)
S{
S	const ROMFS_DIRENTRY *p;
S
S	for(p = FsROMHead; p; p = p->next) {
S		if (p->ver <= ROMFS_DIR_VER_MAX && p->cmp == ROMFS_CMP_UNCOMPRESSED && !strcmp(p->name, fname))
S			break;
S	}
S	return p;
S}
S
Sstatic bool_t ROMExists(const char *fname)
S{
S	return ROMFindFile(fname) != 0;
S}
S
Sstatic long int	ROMFilesize(const char *fname)
S{
S	const ROMFS_DIRENTRY *p;
S
S	if (!(p = ROMFindFile(fname))) return -1;
S	return p->size;
S}
S
Sstatic bool_t ROMOpen(GFILE *f, const char *fname)
S{
S	const ROMFS_DIRENTRY *p;
S
S	if (!(p = ROMFindFile(fname))) return FALSE;
S	f->obj = (void *)p;
S	return TRUE;
S}
S
Sstatic void ROMClose(GFILE *f)
S{
S	(void)f;
S}
S
Sstatic int ROMRead(GFILE *f, void *buf, int size)
S{
S	const ROMFS_DIRENTRY *p;
S
S	p = (const ROMFS_DIRENTRY *)f->obj;
S	if (p->size - f->pos < size)
S		size = p->size - f->pos;
S	if (size <= 0)	return 0;
S	memcpy(buf, p->file+f->pos, size);
S	return size;
S}
S
Sstatic bool_t ROMSetpos(GFILE *f, long int pos)
S{
S	return pos <= ((const ROMFS_DIRENTRY *)f->obj)->size;
S}
S
Sstatic long int ROMGetsize(GFILE *f)
S{
S	return ((const ROMFS_DIRENTRY *)f->obj)->size;
S}
S
Sstatic bool_t ROMEof(GFILE *f)
S{
S	return f->pos >= ((const ROMFS_DIRENTRY *)f->obj)->size;
S}
S
S#if GFILE_NEED_FILELISTS
S	static gfileList *ROMFlOpen(const char *path, bool_t dirs) {
S		ROMFileList *	p;
S		(void)			path;
S
S		// We don't support directories or path searching
S		if (dirs)
S			return 0;
S
S		// Allocate the list buffer
S		if (!(p = gfxAlloc(sizeof(ROMFileList))))
S			return 0;
S
S		// Initialize it and return it.
S		p->pdir = 0;
S		return &p->fl;
S	}
S
S	static const char *ROMFlRead(gfileList *pfl) {
S		#define rfl		((ROMFileList *)pfl)
S
S		// Is it the first entry
S		if (!rfl->pdir) {
S			rfl->pdir = FsROMHead;
S			return FsROMHead->name;
S		}
S
S		// Is it not the last entry
S		if (rfl->pdir->next) {
S			rfl->pdir = rfl->pdir->next;
S			return rfl->pdir->name;
S		}
S
S		return 0;
S		#undef rfl
S	}
S
S	static void ROMFlClose(gfileList *pfl) {
S		gfxFree(pfl);
S	}
S#endif
S
N#endif //GFX_USE_GFILE && GFILE_NEED_ROMFS
L 12 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_fatfs.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_fatfs.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The FATFS file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_FATFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S#include "gfile_fatfs_wrapper.h"
S
S/********************************************************
S * The FAT file-system VMT
S ********************************************************/
S
Sstatic bool_t fatfsDel(const char* fname);
Sstatic bool_t fatfsExists(const char* fname);
Sstatic long int fatfsFileSize(const char* fname);
Sstatic bool_t fatfsRename(const char* oldname, const char* newname);
Sstatic bool_t fatfsOpen(GFILE* f, const char* fname);
Sstatic void fatfsClose(GFILE* f);
Sstatic int fatfsRead(GFILE* f, void* buf, int size);
Sstatic int fatfsWrite(GFILE* f, const void* buf, int size);
Sstatic bool_t fatfsSetPos(GFILE* f, long int pos);
Sstatic long int fatfsGetSize(GFILE* f);
Sstatic bool_t fatfsEOF(GFILE* f);
Sstatic bool_t fatfsMount(const char* drive);
Sstatic bool_t fatfsUnmount(const char* drive);
Sstatic bool_t fatfsSync(GFILE* f);
S#if GFILE_NEED_FILELISTS && _FS_MINIMIZE <= 1
S	static gfileList *fatfsFlOpen(const char *path, bool_t dirs);
S	static const char *fatfsFlRead(gfileList *pfl);
S	static void fatfsFlClose(gfileList *pfl);
S#endif
S
Sconst GFILEVMT FsFatFSVMT = {
S	GFSFLG_WRITEABLE | GFSFLG_SEEKABLE,
S	'F',
S	fatfsDel,
S	fatfsExists,
S	fatfsFileSize,
S	fatfsRename,
S	fatfsOpen,
S	fatfsClose,
S	fatfsRead,
S	fatfsWrite,
S	fatfsSetPos,
S	fatfsGetSize,
S	fatfsEOF,
S	fatfsMount, fatfsUnmount, fatfsSync,
S	#if GFILE_NEED_FILELISTS
S		#if _FS_MINIMIZE <= 1
S			fatfsFlOpen, fatfsFlRead, fatfsFlClose
S		#else
S			0, 0, 0
S		#endif
S	#endif
S};
S
S// Our directory list structure
Stypedef struct fatfsList {
S	gfileList	fl;					// This must be the first element.
S	DIR			dir;
S	FILINFO		fno;
S	#if _USE_LFN
S		char	lfn[_MAX_LFN + 1];   /* Buffer to store the LFN */
S	#endif
S} fatfsList;
S
S// optimize these later on. Use an array to have multiple FatFS
Sstatic bool_t fatfs_mounted = FALSE;
Sstatic FATFS fatfs_fs;
S
Sstatic BYTE fatfs_flags2mode(GFILE* f)
S{
S	BYTE mode = 0;
S
S	if (f->flags & GFILEFLG_READ)
S		mode |= FA_READ;
S	if (f->flags & GFILEFLG_WRITE)
S		mode |= FA_WRITE;
S	if (f->flags & GFILEFLG_APPEND)
S		mode |= 0;  // ToDo
S	if (f->flags & GFILEFLG_TRUNC)
S		mode |= FA_CREATE_ALWAYS;
S
S	/* ToDo - Complete */
S	return mode;
S}
S
Sstatic bool_t fatfsDel(const char* fname)
S{
S	FRESULT ferr;
S
S	ferr = f_unlink( (const TCHAR*)fname );
S	if (ferr != FR_OK)
S		return FALSE;
S
S	return TRUE;
S}
S
Sstatic bool_t fatfsExists(const char* fname)
S{
S	FRESULT ferr;
S	FILINFO fno;
S
S	ferr = f_stat( (const TCHAR*)fname, &fno);
S	if (ferr != FR_OK)
S		return FALSE;
S
S	return TRUE;
S}
S
Sstatic long int fatfsFileSize(const char* fname)
S{
S	FRESULT ferr;
S	FILINFO fno;
S
S	ferr = f_stat( (const TCHAR*)fname, &fno );
S	if (ferr != FR_OK)
S		return 0;
S
S	return (long int)fno.fsize;
S}
S
Sstatic bool_t fatfsRename(const char* oldname, const char* newname)
S{
S	FRESULT ferr;
S
S	ferr = f_rename( (const TCHAR*)oldname, (const TCHAR*)newname );
S	if (ferr != FR_OK)
S		return FALSE;
S
S	return TRUE;
S}
S
Sstatic bool_t fatfsOpen(GFILE* f, const char* fname)
S{
S	FIL* fd;
S
S	#if !GFILE_NEED_NOAUTOMOUNT
S		if (!fatfs_mounted && !fatfsMount(""))
S			return FALSE;
S	#endif
S
S	if (!(fd = gfxAlloc(sizeof(FIL))))
S		return FALSE;
S
S	if (f_open(fd, fname, fatfs_flags2mode(f)) != FR_OK) {
S		gfxFree(fd);
S		f->obj = 0;
S
S		return FALSE;
S	}
S
S	f->obj = (void*)fd;
S
S	#if !GFILE_NEED_NOAUTOSYNC
S		// no need to sync when not opening for write
S		if (f->flags & GFILEFLG_WRITE) {
S			f_sync( (FIL*)f->obj );
S		}
S	#endif
S
S	return TRUE;	
S}
S
Sstatic void fatfsClose(GFILE* f)
S{
S	if ((FIL*)f->obj != 0) { 
S		f_close( (FIL*)f->obj );
S		gfxFree( (FIL*)f->obj );
S	}
S}
S
Sstatic int fatfsRead(GFILE* f, void* buf, int size)
S{
S	int br;
S
S	f_read( (FIL*)f->obj, buf, size, (UINT*)&br);
S
S	return br;
S}
S
Sstatic int fatfsWrite(GFILE* f, const void* buf, int size)
S{
S	int wr;
S
S	f_write( (FIL*)f->obj, buf, size, (UINT*)&wr);
S	#if !GFILE_NEED_NOAUTOSYNC
S		f_sync( (FIL*)f->obj );
S	#endif
S
S	return wr;
S}
S
Sstatic bool_t fatfsSetPos(GFILE* f, long int pos)
S{
S	FRESULT ferr;
S
S	ferr = f_lseek( (FIL*)f->obj, (DWORD)pos );
S	if (ferr != FR_OK)
S		return FALSE;
S
S	return TRUE;
S}
S
Sstatic long int fatfsGetSize(GFILE* f)
S{
S	return (long int)f_size( (FIL*)f->obj );
S}
S
Sstatic bool_t fatfsEOF(GFILE* f)
S{
S	if ( f_eof( (FIL*)f->obj ) != 0)
S		return TRUE;
S	else
S		return FALSE;
S}
S
Sstatic bool_t fatfsMount(const char* drive)
S{
S	FRESULT ferr;
S
S	if (!fatfs_mounted) {
S		ferr = f_mount(&fatfs_fs, drive, 1);
S		if (ferr !=  FR_OK)
S			return FALSE;
S		fatfs_mounted = TRUE;
S		return TRUE;
S	}
S
S	return FALSE;
S}
S
Sstatic bool_t fatfsUnmount(const char* drive)
S{
S	(void)drive;
S
S	if (fatfs_mounted) {
S		// FatFS does not provide an unmount routine.
S		fatfs_mounted = FALSE;
S		return TRUE;
S	}
S
S	return FALSE;
S}
S
Sstatic bool_t fatfsSync(GFILE *f)
S{
S	FRESULT ferr;
S
S	ferr = f_sync( (FIL*)f->obj );
S	if (ferr != FR_OK) {
S		return FALSE;
S	}
S
S	return TRUE;
S}
S
S#if GFILE_NEED_FILELISTS && _FS_MINIMIZE <= 1
S	static gfileList *fatfsFlOpen(const char *path, bool_t dirs) {
S		fatfsList	*p;
S		(void) dirs;
S
S		if (!(p = gfxAlloc(sizeof(fatfsList))))
S			return 0;
S
S		if (f_opendir(&p->dir, path) != FR_OK) {
S			gfxFree(p);
S			return 0;
S		}
S		return &p->fl;
S	}
S
S	static const char *fatfsFlRead(gfileList *pfl) {
S		#define ffl		((fatfsList *)pfl)
S
S		while(1) {
S			#if _USE_LFN
S				ffl->fno.lfname = ffl->lfn;
S				ffl->fno.lfsize = sizeof(ffl->lfn);
S			#endif
S
S			// Read the next entry
S			if (f_readdir(&ffl->dir, &ffl->fno) != FR_OK || !ffl->fno.fname[0])
S				return 0;
S
S			/* Ignore dot entries */
S			if (ffl->fno.fname[0] == '.') continue;
S
S			/* Is it a directory */
S			if (ffl->fl.dirs) {
S				if ((ffl->fno.fattrib & AM_DIR))
S					break;
S			} else {
S				if (!(ffl->fno.fattrib & AM_DIR))
S					break;
S			}
S		}
S
S		#if _USE_LFN
S			return ffl->fno.lfname[0] ? ffl->fno.lfname : ffl->fno.fname;
S		#else
S			return ffl->fno.fname;
S		#endif
S		#undef ffl
S	}
S
S	static void fatfsFlClose(gfileList *pfl) {
S		f_closedir(&((fatfsList *)pfl)->dir);
S		gfxFree(pfl);
S	}
S
S#endif
S
N#endif //GFX_USE_GFILE && GFILE_NEED_FATFS
N
L 13 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_petitfs.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_petitfs.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The PETITFS file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_PETITFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S#include "gfile_petitfs_wrapper.h"
S
Sstatic bool_t petitfsExists(const char* fname);
Sstatic bool_t petitfsOpen(GFILE* f, const char* fname);
Sstatic int petitfsRead(GFILE* f, void* buf, int size);
Sstatic bool_t petitfsSetPos(GFILE* f, long int pos);
S#if GFILE_NEED_FILELISTS && _FS_MINIMIZE <= 1
S	static gfileList *petitfsFlOpen(const char *path, bool_t dirs);
S	static const char *petitfsFlRead(gfileList *pfl);
S	static void petitfsFlClose(gfileList *pfl);
S#endif
S
Sconst GFILEVMT FsPetitFSVMT = {
S	GFSFLG_WRITEABLE | GFSFLG_SEEKABLE,
S	'F',
S	0,
S	petitfsExists,
S	0,					// No Filesize
S	0,
S	petitfsOpen,
S	0,					// No Close
S	petitfsRead,
S	0,					// No Write
S	petitfsSetPos,
S	0,					// No Getsize
S	0,					// No EOF
S	0, 0, 0,			// No Mount, UnMount or Sync
S	#if GFILE_NEED_FILELISTS
S		#if _USE_DIR
S			petitfsFlOpen, petitfsFlRead, petitfsFlClose
S		#else
S			0, 0, 0
S		#endif
S	#endif
S};
S
S// Our directory list structure
Stypedef struct petitfsList {
S	gfileList	fl;					// This must be the first element.
S	DIR			dir;
S	FILINFO		fno;
S} petitfsList;
S
S// optimize these later on. Use an array to have multiple
Sstatic bool_t petitfs_mounted = FALSE;
Sstatic FATFS petitfs_fs;
S
Sstatic bool_t petitfsExists(const char* fname)
S{
S	// Mount first
S	if (!petitfs_mounted && pf_mount(&petitfs_fs) != FR_OK)
S		return FALSE;
S
S	// Open
S	if (pf_open(fname) != FR_OK)
S		return FALSE;
S
S	return TRUE;
S}
S
Sstatic bool_t petitfsOpen(GFILE* f, const char* fname)
S{
S	// No writing
S	if ((f->flags & GFILEFLG_WRITE))
S		return FALSE;
S
S	// Mount first
S	if (!petitfs_mounted && pf_mount(&petitfs_fs) != FR_OK)
S		return FALSE;
S
S	// Open
S	if (pf_open(fname) != FR_OK)
S		return FALSE;
S
S	f->obj = &petitfs_fs;
S	return TRUE;	
S}
S
Sstatic int petitfsRead(GFILE* f, void* buf, int size)
S{
S	int		br;
S	(void)	f;
S
S	if (pf_read(buf, size, (UINT*)&br) != FR_OK)
S		return 0;
S
S	return br;
S}
S
Sstatic bool_t petitfsSetPos(GFILE* f, long int pos)
S{
S	(void)	f;
S	return pf_lseek((DWORD)pos) == FR_OK;
S}
S
S#if GFILE_NEED_FILELISTS
S	static gfileList *petitfsFlOpen(const char *path, bool_t dirs) {
S		petitfsList	*p;
S		(void) dirs;
S
S		if (!(p = gfxAlloc(sizeof(petitfsList))))
S			return 0;
S
S		if (pf_opendir(&p->dir, path) != FR_OK) {
S			gfxFree(p);
S			return 0;
S		}
S		return &p->fl;
S	}
S
S	static const char *petitfsFlRead(gfileList *pfl) {
S		#define ffl		((petitfsList *)pfl)
S
S		while(1) {
S			// Read the next entry
S			if (pf_readdir(&ffl->dir, &ffl->fno) != FR_OK || !ffl->fno.fname[0])
S				return 0;
S
S			/* Ignore dot entries */
S			if (ffl->fno.fname[0] == '.') continue;
S
S			/* Is it a directory */
S			if (ffl->fl.dirs) {
S				if ((ffl->fno.fattrib & AM_DIR))
S					break;
S			} else {
S				if (!(ffl->fno.fattrib & (AM_DIR|AM_HID|AM_SYS)))
S					break;
S			}
S		}
S
S		return ffl->fno.fname;
S	}
S
S	static void petitfsFlClose(gfileList *pfl) {
S		gfxFree(pfl);
S	}
S
S#endif
S
N#endif //GFX_USE_GFILE && GFILE_NEED_PETITFS
L 14 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_mem.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_mem.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The virtual memory file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_MEMFS
X#if 0 && 0
S
S#include "gfile_fs.h"
S
S#include <string.h>
S
Sstatic int MEMRead(GFILE *f, void *buf, int size);
Sstatic int MEMWrite(GFILE *f, const void *buf, int size);
Sstatic bool_t MEMSetpos(GFILE *f, long int pos);
S
Sstatic const GFILEVMT FsMemVMT = {
S	GFSFLG_SEEKABLE|GFSFLG_WRITEABLE,					// flags
S	0,													// prefix
S	0, 0, 0, 0,
S	0, 0, MEMRead, MEMWrite,
S	MEMSetpos, 0, 0,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		0, 0, 0,
S	#endif
S};
S
Sstatic int MEMRead(GFILE *f, void *buf, int size) {
S	memcpy(buf, ((char *)f->obj)+f->pos, size);
S	return size;
S}
Sstatic int MEMWrite(GFILE *f, const void *buf, int size) {
S	memcpy(((char *)f->obj)+f->pos, buf, size);
S	return size;
S}
Sstatic bool_t MEMSetpos(GFILE *f, long int pos) {
S	(void) f;
S	(void) pos;
S	return TRUE;
S}
S
SGFILE *	gfileOpenMemory(void *memptr, const char *mode) {
S	GFILE	*f;
S
S	// Get an empty file and set the flags
S	if (!(f = _gfileFindSlot(mode)))
S		return 0;
S
S	// File is open - fill in all the details
S	f->vmt = &FsMemVMT;
S	f->obj = memptr;
S	f->pos = 0;
S	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
S	return f;
S}
S
N#endif //GFX_USE_GFILE && GFILE_NEED_MEMFS
L 15 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_chibios.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_chibios.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The ChibiOS FileStream file-system
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_CHIBIOSFS && GFX_USE_OS_CHIBIOS
X#if 0 && 0 && 0
S
S#include "gfile_fs.h"
S
Sstatic void ChibiOSBFSClose(GFILE *f);
Sstatic int ChibiOSBFSRead(GFILE *f, void *buf, int size);
Sstatic int ChibiOSBFSWrite(GFILE *f, const void *buf, int size);
Sstatic bool_t ChibiOSBFSSetpos(GFILE *f, long int pos);
Sstatic long int ChibiOSBFSGetsize(GFILE *f);
Sstatic bool_t ChibiOSBFSEof(GFILE *f);
S
Sstatic const GFILEVMT FsCHIBIOSVMT = {
S	GFSFLG_SEEKABLE|GFSFLG_WRITEABLE,					// flags
S	0,													// prefix
S	0, 0, 0, 0,
S	0, ChibiOSBFSClose, ChibiOSBFSRead, ChibiOSBFSWrite,
S	ChibiOSBFSSetpos, ChibiOSBFSGetsize, ChibiOSBFSEof,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		0, 0, 0,
S	#endif
S};
S
S#if CH_KERNEL_MAJOR == 2
S	#define FileStream			BaseFileStream
S	#define fileStreamClose		chFileStreamClose
S	#define fileStreamRead		chSequentialStreamRead
S	#define fileStreamWrite		chSequentialStreamWrite
S	#define fileStreamSeek		chFileStreamSeek
S	#define fileStreamGetSize	chFileStreamGetSize
S#endif
S
Sstatic void ChibiOSBFSClose(GFILE *f) {
S	fileStreamClose(((FileStream *)f->obj));
S}
Sstatic int ChibiOSBFSRead(GFILE *f, void *buf, int size) {
S	return fileStreamRead(((FileStream *)f->obj), (uint8_t *)buf, size);
S}
Sstatic int ChibiOSBFSWrite(GFILE *f, const void *buf, int size) {
S	return fileStreamWrite(((FileStream *)f->obj), (uint8_t *)buf, size);
S}
Sstatic bool_t ChibiOSBFSSetpos(GFILE *f, long int pos) {
S	fileStreamSeek(((FileStream *)f->obj), pos);
S	return TRUE;
S}
Sstatic long int ChibiOSBFSGetsize(GFILE *f) { return fileStreamGetSize(((FileStream *)f->obj)); }
Sstatic bool_t ChibiOSBFSEof(GFILE *f) { return f->pos >= fileStreamGetSize(((FileStream *)f->obj)); }
S
SGFILE *		gfileOpenChibiOSFileStream(void *FileStreamPtr, const char *mode) {
S	GFILE *			f;
S
S	// Get an empty file and set the flags
S	if (!(f = _gfileFindSlot(mode)))
S		return 0;
S
S	// File is open - fill in all the details
S	f->vmt = &FsCHIBIOSVMT;
S	f->obj = FileStreamPtr;
S	f->pos = 0;
S	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
S	return f;
S}
S
N#endif //GFX_USE_GFILE && GFILE_NEED_CHIBIOSFS && GFX_USE_OS_CHIBIOS
L 16 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fs_strings.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fs_strings.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * The virtual string file
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_STRINGS
X#if 0 && 0
S
S#include "gfile_fs.h"
S
S#include <string.h>
S
S// Special String VMT
Sstatic int StringRead(GFILE *f, void *buf, int size) {
S	int		res;
S	char	*p;
S
S	if (!f->obj)
S		return 0;
S	
S	p = ((char *)f->obj) + f->pos;
S	for(res = 0; res < size && *p; res++, p++, buf = ((char *)buf)+1)
S		((char *)buf)[0] = *p;
S	return res;
S}
Sstatic int StringWrite(GFILE *f, const void *buf, int size) {
S	if (!f->obj)
S		return 0;
S	
S	if ((f->flags & GFILEFLG_APPEND)) {
S		while(((char *)f->obj)[f->pos])
S			f->pos++;
S	}
S	memcpy(((char *)f->obj)+f->pos, buf, size);
S	((char *)f->obj)[f->pos+size] = 0;
S	return size;
S}
S
Sstatic const GFILEVMT StringVMT = {
S	0,								// flags
S	'_',							// prefix
S	0, 0, 0, 0,
S	0, 0, StringRead, StringWrite,
S	0, 0, 0,
S	0, 0, 0,
S	#if GFILE_NEED_FILELISTS
S		0, 0, 0,
S	#endif
S};
S
Sstatic void gfileOpenStringFromStaticGFILE(GFILE *f, char *str) {
S	if ((f->flags & GFILEFLG_TRUNC) && str)
S		str[0] = 0;
S	f->vmt = &StringVMT;
S	f->obj = str;
S	f->pos = 0;
S	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
S}
S
SGFILE *gfileOpenString(char *str, const char *mode) {
S	GFILE	*f;
S
S	// Get an empty file and set the flags
S	if (!str || !(f = _gfileFindSlot(mode)))
S		return 0;
S
S	// File is open - fill in all the details
S	gfileOpenStringFromStaticGFILE(f, str);
S	return f;
S}
S
S#if GFILE_NEED_PRINTG
S	int snprintg(char *buf, int maxlen, const char *fmt, ...) {
S		int		res;
S		GFILE	f;
S		va_list	ap;
S
S		if (maxlen <= 1) {
S			if (maxlen == 1) {
S				*buf = 0;
S				return 0;
S			}
S			maxlen += 1;
S		}
S
S		f.flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
S		gfileOpenStringFromStaticGFILE(&f, buf);
S
S		va_start(ap, fmt);
S		res = vfnprintg(&f, maxlen-1, fmt, ap);
S		va_end(ap);
S		return res;
S	}
S	int vsnprintg(char *buf, int maxlen, const char *fmt, va_list arg) {
S		GFILE	f;
S
S		if (maxlen <= 1) {
S			if (maxlen == 1) {
S				*buf = 0;
S				return 0;
S			}
S			maxlen += 1;
S		}
S
S		f.flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
S		gfileOpenStringFromStaticGFILE(&f, buf);
S
S		return vfnprintg(&f, maxlen-1, fmt, arg);
S	}
S#endif
S
S#if GFILE_NEED_SCANG
S	int sscang(const char *buf, const char *fmt, ...) {
S		int		res;
S		GFILE	f;
S		va_list	ap;
S
S		f.flags = GFILEFLG_READ;
S		gfileOpenStringFromStaticGFILE(&f, (char *)buf);
S
S		va_start(ap, fmt);
S		res = vfscang(&f, fmt, ap);
S		va_end(ap);
S		return res;
S	}
S
S	int vsscang(const char *buf, const char *fmt, va_list arg) {
S		GFILE	f;
S
S		f.flags = GFILEFLG_READ;
S		gfileOpenStringFromStaticGFILE(&f, (char *)buf);
S
S		return vfscang(&f, fmt, arg);
S	}
S#endif
S
N#endif //GFX_USE_GFILE && GFILE_NEED_STRINGS
L 17 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_printg.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_printg.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * Printg Routines
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_PRINTG
X#if 0 && 0
S
S#include <stdarg.h>
S
S#define MAX_FILLER		11
S#define FLOAT_PRECISION 100000
S
Sint fnprintg(GFILE *f, int maxlen, const char *fmt, ...) {
S	int		res;
S	va_list	ap;
S
S	va_start(ap, fmt);
S	res = vfnprintg(f, maxlen, fmt, ap);
S	va_end(ap);
S	return res;
S}
S
Sstatic char *ltoa_wd(char *p, long num, unsigned radix, long divisor) {
S	int		i;
S	char *	q;
S
S	if (!divisor) divisor = num;
S
S	q = p + MAX_FILLER;
S	do {
S		i = (int)(num % radix);
S		i += '0';
S		if (i > '9')
S		  i += 'A' - '0' - 10;
S		*--q = i;
S		num /= radix;
S	} while ((divisor /= radix) != 0);
S
S	i = (int)(p + MAX_FILLER - q);
S	do {
S		*p++ = *q++;
S	} while (--i);
S
S	return p;
S}
S
Sint vfnprintg(GFILE *f, int maxlen, const char *fmt, va_list arg) {
S	int		ret;
S	char	*p, *s, c, filler;
S	int		i, precision, width;
S	bool_t	is_long, left_align;
S	long	l;
S	#if GFILE_ALLOW_FLOATS
S		float	fpv;
S		char	tmpbuf[2*MAX_FILLER + 1];
S	#else
S		char	tmpbuf[MAX_FILLER + 1];
S	#endif
S
S	ret = 0;
S	if (maxlen < 0)
S		return 0;
S	if (!maxlen)
S		maxlen = -1;
S
S	while (*fmt) {
S		if (*fmt != '%') {
S			gfileWrite(f, fmt, 1);
S			ret++; if (!--maxlen) return ret;
S			fmt++;
S			continue;
S		}
S		fmt++;
S
S		p = s = tmpbuf;
S		left_align = FALSE;
S		filler = ' ';
S		width = 0;
S		precision = 0;
S
S		if (*fmt == '-') {
S			fmt++;
S			left_align = TRUE;
S		}
S		if (*fmt == '0') {
S			fmt++;
S			filler = '0';
S		}
S
S		while (1) {
S			c = *fmt++;
S			if (c >= '0' && c <= '9') {
S				c -= '0';
S				width = width * 10 + c;
S			} else if (c == '*')
S				width = va_arg(arg, int);
S			else
S				break;
S		}
S		if (c == '.') {
S			while (1) {
S				c = *fmt++;
S				if (c >= '0' && c <= '9') {
S					c -= '0';
S					precision = precision * 10 + c;
S				} else if (c == '*')
S					precision = va_arg(arg, int);
S				else
S					break;
S			}
S		}
S		/* Long modifier.*/
S		if (c == 'l' || c == 'L') {
S			is_long = TRUE;
S			if (*fmt)
S				c = *fmt++;
S		}
S		else
S			is_long = (c >= 'A') && (c <= 'Z');
S
S		/* Command decoding.*/
S		switch (c) {
S		case 0:
S			return ret;
S		case 'c':
S			filler = ' ';
S			*p++ = va_arg(arg, int);
S			break;
S		case 's':
S			filler = ' ';
S			if ((s = va_arg(arg, char *)) == 0)
S				s = "(null)";
S			if (precision == 0)
S				precision = 32767;
S			for (p = s; *p && (--precision >= 0); p++);
S			break;
S		case 'D':
S		case 'd':
S			if (is_long)
S				l = va_arg(arg, long);
S			else
S				l = va_arg(arg, int);
S			if (l < 0) {
S				*p++ = '-';
S				l = -l;
S			}
S			p = ltoa_wd(p, l, 10, 0);
S			break;
S		#if GFILE_ALLOW_FLOATS
S			case 'f':
S				fpv = (float) va_arg(arg, double);
S				if (fpv < 0) {
S					*p++ = '-';
S					fpv = -fpv;
S				}
S				l = fpv;
S				p = ltoa_wd(p, l, 10, 0);
S				*p++ = '.';
S				l = (fpv - l) * FLOAT_PRECISION;
S				p = ltoa_wd(p, l, 10, FLOAT_PRECISION / 10);
S				break;
S		#endif
S		case 'X':
S		case 'x':
S			c = 16;
S			goto unsigned_common;
S		case 'U':
S		case 'u':
S			c = 10;
S			goto unsigned_common;
S		case 'O':
S		case 'o':
S			c = 8;
S		unsigned_common:
S			if (is_long)
S				l = va_arg(arg, long);
S			else
S				l = va_arg(arg, int);
S			p = ltoa_wd(p, l, c, 0);
S			break;
S		default:
S			*p++ = c;
S			break;
S		}
S
S		i = (int)(p - s);
S		if ((width -= i) < 0)
S			width = 0;
S		if (left_align == FALSE)
S			width = -width;
S		if (width < 0) {
S			if (*s == '-' && filler == '0') {
S				gfileWrite(f, s++, 1);
S				ret++; if (!--maxlen) return ret;
S				i--;
S			}
S			do {
S				gfileWrite(f, &filler, 1);
S				ret++; if (!--maxlen) return ret;
S			} while (++width != 0);
S		}
S		while (--i >= 0) {
S			gfileWrite(f, s++, 1);
S			ret++; if (!--maxlen) return ret;
S		}
S		while (width) {
S			gfileWrite(f, &filler, 1);
S			ret++; if (!--maxlen) return ret;
S			width--;
S		}
S	}
S	return ret;
S}
S
N#endif //GFX_USE_GFILE && GFILE_NEED_PRINTG
L 18 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_scang.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_scang.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * Scang Routines
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_SCANG
X#if 0 && 0
S
Sint fscang(GFILE *f, const char *fmt, ...) {
S	int		res;
S	va_list	ap;
S
S	va_start(ap, fmt);
S	res = vfscang(f, fmt, ap);
S	va_end(ap);
S	return res;
S}
S
Sint vfscang(GFILE *f, const char *fmt, va_list arg) {
S	int		res, width, size, base;
S	unsigned long num;
S	char	c;
S	bool_t	assign, negate;
S	char	*p;
S
S	for(res = 0; *fmt; fmt++) {
S		switch(*fmt) {
S		case ' ': case '\t': case '\r': case '\n': case '\v': case '\f':
S			break;
S
S		case '%':
S			fmt++;
S			assign = TRUE;
S			negate = FALSE;
S			width = 0;
S			size = 1;
S			num = 0;
S
S			if (*fmt == '*') {
S				fmt++;
S				assign = FALSE;
S			}
S			while(*fmt >= '0' && *fmt <= '9')
S				width = width * 10 + (*fmt++ - '0');
S			if (*fmt == 'h') {
S				fmt++;
S				size = 0;
S			} else if (*fmt == 'l') {
S				fmt++;
S				size = 2;
S			} else if (*fmt == 'L') {
S				fmt++;
S				size = 3;
S			}
S			switch(*fmt) {
S			case 0:
S				return res;
S			case '%':
S				goto matchchar;
S			case 'c':
S				if (!width) {
S					while(1) {
S						if (!gfileRead(f, &c, 1))			return res;
S						switch(c) {
S						case ' ': case '\t': case '\r':
S						case '\n': case '\v': case '\f':	continue;
S						}
S						break;
S					}
S					width = 1;
S				} else {
S					if (!gfileRead(f, &c, 1)) 				return res;
S				}
S				if (assign) {
S					p = va_arg(arg, char *);
S					res++;
S					*p++ = c;
S				}
S				while(--width) {
S					if (!gfileRead(f, &c, 1)) 			return res;
S					if (assign) *p++ = c;
S				}
S				break;
S			case 's':
S				while(1) {
S					if (!gfileRead(f, &c, 1))			return res;
S					switch(c) {
S					case ' ': case '\t': case '\r':
S					case '\n': case '\v': case '\f':	continue;
S					}
S					break;
S				}
S				if (assign) {
S					p = va_arg(arg, char *);
S					res++;
S					*p++ = c;
S				}
S				if (width) {
S					while(--width) {
S						if (!gfileRead(f, &c, 1)) {
S							if (assign) *((char *)p) = 0;
S							return res;
S						}
S						if (assign) *p++ = c;
S					}
S				} else {
S					while(1) {
S						if (!gfileRead(f, &c, 1)) {
S							if (assign) *((char *)p) = 0;
S							return res;
S						}
S						switch(c) {
S						case ' ': case '\t': case '\r':
S						case '\n': case '\v': case '\f':	break;
S						default:
S							if (assign) *p++ = c;
S							continue;
S						}
S						break;
S					}
S					//ungetch(c);
S				}
S				if (assign) *p = 0;
S				break;
S			case 'd':	base = 10;	goto getnum;
S			case 'i':	base = -1;	goto getnum;
S			case 'o':	base = 8;	goto getnum;
S			case 'u':	base = 10;	goto getnum;
S			case 'x':	base = 16;	goto getnum;
S			case 'b':	base = 2;
S			getnum:
S				while(1) {
S					if (!gfileRead(f, &c, 1))			return res;
S					switch(c) {
S					case ' ': case '\t': case '\r':
S					case '\n': case '\v': case '\f':	continue;
S					}
S					break;
S				}
S				if (c == '-' && *fmt != 'u') {
S					negate = TRUE;
S					if ((width && !--width) || !gfileRead(f, &c, 1))			return res;
S				}
S				if (base == -1) {
S					if (c == '0') {
S						if ((width && !--width) || !gfileRead(f, &c, 1))		goto assignnum;
S						switch(c) {
S						case 'x': case 'X':
S							base = 16;
S							if ((width && !--width) || !gfileRead(f, &c, 1))	return res;
S							break;
S						case 'b': case 'B':
S							base = 2;
S							if ((width && !--width) || !gfileRead(f, &c, 1))	return res;
S							break;
S						default:
S							base = 8;
S							break;
S						}
S					} else
S						base = 10;
S				}
S				while(1) {
S					if (c >= '0' && c <= '9' && c - '0' < base)
S						num = num * base + (c - '0');
S					else if (c >= 'A' && c <= 'F' && base == 16)
S						num = num * base + (c - ('A'-10));
S					else if (c >= 'a' && c <= 'f' && base == 16)
S						num = num * base + (c - ('a'-10));
S					else {
S						// ungetch(c)
S						break;
S					}
S					if ((width && !--width) || !gfileRead(f, &c, 1))
S						break;
S				}
S
S			assignnum:
S				if (negate)
S					num = -num;
S
S				if (assign) {
S					switch(size) {
S					case 0:				// short
S						p = (char *)va_arg(arg, short *);
S						res++;
S						*((short *)p) = (short)num;
S					case 1:				// int
S						p = (char *)va_arg(arg, int *);
S						res++;
S						*((int *)p) = (int)num;
S					case 2: case 3:		// long
S						p = (char *)va_arg(arg, long *);
S						res++;
S						*((long *)p) = (long)num;
S					}
S				}
S				break;
S
S			#if GFILE_ALLOW_FLOATS
S				case 'e': case 'f': case 'g':
S					// TODO
S			#endif
S			default:
S				return res;
S			}
S
S			break;
S
S		default:
S		matchchar:
S			while(1) {
S				if (!gfileRead(f, &c, 1))			return res;
S				switch(c) {
S				case ' ': case '\t': case '\r':
S				case '\n': case '\v': case '\f':	continue;
S				}
S				break;
S			}
S			if (c != *fmt) 							return res;
S			break;
S		}
S	}
S	return res;
S}
S
N#endif //GFX_USE_GFILE && GFILE_NEED_SCANG
L 19 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_stdio.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_stdio.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N/********************************************************
N * Stdio Emulation Routines
N ********************************************************/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_STDIO && !defined(GFILE_NEED_STDIO_MUST_BE_OFF)
X#if 0 && 0 && !1L
S
S#include "gfile_fs.h"
S
Ssize_t gstdioRead(void * ptr, size_t size, size_t count, GFILE *f) {
S	return gfileRead(f, ptr, size*count)/size;
S}
S
Ssize_t gstdioWrite(const void * ptr, size_t size, size_t count, GFILE *f) {
S	return gfileWrite(f, ptr, size*count)/size;
S}
S
Sint gstdioSeek(GFILE *f, size_t offset, int origin) {
S	switch(origin) {
S	case SEEK_SET:
S		break;
S	case SEEK_CUR:
S		offset += f->pos;
S		break;
S	case SEEK_END:
S		offset += gfileGetSize(f);
S		break;
S	default:
S		return -1;
S	}
S	return gfileSetPos(f, offset) ? 0 : -1;
S}
S
Sint gstdioGetpos(GFILE *f, long int *pos) {
S	if (!(f->flags & GFILEFLG_OPEN))
S		return -1;
S	*pos = f->pos;
S	return 0;
S}
S
N#endif //GFX_USE_GFILE && GFILE_NEED_STDIO
L 20 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fatfs_wrapper.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fatfs_wrapper.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_FATFS && !GFILE_FATFS_EXTERNAL_LIB
X#if 0 && 0 && !0
S
S#include "gfile_fatfs_wrapper.h"
S
S// Include the source we want
S#include "../../3rdparty/fatfs-0.10b/src/ff.c"
S#include "../../3rdparty/fatfs-0.10b/src/option/unicode.c"
S
S// Extra operating system support
S#if _FS_REENTRANT
S	/*------------------------------------------------------------------------*/
S	/* Static array of Synchronization Objects                                */
S	/*------------------------------------------------------------------------*/
S	static gfxSem ff_sem[_VOLUMES];
S
S	/*------------------------------------------------------------------------*/
S	/* Create a Synchronization Object                                        */
S	/*------------------------------------------------------------------------*/
S	int ff_cre_syncobj(BYTE vol, _SYNC_t *sobj)
S	{
S		*sobj = ff_sem[vol];
S		gfxSemInit(sobj, 1, MAX_SEMAPHORE_COUNT);
S
S		return 1;
S	}
S
S	/*------------------------------------------------------------------------*/
S	/* Delete a Synchronization Object                                        */
S	/*------------------------------------------------------------------------*/
S	int ff_del_syncobj(_SYNC_t sobj)
S	{
S		gfxSemDestroy( (gfxSem*)&sobj );
S
S		return 1;
S	}
S
S	/*------------------------------------------------------------------------*/
S	/* Request Grant to Access the Volume                                     */
S	/*------------------------------------------------------------------------*/
S	int ff_req_grant(_SYNC_t sobj)
S	{
S		if (gfxSemWait( (gfxSem*)&sobj, (delaytime_t)_FS_TIMEOUT) )
S			return TRUE;
S		return FALSE;
S	}
S
S	/*------------------------------------------------------------------------*/
S	/* Release Grant to Access the Volume                                     */
S	/*------------------------------------------------------------------------*/
S	void ff_rel_grant(_SYNC_t sobj)
S	{
S		gfxSemSignal( (gfxSem*)&sobj );
S	}
S#endif /* _FS_REENTRANT */
S
S#if _USE_LFN == 3	/* LFN with a working buffer on the heap */
S	/*------------------------------------------------------------------------*/
S	/* Allocate a memory block                                                */
S	/*------------------------------------------------------------------------*/
S	void *ff_memalloc(UINT size)
S	{
S		return gfxAlloc( (size_t)size );
S	}
S
S	/*------------------------------------------------------------------------*/
S	/* Free a memory block                                                    */
S	/*------------------------------------------------------------------------*/
S	void ff_memfree(void *mblock)
S	{
S		gfxFree(mblock);
S	}
S#endif /* _USE_LFN == 3 */
S
N#endif // GFX_USE_GFILE && GFILE_NEED_FATFS && !GFILE_FATFS_EXTERNAL_LIB
L 21 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_fatfs_diskio_chibios.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_fatfs_diskio_chibios.c" 1
N/*-----------------------------------------------------------------------*/
N/* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2007        */
N/*-----------------------------------------------------------------------*/
N/* This is a stub disk I/O module that acts as front end of the existing */
N/* disk I/O modules and attach it to FatFs module with common interface. */
N/*-----------------------------------------------------------------------*/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_FATFS && GFX_USE_OS_CHIBIOS && !GFILE_FATFS_EXTERNAL_LIB
X#if 0 && 0 && 0 && !0
S
S#include "gfile_fatfs_wrapper.h"
S
S#if HAL_USE_MMC_SPI && HAL_USE_SDC
S#error "cannot specify both MMC_SPI and SDC drivers"
S#endif
S
S#if HAL_USE_MMC_SPI
Sextern MMCDriver MMCD1;
S#elif HAL_USE_SDC
Sextern SDCDriver SDCD1;
S#else
S#error "MMC_SPI or SDC driver must be specified"
S#endif
S
S#if HAL_USE_RTC
S#include "chrtclib.h"
Sextern RTCDriver RTCD1;
S#endif
S
S/*-----------------------------------------------------------------------*/
S/* Correspondence between physical drive number and physical drive.      */
S
S#define MMC     0
S#define SDC     0
S
S/*-----------------------------------------------------------------------*/
S/* Initialize a Drive                                                    */
S
SDSTATUS disk_initialize (
S    BYTE drv                /* Physical drive nmuber (0..) */
S)
S{
S  DSTATUS stat;
S
S  switch (drv) {
S#if HAL_USE_MMC_SPI
S  case MMC:
S    stat = 0;
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&MMCD1) != BLK_READY)
S      stat |= STA_NOINIT;
S    if (mmcIsWriteProtected(&MMCD1))
S      stat |=  STA_PROTECT;
S    return stat;
S#else
S  case SDC:
S    stat = 0;
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&SDCD1) != BLK_READY)
S      stat |= STA_NOINIT;
S    if (sdcIsWriteProtected(&SDCD1))
S      stat |=  STA_PROTECT;
S    return stat;
S#endif
S  }
S  return STA_NODISK;
S}
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Return Disk Status                                                    */
S
SDSTATUS disk_status (
S    BYTE drv        /* Physical drive nmuber (0..) */
S)
S{
S  DSTATUS stat;
S
S  switch (drv) {
S#if HAL_USE_MMC_SPI
S  case MMC:
S    stat = 0;
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&MMCD1) != BLK_READY)
S      stat |= STA_NOINIT;
S    if (mmcIsWriteProtected(&MMCD1))
S      stat |= STA_PROTECT;
S    return stat;
S#else
S  case SDC:
S    stat = 0;
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&SDCD1) != BLK_READY)
S      stat |= STA_NOINIT;
S    if (sdcIsWriteProtected(&SDCD1))
S      stat |= STA_PROTECT;
S    return stat;
S#endif
S  }
S  return STA_NODISK;
S}
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Read Sector(s)                                                        */
S
SDRESULT disk_read (
S    BYTE drv,        /* Physical drive nmuber (0..) */
S    BYTE *buff,        /* Data buffer to store read data */
S    DWORD sector,    /* Sector address (LBA) */
S    UINT count        /* Number of sectors to read (1..255) */
S)
S{
S  switch (drv) {
S#if HAL_USE_MMC_SPI
S  case MMC:
S    if (blkGetDriverState(&MMCD1) != BLK_READY)
S      return RES_NOTRDY;
S    if (mmcStartSequentialRead(&MMCD1, sector))
S      return RES_ERROR;
S    while (count > 0) {
S      if (mmcSequentialRead(&MMCD1, buff))
S        return RES_ERROR;
S      buff += MMCSD_BLOCK_SIZE;
S      count--;
S    }
S    if (mmcStopSequentialRead(&MMCD1))
S        return RES_ERROR;
S    return RES_OK;
S#else
S  case SDC:
S    if (blkGetDriverState(&SDCD1) != BLK_READY)
S      return RES_NOTRDY;
S    if (sdcRead(&SDCD1, sector, buff, count))
S      return RES_ERROR;
S    return RES_OK;
S#endif
S  }
S  return RES_PARERR;
S}
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Write Sector(s)                                                       */
S
S#if _READONLY == 0
SDRESULT disk_write (
S    BYTE drv,            /* Physical drive nmuber (0..) */
S    const BYTE *buff,    /* Data to be written */
S    DWORD sector,        /* Sector address (LBA) */
S    UINT count            /* Number of sectors to write (1..255) */
S)
S{
S  switch (drv) {
S#if HAL_USE_MMC_SPI
S  case MMC:
S    if (blkGetDriverState(&MMCD1) != BLK_READY)
S        return RES_NOTRDY;
S    if (mmcIsWriteProtected(&MMCD1))
S        return RES_WRPRT;
S    if (mmcStartSequentialWrite(&MMCD1, sector))
S        return RES_ERROR;
S    while (count > 0) {
S        if (mmcSequentialWrite(&MMCD1, buff))
S            return RES_ERROR;
S        buff += MMCSD_BLOCK_SIZE;
S        count--;
S    }
S    if (mmcStopSequentialWrite(&MMCD1))
S        return RES_ERROR;
S    return RES_OK;
S#else
S  case SDC:
S    if (blkGetDriverState(&SDCD1) != BLK_READY)
S      return RES_NOTRDY;
S    if (sdcWrite(&SDCD1, sector, buff, count))
S      return RES_ERROR;
S    return RES_OK;
S#endif
S  }
S  return RES_PARERR;
S}
S#endif /* _READONLY */
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Miscellaneous Functions                                               */
S
SDRESULT disk_ioctl (
S    BYTE drv,        /* Physical drive nmuber (0..) */
S    BYTE ctrl,        /* Control code */
S    void *buff        /* Buffer to send/receive control data */
S)
S{
S  switch (drv) {
S#if HAL_USE_MMC_SPI
S  case MMC:
S    switch (ctrl) {
S    case CTRL_SYNC:
S        return RES_OK;
S    case GET_SECTOR_SIZE:
S        *((WORD *)buff) = MMCSD_BLOCK_SIZE;
S        return RES_OK;
S#if _USE_ERASE
S    case CTRL_ERASE_SECTOR:
S        mmcErase(&MMCD1, *((DWORD *)buff), *((DWORD *)buff + 1));
S        return RES_OK;
S#endif
S    default:
S        return RES_PARERR;
S    }
S#else
S  case SDC:
S    switch (ctrl) {
S    case CTRL_SYNC:
S        return RES_OK;
S    case GET_SECTOR_COUNT:
S        *((DWORD *)buff) = mmcsdGetCardCapacity(&SDCD1);
S        return RES_OK;
S    case GET_SECTOR_SIZE:
S        *((WORD *)buff) = MMCSD_BLOCK_SIZE;
S        return RES_OK;
S    case GET_BLOCK_SIZE:
S        *((DWORD *)buff) = 256; /* 512b blocks in one erase block */
S        return RES_OK;
S#if _USE_ERASE
S    case CTRL_ERASE_SECTOR:
S        sdcErase(&SDCD1, *((DWORD *)buff), *((DWORD *)buff + 1));
S        return RES_OK;
S#endif
S    default:
S        return RES_PARERR;
S    }
S#endif
S  }
S  return RES_PARERR;
S}
S
SDWORD get_fattime(void) {
S#if HAL_USE_RTC
S    return rtcGetTimeFat(&RTCD1);
S#else
S    return ((uint32_t)0 | (1 << 16)) | (1 << 21); /* wrong but valid time */
S#endif
S}
S
N#endif // GFX_USE_GFILE && GFILE_NEED_FATFS && GFX_USE_OS_CHIBIOS && !GFILE_FATFS_EXTERNAL_LIB
N
N
L 22 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_petitfs_wrapper.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_petitfs_wrapper.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_PETITFS && !GFILE_PETITFS_EXTERNAL_LIB
X#if 0 && 0 && !0
S
S#include "gfile_petitfs_wrapper.h"
S
S// Include the source we want
S#include "../../3rdparty/petitfs-0.03/src/pff.c"
S
N#endif // GFX_USE_GFILE && GFILE_NEED_PETITFS && !GFILE_PETITFS_EXTERNAL_LIB
L 23 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
N#include "gfile_petitfs_diskio_chibios.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_petitfs_diskio_chibios.c" 1
N/*-----------------------------------------------------------------------*/
N/* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2007        */
N/*-----------------------------------------------------------------------*/
N/* This is a stub disk I/O module that acts as front end of the existing */
N/* disk I/O modules and attach it to FatFs module with common interface. */
N/*-----------------------------------------------------------------------*/
N
N#include "../../gfx.h"
N
N#if GFX_USE_GFILE && GFILE_NEED_PETITFS && GFX_USE_OS_CHIBIOS && !GFILE_PETITFS_EXTERNAL_LIB
X#if 0 && 0 && 0 && !0
S
S#include "gfile_petitfs_wrapper.h"
S
S#include <string.h>
S
S#if HAL_USE_MMC_SPI && HAL_USE_SDC
S#error "cannot specify both MMC_SPI and SDC drivers"
S#endif
S
S#if HAL_USE_MMC_SPI
Sextern MMCDriver MMCD1;
S#elif HAL_USE_SDC
Sextern SDCDriver SDCD1;
S#else
S#error "MMC_SPI or SDC driver must be specified"
S#endif
S
S/*-----------------------------------------------------------------------*/
S/* Initialize a Drive                                                    */
S
SDSTATUS disk_initialize (void) {
S#if HAL_USE_MMC_SPI
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&MMCD1) != BLK_READY)
S    	return STA_NOINIT;
S#else
S    /* It is initialized externally, just reads the status.*/
S    if (blkGetDriverState(&SDCD1) != BLK_READY)
S    	return STA_NOINIT;
S#endif
S    // All good
S	return 0;
S}
S
S/*-----------------------------------------------------------------------*/
S/* Read Part Sector(s)                                                        */
S
Sstatic BYTE		sectBuf[512];
Sstatic DWORD	sectpos = -1;
S
SDRESULT disk_readp (
S		BYTE* buff,    /* [OUT] Pointer to the read buffer */
S		DWORD sector,  /* [IN]  Sector number */
S		UINT offset,   /* [IN]  Byte offset in the sector to start to read */
S		UINT count     /* [IN]  Number of bytes to read */
S		) {
S
S	if (sector != sectpos) {
S		#if HAL_USE_MMC_SPI
S			if (blkGetDriverState(&MMCD1) != BLK_READY)
S				return RES_NOTRDY;
S			if (mmcStartSequentialRead(&MMCD1, sector))
S				return RES_ERROR;
S			if (mmcSequentialRead(&MMCD1, sectBuf))
S				return RES_ERROR;
S			if (mmcStopSequentialRead(&MMCD1))
S				return RES_ERROR;
S		#else
S			if (blkGetDriverState(&SDCD1) != BLK_READY)
S				return RES_NOTRDY;
S			if (sdcRead(&SDCD1, sector, sectBuf, 1))
S				return RES_ERROR;
S		#endif
S			sectpos = sector;
S	}
S	memcpy(buff, sectBuf + offset, count);
S	return RES_OK;
S}
S
N#endif // GFX_USE_GFILE && GFILE_NEED_PETITFS && GFX_USE_OS_CHIBIOS && !GFILE_PETITFS_EXTERNAL_LIB
N
N
L 24 "..\..\..\..\..\..\external\ugfx\src\gfile/gfile_mk.c" 2
L 21 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
N#include "gtrans/gtrans_mk.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gtrans/gtrans_mk.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include "gtrans.c"
L 1 "..\..\..\..\..\..\external\ugfx\src\gtrans/gtrans.c" 1
N/*
N * This file is subject to the terms of the GFX License. If a copy of
N * the license was not distributed with this file, you can obtain one at:
N *
N *              http://ugfx.org/license.html
N */
N
N#include <string.h>
N#include "../../gfx.h"
N
N#if GFX_USE_GTRANS
X#if 0
S
Sstatic const transTable* _languageBase;
Sstatic const transTable* _languageCurrent;
S
Svoid _gtransInit(void)
S{
S	_languageBase = 0;
S	_languageCurrent = 0;
S}
S
Svoid _gtransDeinit(void)
S{
S}
S
Sconst char* gtransString(const char* string)
S{
S	// Find the index of the specified string in the base language table
S	size_t i = 0;
S	while (1) {
S		// Prevent overflow
S		if (i >= _languageBase->numEntries) {
S			return string;
S		}
S
S		// Check if we found the string
S		if (strcmp(string, _languageBase->strings[i]) == 0) {
S			break;
S		}
S
S		// Otherwise keep going
S		i++;
S	}
S
S	// Make sure that the index exists in the current language table
S	if (i >= _languageCurrent->numEntries) {
S		return string;
S	}
S
S	// Return the translated string
S	return _languageCurrent->strings[i];
S}
S
Sconst char* gtransIndex(unsigned index)
S{
S	if (!_languageCurrent) {
S		return 0;
S	}
S
S	if (index >= _languageCurrent->numEntries) {
S		return 0;
S	}
S
S	return _languageCurrent->strings[index];
S}
S
Svoid gtransSetBaseLanguage(const transTable* const translation)
S{
S	_languageBase = translation;
S}
S
Svoid gtransSetLanguage(const transTable* const translation)
S{
S	_languageCurrent = translation;
S}
S
N#endif /* GFX_USE_GTRANS */
L 9 "..\..\..\..\..\..\external\ugfx\src\gtrans/gtrans_mk.c" 2
L 22 "..\..\..\..\..\..\external\ugfx\src\gfx_mk.c" 2
