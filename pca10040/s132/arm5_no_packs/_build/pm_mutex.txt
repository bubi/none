; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\pm_mutex.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\pm_mutex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\pm_mutex.crf ..\..\..\..\..\..\components\ble\peer_manager\pm_mutex.c]
                          THUMB

                          AREA ||i.lock_by_mask||, CODE, READONLY, ALIGN=1

                  lock_by_mask PROC
;;;31      */
;;;32     static bool lock_by_mask(uint8_t * p_mutex, uint8_t mutex_mask)
000000  b5f8              PUSH     {r3-r7,lr}
;;;33     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;34         bool success = false;
000006  2600              MOVS     r6,#0
;;;35     
;;;36         if ( (*p_mutex & mutex_mask) == 0 )
000008  7820              LDRB     r0,[r4,#0]
00000a  4028              ANDS     r0,r0,r5
00000c  b980              CBNZ     r0,|L1.48|
;;;37         {
;;;38             CRITICAL_REGION_ENTER();
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       app_util_critical_region_enter
;;;39             if ( (*p_mutex & mutex_mask) == 0 )
000018  7820              LDRB     r0,[r4,#0]
00001a  4028              ANDS     r0,r0,r5
00001c  b918              CBNZ     r0,|L1.38|
;;;40             {
;;;41                 *p_mutex |= mutex_mask;
00001e  7820              LDRB     r0,[r4,#0]
000020  4328              ORRS     r0,r0,r5
000022  7020              STRB     r0,[r4,#0]
;;;42     
;;;43                 success = true;
000024  2601              MOVS     r6,#1
                  |L1.38|
;;;44             }
;;;45             CRITICAL_REGION_EXIT();
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  f7fffffe          BL       app_util_critical_region_exit
00002e  bf00              NOP      
                  |L1.48|
;;;46         }
;;;47     
;;;48         return ( success );
000030  4630              MOV      r0,r6
;;;49     }
000032  bdf8              POP      {r3-r7,pc}
;;;50     
                          ENDP


                          AREA ||i.pm_mutex_init||, CODE, READONLY, ALIGN=1

                  pm_mutex_init PROC
;;;51     
;;;52     void pm_mutex_init(uint8_t * p_mutex, uint16_t mutex_size)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;54         if (p_mutex != NULL)
000006  b124              CBZ      r4,|L2.18|
;;;55         {
;;;56             memset(&p_mutex[0], 0, MUTEX_STORAGE_SIZE(mutex_size));
000008  1de8              ADDS     r0,r5,#7
00000a  10c1              ASRS     r1,r0,#3
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memclr
                  |L2.18|
;;;57         }
;;;58     }
000012  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP


                          AREA ||i.pm_mutex_lock||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock PROC
;;;60     
;;;61     bool pm_mutex_lock(uint8_t * p_mutex, uint16_t mutex_id)
000000  b570              PUSH     {r4-r6,lr}
;;;62     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;63         if (p_mutex != NULL)
000006  b14c              CBZ      r4,|L3.28|
;;;64         {
;;;65             return ( lock_by_mask(&(p_mutex[mutex_id >> 3]), (1 << (mutex_id & 0x07))) );
000008  f0050307          AND      r3,r5,#7
00000c  2201              MOVS     r2,#1
00000e  409a              LSLS     r2,r2,r3
000010  b2d1              UXTB     r1,r2
000012  eb0400e5          ADD      r0,r4,r5,ASR #3
000016  f7fffffe          BL       lock_by_mask
                  |L3.26|
;;;66         }
;;;67         else
;;;68         {
;;;69             return false;
;;;70         }
;;;71     }
00001a  bd70              POP      {r4-r6,pc}
                  |L3.28|
00001c  2000              MOVS     r0,#0                 ;69
00001e  e7fc              B        |L3.26|
;;;72     
                          ENDP


                          AREA ||i.pm_mutex_lock_first_available||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock_first_available PROC
;;;88     
;;;89     uint16_t pm_mutex_lock_first_available(uint8_t * p_mutex, uint16_t mutex_size)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;91         if (p_mutex != NULL)
000006  b18d              CBZ      r5,|L4.44|
;;;92         {
;;;93             for ( uint16_t i = 0; i < mutex_size; i++ )
000008  2400              MOVS     r4,#0
00000a  e00d              B        |L4.40|
                  |L4.12|
;;;94             {
;;;95                 if ( lock_by_mask(&(p_mutex[i >> 3]), 1 << (i & 0x07)) )
00000c  f0040307          AND      r3,r4,#7
000010  2201              MOVS     r2,#1
000012  409a              LSLS     r2,r2,r3
000014  b2d1              UXTB     r1,r2
000016  eb0500e4          ADD      r0,r5,r4,ASR #3
00001a  f7fffffe          BL       lock_by_mask
00001e  b108              CBZ      r0,|L4.36|
;;;96                 {
;;;97                     return ( i );
000020  4620              MOV      r0,r4
                  |L4.34|
;;;98                 }
;;;99             }
;;;100        }
;;;101    
;;;102        return ( mutex_size );
;;;103    }
000022  bd70              POP      {r4-r6,pc}
                  |L4.36|
000024  1c60              ADDS     r0,r4,#1              ;93
000026  b284              UXTH     r4,r0                 ;93
                  |L4.40|
000028  42b4              CMP      r4,r6                 ;93
00002a  dbef              BLT      |L4.12|
                  |L4.44|
00002c  4630              MOV      r0,r6                 ;102
00002e  e7f8              B        |L4.34|
;;;104    
                          ENDP


                          AREA ||i.pm_mutex_lock_status_get||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock_status_get PROC
;;;105    
;;;106    bool pm_mutex_lock_status_get(uint8_t * p_mutex, uint16_t mutex_id)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4602              MOV      r2,r0
;;;108        if (p_mutex != NULL)
000004  b162              CBZ      r2,|L5.32|
;;;109        {
;;;110            return ( (p_mutex[mutex_id >> 3] & (1 << (mutex_id & 0x07))) );
000006  eb0200e1          ADD      r0,r2,r1,ASR #3
00000a  7800              LDRB     r0,[r0,#0]
00000c  f0010407          AND      r4,r1,#7
000010  2301              MOVS     r3,#1
000012  40a3              LSLS     r3,r3,r4
000014  4018              ANDS     r0,r0,r3
000016  b108              CBZ      r0,|L5.28|
000018  2001              MOVS     r0,#1
                  |L5.26|
;;;111        }
;;;112        else
;;;113        {
;;;114            return true;
;;;115        }
;;;116    }
00001a  bd10              POP      {r4,pc}
                  |L5.28|
00001c  2000              MOVS     r0,#0                 ;110
00001e  e7fc              B        |L5.26|
                  |L5.32|
000020  2001              MOVS     r0,#1                 ;114
000022  e7fa              B        |L5.26|
;;;117    #endif //PEER_MANAGER_ENABLED
                          ENDP


                          AREA ||i.pm_mutex_unlock||, CODE, READONLY, ALIGN=1

                  pm_mutex_unlock PROC
;;;73     
;;;74     void pm_mutex_unlock(uint8_t * p_mutex, uint16_t mutex_id)
000000  b5f8              PUSH     {r3-r7,lr}
;;;75     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;76         uint8_t mutex_base = mutex_id >> 3;
000006  f3c506c7          UBFX     r6,r5,#3,#8
;;;77         uint8_t mutex_mask = (1 << (mutex_id & 0x07));
00000a  f0050107          AND      r1,r5,#7
00000e  2001              MOVS     r0,#1
000010  4088              LSLS     r0,r0,r1
000012  b2c7              UXTB     r7,r0
;;;78     
;;;79         if   ((p_mutex != NULL)
000014  b17c              CBZ      r4,|L6.54|
;;;80            && (p_mutex[mutex_base] & mutex_mask))
000016  5da0              LDRB     r0,[r4,r6]
000018  4038              ANDS     r0,r0,r7
00001a  b160              CBZ      r0,|L6.54|
;;;81         {
;;;82             CRITICAL_REGION_ENTER();
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       app_util_critical_region_enter
;;;83             p_mutex[mutex_base] &= ~mutex_mask;
000026  5da0              LDRB     r0,[r4,r6]
000028  43b8              BICS     r0,r0,r7
00002a  55a0              STRB     r0,[r4,r6]
;;;84             CRITICAL_REGION_EXIT();
00002c  f89d0000          LDRB     r0,[sp,#0]
000030  f7fffffe          BL       app_util_critical_region_exit
000034  bf00              NOP      
                  |L6.54|
;;;85         }
;;;86     }
000036  bdf8              POP      {r3-r7,pc}
;;;87     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\pm_mutex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_pm_mutex_c_3d8067ae____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_pm_mutex_c_3d8067ae____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_pm_mutex_c_3d8067ae____REVSH|
#line 402
|__asm___10_pm_mutex_c_3d8067ae____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_pm_mutex_c_3d8067ae____RRX|
#line 587
|__asm___10_pm_mutex_c_3d8067ae____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
