; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ls013b7dh06.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ls013b7dh06.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ls013b7dh06.crf ..\..\..\..\..\..\components\drivers_ext\LS013B7DH06\LS013B7DH06.c]
                          THUMB

                          AREA ||i.fillWindow||, CODE, READONLY, ALIGN=1

                  fillWindow PROC
;;;248    
;;;249    ret_code_t fillWindow(uint8_t* fb, uint8_t x, uint8_t y,uint8_t x_end,uint8_t y_end, uint8_t color){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9ddab09          LDRD     r10,r11,[sp,#0x24]
;;;250    			
;;;251    	for(int i=y;i<y_end;i++){
000010  463c              MOV      r4,r7
000012  e00b              B        |L1.44|
                  |L1.20|
;;;252    		for(int a=x;a<x_end;a++){
000014  4635              MOV      r5,r6
000016  e006              B        |L1.38|
                  |L1.24|
;;;253    				ls013_drawPixel(fb, a, i, color);
000018  b2e2              UXTB     r2,r4
00001a  b2e9              UXTB     r1,r5
00001c  465b              MOV      r3,r11
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       ls013_drawPixel
000024  1c6d              ADDS     r5,r5,#1              ;252
                  |L1.38|
000026  4545              CMP      r5,r8                 ;252
000028  dbf6              BLT      |L1.24|
00002a  1c64              ADDS     r4,r4,#1              ;251
                  |L1.44|
00002c  4554              CMP      r4,r10                ;251
00002e  dbf1              BLT      |L1.20|
;;;254    		}
;;;255    	}
;;;256    	return NRF_SUCCESS;
000030  2000              MOVS     r0,#0
;;;257    }
000032  e8bd8ff0          POP      {r4-r11,pc}
;;;258    
                          ENDP


                          AREA ||i.ls013PackPix||, CODE, READONLY, ALIGN=1

                  ls013PackPix PROC
;;;262    
;;;263    void ls013PackPix(uint8_t* buf,uint8_t cx,uint8_t x,uint8_t y,uint8_t c){
000000  b510              PUSH     {r4,lr}
000002  9c02              LDR      r4,[sp,#8]
;;;264    	
;;;265    	return;
;;;266    }
000004  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.ls013_clearframe||, CODE, READONLY, ALIGN=2

                  ls013_clearframe PROC
;;;158    
;;;159    ret_code_t ls013_clearframe(void){
000000  b538              PUSH     {r3-r5,lr}
;;;160    		ret_code_t err;
;;;161    	
;;;162    		memset(m_tx_buf, 0, m_length);
000002  4812              LDR      r0,|L3.76|
000004  7801              LDRB     r1,[r0,#0]  ; m_length
000006  4812              LDR      r0,|L3.80|
000008  f7fffffe          BL       __aeabi_memclr4
;;;163    		memset(m_rx_buf, 0, m_length);
00000c  480f              LDR      r0,|L3.76|
00000e  7801              LDRB     r1,[r0,#0]  ; m_length
000010  4810              LDR      r0,|L3.84|
000012  f7fffffe          BL       __aeabi_memclr
;;;164    	
;;;165    		m_tx_buf[0] = LS013_CM;
000016  2020              MOVS     r0,#0x20
000018  490d              LDR      r1,|L3.80|
00001a  7008              STRB     r0,[r1,#0]
;;;166    		m_tx_buf[1] = 0x00; 
00001c  2000              MOVS     r0,#0
00001e  7048              STRB     r0,[r1,#1]
;;;167    		m_disp_state = SEND_END;
000020  2002              MOVS     r0,#2
000022  490d              LDR      r1,|L3.88|
000024  7008              STRB     r0,[r1,#0]
;;;168    	
;;;169    		nrf_drv_gpiote_out_set(SPI0_SS_PIN);
000026  2018              MOVS     r0,#0x18
000028  f7fffffe          BL       nrf_drv_gpiote_out_set
;;;170    		err = nrf_drv_spi_transfer(&spi, m_tx_buf, 2, m_rx_buf, 0);
00002c  2000              MOVS     r0,#0
00002e  4b09              LDR      r3,|L3.84|
000030  2202              MOVS     r2,#2
000032  4907              LDR      r1,|L3.80|
000034  9000              STR      r0,[sp,#0]
000036  4809              LDR      r0,|L3.92|
000038  f7fffffe          BL       nrf_drv_spi_transfer
00003c  4604              MOV      r4,r0
;;;171    	   
;;;172    	  while(m_disp_state != WAITING);
00003e  bf00              NOP      
                  |L3.64|
000040  4805              LDR      r0,|L3.88|
000042  7800              LDRB     r0,[r0,#0]  ; m_disp_state
000044  2800              CMP      r0,#0
000046  d1fb              BNE      |L3.64|
;;;173    		return err;
000048  4620              MOV      r0,r4
;;;174    }
00004a  bd38              POP      {r3-r5,pc}
;;;175    
                          ENDP

                  |L3.76|
                          DCD      m_length
                  |L3.80|
                          DCD      m_tx_buf
                  |L3.84|
                          DCD      m_rx_buf
                  |L3.88|
                          DCD      m_disp_state
                  |L3.92|
                          DCD      ||spi||

                          AREA ||i.ls013_drawPixel||, CODE, READONLY, ALIGN=1

                  ls013_drawPixel PROC
;;;203    
;;;204    ret_code_t ls013_drawPixel(uint8_t* fb, uint8_t x, uint8_t y, uint8_t color){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;205    	
;;;206    	uint16_t colum;
;;;207    	uint16_t bit_pos;
;;;208    	uint16_t temp;
;;;209    	uint8_t shift = 5;
00000c  f04f0c05          MOV      r12,#5
;;;210    	uint8_t mask=0x07;
000010  f04f0807          MOV      r8,#7
;;;211    	uint8_t* draw;
;;;212    	int overrun;
;;;213    	uint32_t signed_overrun;
;;;214    	
;;;215    	temp = x*3;
000014  eb060246          ADD      r2,r6,r6,LSL #1
;;;216    	colum   = temp /8;
000018  4610              MOV      r0,r2
00001a  ea4f7ee2          ASR      lr,r2,#31
00001e  eb027e5e          ADD      lr,r2,lr,LSR #29
000022  f3ce0bcf          UBFX     r11,lr,#3,#16
;;;217    	bit_pos = temp %8;
000026  ea4f7ee2          ASR      lr,r2,#31
00002a  eb027e5e          ADD      lr,r2,lr,LSR #29
00002e  ea4f0eee          ASR      lr,lr,#3
000032  eba20ece          SUB      lr,r2,lr,LSL #3
000036  fa1ff58e          UXTH     r5,lr
;;;218    	draw = (fb + colum) + (LS013_BYTES_LINE * y);
00003a  eb09000b          ADD      r0,r9,r11
00003e  f04f0e30          MOV      lr,#0x30
000042  fb0e0107          MLA      r1,lr,r7,r0
;;;219    	/* place buffer overrun here */
;;;220    	if(x>LS013_XRES || y>LS013_XRES) return NRF_SUCCESS;
000046  2e80              CMP      r6,#0x80
000048  dc01              BGT      |L4.78|
00004a  2f80              CMP      r7,#0x80
00004c  dd02              BLE      |L4.84|
                  |L4.78|
00004e  2000              MOVS     r0,#0
                  |L4.80|
;;;221    	
;;;222    	if(bit_pos <= 5){
;;;223    		*draw = *draw & ~(mask << (shift - bit_pos));
;;;224    		*draw = *draw | (color << (shift-bit_pos)); 
;;;225    	}else{
;;;226    		overrun = shift-bit_pos;
;;;227    		signed_overrun = UINT32_MAX - overrun + 1;
;;;228    		*draw  = *draw & ~(mask >> signed_overrun);
;;;229    		*draw  = *draw | (color >> signed_overrun);
;;;230    		draw++;
;;;231    		*draw  = *draw & ~(mask << (8-signed_overrun)); 
;;;232    		*draw  = *draw | (color << (8-signed_overrun));
;;;233    	}
;;;234    	return NRF_SUCCESS;
;;;235    }
000050  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.84|
000054  2d05              CMP      r5,#5                 ;222
000056  dc10              BGT      |L4.122|
000058  7808              LDRB     r0,[r1,#0]            ;223
00005a  ebac0e05          SUB      lr,r12,r5             ;223
00005e  fa08fe0e          LSL      lr,r8,lr              ;223
000062  ea20000e          BIC      r0,r0,lr              ;223
000066  7008              STRB     r0,[r1,#0]            ;223
000068  7808              LDRB     r0,[r1,#0]            ;224
00006a  ebac0e05          SUB      lr,r12,r5             ;224
00006e  fa04fe0e          LSL      lr,r4,lr              ;224
000072  ea40000e          ORR      r0,r0,lr              ;224
000076  7008              STRB     r0,[r1,#0]            ;224
000078  e020              B        |L4.188|
                  |L4.122|
00007a  ebac0a05          SUB      r10,r12,r5            ;226
00007e  f1ca0300          RSB      r3,r10,#0             ;227
000082  7808              LDRB     r0,[r1,#0]            ;228
000084  fa48fe03          ASR      lr,r8,r3              ;228
000088  ea20000e          BIC      r0,r0,lr              ;228
00008c  7008              STRB     r0,[r1,#0]            ;228
00008e  7808              LDRB     r0,[r1,#0]            ;229
000090  fa44fe03          ASR      lr,r4,r3              ;229
000094  ea40000e          ORR      r0,r0,lr              ;229
000098  7008              STRB     r0,[r1,#0]            ;229
00009a  1c49              ADDS     r1,r1,#1              ;230
00009c  7808              LDRB     r0,[r1,#0]            ;231
00009e  f1c30e08          RSB      lr,r3,#8              ;231
0000a2  fa08fe0e          LSL      lr,r8,lr              ;231
0000a6  ea20000e          BIC      r0,r0,lr              ;231
0000aa  7008              STRB     r0,[r1,#0]            ;231
0000ac  7808              LDRB     r0,[r1,#0]            ;232
0000ae  f1c30e08          RSB      lr,r3,#8              ;232
0000b2  fa04fe0e          LSL      lr,r4,lr              ;232
0000b6  ea40000e          ORR      r0,r0,lr              ;232
0000ba  7008              STRB     r0,[r1,#0]            ;232
                  |L4.188|
0000bc  2000              MOVS     r0,#0                 ;234
0000be  e7c7              B        |L4.80|
;;;236    // only full bytes and multiple of 8pixel position is supported
                          ENDP


                          AREA ||i.ls013_flush||, CODE, READONLY, ALIGN=2

                  ls013_flush PROC
;;;139    
;;;140    ret_code_t  ls013_flush(void){
000000  b538              PUSH     {r3-r5,lr}
;;;141    	
;;;142    		ret_code_t err;		
;;;143    		memset(m_tx_buf, 0, m_length);
000002  4813              LDR      r0,|L5.80|
000004  7801              LDRB     r1,[r0,#0]  ; m_length
000006  4813              LDR      r0,|L5.84|
000008  f7fffffe          BL       __aeabi_memclr4
;;;144    		memset(m_rx_buf, 0, m_length);
00000c  4810              LDR      r0,|L5.80|
00000e  7801              LDRB     r1,[r0,#0]  ; m_length
000010  4811              LDR      r0,|L5.88|
000012  f7fffffe          BL       __aeabi_memclr
;;;145    	
;;;146    		m_fb = fb;
000016  4811              LDR      r0,|L5.92|
000018  4911              LDR      r1,|L5.96|
00001a  6008              STR      r0,[r1,#0]  ; m_fb
;;;147    	
;;;148    		m_tx_buf[0] = LS013_WR;
00001c  2080              MOVS     r0,#0x80
00001e  490d              LDR      r1,|L5.84|
000020  7008              STRB     r0,[r1,#0]
;;;149    		m_line_number = 0x01;
000022  2001              MOVS     r0,#1
000024  490f              LDR      r1,|L5.100|
000026  7008              STRB     r0,[r1,#0]
;;;150    		m_line_number_end = LS013_YRES;
000028  2080              MOVS     r0,#0x80
00002a  490f              LDR      r1,|L5.104|
00002c  7008              STRB     r0,[r1,#0]
;;;151    		m_disp_state = SEND_LINE;
00002e  2001              MOVS     r0,#1
000030  490e              LDR      r1,|L5.108|
000032  7008              STRB     r0,[r1,#0]
;;;152    		
;;;153    		/* set CS*/
;;;154    		nrf_drv_gpiote_out_set(SPI0_SS_PIN);
000034  2018              MOVS     r0,#0x18
000036  f7fffffe          BL       nrf_drv_gpiote_out_set
;;;155    		err = nrf_drv_spi_transfer(&spi, m_tx_buf, 1, m_rx_buf, 0);
00003a  2000              MOVS     r0,#0
00003c  4b06              LDR      r3,|L5.88|
00003e  2201              MOVS     r2,#1
000040  4904              LDR      r1,|L5.84|
000042  9000              STR      r0,[sp,#0]
000044  480a              LDR      r0,|L5.112|
000046  f7fffffe          BL       nrf_drv_spi_transfer
00004a  4604              MOV      r4,r0
;;;156    		return err;
00004c  4620              MOV      r0,r4
;;;157    }
00004e  bd38              POP      {r3-r5,pc}
;;;158    
                          ENDP

                  |L5.80|
                          DCD      m_length
                  |L5.84|
                          DCD      m_tx_buf
                  |L5.88|
                          DCD      m_rx_buf
                  |L5.92|
                          DCD      ||fb||
                  |L5.96|
                          DCD      m_fb
                  |L5.100|
                          DCD      m_line_number
                  |L5.104|
                          DCD      m_line_number_end
                  |L5.108|
                          DCD      m_disp_state
                  |L5.112|
                          DCD      ||spi||

                          AREA ||i.ls013_getStatus||, CODE, READONLY, ALIGN=2

                  ls013_getStatus PROC
;;;258    
;;;259    display_status ls013_getStatus(){
000000  4801              LDR      r0,|L6.8|
;;;260    	return m_disp_state;
000002  7800              LDRB     r0,[r0,#0]  ; m_disp_state
;;;261    }
000004  4770              BX       lr
;;;262    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      m_disp_state

                          AREA ||i.ls013_init||, CODE, READONLY, ALIGN=2

                  ls013_init PROC
;;;104    
;;;105    uint8_t* ls013_init(void)
000000  b508              PUSH     {r3,lr}
;;;106    {
;;;107    	ls013_spi_init();
000002  f7fffffe          BL       ls013_spi_init
;;;108    	ls013_vcom_init();
000006  f7fffffe          BL       ls013_vcom_init
;;;109    	
;;;110    	nrf_drv_gpiote_out_config_t config = GPIOTE_CONFIG_OUT_SIMPLE(true);
00000a  4808              LDR      r0,|L7.44|
00000c  6800              LDR      r0,[r0,#0]  ; <Data4>
00000e  9000              STR      r0,[sp,#0]
;;;111    	nrf_drv_gpiote_out_init(SPI0_SS_PIN, &config);
000010  4669              MOV      r1,sp
000012  2018              MOVS     r0,#0x18
000014  f7fffffe          BL       nrf_drv_gpiote_out_init
;;;112    	nrf_drv_gpiote_out_clear(SPI0_SS_PIN);
000018  2018              MOVS     r0,#0x18
00001a  f7fffffe          BL       nrf_drv_gpiote_out_clear
;;;113    	
;;;114    	memset(fb,0x00,LS013_BYTES_LINE*LS013_YRES);
00001e  f44f51c0          MOV      r1,#0x1800
000022  4803              LDR      r0,|L7.48|
000024  f7fffffe          BL       __aeabi_memclr
;;;115    	
;;;116    	return fb;
000028  4801              LDR      r0,|L7.48|
;;;117    }
00002a  bd08              POP      {r3,pc}
;;;118    
                          ENDP

                  |L7.44|
                          DCD      ||.constdata||+0x20
                  |L7.48|
                          DCD      ||fb||

                          AREA ||i.ls013_showframe||, CODE, READONLY, ALIGN=2

                  ls013_showframe PROC
;;;119    
;;;120    ret_code_t  ls013_showframe(uint8_t* fb){
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;121    		ret_code_t err;
;;;122    		
;;;123    		memset(m_tx_buf, 0, m_length);
000004  4812              LDR      r0,|L8.80|
000006  7801              LDRB     r1,[r0,#0]  ; m_length
000008  4812              LDR      r0,|L8.84|
00000a  f7fffffe          BL       __aeabi_memclr4
;;;124    		memset(m_rx_buf, 0, m_length);
00000e  4810              LDR      r0,|L8.80|
000010  7801              LDRB     r1,[r0,#0]  ; m_length
000012  4811              LDR      r0,|L8.88|
000014  f7fffffe          BL       __aeabi_memclr
;;;125    	
;;;126    		m_fb = fb;
000018  4810              LDR      r0,|L8.92|
00001a  6004              STR      r4,[r0,#0]  ; m_fb
;;;127    	
;;;128    		m_tx_buf[0] = LS013_WR;
00001c  2080              MOVS     r0,#0x80
00001e  490d              LDR      r1,|L8.84|
000020  7008              STRB     r0,[r1,#0]
;;;129    		m_line_number = 0x01;
000022  2001              MOVS     r0,#1
000024  490e              LDR      r1,|L8.96|
000026  7008              STRB     r0,[r1,#0]
;;;130    		m_line_number_end = LS013_YRES;
000028  2080              MOVS     r0,#0x80
00002a  490e              LDR      r1,|L8.100|
00002c  7008              STRB     r0,[r1,#0]
;;;131    		m_disp_state = SEND_LINE;
00002e  2001              MOVS     r0,#1
000030  490d              LDR      r1,|L8.104|
000032  7008              STRB     r0,[r1,#0]
;;;132    		
;;;133    		/* set CS*/
;;;134    		nrf_drv_gpiote_out_set(SPI0_SS_PIN);
000034  2018              MOVS     r0,#0x18
000036  f7fffffe          BL       nrf_drv_gpiote_out_set
;;;135    		err = nrf_drv_spi_transfer(&spi, m_tx_buf, 1, m_rx_buf, 0);
00003a  2000              MOVS     r0,#0
00003c  4b06              LDR      r3,|L8.88|
00003e  2201              MOVS     r2,#1
000040  4904              LDR      r1,|L8.84|
000042  9000              STR      r0,[sp,#0]
000044  4809              LDR      r0,|L8.108|
000046  f7fffffe          BL       nrf_drv_spi_transfer
00004a  4605              MOV      r5,r0
;;;136    		return err;
00004c  4628              MOV      r0,r5
;;;137    }
00004e  bd38              POP      {r3-r5,pc}
;;;138    
                          ENDP

                  |L8.80|
                          DCD      m_length
                  |L8.84|
                          DCD      m_tx_buf
                  |L8.88|
                          DCD      m_rx_buf
                  |L8.92|
                          DCD      m_fb
                  |L8.96|
                          DCD      m_line_number
                  |L8.100|
                          DCD      m_line_number_end
                  |L8.104|
                          DCD      m_disp_state
                  |L8.108|
                          DCD      ||spi||

                          AREA ||i.ls013_spi_event_handler||, CODE, READONLY, ALIGN=2

                  ls013_spi_event_handler PROC
;;;31      */
;;;32     void ls013_spi_event_handler(nrf_drv_spi_evt_t const * p_event)
000000  b538              PUSH     {r3-r5,lr}
;;;33     {
000002  4604              MOV      r4,r0
;;;34     		switch(m_disp_state)
000004  4831              LDR      r0,|L9.204|
000006  7800              LDRB     r0,[r0,#0]  ; m_disp_state
000008  2800              CMP      r0,#0
00000a  d05c              BEQ      |L9.198|
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L9.22|
000010  2802              CMP      r0,#2
000012  d159              BNE      |L9.200|
000014  e050              B        |L9.184|
                  |L9.22|
;;;35     		{	
;;;36     			case SEND_LINE:
;;;37     				m_tx_buf[0]=0;
000016  2000              MOVS     r0,#0
000018  492d              LDR      r1,|L9.208|
00001a  7008              STRB     r0,[r1,#0]
;;;38     				for(uint8_t i=0;i<8;i++) m_tx_buf[0] |= (m_line_number & 0x80>>i) ? 1<<i : 0 ;
00001c  bf00              NOP      
00001e  e011              B        |L9.68|
                  |L9.32|
000020  492b              LDR      r1,|L9.208|
000022  780a              LDRB     r2,[r1,#0]  ; m_tx_buf
000024  2180              MOVS     r1,#0x80
000026  4101              ASRS     r1,r1,r0
000028  4b2a              LDR      r3,|L9.212|
00002a  781b              LDRB     r3,[r3,#0]  ; m_line_number
00002c  4019              ANDS     r1,r1,r3
00002e  b111              CBZ      r1,|L9.54|
000030  2101              MOVS     r1,#1
000032  4081              LSLS     r1,r1,r0
000034  e000              B        |L9.56|
                  |L9.54|
000036  2100              MOVS     r1,#0
                  |L9.56|
000038  430a              ORRS     r2,r2,r1
00003a  b2d1              UXTB     r1,r2
00003c  4a24              LDR      r2,|L9.208|
00003e  7011              STRB     r1,[r2,#0]
000040  1c41              ADDS     r1,r0,#1
000042  b2c8              UXTB     r0,r1
                  |L9.68|
000044  2808              CMP      r0,#8
000046  dbeb              BLT      |L9.32|
;;;39     		
;;;40     				for(int i = 1; i<=LS013_BYTES_LINE; i++)
000048  2001              MOVS     r0,#1
00004a  e00a              B        |L9.98|
                  |L9.76|
;;;41     					{
;;;42     						m_tx_buf[i] = *m_fb++;
00004c  4922              LDR      r1,|L9.216|
00004e  6809              LDR      r1,[r1,#0]  ; m_fb
000050  7809              LDRB     r1,[r1,#0]
000052  4a1f              LDR      r2,|L9.208|
000054  5411              STRB     r1,[r2,r0]
000056  4920              LDR      r1,|L9.216|
000058  6809              LDR      r1,[r1,#0]  ; m_fb
00005a  1c49              ADDS     r1,r1,#1
00005c  4a1e              LDR      r2,|L9.216|
00005e  6011              STR      r1,[r2,#0]  ; m_fb
000060  1c40              ADDS     r0,r0,#1              ;40
                  |L9.98|
000062  2830              CMP      r0,#0x30              ;40
000064  ddf2              BLE      |L9.76|
;;;43     					}
;;;44     				m_tx_buf[LS013_BYTES_LINE+1] = 0x00;
000066  2000              MOVS     r0,#0
000068  4919              LDR      r1,|L9.208|
00006a  f8810031          STRB     r0,[r1,#0x31]
;;;45     				/* last line needs 16 dummy bits */
;;;46     				if(m_line_number == m_line_number_end){
00006e  4819              LDR      r0,|L9.212|
000070  7800              LDRB     r0,[r0,#0]  ; m_line_number
000072  491a              LDR      r1,|L9.220|
000074  7809              LDRB     r1,[r1,#0]  ; m_line_number_end
000076  4288              CMP      r0,r1
000078  d110              BNE      |L9.156|
;;;47     					m_tx_buf[LS013_BYTES_LINE + 2] = 0x00;
00007a  2000              MOVS     r0,#0
00007c  4914              LDR      r1,|L9.208|
00007e  f8810032          STRB     r0,[r1,#0x32]
;;;48     					m_line_number = 0;
000082  4914              LDR      r1,|L9.212|
000084  7008              STRB     r0,[r1,#0]
;;;49     					m_disp_state = SEND_END;
000086  2002              MOVS     r0,#2
000088  4910              LDR      r1,|L9.204|
00008a  7008              STRB     r0,[r1,#0]
;;;50     					nrf_drv_spi_transfer(&spi, m_tx_buf, (LS013_BYTES_LINE + 2), m_rx_buf, 0);	
00008c  2000              MOVS     r0,#0
00008e  4b14              LDR      r3,|L9.224|
000090  2232              MOVS     r2,#0x32
000092  490f              LDR      r1,|L9.208|
000094  9000              STR      r0,[sp,#0]
000096  4813              LDR      r0,|L9.228|
000098  f7fffffe          BL       nrf_drv_spi_transfer
                  |L9.156|
;;;51     				}
;;;52     				/* prep line done, increment line_number for next event */
;;;53     				m_line_number++;
00009c  480d              LDR      r0,|L9.212|
00009e  7800              LDRB     r0,[r0,#0]  ; m_line_number
0000a0  1c40              ADDS     r0,r0,#1
0000a2  490c              LDR      r1,|L9.212|
0000a4  7008              STRB     r0,[r1,#0]
;;;54     				nrf_drv_spi_transfer(&spi, m_tx_buf, (LS013_BYTES_LINE + 2), m_rx_buf, 0);
0000a6  2000              MOVS     r0,#0
0000a8  4b0d              LDR      r3,|L9.224|
0000aa  2232              MOVS     r2,#0x32
0000ac  4908              LDR      r1,|L9.208|
0000ae  9000              STR      r0,[sp,#0]
0000b0  480c              LDR      r0,|L9.228|
0000b2  f7fffffe          BL       nrf_drv_spi_transfer
;;;55     				break;
0000b6  e007              B        |L9.200|
                  |L9.184|
;;;56     			case SEND_END:
;;;57     				/* release chip select */
;;;58     					nrf_drv_gpiote_out_clear(SPI0_SS_PIN);
0000b8  2018              MOVS     r0,#0x18
0000ba  f7fffffe          BL       nrf_drv_gpiote_out_clear
;;;59     					m_disp_state = WAITING;
0000be  2000              MOVS     r0,#0
0000c0  4902              LDR      r1,|L9.204|
0000c2  7008              STRB     r0,[r1,#0]
;;;60     				break;
0000c4  e000              B        |L9.200|
                  |L9.198|
;;;61     			case WAITING:
;;;62     				break;
0000c6  bf00              NOP      
                  |L9.200|
0000c8  bf00              NOP                            ;55
;;;63     		}
;;;64     }
0000ca  bd38              POP      {r3-r5,pc}
;;;65     
                          ENDP

                  |L9.204|
                          DCD      m_disp_state
                  |L9.208|
                          DCD      m_tx_buf
                  |L9.212|
                          DCD      m_line_number
                  |L9.216|
                          DCD      m_fb
                  |L9.220|
                          DCD      m_line_number_end
                  |L9.224|
                          DCD      m_rx_buf
                  |L9.228|
                          DCD      ||spi||

                          AREA ||i.ls013_spi_init||, CODE, READONLY, ALIGN=2

                  ls013_spi_init PROC
;;;68     
;;;69     static void ls013_spi_init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;70     {
;;;71         nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG;
000002  4b12              LDR      r3,|L10.76|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;72     		spi_config.frequency 	= NRF_DRV_SPI_FREQ_2M;
00000a  f04f5000          MOV      r0,#0x20000000
00000e  9002              STR      r0,[sp,#8]
;;;73     	  spi_config.mode 			= NRF_DRV_SPI_MODE_0; 	
000010  2000              MOVS     r0,#0
000012  f88d000c          STRB     r0,[sp,#0xc]
;;;74     		spi_config.bit_order 	= NRF_DRV_SPI_BIT_ORDER_MSB_FIRST;
000016  f88d000d          STRB     r0,[sp,#0xd]
;;;75         spi_config.miso_pin 	= SPI0_MISO_PIN;
00001a  201a              MOVS     r0,#0x1a
00001c  f88d0002          STRB     r0,[sp,#2]
;;;76         spi_config.mosi_pin 	= SPI0_MOSI_PIN;
000020  2017              MOVS     r0,#0x17
000022  f88d0001          STRB     r0,[sp,#1]
;;;77         spi_config.sck_pin  	= SPI0_SCK_PIN;
000026  2019              MOVS     r0,#0x19
000028  f88d0000          STRB     r0,[sp,#0]
;;;78         APP_ERROR_CHECK(nrf_drv_spi_init(&spi, &spi_config, ls013_spi_event_handler));
00002c  bf00              NOP      
00002e  4a08              LDR      r2,|L10.80|
000030  4669              MOV      r1,sp
000032  4808              LDR      r0,|L10.84|
000034  f7fffffe          BL       nrf_drv_spi_init
000038  4604              MOV      r4,r0
00003a  b124              CBZ      r4,|L10.70|
00003c  bf00              NOP      
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       app_error_handler_bare
000044  bf00              NOP      
                  |L10.70|
000046  bf00              NOP      
;;;79     }
000048  bd1f              POP      {r0-r4,pc}
;;;80     
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
                          DCD      ||.constdata||+0xc
                  |L10.80|
                          DCD      ls013_spi_event_handler
                  |L10.84|
                          DCD      ||spi||

                          AREA ||i.ls013_vcom_init||, CODE, READONLY, ALIGN=2

                  ls013_vcom_init PROC
;;;88     
;;;89     ret_code_t ls013_vcom_init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;90     {
;;;91     		uint32_t err_code;
;;;92     		//init VCOM Pin
;;;93     		nrf_drv_gpiote_init();
000002  f7fffffe          BL       nrf_drv_gpiote_init
;;;94     		nrf_drv_gpiote_out_config_t config = GPIOTE_CONFIG_OUT_SIMPLE(true);
000006  4814              LDR      r0,|L11.88|
000008  6800              LDR      r0,[r0,#0]  ; <Data3>
00000a  9000              STR      r0,[sp,#0]
;;;95     		err_code = nrf_drv_gpiote_out_init(LS013_VCOM_PIN, &config);
00000c  4669              MOV      r1,sp
00000e  2016              MOVS     r0,#0x16
000010  f7fffffe          BL       nrf_drv_gpiote_out_init
000014  4604              MOV      r4,r0
;;;96     		APP_ERROR_CHECK(err_code);
000016  bf00              NOP      
000018  4625              MOV      r5,r4
00001a  b125              CBZ      r5,|L11.38|
00001c  bf00              NOP      
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       app_error_handler_bare
000024  bf00              NOP      
                  |L11.38|
000026  bf00              NOP      
;;;97     		
;;;98     		err_code = app_timer_create(&vcom_timer, APP_TIMER_MODE_REPEATED,vcom_timer_evt);
000028  4a0c              LDR      r2,|L11.92|
00002a  2101              MOVS     r1,#1
00002c  480c              LDR      r0,|L11.96|
00002e  f7fffffe          BL       app_timer_create
000032  4604              MOV      r4,r0
;;;99     		APP_ERROR_CHECK(err_code);
000034  bf00              NOP      
000036  4625              MOV      r5,r4
000038  b125              CBZ      r5,|L11.68|
00003a  bf00              NOP      
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       app_error_handler_bare
000042  bf00              NOP      
                  |L11.68|
000044  bf00              NOP      
;;;100    		app_timer_start(vcom_timer, APP_TIMER_TICKS((1000/LS013_VCOM_HZ)/2, 0), NULL); 
000046  2200              MOVS     r2,#0
000048  f44f7183          MOV      r1,#0x106
00004c  4804              LDR      r0,|L11.96|
00004e  6800              LDR      r0,[r0,#0]  ; vcom_timer
000050  f7fffffe          BL       app_timer_start
;;;101    	
;;;102    		return NRF_SUCCESS;
000054  2000              MOVS     r0,#0
;;;103    }
000056  bd38              POP      {r3-r5,pc}
;;;104    
                          ENDP

                  |L11.88|
                          DCD      ||.constdata||+0x1c
                  |L11.92|
                          DCD      vcom_timer_evt
                  |L11.96|
                          DCD      vcom_timer

                          AREA ||i.printImage||, CODE, READONLY, ALIGN=1

                  printImage PROC
;;;236    // only full bytes and multiple of 8pixel position is supported
;;;237    ret_code_t printImage(uint8_t* fb, uint8_t x, uint8_t y, uint8_t *image, uint32_t size){
000000  b5f0              PUSH     {r4-r7,lr}
000002  4604              MOV      r4,r0
000004  9e05              LDR      r6,[sp,#0x14]
;;;238    	
;;;239    	uint32_t i;
;;;240    	fb = fb + x/8 + (y*LS013_BYTES_LINE); 
000006  4608              MOV      r0,r1
000008  17cf              ASRS     r7,r1,#31
00000a  eb017757          ADD      r7,r1,r7,LSR #29
00000e  eb0407e7          ADD      r7,r4,r7,ASR #3
000012  eb020c42          ADD      r12,r2,r2,LSL #1
000016  eb07140c          ADD      r4,r7,r12,LSL #4
;;;241    	for(i=0;i<size;i++){
00001a  2500              MOVS     r5,#0
00001c  e004              B        |L12.40|
                  |L12.30|
;;;242    		*fb = *image;
00001e  7818              LDRB     r0,[r3,#0]
000020  7020              STRB     r0,[r4,#0]
;;;243    		fb++;
000022  1c64              ADDS     r4,r4,#1
;;;244    		image++;
000024  1c5b              ADDS     r3,r3,#1
000026  1c6d              ADDS     r5,r5,#1              ;241
                  |L12.40|
000028  42b5              CMP      r5,r6                 ;241
00002a  d3f8              BCC      |L12.30|
;;;245    	}
;;;246    	return NRF_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;247    }
00002e  bdf0              POP      {r4-r7,pc}
;;;248    
                          ENDP


                          AREA ||i.printText||, CODE, READONLY, ALIGN=2

                  printText PROC
;;;175    
;;;176    ret_code_t  printText(uint8_t* fb, uint8_t x, uint8_t y, char* text, uint8_t length, uint8_t color){
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b082              SUB      sp,sp,#8
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
00000c  f8dd903c          LDR      r9,[sp,#0x3c]
;;;177    	
;;;178    	uint8_t i,a;
;;;179    	uint8_t line_bits;
;;;180    	uint8_t bit;
;;;181    	uint8_t x_off;
;;;182    
;;;183    	char c;
;;;184    	x_off = x;
000010  46bb              MOV      r11,r7
;;;185    	while(length){
000012  e02d              B        |L13.112|
                  |L13.20|
;;;186    		c =*text;
000014  7830              LDRB     r0,[r6,#0]
000016  9000              STR      r0,[sp,#0]
;;;187    		for(i=0;i<8;i++){
000018  2400              MOVS     r4,#0
00001a  e01e              B        |L13.90|
                  |L13.28|
;;;188    			line_bits = font8x8_basic[c][i];
00001c  4918              LDR      r1,|L13.128|
00001e  9800              LDR      r0,[sp,#0]
000020  eb0100c0          ADD      r0,r1,r0,LSL #3
000024  f810a004          LDRB     r10,[r0,r4]
;;;189    			for(a=0;a<8;a++){
000028  2500              MOVS     r5,#0
00002a  e012              B        |L13.82|
                  |L13.44|
;;;190    					bit = (line_bits >> (a)) & 0x01;
00002c  fa4af005          ASR      r0,r10,r5
000030  f0000001          AND      r0,r0,#1
000034  9001              STR      r0,[sp,#4]
;;;191    					if(bit){
000036  9801              LDR      r0,[sp,#4]
000038  b148              CBZ      r0,|L13.78|
;;;192    						ls013_drawPixel(fb,(x_off+a),(y+i),color);	
00003a  eb080004          ADD      r0,r8,r4
00003e  b2c2              UXTB     r2,r0
000040  eb0b0005          ADD      r0,r11,r5
000044  b2c1              UXTB     r1,r0
000046  9b10              LDR      r3,[sp,#0x40]
000048  9802              LDR      r0,[sp,#8]
00004a  f7fffffe          BL       ls013_drawPixel
                  |L13.78|
00004e  1c68              ADDS     r0,r5,#1              ;189
000050  b2c5              UXTB     r5,r0                 ;189
                  |L13.82|
000052  2d08              CMP      r5,#8                 ;189
000054  dbea              BLT      |L13.44|
000056  1c60              ADDS     r0,r4,#1              ;187
000058  b2c4              UXTB     r4,r0                 ;187
                  |L13.90|
00005a  2c08              CMP      r4,#8                 ;187
00005c  dbde              BLT      |L13.28|
;;;193    					}
;;;194    			}
;;;195    		}	
;;;196    		text++;
00005e  1c76              ADDS     r6,r6,#1
;;;197    		length--;
000060  f1a90001          SUB      r0,r9,#1
000064  f00009ff          AND      r9,r0,#0xff
;;;198    		x_off += 8;
000068  f10b0008          ADD      r0,r11,#8
00006c  f0000bff          AND      r11,r0,#0xff
                  |L13.112|
000070  f1b90f00          CMP      r9,#0                 ;185
000074  d1ce              BNE      |L13.20|
;;;199    	}
;;;200    	return NRF_SUCCESS;
000076  2000              MOVS     r0,#0
;;;201    }
000078  b006              ADD      sp,sp,#0x18
00007a  e8bd8ff0          POP      {r4-r11,pc}
;;;202    
                          ENDP

00007e  0000              DCW      0x0000
                  |L13.128|
                          DCD      font8x8_basic

                          AREA ||i.vcom_timer_evt||, CODE, READONLY, ALIGN=1

                  vcom_timer_evt PROC
;;;81     
;;;82     void vcom_timer_evt(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;83     {
000002  4604              MOV      r4,r0
;;;84     		//toggle pin with 50hz 20ms  
;;;85     		nrf_drv_gpiote_out_toggle(LS013_VCOM_PIN);
000004  2016              MOVS     r0,#0x16
000006  f7fffffe          BL       nrf_drv_gpiote_out_toggle
;;;86     }
00000a  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  vcom_timer_data
                          %        32
                  m_tx_buf
                          %        51
                  m_rx_buf
                          %        51
                  ||fb||
                          %        6144

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  vcom_timer
                          DCD      vcom_timer_data
                  ||spi||
                          DCD      0x40003000
000008  03000000          DCB      0x03,0x00,0x00,0x00
00000c  ffffffff          DCB      0xff,0xff,0xff,0xff
000010  06ff0000          DCB      0x06,0xff,0x00,0x00
                          DCD      0x40000000
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00010000          DCB      0x00,0x01,0x00,0x00
000020  000100            DCB      0x00,0x01,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  font8x8_basic
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00000000          DCB      0x00,0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00000000          DCB      0x00,0x00,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  00000000          DCB      0x00,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  183c3c18          DCB      0x18,0x3c,0x3c,0x18
00010c  18001800          DCB      0x18,0x00,0x18,0x00
000110  36360000          DCB      0x36,0x36,0x00,0x00
000114  00000000          DCB      0x00,0x00,0x00,0x00
000118  36367f36          DCB      0x36,0x36,0x7f,0x36
00011c  7f363600          DCB      0x7f,0x36,0x36,0x00
000120  0c3e031e          DCB      0x0c,0x3e,0x03,0x1e
000124  301f0c00          DCB      0x30,0x1f,0x0c,0x00
000128  00633318          DCB      0x00,0x63,0x33,0x18
00012c  0c666300          DCB      0x0c,0x66,0x63,0x00
000130  1c361c6e          DCB      0x1c,0x36,0x1c,0x6e
000134  3b336e00          DCB      0x3b,0x33,0x6e,0x00
000138  06060300          DCB      0x06,0x06,0x03,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  180c0606          DCB      0x18,0x0c,0x06,0x06
000144  060c1800          DCB      0x06,0x0c,0x18,0x00
000148  060c1818          DCB      0x06,0x0c,0x18,0x18
00014c  180c0600          DCB      0x18,0x0c,0x06,0x00
000150  00663cff          DCB      0x00,0x66,0x3c,0xff
000154  3c660000          DCB      0x3c,0x66,0x00,0x00
000158  000c0c3f          DCB      0x00,0x0c,0x0c,0x3f
00015c  0c0c0000          DCB      0x0c,0x0c,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  000c0c06          DCB      0x00,0x0c,0x0c,0x06
000168  0000003f          DCB      0x00,0x00,0x00,0x3f
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  000c0c00          DCB      0x00,0x0c,0x0c,0x00
000178  6030180c          DCB      0x60,0x30,0x18,0x0c
00017c  06030100          DCB      0x06,0x03,0x01,0x00
000180  3e63737b          DCB      0x3e,0x63,0x73,0x7b
000184  6f673e00          DCB      0x6f,0x67,0x3e,0x00
000188  0c0e0c0c          DCB      0x0c,0x0e,0x0c,0x0c
00018c  0c0c3f00          DCB      0x0c,0x0c,0x3f,0x00
000190  1e33301c          DCB      0x1e,0x33,0x30,0x1c
000194  06333f00          DCB      0x06,0x33,0x3f,0x00
000198  1e33301c          DCB      0x1e,0x33,0x30,0x1c
00019c  30331e00          DCB      0x30,0x33,0x1e,0x00
0001a0  383c3633          DCB      0x38,0x3c,0x36,0x33
0001a4  7f307800          DCB      0x7f,0x30,0x78,0x00
0001a8  3f031f30          DCB      0x3f,0x03,0x1f,0x30
0001ac  30331e00          DCB      0x30,0x33,0x1e,0x00
0001b0  1c06031f          DCB      0x1c,0x06,0x03,0x1f
0001b4  33331e00          DCB      0x33,0x33,0x1e,0x00
0001b8  3f333018          DCB      0x3f,0x33,0x30,0x18
0001bc  0c0c0c00          DCB      0x0c,0x0c,0x0c,0x00
0001c0  1e33331e          DCB      0x1e,0x33,0x33,0x1e
0001c4  33331e00          DCB      0x33,0x33,0x1e,0x00
0001c8  1e33333e          DCB      0x1e,0x33,0x33,0x3e
0001cc  30180e00          DCB      0x30,0x18,0x0e,0x00
0001d0  000c0c00          DCB      0x00,0x0c,0x0c,0x00
0001d4  000c0c00          DCB      0x00,0x0c,0x0c,0x00
0001d8  000c0c00          DCB      0x00,0x0c,0x0c,0x00
0001dc  000c0c06          DCB      0x00,0x0c,0x0c,0x06
0001e0  180c0603          DCB      0x18,0x0c,0x06,0x03
0001e4  060c1800          DCB      0x06,0x0c,0x18,0x00
0001e8  00003f00          DCB      0x00,0x00,0x3f,0x00
0001ec  003f0000          DCB      0x00,0x3f,0x00,0x00
0001f0  060c1830          DCB      0x06,0x0c,0x18,0x30
0001f4  180c0600          DCB      0x18,0x0c,0x06,0x00
0001f8  1e333018          DCB      0x1e,0x33,0x30,0x18
0001fc  0c000c00          DCB      0x0c,0x00,0x0c,0x00
000200  3e637b7b          DCB      0x3e,0x63,0x7b,0x7b
000204  7b031e00          DCB      0x7b,0x03,0x1e,0x00
000208  0c1e3333          DCB      0x0c,0x1e,0x33,0x33
00020c  3f333300          DCB      0x3f,0x33,0x33,0x00
000210  3f66663e          DCB      0x3f,0x66,0x66,0x3e
000214  66663f00          DCB      0x66,0x66,0x3f,0x00
000218  3c660303          DCB      0x3c,0x66,0x03,0x03
00021c  03663c00          DCB      0x03,0x66,0x3c,0x00
000220  1f366666          DCB      0x1f,0x36,0x66,0x66
000224  66361f00          DCB      0x66,0x36,0x1f,0x00
000228  7f46161e          DCB      0x7f,0x46,0x16,0x1e
00022c  16467f00          DCB      0x16,0x46,0x7f,0x00
000230  7f46161e          DCB      0x7f,0x46,0x16,0x1e
000234  16060f00          DCB      0x16,0x06,0x0f,0x00
000238  3c660303          DCB      0x3c,0x66,0x03,0x03
00023c  73667c00          DCB      0x73,0x66,0x7c,0x00
000240  3333333f          DCB      0x33,0x33,0x33,0x3f
000244  33333300          DCB      0x33,0x33,0x33,0x00
000248  1e0c0c0c          DCB      0x1e,0x0c,0x0c,0x0c
00024c  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
000250  78303030          DCB      0x78,0x30,0x30,0x30
000254  33331e00          DCB      0x33,0x33,0x1e,0x00
000258  6766361e          DCB      0x67,0x66,0x36,0x1e
00025c  36666700          DCB      0x36,0x66,0x67,0x00
000260  0f060606          DCB      0x0f,0x06,0x06,0x06
000264  46667f00          DCB      0x46,0x66,0x7f,0x00
000268  63777f7f          DCB      0x63,0x77,0x7f,0x7f
00026c  6b636300          DCB      0x6b,0x63,0x63,0x00
000270  63676f7b          DCB      0x63,0x67,0x6f,0x7b
000274  73636300          DCB      0x73,0x63,0x63,0x00
000278  1c366363          DCB      0x1c,0x36,0x63,0x63
00027c  63361c00          DCB      0x63,0x36,0x1c,0x00
000280  3f66663e          DCB      0x3f,0x66,0x66,0x3e
000284  06060f00          DCB      0x06,0x06,0x0f,0x00
000288  1e333333          DCB      0x1e,0x33,0x33,0x33
00028c  3b1e3800          DCB      0x3b,0x1e,0x38,0x00
000290  3f66663e          DCB      0x3f,0x66,0x66,0x3e
000294  36666700          DCB      0x36,0x66,0x67,0x00
000298  1e33070e          DCB      0x1e,0x33,0x07,0x0e
00029c  38331e00          DCB      0x38,0x33,0x1e,0x00
0002a0  3f2d0c0c          DCB      0x3f,0x2d,0x0c,0x0c
0002a4  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
0002a8  33333333          DCB      0x33,0x33,0x33,0x33
0002ac  33333f00          DCB      0x33,0x33,0x3f,0x00
0002b0  33333333          DCB      0x33,0x33,0x33,0x33
0002b4  331e0c00          DCB      0x33,0x1e,0x0c,0x00
0002b8  6363636b          DCB      0x63,0x63,0x63,0x6b
0002bc  7f776300          DCB      0x7f,0x77,0x63,0x00
0002c0  6363361c          DCB      0x63,0x63,0x36,0x1c
0002c4  1c366300          DCB      0x1c,0x36,0x63,0x00
0002c8  3333331e          DCB      0x33,0x33,0x33,0x1e
0002cc  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
0002d0  7f633118          DCB      0x7f,0x63,0x31,0x18
0002d4  4c667f00          DCB      0x4c,0x66,0x7f,0x00
0002d8  1e060606          DCB      0x1e,0x06,0x06,0x06
0002dc  06061e00          DCB      0x06,0x06,0x1e,0x00
0002e0  03060c18          DCB      0x03,0x06,0x0c,0x18
0002e4  30604000          DCB      0x30,0x60,0x40,0x00
0002e8  1e181818          DCB      0x1e,0x18,0x18,0x18
0002ec  18181e00          DCB      0x18,0x18,0x1e,0x00
0002f0  081c3663          DCB      0x08,0x1c,0x36,0x63
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  000000ff          DCB      0x00,0x00,0x00,0xff
000300  0c0c1800          DCB      0x0c,0x0c,0x18,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00001e30          DCB      0x00,0x00,0x1e,0x30
00030c  3e336e00          DCB      0x3e,0x33,0x6e,0x00
000310  0706063e          DCB      0x07,0x06,0x06,0x3e
000314  66663b00          DCB      0x66,0x66,0x3b,0x00
000318  00001e33          DCB      0x00,0x00,0x1e,0x33
00031c  03331e00          DCB      0x03,0x33,0x1e,0x00
000320  3830303e          DCB      0x38,0x30,0x30,0x3e
000324  33336e00          DCB      0x33,0x33,0x6e,0x00
000328  00001e33          DCB      0x00,0x00,0x1e,0x33
00032c  3f031e00          DCB      0x3f,0x03,0x1e,0x00
000330  1c36060f          DCB      0x1c,0x36,0x06,0x0f
000334  06060f00          DCB      0x06,0x06,0x0f,0x00
000338  00006e33          DCB      0x00,0x00,0x6e,0x33
00033c  333e301f          DCB      0x33,0x3e,0x30,0x1f
000340  0706366e          DCB      0x07,0x06,0x36,0x6e
000344  66666700          DCB      0x66,0x66,0x67,0x00
000348  0c000e0c          DCB      0x0c,0x00,0x0e,0x0c
00034c  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
000350  30003030          DCB      0x30,0x00,0x30,0x30
000354  3033331e          DCB      0x30,0x33,0x33,0x1e
000358  07066636          DCB      0x07,0x06,0x66,0x36
00035c  1e366700          DCB      0x1e,0x36,0x67,0x00
000360  0e0c0c0c          DCB      0x0e,0x0c,0x0c,0x0c
000364  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
000368  0000337f          DCB      0x00,0x00,0x33,0x7f
00036c  7f6b6300          DCB      0x7f,0x6b,0x63,0x00
000370  00001f33          DCB      0x00,0x00,0x1f,0x33
000374  33333300          DCB      0x33,0x33,0x33,0x00
000378  00001e33          DCB      0x00,0x00,0x1e,0x33
00037c  33331e00          DCB      0x33,0x33,0x1e,0x00
000380  00003b66          DCB      0x00,0x00,0x3b,0x66
000384  663e060f          DCB      0x66,0x3e,0x06,0x0f
000388  00006e33          DCB      0x00,0x00,0x6e,0x33
00038c  333e3078          DCB      0x33,0x3e,0x30,0x78
000390  00003b6e          DCB      0x00,0x00,0x3b,0x6e
000394  66060f00          DCB      0x66,0x06,0x0f,0x00
000398  00003e03          DCB      0x00,0x00,0x3e,0x03
00039c  1e301f00          DCB      0x1e,0x30,0x1f,0x00
0003a0  080c3e0c          DCB      0x08,0x0c,0x3e,0x0c
0003a4  0c2c1800          DCB      0x0c,0x2c,0x18,0x00
0003a8  00003333          DCB      0x00,0x00,0x33,0x33
0003ac  33336e00          DCB      0x33,0x33,0x6e,0x00
0003b0  00003333          DCB      0x00,0x00,0x33,0x33
0003b4  331e0c00          DCB      0x33,0x1e,0x0c,0x00
0003b8  0000636b          DCB      0x00,0x00,0x63,0x6b
0003bc  7f7f3600          DCB      0x7f,0x7f,0x36,0x00
0003c0  00006336          DCB      0x00,0x00,0x63,0x36
0003c4  1c366300          DCB      0x1c,0x36,0x63,0x00
0003c8  00003333          DCB      0x00,0x00,0x33,0x33
0003cc  333e301f          DCB      0x33,0x3e,0x30,0x1f
0003d0  00003f19          DCB      0x00,0x00,0x3f,0x19
0003d4  0c263f00          DCB      0x0c,0x26,0x3f,0x00
0003d8  380c0c07          DCB      0x38,0x0c,0x0c,0x07
0003dc  0c0c3800          DCB      0x0c,0x0c,0x38,0x00
0003e0  18181800          DCB      0x18,0x18,0x18,0x00
0003e4  18181800          DCB      0x18,0x18,0x18,0x00
0003e8  070c0c38          DCB      0x07,0x0c,0x0c,0x38
0003ec  0c0c0700          DCB      0x0c,0x0c,0x07,0x00
0003f0  6e3b0000          DCB      0x6e,0x3b,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
                  m_disp_state
000400  00                DCB      0x00
                  m_length
000401  00                DCB      0x00
                  m_line_number
000402  00                DCB      0x00
                  m_line_number_end
000403  00                DCB      0x00
                  m_fb
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\drivers_ext\\LS013B7DH06\\LS013B7DH06.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_LS013B7DH06_c_dcf71312____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_LS013B7DH06_c_dcf71312____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_LS013B7DH06_c_dcf71312____REVSH|
#line 402
|__asm___13_LS013B7DH06_c_dcf71312____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_LS013B7DH06_c_dcf71312____RRX|
#line 587
|__asm___13_LS013B7DH06_c_dcf71312____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
