; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_none_display.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_none_display.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_none_display.crf ..\..\..\ble_none_display.c]
                          THUMB

                          AREA ||i.bds_uint16_decode||, CODE, READONLY, ALIGN=1

                  bds_uint16_decode PROC
;;;222     */
;;;223    static __INLINE uint8_t bds_uint16_decode(const uint8_t len,
000000  b510              PUSH     {r4,lr}
;;;224                                              const uint8_t * p_encoded_data,
;;;225                                              uint16_t      * p_decoded_val)
;;;226    {
000002  4603              MOV      r3,r0
;;;227        UNUSED_VARIABLE(len);
;;;228        *p_decoded_val = (((uint16_t)((uint8_t *)p_encoded_data)[0])) |
000004  7808              LDRB     r0,[r1,#0]
000006  784c              LDRB     r4,[r1,#1]
000008  ea402004          ORR      r0,r0,r4,LSL #8
00000c  8010              STRH     r0,[r2,#0]
;;;229                         (((uint16_t)((uint8_t *)p_encoded_data)[1]) << 8 );
;;;230        return (sizeof(uint16_t));
00000e  2002              MOVS     r0,#2
;;;231    }
000010  bd10              POP      {r4,pc}
;;;232    
                          ENDP


                          AREA ||i.bds_uint16_encode||, CODE, READONLY, ALIGN=1

                  bds_uint16_encode PROC
;;;73      */
;;;74     static __INLINE uint8_t bds_uint16_encode(const uint16_t * p_value, uint8_t * p_encoded_data)
000000  4602              MOV      r2,r0
;;;75     {
;;;76         p_encoded_data[0] = (uint8_t) ((*p_value & 0x00FF) >> 0);
000002  7810              LDRB     r0,[r2,#0]
000004  7008              STRB     r0,[r1,#0]
;;;77         p_encoded_data[1] = (uint8_t) ((*p_value & 0xFF00) >> 8);
000006  8810              LDRH     r0,[r2,#0]
000008  0a00              LSRS     r0,r0,#8
00000a  7048              STRB     r0,[r1,#1]
;;;78         return sizeof(uint16_t);
00000c  2002              MOVS     r0,#2
;;;79     }
00000e  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.bds_uint32_decode||, CODE, READONLY, ALIGN=1

                  bds_uint32_decode PROC
;;;280     */
;;;281    static __INLINE uint8_t bds_uint32_decode(const uint8_t len,
000000  b510              PUSH     {r4,lr}
;;;282                                              const uint8_t * p_encoded_data,
;;;283                                              uint32_t      * p_decoded_val)
;;;284    {
000002  4603              MOV      r3,r0
;;;285        UNUSED_VARIABLE(len);
;;;286        *p_decoded_val = (((uint32_t)((uint8_t *)p_encoded_data)[0]) << 0)  |
000004  7808              LDRB     r0,[r1,#0]
000006  784c              LDRB     r4,[r1,#1]
000008  ea402004          ORR      r0,r0,r4,LSL #8
00000c  788c              LDRB     r4,[r1,#2]
00000e  ea404004          ORR      r0,r0,r4,LSL #16
000012  78cc              LDRB     r4,[r1,#3]
000014  ea406004          ORR      r0,r0,r4,LSL #24
000018  6010              STR      r0,[r2,#0]
;;;287                         (((uint32_t)((uint8_t *)p_encoded_data)[1]) << 8)  |
;;;288                         (((uint32_t)((uint8_t *)p_encoded_data)[2]) << 16) |
;;;289                         (((uint32_t)((uint8_t *)p_encoded_data)[3]) << 24 );
;;;290        return (sizeof(uint32_t));
00001a  2004              MOVS     r0,#4
;;;291    }
00001c  bd10              POP      {r4,pc}
;;;292    
                          ENDP


                          AREA ||i.bds_uint32_encode||, CODE, READONLY, ALIGN=1

                  bds_uint32_encode PROC
;;;109     */
;;;110    static __INLINE uint8_t bds_uint32_encode(const uint32_t * p_value, uint8_t * p_encoded_data)
000000  4602              MOV      r2,r0
;;;111    {
;;;112        p_encoded_data[0] = (uint8_t) ((*p_value & 0x000000FF) >> 0);
000002  7810              LDRB     r0,[r2,#0]
000004  7008              STRB     r0,[r1,#0]
;;;113        p_encoded_data[1] = (uint8_t) ((*p_value & 0x0000FF00) >> 8);
000006  8810              LDRH     r0,[r2,#0]
000008  0a00              LSRS     r0,r0,#8
00000a  7048              STRB     r0,[r1,#1]
;;;114        p_encoded_data[2] = (uint8_t) ((*p_value & 0x00FF0000) >> 16);
00000c  6810              LDR      r0,[r2,#0]
00000e  0c00              LSRS     r0,r0,#16
000010  7088              STRB     r0,[r1,#2]
;;;115        p_encoded_data[3] = (uint8_t) ((*p_value & 0xFF000000) >> 24);
000012  6810              LDR      r0,[r2,#0]
000014  0e00              LSRS     r0,r0,#24
000016  70c8              STRB     r0,[r1,#3]
;;;116        return sizeof(uint32_t);
000018  2004              MOVS     r0,#4
;;;117    }
00001a  4770              BX       lr
;;;118    
                          ENDP


                          AREA ||i.ble_none_display_buttons_send||, CODE, READONLY, ALIGN=1

                  ble_none_display_buttons_send PROC
;;;375    /**@brief Function for sending the Buttons. */
;;;376    uint32_t ble_none_display_buttons_send(ble_none_display_t * p_none_display, ble_none_display_buttons_t * p_buttons)
000000  b570              PUSH     {r4-r6,lr}
;;;377    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;378        uint32_t err_code = NRF_SUCCESS;
000008  2600              MOVS     r6,#0
;;;379    
;;;380        if (p_none_display->conn_handle != BLE_CONN_HANDLE_INVALID)
00000a  8be0              LDRH     r0,[r4,#0x1e]
00000c  f64f71ff          MOV      r1,#0xffff
000010  4288              CMP      r0,r1
000012  d01b              BEQ      |L5.76|
;;;381        {
;;;382            ble_gatts_hvx_params_t hvx_params;
;;;383            uint8_t encoded_value[MAX_BUTTONS_LEN];
;;;384            uint16_t hvx_len;
;;;385    
;;;386            // Initialize value struct.
;;;387            memset(&hvx_params, 0, sizeof(hvx_params));
000014  2000              MOVS     r0,#0
000016  9006              STR      r0,[sp,#0x18]
000018  9007              STR      r0,[sp,#0x1c]
00001a  9008              STR      r0,[sp,#0x20]
00001c  9009              STR      r0,[sp,#0x24]
;;;388    
;;;389            hvx_len           = buttons_encode(p_buttons, encoded_value);
00001e  a901              ADD      r1,sp,#4
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       buttons_encode
000026  9000              STR      r0,[sp,#0]
;;;390            hvx_params.handle = p_none_display->buttons_handles.value_handle;
000028  8ae0              LDRH     r0,[r4,#0x16]
00002a  f8ad0018          STRH     r0,[sp,#0x18]
;;;391            hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
00002e  2001              MOVS     r0,#1
000030  f88d001a          STRB     r0,[sp,#0x1a]
;;;392            hvx_params.p_len  = &hvx_len;
000034  f8cdd020          STR      sp,[sp,#0x20]
;;;393            hvx_params.offset = 0;
000038  2000              MOVS     r0,#0
00003a  f8ad001c          STRH     r0,[sp,#0x1c]
;;;394            hvx_params.p_data = encoded_value;
00003e  a801              ADD      r0,sp,#4
000040  9009              STR      r0,[sp,#0x24]
;;;395    
;;;396            err_code = sd_ble_gatts_hvx(p_none_display->conn_handle, &hvx_params);
000042  8be0              LDRH     r0,[r4,#0x1e]
000044  a906              ADD      r1,sp,#0x18
000046  dfa6              SVC      #0xa6
000048  4606              MOV      r6,r0
;;;397        }
00004a  e000              B        |L5.78|
                  |L5.76|
;;;398        else
;;;399        {
;;;400            err_code = NRF_ERROR_INVALID_STATE;
00004c  2608              MOVS     r6,#8
                  |L5.78|
;;;401        }
;;;402    
;;;403        return err_code;
00004e  4630              MOV      r0,r6
;;;404    }
000050  b00a              ADD      sp,sp,#0x28
000052  bd70              POP      {r4-r6,pc}
;;;405    
                          ENDP


                          AREA ||i.ble_none_display_buttons_set||, CODE, READONLY, ALIGN=1

                  ble_none_display_buttons_set PROC
;;;359    /**@brief Function for setting the Buttons. */
;;;360    uint32_t ble_none_display_buttons_set(ble_none_display_t * p_none_display, ble_none_display_buttons_t * p_buttons)
000000  b530              PUSH     {r4,r5,lr}
;;;361    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;362        ble_gatts_value_t gatts_value;
;;;363        uint8_t encoded_value[MAX_BUTTONS_LEN];
;;;364    
;;;365        // Initialize value struct.
;;;366        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;367    
;;;368        gatts_value.len     = buttons_encode(p_buttons, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       buttons_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;369        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;370        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;371    
;;;372        return sd_ble_gatts_value_set(p_none_display->conn_handle, p_none_display->buttons_handles.value_handle, &gatts_value);
000024  8ae1              LDRH     r1,[r4,#0x16]
000026  8be0              LDRH     r0,[r4,#0x1e]
000028  aa05              ADD      r2,sp,#0x14
00002a  dfa4              SVC      #0xa4
;;;373    }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd30              POP      {r4,r5,pc}
;;;374    
                          ENDP


                          AREA ||i.ble_none_display_display_configuration_set||, CODE, READONLY, ALIGN=1

                  ble_none_display_display_configuration_set PROC
;;;327    /**@brief Function for setting the Display Configuration. */
;;;328    uint32_t ble_none_display_display_configuration_set(ble_none_display_t * p_none_display, ble_none_display_display_configuration_t * p_display_configuration)
000000  b530              PUSH     {r4,r5,lr}
;;;329    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;330        ble_gatts_value_t gatts_value;
;;;331        uint8_t encoded_value[MAX_DISPLAY_CONFIGURATION_LEN];
;;;332    
;;;333        // Initialize value struct.
;;;334        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;335    
;;;336        gatts_value.len     = display_configuration_encode(p_display_configuration, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       display_configuration_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;337        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;338        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;339    
;;;340        return sd_ble_gatts_value_set(p_none_display->conn_handle, p_none_display->display_configuration_handles.value_handle, &gatts_value);
000024  88e1              LDRH     r1,[r4,#6]
000026  8be0              LDRH     r0,[r4,#0x1e]
000028  aa05              ADD      r2,sp,#0x14
00002a  dfa4              SVC      #0xa4
;;;341    }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd30              POP      {r4,r5,pc}
;;;342    
                          ENDP


                          AREA ||i.ble_none_display_init||, CODE, READONLY, ALIGN=2

                  ble_none_display_init PROC
;;;221    /**@brief Function for initializing the none Display. */
;;;222    uint32_t ble_none_display_init(ble_none_display_t * p_none_display, const ble_none_display_init_t * p_none_display_init)
000000  b570              PUSH     {r4-r6,lr}
;;;223    {
000002  b0b4              SUB      sp,sp,#0xd0
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;224        uint32_t err_code;
;;;225        ble_uuid_t ble_uuid;
;;;226    
;;;227        // Initialize service structure
;;;228        p_none_display->evt_handler = p_none_display_init->evt_handler;
000008  6830              LDR      r0,[r6,#0]
00000a  6020              STR      r0,[r4,#0]
;;;229        p_none_display->conn_handle = BLE_CONN_HANDLE_INVALID;
00000c  f64f70ff          MOV      r0,#0xffff
000010  83e0              STRH     r0,[r4,#0x1e]
;;;230        
;;;231        // Add a custom base UUID.
;;;232        ble_uuid128_t bds_base_uuid = {{0xF0, 0xA9, 0x5C, 0xC7, 0x2A, 0x8D, 0x30, 0x91, 0xC4, 0x43, 0xF5, 0x0C, 0x00, 0x00, 0xC7, 0x89}};
000012  4967              LDR      r1,|L8.432|
000014  e891000d          LDM      r1,{r0,r2,r3}
000018  68c9              LDR      r1,[r1,#0xc]  ; <Data2>
00001a  ad2f              ADD      r5,sp,#0xbc
00001c  c50d              STM      r5!,{r0,r2,r3}
00001e  9132              STR      r1,[sp,#0xc8]
;;;233        uint8_t       uuid_type;
;;;234        err_code = sd_ble_uuid_vs_add(&bds_base_uuid, &uuid_type);
000020  a92e              ADD      r1,sp,#0xb8
000022  a82f              ADD      r0,sp,#0xbc
000024  df63              SVC      #0x63
000026  4605              MOV      r5,r0
;;;235        if (err_code != NRF_SUCCESS)
000028  b115              CBZ      r5,|L8.48|
;;;236        {
;;;237            return err_code;
00002a  4628              MOV      r0,r5
                  |L8.44|
;;;238        }
;;;239        ble_uuid.type = uuid_type;
;;;240        ble_uuid.uuid = 0x3EFC;
;;;241            
;;;242        // Add service
;;;243        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_none_display->service_handle);
;;;244        if (err_code != NRF_SUCCESS)
;;;245        {
;;;246            return err_code;
;;;247        } 
;;;248    
;;;249        // Add Display Configuration characteristic
;;;250        ble_none_display_display_configuration_t display_configuration_initial_value = p_none_display_init->ble_none_display_display_configuration_initial_value; 
;;;251    
;;;252        uint8_t display_configuration_encoded_value[MAX_DISPLAY_CONFIGURATION_LEN];
;;;253        ble_add_char_params_t add_display_configuration_params;
;;;254        memset(&add_display_configuration_params, 0, sizeof(add_display_configuration_params));
;;;255        
;;;256        add_display_configuration_params.uuid                = 0x91CC;
;;;257        add_display_configuration_params.uuid_type           = ble_uuid.type; 
;;;258        add_display_configuration_params.max_len             = MAX_DISPLAY_CONFIGURATION_LEN;
;;;259        add_display_configuration_params.init_len            = display_configuration_encode(&display_configuration_initial_value, display_configuration_encoded_value);
;;;260        add_display_configuration_params.p_init_value        = display_configuration_encoded_value; 
;;;261        add_display_configuration_params.char_props.read     = 1; 
;;;262        add_display_configuration_params.read_access         = SEC_OPEN; 
;;;263        add_display_configuration_params.char_props.write    = 1; 
;;;264        add_display_configuration_params.write_access        = SEC_OPEN; 
;;;265        // 1 for variable length and 0 for fixed length.
;;;266        add_display_configuration_params.is_var_len          = 1; 
;;;267    
;;;268        err_code = characteristic_add(p_none_display->service_handle, &add_display_configuration_params, &(p_none_display->display_configuration_handles));
;;;269        if (err_code != NRF_SUCCESS)
;;;270        {
;;;271            return err_code;
;;;272        } 
;;;273    
;;;274        // Add Metrics characteristic
;;;275        ble_none_display_metrics_t metrics_initial_value = p_none_display_init->ble_none_display_metrics_initial_value; 
;;;276    
;;;277        uint8_t metrics_encoded_value[MAX_METRICS_LEN];
;;;278        ble_add_char_params_t add_metrics_params;
;;;279        memset(&add_metrics_params, 0, sizeof(add_metrics_params));
;;;280        
;;;281        add_metrics_params.uuid                = 0xE98C;
;;;282        add_metrics_params.uuid_type           = ble_uuid.type; 
;;;283        add_metrics_params.max_len             = MAX_METRICS_LEN;
;;;284        add_metrics_params.init_len            = metrics_encode(&metrics_initial_value, metrics_encoded_value);
;;;285        add_metrics_params.p_init_value        = metrics_encoded_value; 
;;;286        add_metrics_params.char_props.read     = 1; 
;;;287        add_metrics_params.read_access         = SEC_OPEN; 
;;;288        add_metrics_params.char_props.write    = 1; 
;;;289        add_metrics_params.write_access        = SEC_OPEN; 
;;;290        // 1 for variable length and 0 for fixed length.
;;;291        add_metrics_params.is_var_len          = 1; 
;;;292    
;;;293        err_code = characteristic_add(p_none_display->service_handle, &add_metrics_params, &(p_none_display->metrics_handles));
;;;294        if (err_code != NRF_SUCCESS)
;;;295        {
;;;296            return err_code;
;;;297        } 
;;;298    
;;;299        // Add Buttons characteristic
;;;300        ble_none_display_buttons_t buttons_initial_value = p_none_display_init->ble_none_display_buttons_initial_value; 
;;;301    
;;;302        uint8_t buttons_encoded_value[MAX_BUTTONS_LEN];
;;;303        ble_add_char_params_t add_buttons_params;
;;;304        memset(&add_buttons_params, 0, sizeof(add_buttons_params));
;;;305        
;;;306        add_buttons_params.uuid                = 0x911E;
;;;307        add_buttons_params.uuid_type           = ble_uuid.type; 
;;;308        add_buttons_params.max_len             = MAX_BUTTONS_LEN;
;;;309        add_buttons_params.init_len            = buttons_encode(&buttons_initial_value, buttons_encoded_value);
;;;310        add_buttons_params.p_init_value        = buttons_encoded_value; 
;;;311        add_buttons_params.char_props.notify   = 1; 
;;;312        add_buttons_params.char_props.read     = 1; 
;;;313        add_buttons_params.read_access         = SEC_OPEN; 
;;;314        add_buttons_params.cccd_write_access   = SEC_OPEN;
;;;315        // 1 for variable length and 0 for fixed length.
;;;316        add_buttons_params.is_var_len          = 1; 
;;;317    
;;;318        err_code = characteristic_add(p_none_display->service_handle, &add_buttons_params, &(p_none_display->buttons_handles));
;;;319        if (err_code != NRF_SUCCESS)
;;;320        {
;;;321            return err_code;
;;;322        } 
;;;323    
;;;324        return NRF_SUCCESS;
;;;325    }
00002c  b034              ADD      sp,sp,#0xd0
00002e  bd70              POP      {r4-r6,pc}
                  |L8.48|
000030  f89d00b8          LDRB     r0,[sp,#0xb8]         ;239
000034  f88d00ce          STRB     r0,[sp,#0xce]         ;239
000038  f64360fc          MOV      r0,#0x3efc            ;240
00003c  f8ad00cc          STRH     r0,[sp,#0xcc]         ;240
000040  1d22              ADDS     r2,r4,#4              ;243
000042  a933              ADD      r1,sp,#0xcc           ;243
000044  2001              MOVS     r0,#1                 ;243
000046  dfa0              SVC      #0xa0                 ;243
000048  4605              MOV      r5,r0                 ;243
00004a  b10d              CBZ      r5,|L8.80|
00004c  4628              MOV      r0,r5                 ;246
00004e  e7ed              B        |L8.44|
                  |L8.80|
000050  88b0              LDRH     r0,[r6,#4]            ;250
000052  902d              STR      r0,[sp,#0xb4]         ;250
000054  2120              MOVS     r1,#0x20              ;254
000056  a820              ADD      r0,sp,#0x80           ;254
000058  f7fffffe          BL       __aeabi_memclr4
00005c  f24910cc          MOV      r0,#0x91cc            ;256
000060  f8ad0080          STRH     r0,[sp,#0x80]         ;256
000064  f89d00ce          LDRB     r0,[sp,#0xce]         ;257
000068  f88d0082          STRB     r0,[sp,#0x82]         ;257
00006c  2014              MOVS     r0,#0x14              ;258
00006e  f8ad0084          STRH     r0,[sp,#0x84]         ;258
000072  a928              ADD      r1,sp,#0xa0           ;259
000074  a82d              ADD      r0,sp,#0xb4           ;259
000076  f7fffffe          BL       display_configuration_encode
00007a  f8ad0086          STRH     r0,[sp,#0x86]         ;259
00007e  a828              ADD      r0,sp,#0xa0           ;260
000080  9022              STR      r0,[sp,#0x88]         ;260
000082  f89d008d          LDRB     r0,[sp,#0x8d]         ;261
000086  f0200002          BIC      r0,r0,#2              ;261
00008a  1c80              ADDS     r0,r0,#2              ;261
00008c  f88d008d          STRB     r0,[sp,#0x8d]         ;261
000090  2001              MOVS     r0,#1                 ;262
000092  f88d0091          STRB     r0,[sp,#0x91]         ;262
000096  f89d008d          LDRB     r0,[sp,#0x8d]         ;263
00009a  f0200008          BIC      r0,r0,#8              ;263
00009e  3008              ADDS     r0,r0,#8              ;263
0000a0  f88d008d          STRB     r0,[sp,#0x8d]         ;263
0000a4  2001              MOVS     r0,#1                 ;264
0000a6  f88d0092          STRB     r0,[sp,#0x92]         ;264
0000aa  f88d008c          STRB     r0,[sp,#0x8c]         ;266
0000ae  88a0              LDRH     r0,[r4,#4]            ;268
0000b0  1da2              ADDS     r2,r4,#6              ;268
0000b2  a920              ADD      r1,sp,#0x80           ;268
0000b4  f7fffffe          BL       characteristic_add
0000b8  4605              MOV      r5,r0                 ;268
0000ba  b10d              CBZ      r5,|L8.192|
0000bc  4628              MOV      r0,r5                 ;271
0000be  e7b5              B        |L8.44|
                  |L8.192|
0000c0  f1060008          ADD      r0,r6,#8              ;275
0000c4  c80f              LDM      r0,{r0-r3}            ;275
0000c6  e9cd231e          STRD     r2,r3,[sp,#0x78]      ;275
0000ca  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;275
0000ce  2120              MOVS     r1,#0x20              ;279
0000d0  a80f              ADD      r0,sp,#0x3c           ;279
0000d2  f7fffffe          BL       __aeabi_memclr4
0000d6  f64e108c          MOV      r0,#0xe98c            ;281
0000da  f8ad003c          STRH     r0,[sp,#0x3c]         ;281
0000de  f89d00ce          LDRB     r0,[sp,#0xce]         ;282
0000e2  f88d003e          STRB     r0,[sp,#0x3e]         ;282
0000e6  2014              MOVS     r0,#0x14              ;283
0000e8  f8ad0040          STRH     r0,[sp,#0x40]         ;283
0000ec  a917              ADD      r1,sp,#0x5c           ;284
0000ee  a81c              ADD      r0,sp,#0x70           ;284
0000f0  f7fffffe          BL       metrics_encode
0000f4  f8ad0042          STRH     r0,[sp,#0x42]         ;284
0000f8  a817              ADD      r0,sp,#0x5c           ;285
0000fa  9011              STR      r0,[sp,#0x44]         ;285
0000fc  f89d0049          LDRB     r0,[sp,#0x49]         ;286
000100  f0200002          BIC      r0,r0,#2              ;286
000104  1c80              ADDS     r0,r0,#2              ;286
000106  f88d0049          STRB     r0,[sp,#0x49]         ;286
00010a  2001              MOVS     r0,#1                 ;287
00010c  f88d004d          STRB     r0,[sp,#0x4d]         ;287
000110  f89d0049          LDRB     r0,[sp,#0x49]         ;288
000114  f0200008          BIC      r0,r0,#8              ;288
000118  3008              ADDS     r0,r0,#8              ;288
00011a  f88d0049          STRB     r0,[sp,#0x49]         ;288
00011e  2001              MOVS     r0,#1                 ;289
000120  f88d004e          STRB     r0,[sp,#0x4e]         ;289
000124  f88d0048          STRB     r0,[sp,#0x48]         ;291
000128  88a0              LDRH     r0,[r4,#4]            ;293
00012a  f104020e          ADD      r2,r4,#0xe            ;293
00012e  a90f              ADD      r1,sp,#0x3c           ;293
000130  f7fffffe          BL       characteristic_add
000134  4605              MOV      r5,r0                 ;293
000136  b10d              CBZ      r5,|L8.316|
000138  4628              MOV      r0,r5                 ;296
00013a  e777              B        |L8.44|
                  |L8.316|
00013c  69b0              LDR      r0,[r6,#0x18]         ;300
00013e  900e              STR      r0,[sp,#0x38]         ;300
000140  2120              MOVS     r1,#0x20              ;304
000142  a801              ADD      r0,sp,#4              ;304
000144  f7fffffe          BL       __aeabi_memclr4
000148  f249101e          MOV      r0,#0x911e            ;306
00014c  f8ad0004          STRH     r0,[sp,#4]            ;306
000150  f89d00ce          LDRB     r0,[sp,#0xce]         ;307
000154  f88d0006          STRB     r0,[sp,#6]            ;307
000158  2014              MOVS     r0,#0x14              ;308
00015a  f8ad0008          STRH     r0,[sp,#8]            ;308
00015e  a909              ADD      r1,sp,#0x24           ;309
000160  a80e              ADD      r0,sp,#0x38           ;309
000162  f7fffffe          BL       buttons_encode
000166  f8ad000a          STRH     r0,[sp,#0xa]          ;309
00016a  a809              ADD      r0,sp,#0x24           ;310
00016c  9003              STR      r0,[sp,#0xc]          ;310
00016e  f89d0011          LDRB     r0,[sp,#0x11]         ;311
000172  f0200010          BIC      r0,r0,#0x10           ;311
000176  3010              ADDS     r0,r0,#0x10           ;311
000178  f88d0011          STRB     r0,[sp,#0x11]         ;311
00017c  f89d0011          LDRB     r0,[sp,#0x11]         ;312
000180  f0200002          BIC      r0,r0,#2              ;312
000184  1c80              ADDS     r0,r0,#2              ;312
000186  f88d0011          STRB     r0,[sp,#0x11]         ;312
00018a  2001              MOVS     r0,#1                 ;313
00018c  f88d0015          STRB     r0,[sp,#0x15]         ;313
000190  f88d0017          STRB     r0,[sp,#0x17]         ;314
000194  f88d0010          STRB     r0,[sp,#0x10]         ;316
000198  88a0              LDRH     r0,[r4,#4]            ;318
00019a  f1040216          ADD      r2,r4,#0x16           ;318
00019e  a901              ADD      r1,sp,#4              ;318
0001a0  f7fffffe          BL       characteristic_add
0001a4  4605              MOV      r5,r0                 ;318
0001a6  b10d              CBZ      r5,|L8.428|
0001a8  4628              MOV      r0,r5                 ;321
0001aa  e73f              B        |L8.44|
                  |L8.428|
0001ac  2000              MOVS     r0,#0                 ;324
0001ae  e73d              B        |L8.44|
;;;326    
                          ENDP

                  |L8.432|
                          DCD      ||.constdata||

                          AREA ||i.ble_none_display_metrics_set||, CODE, READONLY, ALIGN=1

                  ble_none_display_metrics_set PROC
;;;343    /**@brief Function for setting the Metrics. */
;;;344    uint32_t ble_none_display_metrics_set(ble_none_display_t * p_none_display, ble_none_display_metrics_t * p_metrics)
000000  b530              PUSH     {r4,r5,lr}
;;;345    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;346        ble_gatts_value_t gatts_value;
;;;347        uint8_t encoded_value[MAX_METRICS_LEN];
;;;348    
;;;349        // Initialize value struct.
;;;350        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;351    
;;;352        gatts_value.len     = metrics_encode(p_metrics, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       metrics_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;353        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;354        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;355    
;;;356        return sd_ble_gatts_value_set(p_none_display->conn_handle, p_none_display->metrics_handles.value_handle, &gatts_value);
000024  89e1              LDRH     r1,[r4,#0xe]
000026  8be0              LDRH     r0,[r4,#0x1e]
000028  aa05              ADD      r2,sp,#0x14
00002a  dfa4              SVC      #0xa4
;;;357    }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd30              POP      {r4,r5,pc}
;;;358    
                          ENDP


                          AREA ||i.ble_none_display_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_none_display_on_ble_evt PROC
;;;198     */
;;;199    void ble_none_display_on_ble_evt(ble_none_display_t * p_none_display, ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;201        switch (p_ble_evt->header.evt_id)
000006  8820              LDRH     r0,[r4,#0]
000008  2810              CMP      r0,#0x10
00000a  d006              BEQ      |L10.26|
00000c  2811              CMP      r0,#0x11
00000e  d009              BEQ      |L10.36|
000010  2850              CMP      r0,#0x50
000012  d00c              BEQ      |L10.46|
000014  2851              CMP      r0,#0x51
000016  d114              BNE      |L10.66|
000018  e00e              B        |L10.56|
                  |L10.26|
;;;202        {
;;;203            case BLE_GAP_EVT_CONNECTED:
;;;204                on_connect(p_none_display, p_ble_evt);
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       on_connect
;;;205                break;
000022  e00f              B        |L10.68|
                  |L10.36|
;;;206            case BLE_GAP_EVT_DISCONNECTED:
;;;207                on_disconnect(p_none_display, p_ble_evt);
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       on_disconnect
;;;208                break;
00002c  e00a              B        |L10.68|
                  |L10.46|
;;;209            case BLE_GATTS_EVT_WRITE:
;;;210                on_write(p_none_display, &p_ble_evt->evt.gatts_evt.params.write);
00002e  1da1              ADDS     r1,r4,#6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       on_write
;;;211                break;
000036  e005              B        |L10.68|
                  |L10.56|
;;;212             case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;213                on_rw_authorize_request(p_none_display, &p_ble_evt->evt.gatts_evt);
000038  1d21              ADDS     r1,r4,#4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       on_rw_authorize_request
;;;214                break;
000040  e000              B        |L10.68|
                  |L10.66|
;;;215            default:
;;;216                //No implementation needed.
;;;217                break;
000042  bf00              NOP      
                  |L10.68|
000044  bf00              NOP                            ;205
;;;218        }
;;;219    }
000046  bd70              POP      {r4-r6,pc}
;;;220    
                          ENDP


                          AREA ||i.buttons_encode||, CODE, READONLY, ALIGN=1

                  buttons_encode PROC
;;;90      */
;;;91     static uint8_t buttons_encode(ble_none_display_buttons_t * p_buttons, uint8_t * encoded_buffer)
000000  b530              PUSH     {r4,r5,lr}
;;;92     {
000002  4602              MOV      r2,r0
;;;93         uint8_t len = 0; 
000004  2000              MOVS     r0,#0
;;;94         encoded_buffer[len++] = p_buttons->button;
000006  7815              LDRB     r5,[r2,#0]
000008  4604              MOV      r4,r0
00000a  1c40              ADDS     r0,r0,#1
00000c  550d              STRB     r5,[r1,r4]
;;;95         return len;
;;;96     }
00000e  bd30              POP      {r4,r5,pc}
;;;97     
                          ENDP


                          AREA ||i.display_configuration_decode||, CODE, READONLY, ALIGN=1

                  display_configuration_decode PROC
;;;39      */
;;;40     static uint8_t display_configuration_decode(uint8_t data_len, uint8_t * p_data, ble_none_display_display_configuration_t * p_write_val)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;41     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;42         uint8_t pos = 0;
00000a  2400              MOVS     r4,#0
;;;43         pos += bds_uint16_decode((data_len-pos), &p_data[pos], &p_write_val->configuration); 
00000c  1931              ADDS     r1,r6,r4
00000e  1b2a              SUBS     r2,r5,r4
000010  b2d0              UXTB     r0,r2
000012  463a              MOV      r2,r7
000014  f7fffffe          BL       bds_uint16_decode
000018  4420              ADD      r0,r0,r4
00001a  b2c4              UXTB     r4,r0
;;;44     
;;;45         return pos;
00001c  4620              MOV      r0,r4
;;;46     } 
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;47     /**@brief Function for encoding Metrics.
                          ENDP


                          AREA ||i.display_configuration_encode||, CODE, READONLY, ALIGN=1

                  display_configuration_encode PROC
;;;24      */
;;;25     static uint8_t display_configuration_encode(ble_none_display_display_configuration_t * p_display_configuration, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;26     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;27         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;28         len += bds_uint16_encode(&p_display_configuration->configuration, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       bds_uint16_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;29         return len;
000014  4620              MOV      r0,r4
;;;30     }
000016  bd70              POP      {r4-r6,pc}
;;;31     
                          ENDP


                          AREA ||i.metrics_decode||, CODE, READONLY, ALIGN=1

                  metrics_decode PROC
;;;72      */
;;;73     static uint8_t metrics_decode(uint8_t data_len, uint8_t * p_data, ble_none_display_metrics_t * p_write_val)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74     {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;75         uint8_t pos = 0;
00000a  2400              MOVS     r4,#0
;;;76         p_write_val->heart_beat_bpm = p_data[pos++]; 
00000c  4621              MOV      r1,r4
00000e  1c64              ADDS     r4,r4,#1
000010  5c68              LDRB     r0,[r5,r1]
000012  7030              STRB     r0,[r6,#0]
;;;77         pos += bds_uint16_decode((data_len-pos), &p_data[pos], &p_write_val->speed_kmh); 
000014  1929              ADDS     r1,r5,r4
000016  1b3a              SUBS     r2,r7,r4
000018  b2d0              UXTB     r0,r2
00001a  1cb2              ADDS     r2,r6,#2
00001c  f7fffffe          BL       bds_uint16_decode
000020  4420              ADD      r0,r0,r4
000022  b2c4              UXTB     r4,r0
;;;78         pos += bds_uint16_decode((data_len-pos), &p_data[pos], &p_write_val->cadence_rpm); 
000024  1929              ADDS     r1,r5,r4
000026  1b3a              SUBS     r2,r7,r4
000028  b2d0              UXTB     r0,r2
00002a  1d32              ADDS     r2,r6,#4
00002c  f7fffffe          BL       bds_uint16_decode
000030  4420              ADD      r0,r0,r4
000032  b2c4              UXTB     r4,r0
;;;79         pos += bds_uint32_decode((data_len-pos), &p_data[pos], &p_write_val->total_height); 
000034  1929              ADDS     r1,r5,r4
000036  1b3a              SUBS     r2,r7,r4
000038  b2d0              UXTB     r0,r2
00003a  f1060208          ADD      r2,r6,#8
00003e  f7fffffe          BL       bds_uint32_decode
000042  4420              ADD      r0,r0,r4
000044  b2c4              UXTB     r4,r0
;;;80         pos += bds_uint32_decode((data_len-pos), &p_data[pos], &p_write_val->distance); 
000046  1929              ADDS     r1,r5,r4
000048  1b3a              SUBS     r2,r7,r4
00004a  b2d0              UXTB     r0,r2
00004c  f106020c          ADD      r2,r6,#0xc
000050  f7fffffe          BL       bds_uint32_decode
000054  4420              ADD      r0,r0,r4
000056  b2c4              UXTB     r4,r0
;;;81     
;;;82         return pos;
000058  4620              MOV      r0,r4
;;;83     } 
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;84     /**@brief Function for encoding Buttons.
                          ENDP


                          AREA ||i.metrics_encode||, CODE, READONLY, ALIGN=1

                  metrics_encode PROC
;;;53      */
;;;54     static uint8_t metrics_encode(ble_none_display_metrics_t * p_metrics, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;56         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;57         encoded_buffer[len++] = p_metrics->heart_beat_bpm;
000008  782a              LDRB     r2,[r5,#0]
00000a  4621              MOV      r1,r4
00000c  1c64              ADDS     r4,r4,#1
00000e  5472              STRB     r2,[r6,r1]
;;;58         len += bds_uint16_encode(&p_metrics->speed_kmh, &encoded_buffer[len]); 
000010  1931              ADDS     r1,r6,r4
000012  1ca8              ADDS     r0,r5,#2
000014  f7fffffe          BL       bds_uint16_encode
000018  4420              ADD      r0,r0,r4
00001a  b2c4              UXTB     r4,r0
;;;59         len += bds_uint16_encode(&p_metrics->cadence_rpm, &encoded_buffer[len]); 
00001c  1931              ADDS     r1,r6,r4
00001e  1d28              ADDS     r0,r5,#4
000020  f7fffffe          BL       bds_uint16_encode
000024  4420              ADD      r0,r0,r4
000026  b2c4              UXTB     r4,r0
;;;60         len += bds_uint32_encode(&p_metrics->total_height, &encoded_buffer[len]); 
000028  1931              ADDS     r1,r6,r4
00002a  f1050008          ADD      r0,r5,#8
00002e  f7fffffe          BL       bds_uint32_encode
000032  4420              ADD      r0,r0,r4
000034  b2c4              UXTB     r4,r0
;;;61         len += bds_uint32_encode(&p_metrics->distance, &encoded_buffer[len]); 
000036  1931              ADDS     r1,r6,r4
000038  f105000c          ADD      r0,r5,#0xc
00003c  f7fffffe          BL       bds_uint32_encode
000040  4420              ADD      r0,r0,r4
000042  b2c4              UXTB     r4,r0
;;;62         return len;
000044  4620              MOV      r0,r4
;;;63     }
000046  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP


                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=1

                  on_connect PROC
;;;103     */
;;;104    static void on_connect(ble_none_display_t * p_none_display, ble_evt_t * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;105    {
;;;106        p_none_display->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  83c2              STRH     r2,[r0,#0x1e]
;;;107    }
000004  4770              BX       lr
;;;108    
                          ENDP


                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=1

                  on_disconnect PROC
;;;113     */
;;;114    static void on_disconnect(ble_none_display_t * p_none_display, ble_evt_t * p_ble_evt)
000000  f64f72ff          MOV      r2,#0xffff
;;;115    {
;;;116        UNUSED_PARAMETER(p_ble_evt);
;;;117        p_none_display->conn_handle = BLE_CONN_HANDLE_INVALID;
000004  83c2              STRH     r2,[r0,#0x1e]
;;;118    }
000006  4770              BX       lr
;;;119    
                          ENDP


                          AREA ||i.on_rw_authorize_request||, CODE, READONLY, ALIGN=1

                  on_rw_authorize_request PROC
;;;167     */
;;;168    static void on_rw_authorize_request(ble_none_display_t * p_none_display, ble_gatts_evt_t * p_gatts_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;169    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;170        ble_gatts_evt_rw_authorize_request_t * p_auth_req = &p_gatts_evt->params.authorize_request;
000006  1ca5              ADDS     r5,r4,#2
;;;171        if (p_auth_req->type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
000008  7828              LDRB     r0,[r5,#0]
00000a  2802              CMP      r0,#2
00000c  d118              BNE      |L18.64|
;;;172        {
;;;173            if (   (p_gatts_evt->params.authorize_request.request.write.op
00000e  7aa0              LDRB     r0,[r4,#0xa]
000010  2804              CMP      r0,#4
000012  d015              BEQ      |L18.64|
;;;174                    != BLE_GATTS_OP_PREP_WRITE_REQ)
;;;175                && (p_gatts_evt->params.authorize_request.request.write.op
000014  7aa0              LDRB     r0,[r4,#0xa]
000016  2806              CMP      r0,#6
000018  d012              BEQ      |L18.64|
;;;176                    != BLE_GATTS_OP_EXEC_WRITE_REQ_NOW)
;;;177                && (p_gatts_evt->params.authorize_request.request.write.op
00001a  7aa0              LDRB     r0,[r4,#0xa]
00001c  2805              CMP      r0,#5
00001e  d00f              BEQ      |L18.64|
;;;178                    != BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL)
;;;179               )
;;;180            {
;;;181            
;;;182                if (p_auth_req->request.write.handle == p_none_display->display_configuration_handles.value_handle)
000020  8868              LDRH     r0,[r5,#2]
000022  88f1              LDRH     r1,[r6,#6]
000024  4288              CMP      r0,r1
000026  d103              BNE      |L18.48|
;;;183                {
;;;184                    on_write(p_none_display, &p_auth_req->request.write);
000028  1ca9              ADDS     r1,r5,#2
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       on_write
                  |L18.48|
;;;185                }
;;;186                if (p_auth_req->request.write.handle == p_none_display->metrics_handles.value_handle)
000030  8868              LDRH     r0,[r5,#2]
000032  89f1              LDRH     r1,[r6,#0xe]
000034  4288              CMP      r0,r1
000036  d103              BNE      |L18.64|
;;;187                {
;;;188                    on_write(p_none_display, &p_auth_req->request.write);
000038  1ca9              ADDS     r1,r5,#2
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       on_write
                  |L18.64|
;;;189                }
;;;190            }
;;;191        }
;;;192    }
000040  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP


                          AREA ||i.on_write||, CODE, READONLY, ALIGN=1

                  on_write PROC
;;;124     */
;;;125    static void on_write(ble_none_display_t * p_none_display, ble_gatts_evt_write_t * p_ble_evt)
000000  b530              PUSH     {r4,r5,lr}
;;;126    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;127        
;;;128        if(p_ble_evt->handle == p_none_display->display_configuration_handles.value_handle)
000008  8828              LDRH     r0,[r5,#0]
00000a  88e1              LDRH     r1,[r4,#6]
00000c  4288              CMP      r0,r1
00000e  d10f              BNE      |L19.48|
;;;129        {
;;;130            if(p_none_display->evt_handler != NULL)
000010  6820              LDR      r0,[r4,#0]
000012  b168              CBZ      r0,|L19.48|
;;;131            {
;;;132                ble_none_display_evt_t evt;
;;;133                evt.evt_type = BLE_NONE_DISPLAY_DISPLAY_CONFIGURATION_EVT_WRITE;
000014  2002              MOVS     r0,#2
000016  f88d0000          STRB     r0,[sp,#0]
;;;134                display_configuration_decode(p_ble_evt->len, p_ble_evt->data, &evt.params.display_configuration);
00001a  7aa8              LDRB     r0,[r5,#0xa]
00001c  aa01              ADD      r2,sp,#4
00001e  f105010c          ADD      r1,r5,#0xc
000022  f7fffffe          BL       display_configuration_decode
;;;135                p_none_display->evt_handler(p_none_display, &evt);
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  6822              LDR      r2,[r4,#0]
00002c  4790              BLX      r2
;;;136            }
00002e  bf00              NOP      
                  |L19.48|
;;;137        }
;;;138        if(p_ble_evt->handle == p_none_display->metrics_handles.value_handle)
000030  8828              LDRH     r0,[r5,#0]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  d10f              BNE      |L19.88|
;;;139        {
;;;140            if(p_none_display->evt_handler != NULL)
000038  6820              LDR      r0,[r4,#0]
00003a  b168              CBZ      r0,|L19.88|
;;;141            {
;;;142                ble_none_display_evt_t evt;
;;;143                evt.evt_type = BLE_NONE_DISPLAY_METRICS_EVT_WRITE;
00003c  2005              MOVS     r0,#5
00003e  f88d0000          STRB     r0,[sp,#0]
;;;144                metrics_decode(p_ble_evt->len, p_ble_evt->data, &evt.params.metrics);
000042  7aa8              LDRB     r0,[r5,#0xa]
000044  aa01              ADD      r2,sp,#4
000046  f105010c          ADD      r1,r5,#0xc
00004a  f7fffffe          BL       metrics_decode
;;;145                p_none_display->evt_handler(p_none_display, &evt);
00004e  4669              MOV      r1,sp
000050  4620              MOV      r0,r4
000052  6822              LDR      r2,[r4,#0]
000054  4790              BLX      r2
;;;146            }
000056  bf00              NOP      
                  |L19.88|
;;;147        }
;;;148        if(p_ble_evt->handle == p_none_display->buttons_handles.cccd_handle)
000058  8829              LDRH     r1,[r5,#0]
00005a  8b60              LDRH     r0,[r4,#0x1a]
00005c  4281              CMP      r1,r0
00005e  d10f              BNE      |L19.128|
;;;149        {
;;;150            if(p_none_display->evt_handler != NULL)
000060  6820              LDR      r0,[r4,#0]
000062  b168              CBZ      r0,|L19.128|
;;;151            {
;;;152                ble_none_display_evt_t evt;
;;;153                evt.evt_type = BLE_NONE_DISPLAY_BUTTONS_EVT_CCCD_WRITE;
000064  2008              MOVS     r0,#8
000066  f88d0000          STRB     r0,[sp,#0]
;;;154                bds_uint16_decode(p_ble_evt->len, p_ble_evt->data, &evt.params.cccd_value);
00006a  7aa8              LDRB     r0,[r5,#0xa]
00006c  aa01              ADD      r2,sp,#4
00006e  f105010c          ADD      r1,r5,#0xc
000072  f7fffffe          BL       bds_uint16_decode
;;;155                p_none_display->evt_handler(p_none_display, &evt);
000076  4669              MOV      r1,sp
000078  4620              MOV      r0,r4
00007a  6822              LDR      r2,[r4,#0]
00007c  4790              BLX      r2
;;;156            }
00007e  bf00              NOP      
                  |L19.128|
;;;157        } 
;;;158    }
000080  b005              ADD      sp,sp,#0x14
000082  bd30              POP      {r4,r5,pc}
;;;159    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  f0a95cc7          DCB      0xf0,0xa9,0x5c,0xc7
000004  2a8d3091          DCB      0x2a,0x8d,0x30,0x91
000008  c443f50c          DCB      0xc4,0x43,0xf5,0x0c
00000c  0000c789          DCB      0x00,0x00,0xc7,0x89

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ble_none_display.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_none_display_c_0f7491a9____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_ble_none_display_c_0f7491a9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_none_display_c_0f7491a9____REVSH|
#line 402
|__asm___18_ble_none_display_c_0f7491a9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_none_display_c_0f7491a9____RRX|
#line 587
|__asm___18_ble_none_display_c_0f7491a9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
