; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\nrf_ble_qwr.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_ble_qwr.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\nrf_ble_qwr.crf ..\..\..\..\..\..\components\ble\nrf_ble_qwr\nrf_ble_qwr.c]
                          THUMB

                          AREA ||i.nrf_ble_qwr_attr_register||, CODE, READONLY, ALIGN=1

                  nrf_ble_qwr_attr_register PROC
;;;48     
;;;49     ret_code_t nrf_ble_qwr_attr_register(nrf_ble_qwr_t * p_qwr, uint16_t attr_handle)
000000  4602              MOV      r2,r0
;;;50     {
;;;51         VERIFY_PARAM_NOT_NULL(p_qwr);
000002  bf00              NOP      
000004  b90a              CBNZ     r2,|L1.10|
000006  200e              MOVS     r0,#0xe
                  |L1.8|
;;;52         VERIFY_MODULE_INITIALIZED();
;;;53     
;;;54         if (p_qwr->nb_registered_attr == NRF_BLE_QWR_ATTR_LIST_SIZE)
;;;55         {
;;;56             return (NRF_ERROR_NO_MEM);
;;;57         }
;;;58     
;;;59         if (attr_handle == BLE_GATT_HANDLE_INVALID)
;;;60         {
;;;61             return NRF_ERROR_INVALID_PARAM;
;;;62         }
;;;63     
;;;64         p_qwr->attr_handles[p_qwr->nb_registered_attr] = attr_handle;
;;;65         p_qwr->nb_registered_attr++;
;;;66     
;;;67         return NRF_SUCCESS;
;;;68     }
000008  4770              BX       lr
                  |L1.10|
00000a  bf00              NOP                            ;51
00000c  bf00              NOP                            ;52
00000e  7810              LDRB     r0,[r2,#0]            ;52
000010  28de              CMP      r0,#0xde              ;52
000012  d001              BEQ      |L1.24|
000014  2008              MOVS     r0,#8                 ;52
000016  e7f7              B        |L1.8|
                  |L1.24|
000018  bf00              NOP                            ;52
00001a  7d90              LDRB     r0,[r2,#0x16]         ;54
00001c  280a              CMP      r0,#0xa               ;54
00001e  d101              BNE      |L1.36|
000020  2004              MOVS     r0,#4                 ;56
000022  e7f1              B        |L1.8|
                  |L1.36|
000024  b909              CBNZ     r1,|L1.42|
000026  2007              MOVS     r0,#7                 ;61
000028  e7ee              B        |L1.8|
                  |L1.42|
00002a  7d93              LDRB     r3,[r2,#0x16]         ;64
00002c  1c90              ADDS     r0,r2,#2              ;64
00002e  f8201013          STRH     r1,[r0,r3,LSL #1]     ;64
000032  7d90              LDRB     r0,[r2,#0x16]         ;65
000034  1c40              ADDS     r0,r0,#1              ;65
000036  7590              STRB     r0,[r2,#0x16]         ;65
000038  2000              MOVS     r0,#0                 ;67
00003a  e7e5              B        |L1.8|
;;;69     
                          ENDP


                          AREA ||i.nrf_ble_qwr_conn_handle_assign||, CODE, READONLY, ALIGN=1

                  nrf_ble_qwr_conn_handle_assign PROC
;;;123    
;;;124    ret_code_t nrf_ble_qwr_conn_handle_assign(nrf_ble_qwr_t * p_qwr,
000000  4602              MOV      r2,r0
;;;125                                              uint16_t        conn_handle)
;;;126    {
;;;127        VERIFY_PARAM_NOT_NULL(p_qwr);
000002  bf00              NOP      
000004  b90a              CBNZ     r2,|L2.10|
000006  200e              MOVS     r0,#0xe
                  |L2.8|
;;;128        VERIFY_MODULE_INITIALIZED();
;;;129        p_qwr->conn_handle = conn_handle;
;;;130        return NRF_SUCCESS;
;;;131    }
000008  4770              BX       lr
                  |L2.10|
00000a  bf00              NOP                            ;127
00000c  bf00              NOP                            ;128
00000e  7810              LDRB     r0,[r2,#0]            ;128
000010  28de              CMP      r0,#0xde              ;128
000012  d001              BEQ      |L2.24|
000014  2008              MOVS     r0,#8                 ;128
000016  e7f7              B        |L2.8|
                  |L2.24|
000018  bf00              NOP                            ;128
00001a  87d1              STRH     r1,[r2,#0x3e]         ;129
00001c  2000              MOVS     r0,#0                 ;130
00001e  e7f3              B        |L2.8|
;;;132    
                          ENDP


                          AREA ||i.nrf_ble_qwr_init||, CODE, READONLY, ALIGN=1

                  nrf_ble_qwr_init PROC
;;;25     
;;;26     ret_code_t nrf_ble_qwr_init(nrf_ble_qwr_t            * p_qwr,
000000  b570              PUSH     {r4-r6,lr}
;;;27                                 nrf_ble_qwr_init_t const * p_qwr_init)
;;;28     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;29         VERIFY_PARAM_NOT_NULL(p_qwr);
000006  bf00              NOP      
000008  b90c              CBNZ     r4,|L3.14|
00000a  200e              MOVS     r0,#0xe
                  |L3.12|
;;;30         VERIFY_PARAM_NOT_NULL(p_qwr_init);
;;;31         if (MODULE_INITIALIZED)
;;;32         {
;;;33             return NRF_ERROR_INVALID_STATE;
;;;34         }
;;;35     
;;;36         memset(p_qwr->attr_handles, 0, sizeof(p_qwr->attr_handles));
;;;37         p_qwr->nb_registered_attr        = 0;
;;;38         p_qwr->error_handler             = p_qwr_init->error_handler;
;;;39         p_qwr->is_user_mem_reply_pending = false;
;;;40         p_qwr->conn_handle               = BLE_CONN_HANDLE_INVALID;
;;;41         p_qwr->initialized               = NRF_BLE_QWR_INITIALIZED;
;;;42         p_qwr->mem_buffer                = p_qwr_init->mem_buffer;
;;;43         p_qwr->callback                  = p_qwr_init->callback;
;;;44         p_qwr->nb_written_handles        = 0;
;;;45         return NRF_SUCCESS;
;;;46     }
00000c  bd70              POP      {r4-r6,pc}
                  |L3.14|
00000e  bf00              NOP                            ;29
000010  bf00              NOP                            ;30
000012  b90d              CBNZ     r5,|L3.24|
000014  200e              MOVS     r0,#0xe               ;30
000016  e7f9              B        |L3.12|
                  |L3.24|
000018  bf00              NOP                            ;30
00001a  7820              LDRB     r0,[r4,#0]            ;31
00001c  28de              CMP      r0,#0xde              ;31
00001e  d101              BNE      |L3.36|
000020  2008              MOVS     r0,#8                 ;33
000022  e7f3              B        |L3.12|
                  |L3.36|
000024  2114              MOVS     r1,#0x14              ;36
000026  1ca0              ADDS     r0,r4,#2              ;36
000028  f7fffffe          BL       __aeabi_memclr
00002c  2000              MOVS     r0,#0                 ;37
00002e  75a0              STRB     r0,[r4,#0x16]         ;37
000030  6828              LDR      r0,[r5,#0]            ;38
000032  63a0              STR      r0,[r4,#0x38]         ;38
000034  2000              MOVS     r0,#0                 ;39
000036  f884003c          STRB     r0,[r4,#0x3c]         ;39
00003a  f64f70ff          MOV      r0,#0xffff            ;40
00003e  87e0              STRH     r0,[r4,#0x3e]         ;40
000040  20de              MOVS     r0,#0xde              ;41
000042  7020              STRB     r0,[r4,#0]            ;41
000044  e9d50101          LDRD     r0,r1,[r5,#4]         ;42
000048  e9c4010c          STRD     r0,r1,[r4,#0x30]      ;42
00004c  68e8              LDR      r0,[r5,#0xc]          ;43
00004e  6420              STR      r0,[r4,#0x40]         ;43
000050  2000              MOVS     r0,#0                 ;44
000052  f884002c          STRB     r0,[r4,#0x2c]         ;44
000056  bf00              NOP                            ;45
000058  e7d8              B        |L3.12|
;;;47     
                          ENDP


                          AREA ||i.nrf_ble_qwr_on_ble_evt||, CODE, READONLY, ALIGN=1

                  nrf_ble_qwr_on_ble_evt PROC
;;;344    
;;;345    void nrf_ble_qwr_on_ble_evt(nrf_ble_qwr_t * p_qwr,
000000  b570              PUSH     {r4-r6,lr}
;;;346                                ble_evt_t     * p_ble_evt)
;;;347    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;348        VERIFY_PARAM_NOT_NULL_VOID(p_qwr);
000006  bf00              NOP      
000008  b904              CBNZ     r4,|L4.12|
                  |L4.10|
;;;349        VERIFY_PARAM_NOT_NULL_VOID(p_ble_evt);
;;;350        VERIFY_MODULE_INITIALIZED_VOID();
;;;351    
;;;352        if (p_qwr->is_user_mem_reply_pending)
;;;353        {
;;;354            on_user_mem_request(p_qwr, &p_ble_evt->evt.common_evt);
;;;355        }
;;;356    
;;;357        switch (p_ble_evt->header.evt_id)
;;;358        {
;;;359            case BLE_EVT_USER_MEM_REQUEST:
;;;360                on_user_mem_request(p_qwr, &p_ble_evt->evt.common_evt);
;;;361                break; // BLE_EVT_USER_MEM_REQUEST
;;;362    
;;;363            case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;364                on_rw_authorize_request(p_qwr, &p_ble_evt->evt.gatts_evt);
;;;365                break; // BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST
;;;366    
;;;367            case BLE_GAP_EVT_DISCONNECTED:
;;;368                if (p_ble_evt->evt.gap_evt.conn_handle == p_qwr->conn_handle)
;;;369                {
;;;370                    p_qwr->conn_handle        = BLE_CONN_HANDLE_INVALID;
;;;371                    p_qwr->nb_written_handles = 0;
;;;372                }
;;;373                break; // BLE_GAP_EVT_DISCONNECTED
;;;374    
;;;375            default:
;;;376                break;
;;;377        }
;;;378    
;;;379    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  bf00              NOP                            ;348
00000e  bf00              NOP                            ;349
000010  b905              CBNZ     r5,|L4.20|
000012  e7fa              B        |L4.10|
                  |L4.20|
000014  bf00              NOP                            ;349
000016  bf00              NOP                            ;350
000018  7820              LDRB     r0,[r4,#0]            ;350
00001a  28de              CMP      r0,#0xde              ;350
00001c  d000              BEQ      |L4.32|
00001e  e7f4              B        |L4.10|
                  |L4.32|
000020  bf00              NOP                            ;350
000022  f894003c          LDRB     r0,[r4,#0x3c]         ;352
000026  b118              CBZ      r0,|L4.48|
000028  1d29              ADDS     r1,r5,#4              ;354
00002a  4620              MOV      r0,r4                 ;354
00002c  f7fffffe          BL       on_user_mem_request
                  |L4.48|
000030  8828              LDRH     r0,[r5,#0]            ;357
000032  2802              CMP      r0,#2                 ;357
000034  d004              BEQ      |L4.64|
000036  2811              CMP      r0,#0x11              ;357
000038  d00c              BEQ      |L4.84|
00003a  2851              CMP      r0,#0x51              ;357
00003c  d115              BNE      |L4.106|
00003e  e004              B        |L4.74|
                  |L4.64|
000040  1d29              ADDS     r1,r5,#4              ;360
000042  4620              MOV      r0,r4                 ;360
000044  f7fffffe          BL       on_user_mem_request
000048  e010              B        |L4.108|
                  |L4.74|
00004a  1d29              ADDS     r1,r5,#4              ;364
00004c  4620              MOV      r0,r4                 ;364
00004e  f7fffffe          BL       on_rw_authorize_request
000052  e00b              B        |L4.108|
                  |L4.84|
000054  88a8              LDRH     r0,[r5,#4]            ;368
000056  8fe1              LDRH     r1,[r4,#0x3e]         ;368
000058  4288              CMP      r0,r1                 ;368
00005a  d105              BNE      |L4.104|
00005c  f64f70ff          MOV      r0,#0xffff            ;370
000060  87e0              STRH     r0,[r4,#0x3e]         ;370
000062  2000              MOVS     r0,#0                 ;371
000064  f884002c          STRB     r0,[r4,#0x2c]         ;371
                  |L4.104|
000068  e000              B        |L4.108|
                  |L4.106|
00006a  bf00              NOP                            ;376
                  |L4.108|
00006c  bf00              NOP                            ;361
00006e  bf00              NOP      
000070  e7cb              B        |L4.10|
;;;380    #endif //NRF_BLE_QWR_ENABLED
                          ENDP


                          AREA ||i.nrf_ble_qwr_value_get||, CODE, READONLY, ALIGN=1

                  nrf_ble_qwr_value_get PROC
;;;70     
;;;71     ret_code_t nrf_ble_qwr_value_get(nrf_ble_qwr_t * p_qwr,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;72                                      uint16_t        attr_handle,
;;;73                                      uint8_t       * p_mem,
;;;74                                      uint16_t      * p_len)
;;;75     {
000004  4605              MOV      r5,r0
000006  4690              MOV      r8,r2
000008  461e              MOV      r6,r3
;;;76         VERIFY_PARAM_NOT_NULL(p_qwr);
00000a  bf00              NOP      
00000c  b91d              CBNZ     r5,|L5.22|
00000e  200e              MOVS     r0,#0xe
                  |L5.16|
;;;77         VERIFY_PARAM_NOT_NULL(p_mem);
;;;78         VERIFY_PARAM_NOT_NULL(p_len);
;;;79         VERIFY_MODULE_INITIALIZED();
;;;80     
;;;81         uint16_t i          = 0;
;;;82         uint16_t handle     = BLE_GATT_HANDLE_INVALID;
;;;83         uint16_t val_len    = 0;
;;;84         uint16_t val_offset = 0;
;;;85         uint16_t cur_len    = 0;
;;;86     
;;;87         do
;;;88         {
;;;89             handle = uint16_decode(&(p_qwr->mem_buffer.p_mem[i]));
;;;90     
;;;91             if (handle == BLE_GATT_HANDLE_INVALID)
;;;92             {
;;;93                 break;
;;;94             }
;;;95     
;;;96             i         += sizeof(uint16_t);
;;;97             val_offset = uint16_decode(&(p_qwr->mem_buffer.p_mem[i]));
;;;98             i         += sizeof(uint16_t);
;;;99             val_len    = uint16_decode(&(p_qwr->mem_buffer.p_mem[i]));
;;;100            i         += sizeof(uint16_t);
;;;101    
;;;102            if (handle == attr_handle)
;;;103            {
;;;104                cur_len = val_offset + val_len;
;;;105                if (cur_len <= *p_len)
;;;106                {
;;;107                    memcpy((p_mem + val_offset), &(p_qwr->mem_buffer.p_mem[i]), val_len);
;;;108                }
;;;109                else
;;;110                {
;;;111                    return NRF_ERROR_NO_MEM;
;;;112                }
;;;113            }
;;;114    
;;;115            i += val_len;
;;;116        }
;;;117        while (i < p_qwr->mem_buffer.len);
;;;118    
;;;119        *p_len = cur_len;
;;;120        return NRF_SUCCESS;
;;;121    }
000010  b004              ADD      sp,sp,#0x10
000012  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.22|
000016  bf00              NOP                            ;76
000018  bf00              NOP                            ;77
00001a  f1b80f00          CMP      r8,#0                 ;77
00001e  d101              BNE      |L5.36|
000020  200e              MOVS     r0,#0xe               ;77
000022  e7f5              B        |L5.16|
                  |L5.36|
000024  bf00              NOP                            ;77
000026  bf00              NOP                            ;78
000028  b90e              CBNZ     r6,|L5.46|
00002a  200e              MOVS     r0,#0xe               ;78
00002c  e7f0              B        |L5.16|
                  |L5.46|
00002e  bf00              NOP                            ;78
000030  bf00              NOP                            ;79
000032  7828              LDRB     r0,[r5,#0]            ;79
000034  28de              CMP      r0,#0xde              ;79
000036  d001              BEQ      |L5.60|
000038  2008              MOVS     r0,#8                 ;79
00003a  e7e9              B        |L5.16|
                  |L5.60|
00003c  bf00              NOP                            ;79
00003e  2400              MOVS     r4,#0                 ;81
000040  46a1              MOV      r9,r4                 ;82
000042  2700              MOVS     r7,#0                 ;83
000044  46a2              MOV      r10,r4                ;84
000046  46a3              MOV      r11,r4                ;85
000048  bf00              NOP                            ;87
                  |L5.74|
00004a  6b29              LDR      r1,[r5,#0x30]         ;89
00004c  1908              ADDS     r0,r1,r4              ;89
00004e  f7fffffe          BL       uint16_decode
000052  4681              MOV      r9,r0                 ;89
000054  f1b90f00          CMP      r9,#0                 ;91
000058  d100              BNE      |L5.92|
00005a  e028              B        |L5.174|
                  |L5.92|
00005c  1ca0              ADDS     r0,r4,#2              ;96
00005e  b284              UXTH     r4,r0                 ;96
000060  6b29              LDR      r1,[r5,#0x30]         ;97
000062  1908              ADDS     r0,r1,r4              ;97
000064  f7fffffe          BL       uint16_decode
000068  4682              MOV      r10,r0                ;97
00006a  1ca0              ADDS     r0,r4,#2              ;98
00006c  b284              UXTH     r4,r0                 ;98
00006e  6b29              LDR      r1,[r5,#0x30]         ;99
000070  1908              ADDS     r0,r1,r4              ;99
000072  f7fffffe          BL       uint16_decode
000076  4607              MOV      r7,r0                 ;99
000078  1ca0              ADDS     r0,r4,#2              ;100
00007a  b284              UXTH     r4,r0                 ;100
00007c  9801              LDR      r0,[sp,#4]            ;102
00007e  4581              CMP      r9,r0                 ;102
000080  d110              BNE      |L5.164|
000082  eb0a0007          ADD      r0,r10,r7             ;104
000086  fa1ffb80          UXTH     r11,r0                ;104
00008a  8830              LDRH     r0,[r6,#0]            ;105
00008c  4558              CMP      r0,r11                ;105
00008e  db07              BLT      |L5.160|
000090  6b2a              LDR      r2,[r5,#0x30]         ;107
000092  1911              ADDS     r1,r2,r4              ;107
000094  eb08000a          ADD      r0,r8,r10             ;107
000098  463a              MOV      r2,r7                 ;107
00009a  f7fffffe          BL       __aeabi_memcpy
00009e  e001              B        |L5.164|
                  |L5.160|
0000a0  2004              MOVS     r0,#4                 ;111
0000a2  e7b5              B        |L5.16|
                  |L5.164|
0000a4  19e0              ADDS     r0,r4,r7              ;115
0000a6  b284              UXTH     r4,r0                 ;115
0000a8  8ea8              LDRH     r0,[r5,#0x34]         ;117
0000aa  42a0              CMP      r0,r4                 ;117
0000ac  dccd              BGT      |L5.74|
                  |L5.174|
0000ae  bf00              NOP                            ;93
0000b0  f8a6b000          STRH     r11,[r6,#0]           ;119
0000b4  2000              MOVS     r0,#0                 ;120
0000b6  e7ab              B        |L5.16|
;;;122    
                          ENDP


                          AREA ||i.on_cancel_write||, CODE, READONLY, ALIGN=1

                  on_cancel_write PROC
;;;284     */
;;;285    static void on_cancel_write(nrf_ble_qwr_t               * p_qwr,
000000  b57f              PUSH     {r0-r6,lr}
;;;286                                ble_gatts_evt_write_t const * p_evt_write)
;;;287    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;288        uint32_t                              err_code;
;;;289        ble_gatts_rw_authorize_reply_params_t auth_reply;
;;;290        memset(&auth_reply, 0, sizeof(auth_reply));
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
;;;291    
;;;292        auth_reply.type                     = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
000010  2002              MOVS     r0,#2
000012  f88d0000          STRB     r0,[sp,#0]
;;;293        auth_reply.params.write.gatt_status = BLE_GATT_STATUS_SUCCESS;
000016  2000              MOVS     r0,#0
000018  f8ad0004          STRH     r0,[sp,#4]
;;;294    
;;;295        err_code = sd_ble_gatts_rw_authorize_reply(p_qwr->conn_handle, &auth_reply);
00001c  8fe0              LDRH     r0,[r4,#0x3e]
00001e  4669              MOV      r1,sp
000020  dfa8              SVC      #0xa8
000022  4605              MOV      r5,r0
;;;296        if (err_code != NRF_SUCCESS)
000024  b115              CBZ      r5,|L6.44|
;;;297        {
;;;298            // Report error to application.
;;;299            p_qwr->error_handler(err_code);
000026  4628              MOV      r0,r5
000028  6ba1              LDR      r1,[r4,#0x38]
00002a  4788              BLX      r1
                  |L6.44|
;;;300        }
;;;301        p_qwr->nb_written_handles = 0;
00002c  2000              MOVS     r0,#0
00002e  f884002c          STRB     r0,[r4,#0x2c]
;;;302    }
000032  bd7f              POP      {r0-r6,pc}
;;;303    
                          ENDP


                          AREA ||i.on_execute_write||, CODE, READONLY, ALIGN=1

                  on_execute_write PROC
;;;217     */
;;;218    static void on_execute_write(nrf_ble_qwr_t               * p_qwr,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;219                                 ble_gatts_evt_write_t const * p_evt_write)
;;;220    {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;221        uint32_t                              err_code;
;;;222        ble_gatts_rw_authorize_reply_params_t auth_reply;
;;;223        memset(&auth_reply, 0, sizeof(auth_reply));
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
000012  9005              STR      r0,[sp,#0x14]
;;;224    
;;;225        auth_reply.params.write.gatt_status = BLE_GATT_STATUS_SUCCESS;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;226        auth_reply.type                     = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
000018  2002              MOVS     r0,#2
00001a  f88d0008          STRB     r0,[sp,#8]
;;;227    
;;;228        if (p_qwr->nb_written_handles == 0)
00001e  f894002c          LDRB     r0,[r4,#0x2c]
000022  b970              CBNZ     r0,|L7.66|
;;;229        {
;;;230            auth_reply.params.write.gatt_status = NRF_BLE_QWR_REJ_REQUEST_ERR_CODE;
000024  f44f70c0          MOV      r0,#0x180
000028  f8ad000c          STRH     r0,[sp,#0xc]
;;;231            err_code = sd_ble_gatts_rw_authorize_reply(p_qwr->conn_handle, &auth_reply);
00002c  8fe0              LDRH     r0,[r4,#0x3e]
00002e  a902              ADD      r1,sp,#8
000030  dfa8              SVC      #0xa8
000032  4605              MOV      r5,r0
;;;232            if (err_code != NRF_SUCCESS)
000034  b115              CBZ      r5,|L7.60|
;;;233            {
;;;234                // Report error to application.
;;;235                p_qwr->error_handler(err_code);
000036  4628              MOV      r0,r5
000038  6ba1              LDR      r1,[r4,#0x38]
00003a  4788              BLX      r1
                  |L7.60|
;;;236            }
;;;237            return;
;;;238        }
;;;239    
;;;240        for (uint16_t i = 0; i < p_qwr->nb_written_handles; i++)
;;;241        {
;;;242            nrf_ble_qwr_evt_t evt;
;;;243            uint16_t          ret_val;
;;;244    
;;;245            evt.evt_type    = NRF_BLE_QWR_EVT_AUTH_REQUEST;
;;;246            evt.attr_handle = p_qwr->written_attr_handles[i];
;;;247            ret_val         = p_qwr->callback(p_qwr, &evt);
;;;248            if (ret_val != BLE_GATT_STATUS_SUCCESS)
;;;249            {
;;;250                auth_reply.params.write.gatt_status = ret_val;
;;;251            }
;;;252        }
;;;253    
;;;254        err_code = sd_ble_gatts_rw_authorize_reply(p_qwr->conn_handle, &auth_reply);
;;;255        if (err_code != NRF_SUCCESS)
;;;256        {
;;;257            // Report error to application.
;;;258            p_qwr->error_handler(err_code);
;;;259        }
;;;260    
;;;261        // If the execute has not been rejected by any of the registered applications, propagate execute write event to all written handles. */
;;;262        if (auth_reply.params.write.gatt_status == BLE_GATT_STATUS_SUCCESS)
;;;263        {
;;;264            for (uint16_t i = 0; i < p_qwr->nb_written_handles; i++)
;;;265            {
;;;266                nrf_ble_qwr_evt_t evt;
;;;267                evt.evt_type    = NRF_BLE_QWR_EVT_EXECUTE_WRITE;
;;;268                evt.attr_handle = p_qwr->written_attr_handles[i];
;;;269                /*lint -e534 -save "Ignoring return value of function" */
;;;270                p_qwr->callback(p_qwr, &evt);
;;;271                /*lint -restore*/
;;;272    
;;;273                auth_reply.params.write.gatt_status = BLE_GATT_STATUS_SUCCESS;
;;;274            }
;;;275        }
;;;276        p_qwr->nb_written_handles = 0;
;;;277    }
00003c  b006              ADD      sp,sp,#0x18
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L7.66|
000042  2600              MOVS     r6,#0                 ;240
000044  e012              B        |L7.108|
                  |L7.70|
000046  2001              MOVS     r0,#1                 ;245
000048  f88d0004          STRB     r0,[sp,#4]            ;245
00004c  f1040018          ADD      r0,r4,#0x18           ;246
000050  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;246
000054  f8ad0006          STRH     r0,[sp,#6]            ;246
000058  a901              ADD      r1,sp,#4              ;247
00005a  4620              MOV      r0,r4                 ;247
00005c  6c22              LDR      r2,[r4,#0x40]         ;247
00005e  4790              BLX      r2                    ;247
000060  4607              MOV      r7,r0                 ;247
000062  b10f              CBZ      r7,|L7.104|
000064  f8ad700c          STRH     r7,[sp,#0xc]          ;250
                  |L7.104|
000068  1c70              ADDS     r0,r6,#1              ;240
00006a  b286              UXTH     r6,r0                 ;240
                  |L7.108|
00006c  f894002c          LDRB     r0,[r4,#0x2c]         ;240
000070  42b0              CMP      r0,r6                 ;240
000072  dce8              BGT      |L7.70|
000074  8fe0              LDRH     r0,[r4,#0x3e]         ;254
000076  a902              ADD      r1,sp,#8              ;254
000078  dfa8              SVC      #0xa8                 ;254
00007a  4605              MOV      r5,r0                 ;254
00007c  b115              CBZ      r5,|L7.132|
00007e  4628              MOV      r0,r5                 ;258
000080  6ba1              LDR      r1,[r4,#0x38]         ;258
000082  4788              BLX      r1                    ;258
                  |L7.132|
000084  f8bd000c          LDRH     r0,[sp,#0xc]          ;262
000088  b9b8              CBNZ     r0,|L7.186|
00008a  2600              MOVS     r6,#0                 ;264
00008c  e011              B        |L7.178|
                  |L7.142|
00008e  2000              MOVS     r0,#0                 ;267
000090  f88d0004          STRB     r0,[sp,#4]            ;267
000094  f1040018          ADD      r0,r4,#0x18           ;268
000098  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;268
00009c  f8ad0006          STRH     r0,[sp,#6]            ;268
0000a0  a901              ADD      r1,sp,#4              ;270
0000a2  4620              MOV      r0,r4                 ;270
0000a4  6c22              LDR      r2,[r4,#0x40]         ;270
0000a6  4790              BLX      r2                    ;270
0000a8  2000              MOVS     r0,#0                 ;273
0000aa  f8ad000c          STRH     r0,[sp,#0xc]          ;273
0000ae  1c70              ADDS     r0,r6,#1              ;264
0000b0  b286              UXTH     r6,r0                 ;264
                  |L7.178|
0000b2  f894002c          LDRB     r0,[r4,#0x2c]         ;264
0000b6  42b0              CMP      r0,r6                 ;264
0000b8  dce9              BGT      |L7.142|
                  |L7.186|
0000ba  2000              MOVS     r0,#0                 ;276
0000bc  f884002c          STRB     r0,[r4,#0x2c]         ;276
0000c0  bf00              NOP      
0000c2  e7bb              B        |L7.60|
;;;278    
                          ENDP


                          AREA ||i.on_prepare_write||, CODE, READONLY, ALIGN=1

                  on_prepare_write PROC
;;;165     */
;;;166    static void on_prepare_write(nrf_ble_qwr_t               * p_qwr,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;167                                 ble_gatts_evt_write_t const * p_evt_write)
;;;168    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;169        uint32_t                              err_code;
;;;170        ble_gatts_rw_authorize_reply_params_t auth_reply;
;;;171        memset(&auth_reply, 0, sizeof(auth_reply));
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;172    
;;;173        auth_reply.params.write.gatt_status = NRF_BLE_QWR_REJ_REQUEST_ERR_CODE;
000012  f44f70c0          MOV      r0,#0x180
000016  f8ad0004          STRH     r0,[sp,#4]
;;;174        auth_reply.type                     = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
00001a  2002              MOVS     r0,#2
00001c  f88d0000          STRB     r0,[sp,#0]
;;;175    
;;;176        uint32_t i;
;;;177    
;;;178        for (i = 0; i < p_qwr->nb_written_handles; i++)
000020  2500              MOVS     r5,#0
000022  e00b              B        |L8.60|
                  |L8.36|
;;;179        {
;;;180            if (p_qwr->written_attr_handles[i] == p_evt_write->handle)
000024  f1040018          ADD      r0,r4,#0x18
000028  f8300015          LDRH     r0,[r0,r5,LSL #1]
00002c  8831              LDRH     r1,[r6,#0]
00002e  4288              CMP      r0,r1
000030  d103              BNE      |L8.58|
;;;181            {
;;;182                auth_reply.params.write.gatt_status = BLE_GATT_STATUS_SUCCESS;
000032  2000              MOVS     r0,#0
000034  f8ad0004          STRH     r0,[sp,#4]
;;;183                break;
000038  e004              B        |L8.68|
                  |L8.58|
00003a  1c6d              ADDS     r5,r5,#1              ;178
                  |L8.60|
00003c  f894002c          LDRB     r0,[r4,#0x2c]         ;178
000040  42a8              CMP      r0,r5                 ;178
000042  d8ef              BHI      |L8.36|
                  |L8.68|
000044  bf00              NOP      
;;;184            }
;;;185        }
;;;186    
;;;187        if (auth_reply.params.write.gatt_status != BLE_GATT_STATUS_SUCCESS)
000046  f8bd0004          LDRH     r0,[sp,#4]
00004a  b1d8              CBZ      r0,|L8.132|
;;;188        {
;;;189            for (i = 0; i < p_qwr->nb_registered_attr; i++)
00004c  2500              MOVS     r5,#0
00004e  e015              B        |L8.124|
                  |L8.80|
;;;190            {
;;;191                if (p_qwr->attr_handles[i] == p_evt_write->handle)
000050  1ca0              ADDS     r0,r4,#2
000052  f8300015          LDRH     r0,[r0,r5,LSL #1]
000056  8831              LDRH     r1,[r6,#0]
000058  4288              CMP      r0,r1
00005a  d10e              BNE      |L8.122|
;;;192                {
;;;193                    auth_reply.params.write.gatt_status                      = BLE_GATT_STATUS_SUCCESS;
00005c  2000              MOVS     r0,#0
00005e  f8ad0004          STRH     r0,[sp,#4]
;;;194                    p_qwr->written_attr_handles[p_qwr->nb_written_handles++] = p_evt_write->handle;
000062  8831              LDRH     r1,[r6,#0]
000064  f8142f2c          LDRB     r2,[r4,#0x2c]!
000068  7820              LDRB     r0,[r4,#0]
00006a  1c40              ADDS     r0,r0,#1
00006c  f804092c          STRB     r0,[r4],#-0x2c
000070  f1040018          ADD      r0,r4,#0x18
000074  f8201012          STRH     r1,[r0,r2,LSL #1]
;;;195                    break;
000078  e003              B        |L8.130|
                  |L8.122|
00007a  1c6d              ADDS     r5,r5,#1              ;189
                  |L8.124|
00007c  7da0              LDRB     r0,[r4,#0x16]         ;189
00007e  42a8              CMP      r0,r5                 ;189
000080  d8e6              BHI      |L8.80|
                  |L8.130|
000082  bf00              NOP      
                  |L8.132|
;;;196                }
;;;197            }
;;;198        }
;;;199    
;;;200        err_code = sd_ble_gatts_rw_authorize_reply(p_qwr->conn_handle, &auth_reply);
000084  8fe0              LDRH     r0,[r4,#0x3e]
000086  4669              MOV      r1,sp
000088  dfa8              SVC      #0xa8
00008a  4607              MOV      r7,r0
;;;201        if (err_code != NRF_SUCCESS)
00008c  b12f              CBZ      r7,|L8.154|
;;;202        {
;;;203            // Cancel the current operation.
;;;204            p_qwr->nb_written_handles = 0;
00008e  2000              MOVS     r0,#0
000090  f884002c          STRB     r0,[r4,#0x2c]
;;;205    
;;;206            // Report error to application.
;;;207            p_qwr->error_handler(err_code);
000094  4638              MOV      r0,r7
000096  6ba1              LDR      r1,[r4,#0x38]
000098  4788              BLX      r1
                  |L8.154|
;;;208        }
;;;209    
;;;210    }
00009a  e8bd81ff          POP      {r0-r8,pc}
;;;211    
                          ENDP


                          AREA ||i.on_rw_authorize_request||, CODE, READONLY, ALIGN=1

                  on_rw_authorize_request PROC
;;;309     */
;;;310    static void on_rw_authorize_request(nrf_ble_qwr_t         * p_qwr,
000000  b570              PUSH     {r4-r6,lr}
;;;311                                        ble_gatts_evt_t const * p_gatts_evt)
;;;312    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;313        if (p_gatts_evt->conn_handle != p_qwr->conn_handle)
000006  8828              LDRH     r0,[r5,#0]
000008  8ff1              LDRH     r1,[r6,#0x3e]
00000a  4288              CMP      r0,r1
00000c  d000              BEQ      |L9.16|
                  |L9.14|
;;;314        {
;;;315            return;
;;;316        }
;;;317    
;;;318        ble_gatts_evt_rw_authorize_request_t const * p_auth_req = &p_gatts_evt->params.authorize_request;
;;;319        if (p_auth_req->type != BLE_GATTS_AUTHORIZE_TYPE_WRITE)
;;;320        {
;;;321            return;
;;;322        }
;;;323    
;;;324        switch (p_auth_req->request.write.op)
;;;325        {
;;;326            case BLE_GATTS_OP_PREP_WRITE_REQ:
;;;327                on_prepare_write(p_qwr, &p_auth_req->request.write);
;;;328                break; // BLE_GATTS_OP_PREP_WRITE_REQ
;;;329    
;;;330            case BLE_GATTS_OP_EXEC_WRITE_REQ_NOW:
;;;331                on_execute_write(p_qwr, &p_auth_req->request.write);
;;;332                break; // BLE_GATTS_OP_EXEC_WRITE_REQ_NOW
;;;333    
;;;334            case BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL:
;;;335                on_cancel_write(p_qwr, &p_auth_req->request.write);
;;;336                break; // BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL
;;;337    
;;;338            default:
;;;339                // No implementation needed.
;;;340                break;
;;;341        }
;;;342    }
00000e  bd70              POP      {r4-r6,pc}
                  |L9.16|
000010  1cac              ADDS     r4,r5,#2              ;318
000012  7820              LDRB     r0,[r4,#0]            ;319
000014  2802              CMP      r0,#2                 ;319
000016  d000              BEQ      |L9.26|
000018  e7f9              B        |L9.14|
                  |L9.26|
00001a  7a20              LDRB     r0,[r4,#8]            ;324
00001c  2804              CMP      r0,#4                 ;324
00001e  d004              BEQ      |L9.42|
000020  2805              CMP      r0,#5                 ;324
000022  d00c              BEQ      |L9.62|
000024  2806              CMP      r0,#6                 ;324
000026  d10f              BNE      |L9.72|
000028  e004              B        |L9.52|
                  |L9.42|
00002a  1ca1              ADDS     r1,r4,#2              ;327
00002c  4630              MOV      r0,r6                 ;327
00002e  f7fffffe          BL       on_prepare_write
000032  e00a              B        |L9.74|
                  |L9.52|
000034  1ca1              ADDS     r1,r4,#2              ;331
000036  4630              MOV      r0,r6                 ;331
000038  f7fffffe          BL       on_execute_write
00003c  e005              B        |L9.74|
                  |L9.62|
00003e  1ca1              ADDS     r1,r4,#2              ;335
000040  4630              MOV      r0,r6                 ;335
000042  f7fffffe          BL       on_cancel_write
000046  e000              B        |L9.74|
                  |L9.72|
000048  bf00              NOP                            ;340
                  |L9.74|
00004a  bf00              NOP                            ;328
00004c  bf00              NOP      
00004e  e7de              B        |L9.14|
;;;343    
                          ENDP


                          AREA ||i.on_user_mem_request||, CODE, READONLY, ALIGN=1

                  on_user_mem_request PROC
;;;138     */
;;;139    static void on_user_mem_request(nrf_ble_qwr_t          * p_qwr,
000000  b570              PUSH     {r4-r6,lr}
;;;140                                    ble_common_evt_t const * p_common_evt)
;;;141    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;142        if (p_common_evt->conn_handle == p_qwr->conn_handle)
000006  8828              LDRH     r0,[r5,#0]
000008  8fe1              LDRH     r1,[r4,#0x3e]
00000a  4288              CMP      r0,r1
00000c  d113              BNE      |L10.54|
;;;143        {
;;;144            uint32_t err_code = sd_ble_user_mem_reply(p_common_evt->conn_handle, &p_qwr->mem_buffer);
00000e  8828              LDRH     r0,[r5,#0]
000010  f1040130          ADD      r1,r4,#0x30
000014  df67              SVC      #0x67
000016  4606              MOV      r6,r0
;;;145            if (err_code == NRF_SUCCESS)
000018  b91e              CBNZ     r6,|L10.34|
;;;146            {
;;;147                p_qwr->is_user_mem_reply_pending = false;
00001a  2000              MOVS     r0,#0
00001c  f884003c          STRB     r0,[r4,#0x3c]
000020  e008              B        |L10.52|
                  |L10.34|
;;;148            }
;;;149            else if (err_code == NRF_ERROR_BUSY)
000022  2e11              CMP      r6,#0x11
000024  d103              BNE      |L10.46|
;;;150            {
;;;151                p_qwr->is_user_mem_reply_pending = true;
000026  2001              MOVS     r0,#1
000028  f884003c          STRB     r0,[r4,#0x3c]
00002c  e002              B        |L10.52|
                  |L10.46|
;;;152            }
;;;153            else
;;;154            {
;;;155                p_qwr->error_handler(err_code);
00002e  4630              MOV      r0,r6
000030  6ba1              LDR      r1,[r4,#0x38]
000032  4788              BLX      r1
                  |L10.52|
;;;156            }
;;;157        }
000034  bf00              NOP      
                  |L10.54|
;;;158    }
000036  bd70              POP      {r4-r6,pc}
;;;159    
                          ENDP


                          AREA ||i.uint16_decode||, CODE, READONLY, ALIGN=1

                  uint16_decode PROC
;;;355     */
;;;356    static __INLINE uint16_t uint16_decode(const uint8_t * p_encoded_data)
000000  4601              MOV      r1,r0
;;;357    {
;;;358            return ( (((uint16_t)((uint8_t *)p_encoded_data)[0])) |
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  ea402002          ORR      r0,r0,r2,LSL #8
;;;359                     (((uint16_t)((uint8_t *)p_encoded_data)[1]) << 8 ));
;;;360    }
00000a  4770              BX       lr
;;;361    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\nrf_ble_qwr\\nrf_ble_qwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_ble_qwr_c_57697a77____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_nrf_ble_qwr_c_57697a77____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_ble_qwr_c_57697a77____REVSH|
#line 402
|__asm___13_nrf_ble_qwr_c_57697a77____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_ble_qwr_c_57697a77____RRX|
#line 587
|__asm___13_nrf_ble_qwr_c_57697a77____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
