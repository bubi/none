; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_conn_params.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_conn_params.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_conn_params.crf ..\..\..\..\..\..\components\ble\common\ble_conn_params.c]
                          THUMB

                          AREA ||i.ble_conn_params_change_conn_params||, CODE, READONLY, ALIGN=2

                  ble_conn_params_change_conn_params PROC
;;;293    
;;;294    uint32_t ble_conn_params_change_conn_params(ble_gap_conn_params_t * new_params)
000000  b538              PUSH     {r3-r5,lr}
;;;295    {
000002  4604              MOV      r4,r0
;;;296        uint32_t err_code;
;;;297    
;;;298        m_preferred_conn_params = *new_params;
000004  4812              LDR      r0,|L1.80|
000006  6821              LDR      r1,[r4,#0]
000008  6001              STR      r1,[r0,#0]  ; m_preferred_conn_params
00000a  6861              LDR      r1,[r4,#4]
00000c  6041              STR      r1,[r0,#4]  ; m_preferred_conn_params
;;;299        // Set the connection params in stack
;;;300        err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
00000e  df7a              SVC      #0x7a
000010  4605              MOV      r5,r0
;;;301        if (err_code == NRF_SUCCESS)
000012  b9d5              CBNZ     r5,|L1.74|
;;;302        {
;;;303            if (!is_conn_params_ok(&m_current_conn_params))
000014  480f              LDR      r0,|L1.84|
000016  f7fffffe          BL       is_conn_params_ok
00001a  b958              CBNZ     r0,|L1.52|
;;;304            {
;;;305                m_change_param = true;
00001c  2001              MOVS     r0,#1
00001e  490e              LDR      r1,|L1.88|
000020  7008              STRB     r0,[r1,#0]
;;;306                err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
000022  490b              LDR      r1,|L1.80|
000024  480d              LDR      r0,|L1.92|
000026  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000028  df75              SVC      #0x75
00002a  4605              MOV      r5,r0
;;;307                m_update_count = 1;
00002c  2001              MOVS     r0,#1
00002e  490c              LDR      r1,|L1.96|
000030  7008              STRB     r0,[r1,#0]
000032  e00a              B        |L1.74|
                  |L1.52|
;;;308            }
;;;309            else
;;;310            {
;;;311                // Notify the application that the procedure has succeded
;;;312                if (m_conn_params_config.evt_handler != NULL)
000034  480b              LDR      r0,|L1.100|
000036  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000038  b130              CBZ      r0,|L1.72|
;;;313                {
;;;314                    ble_conn_params_evt_t evt;
;;;315    
;;;316                    evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
00003a  2001              MOVS     r0,#1
00003c  9000              STR      r0,[sp,#0]
;;;317                    m_conn_params_config.evt_handler(&evt);
00003e  4809              LDR      r0,|L1.100|
000040  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000042  4668              MOV      r0,sp
000044  4788              BLX      r1
;;;318                }
000046  bf00              NOP      
                  |L1.72|
;;;319                err_code = NRF_SUCCESS;
000048  2500              MOVS     r5,#0
                  |L1.74|
;;;320            }
;;;321        }
;;;322        return err_code;
00004a  4628              MOV      r0,r5
;;;323    }
00004c  bd38              POP      {r3-r5,pc}
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      m_preferred_conn_params
                  |L1.84|
                          DCD      m_current_conn_params
                  |L1.88|
                          DCD      m_change_param
                  |L1.92|
                          DCD      m_conn_handle
                  |L1.96|
                          DCD      m_update_count
                  |L1.100|
                          DCD      m_conn_params_config

                          AREA ||i.ble_conn_params_init||, CODE, READONLY, ALIGN=2

                  ble_conn_params_init PROC
;;;98     
;;;99     uint32_t ble_conn_params_init(const ble_conn_params_init_t * p_init)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4605              MOV      r5,r0
;;;101        uint32_t err_code;
;;;102    
;;;103        m_conn_params_config = *p_init;
000004  221c              MOVS     r2,#0x1c
000006  4629              MOV      r1,r5
000008  4812              LDR      r0,|L2.84|
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;104        m_change_param = false;
00000e  2000              MOVS     r0,#0
000010  4911              LDR      r1,|L2.88|
000012  7008              STRB     r0,[r1,#0]
;;;105        if (p_init->p_conn_params != NULL)
000014  6828              LDR      r0,[r5,#0]
000016  b150              CBZ      r0,|L2.46|
;;;106        {
;;;107            m_preferred_conn_params = *p_init->p_conn_params;
000018  4810              LDR      r0,|L2.92|
00001a  6829              LDR      r1,[r5,#0]
00001c  680a              LDR      r2,[r1,#0]
00001e  6002              STR      r2,[r0,#0]  ; m_preferred_conn_params
000020  6849              LDR      r1,[r1,#4]
000022  6041              STR      r1,[r0,#4]  ; m_preferred_conn_params
;;;108    
;;;109            // Set the connection params in stack
;;;110            err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
000024  df7a              SVC      #0x7a
000026  4604              MOV      r4,r0
;;;111            if (err_code != NRF_SUCCESS)
000028  b13c              CBZ      r4,|L2.58|
;;;112            {
;;;113                return err_code;
00002a  4620              MOV      r0,r4
                  |L2.44|
;;;114            }
;;;115        }
;;;116        else
;;;117        {
;;;118            // Fetch the connection params from stack
;;;119            err_code = sd_ble_gap_ppcp_get(&m_preferred_conn_params);
;;;120            if (err_code != NRF_SUCCESS)
;;;121            {
;;;122                return err_code;
;;;123            }
;;;124        }
;;;125    
;;;126        m_conn_handle  = BLE_CONN_HANDLE_INVALID;
;;;127        m_update_count = 0;
;;;128    
;;;129        return app_timer_create(&m_conn_params_timer_id,
;;;130                                APP_TIMER_MODE_SINGLE_SHOT,
;;;131                                update_timeout_handler);
;;;132    }
00002c  bd70              POP      {r4-r6,pc}
                  |L2.46|
00002e  480b              LDR      r0,|L2.92|
000030  df7b              SVC      #0x7b                 ;119
000032  4604              MOV      r4,r0                 ;119
000034  b10c              CBZ      r4,|L2.58|
000036  4620              MOV      r0,r4                 ;122
000038  e7f8              B        |L2.44|
                  |L2.58|
00003a  f64f70ff          MOV      r0,#0xffff            ;126
00003e  4908              LDR      r1,|L2.96|
000040  8008              STRH     r0,[r1,#0]            ;126
000042  2000              MOVS     r0,#0                 ;127
000044  4907              LDR      r1,|L2.100|
000046  7008              STRB     r0,[r1,#0]            ;127
000048  4a07              LDR      r2,|L2.104|
00004a  2100              MOVS     r1,#0                 ;129
00004c  4807              LDR      r0,|L2.108|
00004e  f7fffffe          BL       app_timer_create
000052  e7eb              B        |L2.44|
;;;133    
                          ENDP

                  |L2.84|
                          DCD      m_conn_params_config
                  |L2.88|
                          DCD      m_change_param
                  |L2.92|
                          DCD      m_preferred_conn_params
                  |L2.96|
                          DCD      m_conn_handle
                  |L2.100|
                          DCD      m_update_count
                  |L2.104|
                          DCD      update_timeout_handler
                  |L2.108|
                          DCD      m_conn_params_timer_id

                          AREA ||i.ble_conn_params_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_conn_params_on_ble_evt PROC
;;;266    
;;;267    void ble_conn_params_on_ble_evt(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;268    {
000002  4604              MOV      r4,r0
;;;269        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d006              BEQ      |L3.24|
00000a  2811              CMP      r0,#0x11
00000c  d008              BEQ      |L3.32|
00000e  2812              CMP      r0,#0x12
000010  d00e              BEQ      |L3.48|
000012  2850              CMP      r0,#0x50
000014  d110              BNE      |L3.56|
000016  e007              B        |L3.40|
                  |L3.24|
;;;270        {
;;;271            case BLE_GAP_EVT_CONNECTED:
;;;272                on_connect(p_ble_evt);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       on_connect
;;;273                break;
00001e  e00c              B        |L3.58|
                  |L3.32|
;;;274    
;;;275            case BLE_GAP_EVT_DISCONNECTED:
;;;276                on_disconnect(p_ble_evt);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       on_disconnect
;;;277                break;
000026  e008              B        |L3.58|
                  |L3.40|
;;;278    
;;;279            case BLE_GATTS_EVT_WRITE:
;;;280                on_write(p_ble_evt);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       on_write
;;;281                break;
00002e  e004              B        |L3.58|
                  |L3.48|
;;;282    
;;;283            case BLE_GAP_EVT_CONN_PARAM_UPDATE:
;;;284                on_conn_params_update(p_ble_evt);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       on_conn_params_update
;;;285                break;
000036  e000              B        |L3.58|
                  |L3.56|
;;;286    
;;;287            default:
;;;288                // No implementation needed.
;;;289                break;
000038  bf00              NOP      
                  |L3.58|
00003a  bf00              NOP                            ;273
;;;290        }
;;;291    }
00003c  bd10              POP      {r4,pc}
;;;292    
                          ENDP


                          AREA ||i.ble_conn_params_stop||, CODE, READONLY, ALIGN=2

                  ble_conn_params_stop PROC
;;;134    
;;;135    uint32_t ble_conn_params_stop(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        return app_timer_stop(m_conn_params_timer_id);
000002  4802              LDR      r0,|L4.12|
000004  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000006  f7fffffe          BL       app_timer_stop
;;;138    }
00000a  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L4.12|
                          DCD      m_conn_params_timer_id

                          AREA ||i.conn_params_negotiation||, CODE, READONLY, ALIGN=2

                  conn_params_negotiation PROC
;;;140    
;;;141    static void conn_params_negotiation(void)
000000  b538              PUSH     {r3-r5,lr}
;;;142    {
;;;143        // Start negotiation if the received connection parameters are not acceptable
;;;144        if (!is_conn_params_ok(&m_current_conn_params))
000002  481b              LDR      r0,|L5.112|
000004  f7fffffe          BL       is_conn_params_ok
000008  bb20              CBNZ     r0,|L5.84|
;;;145        {
;;;146            uint32_t err_code;
;;;147            uint32_t timeout_ticks;
;;;148    
;;;149            if (m_change_param)
00000a  481a              LDR      r0,|L5.116|
00000c  7800              LDRB     r0,[r0,#0]  ; m_change_param
00000e  b148              CBZ      r0,|L5.36|
;;;150            {
;;;151                // Notify the application that the procedure has failed
;;;152                if (m_conn_params_config.evt_handler != NULL)
000010  4819              LDR      r0,|L5.120|
000012  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000014  b1e8              CBZ      r0,|L5.82|
;;;153                {
;;;154                    ble_conn_params_evt_t evt;
;;;155    
;;;156                    evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;157                    m_conn_params_config.evt_handler(&evt);
00001a  4817              LDR      r0,|L5.120|
00001c  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
00001e  4668              MOV      r0,sp
000020  4788              BLX      r1
;;;158                }
000022  e016              B        |L5.82|
                  |L5.36|
;;;159            }
;;;160            else
;;;161            {
;;;162                if (m_update_count == 0)
000024  4815              LDR      r0,|L5.124|
000026  7800              LDRB     r0,[r0,#0]  ; m_update_count
000028  b910              CBNZ     r0,|L5.48|
;;;163                {
;;;164                    // First connection parameter update
;;;165                    timeout_ticks = m_conn_params_config.first_conn_params_update_delay;
00002a  4813              LDR      r0,|L5.120|
00002c  6845              LDR      r5,[r0,#4]  ; m_conn_params_config
00002e  e001              B        |L5.52|
                  |L5.48|
;;;166                }
;;;167                else
;;;168                {
;;;169                    timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
000030  4811              LDR      r0,|L5.120|
000032  6885              LDR      r5,[r0,#8]  ; m_conn_params_config
                  |L5.52|
;;;170                }
;;;171    
;;;172                err_code = app_timer_start(m_conn_params_timer_id, timeout_ticks, NULL);
000034  2200              MOVS     r2,#0
000036  4629              MOV      r1,r5
000038  4811              LDR      r0,|L5.128|
00003a  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
00003c  f7fffffe          BL       app_timer_start
000040  4604              MOV      r4,r0
;;;173                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000042  b134              CBZ      r4,|L5.82|
000044  480c              LDR      r0,|L5.120|
000046  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000048  b118              CBZ      r0,|L5.82|
;;;174                {
;;;175                    m_conn_params_config.error_handler(err_code);
00004a  480b              LDR      r0,|L5.120|
00004c  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00004e  4620              MOV      r0,r4
000050  4788              BLX      r1
                  |L5.82|
;;;176                }
;;;177            }
;;;178        }
000052  e009              B        |L5.104|
                  |L5.84|
;;;179        else
;;;180        {
;;;181            // Notify the application that the procedure has succeded
;;;182            if (m_conn_params_config.evt_handler != NULL)
000054  4808              LDR      r0,|L5.120|
000056  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000058  b130              CBZ      r0,|L5.104|
;;;183            {
;;;184                ble_conn_params_evt_t evt;
;;;185    
;;;186                evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
00005a  2001              MOVS     r0,#1
00005c  9000              STR      r0,[sp,#0]
;;;187                m_conn_params_config.evt_handler(&evt);
00005e  4806              LDR      r0,|L5.120|
000060  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000062  4668              MOV      r0,sp
000064  4788              BLX      r1
;;;188            }
000066  bf00              NOP      
                  |L5.104|
;;;189        }
;;;190        m_change_param = false;
000068  2000              MOVS     r0,#0
00006a  4902              LDR      r1,|L5.116|
00006c  7008              STRB     r0,[r1,#0]
;;;191    }
00006e  bd38              POP      {r3-r5,pc}
;;;192    
                          ENDP

                  |L5.112|
                          DCD      m_current_conn_params
                  |L5.116|
                          DCD      m_change_param
                  |L5.120|
                          DCD      m_conn_params_config
                  |L5.124|
                          DCD      m_update_count
                  |L5.128|
                          DCD      m_conn_params_timer_id

                          AREA ||i.is_conn_params_ok||, CODE, READONLY, ALIGN=2

                  is_conn_params_ok PROC
;;;30     
;;;31     static bool is_conn_params_ok(ble_gap_conn_params_t * p_conn_params)
000000  4601              MOV      r1,r0
;;;32     {
;;;33         // Check if interval is within the acceptable range.
;;;34         // NOTE: Using max_conn_interval in the received event data because this contains
;;;35         //       the client's connection interval.
;;;36         if (
000002  8848              LDRH     r0,[r1,#2]
000004  4a06              LDR      r2,|L6.32|
000006  8812              LDRH     r2,[r2,#0]  ; m_preferred_conn_params
000008  4290              CMP      r0,r2
00000a  db06              BLT      |L6.26|
;;;37             (p_conn_params->max_conn_interval >= m_preferred_conn_params.min_conn_interval)
;;;38             &&
;;;39             (p_conn_params->max_conn_interval <= m_preferred_conn_params.max_conn_interval)
00000c  8848              LDRH     r0,[r1,#2]
00000e  4a04              LDR      r2,|L6.32|
000010  8852              LDRH     r2,[r2,#2]  ; m_preferred_conn_params
000012  4290              CMP      r0,r2
000014  dc01              BGT      |L6.26|
;;;40            )
;;;41         {
;;;42             return true;
000016  2001              MOVS     r0,#1
                  |L6.24|
;;;43         }
;;;44         else
;;;45         {
;;;46             return false;
;;;47         }
;;;48     }
000018  4770              BX       lr
                  |L6.26|
00001a  2000              MOVS     r0,#0                 ;46
00001c  e7fc              B        |L6.24|
;;;49     
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      m_preferred_conn_params

                          AREA ||i.on_conn_params_update||, CODE, READONLY, ALIGN=2

                  on_conn_params_update PROC
;;;257    
;;;258    static void on_conn_params_update(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;259    {
000002  4604              MOV      r4,r0
;;;260        // Copy the parameters
;;;261        m_current_conn_params = p_ble_evt->evt.gap_evt.params.conn_param_update.conn_params;
000004  4903              LDR      r1,|L7.20|
000006  68a2              LDR      r2,[r4,#8]
000008  600a              STR      r2,[r1,#0]  ; m_current_conn_params
00000a  68e0              LDR      r0,[r4,#0xc]
00000c  6048              STR      r0,[r1,#4]  ; m_current_conn_params
;;;262    
;;;263        conn_params_negotiation();
00000e  f7fffffe          BL       conn_params_negotiation
;;;264    }
000012  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  |L7.20|
                          DCD      m_current_conn_params

                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=2

                  on_connect PROC
;;;193    
;;;194    static void on_connect(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;195    {
000002  4604              MOV      r4,r0
;;;196        // Save connection parameters
;;;197        m_conn_handle         = p_ble_evt->evt.gap_evt.conn_handle;
000004  88a0              LDRH     r0,[r4,#4]
000006  4908              LDR      r1,|L8.40|
000008  8008              STRH     r0,[r1,#0]
;;;198        m_current_conn_params = p_ble_evt->evt.gap_evt.params.connected.conn_params;
00000a  4908              LDR      r1,|L8.44|
00000c  6922              LDR      r2,[r4,#0x10]
00000e  600a              STR      r2,[r1,#0]  ; m_current_conn_params
000010  6960              LDR      r0,[r4,#0x14]
000012  6048              STR      r0,[r1,#4]  ; m_current_conn_params
;;;199        m_update_count        = 0;  // Connection parameter negotiation should re-start every connection
000014  2000              MOVS     r0,#0
000016  4906              LDR      r1,|L8.48|
000018  7008              STRB     r0,[r1,#0]
;;;200    
;;;201        // Check if we shall handle negotiation on connect
;;;202        if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
00001a  4806              LDR      r0,|L8.52|
00001c  89c0              LDRH     r0,[r0,#0xe]  ; m_conn_params_config
00001e  b908              CBNZ     r0,|L8.36|
;;;203        {
;;;204            conn_params_negotiation();
000020  f7fffffe          BL       conn_params_negotiation
                  |L8.36|
;;;205        }
;;;206    }
000024  bd10              POP      {r4,pc}
;;;207    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      m_conn_handle
                  |L8.44|
                          DCD      m_current_conn_params
                  |L8.48|
                          DCD      m_update_count
                  |L8.52|
                          DCD      m_conn_params_config

                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=2

                  on_disconnect PROC
;;;208    
;;;209    static void on_disconnect(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;210    {
000002  4605              MOV      r5,r0
;;;211        uint32_t err_code;
;;;212    
;;;213        m_conn_handle = BLE_CONN_HANDLE_INVALID;
000004  f64f70ff          MOV      r0,#0xffff
000008  4909              LDR      r1,|L9.48|
00000a  8008              STRH     r0,[r1,#0]
;;;214    
;;;215        // Stop timer if running
;;;216        m_update_count = 0; // Connection parameters updates should happen during every connection
00000c  2000              MOVS     r0,#0
00000e  4909              LDR      r1,|L9.52|
000010  7008              STRB     r0,[r1,#0]
;;;217    
;;;218        err_code = app_timer_stop(m_conn_params_timer_id);
000012  4809              LDR      r0,|L9.56|
000014  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000016  f7fffffe          BL       app_timer_stop
00001a  4604              MOV      r4,r0
;;;219        if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00001c  b134              CBZ      r4,|L9.44|
00001e  4807              LDR      r0,|L9.60|
000020  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000022  b118              CBZ      r0,|L9.44|
;;;220        {
;;;221            m_conn_params_config.error_handler(err_code);
000024  4805              LDR      r0,|L9.60|
000026  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000028  4620              MOV      r0,r4
00002a  4788              BLX      r1
                  |L9.44|
;;;222        }
;;;223    }
00002c  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      m_conn_handle
                  |L9.52|
                          DCD      m_update_count
                  |L9.56|
                          DCD      m_conn_params_timer_id
                  |L9.60|
                          DCD      m_conn_params_config

                          AREA ||i.on_write||, CODE, READONLY, ALIGN=2

                  on_write PROC
;;;225    
;;;226    static void on_write(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;227    {
000002  4605              MOV      r5,r0
;;;228        ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
000004  1dac              ADDS     r4,r5,#6
;;;229    
;;;230        // Check if this the correct CCCD
;;;231        if (
000006  8820              LDRH     r0,[r4,#0]
000008  490e              LDR      r1,|L10.68|
00000a  89c9              LDRH     r1,[r1,#0xe]  ; m_conn_params_config
00000c  4288              CMP      r0,r1
00000e  d118              BNE      |L10.66|
;;;232            (p_evt_write->handle == m_conn_params_config.start_on_notify_cccd_handle)
;;;233            &&
;;;234            (p_evt_write->len == 2)
000010  8960              LDRH     r0,[r4,#0xa]
000012  2802              CMP      r0,#2
000014  d115              BNE      |L10.66|
;;;235           )
;;;236        {
;;;237            // Check if this is a 'start notification'
;;;238            if (ble_srv_is_notification_enabled(p_evt_write->data))
000016  f104000c          ADD      r0,r4,#0xc
00001a  f7fffffe          BL       ble_srv_is_notification_enabled
00001e  b110              CBZ      r0,|L10.38|
;;;239            {
;;;240                // Do connection parameter negotiation if necessary
;;;241                conn_params_negotiation();
000020  f7fffffe          BL       conn_params_negotiation
000024  e00d              B        |L10.66|
                  |L10.38|
;;;242            }
;;;243            else
;;;244            {
;;;245                uint32_t err_code;
;;;246    
;;;247                // Stop timer if running
;;;248                err_code = app_timer_stop(m_conn_params_timer_id);
000026  4808              LDR      r0,|L10.72|
000028  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
00002a  f7fffffe          BL       app_timer_stop
00002e  4606              MOV      r6,r0
;;;249                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000030  b136              CBZ      r6,|L10.64|
000032  4804              LDR      r0,|L10.68|
000034  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000036  b118              CBZ      r0,|L10.64|
;;;250                {
;;;251                    m_conn_params_config.error_handler(err_code);
000038  4802              LDR      r0,|L10.68|
00003a  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00003c  4630              MOV      r0,r6
00003e  4788              BLX      r1
                  |L10.64|
;;;252                }
;;;253            }
000040  bf00              NOP      
                  |L10.66|
;;;254        }
;;;255    }
000042  bd70              POP      {r4-r6,pc}
;;;256    
                          ENDP

                  |L10.68|
                          DCD      m_conn_params_config
                  |L10.72|
                          DCD      m_conn_params_timer_id

                          AREA ||i.update_timeout_handler||, CODE, READONLY, ALIGN=2

                  update_timeout_handler PROC
;;;50     
;;;51     static void update_timeout_handler(void * p_context)
000000  b538              PUSH     {r3-r5,lr}
;;;52     {
000002  4605              MOV      r5,r0
;;;53         UNUSED_PARAMETER(p_context);
;;;54     
;;;55         if (m_conn_handle != BLE_CONN_HANDLE_INVALID)
000004  481e              LDR      r0,|L11.128|
000006  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000008  f64f71ff          MOV      r1,#0xffff
00000c  4288              CMP      r0,r1
00000e  d035              BEQ      |L11.124|
;;;56         {
;;;57             // Check if we have reached the maximum number of attempts
;;;58             m_update_count++;
000010  481c              LDR      r0,|L11.132|
000012  7800              LDRB     r0,[r0,#0]  ; m_update_count
000014  1c40              ADDS     r0,r0,#1
000016  491b              LDR      r1,|L11.132|
000018  7008              STRB     r0,[r1,#0]
;;;59             if (m_update_count <= m_conn_params_config.max_conn_params_update_count)
00001a  481b              LDR      r0,|L11.136|
00001c  7b00              LDRB     r0,[r0,#0xc]  ; m_conn_params_config
00001e  7809              LDRB     r1,[r1,#0]  ; m_update_count
000020  4288              CMP      r0,r1
000022  db0d              BLT      |L11.64|
;;;60             {
;;;61                 uint32_t err_code;
;;;62     
;;;63                 // Parameters are not ok, send connection parameters update request.
;;;64                 err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
000024  4919              LDR      r1,|L11.140|
000026  4816              LDR      r0,|L11.128|
000028  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00002a  df75              SVC      #0x75
00002c  4604              MOV      r4,r0
;;;65                 if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00002e  b134              CBZ      r4,|L11.62|
000030  4815              LDR      r0,|L11.136|
000032  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000034  b118              CBZ      r0,|L11.62|
;;;66                 {
;;;67                     m_conn_params_config.error_handler(err_code);
000036  4814              LDR      r0,|L11.136|
000038  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00003a  4620              MOV      r0,r4
00003c  4788              BLX      r1
                  |L11.62|
;;;68                 }
;;;69             }
00003e  e01d              B        |L11.124|
                  |L11.64|
;;;70             else
;;;71             {
;;;72                 m_update_count = 0;
000040  2000              MOVS     r0,#0
000042  4910              LDR      r1,|L11.132|
000044  7008              STRB     r0,[r1,#0]
;;;73     
;;;74                 // Negotiation failed, disconnect automatically if this has been configured
;;;75                 if (m_conn_params_config.disconnect_on_fail)
000046  4810              LDR      r0,|L11.136|
000048  7c00              LDRB     r0,[r0,#0x10]  ; m_conn_params_config
00004a  b168              CBZ      r0,|L11.104|
;;;76                 {
;;;77                     uint32_t err_code;
;;;78     
;;;79                     err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
00004c  213b              MOVS     r1,#0x3b
00004e  480c              LDR      r0,|L11.128|
000050  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000052  df76              SVC      #0x76
000054  4604              MOV      r4,r0
;;;80                     if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000056  b134              CBZ      r4,|L11.102|
000058  480b              LDR      r0,|L11.136|
00005a  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
00005c  b118              CBZ      r0,|L11.102|
;;;81                     {
;;;82                         m_conn_params_config.error_handler(err_code);
00005e  480a              LDR      r0,|L11.136|
000060  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000062  4620              MOV      r0,r4
000064  4788              BLX      r1
                  |L11.102|
;;;83                     }
;;;84                 }
000066  bf00              NOP      
                  |L11.104|
;;;85     
;;;86                 // Notify the application that the procedure has failed
;;;87                 if (m_conn_params_config.evt_handler != NULL)
000068  4807              LDR      r0,|L11.136|
00006a  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
00006c  b130              CBZ      r0,|L11.124|
;;;88                 {
;;;89                     ble_conn_params_evt_t evt;
;;;90     
;;;91                     evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
00006e  2000              MOVS     r0,#0
000070  9000              STR      r0,[sp,#0]
;;;92                     m_conn_params_config.evt_handler(&evt);
000072  4805              LDR      r0,|L11.136|
000074  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000076  4668              MOV      r0,sp
000078  4788              BLX      r1
;;;93                 }
00007a  bf00              NOP      
                  |L11.124|
;;;94             }
;;;95         }
;;;96     }
00007c  bd38              POP      {r3-r5,pc}
;;;97     
                          ENDP

00007e  0000              DCW      0x0000
                  |L11.128|
                          DCD      m_conn_handle
                  |L11.132|
                          DCD      m_update_count
                  |L11.136|
                          DCD      m_conn_params_config
                  |L11.140|
                          DCD      m_preferred_conn_params

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_conn_params_config
                          %        28
                  m_conn_params_timer_id_data
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_conn_params_timer_id
                          DCD      m_conn_params_timer_id_data

                          AREA ||.data||, DATA, ALIGN=1

                  m_preferred_conn_params
                          %        8
                  m_update_count
000008  0000              DCB      0x00,0x00
                  m_conn_handle
00000a  0000              DCB      0x00,0x00
                  m_current_conn_params
                          %        8
                  m_change_param
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_conn_params.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_ble_conn_params_c_2dcac06e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REVSH|
#line 402
|__asm___17_ble_conn_params_c_2dcac06e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____RRX|
#line 587
|__asm___17_ble_conn_params_c_2dcac06e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
