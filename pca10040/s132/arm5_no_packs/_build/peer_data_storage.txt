; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\peer_data_storage.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\peer_data_storage.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\peer_data_storage.crf ..\..\..\..\..\..\components\ble\peer_manager\peer_data_storage.c]
                          THUMB

                          AREA ||i.fds_evt_handler||, CODE, READONLY, ALIGN=2

                  fds_evt_handler PROC
;;;224    
;;;225    static void fds_evt_handler(fds_evt_t const * const p_fds_evt)
000000  b51f              PUSH     {r0-r4,lr}
;;;226    {
000002  4604              MOV      r4,r0
;;;227        pds_evt_t pds_evt;
;;;228    
;;;229        pds_evt.result = (p_fds_evt->result == FDS_SUCCESS);
000004  6860              LDR      r0,[r4,#4]
000006  b908              CBNZ     r0,|L1.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  2000              MOVS     r0,#0
                  |L1.14|
00000e  9003              STR      r0,[sp,#0xc]
;;;230    
;;;231        switch (p_fds_evt->id)
000010  7820              LDRB     r0,[r4,#0]
000012  2806              CMP      r0,#6
000014  d27b              BCS      |L1.270|
000016  e8dff000          TBB      [pc,r0]
00001a  8203              DCB      0x82,0x03
00001c  04304f7b          DCB      0x04,0x30,0x4f,0x7b
;;;232        {
;;;233            case FDS_EVT_WRITE:
;;;234            case FDS_EVT_UPDATE:
000020  bf00              NOP      
;;;235                if (   file_id_within_pm_range(p_fds_evt->write.file_id)
000022  89a0              LDRH     r0,[r4,#0xc]
000024  f7fffffe          BL       file_id_within_pm_range
000028  b918              CBNZ     r0,|L1.50|
;;;236                    || record_key_within_pm_range(p_fds_evt->write.record_key))
00002a  89e0              LDRH     r0,[r4,#0xe]
00002c  f7fffffe          BL       record_key_within_pm_range
000030  b310              CBZ      r0,|L1.120|
                  |L1.50|
;;;237                {
;;;238                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->write.file_id);
000032  89a0              LDRH     r0,[r4,#0xc]
000034  f7fffffe          BL       file_id_to_peer_id
000038  f8ad0002          STRH     r0,[sp,#2]
;;;239                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->write.record_key);
00003c  89e0              LDRH     r0,[r4,#0xe]
00003e  f7fffffe          BL       record_key_to_peer_data_id
000042  f88d0004          STRB     r0,[sp,#4]
;;;240    
;;;241                    if (p_fds_evt->id == FDS_EVT_WRITE)
000046  7820              LDRB     r0,[r4,#0]
000048  2801              CMP      r0,#1
00004a  d107              BNE      |L1.92|
;;;242                    {
;;;243                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_STORED :
00004c  6860              LDR      r0,[r4,#4]
00004e  b908              CBNZ     r0,|L1.84|
000050  2000              MOVS     r0,#0
000052  e000              B        |L1.86|
                  |L1.84|
;;;244                                                                              PDS_EVT_ERROR_STORE;
000054  2003              MOVS     r0,#3
                  |L1.86|
000056  f88d0000          STRB     r0,[sp,#0]
00005a  e006              B        |L1.106|
                  |L1.92|
;;;245                    }
;;;246                    else
;;;247                    {
;;;248                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_UPDATED :
00005c  6860              LDR      r0,[r4,#4]
00005e  b908              CBNZ     r0,|L1.100|
000060  2001              MOVS     r0,#1
000062  e000              B        |L1.102|
                  |L1.100|
;;;249                                                                              PDS_EVT_ERROR_UPDATE;
000064  2004              MOVS     r0,#4
                  |L1.102|
000066  f88d0000          STRB     r0,[sp,#0]
                  |L1.106|
;;;250                    }
;;;251    
;;;252                    pds_evt.result      = p_fds_evt->result;
00006a  6860              LDR      r0,[r4,#4]
00006c  9003              STR      r0,[sp,#0xc]
;;;253                    pds_evt.store_token = p_fds_evt->write.record_id;
00006e  68a0              LDR      r0,[r4,#8]
000070  9002              STR      r0,[sp,#8]
;;;254    
;;;255                    pds_evt_send(&pds_evt);
000072  4668              MOV      r0,sp
000074  f7fffffe          BL       pds_evt_send
                  |L1.120|
;;;256                }
;;;257                break;
000078  e052              B        |L1.288|
;;;258    
;;;259            case FDS_EVT_DEL_RECORD:
;;;260                if (   file_id_within_pm_range(p_fds_evt->del.file_id)
00007a  89a0              LDRH     r0,[r4,#0xc]
00007c  f7fffffe          BL       file_id_within_pm_range
000080  b918              CBNZ     r0,|L1.138|
;;;261                    || record_key_within_pm_range(p_fds_evt->del.record_key))
000082  89e0              LDRH     r0,[r4,#0xe]
000084  f7fffffe          BL       record_key_within_pm_range
000088  b1a8              CBZ      r0,|L1.182|
                  |L1.138|
;;;262                {
;;;263                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
00008a  89a0              LDRH     r0,[r4,#0xc]
00008c  f7fffffe          BL       file_id_to_peer_id
000090  f8ad0002          STRH     r0,[sp,#2]
;;;264                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
000094  89e0              LDRH     r0,[r4,#0xe]
000096  f7fffffe          BL       record_key_to_peer_data_id
00009a  f88d0004          STRB     r0,[sp,#4]
;;;265    
;;;266                    pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_CLEARED :
00009e  6860              LDR      r0,[r4,#4]
0000a0  b908              CBNZ     r0,|L1.166|
0000a2  2002              MOVS     r0,#2
0000a4  e000              B        |L1.168|
                  |L1.166|
;;;267                                                                          PDS_EVT_ERROR_CLEAR;
0000a6  2005              MOVS     r0,#5
                  |L1.168|
0000a8  f88d0000          STRB     r0,[sp,#0]
;;;268    
;;;269                    pds_evt.store_token = p_fds_evt->del.record_id;
0000ac  68a0              LDR      r0,[r4,#8]
0000ae  9002              STR      r0,[sp,#8]
;;;270    
;;;271                    pds_evt_send(&pds_evt);
0000b0  4668              MOV      r0,sp
0000b2  f7fffffe          BL       pds_evt_send
                  |L1.182|
;;;272                }
;;;273                break;
0000b6  e033              B        |L1.288|
;;;274    
;;;275            case FDS_EVT_DEL_FILE:
;;;276                {
;;;277                    if (    file_id_within_pm_range(p_fds_evt->del.file_id)
0000b8  89a0              LDRH     r0,[r4,#0xc]
0000ba  f7fffffe          BL       file_id_within_pm_range
0000be  b328              CBZ      r0,|L1.268|
;;;278                        && (p_fds_evt->del.record_key == FDS_RECORD_KEY_DIRTY))
0000c0  89e0              LDRH     r0,[r4,#0xe]
0000c2  bb18              CBNZ     r0,|L1.268|
;;;279                    {
;;;280                        pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
0000c4  89a0              LDRH     r0,[r4,#0xc]
0000c6  f7fffffe          BL       file_id_to_peer_id
0000ca  f8ad0002          STRH     r0,[sp,#2]
;;;281                        pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
0000ce  89e0              LDRH     r0,[r4,#0xe]
0000d0  f7fffffe          BL       record_key_to_peer_data_id
0000d4  f88d0004          STRB     r0,[sp,#4]
;;;282    
;;;283                        pds_evt.data_id = PM_PEER_DATA_ID_INVALID;
0000d8  20ff              MOVS     r0,#0xff
0000da  f88d0004          STRB     r0,[sp,#4]
;;;284                        if (p_fds_evt->result == FDS_SUCCESS)
0000de  6860              LDR      r0,[r4,#4]
0000e0  b938              CBNZ     r0,|L1.242|
;;;285                        {
;;;286                            pds_evt.evt_id = PDS_EVT_PEER_ID_CLEAR;
0000e2  2006              MOVS     r0,#6
0000e4  f88d0000          STRB     r0,[sp,#0]
;;;287                            peer_id_free(pds_evt.peer_id);
0000e8  f8bd0002          LDRH     r0,[sp,#2]
0000ec  f7fffffe          BL       peer_id_free
0000f0  e002              B        |L1.248|
                  |L1.242|
;;;288                        }
;;;289                        else
;;;290                        {
;;;291                            pds_evt.evt_id = PDS_EVT_ERROR_PEER_ID_CLEAR;
0000f2  2007              MOVS     r0,#7
0000f4  f88d0000          STRB     r0,[sp,#0]
                  |L1.248|
;;;292                        }
;;;293    
;;;294                        m_peer_delete_queued  = false;
0000f8  2000              MOVS     r0,#0
0000fa  490e              LDR      r1,|L1.308|
0000fc  7008              STRB     r0,[r1,#0]
;;;295                        m_peer_delete_ongoing = false;
0000fe  490e              LDR      r1,|L1.312|
000100  7008              STRB     r0,[r1,#0]
;;;296    
;;;297                        peer_data_delete();
000102  f7fffffe          BL       peer_data_delete
;;;298    
;;;299                        pds_evt_send(&pds_evt);
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       pds_evt_send
                  |L1.268|
;;;300                    }
;;;301                }
;;;302                break;
00010c  e008              B        |L1.288|
                  |L1.270|
00010e  e006              B        |L1.286|
;;;303    
;;;304            case FDS_EVT_GC:
;;;305                pds_evt.evt_id = PDS_EVT_COMPRESSED;
000110  2008              MOVS     r0,#8
000112  f88d0000          STRB     r0,[sp,#0]
;;;306                pds_evt_send(&pds_evt);
000116  4668              MOV      r0,sp
000118  f7fffffe          BL       pds_evt_send
;;;307                break;
00011c  e000              B        |L1.288|
                  |L1.286|
;;;308    
;;;309            default:
;;;310                break;
00011e  bf00              NOP      
                  |L1.288|
000120  bf00              NOP                            ;257
;;;311        }
;;;312    
;;;313        if (m_peer_delete_queued)
000122  4804              LDR      r0,|L1.308|
000124  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_queued
000126  b120              CBZ      r0,|L1.306|
;;;314        {
;;;315            m_peer_delete_queued  = false;
000128  2000              MOVS     r0,#0
00012a  4902              LDR      r1,|L1.308|
00012c  7008              STRB     r0,[r1,#0]
;;;316            peer_data_delete();
00012e  f7fffffe          BL       peer_data_delete
                  |L1.306|
;;;317        }
;;;318    }
000132  bd1f              POP      {r0-r4,pc}
;;;319    
                          ENDP

                  |L1.308|
                          DCD      m_peer_delete_queued
                  |L1.312|
                          DCD      m_peer_delete_ongoing

                          AREA ||i.file_id_to_peer_id||, CODE, READONLY, ALIGN=1

                  file_id_to_peer_id PROC
;;;75     // Function to convert peer data id to type id.
;;;76     static pm_peer_id_t file_id_to_peer_id(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;77     {
;;;78         return (pm_peer_id_t)(file_id + FILE_ID_TO_PEER_ID);
000002  f5a14040          SUB      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;79     }
000008  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.file_id_within_pm_range||, CODE, READONLY, ALIGN=1

                  file_id_within_pm_range PROC
;;;96     // Function for checking whether a file ID is relevant for the Peer Manager.
;;;97     static bool file_id_within_pm_range(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;98     {
;;;99         return ((PDS_FIRST_RESERVED_FILE_ID <= file_id)
000002  f5b14f40          CMP      r1,#0xc000
000006  db05              BLT      |L3.20|
;;;100             && (file_id <= PDS_LAST_RESERVED_FILE_ID));
000008  f64f70fe          MOV      r0,#0xfffe
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L3.20|
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;101    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;100
000016  e7fc              B        |L3.18|
;;;102    
                          ENDP


                          AREA ||i.pds_evt_send||, CODE, READONLY, ALIGN=2

                  pds_evt_send PROC
;;;58     // Function for dispatching events to all registered event handlers.
;;;59     static void pds_evt_send(pds_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4605              MOV      r5,r0
;;;61         for (uint32_t i = 0; i < PDS_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L4.20|
                  |L4.8|
;;;62         {
;;;63             m_evt_handlers[i](p_event);
000008  4804              LDR      r0,|L4.28|
00000a  f8501024          LDR      r1,[r0,r4,LSL #2]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;61
                  |L4.20|
000014  2c00              CMP      r4,#0                 ;61
000016  d0f7              BEQ      |L4.8|
;;;64         }
;;;65     }
000018  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      m_evt_handlers

                          AREA ||i.pds_init||, CODE, READONLY, ALIGN=2

                  pds_init PROC
;;;320    
;;;321    ret_code_t pds_init()
000000  b510              PUSH     {r4,lr}
;;;322    {
;;;323        ret_code_t ret;
;;;324    
;;;325        // Check for re-initialization if debugging.
;;;326        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;327    
;;;328        ret = fds_register(fds_evt_handler);
000002  480b              LDR      r0,|L5.48|
000004  f7fffffe          BL       fds_register
000008  4604              MOV      r4,r0
;;;329        if (ret != NRF_SUCCESS)
00000a  b10c              CBZ      r4,|L5.16|
;;;330        {
;;;331            return NRF_ERROR_INTERNAL;
00000c  2003              MOVS     r0,#3
                  |L5.14|
;;;332        }
;;;333    
;;;334        ret = fds_init();
;;;335        if (ret != NRF_SUCCESS)
;;;336        {
;;;337            return NRF_ERROR_NO_MEM;
;;;338        }
;;;339    
;;;340        peer_id_init();
;;;341        peer_ids_load();
;;;342    
;;;343        m_module_initialized = true;
;;;344    
;;;345        return NRF_SUCCESS;
;;;346    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  f7fffffe          BL       fds_init
000014  4604              MOV      r4,r0                 ;334
000016  b10c              CBZ      r4,|L5.28|
000018  2004              MOVS     r0,#4                 ;337
00001a  e7f8              B        |L5.14|
                  |L5.28|
00001c  f7fffffe          BL       peer_id_init
000020  f7fffffe          BL       peer_ids_load
000024  2001              MOVS     r0,#1                 ;343
000026  4903              LDR      r1,|L5.52|
000028  7008              STRB     r0,[r1,#0]            ;343
00002a  2000              MOVS     r0,#0                 ;345
00002c  e7ef              B        |L5.14|
;;;347    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      fds_evt_handler
                  |L5.52|
                          DCD      m_module_initialized

                          AREA ||i.pds_next_deleted_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_deleted_peer_id_get PROC
;;;653    
;;;654    pm_peer_id_t pds_next_deleted_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;655    {
000002  4604              MOV      r4,r0
;;;656        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;657        return peer_id_get_next_deleted(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_deleted
;;;658    }
00000a  bd10              POP      {r4,pc}
;;;659    
                          ENDP


                          AREA ||i.pds_next_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_peer_id_get PROC
;;;646    
;;;647    pm_peer_id_t pds_next_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;648    {
000002  4604              MOV      r4,r0
;;;649        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;650        return peer_id_get_next_used(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_used
;;;651    }
00000a  bd10              POP      {r4,pc}
;;;652    
                          ENDP


                          AREA ||i.pds_peer_count_get||, CODE, READONLY, ALIGN=1

                  pds_peer_count_get PROC
;;;660    
;;;661    uint32_t pds_peer_count_get(void)
000000  b510              PUSH     {r4,lr}
;;;662    {
;;;663        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;664        return peer_id_n_ids();
000002  f7fffffe          BL       peer_id_n_ids
;;;665    }
000006  bd10              POP      {r4,pc}
;;;666    #endif //PEER_MANAGER_ENABLED
                          ENDP


                          AREA ||i.pds_peer_data_delete||, CODE, READONLY, ALIGN=1

                  pds_peer_data_delete PROC
;;;587    // @note emdi: unused..
;;;588    ret_code_t pds_peer_data_delete(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b5fe              PUSH     {r1-r7,lr}
;;;589    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;590        ret_code_t        ret;
;;;591        fds_record_desc_t record_desc;
;;;592    
;;;593        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;594    
;;;595        VERIFY_PEER_ID_IN_RANGE(peer_id);
000006  bf00              NOP      
000008  2dff              CMP      r5,#0xff
00000a  dd01              BLE      |L9.16|
00000c  2007              MOVS     r0,#7
                  |L9.14|
;;;596        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;597    
;;;598        ret = peer_data_find(peer_id, data_id, &record_desc);
;;;599    
;;;600        if (ret != NRF_SUCCESS)
;;;601        {
;;;602            return NRF_ERROR_NOT_FOUND;
;;;603        }
;;;604    
;;;605        ret = fds_record_delete(&record_desc);
;;;606    
;;;607        switch (ret)
;;;608        {
;;;609            case FDS_SUCCESS:
;;;610                return NRF_SUCCESS;
;;;611    
;;;612            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;613                return NRF_ERROR_BUSY;
;;;614    
;;;615            default:
;;;616                return NRF_ERROR_INTERNAL;
;;;617        }
;;;618    }
00000e  bdfe              POP      {r1-r7,pc}
                  |L9.16|
000010  bf00              NOP                            ;595
000012  bf00              NOP                            ;596
000014  4630              MOV      r0,r6                 ;596
000016  f7fffffe          BL       peer_data_id_is_valid
00001a  b908              CBNZ     r0,|L9.32|
00001c  2007              MOVS     r0,#7                 ;596
00001e  e7f6              B        |L9.14|
                  |L9.32|
000020  bf00              NOP                            ;596
000022  466a              MOV      r2,sp                 ;598
000024  4631              MOV      r1,r6                 ;598
000026  4628              MOV      r0,r5                 ;598
000028  f7fffffe          BL       peer_data_find
00002c  4604              MOV      r4,r0                 ;598
00002e  b10c              CBZ      r4,|L9.52|
000030  2005              MOVS     r0,#5                 ;602
000032  e7ec              B        |L9.14|
                  |L9.52|
000034  4668              MOV      r0,sp                 ;605
000036  f7fffffe          BL       fds_record_delete
00003a  4604              MOV      r4,r0                 ;605
00003c  b114              CBZ      r4,|L9.68|
00003e  2c08              CMP      r4,#8                 ;607
000040  d104              BNE      |L9.76|
000042  e001              B        |L9.72|
                  |L9.68|
000044  2000              MOVS     r0,#0                 ;610
000046  e7e2              B        |L9.14|
                  |L9.72|
000048  2011              MOVS     r0,#0x11              ;613
00004a  e7e0              B        |L9.14|
                  |L9.76|
00004c  2003              MOVS     r0,#3                 ;616
00004e  e7de              B        |L9.14|
;;;619    
                          ENDP


                          AREA ||i.pds_peer_data_iterate||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate PROC
;;;419    
;;;420    bool pds_peer_data_iterate(pm_peer_data_id_t            data_id,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;421                               pm_peer_id_t         * const p_peer_id,
;;;422                               pm_peer_data_flash_t * const p_data)
;;;423    {
000004  b086              SUB      sp,sp,#0x18
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
;;;424        ret_code_t         ret;
;;;425        uint16_t           rec_key;
;;;426        fds_record_desc_t  rec_desc;
;;;427        fds_flash_record_t rec_flash;
;;;428    
;;;429        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;430        NRF_PM_DEBUG_CHECK(p_peer_id != NULL);
;;;431        NRF_PM_DEBUG_CHECK(p_data    != NULL);
;;;432    
;;;433        // @note emdi: should we check the data_id ?
;;;434        rec_key = peer_data_id_to_record_key(data_id);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       peer_data_id_to_record_key
000012  4680              MOV      r8,r0
;;;435    
;;;436        if (fds_record_find_by_key(rec_key, &rec_desc, &m_fds_ftok) != NRF_SUCCESS)
000014  4a10              LDR      r2,|L10.88|
000016  a903              ADD      r1,sp,#0xc
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       fds_record_find_by_key
00001e  b118              CBZ      r0,|L10.40|
;;;437        {
;;;438            return false;
000020  2000              MOVS     r0,#0
                  |L10.34|
;;;439        }
;;;440    
;;;441        ret = fds_record_open(&rec_desc, &rec_flash);
;;;442    
;;;443        if (ret != NRF_SUCCESS)
;;;444        {
;;;445            // It can only happen if the record was deleted after the call to fds_record_find_by_key(),
;;;446            // before we could open it, or if CRC support was enabled in Flash Data Storage at compile
;;;447            // time and the CRC check failed.
;;;448            return false;
;;;449        }
;;;450    
;;;451        p_data->data_id      = data_id;
;;;452        p_data->length_words = rec_flash.p_header->tl.length_words;
;;;453        p_data->p_all_data   = rec_flash.p_data;
;;;454    
;;;455        *p_peer_id           = file_id_to_peer_id(rec_flash.p_header->ic.file_id);
;;;456    
;;;457        (void)fds_record_close(&rec_desc);
;;;458    
;;;459        return true;
;;;460    }
000022  b006              ADD      sp,sp,#0x18
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L10.40|
000028  a901              ADD      r1,sp,#4              ;441
00002a  a803              ADD      r0,sp,#0xc            ;441
00002c  f7fffffe          BL       fds_record_open
000030  4605              MOV      r5,r0                 ;441
000032  b10d              CBZ      r5,|L10.56|
000034  2000              MOVS     r0,#0                 ;448
000036  e7f4              B        |L10.34|
                  |L10.56|
000038  70a6              STRB     r6,[r4,#2]            ;451
00003a  9801              LDR      r0,[sp,#4]            ;452
00003c  8840              LDRH     r0,[r0,#2]            ;452
00003e  8020              STRH     r0,[r4,#0]            ;452
000040  9802              LDR      r0,[sp,#8]            ;453
000042  6060              STR      r0,[r4,#4]            ;453
000044  9901              LDR      r1,[sp,#4]            ;455
000046  8888              LDRH     r0,[r1,#4]            ;455
000048  f7fffffe          BL       file_id_to_peer_id
00004c  8038              STRH     r0,[r7,#0]            ;455
00004e  a803              ADD      r0,sp,#0xc            ;457
000050  f7fffffe          BL       fds_record_close
000054  2001              MOVS     r0,#1                 ;459
000056  e7e4              B        |L10.34|
;;;461    
                          ENDP

                  |L10.88|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_iterate_prepare||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate_prepare PROC
;;;413    
;;;414    void pds_peer_data_iterate_prepare(void)
000000  4802              LDR      r0,|L11.12|
;;;415    {
;;;416        memset(&m_fds_ftok, 0x00, sizeof(fds_find_token_t));
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; m_fds_ftok
000006  6041              STR      r1,[r0,#4]  ; m_fds_ftok
;;;417    }
000008  4770              BX       lr
;;;418    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_read||, CODE, READONLY, ALIGN=1

                  pds_peer_data_read PROC
;;;348    
;;;349    ret_code_t pds_peer_data_read(pm_peer_id_t                    peer_id,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;350                                  pm_peer_data_id_t               data_id,
;;;351                                  pm_peer_data_t          * const p_data,
;;;352                                  uint32_t          const * const p_buf_len)
;;;353    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
;;;354        ret_code_t         ret;
;;;355        fds_record_desc_t  rec_desc;
;;;356        fds_flash_record_t rec_flash;
;;;357    
;;;358        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;359        NRF_PM_DEBUG_CHECK(p_data != NULL);
;;;360    
;;;361        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000e  bf00              NOP      
000010  f1b80fff          CMP      r8,#0xff
000014  dd03              BLE      |L12.30|
000016  2007              MOVS     r0,#7
                  |L12.24|
;;;362        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;363    
;;;364        ret = peer_data_find(peer_id, data_id, &rec_desc);
;;;365    
;;;366        if (ret != NRF_SUCCESS)
;;;367        {
;;;368            return NRF_ERROR_NOT_FOUND;
;;;369        }
;;;370    
;;;371        // Shouldn't fail, unless the record was deleted in the meanwhile or the CRC check has failed.
;;;372        ret = fds_record_open(&rec_desc, &rec_flash);
;;;373    
;;;374        if (ret != NRF_SUCCESS)
;;;375        {
;;;376            return NRF_ERROR_NOT_FOUND;
;;;377        }
;;;378    
;;;379        // @note emdi: could this actually be set by the caller and used instead
;;;380        // of an additional parameter (data_id) ?
;;;381        p_data->data_id      = data_id;
;;;382        p_data->length_words = rec_flash.p_header->tl.length_words;
;;;383    
;;;384        // If p_buf_len is NULL, provide a pointer to data in flash, otherwise,
;;;385        // check that the buffer is large enough and copy the data in flash into the buffer.
;;;386        if (p_buf_len != NULL)
;;;387        {
;;;388            uint32_t const data_len_bytes = (p_data->length_words * sizeof(uint32_t));
;;;389    
;;;390            if ((*p_buf_len) <= data_len_bytes)
;;;391            {
;;;392                memcpy(p_data->p_all_data, rec_flash.p_data, data_len_bytes);
;;;393            }
;;;394            else
;;;395            {
;;;396                return NRF_ERROR_NO_MEM;
;;;397            }
;;;398        }
;;;399        else
;;;400        {
;;;401            // The cast is necessary because if no buffer is provided, we just copy the pointer,
;;;402            // but it that case it should be considered a pointer to const data by the caller,
;;;403            // since it is a pointer to data in flash.
;;;404            p_data->p_all_data = (void*)rec_flash.p_data;
;;;405        }
;;;406    
;;;407        // Shouldn't fail unless the record was already closed, in which case it can be ignored.
;;;408        (void)fds_record_close(&rec_desc);
;;;409    
;;;410        return NRF_SUCCESS;
;;;411    }
000018  b005              ADD      sp,sp,#0x14
00001a  e8bd83f0          POP      {r4-r9,pc}
                  |L12.30|
00001e  bf00              NOP                            ;361
000020  bf00              NOP                            ;362
000022  4630              MOV      r0,r6                 ;362
000024  f7fffffe          BL       peer_data_id_is_valid
000028  b908              CBNZ     r0,|L12.46|
00002a  2007              MOVS     r0,#7                 ;362
00002c  e7f4              B        |L12.24|
                  |L12.46|
00002e  bf00              NOP                            ;362
000030  aa02              ADD      r2,sp,#8              ;364
000032  4631              MOV      r1,r6                 ;364
000034  4640              MOV      r0,r8                 ;364
000036  f7fffffe          BL       peer_data_find
00003a  4605              MOV      r5,r0                 ;364
00003c  b10d              CBZ      r5,|L12.66|
00003e  2005              MOVS     r0,#5                 ;368
000040  e7ea              B        |L12.24|
                  |L12.66|
000042  4669              MOV      r1,sp                 ;372
000044  a802              ADD      r0,sp,#8              ;372
000046  f7fffffe          BL       fds_record_open
00004a  4605              MOV      r5,r0                 ;372
00004c  b10d              CBZ      r5,|L12.82|
00004e  2005              MOVS     r0,#5                 ;376
000050  e7e2              B        |L12.24|
                  |L12.82|
000052  70a6              STRB     r6,[r4,#2]            ;381
000054  9800              LDR      r0,[sp,#0]            ;382
000056  8840              LDRH     r0,[r0,#2]            ;382
000058  8020              STRH     r0,[r4,#0]            ;382
00005a  b177              CBZ      r7,|L12.122|
00005c  8820              LDRH     r0,[r4,#0]            ;388
00005e  ea4f0980          LSL      r9,r0,#2              ;388
000062  6838              LDR      r0,[r7,#0]            ;390
000064  4548              CMP      r0,r9                 ;390
000066  d805              BHI      |L12.116|
000068  9901              LDR      r1,[sp,#4]            ;392
00006a  464a              MOV      r2,r9                 ;392
00006c  6860              LDR      r0,[r4,#4]            ;392
00006e  f7fffffe          BL       __aeabi_memcpy
000072  e001              B        |L12.120|
                  |L12.116|
000074  2004              MOVS     r0,#4                 ;396
000076  e7cf              B        |L12.24|
                  |L12.120|
000078  e001              B        |L12.126|
                  |L12.122|
00007a  9801              LDR      r0,[sp,#4]            ;404
00007c  6060              STR      r0,[r4,#4]            ;404
                  |L12.126|
00007e  a802              ADD      r0,sp,#8              ;408
000080  f7fffffe          BL       fds_record_close
000084  2000              MOVS     r0,#0                 ;410
000086  e7c7              B        |L12.24|
;;;412    
                          ENDP


                          AREA ||i.pds_peer_data_store||, CODE, READONLY, ALIGN=1

                  pds_peer_data_store PROC
;;;510    
;;;511    ret_code_t pds_peer_data_store(pm_peer_id_t                 peer_id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;512                                   pm_peer_data_const_t const * p_peer_data,
;;;513                                   pm_prepare_token_t           prepare_token,
;;;514                                   pm_store_token_t           * p_store_token)
;;;515    {
000002  b089              SUB      sp,sp,#0x24
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  461e              MOV      r6,r3
;;;516        ret_code_t         ret;
;;;517        fds_record_t       rec;
;;;518        fds_record_desc_t  rec_desc;
;;;519        fds_record_chunk_t rec_chunk;
;;;520    
;;;521        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;522        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;523    
;;;524        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000a  bf00              NOP      
00000c  2fff              CMP      r7,#0xff
00000e  dd02              BLE      |L13.22|
000010  2007              MOVS     r0,#7
                  |L13.18|
;;;525        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
;;;526    
;;;527        // Prepare chunk.
;;;528        rec_chunk.p_data       = p_peer_data->p_all_data;
;;;529        rec_chunk.length_words = p_peer_data->length_words;
;;;530    
;;;531        // Prepare the record to be stored in flash.
;;;532        rec.file_id         = peer_id_to_file_id(peer_id);
;;;533        rec.key             = peer_data_id_to_record_key(p_peer_data->data_id);
;;;534        rec.data.p_chunks   = &rec_chunk;
;;;535        rec.data.num_chunks = 1;
;;;536    
;;;537        ret = peer_data_find(peer_id, p_peer_data->data_id, &rec_desc);
;;;538    
;;;539        if (ret == NRF_ERROR_NOT_FOUND)
;;;540        {
;;;541            // No previous data exists in flash.
;;;542            if (prepare_token == PDS_PREPARE_TOKEN_INVALID)
;;;543            {
;;;544                // No space was previously reserved.
;;;545                ret = fds_record_write(&rec_desc, &rec);
;;;546            }
;;;547            else
;;;548            {
;;;549                // Space for this record was previously reserved.
;;;550                ret = fds_record_write_reserved(&rec_desc, &rec, (fds_reserve_token_t*)&prepare_token);
;;;551            }
;;;552        }
;;;553        else // NRF_SUCCESS
;;;554        {
;;;555            // Token shouldn't be zero at this point.
;;;556            // NRF_PM_DEBUG_CHECK(prepare_token != PDS_PREPARE_TOKEN_INVALID);
;;;557    
;;;558            (void)fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
;;;559    
;;;560            // Update existing record.
;;;561            ret = fds_record_update(&rec_desc, &rec);
;;;562        }
;;;563    
;;;564        switch (ret)
;;;565        {
;;;566            case FDS_SUCCESS:
;;;567                if (p_store_token != NULL)
;;;568                {
;;;569                    // Update the store token.
;;;570                    (void)fds_record_id_from_desc(&rec_desc, (uint32_t*)p_store_token);
;;;571                }
;;;572                return NRF_SUCCESS;
;;;573    
;;;574            case FDS_ERR_BUSY:
;;;575            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;576                return NRF_ERROR_BUSY;
;;;577    
;;;578            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;579                return NRF_ERROR_NO_MEM;
;;;580    
;;;581            default:
;;;582                return NRF_ERROR_INTERNAL;
;;;583        }
;;;584    }
000012  b00d              ADD      sp,sp,#0x34
000014  bdf0              POP      {r4-r7,pc}
                  |L13.22|
000016  bf00              NOP                            ;524
000018  bf00              NOP                            ;525
00001a  78a0              LDRB     r0,[r4,#2]            ;525
00001c  f7fffffe          BL       peer_data_id_is_valid
000020  b908              CBNZ     r0,|L13.38|
000022  2007              MOVS     r0,#7                 ;525
000024  e7f5              B        |L13.18|
                  |L13.38|
000026  bf00              NOP                            ;525
000028  6860              LDR      r0,[r4,#4]            ;528
00002a  9001              STR      r0,[sp,#4]            ;528
00002c  8820              LDRH     r0,[r4,#0]            ;529
00002e  f8ad0008          STRH     r0,[sp,#8]            ;529
000032  4638              MOV      r0,r7                 ;532
000034  f7fffffe          BL       peer_id_to_file_id
000038  f8ad0018          STRH     r0,[sp,#0x18]         ;532
00003c  78a0              LDRB     r0,[r4,#2]            ;533
00003e  f7fffffe          BL       peer_data_id_to_record_key
000042  f8ad001a          STRH     r0,[sp,#0x1a]         ;533
000046  a801              ADD      r0,sp,#4              ;534
000048  9007              STR      r0,[sp,#0x1c]         ;534
00004a  2101              MOVS     r1,#1                 ;535
00004c  f8ad1020          STRH     r1,[sp,#0x20]         ;535
000050  78a1              LDRB     r1,[r4,#2]            ;537
000052  aa03              ADD      r2,sp,#0xc            ;537
000054  4638              MOV      r0,r7                 ;537
000056  f7fffffe          BL       peer_data_find
00005a  4605              MOV      r5,r0                 ;537
00005c  2d05              CMP      r5,#5                 ;539
00005e  d10e              BNE      |L13.126|
000060  980b              LDR      r0,[sp,#0x2c]         ;542
000062  b928              CBNZ     r0,|L13.112|
000064  a906              ADD      r1,sp,#0x18           ;545
000066  a803              ADD      r0,sp,#0xc            ;545
000068  f7fffffe          BL       fds_record_write
00006c  4605              MOV      r5,r0                 ;545
00006e  e00e              B        |L13.142|
                  |L13.112|
000070  aa0b              ADD      r2,sp,#0x2c           ;550
000072  a906              ADD      r1,sp,#0x18           ;550
000074  a803              ADD      r0,sp,#0xc            ;550
000076  f7fffffe          BL       fds_record_write_reserved
00007a  4605              MOV      r5,r0                 ;550
00007c  e007              B        |L13.142|
                  |L13.126|
00007e  a80b              ADD      r0,sp,#0x2c           ;558
000080  f7fffffe          BL       fds_reserve_cancel
000084  a906              ADD      r1,sp,#0x18           ;561
000086  a803              ADD      r0,sp,#0xc            ;561
000088  f7fffffe          BL       fds_record_update
00008c  4605              MOV      r5,r0                 ;561
                  |L13.142|
00008e  b135              CBZ      r5,|L13.158|
000090  2d07              CMP      r5,#7                 ;564
000092  d00e              BEQ      |L13.178|
000094  2d08              CMP      r5,#8                 ;564
000096  d00a              BEQ      |L13.174|
000098  2d0e              CMP      r5,#0xe               ;564
00009a  d10c              BNE      |L13.182|
00009c  e006              B        |L13.172|
                  |L13.158|
00009e  b11e              CBZ      r6,|L13.168|
0000a0  4631              MOV      r1,r6                 ;570
0000a2  a803              ADD      r0,sp,#0xc            ;570
0000a4  f7fffffe          BL       fds_record_id_from_desc
                  |L13.168|
0000a8  2000              MOVS     r0,#0                 ;572
0000aa  e7b2              B        |L13.18|
                  |L13.172|
0000ac  bf00              NOP                            ;575
                  |L13.174|
0000ae  2011              MOVS     r0,#0x11              ;576
0000b0  e7af              B        |L13.18|
                  |L13.178|
0000b2  2004              MOVS     r0,#4                 ;579
0000b4  e7ad              B        |L13.18|
                  |L13.182|
0000b6  2003              MOVS     r0,#3                 ;582
0000b8  e7ab              B        |L13.18|
;;;585    
                          ENDP


                          AREA ||i.pds_peer_id_allocate||, CODE, READONLY, ALIGN=1

                  pds_peer_id_allocate PROC
;;;620    
;;;621    pm_peer_id_t pds_peer_id_allocate(void)
000000  b510              PUSH     {r4,lr}
;;;622    {
;;;623        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;624        return peer_id_allocate(PM_PEER_ID_INVALID);
000002  f64f70ff          MOV      r0,#0xffff
000006  f7fffffe          BL       peer_id_allocate
;;;625    }
00000a  bd10              POP      {r4,pc}
;;;626    
                          ENDP


                          AREA ||i.pds_peer_id_free||, CODE, READONLY, ALIGN=1

                  pds_peer_id_free PROC
;;;627    
;;;628    ret_code_t pds_peer_id_free(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;629    {
000002  4604              MOV      r4,r0
;;;630        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;631        VERIFY_PEER_ID_IN_RANGE(peer_id);
000004  bf00              NOP      
000006  2cff              CMP      r4,#0xff
000008  dd01              BLE      |L15.14|
00000a  2007              MOVS     r0,#7
                  |L15.12|
;;;632    
;;;633        (void)peer_id_delete(peer_id);
;;;634        peer_data_delete();
;;;635    
;;;636        return NRF_SUCCESS;
;;;637    }
00000c  bd10              POP      {r4,pc}
                  |L15.14|
00000e  bf00              NOP                            ;631
000010  4620              MOV      r0,r4                 ;633
000012  f7fffffe          BL       peer_id_delete
000016  f7fffffe          BL       peer_data_delete
00001a  2000              MOVS     r0,#0                 ;636
00001c  e7f6              B        |L15.12|
;;;638    
                          ENDP


                          AREA ||i.pds_peer_id_is_allocated||, CODE, READONLY, ALIGN=1

                  pds_peer_id_is_allocated PROC
;;;639    
;;;640    bool pds_peer_id_is_allocated(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;641    {
000002  4604              MOV      r4,r0
;;;642        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;643        return peer_id_is_allocated(peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_is_allocated
;;;644    }
00000a  bd10              POP      {r4,pc}
;;;645    
                          ENDP


                          AREA ||i.pds_space_reserve||, CODE, READONLY, ALIGN=1

                  pds_space_reserve PROC
;;;462    
;;;463    ret_code_t pds_space_reserve(pm_peer_data_const_t const * p_peer_data,
000000  b570              PUSH     {r4-r6,lr}
;;;464                                 pm_prepare_token_t         * p_prepare_token)
;;;465    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;466        ret_code_t ret;
;;;467    
;;;468        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;469        NRF_PM_DEBUG_CHECK(p_peer_data     != NULL);
;;;470        NRF_PM_DEBUG_CHECK(p_prepare_token != NULL);
;;;471    
;;;472        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
000006  bf00              NOP      
000008  78a0              LDRB     r0,[r4,#2]
00000a  f7fffffe          BL       peer_data_id_is_valid
00000e  b908              CBNZ     r0,|L17.20|
000010  2007              MOVS     r0,#7
                  |L17.18|
;;;473    
;;;474        ret = fds_reserve((fds_reserve_token_t*)p_prepare_token, p_peer_data->length_words);
;;;475    
;;;476        switch (ret)
;;;477        {
;;;478            case FDS_SUCCESS:
;;;479                return NRF_SUCCESS;
;;;480    
;;;481            case FDS_ERR_RECORD_TOO_LARGE:
;;;482                return NRF_ERROR_INVALID_LENGTH;
;;;483    
;;;484            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;485                return NRF_ERROR_NO_MEM;
;;;486    
;;;487            default:
;;;488                return NRF_ERROR_INTERNAL;
;;;489        }
;;;490    }
000012  bd70              POP      {r4-r6,pc}
                  |L17.20|
000014  bf00              NOP                            ;472
000016  8821              LDRH     r1,[r4,#0]            ;474
000018  4630              MOV      r0,r6                 ;474
00001a  f7fffffe          BL       fds_reserve
00001e  4605              MOV      r5,r0                 ;474
000020  b125              CBZ      r5,|L17.44|
000022  2d07              CMP      r5,#7                 ;476
000024  d006              BEQ      |L17.52|
000026  2d09              CMP      r5,#9                 ;476
000028  d106              BNE      |L17.56|
00002a  e001              B        |L17.48|
                  |L17.44|
00002c  2000              MOVS     r0,#0                 ;479
00002e  e7f0              B        |L17.18|
                  |L17.48|
000030  2009              MOVS     r0,#9                 ;482
000032  e7ee              B        |L17.18|
                  |L17.52|
000034  2004              MOVS     r0,#4                 ;485
000036  e7ec              B        |L17.18|
                  |L17.56|
000038  2003              MOVS     r0,#3                 ;488
00003a  e7ea              B        |L17.18|
;;;491    
                          ENDP


                          AREA ||i.pds_space_reserve_cancel||, CODE, READONLY, ALIGN=1

                  pds_space_reserve_cancel PROC
;;;492    
;;;493    ret_code_t pds_space_reserve_cancel(pm_prepare_token_t prepare_token)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;494    {
;;;495        ret_code_t ret;
;;;496    
;;;497        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;498        NRF_PM_DEBUG_CHECK(prepare_token != PDS_PREPARE_TOKEN_INVALID);
;;;499    
;;;500        ret = fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       fds_reserve_cancel
000008  4604              MOV      r4,r0
;;;501    
;;;502        if (ret != FDS_SUCCESS)
00000a  b10c              CBZ      r4,|L18.16|
;;;503        {
;;;504            return NRF_ERROR_INTERNAL;
00000c  2003              MOVS     r0,#3
                  |L18.14|
;;;505        }
;;;506    
;;;507        return NRF_SUCCESS;
;;;508    }
00000e  bd38              POP      {r3-r5,pc}
                  |L18.16|
000010  2000              MOVS     r0,#0                 ;507
000012  e7fc              B        |L18.14|
;;;509    
                          ENDP


                          AREA ||i.peer_data_delete||, CODE, READONLY, ALIGN=2

                  peer_data_delete PROC
;;;124    // These operations will be sent to FDS one at a time.
;;;125    static void peer_data_delete()
000000  b5f0              PUSH     {r4-r7,lr}
;;;126    {
000002  b089              SUB      sp,sp,#0x24
;;;127        ret_code_t        ret;
;;;128        pm_peer_id_t      peer_id;
;;;129        uint16_t          file_id;
;;;130        fds_record_desc_t desc;
;;;131        fds_find_token_t  ftok;
;;;132    
;;;133        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9004              STR      r0,[sp,#0x10]
000008  9005              STR      r0,[sp,#0x14]
;;;134        peer_id = peer_id_get_next_deleted(PM_PEER_ID_INVALID);
00000a  f64f70ff          MOV      r0,#0xffff
00000e  f7fffffe          BL       peer_id_get_next_deleted
000012  4605              MOV      r5,r0
;;;135    
;;;136        while (    (peer_id != PM_PEER_ID_INVALID)
000014  e006              B        |L19.36|
                  |L19.22|
;;;137                && (fds_record_find_in_file(peer_id_to_file_id(peer_id), &desc, &ftok)
;;;138                == FDS_ERR_NOT_FOUND))
;;;139        {
;;;140            peer_id_free(peer_id);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       peer_id_free
;;;141            peer_id = peer_id_get_next_deleted(peer_id);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       peer_id_get_next_deleted
000022  4605              MOV      r5,r0
                  |L19.36|
000024  f64f70ff          MOV      r0,#0xffff            ;136
000028  4285              CMP      r5,r0                 ;136
00002a  d009              BEQ      |L19.64|
00002c  4628              MOV      r0,r5                 ;137
00002e  f7fffffe          BL       peer_id_to_file_id
000032  4607              MOV      r7,r0                 ;137
000034  aa04              ADD      r2,sp,#0x10           ;137
000036  a906              ADD      r1,sp,#0x18           ;137
000038  f7fffffe          BL       fds_record_find_in_file
00003c  280a              CMP      r0,#0xa               ;137
00003e  d0ea              BEQ      |L19.22|
                  |L19.64|
;;;142        }
;;;143    
;;;144        if (!m_peer_delete_ongoing && (peer_id != PM_PEER_ID_INVALID))
000040  4816              LDR      r0,|L19.156|
000042  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_ongoing
000044  bb38              CBNZ     r0,|L19.150|
000046  f64f70ff          MOV      r0,#0xffff
00004a  4285              CMP      r5,r0
00004c  d023              BEQ      |L19.150|
;;;145        {
;;;146            m_peer_delete_ongoing = true;
00004e  2001              MOVS     r0,#1
000050  4912              LDR      r1,|L19.156|
000052  7008              STRB     r0,[r1,#0]
;;;147    
;;;148            file_id = peer_id_to_file_id(peer_id);
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       peer_id_to_file_id
00005a  4606              MOV      r6,r0
;;;149            ret     = fds_file_delete(file_id);
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       fds_file_delete
000062  4604              MOV      r4,r0
;;;150    
;;;151            if (ret == FDS_ERR_NO_SPACE_IN_QUEUES)
000064  2c08              CMP      r4,#8
000066  d103              BNE      |L19.112|
;;;152            {
;;;153                m_peer_delete_queued = true;
000068  2001              MOVS     r0,#1
00006a  490d              LDR      r1,|L19.160|
00006c  7008              STRB     r0,[r1,#0]
00006e  e012              B        |L19.150|
                  |L19.112|
;;;154            }
;;;155            else if (ret != NRF_SUCCESS)
000070  b18c              CBZ      r4,|L19.150|
;;;156            {
;;;157                m_peer_delete_ongoing = false;
000072  2000              MOVS     r0,#0
000074  4909              LDR      r1,|L19.156|
000076  7008              STRB     r0,[r1,#0]
;;;158    
;;;159                pds_evt_t pds_evt;
;;;160    
;;;161                pds_evt.evt_id      = PDS_EVT_ERROR_UNEXPECTED;
000078  2009              MOVS     r0,#9
00007a  f88d0000          STRB     r0,[sp,#0]
;;;162                pds_evt.peer_id     = peer_id;
00007e  f8ad5002          STRH     r5,[sp,#2]
;;;163                pds_evt.data_id     = PM_PEER_DATA_ID_INVALID;
000082  20ff              MOVS     r0,#0xff
000084  f88d0004          STRB     r0,[sp,#4]
;;;164                pds_evt.store_token = PM_STORE_TOKEN_INVALID;
000088  2000              MOVS     r0,#0
00008a  9002              STR      r0,[sp,#8]
;;;165                pds_evt.result      = ret;
00008c  9403              STR      r4,[sp,#0xc]
;;;166    
;;;167                pds_evt_send(&pds_evt);
00008e  4668              MOV      r0,sp
000090  f7fffffe          BL       pds_evt_send
;;;168            }
000094  bf00              NOP      
                  |L19.150|
;;;169        }
;;;170    }
000096  b009              ADD      sp,sp,#0x24
000098  bdf0              POP      {r4-r7,pc}
;;;171    
                          ENDP

00009a  0000              DCW      0x0000
                  |L19.156|
                          DCD      m_peer_delete_ongoing
                  |L19.160|
                          DCD      m_peer_delete_queued

                          AREA ||i.peer_data_find||, CODE, READONLY, ALIGN=1

                  peer_data_find PROC
;;;172    
;;;173    static ret_code_t peer_data_find(pm_peer_id_t              peer_id,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;174                                     pm_peer_data_id_t         data_id,
;;;175                                     fds_record_desc_t * const p_desc)
;;;176    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;177        ret_code_t       ret;
;;;178        fds_find_token_t ftok;
;;;179    
;;;180        NRF_PM_DEBUG_CHECK(peer_id < PM_PEER_ID_N_AVAILABLE_IDS);
;;;181        NRF_PM_DEBUG_CHECK(peer_data_id_is_valid(data_id));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       peer_data_id_is_valid
;;;182        NRF_PM_DEBUG_CHECK(p_desc != NULL);
;;;183    
;;;184        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
000014  9001              STR      r0,[sp,#4]
;;;185    
;;;186        uint16_t file_id    = peer_id_to_file_id(peer_id);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       peer_id_to_file_id
00001c  4680              MOV      r8,r0
;;;187        uint16_t record_key = peer_data_id_to_record_key(data_id);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       peer_data_id_to_record_key
000024  4681              MOV      r9,r0
;;;188    
;;;189        ret = fds_record_find(file_id, record_key, p_desc, &ftok);
000026  466b              MOV      r3,sp
000028  4632              MOV      r2,r6
00002a  4649              MOV      r1,r9
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       fds_record_find
000032  4607              MOV      r7,r0
;;;190    
;;;191        if (ret != FDS_SUCCESS)
000034  b117              CBZ      r7,|L20.60|
;;;192        {
;;;193            return NRF_ERROR_NOT_FOUND;
000036  2005              MOVS     r0,#5
                  |L20.56|
;;;194        }
;;;195    
;;;196        return NRF_SUCCESS;
;;;197    }
000038  e8bd87fc          POP      {r2-r10,pc}
                  |L20.60|
00003c  2000              MOVS     r0,#0                 ;196
00003e  e7fb              B        |L20.56|
;;;198    
                          ENDP


                          AREA ||i.peer_data_id_is_valid||, CODE, READONLY, ALIGN=1

                  peer_data_id_is_valid PROC
;;;111    
;;;112    static bool peer_data_id_is_valid(pm_peer_data_id_t data_id)
000000  4601              MOV      r1,r0
;;;113    {
;;;114        return ((data_id == PM_PEER_DATA_ID_BONDING)                 ||
000002  2907              CMP      r1,#7
000004  d009              BEQ      |L21.26|
;;;115                (data_id == PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING) ||
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L21.26|
;;;116                (data_id == PM_PEER_DATA_ID_GATT_LOCAL)              ||
00000a  2908              CMP      r1,#8
00000c  d005              BEQ      |L21.26|
;;;117                (data_id == PM_PEER_DATA_ID_GATT_REMOTE)             ||
00000e  2905              CMP      r1,#5
000010  d003              BEQ      |L21.26|
;;;118                (data_id == PM_PEER_DATA_ID_PEER_RANK)               ||
000012  2906              CMP      r1,#6
000014  d001              BEQ      |L21.26|
;;;119                (data_id == PM_PEER_DATA_ID_APPLICATION));
000016  2904              CMP      r1,#4
000018  d101              BNE      |L21.30|
                  |L21.26|
00001a  2001              MOVS     r0,#1
                  |L21.28|
;;;120    }
00001c  4770              BX       lr
                  |L21.30|
00001e  2000              MOVS     r0,#0                 ;119
000020  e7fc              B        |L21.28|
;;;121    
                          ENDP


                          AREA ||i.peer_data_id_to_record_key||, CODE, READONLY, ALIGN=1

                  peer_data_id_to_record_key PROC
;;;82     // Function to convert peer data IDs to record keys.
;;;83     static uint16_t peer_data_id_to_record_key(pm_peer_data_id_t peer_data_id)
000000  4601              MOV      r1,r0
;;;84     {
;;;85         return (uint16_t)(peer_data_id + DATA_ID_TO_RECORD_KEY);
000002  f5014040          ADD      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;86     }
000008  4770              BX       lr
;;;87     
                          ENDP


                          AREA ||i.peer_id_to_file_id||, CODE, READONLY, ALIGN=1

                  peer_id_to_file_id PROC
;;;68     // Function to convert peer IDs to file IDs.
;;;69     static uint16_t peer_id_to_file_id(pm_peer_id_t peer_id)
000000  4601              MOV      r1,r0
;;;70     {
;;;71         return (uint16_t)(peer_id + PEER_ID_TO_FILE_ID);
000002  f5014040          ADD      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;72     }
000008  4770              BX       lr
;;;73     
                          ENDP


                          AREA ||i.peer_ids_load||, CODE, READONLY, ALIGN=1

                  peer_ids_load PROC
;;;199    
;;;200    static void peer_ids_load()
000000  b530              PUSH     {r4,r5,lr}
;;;201    {
000002  b087              SUB      sp,sp,#0x1c
;;;202        fds_record_desc_t  record_desc;
;;;203        fds_flash_record_t record;
;;;204        fds_find_token_t   ftok;
;;;205    
;;;206        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
;;;207    
;;;208        uint16_t const record_key = peer_data_id_to_record_key(PM_PEER_DATA_ID_BONDING);
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       peer_data_id_to_record_key
000010  4604              MOV      r4,r0
;;;209    
;;;210        while (fds_record_find_by_key(record_key, &record_desc, &ftok) == FDS_SUCCESS)
000012  e00f              B        |L24.52|
                  |L24.20|
;;;211        {
;;;212            pm_peer_id_t peer_id;
;;;213    
;;;214            // It is safe to ignore the return value since the descriptor was
;;;215            // just obtained and also 'record' is different from NULL.
;;;216            (void)fds_record_open(&record_desc, &record);
000014  a902              ADD      r1,sp,#8
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       fds_record_open
;;;217            peer_id = file_id_to_peer_id(record.p_header->ic.file_id);
00001c  9902              LDR      r1,[sp,#8]
00001e  8888              LDRH     r0,[r1,#4]
000020  f7fffffe          BL       file_id_to_peer_id
000024  4605              MOV      r5,r0
;;;218            (void)fds_record_close(&record_desc);
000026  a804              ADD      r0,sp,#0x10
000028  f7fffffe          BL       fds_record_close
;;;219    
;;;220            (void)peer_id_allocate(peer_id);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       peer_id_allocate
;;;221        }
000032  bf00              NOP      
                  |L24.52|
000034  466a              MOV      r2,sp                 ;210
000036  a904              ADD      r1,sp,#0x10           ;210
000038  4620              MOV      r0,r4                 ;210
00003a  f7fffffe          BL       fds_record_find_by_key
00003e  2800              CMP      r0,#0                 ;210
000040  d0e8              BEQ      |L24.20|
;;;222    }
000042  b007              ADD      sp,sp,#0x1c
000044  bd30              POP      {r4,r5,pc}
;;;223    
                          ENDP


                          AREA ||i.record_key_to_peer_data_id||, CODE, READONLY, ALIGN=1

                  record_key_to_peer_data_id PROC
;;;89     // Function to convert record keys to peer data IDs.
;;;90     static pm_peer_data_id_t record_key_to_peer_data_id(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;91     {
;;;92         return (pm_peer_data_id_t)(record_key + RECORD_KEY_TO_DATA_ID);
000002  b2c8              UXTB     r0,r1
;;;93     }
000004  4770              BX       lr
;;;94     
                          ENDP


                          AREA ||i.record_key_within_pm_range||, CODE, READONLY, ALIGN=1

                  record_key_within_pm_range PROC
;;;104    // Function for checking whether a record key is relevant for the Peer Manager.
;;;105    static bool record_key_within_pm_range(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;106    {
;;;107        return ((PDS_FIRST_RESERVED_RECORD_KEY <= record_key)
000002  f5b14f40          CMP      r1,#0xc000
000006  db05              BLT      |L26.20|
;;;108             && (record_key <= PDS_LAST_RESERVED_RECORD_KEY));
000008  f64f70fe          MOV      r0,#0xfffe
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L26.20|
000010  2001              MOVS     r0,#1
                  |L26.18|
;;;109    }
000012  4770              BX       lr
                  |L26.20|
000014  2000              MOVS     r0,#0                 ;108
000016  e7fc              B        |L26.18|
;;;110    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pdb_pds_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00                DCB      0x00
                  m_peer_delete_queued
000001  00                DCB      0x00
                  m_peer_delete_ongoing
000002  0000              DCB      0x00,0x00
                  m_fds_ftok
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\peer_data_storage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_peer_data_storage_c_pds_init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REVSH|
#line 402
|__asm___19_peer_data_storage_c_pds_init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____RRX|
#line 587
|__asm___19_peer_data_storage_c_pds_init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
