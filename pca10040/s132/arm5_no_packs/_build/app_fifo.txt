; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\app_fifo.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\app_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\app_fifo.crf ..\..\..\..\..\..\components\libraries\fifo\app_fifo.c]
                          THUMB

                          AREA ||i.app_fifo_flush||, CODE, READONLY, ALIGN=1

                  app_fifo_flush PROC
;;;110    
;;;111    uint32_t app_fifo_flush(app_fifo_t * p_fifo)
000000  4601              MOV      r1,r0
;;;112    {
;;;113        p_fifo->read_pos = p_fifo->write_pos;
000002  68c8              LDR      r0,[r1,#0xc]
000004  6088              STR      r0,[r1,#8]
;;;114        return NRF_SUCCESS;
000006  2000              MOVS     r0,#0
;;;115    }
000008  4770              BX       lr
;;;116    
                          ENDP


                          AREA ||i.app_fifo_get||, CODE, READONLY, ALIGN=1

                  app_fifo_get PROC
;;;85     
;;;86     uint32_t app_fifo_get(app_fifo_t * p_fifo, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;88         if (FIFO_LENGTH() != 0)
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fifo_length
00000c  b128              CBZ      r0,|L2.26|
;;;89         {
;;;90             fifo_get(p_fifo, p_byte);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       fifo_get
;;;91             return NRF_SUCCESS;
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;92         }
;;;93     
;;;94         return NRF_ERROR_NOT_FOUND;
;;;95     
;;;96     }
000018  bd70              POP      {r4-r6,pc}
                  |L2.26|
00001a  2005              MOVS     r0,#5                 ;94
00001c  e7fc              B        |L2.24|
;;;97     
                          ENDP


                          AREA ||i.app_fifo_init||, CODE, READONLY, ALIGN=1

                  app_fifo_init PROC
;;;50     
;;;51     uint32_t app_fifo_init(app_fifo_t * p_fifo, uint8_t * p_buf, uint16_t buf_size)
000000  4603              MOV      r3,r0
;;;52     {
;;;53         // Check buffer for null pointer.
;;;54         if (p_buf == NULL)
000002  b909              CBNZ     r1,|L3.8|
;;;55         {
;;;56             return NRF_ERROR_NULL;
000004  200e              MOVS     r0,#0xe
                  |L3.6|
;;;57         }
;;;58     
;;;59         // Check that the buffer size is a power of two.
;;;60         if (!IS_POWER_OF_TWO(buf_size))
;;;61         {
;;;62             return NRF_ERROR_INVALID_LENGTH;
;;;63         }
;;;64     
;;;65         p_fifo->p_buf         = p_buf;
;;;66         p_fifo->buf_size_mask = buf_size - 1;
;;;67         p_fifo->read_pos      = 0;
;;;68         p_fifo->write_pos     = 0;
;;;69     
;;;70         return NRF_SUCCESS;
;;;71     }
000006  4770              BX       lr
                  |L3.8|
000008  b112              CBZ      r2,|L3.16|
00000a  1e50              SUBS     r0,r2,#1              ;60
00000c  4010              ANDS     r0,r0,r2              ;60
00000e  b108              CBZ      r0,|L3.20|
                  |L3.16|
000010  2009              MOVS     r0,#9                 ;62
000012  e7f8              B        |L3.6|
                  |L3.20|
000014  6019              STR      r1,[r3,#0]            ;65
000016  1e50              SUBS     r0,r2,#1              ;66
000018  8098              STRH     r0,[r3,#4]            ;66
00001a  2000              MOVS     r0,#0                 ;67
00001c  6098              STR      r0,[r3,#8]            ;67
00001e  60d8              STR      r0,[r3,#0xc]          ;68
000020  bf00              NOP                            ;70
000022  e7f0              B        |L3.6|
;;;72     
                          ENDP


                          AREA ||i.app_fifo_peek||, CODE, READONLY, ALIGN=1

                  app_fifo_peek PROC
;;;98     
;;;99     uint32_t app_fifo_peek(app_fifo_t * p_fifo, uint16_t index, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;101        if (FIFO_LENGTH() > index)
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       fifo_length
00000e  42a0              CMP      r0,r4
000010  d906              BLS      |L4.32|
;;;102        {
;;;103            fifo_peek(p_fifo, index, p_byte);
000012  4632              MOV      r2,r6
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       fifo_peek
;;;104            return NRF_SUCCESS;
00001c  2000              MOVS     r0,#0
                  |L4.30|
;;;105        }
;;;106    
;;;107        return NRF_ERROR_NOT_FOUND;
;;;108    }
00001e  bd70              POP      {r4-r6,pc}
                  |L4.32|
000020  2005              MOVS     r0,#5                 ;107
000022  e7fc              B        |L4.30|
;;;109    
                          ENDP


                          AREA ||i.app_fifo_put||, CODE, READONLY, ALIGN=1

                  app_fifo_put PROC
;;;73     
;;;74     uint32_t app_fifo_put(app_fifo_t * p_fifo, uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;75     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;76         if (FIFO_LENGTH() <= p_fifo->buf_size_mask)
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fifo_length
00000c  88a1              LDRH     r1,[r4,#4]
00000e  4288              CMP      r0,r1
000010  d805              BHI      |L5.30|
;;;77         {
;;;78             fifo_put(p_fifo, byte);
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       fifo_put
;;;79             return NRF_SUCCESS;
00001a  2000              MOVS     r0,#0
                  |L5.28|
;;;80         }
;;;81     
;;;82         return NRF_ERROR_NO_MEM;
;;;83     }
00001c  bd70              POP      {r4-r6,pc}
                  |L5.30|
00001e  2004              MOVS     r0,#4                 ;82
000020  e7fc              B        |L5.28|
;;;84     
                          ENDP


                          AREA ||i.app_fifo_read||, CODE, READONLY, ALIGN=1

                  app_fifo_read PROC
;;;117    
;;;118    uint32_t app_fifo_read(app_fifo_t * p_fifo, uint8_t * p_byte_array, uint32_t * p_size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;119    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;120        VERIFY_PARAM_NOT_NULL(p_fifo);
00000a  bf00              NOP      
00000c  f1b80f00          CMP      r8,#0
000010  d102              BNE      |L6.24|
000012  200e              MOVS     r0,#0xe
                  |L6.20|
;;;121        VERIFY_PARAM_NOT_NULL(p_size);
;;;122    
;;;123        const uint32_t byte_count    = fifo_length(p_fifo);
;;;124        const uint32_t requested_len = (*p_size);
;;;125        uint32_t       index         = 0;
;;;126        uint32_t       read_size     = MIN(requested_len, byte_count);
;;;127    
;;;128        (*p_size) = byte_count;
;;;129    
;;;130        // Check if the FIFO is empty.
;;;131        if (byte_count == 0)
;;;132        {
;;;133            return NRF_ERROR_NOT_FOUND;
;;;134        }
;;;135    
;;;136        // Check if application has requested only the size.
;;;137        if (p_byte_array == NULL)
;;;138        {
;;;139            return NRF_SUCCESS;
;;;140        }
;;;141    
;;;142        // Fetch bytes from the FIFO.
;;;143        while (index < read_size)
;;;144        {
;;;145            fifo_get(p_fifo, &p_byte_array[index++]);
;;;146        }
;;;147    
;;;148        (*p_size) = read_size;
;;;149    
;;;150        return NRF_SUCCESS;
;;;151    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L6.24|
000018  bf00              NOP                            ;120
00001a  bf00              NOP                            ;121
00001c  b90c              CBNZ     r4,|L6.34|
00001e  200e              MOVS     r0,#0xe               ;121
000020  e7f8              B        |L6.20|
                  |L6.34|
000022  bf00              NOP                            ;121
000024  4640              MOV      r0,r8                 ;123
000026  f7fffffe          BL       fifo_length
00002a  4605              MOV      r5,r0                 ;123
00002c  f8d49000          LDR      r9,[r4,#0]            ;124
000030  2700              MOVS     r7,#0                 ;125
000032  45a9              CMP      r9,r5                 ;126
000034  d201              BCS      |L6.58|
000036  4648              MOV      r0,r9                 ;126
000038  e000              B        |L6.60|
                  |L6.58|
00003a  4628              MOV      r0,r5                 ;126
                  |L6.60|
00003c  4682              MOV      r10,r0                ;126
00003e  6025              STR      r5,[r4,#0]            ;128
000040  b90d              CBNZ     r5,|L6.70|
000042  2005              MOVS     r0,#5                 ;133
000044  e7e6              B        |L6.20|
                  |L6.70|
000046  b90e              CBNZ     r6,|L6.76|
000048  2000              MOVS     r0,#0                 ;139
00004a  e7e3              B        |L6.20|
                  |L6.76|
00004c  e005              B        |L6.90|
                  |L6.78|
00004e  4638              MOV      r0,r7                 ;145
000050  1c7f              ADDS     r7,r7,#1              ;145
000052  1981              ADDS     r1,r0,r6              ;145
000054  4640              MOV      r0,r8                 ;145
000056  f7fffffe          BL       fifo_get
                  |L6.90|
00005a  4557              CMP      r7,r10                ;143
00005c  d3f7              BCC      |L6.78|
00005e  f8c4a000          STR      r10,[r4,#0]           ;148
000062  2000              MOVS     r0,#0                 ;150
000064  e7d6              B        |L6.20|
;;;152    
                          ENDP


                          AREA ||i.app_fifo_write||, CODE, READONLY, ALIGN=1

                  app_fifo_write PROC
;;;153    
;;;154    uint32_t app_fifo_write(app_fifo_t * p_fifo, uint8_t const * p_byte_array, uint32_t * p_size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;155    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;156        VERIFY_PARAM_NOT_NULL(p_fifo);
00000a  bf00              NOP      
00000c  b916              CBNZ     r6,|L7.20|
00000e  200e              MOVS     r0,#0xe
                  |L7.16|
;;;157        VERIFY_PARAM_NOT_NULL(p_size);
;;;158    
;;;159        const uint32_t available_count = p_fifo->buf_size_mask - fifo_length(p_fifo) + 1;
;;;160        const uint32_t requested_len   = (*p_size);
;;;161        uint32_t       index           = 0;
;;;162        uint32_t       write_size      = MIN(requested_len, available_count);
;;;163    
;;;164        (*p_size) = available_count;
;;;165    
;;;166        // Check if the FIFO is FULL.
;;;167        if (available_count == 0)
;;;168        {
;;;169            return NRF_ERROR_NO_MEM;
;;;170        }
;;;171    
;;;172        // Check if application has requested only the size.
;;;173        if (p_byte_array == NULL)
;;;174        {
;;;175            return NRF_SUCCESS;
;;;176        }
;;;177    
;;;178        //Fetch bytes from the FIFO.
;;;179        while (index < write_size)
;;;180        {
;;;181            fifo_put(p_fifo, p_byte_array[index++]);
;;;182        }
;;;183    
;;;184        (*p_size) = write_size;
;;;185    
;;;186        return NRF_SUCCESS;
;;;187    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L7.20|
000014  bf00              NOP                            ;156
000016  bf00              NOP                            ;157
000018  b90c              CBNZ     r4,|L7.30|
00001a  200e              MOVS     r0,#0xe               ;157
00001c  e7f8              B        |L7.16|
                  |L7.30|
00001e  bf00              NOP                            ;157
000020  4630              MOV      r0,r6                 ;159
000022  f7fffffe          BL       fifo_length
000026  88b1              LDRH     r1,[r6,#4]            ;159
000028  1a08              SUBS     r0,r1,r0              ;159
00002a  1c45              ADDS     r5,r0,#1              ;159
00002c  f8d49000          LDR      r9,[r4,#0]            ;160
000030  f04f0800          MOV      r8,#0                 ;161
000034  45a9              CMP      r9,r5                 ;162
000036  d201              BCS      |L7.60|
000038  4648              MOV      r0,r9                 ;162
00003a  e000              B        |L7.62|
                  |L7.60|
00003c  4628              MOV      r0,r5                 ;162
                  |L7.62|
00003e  4682              MOV      r10,r0                ;162
000040  6025              STR      r5,[r4,#0]            ;164
000042  b90d              CBNZ     r5,|L7.72|
000044  2004              MOVS     r0,#4                 ;169
000046  e7e3              B        |L7.16|
                  |L7.72|
000048  b90f              CBNZ     r7,|L7.78|
00004a  2000              MOVS     r0,#0                 ;175
00004c  e7e0              B        |L7.16|
                  |L7.78|
00004e  e006              B        |L7.94|
                  |L7.80|
000050  4640              MOV      r0,r8                 ;181
000052  f1080801          ADD      r8,r8,#1              ;181
000056  5c39              LDRB     r1,[r7,r0]            ;181
000058  4630              MOV      r0,r6                 ;181
00005a  f7fffffe          BL       fifo_put
                  |L7.94|
00005e  45d0              CMP      r8,r10                ;179
000060  d3f6              BCC      |L7.80|
000062  f8c4a000          STR      r10,[r4,#0]           ;184
000066  2000              MOVS     r0,#0                 ;186
000068  e7d2              B        |L7.16|
;;;188    #endif //APP_FIFO_ENABLED
                          ENDP


                          AREA ||i.fifo_get||, CODE, READONLY, ALIGN=1

                  fifo_get PROC
;;;43     /**@brief Get one byte from the FIFO. */
;;;44     static __INLINE void fifo_get(app_fifo_t * p_fifo, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;46         fifo_peek(p_fifo, 0, p_byte);
000006  462a              MOV      r2,r5
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       fifo_peek
;;;47         p_fifo->read_pos++;
000010  68a0              LDR      r0,[r4,#8]
000012  1c40              ADDS     r0,r0,#1
000014  60a0              STR      r0,[r4,#8]
;;;48     }
000016  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP


                          AREA ||i.fifo_length||, CODE, READONLY, ALIGN=1

                  fifo_length PROC
;;;17     
;;;18     static __INLINE uint32_t fifo_length(app_fifo_t * p_fifo)
000000  4601              MOV      r1,r0
;;;19     {
;;;20         uint32_t tmp = p_fifo->read_pos;
000002  688a              LDR      r2,[r1,#8]
;;;21         return p_fifo->write_pos - tmp;
000004  68c8              LDR      r0,[r1,#0xc]
000006  1a80              SUBS     r0,r0,r2
;;;22     }
000008  4770              BX       lr
;;;23     
                          ENDP


                          AREA ||i.fifo_peek||, CODE, READONLY, ALIGN=1

                  fifo_peek PROC
;;;36     /**@brief Look at one byte in the FIFO. */
;;;37     static __INLINE void fifo_peek(app_fifo_t * p_fifo, uint16_t index, uint8_t * p_byte)
000000  b510              PUSH     {r4,lr}
;;;38     {
;;;39         *p_byte = p_fifo->p_buf[(p_fifo->read_pos + index) & p_fifo->buf_size_mask];
000002  6883              LDR      r3,[r0,#8]
000004  440b              ADD      r3,r3,r1
000006  8884              LDRH     r4,[r0,#4]
000008  4023              ANDS     r3,r3,r4
00000a  6804              LDR      r4,[r0,#0]
00000c  5ce3              LDRB     r3,[r4,r3]
00000e  7013              STRB     r3,[r2,#0]
;;;40     }
000010  bd10              POP      {r4,pc}
;;;41     
                          ENDP


                          AREA ||i.fifo_put||, CODE, READONLY, ALIGN=1

                  fifo_put PROC
;;;28     /**@brief Put one byte to the FIFO. */
;;;29     static __INLINE void fifo_put(app_fifo_t * p_fifo, uint8_t byte)
000000  68c2              LDR      r2,[r0,#0xc]
;;;30     {
;;;31         p_fifo->p_buf[p_fifo->write_pos & p_fifo->buf_size_mask] = byte;
000002  8883              LDRH     r3,[r0,#4]
000004  401a              ANDS     r2,r2,r3
000006  6803              LDR      r3,[r0,#0]
000008  5499              STRB     r1,[r3,r2]
;;;32         p_fifo->write_pos++;
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  1c52              ADDS     r2,r2,#1
00000e  60c2              STR      r2,[r0,#0xc]
;;;33     }
000010  4770              BX       lr
;;;34     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\fifo\\app_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_fifo_c_e20caf07____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____REVSH|
#line 402
|__asm___10_app_fifo_c_e20caf07____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____RRX|
#line 587
|__asm___10_app_fifo_c_e20caf07____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
