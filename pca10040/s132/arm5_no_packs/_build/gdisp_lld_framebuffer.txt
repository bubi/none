; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\gdisp_lld_framebuffer.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\gdisp_lld_framebuffer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\gdisp_lld_framebuffer.crf ..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer\gdisp_lld_framebuffer.c]
                          THUMB

                          AREA ||i.board_flush||, CODE, READONLY, ALIGN=1

                  board_flush PROC
;;;34     	#if GDISP_HARDWARE_FLUSH
;;;35     		static void board_flush(GDisplay *g) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;36     			// TODO: Can be an empty function if your hardware doesn't support this
;;;37     			ls013_flush();
000004  f7fffffe          BL       ls013_flush
;;;38     		}
000008  bd10              POP      {r4,pc}
;;;39     	#endif
                          ENDP


                          AREA ||i.board_init||, CODE, READONLY, ALIGN=1

                  board_init PROC
;;;18     
;;;19     static void board_init(GDisplay *g, fbInfo *fbi) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;20     		// TODO: Initialize your frame buffer device here
;;;21     
;;;22     		// TODO: Set the details of the frame buffer
;;;23     		g->g.Width = 128;
000006  2080              MOVS     r0,#0x80
000008  8120              STRH     r0,[r4,#8]
;;;24     		g->g.Height = 128;
00000a  2180              MOVS     r1,#0x80
00000c  8161              STRH     r1,[r4,#0xa]
;;;25     		g->g.Backlight = 100;
00000e  2164              MOVS     r1,#0x64
000010  73e1              STRB     r1,[r4,#0xf]
;;;26     		g->g.Contrast = 100;
000012  7421              STRB     r1,[r4,#0x10]
;;;27     		fbi->linelen = 48;				// bytes per row
000014  2030              MOVS     r0,#0x30
000016  80a8              STRH     r0,[r5,#4]
;;;28     		fbi->pixels = ls013_init();												// pointer to the memory frame buffer
000018  f7fffffe          BL       ls013_init
00001c  6028              STR      r0,[r5,#0]
;;;29     		
;;;30     		ls013_clearframe();
00001e  f7fffffe          BL       ls013_clearframe
;;;31     		
;;;32     	}
000022  bd70              POP      {r4-r6,pc}
;;;33     
                          ENDP


                          AREA ||i.gdisp_lld_draw_pixel||, CODE, READONLY, ALIGN=1

                  gdisp_lld_draw_pixel PROC
;;;60     
;;;61     LLDSPEC void gdisp_lld_draw_pixel(GDisplay *g) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4602              MOV      r2,r0
;;;62     	unsigned	pos;
;;;63     	uint8_t   color;
;;;64     	uint8_t   bytes_per_line;
;;;65     	uint8_t* 	fb;
;;;66     	
;;;67     
;;;68     	#if GDISP_NEED_CONTROL
;;;69     		switch(g->g.Orientation) {
;;;70     		case GDISP_ROTATE_0:
;;;71     		default:
;;;72     			pos = PIXIL_POS(g, g->p.x, g->p.y);
;;;73     			break;
;;;74     		case GDISP_ROTATE_90:
;;;75     			pos = PIXIL_POS(g, g->p.y, g->g.Width-g->p.x-1);
;;;76     			break;
;;;77     		case GDISP_ROTATE_180:
;;;78     			pos = PIXIL_POS(g, g->g.Width-g->p.x-1, g->g.Height-g->p.y-1);
;;;79     			break;
;;;80     		case GDISP_ROTATE_270:
;;;81     			pos = PIXIL_POS(g, g->g.Height-g->p.y-1, g->p.x);
;;;82     			break;
;;;83     		}
;;;84     	#else
;;;85     		pos = PIXIL_POS(g, g->p.x, g->p.y);
000004  f9b24028          LDRSH    r4,[r2,#0x28]
000008  8d56              LDRH     r6,[r2,#0x2a]
00000a  6957              LDR      r7,[r2,#0x14]
00000c  88bf              LDRH     r7,[r7,#4]
00000e  fb164007          SMLABB   r0,r6,r7,r4
;;;86     	#endif
;;;87     	
;;;88     		#if GDISP_DRIVER_3BIT_MSB
;;;89     			bytes_per_line = ((fbPriv *)g->priv)->fbi.linelen;
000012  6954              LDR      r4,[r2,#0x14]
000014  7925              LDRB     r5,[r4,#4]
;;;90     			color = gdispColor2Native(g->p.color);
000016  2438              MOVS     r4,#0x38
000018  5ca3              LDRB     r3,[r4,r2]
;;;91     			fb = ((fbPriv *)g->priv)->fbi.pixels;
00001a  6954              LDR      r4,[r2,#0x14]
00001c  6821              LDR      r1,[r4,#0]
;;;92     			
;;;93     			pos = (g->p.y) * bytes_per_line + ((g->p.x * 3) / 8) ;
00001e  f9b26028          LDRSH    r6,[r2,#0x28]
000022  eb060446          ADD      r4,r6,r6,LSL #1
000026  17e6              ASRS     r6,r4,#31
000028  eb047656          ADD      r6,r4,r6,LSR #29
00002c  10f7              ASRS     r7,r6,#3
00002e  8d56              LDRH     r6,[r2,#0x2a]
000030  fb167005          SMLABB   r0,r6,r5,r7
;;;94     			
;;;95     			switch (g->p.x & 0x07){
000034  f8924028          LDRB     r4,[r2,#0x28]
000038  f0040407          AND      r4,r4,#7
00003c  2c08              CMP      r4,#8
00003e  d255              BCS      |L3.236|
000040  e8dff004          TBB      [pc,r4]
000044  040b121f          DCB      0x04,0x0b,0x12,0x1f
000048  2933424c          DCB      0x29,0x33,0x42,0x4c
;;;96     				case 0: 
;;;97     					fb[pos] = ((fb[pos] & ~0xE0) | color << 5);
00004c  5c0c              LDRB     r4,[r1,r0]
00004e  f02404e0          BIC      r4,r4,#0xe0
000052  ea441443          ORR      r4,r4,r3,LSL #5
000056  540c              STRB     r4,[r1,r0]
;;;98     					break;
000058  e048              B        |L3.236|
;;;99     				case 1:
;;;100    					fb[pos] = ((fb[pos] & ~0x1C) | color << 2);
00005a  5c0c              LDRB     r4,[r1,r0]
00005c  f024041c          BIC      r4,r4,#0x1c
000060  ea440483          ORR      r4,r4,r3,LSL #2
000064  540c              STRB     r4,[r1,r0]
;;;101    					break;
000066  e041              B        |L3.236|
;;;102    				case 2:
;;;103    					fb[pos]   = ((fb[pos] & ~0x03) | color >> 1);
000068  5c0c              LDRB     r4,[r1,r0]
00006a  f0240403          BIC      r4,r4,#3
00006e  ea440463          ORR      r4,r4,r3,ASR #1
000072  540c              STRB     r4,[r1,r0]
;;;104    					fb[pos+1] = ((fb[pos+1] & ~0x80) | (color & 0x01) << 7);
000074  1c44              ADDS     r4,r0,#1
000076  5d0c              LDRB     r4,[r1,r4]
000078  f36314c7          BFI      r4,r3,#7,#1
00007c  1c46              ADDS     r6,r0,#1
00007e  558c              STRB     r4,[r1,r6]
;;;105    					break;
000080  e034              B        |L3.236|
;;;106    				case 3: 
;;;107    					fb[pos+1] = ((fb[pos+1] & ~0x70) | color << 4);
000082  1c44              ADDS     r4,r0,#1
000084  5d0c              LDRB     r4,[r1,r4]
000086  f0240470          BIC      r4,r4,#0x70
00008a  ea441403          ORR      r4,r4,r3,LSL #4
00008e  b2e6              UXTB     r6,r4
000090  1c44              ADDS     r4,r0,#1
000092  550e              STRB     r6,[r1,r4]
;;;108    					break;
000094  e02a              B        |L3.236|
;;;109    				case 4:
;;;110    					fb[pos+1] = ((fb[pos+1] & ~0x0E) | color << 1);
000096  1c44              ADDS     r4,r0,#1
000098  5d0c              LDRB     r4,[r1,r4]
00009a  f024040e          BIC      r4,r4,#0xe
00009e  ea440443          ORR      r4,r4,r3,LSL #1
0000a2  b2e6              UXTB     r6,r4
0000a4  1c44              ADDS     r4,r0,#1
0000a6  550e              STRB     r6,[r1,r4]
;;;111    					break;
0000a8  e020              B        |L3.236|
;;;112    				case 5:
;;;113    					fb[pos+1] = ((fb[pos+1] & ~0x01) | color >> 2);
0000aa  1c44              ADDS     r4,r0,#1
0000ac  5d0c              LDRB     r4,[r1,r4]
0000ae  f0240401          BIC      r4,r4,#1
0000b2  ea4406a3          ORR      r6,r4,r3,ASR #2
0000b6  1c44              ADDS     r4,r0,#1
0000b8  550e              STRB     r6,[r1,r4]
;;;114    					fb[pos+2] = ((fb[pos+2] & ~0xC0) | (color & 0x03) << 6);
0000ba  1c84              ADDS     r4,r0,#2
0000bc  5d0c              LDRB     r4,[r1,r4]
0000be  f3631487          BFI      r4,r3,#6,#2
0000c2  1c86              ADDS     r6,r0,#2
0000c4  558c              STRB     r4,[r1,r6]
;;;115    					break;
0000c6  e011              B        |L3.236|
;;;116    				case 6:
;;;117    					fb[pos+2] = ((fb[pos+2] & ~0x30) | color << 3);
0000c8  1c84              ADDS     r4,r0,#2
0000ca  5d0c              LDRB     r4,[r1,r4]
0000cc  f0240430          BIC      r4,r4,#0x30
0000d0  ea4404c3          ORR      r4,r4,r3,LSL #3
0000d4  b2e6              UXTB     r6,r4
0000d6  1c84              ADDS     r4,r0,#2
0000d8  550e              STRB     r6,[r1,r4]
;;;118    					break;
0000da  e007              B        |L3.236|
;;;119    				case 7:
;;;120    					fb[pos+2] = ((fb[pos+2] & ~0x7) | color );
0000dc  1c84              ADDS     r4,r0,#2
0000de  5d0c              LDRB     r4,[r1,r4]
0000e0  f0240407          BIC      r4,r4,#7
0000e4  431c              ORRS     r4,r4,r3
0000e6  1c86              ADDS     r6,r0,#2
0000e8  558c              STRB     r4,[r1,r6]
;;;121    					break;		
0000ea  bf00              NOP      
                  |L3.236|
0000ec  bf00              NOP                            ;98
;;;122    			}		
;;;123    		#else
;;;124    			PIXEL_ADDR(g, pos)[0] = gdispColor2Native(g->p.color);
;;;125    		#endif
;;;126    }	
0000ee  bdf0              POP      {r4-r7,pc}
;;;127    
                          ENDP


                          AREA ||i.gdisp_lld_flush||, CODE, READONLY, ALIGN=1

                  gdisp_lld_flush PROC
;;;55     #if GDISP_HARDWARE_FLUSH
;;;56     	LLDSPEC void gdisp_lld_flush(GDisplay *g) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;57     		board_flush(g);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       board_flush
;;;58     	}
00000a  bd10              POP      {r4,pc}
;;;59     #endif
                          ENDP


                          AREA ||i.gdisp_lld_get_pixel_color||, CODE, READONLY, ALIGN=1

                  gdisp_lld_get_pixel_color PROC
;;;127    
;;;128    LLDSPEC	color_t gdisp_lld_get_pixel_color(GDisplay *g) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;129    	unsigned		pos;
;;;130    	LLDCOLOR_TYPE	color;
;;;131    
;;;132    	#if GDISP_NEED_CONTROL
;;;133    		switch(g->g.Orientation) {
;;;134    		case GDISP_ROTATE_0:
;;;135    		default:
;;;136    			pos = PIXIL_POS(g, g->p.x, g->p.y);
;;;137    			break;
;;;138    		case GDISP_ROTATE_90:
;;;139    			pos = PIXIL_POS(g, g->p.y, g->g.Width-g->p.x-1);
;;;140    			break;
;;;141    		case GDISP_ROTATE_180:
;;;142    			pos = PIXIL_POS(g, g->g.Width-g->p.x-1, g->g.Height-g->p.y-1);
;;;143    			break;
;;;144    		case GDISP_ROTATE_270:
;;;145    			pos = PIXIL_POS(g, g->g.Height-g->p.y-1, g->p.x);
;;;146    			break;
;;;147    		}
;;;148    	#else
;;;149    		pos = PIXIL_POS(g, g->p.x, g->p.y);
000004  f9b13028          LDRSH    r3,[r1,#0x28]
000008  8d4c              LDRH     r4,[r1,#0x2a]
00000a  694d              LDR      r5,[r1,#0x14]
00000c  88ad              LDRH     r5,[r5,#4]
00000e  fb143205          SMLABB   r2,r4,r5,r3
;;;150    	#endif
;;;151    
;;;152    	color = PIXEL_ADDR(g, pos)[0];
000012  694b              LDR      r3,[r1,#0x14]
000014  681b              LDR      r3,[r3,#0]
000016  5c98              LDRB     r0,[r3,r2]
;;;153    	return gdispNative2Color(color);
;;;154    }
000018  bd30              POP      {r4,r5,pc}
;;;155    
                          ENDP


                          AREA ||i.gdisp_lld_init||, CODE, READONLY, ALIGN=2

                  gdisp_lld_init PROC
;;;37     
;;;38     LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;39     
;;;40     	// Initialize the private structure
;;;41     	if (!(g->priv = gfxAlloc(sizeof(fbPriv))))
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       gfxAlloc
00000a  6160              STR      r0,[r4,#0x14]
00000c  b910              CBNZ     r0,|L6.20|
;;;42     		gfxHalt("GDISP Framebuffer: Failed to allocate private memory");
00000e  a009              ADR      r0,|L6.52|
000010  f7fffffe          BL       gfxHalt
                  |L6.20|
;;;43     	((fbPriv *)g->priv)->fbi.pixels = 0;
000014  2000              MOVS     r0,#0
000016  6961              LDR      r1,[r4,#0x14]
000018  6008              STR      r0,[r1,#0]
;;;44     	((fbPriv *)g->priv)->fbi.linelen = 0;
00001a  6961              LDR      r1,[r4,#0x14]
00001c  8088              STRH     r0,[r1,#4]
;;;45     
;;;46     	// Initialize the GDISP structure
;;;47     	g->g.Orientation = GDISP_ROTATE_0;
00001e  2100              MOVS     r1,#0
000020  81a1              STRH     r1,[r4,#0xc]
;;;48     	g->g.Powermode = powerOn;
000022  2103              MOVS     r1,#3
000024  73a1              STRB     r1,[r4,#0xe]
;;;49     	g->board = 0;							// preinitialize
000026  61a0              STR      r0,[r4,#0x18]
;;;50     	board_init(g, &((fbPriv *)g->priv)->fbi);
000028  4620              MOV      r0,r4
00002a  6961              LDR      r1,[r4,#0x14]
00002c  f7fffffe          BL       board_init
;;;51     
;;;52     	return TRUE;
000030  20ff              MOVS     r0,#0xff
;;;53     }
000032  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  |L6.52|
000034  47444953          DCB      "GDISP Framebuffer: Failed to allocate private memory",0
000038  50204672
00003c  616d6562
000040  75666665
000044  723a2046
000048  61696c65
00004c  6420746f
000050  20616c6c
000054  6f636174
000058  65207072
00005c  69766174
000060  65206d65
000064  6d6f7279
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GDISPVMT_OnlyOne
000000  00670000          DCW      0x0067,0x0000
                          DCD      0x00000040
                          DCD      _gdispInitDriver
                          DCD      _gdispPostInitDriver
                          DCD      _gdispDeInitDriver
                          DCD      gdisp_lld_init
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      gdisp_lld_draw_pixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      gdisp_lld_get_pixel_color
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      gdisp_lld_flush

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\external\\ugfx\\drivers\\gdisp\\framebuffer\\gdisp_lld_framebuffer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_gdisp_lld_framebuffer_c_37b03f42____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___23_gdisp_lld_framebuffer_c_37b03f42____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_gdisp_lld_framebuffer_c_37b03f42____REVSH|
#line 402
|__asm___23_gdisp_lld_framebuffer_c_37b03f42____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___23_gdisp_lld_framebuffer_c_37b03f42____RRX|
#line 587
|__asm___23_gdisp_lld_framebuffer_c_37b03f42____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
