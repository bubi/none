; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_bas.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_bas.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_bas.crf ..\..\..\ble_bas.c]
                          THUMB

                          AREA ||i.battery_level_encode||, CODE, READONLY, ALIGN=1

                  battery_level_encode PROC
;;;23      */
;;;24     static uint8_t battery_level_encode(ble_bas_battery_level_t * p_battery_level, uint8_t * encoded_buffer)
000000  b530              PUSH     {r4,r5,lr}
;;;25     {
000002  4602              MOV      r2,r0
;;;26         uint8_t len = 0; 
000004  2000              MOVS     r0,#0
;;;27         encoded_buffer[len++] = p_battery_level->level;
000006  7815              LDRB     r5,[r2,#0]
000008  4604              MOV      r4,r0
00000a  1c40              ADDS     r0,r0,#1
00000c  550d              STRB     r5,[r1,r4]
;;;28         return len;
;;;29     }
00000e  bd30              POP      {r4,r5,pc}
;;;30     
                          ENDP


                          AREA ||i.bds_uint16_encode||, CODE, READONLY, ALIGN=1

                  bds_uint16_encode PROC
;;;73      */
;;;74     static __INLINE uint8_t bds_uint16_encode(const uint16_t * p_value, uint8_t * p_encoded_data)
000000  4602              MOV      r2,r0
;;;75     {
;;;76         p_encoded_data[0] = (uint8_t) ((*p_value & 0x00FF) >> 0);
000002  7810              LDRB     r0,[r2,#0]
000004  7008              STRB     r0,[r1,#0]
;;;77         p_encoded_data[1] = (uint8_t) ((*p_value & 0xFF00) >> 8);
000006  8810              LDRH     r0,[r2,#0]
000008  0a00              LSRS     r0,r0,#8
00000a  7048              STRB     r0,[r1,#1]
;;;78         return sizeof(uint16_t);
00000c  2002              MOVS     r0,#2
;;;79     }
00000e  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.ble_bas_battery_level_send||, CODE, READONLY, ALIGN=1

                  ble_bas_battery_level_send PROC
;;;266    /**@brief Function for sending the Battery Level. */
;;;267    uint32_t ble_bas_battery_level_send(ble_bas_t * p_bas, ble_bas_battery_level_t * p_battery_level)
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;269        uint32_t err_code = NRF_SUCCESS;
000008  2600              MOVS     r6,#0
;;;270    
;;;271        if (p_bas->conn_handle != BLE_CONN_HANDLE_INVALID)
00000a  8b20              LDRH     r0,[r4,#0x18]
00000c  f64f71ff          MOV      r1,#0xffff
000010  4288              CMP      r0,r1
000012  d01b              BEQ      |L3.76|
;;;272        {
;;;273            ble_gatts_hvx_params_t hvx_params;
;;;274            uint8_t encoded_value[MAX_BATTERY_LEVEL_LEN];
;;;275            uint16_t hvx_len;
;;;276    
;;;277            // Initialize value struct.
;;;278            memset(&hvx_params, 0, sizeof(hvx_params));
000014  2000              MOVS     r0,#0
000016  9006              STR      r0,[sp,#0x18]
000018  9007              STR      r0,[sp,#0x1c]
00001a  9008              STR      r0,[sp,#0x20]
00001c  9009              STR      r0,[sp,#0x24]
;;;279    
;;;280            hvx_len           = battery_level_encode(p_battery_level, encoded_value);
00001e  a901              ADD      r1,sp,#4
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       battery_level_encode
000026  9000              STR      r0,[sp,#0]
;;;281            hvx_params.handle = p_bas->battery_level_handles.value_handle;
000028  8920              LDRH     r0,[r4,#8]
00002a  f8ad0018          STRH     r0,[sp,#0x18]
;;;282            hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
00002e  2001              MOVS     r0,#1
000030  f88d001a          STRB     r0,[sp,#0x1a]
;;;283            hvx_params.p_len  = &hvx_len;
000034  f8cdd020          STR      sp,[sp,#0x20]
;;;284            hvx_params.offset = 0;
000038  2000              MOVS     r0,#0
00003a  f8ad001c          STRH     r0,[sp,#0x1c]
;;;285            hvx_params.p_data = encoded_value;
00003e  a801              ADD      r0,sp,#4
000040  9009              STR      r0,[sp,#0x24]
;;;286    
;;;287            err_code = sd_ble_gatts_hvx(p_bas->conn_handle, &hvx_params);
000042  8b20              LDRH     r0,[r4,#0x18]
000044  a906              ADD      r1,sp,#0x18
000046  dfa6              SVC      #0xa6
000048  4606              MOV      r6,r0
;;;288        }
00004a  e000              B        |L3.78|
                  |L3.76|
;;;289        else
;;;290        {
;;;291            err_code = NRF_ERROR_INVALID_STATE;
00004c  2608              MOVS     r6,#8
                  |L3.78|
;;;292        }
;;;293    
;;;294        return err_code;
00004e  4630              MOV      r0,r6
;;;295    }
000050  b00a              ADD      sp,sp,#0x28
000052  bd70              POP      {r4-r6,pc}
;;;296    
                          ENDP


                          AREA ||i.ble_bas_battery_level_set||, CODE, READONLY, ALIGN=1

                  ble_bas_battery_level_set PROC
;;;235    /**@brief Function for setting the Battery Level. */
;;;236    uint32_t ble_bas_battery_level_set(ble_bas_t * p_bas, ble_bas_battery_level_t * p_battery_level)
000000  b530              PUSH     {r4,r5,lr}
;;;237    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;238        ble_gatts_value_t gatts_value;
;;;239        uint8_t encoded_value[MAX_BATTERY_LEVEL_LEN];
;;;240    
;;;241        // Initialize value struct.
;;;242        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;243    
;;;244        gatts_value.len     = battery_level_encode(p_battery_level, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       battery_level_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;245        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;246        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;247    
;;;248        return sd_ble_gatts_value_set(p_bas->conn_handle, p_bas->battery_level_handles.value_handle, &gatts_value);
000024  8921              LDRH     r1,[r4,#8]
000026  8b20              LDRH     r0,[r4,#0x18]
000028  aa05              ADD      r2,sp,#0x14
00002a  dfa4              SVC      #0xa4
;;;249    }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd30              POP      {r4,r5,pc}
;;;250    
                          ENDP


                          AREA ||i.ble_bas_characteristic_presentation_format_set||, CODE, READONLY, ALIGN=1

                  ble_bas_characteristic_presentation_format_set PROC
;;;251    /**@brief Function for setting the Characteristic Presentation Format. */
;;;252    uint32_t ble_bas_characteristic_presentation_format_set(ble_bas_t * p_bas, ble_bas_characteristic_presentation_format_t * p_characteristic_presentation_format)
000000  b530              PUSH     {r4,r5,lr}
;;;253    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;254        ble_gatts_value_t gatts_value;
;;;255        uint8_t encoded_value[MAX_CHARACTERISTIC_PRESENTATION_FORMAT_LEN];
;;;256    
;;;257        // Initialize value struct.
;;;258        memset(&gatts_value, 0, sizeof(gatts_value));
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;259    
;;;260        gatts_value.len     = characteristic_presentation_format_encode(p_characteristic_presentation_format, encoded_value);
00000e  4669              MOV      r1,sp
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       characteristic_presentation_format_encode
000016  f8ad0014          STRH     r0,[sp,#0x14]
;;;261        gatts_value.offset  = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;262        gatts_value.p_value = encoded_value;
000020  f8cdd018          STR      sp,[sp,#0x18]
;;;263    
;;;264        return sd_ble_gatts_value_set(p_bas->conn_handle, p_bas->characteristic_presentation_format_handles.value_handle, &gatts_value);
000024  8a21              LDRH     r1,[r4,#0x10]
000026  8b20              LDRH     r0,[r4,#0x18]
000028  aa05              ADD      r2,sp,#0x14
00002a  dfa4              SVC      #0xa4
;;;265    } 
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd30              POP      {r4,r5,pc}
;;;266    /**@brief Function for sending the Battery Level. */
                          ENDP


                          AREA ||i.ble_bas_init||, CODE, READONLY, ALIGN=1

                  ble_bas_init PROC
;;;176    /**@brief Function for initializing the Battery Service. */
;;;177    uint32_t ble_bas_init(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init)
000000  b570              PUSH     {r4-r6,lr}
;;;178    {
000002  b094              SUB      sp,sp,#0x50
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;179        uint32_t err_code;
;;;180        ble_uuid_t ble_uuid;
;;;181    
;;;182        // Initialize service structure
;;;183        p_bas->evt_handler = p_bas_init->evt_handler;
000008  6828              LDR      r0,[r5,#0]
00000a  6020              STR      r0,[r4,#0]
;;;184        p_bas->conn_handle = BLE_CONN_HANDLE_INVALID;
00000c  f64f70ff          MOV      r0,#0xffff
000010  8320              STRH     r0,[r4,#0x18]
;;;185        
;;;186        BLE_UUID_BLE_ASSIGN(ble_uuid, 0x180F);
000012  bf00              NOP      
000014  2001              MOVS     r0,#1
000016  f88d004e          STRB     r0,[sp,#0x4e]
00001a  f641000f          MOV      r0,#0x180f
00001e  f8ad004c          STRH     r0,[sp,#0x4c]
000022  bf00              NOP      
;;;187            
;;;188        // Add service
;;;189        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_bas->service_handle);
000024  1d22              ADDS     r2,r4,#4
000026  a913              ADD      r1,sp,#0x4c
000028  2001              MOVS     r0,#1
00002a  dfa0              SVC      #0xa0
00002c  4606              MOV      r6,r0
;;;190        if (err_code != NRF_SUCCESS)
00002e  b116              CBZ      r6,|L6.54|
;;;191        {
;;;192            return err_code;
000030  4630              MOV      r0,r6
                  |L6.50|
;;;193        } 
;;;194    
;;;195        // Add Battery Level characteristic
;;;196        ble_bas_battery_level_t battery_level_initial_value = p_bas_init->ble_bas_battery_level_initial_value; 
;;;197        p_bas->is_battery_level_notify_supported = p_bas_init->is_battery_level_notify_supported;
;;;198    
;;;199        uint8_t battery_level_encoded_value[MAX_BATTERY_LEVEL_LEN];
;;;200        ble_add_char_params_t add_battery_level_params;
;;;201        memset(&add_battery_level_params, 0, sizeof(add_battery_level_params));
;;;202        
;;;203        add_battery_level_params.uuid                = 0x2A19; 
;;;204        add_battery_level_params.max_len             = MAX_BATTERY_LEVEL_LEN;
;;;205        add_battery_level_params.init_len            = battery_level_encode(&battery_level_initial_value, battery_level_encoded_value);
;;;206        add_battery_level_params.p_init_value        = battery_level_encoded_value; 
;;;207        add_battery_level_params.char_props.notify   = p_bas->is_battery_level_notify_supported; 
;;;208        add_battery_level_params.char_props.read     = 1; 
;;;209        add_battery_level_params.read_access         = SEC_OPEN; 
;;;210        add_battery_level_params.cccd_write_access   = SEC_OPEN;
;;;211        // 1 for variable length and 0 for fixed length.
;;;212        add_battery_level_params.is_var_len          = 1; 
;;;213    
;;;214        // Add Characteristic Presentation Format descriptor 
;;;215        ble_gatts_char_pf_t characteristic_presentation_format;
;;;216    
;;;217        memset(&characteristic_presentation_format, 0, sizeof(characteristic_presentation_format));
;;;218    
;;;219        characteristic_presentation_format.format     = BLE_GATT_CPF_FORMAT_UINT64;   //See BLE_GATT_CPF_FORMATS in ble_gatt.h file for the list of possible values
;;;220        characteristic_presentation_format.desc       = BLE_GATT_CPF_NAMESPACE_BTSIG; //See BLE_GATT_CPF_NAMESPACES in ble_gatt.h file for the list of possible values
;;;221        characteristic_presentation_format.exponent   = -2;                           //Exponent for integer data types.
;;;222        characteristic_presentation_format.name_space = BLE_GATT_CPF_NAMESPACE_BTSIG; //See BLE_GATT_CPF_NAMESPACES in ble_gatt.h file for the list of possible values
;;;223        characteristic_presentation_format.unit       = 0x2702;                       //corresponds to mass (kilogram), see https://developer.bluetooth.org/gatt/units/Pages/default.aspx for the list of units.
;;;224        add_battery_level_params.p_presentation_format = &characteristic_presentation_format; 
;;;225    
;;;226        err_code = characteristic_add(p_bas->service_handle, &add_battery_level_params, &(p_bas->battery_level_handles));
;;;227        if (err_code != NRF_SUCCESS)
;;;228        {
;;;229            return err_code;
;;;230        } 
;;;231    
;;;232        return NRF_SUCCESS;
;;;233    }
000032  b014              ADD      sp,sp,#0x50
000034  bd70              POP      {r4-r6,pc}
                  |L6.54|
000036  f8d50006          LDR      r0,[r5,#6]            ;196
00003a  9010              STR      r0,[sp,#0x40]         ;196
00003c  f8d5000a          LDR      r0,[r5,#0xa]          ;196
000040  9011              STR      r0,[sp,#0x44]         ;196
000042  89e8              LDRH     r0,[r5,#0xe]          ;196
000044  f8ad0048          STRH     r0,[sp,#0x48]         ;196
000048  7928              LDRB     r0,[r5,#4]            ;197
00004a  71a0              STRB     r0,[r4,#6]            ;197
00004c  2120              MOVS     r1,#0x20              ;201
00004e  a803              ADD      r0,sp,#0xc            ;201
000050  f7fffffe          BL       __aeabi_memclr4
000054  f6422019          MOV      r0,#0x2a19            ;203
000058  f8ad000c          STRH     r0,[sp,#0xc]          ;203
00005c  2014              MOVS     r0,#0x14              ;204
00005e  f8ad0010          STRH     r0,[sp,#0x10]         ;204
000062  a90b              ADD      r1,sp,#0x2c           ;205
000064  a810              ADD      r0,sp,#0x40           ;205
000066  f7fffffe          BL       battery_level_encode
00006a  f8ad0012          STRH     r0,[sp,#0x12]         ;205
00006e  a80b              ADD      r0,sp,#0x2c           ;206
000070  9005              STR      r0,[sp,#0x14]         ;206
000072  79a1              LDRB     r1,[r4,#6]            ;207
000074  f89d0019          LDRB     r0,[sp,#0x19]         ;207
000078  f3611004          BFI      r0,r1,#4,#1           ;207
00007c  f88d0019          STRB     r0,[sp,#0x19]         ;207
000080  f89d0019          LDRB     r0,[sp,#0x19]         ;208
000084  f0200002          BIC      r0,r0,#2              ;208
000088  1c80              ADDS     r0,r0,#2              ;208
00008a  f88d0019          STRB     r0,[sp,#0x19]         ;208
00008e  2001              MOVS     r0,#1                 ;209
000090  f88d001d          STRB     r0,[sp,#0x1d]         ;209
000094  f88d001f          STRB     r0,[sp,#0x1f]         ;210
000098  f88d0018          STRB     r0,[sp,#0x18]         ;212
00009c  2000              MOVS     r0,#0                 ;217
00009e  9001              STR      r0,[sp,#4]            ;217
0000a0  9002              STR      r0,[sp,#8]            ;217
0000a2  200a              MOVS     r0,#0xa               ;219
0000a4  f88d0004          STRB     r0,[sp,#4]            ;219
0000a8  2001              MOVS     r0,#1                 ;220
0000aa  f8ad000a          STRH     r0,[sp,#0xa]          ;220
0000ae  20fe              MOVS     r0,#0xfe              ;221
0000b0  f88d0005          STRB     r0,[sp,#5]            ;221
0000b4  2001              MOVS     r0,#1                 ;222
0000b6  f88d0008          STRB     r0,[sp,#8]            ;222
0000ba  f2427002          MOV      r0,#0x2702            ;223
0000be  f8ad0006          STRH     r0,[sp,#6]            ;223
0000c2  a801              ADD      r0,sp,#4              ;224
0000c4  900a              STR      r0,[sp,#0x28]         ;224
0000c6  88a0              LDRH     r0,[r4,#4]            ;226
0000c8  f1040208          ADD      r2,r4,#8              ;226
0000cc  a903              ADD      r1,sp,#0xc            ;226
0000ce  f7fffffe          BL       characteristic_add
0000d2  4606              MOV      r6,r0                 ;226
0000d4  b10e              CBZ      r6,|L6.218|
0000d6  4630              MOV      r0,r6                 ;229
0000d8  e7ab              B        |L6.50|
                  |L6.218|
0000da  2000              MOVS     r0,#0                 ;232
0000dc  e7a9              B        |L6.50|
;;;234    
                          ENDP


                          AREA ||i.ble_bas_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_bas_on_ble_evt PROC
;;;153     */
;;;154    void ble_bas_on_ble_evt(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;156        switch (p_ble_evt->header.evt_id)
000006  8820              LDRH     r0,[r4,#0]
000008  2810              CMP      r0,#0x10
00000a  d006              BEQ      |L7.26|
00000c  2811              CMP      r0,#0x11
00000e  d009              BEQ      |L7.36|
000010  2850              CMP      r0,#0x50
000012  d00c              BEQ      |L7.46|
000014  2851              CMP      r0,#0x51
000016  d114              BNE      |L7.66|
000018  e00e              B        |L7.56|
                  |L7.26|
;;;157        {
;;;158            case BLE_GAP_EVT_CONNECTED:
;;;159                on_connect(p_bas, p_ble_evt);
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       on_connect
;;;160                break;
000022  e00f              B        |L7.68|
                  |L7.36|
;;;161            case BLE_GAP_EVT_DISCONNECTED:
;;;162                on_disconnect(p_bas, p_ble_evt);
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       on_disconnect
;;;163                break;
00002c  e00a              B        |L7.68|
                  |L7.46|
;;;164            case BLE_GATTS_EVT_WRITE:
;;;165                on_write(p_bas, &p_ble_evt->evt.gatts_evt.params.write);
00002e  1da1              ADDS     r1,r4,#6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       on_write
;;;166                break;
000036  e005              B        |L7.68|
                  |L7.56|
;;;167             case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;168                on_rw_authorize_request(p_bas, &p_ble_evt->evt.gatts_evt);
000038  1d21              ADDS     r1,r4,#4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       on_rw_authorize_request
;;;169                break;
000040  e000              B        |L7.68|
                  |L7.66|
;;;170            default:
;;;171                //No implementation needed.
;;;172                break;
000042  bf00              NOP      
                  |L7.68|
000044  bf00              NOP                            ;160
;;;173        }
;;;174    }
000046  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP


                          AREA ||i.characteristic_presentation_format_encode||, CODE, READONLY, ALIGN=1

                  characteristic_presentation_format_encode PROC
;;;69      */
;;;70     static uint8_t characteristic_presentation_format_encode(ble_bas_characteristic_presentation_format_t * p_characteristic_presentation_format, uint8_t * encoded_buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;72         uint8_t len = 0; 
000006  2400              MOVS     r4,#0
;;;73         len += characteristic_presentation_format_format_encode(&p_characteristic_presentation_format->format, &encoded_buffer[len]); 
000008  1929              ADDS     r1,r5,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       characteristic_presentation_format_format_encode
000010  4420              ADD      r0,r0,r4
000012  b2c4              UXTB     r4,r0
;;;74         encoded_buffer[len++] = p_characteristic_presentation_format->exponent;
000014  7872              LDRB     r2,[r6,#1]
000016  4620              MOV      r0,r4
000018  1c61              ADDS     r1,r4,#1
00001a  b2cc              UXTB     r4,r1
00001c  542a              STRB     r2,[r5,r0]
;;;75         len += bds_uint16_encode(&p_characteristic_presentation_format->unit, &encoded_buffer[len]); 
00001e  1929              ADDS     r1,r5,r4
000020  1cb0              ADDS     r0,r6,#2
000022  f7fffffe          BL       bds_uint16_encode
000026  4420              ADD      r0,r0,r4
000028  b2c4              UXTB     r4,r0
;;;76         len += characteristic_presentation_format_namespace_encode(&p_characteristic_presentation_format->namespace, &encoded_buffer[len]); 
00002a  1929              ADDS     r1,r5,r4
00002c  1d30              ADDS     r0,r6,#4
00002e  f7fffffe          BL       characteristic_presentation_format_namespace_encode
000032  4420              ADD      r0,r0,r4
000034  b2c4              UXTB     r4,r0
;;;77         len += bds_uint16_encode(&p_characteristic_presentation_format->description, &encoded_buffer[len]); 
000036  1929              ADDS     r1,r5,r4
000038  1db0              ADDS     r0,r6,#6
00003a  f7fffffe          BL       bds_uint16_encode
00003e  4420              ADD      r0,r0,r4
000040  b2c4              UXTB     r4,r0
;;;78         return len;
000042  4620              MOV      r0,r4
;;;79     }
000044  bd70              POP      {r4-r6,pc}
;;;80         
                          ENDP


                          AREA ||i.characteristic_presentation_format_format_encode||, CODE, READONLY, ALIGN=1

                  characteristic_presentation_format_format_encode PROC
;;;37      */
;;;38     static uint8_t characteristic_presentation_format_format_encode(bas_characteristic_presentation_format_format_t * p_format, uint8_t * encoded_buffer)
000000  4602              MOV      r2,r0
;;;39     {
;;;40         uint8_t format;
;;;41         format = p_format->format;
000002  7813              LDRB     r3,[r2,#0]
;;;42         encoded_buffer[0] = format;
000004  700b              STRB     r3,[r1,#0]
;;;43         return 1; 
000006  2001              MOVS     r0,#1
;;;44     }
000008  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.characteristic_presentation_format_namespace_encode||, CODE, READONLY, ALIGN=1

                  characteristic_presentation_format_namespace_encode PROC
;;;53      */
;;;54     static uint8_t characteristic_presentation_format_namespace_encode(bas_characteristic_presentation_format_namespace_t * p_namespace, uint8_t * encoded_buffer)
000000  4602              MOV      r2,r0
;;;55     {
;;;56         uint8_t namespace;
;;;57         namespace = p_namespace->namespace;
000002  7813              LDRB     r3,[r2,#0]
;;;58         encoded_buffer[0] = namespace;
000004  700b              STRB     r3,[r1,#0]
;;;59         return 1; 
000006  2001              MOVS     r0,#1
;;;60     }
000008  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=1

                  on_connect PROC
;;;86      */
;;;87     static void on_connect(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;88     {
;;;89         p_bas->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  8302              STRH     r2,[r0,#0x18]
;;;90     }
000004  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=1

                  on_disconnect PROC
;;;96      */
;;;97     static void on_disconnect(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)
000000  f64f72ff          MOV      r2,#0xffff
;;;98     {
;;;99         UNUSED_PARAMETER(p_ble_evt);
;;;100        p_bas->conn_handle = BLE_CONN_HANDLE_INVALID;
000004  8302              STRH     r2,[r0,#0x18]
;;;101    }
000006  4770              BX       lr
;;;102    
                          ENDP


                          AREA ||i.on_rw_authorize_request||, CODE, READONLY, ALIGN=1

                  on_rw_authorize_request PROC
;;;130     */
;;;131    static void on_rw_authorize_request(ble_bas_t * p_bas, ble_gatts_evt_t * p_gatts_evt)
000000  4602              MOV      r2,r0
;;;132    {
;;;133        ble_gatts_evt_rw_authorize_request_t * p_auth_req = &p_gatts_evt->params.authorize_request;
000002  1c88              ADDS     r0,r1,#2
;;;134        if (p_auth_req->type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
000004  7803              LDRB     r3,[r0,#0]
000006  2b02              CMP      r3,#2
000008  d100              BNE      |L13.12|
;;;135        {
;;;136            if (   (p_gatts_evt->params.authorize_request.request.write.op
00000a  bf00              NOP      
                  |L13.12|
;;;137                    != BLE_GATTS_OP_PREP_WRITE_REQ)
;;;138                && (p_gatts_evt->params.authorize_request.request.write.op
;;;139                    != BLE_GATTS_OP_EXEC_WRITE_REQ_NOW)
;;;140                && (p_gatts_evt->params.authorize_request.request.write.op
;;;141                    != BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL)
;;;142               )
;;;143            {
;;;144            
;;;145            }
;;;146        }
;;;147    }
00000c  4770              BX       lr
;;;148    
                          ENDP


                          AREA ||i.on_write||, CODE, READONLY, ALIGN=1

                  on_write PROC
;;;107     */
;;;108    static void on_write(ble_bas_t * p_bas, ble_gatts_evt_write_t * p_ble_evt)
000000  b538              PUSH     {r3-r5,lr}
;;;109    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;110        
;;;111        if(p_ble_evt->handle == p_bas->battery_level_handles.cccd_handle)
000006  8821              LDRH     r1,[r4,#0]
000008  89a8              LDRH     r0,[r5,#0xc]
00000a  4281              CMP      r1,r0
00000c  d112              BNE      |L14.52|
;;;112        {
;;;113            if(p_bas->evt_handler != NULL)
00000e  6828              LDR      r0,[r5,#0]
000010  b180              CBZ      r0,|L14.52|
;;;114            {
;;;115                ble_bas_evt_t evt;
;;;116                evt.evt_type = BLE_BAS_BATTERY_LEVEL_EVT_CCCD_WRITE;
000012  2002              MOVS     r0,#2
000014  f88d0000          STRB     r0,[sp,#0]
;;;117                bds_uint16_decode(p_ble_evt->len, p_ble_evt->data, &evt.params.cccd_value);
000018  7aa1              LDRB     r1,[r4,#0xa]
00001a  f10d0002          ADD      r0,sp,#2
00001e  7b22              LDRB     r2,[r4,#0xc]
000020  7b63              LDRB     r3,[r4,#0xd]
000022  ea422203          ORR      r2,r2,r3,LSL #8
000026  8002              STRH     r2,[r0,#0]
000028  bf00              NOP      
;;;118                p_bas->evt_handler(p_bas, &evt);
00002a  4669              MOV      r1,sp
00002c  4628              MOV      r0,r5
00002e  682a              LDR      r2,[r5,#0]
000030  4790              BLX      r2
;;;119            }
000032  bf00              NOP      
                  |L14.52|
;;;120        } 
;;;121    }
000034  bd38              POP      {r3-r5,pc}
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ble_bas.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_bas_c_054de55d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____REVSH|
#line 402
|__asm___9_ble_bas_c_054de55d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____RRX|
#line 587
|__asm___9_ble_bas_c_054de55d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
