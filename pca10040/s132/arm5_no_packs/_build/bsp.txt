; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\bsp.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\bsp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\bsp.crf ..\..\..\..\..\bsp\bsp.c]
                          THUMB

                          AREA ||i.alert_timer_handler||, CODE, READONLY, ALIGN=2

                  alert_timer_handler PROC
;;;473     */
;;;474    static void alert_timer_handler(void * p_context)
000000  4601              MOV      r1,r0
;;;475    {
;;;476        UNUSED_PARAMETER(p_context);
;;;477        LEDS_INVERT(ALERT_LED_MASK);
000002  bf00              NOP      
000004  4a06              LDR      r2,|L1.32|
000006  6810              LDR      r0,[r2,#0]
000008  f44f2200          MOV      r2,#0x80000
00000c  4382              BICS     r2,r2,r0
00000e  4b04              LDR      r3,|L1.32|
000010  1d1b              ADDS     r3,r3,#4
000012  601a              STR      r2,[r3,#0]
000014  f4002200          AND      r2,r0,#0x80000
000018  1d1b              ADDS     r3,r3,#4
00001a  601a              STR      r2,[r3,#0]
00001c  bf00              NOP      
;;;478    }
00001e  4770              BX       lr
;;;479    #endif // #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
                          ENDP

                  |L1.32|
                          DCD      0x50000504

                          AREA ||i.bsp_button_event_handler||, CODE, READONLY, ALIGN=2

                  bsp_button_event_handler PROC
;;;164     */
;;;165    static void bsp_button_event_handler(uint8_t pin_no, uint8_t button_action)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;167        bsp_event_t        event  = BSP_EVENT_NOTHING;
000008  f04f0800          MOV      r8,#0
;;;168        uint32_t           button = 0;
00000c  2400              MOVS     r4,#0
;;;169        uint32_t           err_code;
;;;170        static uint8_t     current_long_push_pin_no;              /**< Pin number of a currently pushed button, that could become a long push if held long enough. */
;;;171        static bsp_event_t release_event_at_push[BUTTONS_NUMBER]; /**< Array of what the release event of each button was last time it was pushed, so that no release event is sent if the event was bound after the push of the button. */
;;;172    
;;;173        while ((button < BUTTONS_NUMBER) && (m_buttons_list[button] != pin_no))
00000e  e000              B        |L2.18|
                  |L2.16|
;;;174        {
;;;175            button++;
000010  1c64              ADDS     r4,r4,#1
                  |L2.18|
000012  2c04              CMP      r4,#4                 ;173
000014  d204              BCS      |L2.32|
000016  482a              LDR      r0,|L2.192|
000018  f8500024          LDR      r0,[r0,r4,LSL #2]     ;173
00001c  42a8              CMP      r0,r5                 ;173
00001e  d1f7              BNE      |L2.16|
                  |L2.32|
;;;176        }
;;;177    
;;;178        if (button < BUTTONS_NUMBER)
000020  2c04              CMP      r4,#4
000022  d241              BCS      |L2.168|
;;;179        {
;;;180            switch (button_action)
000024  b327              CBZ      r7,|L2.112|
000026  2f01              CMP      r7,#1
000028  d002              BEQ      |L2.48|
00002a  2f02              CMP      r7,#2
00002c  d13b              BNE      |L2.166|
00002e  e033              B        |L2.152|
                  |L2.48|
;;;181            {
;;;182                case APP_BUTTON_PUSH:
;;;183                    event = m_events_list[button].push_event;
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  4923              LDR      r1,|L2.196|
000036  f8118000          LDRB     r8,[r1,r0]
;;;184                    if (m_events_list[button].long_push_event != BSP_EVENT_NOTHING)
00003a  eb040044          ADD      r0,r4,r4,LSL #1
00003e  4408              ADD      r0,r0,r1
000040  7840              LDRB     r0,[r0,#1]
000042  b168              CBZ      r0,|L2.96|
;;;185                    {
;;;186                        err_code = app_timer_start(m_button_timer_id, BSP_MS_TO_TICK(BSP_LONG_PUSH_TIMEOUT_MS), (void*)&current_long_push_pin_no);
000044  4820              LDR      r0,|L2.200|
000046  6800              LDR      r0,[r0,#0]  ; m_app_ticks_per_100ms
000048  eb000080          ADD      r0,r0,r0,LSL #2
00004c  0041              LSLS     r1,r0,#1
00004e  4a1f              LDR      r2,|L2.204|
000050  481f              LDR      r0,|L2.208|
000052  6800              LDR      r0,[r0,#0]  ; m_button_timer_id
000054  f7fffffe          BL       app_timer_start
000058  4606              MOV      r6,r0
;;;187                        if (err_code == NRF_SUCCESS)
00005a  b90e              CBNZ     r6,|L2.96|
;;;188                        {
;;;189                            current_long_push_pin_no = pin_no;
00005c  481b              LDR      r0,|L2.204|
00005e  7005              STRB     r5,[r0,#0]
                  |L2.96|
;;;190                        }
;;;191                    }
;;;192                    release_event_at_push[button] = m_events_list[button].release_event;
000060  eb040044          ADD      r0,r4,r4,LSL #1
000064  4917              LDR      r1,|L2.196|
000066  4408              ADD      r0,r0,r1
000068  7880              LDRB     r0,[r0,#2]
00006a  491a              LDR      r1,|L2.212|
00006c  5508              STRB     r0,[r1,r4]
;;;193                    break;
00006e  e01a              B        |L2.166|
                  |L2.112|
;;;194                case APP_BUTTON_RELEASE:
;;;195                    (void)app_timer_stop(m_button_timer_id);
000070  4817              LDR      r0,|L2.208|
000072  6800              LDR      r0,[r0,#0]  ; m_button_timer_id
000074  f7fffffe          BL       app_timer_stop
;;;196                    if (release_event_at_push[button] == m_events_list[button].release_event)
000078  4816              LDR      r0,|L2.212|
00007a  5d00              LDRB     r0,[r0,r4]
00007c  eb040144          ADD      r1,r4,r4,LSL #1
000080  4a10              LDR      r2,|L2.196|
000082  4411              ADD      r1,r1,r2
000084  7889              LDRB     r1,[r1,#2]
000086  4288              CMP      r0,r1
000088  d105              BNE      |L2.150|
;;;197                    {
;;;198                        event = m_events_list[button].release_event;
00008a  eb040044          ADD      r0,r4,r4,LSL #1
00008e  4611              MOV      r1,r2
000090  4408              ADD      r0,r0,r1
000092  f8908002          LDRB     r8,[r0,#2]
                  |L2.150|
;;;199                    }
;;;200                    break;
000096  e006              B        |L2.166|
                  |L2.152|
;;;201                case BSP_BUTTON_ACTION_LONG_PUSH:
;;;202                    event = m_events_list[button].long_push_event;
000098  eb040044          ADD      r0,r4,r4,LSL #1
00009c  4909              LDR      r1,|L2.196|
00009e  4408              ADD      r0,r0,r1
0000a0  f8908001          LDRB     r8,[r0,#1]
0000a4  bf00              NOP                            ;180
                  |L2.166|
0000a6  bf00              NOP                            ;193
                  |L2.168|
;;;203            }
;;;204        }
;;;205    
;;;206        if ((event != BSP_EVENT_NOTHING) && (m_registered_callback != NULL))
0000a8  f1b80f00          CMP      r8,#0
0000ac  d006              BEQ      |L2.188|
0000ae  480a              LDR      r0,|L2.216|
0000b0  6800              LDR      r0,[r0,#0]  ; m_registered_callback
0000b2  b118              CBZ      r0,|L2.188|
;;;207        {
;;;208            m_registered_callback(event);
0000b4  4640              MOV      r0,r8
0000b6  4908              LDR      r1,|L2.216|
0000b8  6809              LDR      r1,[r1,#0]  ; m_registered_callback
0000ba  4788              BLX      r1
                  |L2.188|
;;;209        }
;;;210    }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

                  |L2.192|
                          DCD      m_buttons_list
                  |L2.196|
                          DCD      m_events_list
                  |L2.200|
                          DCD      m_app_ticks_per_100ms
                  |L2.204|
                          DCD      current_long_push_pin_no
                  |L2.208|
                          DCD      m_button_timer_id
                  |L2.212|
                          DCD      release_event_at_push
                  |L2.216|
                          DCD      m_registered_callback

                          AREA ||i.bsp_button_is_pressed||, CODE, READONLY, ALIGN=2

                  bsp_button_is_pressed PROC
;;;139    
;;;140    uint32_t bsp_button_is_pressed(uint32_t button, bool * p_state)
000000  b510              PUSH     {r4,lr}
;;;141    {
000002  4602              MOV      r2,r0
;;;142    #if BUTTONS_NUMBER > 0
;;;143        if (button < BUTTONS_NUMBER)
000004  2a04              CMP      r2,#4
000006  d20e              BCS      |L3.38|
;;;144        {
;;;145            uint32_t buttons = ~NRF_GPIO->IN;
000008  4b09              LDR      r3,|L3.48|
00000a  681b              LDR      r3,[r3,#0]
00000c  43d8              MVNS     r0,r3
;;;146            *p_state = (buttons & (1 << m_buttons_list[button])) ? true : false;
00000e  4b09              LDR      r3,|L3.52|
000010  f8134022          LDRB     r4,[r3,r2,LSL #2]
000014  2301              MOVS     r3,#1
000016  40a3              LSLS     r3,r3,r4
000018  4003              ANDS     r3,r3,r0
00001a  b10b              CBZ      r3,|L3.32|
00001c  2301              MOVS     r3,#1
00001e  e000              B        |L3.34|
                  |L3.32|
000020  2300              MOVS     r3,#0
                  |L3.34|
000022  700b              STRB     r3,[r1,#0]
;;;147        }
000024  e001              B        |L3.42|
                  |L3.38|
;;;148        else
;;;149        {
;;;150            *p_state = false;
000026  2000              MOVS     r0,#0
000028  7008              STRB     r0,[r1,#0]
                  |L3.42|
;;;151        }
;;;152    #else
;;;153        *p_state = false;
;;;154    #endif // BUTTONS_NUMBER > 0
;;;155        return NRF_SUCCESS;
00002a  2000              MOVS     r0,#0
;;;156    }
00002c  bd10              POP      {r4,pc}
;;;157    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x50000510
                  |L3.52|
                          DCD      m_buttons_list

                          AREA ||i.bsp_buttons_disable||, CODE, READONLY, ALIGN=1

                  bsp_buttons_disable PROC
;;;647    
;;;648    uint32_t bsp_buttons_disable()
000000  b510              PUSH     {r4,lr}
;;;649    {
;;;650    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;651        return app_button_disable();
000002  f7fffffe          BL       app_button_disable
;;;652    #else
;;;653        return NRF_ERROR_NOT_SUPPORTED;
;;;654    #endif
;;;655    }
000006  bd10              POP      {r4,pc}
;;;656    
                          ENDP


                          AREA ||i.bsp_buttons_enable||, CODE, READONLY, ALIGN=1

                  bsp_buttons_enable PROC
;;;638    
;;;639    uint32_t bsp_buttons_enable()
000000  b510              PUSH     {r4,lr}
;;;640    {
;;;641    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;642        return app_button_enable();
000002  f7fffffe          BL       app_button_enable
;;;643    #else
;;;644        return NRF_ERROR_NOT_SUPPORTED;
;;;645    #endif
;;;646    }
000006  bd10              POP      {r4,pc}
;;;647    
                          ENDP


                          AREA ||i.bsp_buttons_state_get||, CODE, READONLY, ALIGN=2

                  bsp_buttons_state_get PROC
;;;117    
;;;118    uint32_t bsp_buttons_state_get(uint32_t * p_buttons_state)
000000  b530              PUSH     {r4,r5,lr}
;;;119    {
000002  4601              MOV      r1,r0
;;;120        uint32_t result = NRF_SUCCESS;
000004  2000              MOVS     r0,#0
;;;121    
;;;122        *p_buttons_state = 0;
000006  2400              MOVS     r4,#0
000008  600c              STR      r4,[r1,#0]
;;;123    #if BUTTONS_NUMBER > 0
;;;124        uint32_t buttons = ~NRF_GPIO->IN;
00000a  4c0a              LDR      r4,|L6.52|
00000c  6824              LDR      r4,[r4,#0]
00000e  43e3              MVNS     r3,r4
;;;125        uint32_t cnt;
;;;126    
;;;127        for (cnt = 0; cnt < BUTTONS_NUMBER; cnt++)
000010  2200              MOVS     r2,#0
000012  e00c              B        |L6.46|
                  |L6.20|
;;;128        {
;;;129            if (buttons & (1 << m_buttons_list[cnt]))
000014  4c08              LDR      r4,|L6.56|
000016  f8145022          LDRB     r5,[r4,r2,LSL #2]
00001a  2401              MOVS     r4,#1
00001c  40ac              LSLS     r4,r4,r5
00001e  401c              ANDS     r4,r4,r3
000020  b124              CBZ      r4,|L6.44|
;;;130            {
;;;131                *p_buttons_state |= 1 << cnt;
000022  2501              MOVS     r5,#1
000024  4095              LSLS     r5,r5,r2
000026  680c              LDR      r4,[r1,#0]
000028  432c              ORRS     r4,r4,r5
00002a  600c              STR      r4,[r1,#0]
                  |L6.44|
00002c  1c52              ADDS     r2,r2,#1              ;127
                  |L6.46|
00002e  2a04              CMP      r2,#4                 ;127
000030  d3f0              BCC      |L6.20|
;;;132            }
;;;133        }
;;;134    #endif // BUTTONS_NUMBER > 0
;;;135    
;;;136        return result;
;;;137    }
000032  bd30              POP      {r4,r5,pc}
;;;138    
                          ENDP

                  |L6.52|
                          DCD      0x50000510
                  |L6.56|
                          DCD      m_buttons_list

                          AREA ||i.bsp_event_to_button_action_assign||, CODE, READONLY, ALIGN=2

                  bsp_event_to_button_action_assign PROC
;;;596     */
;;;597    uint32_t bsp_event_to_button_action_assign(uint32_t button, bsp_button_action_t action, bsp_event_t event)
000000  b530              PUSH     {r4,r5,lr}
;;;598    {
000002  4603              MOV      r3,r0
;;;599        uint32_t err_code = NRF_SUCCESS;
000004  2000              MOVS     r0,#0
;;;600    
;;;601    #if BUTTONS_NUMBER > 0
;;;602        if (button < BUTTONS_NUMBER)
000006  2b04              CMP      r3,#4
000008  d223              BCS      |L7.82|
;;;603        {
;;;604            if (event == BSP_EVENT_DEFAULT)
00000a  2a01              CMP      r2,#1
00000c  d107              BNE      |L7.30|
;;;605            {
;;;606                // Setting default action: BSP_EVENT_KEY_x for PUSH actions, BSP_EVENT_NOTHING for RELEASE and LONG_PUSH actions.
;;;607                event = (action == BSP_BUTTON_ACTION_PUSH) ? (bsp_event_t)(BSP_EVENT_KEY_0 + button) : BSP_EVENT_NOTHING;
00000e  2901              CMP      r1,#1
000010  d103              BNE      |L7.26|
000012  f103040d          ADD      r4,r3,#0xd
000016  b2e4              UXTB     r4,r4
000018  e000              B        |L7.28|
                  |L7.26|
00001a  2400              MOVS     r4,#0
                  |L7.28|
00001c  4622              MOV      r2,r4
                  |L7.30|
;;;608            }
;;;609            switch (action)
00001e  b179              CBZ      r1,|L7.64|
000020  2901              CMP      r1,#1
000022  d002              BEQ      |L7.42|
000024  2902              CMP      r1,#2
000026  d111              BNE      |L7.76|
000028  e004              B        |L7.52|
                  |L7.42|
;;;610            {
;;;611                case BSP_BUTTON_ACTION_PUSH:
;;;612                    m_events_list[button].push_event = event;
00002a  eb030443          ADD      r4,r3,r3,LSL #1
00002e  4d0a              LDR      r5,|L7.88|
000030  552a              STRB     r2,[r5,r4]
;;;613                    break;
000032  e00d              B        |L7.80|
                  |L7.52|
;;;614                case BSP_BUTTON_ACTION_LONG_PUSH:
;;;615                    m_events_list[button].long_push_event = event;
000034  eb030443          ADD      r4,r3,r3,LSL #1
000038  4d07              LDR      r5,|L7.88|
00003a  442c              ADD      r4,r4,r5
00003c  7062              STRB     r2,[r4,#1]
;;;616                    break;
00003e  e007              B        |L7.80|
                  |L7.64|
;;;617                case BSP_BUTTON_ACTION_RELEASE:
;;;618                    m_events_list[button].release_event = event;
000040  eb030443          ADD      r4,r3,r3,LSL #1
000044  4d04              LDR      r5,|L7.88|
000046  442c              ADD      r4,r4,r5
000048  70a2              STRB     r2,[r4,#2]
;;;619                    break;
00004a  e001              B        |L7.80|
                  |L7.76|
;;;620                default:
;;;621                    err_code = NRF_ERROR_INVALID_PARAM;
00004c  2007              MOVS     r0,#7
;;;622                    break;
00004e  bf00              NOP      
                  |L7.80|
000050  e000              B        |L7.84|
                  |L7.82|
;;;623            }
;;;624        }
;;;625        else
;;;626        {
;;;627            err_code = NRF_ERROR_INVALID_PARAM;
000052  2007              MOVS     r0,#7
                  |L7.84|
;;;628        }
;;;629    #else
;;;630        err_code = NRF_ERROR_INVALID_PARAM;
;;;631    #endif // BUTTONS_NUMBER > 0
;;;632    
;;;633        return err_code;
;;;634    }
000054  bd30              POP      {r4,r5,pc}
;;;635    
                          ENDP

000056  0000              DCW      0x0000
                  |L7.88|
                          DCD      m_events_list

                          AREA ||i.bsp_indication_set||, CODE, READONLY, ALIGN=2

                  bsp_indication_set PROC
;;;483     */
;;;484    uint32_t bsp_indication_set(bsp_indication_t indicate)
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
000002  4604              MOV      r4,r0
;;;486        uint32_t err_code = NRF_SUCCESS;
000004  2500              MOVS     r5,#0
;;;487    
;;;488    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;489    
;;;490        if (m_indication_type & BSP_INIT_LED)
000006  4805              LDR      r0,|L8.28|
000008  7800              LDRB     r0,[r0,#0]  ; m_indication_type
00000a  f0000001          AND      r0,r0,#1
00000e  b118              CBZ      r0,|L8.24|
;;;491        {
;;;492            err_code = bsp_led_indication(indicate);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       bsp_led_indication
000016  4605              MOV      r5,r0
                  |L8.24|
;;;493        }
;;;494    
;;;495    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;496        return err_code;
000018  4628              MOV      r0,r5
;;;497    }
00001a  bd70              POP      {r4-r6,pc}
;;;498    
                          ENDP

                  |L8.28|
                          DCD      m_indication_type

                          AREA ||i.bsp_indication_text_set||, CODE, READONLY, ALIGN=1

                  bsp_indication_text_set PROC
;;;499    
;;;500    uint32_t bsp_indication_text_set(bsp_indication_t indicate, char const * p_text)
000000  b570              PUSH     {r4-r6,lr}
;;;501    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;502        uint32_t err_code = bsp_indication_set(indicate);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_indication_set
00000c  4605              MOV      r5,r0
;;;503    
;;;504    #ifdef BSP_UART_SUPPORT
;;;505        NRF_LOG_INFO("%s",(uint32_t)p_text);
;;;506    #endif // BSP_UART_SUPPORT
;;;507        return err_code;
00000e  4628              MOV      r0,r5
;;;508    }
000010  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP


                          AREA ||i.bsp_init||, CODE, READONLY, ALIGN=2

                  bsp_init PROC
;;;510    
;;;511    uint32_t bsp_init(uint32_t type, uint32_t ticks_per_100ms, bsp_event_callback_t callback)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;512    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;513        uint32_t err_code = NRF_SUCCESS;
00000a  2400              MOVS     r4,#0
;;;514    
;;;515    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;516        m_app_ticks_per_100ms = ticks_per_100ms;
00000c  4825              LDR      r0,|L10.164|
00000e  6006              STR      r6,[r0,#0]  ; m_app_ticks_per_100ms
;;;517        m_indication_type     = type;
000010  4825              LDR      r0,|L10.168|
000012  6005              STR      r5,[r0,#0]  ; m_indication_type
;;;518    #else
;;;519        UNUSED_VARIABLE(ticks_per_100ms);
;;;520    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;521    
;;;522    #if (BUTTONS_NUMBER > 0) && !(defined BSP_SIMPLE)
;;;523        m_registered_callback = callback;
000014  4825              LDR      r0,|L10.172|
000016  f8c08000          STR      r8,[r0,#0]  ; m_registered_callback
;;;524    
;;;525        // BSP will support buttons and generate events
;;;526        if (type & BSP_INIT_BUTTONS)
00001a  f0050002          AND      r0,r5,#2
00001e  b1f8              CBZ      r0,|L10.96|
;;;527        {
;;;528            uint32_t num;
;;;529    
;;;530            for (num = 0; ((num < BUTTONS_NUMBER) && (err_code == NRF_SUCCESS)); num++)
000020  2700              MOVS     r7,#0
000022  e006              B        |L10.50|
                  |L10.36|
;;;531            {
;;;532                err_code = bsp_event_to_button_action_assign(num, BSP_BUTTON_ACTION_PUSH, BSP_EVENT_DEFAULT);
000024  2201              MOVS     r2,#1
000026  4611              MOV      r1,r2
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       bsp_event_to_button_action_assign
00002e  4604              MOV      r4,r0
000030  1c7f              ADDS     r7,r7,#1              ;530
                  |L10.50|
000032  2f04              CMP      r7,#4                 ;530
000034  d201              BCS      |L10.58|
000036  2c00              CMP      r4,#0                 ;530
000038  d0f4              BEQ      |L10.36|
                  |L10.58|
;;;533            }
;;;534    
;;;535            if (err_code == NRF_SUCCESS)
00003a  b92c              CBNZ     r4,|L10.72|
;;;536            {
;;;537                err_code = app_button_init((app_button_cfg_t *)app_buttons,
00003c  0872              LSRS     r2,r6,#1
00003e  2104              MOVS     r1,#4
000040  481b              LDR      r0,|L10.176|
000042  f7fffffe          BL       app_button_init
000046  4604              MOV      r4,r0
                  |L10.72|
;;;538                                           BUTTONS_NUMBER,
;;;539                                           ticks_per_100ms / 2);
;;;540            }
;;;541    
;;;542            if (err_code == NRF_SUCCESS)
000048  b914              CBNZ     r4,|L10.80|
;;;543            {
;;;544                err_code = app_button_enable();
00004a  f7fffffe          BL       app_button_enable
00004e  4604              MOV      r4,r0
                  |L10.80|
;;;545            }
;;;546    
;;;547            if (err_code == NRF_SUCCESS)
000050  b92c              CBNZ     r4,|L10.94|
;;;548            {
;;;549                err_code = app_timer_create(&m_button_timer_id,
000052  4a18              LDR      r2,|L10.180|
000054  2100              MOVS     r1,#0
000056  4818              LDR      r0,|L10.184|
000058  f7fffffe          BL       app_timer_create
00005c  4604              MOV      r4,r0
                  |L10.94|
;;;550                                            APP_TIMER_MODE_SINGLE_SHOT,
;;;551                                            button_timer_handler);
;;;552            }
;;;553        }
00005e  bf00              NOP      
                  |L10.96|
;;;554    #elif (BUTTONS_NUMBER > 0) && (defined BSP_SIMPLE)
;;;555    
;;;556        if (type & BSP_INIT_BUTTONS)
;;;557        {
;;;558            uint32_t cnt;
;;;559            uint32_t buttons[] = BUTTONS_LIST;
;;;560    
;;;561            for (cnt = 0; cnt < BUTTONS_NUMBER; cnt++)
;;;562            {
;;;563                nrf_gpio_cfg_input(buttons[cnt], BUTTON_PULL);
;;;564            }
;;;565        }
;;;566    #endif // (BUTTONS_NUMBER > 0) && !(defined BSP_SIMPLE)
;;;567    
;;;568    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;569    
;;;570        if (type & BSP_INIT_LED)
000060  f0050001          AND      r0,r5,#1
000064  b168              CBZ      r0,|L10.130|
;;;571        {
;;;572            LEDS_OFF(LEDS_MASK);
000066  bf00              NOP      
000068  f44f10f0          MOV      r0,#0x1e0000
00006c  4913              LDR      r1,|L10.188|
00006e  6008              STR      r0,[r1,#0]
000070  2000              MOVS     r0,#0
000072  1d09              ADDS     r1,r1,#4
000074  6008              STR      r0,[r1,#0]
000076  bf00              NOP      
;;;573            NRF_GPIO->DIRSET = LEDS_MASK;
000078  f44f10f0          MOV      r0,#0x1e0000
00007c  490f              LDR      r1,|L10.188|
00007e  3110              ADDS     r1,r1,#0x10
000080  6008              STR      r0,[r1,#0]
                  |L10.130|
;;;574        }
;;;575    
;;;576        // timers module must be already initialized!
;;;577        if (err_code == NRF_SUCCESS)
000082  b92c              CBNZ     r4,|L10.144|
;;;578        {
;;;579            err_code =
000084  4a0e              LDR      r2,|L10.192|
000086  2100              MOVS     r1,#0
000088  480e              LDR      r0,|L10.196|
00008a  f7fffffe          BL       app_timer_create
00008e  4604              MOV      r4,r0
                  |L10.144|
;;;580                app_timer_create(&m_leds_timer_id, APP_TIMER_MODE_SINGLE_SHOT, leds_timer_handler);
;;;581        }
;;;582    
;;;583        if (err_code == NRF_SUCCESS)
000090  b92c              CBNZ     r4,|L10.158|
;;;584        {
;;;585            err_code =
000092  4a0d              LDR      r2,|L10.200|
000094  2101              MOVS     r1,#1
000096  480d              LDR      r0,|L10.204|
000098  f7fffffe          BL       app_timer_create
00009c  4604              MOV      r4,r0
                  |L10.158|
;;;586                app_timer_create(&m_alert_timer_id, APP_TIMER_MODE_REPEATED, alert_timer_handler);
;;;587        }
;;;588    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;589    
;;;590        return err_code;
00009e  4620              MOV      r0,r4
;;;591    }
0000a0  e8bd81f0          POP      {r4-r8,pc}
;;;592    
                          ENDP

                  |L10.164|
                          DCD      m_app_ticks_per_100ms
                  |L10.168|
                          DCD      m_indication_type
                  |L10.172|
                          DCD      m_registered_callback
                  |L10.176|
                          DCD      app_buttons
                  |L10.180|
                          DCD      button_timer_handler
                  |L10.184|
                          DCD      m_button_timer_id
                  |L10.188|
                          DCD      0x50000508
                  |L10.192|
                          DCD      leds_timer_handler
                  |L10.196|
                          DCD      m_leds_timer_id
                  |L10.200|
                          DCD      alert_timer_handler
                  |L10.204|
                          DCD      m_alert_timer_id

                          AREA ||i.bsp_led_indication||, CODE, READONLY, ALIGN=2

                  bsp_led_indication PROC
;;;227     */
;;;228    static uint32_t bsp_led_indication(bsp_indication_t indicate)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;229    {
000004  4604              MOV      r4,r0
;;;230        uint32_t err_code   = NRF_SUCCESS;
000006  2600              MOVS     r6,#0
;;;231        uint32_t next_delay = 0;
000008  2500              MOVS     r5,#0
;;;232    
;;;233        switch (indicate)
00000a  2c18              CMP      r4,#0x18
00000c  d27d              BCS      |L11.266|
00000e  e8dff004          TBB      [pc,r4]
000012  0c1d              DCB      0x0c,0x1d
000014  1e68b4ee          DCB      0x1e,0x68,0xb4,0xee
000018  edecebea          DCB      0xed,0xec,0xeb,0xea
00001c  e9e8e7e6          DCB      0xe9,0xe8,0xe7,0xe6
000020  e5e4e3e2          DCB      0xe5,0xe4,0xe3,0xe2
000024  e1e0dfde          DCB      0xe1,0xe0,0xdf,0xde
000028  dddc              DCB      0xdd,0xdc
;;;234        {
;;;235            case BSP_INDICATE_IDLE:
;;;236                LEDS_OFF(LEDS_MASK & ~m_alert_mask);
00002a  bf00              NOP      
00002c  48fd              LDR      r0,|L11.1060|
00002e  6801              LDR      r1,[r0,#0]  ; m_alert_mask
000030  f44f10f0          MOV      r0,#0x1e0000
000034  4388              BICS     r0,r0,r1
000036  f40010f0          AND      r0,r0,#0x1e0000
00003a  49fb              LDR      r1,|L11.1064|
00003c  6008              STR      r0,[r1,#0]
00003e  2000              MOVS     r0,#0
000040  1d09              ADDS     r1,r1,#4
000042  6008              STR      r0,[r1,#0]
000044  bf00              NOP      
;;;237                m_stable_state = indicate;
000046  48f9              LDR      r0,|L11.1068|
000048  7004              STRB     r4,[r0,#0]
;;;238                break;
00004a  e298              B        |L11.1406|
;;;239    
;;;240            case BSP_INDICATE_SCANNING:
;;;241            case BSP_INDICATE_ADVERTISING:
00004c  bf00              NOP      
;;;242                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
00004e  bf00              NOP      
000050  48f4              LDR      r0,|L11.1060|
000052  6801              LDR      r1,[r0,#0]  ; m_alert_mask
000054  f44f10e0          MOV      r0,#0x1c0000
000058  4388              BICS     r0,r0,r1
00005a  f40010f0          AND      r0,r0,#0x1e0000
00005e  49f2              LDR      r1,|L11.1064|
000060  6008              STR      r0,[r1,#0]
000062  2000              MOVS     r0,#0
000064  1d09              ADDS     r1,r1,#4
000066  6008              STR      r0,[r1,#0]
000068  bf00              NOP      
;;;243    
;;;244                // in advertising blink LED_0
;;;245                if (LED_IS_ON(BSP_LED_0_MASK))
00006a  48ef              LDR      r0,|L11.1064|
00006c  1f00              SUBS     r0,r0,#4
00006e  6800              LDR      r0,[r0,#0]
000070  f48010f0          EOR      r0,r0,#0x1e0000
000074  f4003000          AND      r0,r0,#0x20000
000078  b188              CBZ      r0,|L11.158|
;;;246                {
;;;247                    LEDS_OFF(BSP_LED_0_MASK);
00007a  bf00              NOP      
00007c  f44f3000          MOV      r0,#0x20000
000080  1f09              SUBS     r1,r1,#4
000082  6008              STR      r0,[r1,#0]
000084  2000              MOVS     r0,#0
000086  1d09              ADDS     r1,r1,#4
000088  6008              STR      r0,[r1,#0]
00008a  bf00              NOP      
;;;248                    next_delay = indicate ==
00008c  2c02              CMP      r4,#2
00008e  d102              BNE      |L11.150|
;;;249                                 BSP_INDICATE_ADVERTISING ? ADVERTISING_LED_OFF_INTERVAL :
000090  f44f60e1          MOV      r0,#0x708
000094  e001              B        |L11.154|
                  |L11.150|
;;;250                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
000096  f44f607a          MOV      r0,#0xfa0
                  |L11.154|
00009a  4605              MOV      r5,r0
00009c  e010              B        |L11.192|
                  |L11.158|
;;;251                }
;;;252                else
;;;253                {
;;;254                    LEDS_ON(BSP_LED_0_MASK);
00009e  bf00              NOP      
0000a0  f44f3000          MOV      r0,#0x20000
0000a4  49e0              LDR      r1,|L11.1064|
0000a6  1d09              ADDS     r1,r1,#4
0000a8  6008              STR      r0,[r1,#0]
0000aa  2000              MOVS     r0,#0
0000ac  1f09              SUBS     r1,r1,#4
0000ae  6008              STR      r0,[r1,#0]
0000b0  bf00              NOP      
;;;255                    next_delay = indicate ==
0000b2  2c02              CMP      r4,#2
0000b4  d101              BNE      |L11.186|
;;;256                                 BSP_INDICATE_ADVERTISING ? ADVERTISING_LED_ON_INTERVAL :
0000b6  20c8              MOVS     r0,#0xc8
0000b8  e001              B        |L11.190|
                  |L11.186|
;;;257                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
0000ba  f44f70c8          MOV      r0,#0x190
                  |L11.190|
0000be  4605              MOV      r5,r0
                  |L11.192|
;;;258                }
;;;259    
;;;260                m_stable_state = indicate;
0000c0  48da              LDR      r0,|L11.1068|
0000c2  7004              STRB     r4,[r0,#0]
;;;261                err_code       = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(next_delay), NULL);
0000c4  2064              MOVS     r0,#0x64
0000c6  fbb5f0f0          UDIV     r0,r5,r0
0000ca  49d9              LDR      r1,|L11.1072|
0000cc  6809              LDR      r1,[r1,#0]  ; m_app_ticks_per_100ms
0000ce  fb00f701          MUL      r7,r0,r1
0000d2  2200              MOVS     r2,#0
0000d4  4639              MOV      r1,r7
0000d6  48d7              LDR      r0,|L11.1076|
0000d8  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0000da  f7fffffe          BL       app_timer_start
0000de  4606              MOV      r6,r0
;;;262                break;
0000e0  e24d              B        |L11.1406|
;;;263    
;;;264            case BSP_INDICATE_ADVERTISING_WHITELIST:
;;;265                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
0000e2  bf00              NOP      
0000e4  48cf              LDR      r0,|L11.1060|
0000e6  6801              LDR      r1,[r0,#0]  ; m_alert_mask
0000e8  f44f10e0          MOV      r0,#0x1c0000
0000ec  4388              BICS     r0,r0,r1
0000ee  f40010f0          AND      r0,r0,#0x1e0000
0000f2  49cd              LDR      r1,|L11.1064|
0000f4  6008              STR      r0,[r1,#0]
0000f6  2000              MOVS     r0,#0
0000f8  1d09              ADDS     r1,r1,#4
0000fa  6008              STR      r0,[r1,#0]
0000fc  bf00              NOP      
;;;266    
;;;267                // in advertising quickly blink LED_0
;;;268                if (LED_IS_ON(BSP_LED_0_MASK))
0000fe  48ca              LDR      r0,|L11.1064|
000100  1f00              SUBS     r0,r0,#4
000102  6800              LDR      r0,[r0,#0]
000104  f48010f0          EOR      r0,r0,#0x1e0000
000108  e000              B        |L11.268|
                  |L11.266|
00010a  e237              B        |L11.1404|
                  |L11.268|
00010c  f4003000          AND      r0,r0,#0x20000
000110  b188              CBZ      r0,|L11.310|
;;;269                {
;;;270                    LEDS_OFF(BSP_LED_0_MASK);
000112  bf00              NOP      
000114  f44f3000          MOV      r0,#0x20000
000118  1f09              SUBS     r1,r1,#4
00011a  6008              STR      r0,[r1,#0]
00011c  2000              MOVS     r0,#0
00011e  1d09              ADDS     r1,r1,#4
000120  6008              STR      r0,[r1,#0]
000122  bf00              NOP      
;;;271                    next_delay = indicate ==
000124  2c03              CMP      r4,#3
000126  d102              BNE      |L11.302|
;;;272                                 BSP_INDICATE_ADVERTISING_WHITELIST ?
;;;273                                 ADVERTISING_WHITELIST_LED_OFF_INTERVAL :
000128  f44f7048          MOV      r0,#0x320
00012c  e001              B        |L11.306|
                  |L11.302|
;;;274                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
00012e  f44f607a          MOV      r0,#0xfa0
                  |L11.306|
000132  4605              MOV      r5,r0
000134  e010              B        |L11.344|
                  |L11.310|
;;;275                }
;;;276                else
;;;277                {
;;;278                    LEDS_ON(BSP_LED_0_MASK);
000136  bf00              NOP      
000138  f44f3000          MOV      r0,#0x20000
00013c  49ba              LDR      r1,|L11.1064|
00013e  1d09              ADDS     r1,r1,#4
000140  6008              STR      r0,[r1,#0]
000142  2000              MOVS     r0,#0
000144  1f09              SUBS     r1,r1,#4
000146  6008              STR      r0,[r1,#0]
000148  bf00              NOP      
;;;279                    next_delay = indicate ==
00014a  2c03              CMP      r4,#3
00014c  d101              BNE      |L11.338|
;;;280                                 BSP_INDICATE_ADVERTISING_WHITELIST ?
;;;281                                 ADVERTISING_WHITELIST_LED_ON_INTERVAL :
00014e  20c8              MOVS     r0,#0xc8
000150  e001              B        |L11.342|
                  |L11.338|
;;;282                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
000152  f44f70c8          MOV      r0,#0x190
                  |L11.342|
000156  4605              MOV      r5,r0
                  |L11.344|
;;;283                }
;;;284                m_stable_state = indicate;
000158  48b4              LDR      r0,|L11.1068|
00015a  7004              STRB     r4,[r0,#0]
;;;285                err_code       = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(next_delay), NULL);
00015c  2064              MOVS     r0,#0x64
00015e  fbb5f0f0          UDIV     r0,r5,r0
000162  49b3              LDR      r1,|L11.1072|
000164  6809              LDR      r1,[r1,#0]  ; m_app_ticks_per_100ms
000166  fb00f701          MUL      r7,r0,r1
00016a  2200              MOVS     r2,#0
00016c  4639              MOV      r1,r7
00016e  48b1              LDR      r0,|L11.1076|
000170  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000172  f7fffffe          BL       app_timer_start
000176  4606              MOV      r6,r0
;;;286                break;
000178  e201              B        |L11.1406|
;;;287    
;;;288            case BSP_INDICATE_ADVERTISING_SLOW:
;;;289                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
00017a  bf00              NOP      
00017c  48a9              LDR      r0,|L11.1060|
00017e  6801              LDR      r1,[r0,#0]  ; m_alert_mask
000180  f44f10e0          MOV      r0,#0x1c0000
000184  4388              BICS     r0,r0,r1
000186  f40010f0          AND      r0,r0,#0x1e0000
00018a  49a7              LDR      r1,|L11.1064|
00018c  6008              STR      r0,[r1,#0]
00018e  2000              MOVS     r0,#0
000190  1d09              ADDS     r1,r1,#4
000192  6008              STR      r0,[r1,#0]
000194  bf00              NOP      
;;;290    
;;;291                // in advertising slowly blink LED_0
;;;292                if (LED_IS_ON(BSP_LED_0_MASK))
000196  48a4              LDR      r0,|L11.1064|
000198  1f00              SUBS     r0,r0,#4
00019a  6800              LDR      r0,[r0,#0]
00019c  f48010f0          EOR      r0,r0,#0x1e0000
0001a0  f4003000          AND      r0,r0,#0x20000
0001a4  b320              CBZ      r0,|L11.496|
;;;293                {
;;;294                    LEDS_OFF(BSP_LED_0_MASK);
0001a6  bf00              NOP      
0001a8  f44f3000          MOV      r0,#0x20000
0001ac  1f09              SUBS     r1,r1,#4
0001ae  6008              STR      r0,[r1,#0]
0001b0  2000              MOVS     r0,#0
0001b2  1d09              ADDS     r1,r1,#4
0001b4  6008              STR      r0,[r1,#0]
0001b6  bf00              NOP      
;;;295                    next_delay = indicate ==
0001b8  2c04              CMP      r4,#4
0001ba  d102              BNE      |L11.450|
;;;296                                 BSP_INDICATE_ADVERTISING_SLOW ? ADVERTISING_SLOW_LED_OFF_INTERVAL :
0001bc  f44f607a          MOV      r0,#0xfa0
0001c0  e001              B        |L11.454|
                  |L11.450|
;;;297                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
0001c2  f44f607a          MOV      r0,#0xfa0
                  |L11.454|
0001c6  4605              MOV      r5,r0
0001c8  e024              B        |L11.532|
0001ca  e1cb              B        |L11.1380|
0001cc  e1c9              B        |L11.1378|
0001ce  e1b3              B        |L11.1336|
0001d0  e19d              B        |L11.1294|
0001d2  e187              B        |L11.1252|
0001d4  e179              B        |L11.1226|
0001d6  e13f              B        |L11.1112|
0001d8  e13d              B        |L11.1110|
0001da  e13b              B        |L11.1108|
0001dc  e139              B        |L11.1106|
0001de  e137              B        |L11.1104|
0001e0  e12a              B        |L11.1080|
0001e2  e105              B        |L11.1008|
0001e4  e0ed              B        |L11.962|
0001e6  e0d3              B        |L11.912|
0001e8  e0bb              B        |L11.866|
0001ea  e0a1              B        |L11.816|
0001ec  e06c              B        |L11.712|
0001ee  e022              B        |L11.566|
                  |L11.496|
;;;298                }
;;;299                else
;;;300                {
;;;301                    LEDS_ON(BSP_LED_0_MASK);
0001f0  bf00              NOP      
0001f2  f44f3000          MOV      r0,#0x20000
0001f6  498c              LDR      r1,|L11.1064|
0001f8  1d09              ADDS     r1,r1,#4
0001fa  6008              STR      r0,[r1,#0]
0001fc  2000              MOVS     r0,#0
0001fe  1f09              SUBS     r1,r1,#4
000200  6008              STR      r0,[r1,#0]
000202  bf00              NOP      
;;;302                    next_delay = indicate ==
000204  2c04              CMP      r4,#4
000206  d102              BNE      |L11.526|
;;;303                                 BSP_INDICATE_ADVERTISING_SLOW ? ADVERTISING_SLOW_LED_ON_INTERVAL :
000208  f44f70c8          MOV      r0,#0x190
00020c  e001              B        |L11.530|
                  |L11.526|
;;;304                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
00020e  f44f70c8          MOV      r0,#0x190
                  |L11.530|
000212  4605              MOV      r5,r0
                  |L11.532|
;;;305                }
;;;306                m_stable_state = indicate;
000214  4885              LDR      r0,|L11.1068|
000216  7004              STRB     r4,[r0,#0]
;;;307                err_code       = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(next_delay), NULL);
000218  2064              MOVS     r0,#0x64
00021a  fbb5f0f0          UDIV     r0,r5,r0
00021e  4984              LDR      r1,|L11.1072|
000220  6809              LDR      r1,[r1,#0]  ; m_app_ticks_per_100ms
000222  fb00f701          MUL      r7,r0,r1
000226  2200              MOVS     r2,#0
000228  4639              MOV      r1,r7
00022a  4882              LDR      r0,|L11.1076|
00022c  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
00022e  f7fffffe          BL       app_timer_start
000232  4606              MOV      r6,r0
;;;308                break;
000234  e1a3              B        |L11.1406|
                  |L11.566|
;;;309    
;;;310            case BSP_INDICATE_ADVERTISING_DIRECTED:
;;;311                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
000236  bf00              NOP      
000238  487a              LDR      r0,|L11.1060|
00023a  6801              LDR      r1,[r0,#0]  ; m_alert_mask
00023c  f44f10e0          MOV      r0,#0x1c0000
000240  4388              BICS     r0,r0,r1
000242  f40010f0          AND      r0,r0,#0x1e0000
000246  4978              LDR      r1,|L11.1064|
000248  6008              STR      r0,[r1,#0]
00024a  2000              MOVS     r0,#0
00024c  1d09              ADDS     r1,r1,#4
00024e  6008              STR      r0,[r1,#0]
000250  bf00              NOP      
;;;312    
;;;313                // in advertising very quickly blink LED_0
;;;314                if (LED_IS_ON(BSP_LED_0_MASK))
000252  4875              LDR      r0,|L11.1064|
000254  1f00              SUBS     r0,r0,#4
000256  6800              LDR      r0,[r0,#0]
000258  f48010f0          EOR      r0,r0,#0x1e0000
00025c  f4003000          AND      r0,r0,#0x20000
000260  b180              CBZ      r0,|L11.644|
;;;315                {
;;;316                    LEDS_OFF(BSP_LED_0_MASK);
000262  bf00              NOP      
000264  f44f3000          MOV      r0,#0x20000
000268  1f09              SUBS     r1,r1,#4
00026a  6008              STR      r0,[r1,#0]
00026c  2000              MOVS     r0,#0
00026e  1d09              ADDS     r1,r1,#4
000270  6008              STR      r0,[r1,#0]
000272  bf00              NOP      
;;;317                    next_delay = indicate ==
000274  2c05              CMP      r4,#5
000276  d101              BNE      |L11.636|
;;;318                                 BSP_INDICATE_ADVERTISING_DIRECTED ?
;;;319                                 ADVERTISING_DIRECTED_LED_OFF_INTERVAL :
000278  20c8              MOVS     r0,#0xc8
00027a  e001              B        |L11.640|
                  |L11.636|
;;;320                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
00027c  f44f607a          MOV      r0,#0xfa0
                  |L11.640|
000280  4605              MOV      r5,r0
000282  e010              B        |L11.678|
                  |L11.644|
;;;321                }
;;;322                else
;;;323                {
;;;324                    LEDS_ON(BSP_LED_0_MASK);
000284  bf00              NOP      
000286  f44f3000          MOV      r0,#0x20000
00028a  4967              LDR      r1,|L11.1064|
00028c  1d09              ADDS     r1,r1,#4
00028e  6008              STR      r0,[r1,#0]
000290  2000              MOVS     r0,#0
000292  1f09              SUBS     r1,r1,#4
000294  6008              STR      r0,[r1,#0]
000296  bf00              NOP      
;;;325                    next_delay = indicate ==
000298  2c05              CMP      r4,#5
00029a  d101              BNE      |L11.672|
;;;326                                 BSP_INDICATE_ADVERTISING_DIRECTED ?
;;;327                                 ADVERTISING_DIRECTED_LED_ON_INTERVAL :
00029c  20c8              MOVS     r0,#0xc8
00029e  e001              B        |L11.676|
                  |L11.672|
;;;328                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
0002a0  f44f70c8          MOV      r0,#0x190
                  |L11.676|
0002a4  4605              MOV      r5,r0
                  |L11.678|
;;;329                }
;;;330                m_stable_state = indicate;
0002a6  4861              LDR      r0,|L11.1068|
0002a8  7004              STRB     r4,[r0,#0]
;;;331                err_code       = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(next_delay), NULL);
0002aa  2064              MOVS     r0,#0x64
0002ac  fbb5f0f0          UDIV     r0,r5,r0
0002b0  495f              LDR      r1,|L11.1072|
0002b2  6809              LDR      r1,[r1,#0]  ; m_app_ticks_per_100ms
0002b4  fb00f701          MUL      r7,r0,r1
0002b8  2200              MOVS     r2,#0
0002ba  4639              MOV      r1,r7
0002bc  485d              LDR      r0,|L11.1076|
0002be  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0002c0  f7fffffe          BL       app_timer_start
0002c4  4606              MOV      r6,r0
;;;332                break;
0002c6  e15a              B        |L11.1406|
                  |L11.712|
;;;333    
;;;334            case BSP_INDICATE_BONDING:
;;;335                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
0002c8  bf00              NOP      
0002ca  4856              LDR      r0,|L11.1060|
0002cc  6801              LDR      r1,[r0,#0]  ; m_alert_mask
0002ce  f44f10e0          MOV      r0,#0x1c0000
0002d2  4388              BICS     r0,r0,r1
0002d4  f40010f0          AND      r0,r0,#0x1e0000
0002d8  4953              LDR      r1,|L11.1064|
0002da  6008              STR      r0,[r1,#0]
0002dc  2000              MOVS     r0,#0
0002de  1d09              ADDS     r1,r1,#4
0002e0  6008              STR      r0,[r1,#0]
0002e2  bf00              NOP      
;;;336    
;;;337                // in bonding fast blink LED_0
;;;338                if (LED_IS_ON(BSP_LED_0_MASK))
0002e4  4850              LDR      r0,|L11.1064|
0002e6  1f00              SUBS     r0,r0,#4
0002e8  6800              LDR      r0,[r0,#0]
0002ea  f48010f0          EOR      r0,r0,#0x1e0000
0002ee  f4003000          AND      r0,r0,#0x20000
0002f2  b140              CBZ      r0,|L11.774|
;;;339                {
;;;340                    LEDS_OFF(BSP_LED_0_MASK);
0002f4  bf00              NOP      
0002f6  f44f3000          MOV      r0,#0x20000
0002fa  1f09              SUBS     r1,r1,#4
0002fc  6008              STR      r0,[r1,#0]
0002fe  2000              MOVS     r0,#0
000300  1d09              ADDS     r1,r1,#4
000302  6008              STR      r0,[r1,#0]
000304  e009              B        |L11.794|
                  |L11.774|
;;;341                }
;;;342                else
;;;343                {
;;;344                    LEDS_ON(BSP_LED_0_MASK);
000306  bf00              NOP      
000308  f44f3000          MOV      r0,#0x20000
00030c  4946              LDR      r1,|L11.1064|
00030e  1d09              ADDS     r1,r1,#4
000310  6008              STR      r0,[r1,#0]
000312  2000              MOVS     r0,#0
000314  1f09              SUBS     r1,r1,#4
000316  6008              STR      r0,[r1,#0]
000318  bf00              NOP      
                  |L11.794|
;;;345                }
;;;346    
;;;347                m_stable_state = indicate;
00031a  4844              LDR      r0,|L11.1068|
00031c  7004              STRB     r4,[r0,#0]
;;;348                err_code       =
00031e  4844              LDR      r0,|L11.1072|
000320  2200              MOVS     r2,#0
000322  6801              LDR      r1,[r0,#0]  ; m_app_ticks_per_100ms
000324  4843              LDR      r0,|L11.1076|
000326  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000328  f7fffffe          BL       app_timer_start
00032c  4606              MOV      r6,r0
;;;349                    app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(BONDING_INTERVAL), NULL);
;;;350                break;
00032e  e126              B        |L11.1406|
                  |L11.816|
;;;351    
;;;352            case BSP_INDICATE_CONNECTED:
;;;353                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK & ~m_alert_mask);
000330  bf00              NOP      
000332  483c              LDR      r0,|L11.1060|
000334  6801              LDR      r1,[r0,#0]  ; m_alert_mask
000336  f44f10e0          MOV      r0,#0x1c0000
00033a  4388              BICS     r0,r0,r1
00033c  f40010f0          AND      r0,r0,#0x1e0000
000340  4939              LDR      r1,|L11.1064|
000342  6008              STR      r0,[r1,#0]
000344  2000              MOVS     r0,#0
000346  1d09              ADDS     r1,r1,#4
000348  6008              STR      r0,[r1,#0]
00034a  bf00              NOP      
;;;354                LEDS_ON(BSP_LED_0_MASK);
00034c  bf00              NOP      
00034e  f44f3000          MOV      r0,#0x20000
000352  6008              STR      r0,[r1,#0]
000354  2000              MOVS     r0,#0
000356  1f09              SUBS     r1,r1,#4
000358  6008              STR      r0,[r1,#0]
00035a  bf00              NOP      
;;;355                m_stable_state = indicate;
00035c  4833              LDR      r0,|L11.1068|
00035e  7004              STRB     r4,[r0,#0]
;;;356                break;
000360  e10d              B        |L11.1406|
                  |L11.866|
;;;357    
;;;358            case BSP_INDICATE_SENT_OK:
;;;359                // when sending shortly invert LED_1
;;;360                LEDS_INVERT(BSP_LED_1_MASK);
000362  bf00              NOP      
000364  4930              LDR      r1,|L11.1064|
000366  1f09              SUBS     r1,r1,#4
000368  6808              LDR      r0,[r1,#0]
00036a  f44f2180          MOV      r1,#0x40000
00036e  4381              BICS     r1,r1,r0
000370  4a2d              LDR      r2,|L11.1064|
000372  6011              STR      r1,[r2,#0]
000374  f4002180          AND      r1,r0,#0x40000
000378  1d12              ADDS     r2,r2,#4
00037a  6011              STR      r1,[r2,#0]
00037c  bf00              NOP      
;;;361                err_code = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(SENT_OK_INTERVAL), NULL);
00037e  482c              LDR      r0,|L11.1072|
000380  2200              MOVS     r2,#0
000382  6801              LDR      r1,[r0,#0]  ; m_app_ticks_per_100ms
000384  482b              LDR      r0,|L11.1076|
000386  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000388  f7fffffe          BL       app_timer_start
00038c  4606              MOV      r6,r0
;;;362                break;
00038e  e0f6              B        |L11.1406|
                  |L11.912|
;;;363    
;;;364            case BSP_INDICATE_SEND_ERROR:
;;;365                // on receving error invert LED_1 for long time
;;;366                LEDS_INVERT(BSP_LED_1_MASK);
000390  bf00              NOP      
000392  4925              LDR      r1,|L11.1064|
000394  1f09              SUBS     r1,r1,#4
000396  6808              LDR      r0,[r1,#0]
000398  f44f2180          MOV      r1,#0x40000
00039c  4381              BICS     r1,r1,r0
00039e  4a22              LDR      r2,|L11.1064|
0003a0  6011              STR      r1,[r2,#0]
0003a2  f4002180          AND      r1,r0,#0x40000
0003a6  1d12              ADDS     r2,r2,#4
0003a8  6011              STR      r1,[r2,#0]
0003aa  bf00              NOP      
;;;367                err_code = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(SEND_ERROR_INTERVAL), NULL);
0003ac  4820              LDR      r0,|L11.1072|
0003ae  6800              LDR      r0,[r0,#0]  ; m_app_ticks_per_100ms
0003b0  eb000180          ADD      r1,r0,r0,LSL #2
0003b4  2200              MOVS     r2,#0
0003b6  481f              LDR      r0,|L11.1076|
0003b8  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0003ba  f7fffffe          BL       app_timer_start
0003be  4606              MOV      r6,r0
;;;368                break;
0003c0  e0dd              B        |L11.1406|
                  |L11.962|
;;;369    
;;;370            case BSP_INDICATE_RCV_OK:
;;;371                // when receving shortly invert LED_1
;;;372                LEDS_INVERT(BSP_LED_1_MASK);
0003c2  bf00              NOP      
0003c4  4918              LDR      r1,|L11.1064|
0003c6  1f09              SUBS     r1,r1,#4
0003c8  6808              LDR      r0,[r1,#0]
0003ca  f44f2180          MOV      r1,#0x40000
0003ce  4381              BICS     r1,r1,r0
0003d0  4a15              LDR      r2,|L11.1064|
0003d2  6011              STR      r1,[r2,#0]
0003d4  f4002180          AND      r1,r0,#0x40000
0003d8  1d12              ADDS     r2,r2,#4
0003da  6011              STR      r1,[r2,#0]
0003dc  bf00              NOP      
;;;373                err_code = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(RCV_OK_INTERVAL), NULL);
0003de  4814              LDR      r0,|L11.1072|
0003e0  2200              MOVS     r2,#0
0003e2  6801              LDR      r1,[r0,#0]  ; m_app_ticks_per_100ms
0003e4  4813              LDR      r0,|L11.1076|
0003e6  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0003e8  f7fffffe          BL       app_timer_start
0003ec  4606              MOV      r6,r0
;;;374                break;
0003ee  e0c6              B        |L11.1406|
                  |L11.1008|
;;;375    
;;;376            case BSP_INDICATE_RCV_ERROR:
;;;377                // on receving error invert LED_1 for long time
;;;378                LEDS_INVERT(BSP_LED_1_MASK);
0003f0  bf00              NOP      
0003f2  490d              LDR      r1,|L11.1064|
0003f4  1f09              SUBS     r1,r1,#4
0003f6  6808              LDR      r0,[r1,#0]
0003f8  f44f2180          MOV      r1,#0x40000
0003fc  4381              BICS     r1,r1,r0
0003fe  4a0a              LDR      r2,|L11.1064|
000400  6011              STR      r1,[r2,#0]
000402  f4002180          AND      r1,r0,#0x40000
000406  1d12              ADDS     r2,r2,#4
000408  6011              STR      r1,[r2,#0]
00040a  bf00              NOP      
;;;379                err_code = app_timer_start(m_leds_timer_id, BSP_MS_TO_TICK(RCV_ERROR_INTERVAL), NULL);
00040c  4808              LDR      r0,|L11.1072|
00040e  6800              LDR      r0,[r0,#0]  ; m_app_ticks_per_100ms
000410  eb000180          ADD      r1,r0,r0,LSL #2
000414  2200              MOVS     r2,#0
000416  4807              LDR      r0,|L11.1076|
000418  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
00041a  f7fffffe          BL       app_timer_start
00041e  4606              MOV      r6,r0
;;;380                break;
000420  e0ad              B        |L11.1406|
000422  0000              DCW      0x0000
                  |L11.1060|
                          DCD      m_alert_mask
                  |L11.1064|
                          DCD      0x50000508
                  |L11.1068|
                          DCD      m_stable_state
                  |L11.1072|
                          DCD      m_app_ticks_per_100ms
                  |L11.1076|
                          DCD      m_leds_timer_id
                  |L11.1080|
;;;381    
;;;382            case BSP_INDICATE_FATAL_ERROR:
;;;383                // on fatal error turn on all leds
;;;384                LEDS_ON(LEDS_MASK);
000438  bf00              NOP      
00043a  f44f10f0          MOV      r0,#0x1e0000
00043e  4952              LDR      r1,|L11.1416|
000440  6008              STR      r0,[r1,#0]
000442  2000              MOVS     r0,#0
000444  1f09              SUBS     r1,r1,#4
000446  6008              STR      r0,[r1,#0]
000448  bf00              NOP      
;;;385                m_stable_state = indicate;
00044a  4850              LDR      r0,|L11.1420|
00044c  7004              STRB     r4,[r0,#0]
;;;386                break;
00044e  e096              B        |L11.1406|
                  |L11.1104|
;;;387    
;;;388            case BSP_INDICATE_ALERT_0:
;;;389            case BSP_INDICATE_ALERT_1:
000450  bf00              NOP      
                  |L11.1106|
;;;390            case BSP_INDICATE_ALERT_2:
000452  bf00              NOP      
                  |L11.1108|
;;;391            case BSP_INDICATE_ALERT_3:
000454  bf00              NOP      
                  |L11.1110|
;;;392            case BSP_INDICATE_ALERT_OFF:
000456  bf00              NOP      
                  |L11.1112|
;;;393                err_code   = app_timer_stop(m_alert_timer_id);
000458  484d              LDR      r0,|L11.1424|
00045a  6800              LDR      r0,[r0,#0]  ; m_alert_timer_id
00045c  f7fffffe          BL       app_timer_stop
000460  4606              MOV      r6,r0
;;;394                next_delay = (uint32_t)BSP_INDICATE_ALERT_OFF - (uint32_t)indicate;
000462  f1c40511          RSB      r5,r4,#0x11
;;;395    
;;;396                // a little trick to find out that if it did not fall through ALERT_OFF
;;;397                if (next_delay && (err_code == NRF_SUCCESS))
000466  b30d              CBZ      r5,|L11.1196|
000468  bb06              CBNZ     r6,|L11.1196|
;;;398                {
;;;399                    m_alert_mask = ALERT_LED_MASK;
00046a  f44f2000          MOV      r0,#0x80000
00046e  4949              LDR      r1,|L11.1428|
000470  6008              STR      r0,[r1,#0]  ; m_alert_mask
;;;400                    if (next_delay > 1)
000472  2d01              CMP      r5,#1
000474  d90f              BLS      |L11.1174|
;;;401                    {
;;;402                        err_code = app_timer_start(m_alert_timer_id, BSP_MS_TO_TICK(
000476  20c8              MOVS     r0,#0xc8
000478  4368              MULS     r0,r5,r0
00047a  2164              MOVS     r1,#0x64
00047c  fbb0f0f1          UDIV     r0,r0,r1
000480  4945              LDR      r1,|L11.1432|
000482  6809              LDR      r1,[r1,#0]  ; m_app_ticks_per_100ms
000484  fb00f701          MUL      r7,r0,r1
000488  2200              MOVS     r2,#0
00048a  4639              MOV      r1,r7
00048c  4840              LDR      r0,|L11.1424|
00048e  6800              LDR      r0,[r0,#0]  ; m_alert_timer_id
000490  f7fffffe          BL       app_timer_start
000494  4606              MOV      r6,r0
                  |L11.1174|
;;;403                                                       (next_delay * ALERT_INTERVAL)), NULL);
;;;404                    }
;;;405                    LEDS_ON(m_alert_mask);
000496  bf00              NOP      
000498  483e              LDR      r0,|L11.1428|
00049a  6800              LDR      r0,[r0,#0]  ; m_alert_mask
00049c  f40010f0          AND      r0,r0,#0x1e0000
0004a0  4939              LDR      r1,|L11.1416|
0004a2  6008              STR      r0,[r1,#0]
0004a4  2000              MOVS     r0,#0
0004a6  1f09              SUBS     r1,r1,#4
0004a8  6008              STR      r0,[r1,#0]
0004aa  e00d              B        |L11.1224|
                  |L11.1196|
;;;406                }
;;;407                else
;;;408                {
;;;409                    LEDS_OFF(m_alert_mask);
0004ac  bf00              NOP      
0004ae  4839              LDR      r0,|L11.1428|
0004b0  6800              LDR      r0,[r0,#0]  ; m_alert_mask
0004b2  f40010f0          AND      r0,r0,#0x1e0000
0004b6  4934              LDR      r1,|L11.1416|
0004b8  1f09              SUBS     r1,r1,#4
0004ba  6008              STR      r0,[r1,#0]
0004bc  2000              MOVS     r0,#0
0004be  1d09              ADDS     r1,r1,#4
0004c0  6008              STR      r0,[r1,#0]
0004c2  bf00              NOP      
;;;410                    m_alert_mask = 0;
0004c4  4933              LDR      r1,|L11.1428|
0004c6  6008              STR      r0,[r1,#0]  ; m_alert_mask
                  |L11.1224|
;;;411                }
;;;412                break;
0004c8  e059              B        |L11.1406|
                  |L11.1226|
;;;413    
;;;414            case BSP_INDICATE_USER_STATE_OFF:
;;;415                LEDS_OFF(LEDS_MASK);
0004ca  bf00              NOP      
0004cc  f44f10f0          MOV      r0,#0x1e0000
0004d0  492d              LDR      r1,|L11.1416|
0004d2  1f09              SUBS     r1,r1,#4
0004d4  6008              STR      r0,[r1,#0]
0004d6  2000              MOVS     r0,#0
0004d8  1d09              ADDS     r1,r1,#4
0004da  6008              STR      r0,[r1,#0]
0004dc  bf00              NOP      
;;;416                m_stable_state = indicate;
0004de  482b              LDR      r0,|L11.1420|
0004e0  7004              STRB     r4,[r0,#0]
;;;417                break;
0004e2  e04c              B        |L11.1406|
                  |L11.1252|
;;;418    
;;;419            case BSP_INDICATE_USER_STATE_0:
;;;420                LEDS_OFF(LEDS_MASK & ~BSP_LED_0_MASK);
0004e4  bf00              NOP      
0004e6  f44f10e0          MOV      r0,#0x1c0000
0004ea  4927              LDR      r1,|L11.1416|
0004ec  1f09              SUBS     r1,r1,#4
0004ee  6008              STR      r0,[r1,#0]
0004f0  2000              MOVS     r0,#0
0004f2  1d09              ADDS     r1,r1,#4
0004f4  6008              STR      r0,[r1,#0]
0004f6  bf00              NOP      
;;;421                LEDS_ON(BSP_LED_0_MASK);
0004f8  bf00              NOP      
0004fa  f44f3000          MOV      r0,#0x20000
0004fe  6008              STR      r0,[r1,#0]
000500  2000              MOVS     r0,#0
000502  1f09              SUBS     r1,r1,#4
000504  6008              STR      r0,[r1,#0]
000506  bf00              NOP      
;;;422                m_stable_state = indicate;
000508  4820              LDR      r0,|L11.1420|
00050a  7004              STRB     r4,[r0,#0]
;;;423                break;
00050c  e037              B        |L11.1406|
                  |L11.1294|
;;;424    
;;;425            case BSP_INDICATE_USER_STATE_1:
;;;426                LEDS_OFF(LEDS_MASK & ~BSP_LED_1_MASK);
00050e  bf00              NOP      
000510  f44f10d0          MOV      r0,#0x1a0000
000514  491c              LDR      r1,|L11.1416|
000516  1f09              SUBS     r1,r1,#4
000518  6008              STR      r0,[r1,#0]
00051a  2000              MOVS     r0,#0
00051c  1d09              ADDS     r1,r1,#4
00051e  6008              STR      r0,[r1,#0]
000520  bf00              NOP      
;;;427                LEDS_ON(BSP_LED_1_MASK);
000522  bf00              NOP      
000524  f44f2080          MOV      r0,#0x40000
000528  6008              STR      r0,[r1,#0]
00052a  2000              MOVS     r0,#0
00052c  1f09              SUBS     r1,r1,#4
00052e  6008              STR      r0,[r1,#0]
000530  bf00              NOP      
;;;428                m_stable_state = indicate;
000532  4816              LDR      r0,|L11.1420|
000534  7004              STRB     r4,[r0,#0]
;;;429                break;
000536  e022              B        |L11.1406|
                  |L11.1336|
;;;430    
;;;431            case BSP_INDICATE_USER_STATE_2:
;;;432                LEDS_OFF(LEDS_MASK & ~(BSP_LED_0_MASK | BSP_LED_1_MASK));
000538  bf00              NOP      
00053a  f44f10c0          MOV      r0,#0x180000
00053e  4912              LDR      r1,|L11.1416|
000540  1f09              SUBS     r1,r1,#4
000542  6008              STR      r0,[r1,#0]
000544  2000              MOVS     r0,#0
000546  1d09              ADDS     r1,r1,#4
000548  6008              STR      r0,[r1,#0]
00054a  bf00              NOP      
;;;433                LEDS_ON(BSP_LED_0_MASK | BSP_LED_1_MASK);
00054c  bf00              NOP      
00054e  f44f20c0          MOV      r0,#0x60000
000552  6008              STR      r0,[r1,#0]
000554  2000              MOVS     r0,#0
000556  1f09              SUBS     r1,r1,#4
000558  6008              STR      r0,[r1,#0]
00055a  bf00              NOP      
;;;434                m_stable_state = indicate;
00055c  480b              LDR      r0,|L11.1420|
00055e  7004              STRB     r4,[r0,#0]
;;;435                break;
000560  e00d              B        |L11.1406|
                  |L11.1378|
;;;436    
;;;437            case BSP_INDICATE_USER_STATE_3:
;;;438    
;;;439            case BSP_INDICATE_USER_STATE_ON:
000562  bf00              NOP      
                  |L11.1380|
;;;440                LEDS_ON(LEDS_MASK);
000564  bf00              NOP      
000566  f44f10f0          MOV      r0,#0x1e0000
00056a  4907              LDR      r1,|L11.1416|
00056c  6008              STR      r0,[r1,#0]
00056e  2000              MOVS     r0,#0
000570  1f09              SUBS     r1,r1,#4
000572  6008              STR      r0,[r1,#0]
000574  bf00              NOP      
;;;441                m_stable_state = indicate;
000576  4805              LDR      r0,|L11.1420|
000578  7004              STRB     r4,[r0,#0]
;;;442                break;
00057a  e000              B        |L11.1406|
                  |L11.1404|
;;;443    
;;;444            default:
;;;445                break;
00057c  bf00              NOP      
                  |L11.1406|
00057e  bf00              NOP                            ;238
;;;446        }
;;;447    
;;;448        return err_code;
000580  4630              MOV      r0,r6
;;;449    }
000582  e8bd81f0          POP      {r4-r8,pc}
;;;450    
                          ENDP

000586  0000              DCW      0x0000
                  |L11.1416|
                          DCD      0x5000050c
                  |L11.1420|
                          DCD      m_stable_state
                  |L11.1424|
                          DCD      m_alert_timer_id
                  |L11.1428|
                          DCD      m_alert_mask
                  |L11.1432|
                          DCD      m_app_ticks_per_100ms

                          AREA ||i.bsp_wakeup_buttons_set||, CODE, READONLY, ALIGN=2

                  bsp_wakeup_buttons_set PROC
;;;656    
;;;657    uint32_t bsp_wakeup_buttons_set(uint32_t wakeup_buttons)
000000  b530              PUSH     {r4,r5,lr}
;;;658    {
000002  4602              MOV      r2,r0
;;;659    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;660        for (uint32_t i = 0; i < BUTTONS_NUMBER; i++)
000004  2000              MOVS     r0,#0
000006  e01a              B        |L12.62|
                  |L12.8|
;;;661        {
;;;662            uint32_t new_cnf = NRF_GPIO->PIN_CNF[m_buttons_list[i]];
000008  4c0f              LDR      r4,|L12.72|
00000a  f8544020          LDR      r4,[r4,r0,LSL #2]
00000e  00a4              LSLS     r4,r4,#2
000010  f10444a0          ADD      r4,r4,#0x50000000
000014  f8d41700          LDR      r1,[r4,#0x700]
;;;663            uint32_t new_sense = ((1 << i) & wakeup_buttons) ? GPIO_PIN_CNF_SENSE_Low : GPIO_PIN_CNF_SENSE_Disabled;
000018  2401              MOVS     r4,#1
00001a  4084              LSLS     r4,r4,r0
00001c  4014              ANDS     r4,r4,r2
00001e  b10c              CBZ      r4,|L12.36|
000020  2403              MOVS     r4,#3
000022  e000              B        |L12.38|
                  |L12.36|
000024  2400              MOVS     r4,#0
                  |L12.38|
000026  4623              MOV      r3,r4
;;;664            new_cnf &= ~GPIO_PIN_CNF_SENSE_Msk;
000028  f4213140          BIC      r1,r1,#0x30000
;;;665            new_cnf |= (new_sense << GPIO_PIN_CNF_SENSE_Pos);
00002c  ea414103          ORR      r1,r1,r3,LSL #16
;;;666            NRF_GPIO->PIN_CNF[m_buttons_list[i]] = new_cnf;
000030  4c06              LDR      r4,|L12.76|
000032  4d05              LDR      r5,|L12.72|
000034  f8555020          LDR      r5,[r5,r0,LSL #2]
000038  f8441025          STR      r1,[r4,r5,LSL #2]
00003c  1c40              ADDS     r0,r0,#1              ;660
                  |L12.62|
00003e  2804              CMP      r0,#4                 ;660
000040  d3e2              BCC      |L12.8|
;;;667        }
;;;668        return NRF_SUCCESS;
000042  2000              MOVS     r0,#0
;;;669    #else
;;;670        return NRF_ERROR_NOT_SUPPORTED;
;;;671    #endif
;;;672    }
000044  bd30              POP      {r4,r5,pc}
;;;673    
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
                          DCD      m_buttons_list
                  |L12.76|
                          DCD      0x50000700

                          AREA ||i.bsp_wakeup_nfc_set||, CODE, READONLY, ALIGN=2

                  bsp_wakeup_nfc_set PROC
;;;673    
;;;674    uint32_t bsp_wakeup_nfc_set(void)
000000  2001              MOVS     r0,#1
;;;675    {
;;;676    #if defined(BOARD_PCA10040)
;;;677        NRF_NFCT->TASKS_SENSE = 1;
000002  4902              LDR      r1,|L13.12|
000004  6088              STR      r0,[r1,#8]
;;;678        return NRF_SUCCESS;
000006  2000              MOVS     r0,#0
;;;679    #else
;;;680        return NRF_ERROR_NOT_SUPPORTED;
;;;681    #endif
;;;682    }
000008  4770              BX       lr
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40005000

                          AREA ||i.button_timer_handler||, CODE, READONLY, ALIGN=1

                  button_timer_handler PROC
;;;215     */
;;;216    static void button_timer_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;217    {
000002  4604              MOV      r4,r0
;;;218        bsp_button_event_handler(*(uint8_t *)p_context, BSP_BUTTON_ACTION_LONG_PUSH);
000004  7820              LDRB     r0,[r4,#0]
000006  2102              MOVS     r1,#2
000008  f7fffffe          BL       bsp_button_event_handler
;;;219    }
00000c  bd10              POP      {r4,pc}
;;;220    
                          ENDP


                          AREA ||i.leds_timer_handler||, CODE, READONLY, ALIGN=2

                  leds_timer_handler PROC
;;;458     */
;;;459    static void leds_timer_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;460    {
000002  4604              MOV      r4,r0
;;;461        UNUSED_PARAMETER(p_context);
;;;462    
;;;463        if (m_indication_type & BSP_INIT_LED)
000004  4804              LDR      r0,|L15.24|
000006  7800              LDRB     r0,[r0,#0]  ; m_indication_type
000008  f0000001          AND      r0,r0,#1
00000c  b118              CBZ      r0,|L15.22|
;;;464        {
;;;465            UNUSED_VARIABLE(bsp_led_indication(m_stable_state));
00000e  4803              LDR      r0,|L15.28|
000010  7800              LDRB     r0,[r0,#0]  ; m_stable_state
000012  f7fffffe          BL       bsp_led_indication
                  |L15.22|
;;;466        }
;;;467    }
000016  bd10              POP      {r4,pc}
;;;468    
                          ENDP

                  |L15.24|
                          DCD      m_indication_type
                  |L15.28|
                          DCD      m_stable_state

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_leds_timer_id_data
                          %        32
                  m_alert_timer_id_data
                          %        32
                  m_events_list
                          %        12
                  m_button_timer_id_data
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_leds_timer_id
                          DCD      m_leds_timer_id_data
                  m_alert_timer_id
                          DCD      m_alert_timer_id_data
                  m_button_timer_id
                          DCD      m_button_timer_id_data
                  m_buttons_list
                          DCD      0x0000000d
                          DCD      0x0000000e
                          DCD      0x0000000f
                          DCD      0x00000010
                  app_buttons
00001c  0d000300          DCB      0x0d,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
000024  0e000300          DCB      0x0e,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
00002c  0f000300          DCB      0x0f,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
000034  10000300          DCB      0x10,0x00,0x03,0x00
                          DCD      bsp_button_event_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_stable_state
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  m_app_ticks_per_100ms
                          DCD      0x00000000
                  m_indication_type
                          DCD      0x00000000
                  m_alert_mask
                          DCD      0x00000000
                  m_registered_callback
                          DCD      0x00000000
                  current_long_push_pin_no
000014  00                DCB      0x00
                  release_event_at_push
000015  000000            DCB      0x00,0x00,0x00
000018  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\bsp\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_9aa79841____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_bsp_c_9aa79841____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_9aa79841____REVSH|
#line 402
|__asm___5_bsp_c_9aa79841____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_9aa79841____RRX|
#line 587
|__asm___5_bsp_c_9aa79841____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
