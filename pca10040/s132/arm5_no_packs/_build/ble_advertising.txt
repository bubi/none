; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\_build\ble_advertising.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_advertising.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config\bluetoothds_template_pca10040_s132 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mailbox -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\bsp -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\none -I..\..\..\..\..\..\components\drivers_ext\LS013B7DH06 -I..\..\..\..\..\..\external\ugfx -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\framebuffer -I..\..\..\..\..\..\external\ugfx\src\gdisp -I..\..\..\..\..\..\external\ugfx\drivers\gdisp\ -IC:\Users\Michael\Documents\none\nRF5_SDK_12.1.0_0d23e2a\examples\ble_peripheral\none\pca10040\s132\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.9.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DNRF52 -DBLE_STACK_SUPPORT_REQD -D__HEAP_SIZE=0 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBOARD_PCA10040 -DNRF52_PAN_12 -DNRF52_PAN_15 -DNRF52_PAN_20 -DNRF52_PAN_30 -DNRF52_PAN_31 -DNRF52_PAN_36 -DNRF52_PAN_51 -DNRF52_PAN_53 -DNRF52_PAN_54 -DNRF52_PAN_55 -DNRF52_PAN_58 -DNRF52_PAN_62 -DNRF52_PAN_63 -DNRF52_PAN_64 -DCONFIG_GPIO_AS_PINRESET -DSOFTDEVICE_PRESENT -DNRF52832 -DNRF52 -DSWI_DISABLE0 --omf_browse=.\_build\ble_advertising.crf ..\..\..\..\..\..\components\ble\ble_advertising\ble_advertising.c]
                          THUMB

                          AREA ||i.addr_is_valid||, CODE, READONLY, ALIGN=1

                  addr_is_valid PROC
;;;97      */
;;;98     static bool addr_is_valid(uint8_t const * const addr)
000000  4602              MOV      r2,r0
;;;99     {
;;;100        for (uint32_t i = 0; i < BLE_GAP_ADDR_LEN; i++)
000002  2100              MOVS     r1,#0
000004  e004              B        |L1.16|
                  |L1.6|
;;;101        {
;;;102            if (addr[i] != 0)
000006  5c50              LDRB     r0,[r2,r1]
000008  b108              CBZ      r0,|L1.14|
;;;103            {
;;;104                return true;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;105            }
;;;106        }
;;;107        return false;
;;;108    }
00000c  4770              BX       lr
                  |L1.14|
00000e  1c49              ADDS     r1,r1,#1              ;100
                  |L1.16|
000010  2906              CMP      r1,#6                 ;100
000012  d3f8              BCC      |L1.6|
000014  2000              MOVS     r0,#0                 ;107
000016  e7f9              B        |L1.12|
;;;109    
                          ENDP


                          AREA ||i.adv_mode_next_avail_get||, CODE, READONLY, ALIGN=2

                  adv_mode_next_avail_get PROC
;;;194     */
;;;195    static ble_adv_mode_t adv_mode_next_avail_get(ble_adv_mode_t adv_mode)
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
000002  4604              MOV      r4,r0
;;;197        bool peer_addr_is_valid = addr_is_valid(m_peer_address.addr);
000004  4814              LDR      r0,|L2.88|
000006  f7fffffe          BL       addr_is_valid
00000a  4605              MOV      r5,r0
;;;198    
;;;199        // If a mode is disabled, continue to the next mode.
;;;200    
;;;201        switch (adv_mode)
00000c  2c01              CMP      r4,#1
00000e  d006              BEQ      |L2.30|
000010  2c02              CMP      r4,#2
000012  d00b              BEQ      |L2.44|
000014  2c03              CMP      r4,#3
000016  d010              BEQ      |L2.58|
000018  2c04              CMP      r4,#4
00001a  d11a              BNE      |L2.82|
00001c  e013              B        |L2.70|
                  |L2.30|
;;;202        {
;;;203            case BLE_ADV_MODE_DIRECTED:
;;;204                if ((m_adv_modes_config.ble_adv_directed_enabled) && peer_addr_is_valid)
00001e  480f              LDR      r0,|L2.92|
000020  7840              LDRB     r0,[r0,#1]  ; m_adv_modes_config
000022  b110              CBZ      r0,|L2.42|
000024  b10d              CBZ      r5,|L2.42|
;;;205                {
;;;206                    return BLE_ADV_MODE_DIRECTED;
000026  2001              MOVS     r0,#1
                  |L2.40|
;;;207                }
;;;208                // Fallthrough.
;;;209    
;;;210            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;211                if ((m_adv_modes_config.ble_adv_directed_slow_enabled) && peer_addr_is_valid)
;;;212                {
;;;213                    return BLE_ADV_MODE_DIRECTED_SLOW;
;;;214                }
;;;215                // Fallthrough.
;;;216    
;;;217            case BLE_ADV_MODE_FAST:
;;;218                if (m_adv_modes_config.ble_adv_fast_enabled)
;;;219                {
;;;220                    return BLE_ADV_MODE_FAST;
;;;221                }
;;;222                // Fallthrough.
;;;223    
;;;224            case BLE_ADV_MODE_SLOW:
;;;225                if (m_adv_modes_config.ble_adv_slow_enabled)
;;;226                {
;;;227                    return BLE_ADV_MODE_SLOW;
;;;228                }
;;;229                // Fallthrough.
;;;230    
;;;231            default:
;;;232                return BLE_ADV_MODE_IDLE;
;;;233        }
;;;234    }
000028  bd70              POP      {r4-r6,pc}
                  |L2.42|
00002a  bf00              NOP                            ;210
                  |L2.44|
00002c  480b              LDR      r0,|L2.92|
00002e  7880              LDRB     r0,[r0,#2]            ;211  ; m_adv_modes_config
000030  b110              CBZ      r0,|L2.56|
000032  b10d              CBZ      r5,|L2.56|
000034  2002              MOVS     r0,#2                 ;213
000036  e7f7              B        |L2.40|
                  |L2.56|
000038  bf00              NOP                            ;217
                  |L2.58|
00003a  4808              LDR      r0,|L2.92|
00003c  78c0              LDRB     r0,[r0,#3]            ;218  ; m_adv_modes_config
00003e  b108              CBZ      r0,|L2.68|
000040  2003              MOVS     r0,#3                 ;220
000042  e7f1              B        |L2.40|
                  |L2.68|
000044  bf00              NOP                            ;224
                  |L2.70|
000046  4805              LDR      r0,|L2.92|
000048  7900              LDRB     r0,[r0,#4]            ;225  ; m_adv_modes_config
00004a  b108              CBZ      r0,|L2.80|
00004c  2004              MOVS     r0,#4                 ;227
00004e  e7eb              B        |L2.40|
                  |L2.80|
000050  bf00              NOP                            ;231
                  |L2.82|
000052  2000              MOVS     r0,#0                 ;232
000054  e7e8              B        |L2.40|
;;;235    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      m_peer_address+0x1
                  |L2.92|
                          DCD      m_adv_modes_config

                          AREA ||i.adv_mode_next_get||, CODE, READONLY, ALIGN=1

                  adv_mode_next_get PROC
;;;110    
;;;111    static ble_adv_mode_t adv_mode_next_get(ble_adv_mode_t adv_mode)
000000  4601              MOV      r1,r0
;;;112    {
;;;113        return (ble_adv_mode_t)((adv_mode + 1) % BLE_ADV_MODES);
000002  1c48              ADDS     r0,r1,#1
000004  2205              MOVS     r2,#5
000006  fb90f3f2          SDIV     r3,r0,r2
00000a  fb020013          MLS      r0,r2,r3,r0
00000e  b2c0              UXTB     r0,r0
;;;114    }
000010  4770              BX       lr
;;;115    
                          ENDP


                          AREA ||i.ble_advertising_init||, CODE, READONLY, ALIGN=2

                  ble_advertising_init PROC
;;;358    
;;;359    uint32_t ble_advertising_init(ble_advdata_t                   const * p_advdata,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;360                                  ble_advdata_t                   const * p_srdata,
;;;361                                  ble_adv_modes_config_t          const * p_config,
;;;362                                  ble_advertising_evt_handler_t   const   evt_handler,
;;;363                                  ble_advertising_error_handler_t const   error_handler)
;;;364    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;365        uint32_t ret;
;;;366    
;;;367        if ((p_advdata == NULL) || (p_config == NULL))
000010  b104              CBZ      r4,|L4.20|
000012  b915              CBNZ     r5,|L4.26|
                  |L4.20|
;;;368        {
;;;369            return NRF_ERROR_NULL;
000014  200e              MOVS     r0,#0xe
                  |L4.22|
;;;370        }
;;;371    
;;;372        m_initialized                    = true;
;;;373        m_adv_mode_current               = BLE_ADV_MODE_IDLE;
;;;374        m_adv_modes_config               = *p_config;
;;;375        m_evt_handler                    = evt_handler;
;;;376        m_error_handler                  = error_handler;
;;;377        m_current_slave_link_conn_handle = BLE_CONN_HANDLE_INVALID;
;;;378    
;;;379        memset(&m_peer_address, 0, sizeof(m_peer_address));
;;;380        memset(&m_advdata,      0, sizeof(m_advdata));
;;;381    
;;;382        // Copy advertising data.
;;;383        m_advdata.name_type            = p_advdata->name_type;
;;;384        m_advdata.include_appearance   = p_advdata->include_appearance;
;;;385        m_advdata.flags                = p_advdata->flags;
;;;386        m_advdata.short_name_len       = p_advdata->short_name_len;
;;;387    
;;;388        m_advdata.uuids_complete       = p_advdata->uuids_complete;
;;;389        m_advdata.uuids_more_available = p_advdata->uuids_more_available;
;;;390        m_advdata.uuids_solicited      = p_advdata->uuids_solicited;
;;;391    
;;;392        if (p_advdata->p_manuf_specific_data != NULL)
;;;393        {
;;;394            m_advdata.p_manuf_specific_data   = &m_manuf_specific_data;
;;;395            m_manuf_specific_data.data.p_data = m_manuf_data_array;
;;;396            m_advdata.p_manuf_specific_data->company_identifier =
;;;397            p_advdata->p_manuf_specific_data->company_identifier;
;;;398            m_advdata.p_manuf_specific_data->data.size = p_advdata->p_manuf_specific_data->data.size;
;;;399    
;;;400            for (uint32_t i = 0; i < m_advdata.p_manuf_specific_data->data.size; i++)
;;;401            {
;;;402                m_manuf_data_array[i] = p_advdata->p_manuf_specific_data->data.p_data[i];
;;;403            }
;;;404        }
;;;405    
;;;406        if (p_advdata->p_service_data_array != NULL)
;;;407        {
;;;408            m_service_data.data.p_data                   = m_service_data_array;
;;;409            m_advdata.p_service_data_array               = &m_service_data;
;;;410            m_advdata.p_service_data_array->data.p_data  = m_service_data_array;
;;;411            m_advdata.p_service_data_array->data.size    = p_advdata->p_service_data_array->data.size;
;;;412            m_advdata.p_service_data_array->service_uuid = p_advdata->p_service_data_array->service_uuid;
;;;413    
;;;414            for (uint32_t i = 0; i < m_advdata.p_service_data_array->data.size; i++)
;;;415            {
;;;416                m_service_data_array[i] = p_advdata->p_service_data_array->data.p_data[i];
;;;417            }
;;;418    
;;;419            m_advdata.service_data_count = p_advdata->service_data_count;
;;;420        }
;;;421    
;;;422        if (p_advdata->p_slave_conn_int != NULL)
;;;423        {
;;;424            m_advdata.p_slave_conn_int                    = &m_slave_conn_int;
;;;425            m_advdata.p_slave_conn_int->max_conn_interval = p_advdata->p_slave_conn_int->max_conn_interval;
;;;426            m_advdata.p_slave_conn_int->min_conn_interval = p_advdata->p_slave_conn_int->min_conn_interval;
;;;427        }
;;;428    
;;;429        if (p_advdata->p_tx_power_level != NULL)
;;;430        {
;;;431            m_advdata.p_tx_power_level = p_advdata->p_tx_power_level;
;;;432        }
;;;433    
;;;434    #if (NRF_SD_BLE_API_VERSION == 2)
;;;435            for (int i = 0; i <BLE_GAP_WHITELIST_ADDR_MAX_COUNT ; i++)
;;;436            {
;;;437                m_whitelist.pp_addrs[i] = &m_whitelist_addrs[i];
;;;438            }
;;;439    
;;;440            for (int i = 0; i <BLE_GAP_WHITELIST_IRK_MAX_COUNT ; i++)
;;;441            {
;;;442                m_whitelist.pp_irks[i] = &m_whitelist_irks[i];
;;;443            }
;;;444    #endif
;;;445    
;;;446        ret = ble_advdata_set(&m_advdata, p_srdata);
;;;447        return ret;
;;;448    }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L4.26|
00001a  2001              MOVS     r0,#1                 ;372
00001c  4948              LDR      r1,|L4.320|
00001e  7008              STRB     r0,[r1,#0]            ;372
000020  2000              MOVS     r0,#0                 ;373
000022  4948              LDR      r1,|L4.324|
000024  7008              STRB     r0,[r1,#0]            ;373
000026  2220              MOVS     r2,#0x20              ;374
000028  4629              MOV      r1,r5                 ;374
00002a  4847              LDR      r0,|L4.328|
00002c  f7fffffe          BL       __aeabi_memcpy4
000030  4846              LDR      r0,|L4.332|
000032  6006              STR      r6,[r0,#0]            ;375  ; m_evt_handler
000034  4846              LDR      r0,|L4.336|
000036  f8c08000          STR      r8,[r0,#0]            ;376  ; m_error_handler
00003a  f64f70ff          MOV      r0,#0xffff            ;377
00003e  4945              LDR      r1,|L4.340|
000040  8008              STRH     r0,[r1,#0]            ;377
000042  4845              LDR      r0,|L4.344|
000044  2100              MOVS     r1,#0                 ;379
000046  6001              STR      r1,[r0,#0]            ;379  ; m_peer_address
000048  8081              STRH     r1,[r0,#4]            ;379
00004a  7181              STRB     r1,[r0,#6]            ;379
00004c  2138              MOVS     r1,#0x38              ;380
00004e  4843              LDR      r0,|L4.348|
000050  f7fffffe          BL       __aeabi_memclr4
000054  7820              LDRB     r0,[r4,#0]            ;383
000056  4941              LDR      r1,|L4.348|
000058  7008              STRB     r0,[r1,#0]            ;383
00005a  78a0              LDRB     r0,[r4,#2]            ;384
00005c  7088              STRB     r0,[r1,#2]            ;384
00005e  78e0              LDRB     r0,[r4,#3]            ;385
000060  70c8              STRB     r0,[r1,#3]            ;385
000062  7860              LDRB     r0,[r4,#1]            ;386
000064  7048              STRB     r0,[r1,#1]            ;386
000066  e9d40204          LDRD     r0,r2,[r4,#0x10]      ;388
00006a  e9c10204          STRD     r0,r2,[r1,#0x10]      ;388
00006e  4608              MOV      r0,r1                 ;389
000070  e9d41202          LDRD     r1,r2,[r4,#8]         ;389
000074  e9c01202          STRD     r1,r2,[r0,#8]         ;389
000078  e9d41206          LDRD     r1,r2,[r4,#0x18]      ;390
00007c  e9c01206          STRD     r1,r2,[r0,#0x18]      ;390
000080  6a60              LDR      r0,[r4,#0x24]         ;392
000082  b1d8              CBZ      r0,|L4.188|
000084  4836              LDR      r0,|L4.352|
000086  4935              LDR      r1,|L4.348|
000088  6248              STR      r0,[r1,#0x24]         ;394  ; m_advdata
00008a  4936              LDR      r1,|L4.356|
00008c  6081              STR      r1,[r0,#8]            ;395
00008e  6a60              LDR      r0,[r4,#0x24]         ;396
000090  8800              LDRH     r0,[r0,#0]            ;396
000092  4932              LDR      r1,|L4.348|
000094  6a49              LDR      r1,[r1,#0x24]         ;396  ; m_advdata
000096  8008              STRH     r0,[r1,#0]            ;396
000098  6a60              LDR      r0,[r4,#0x24]         ;398
00009a  8880              LDRH     r0,[r0,#4]            ;398
00009c  492f              LDR      r1,|L4.348|
00009e  6a49              LDR      r1,[r1,#0x24]         ;398  ; m_advdata
0000a0  8088              STRH     r0,[r1,#4]            ;398
0000a2  2000              MOVS     r0,#0                 ;400
0000a4  e005              B        |L4.178|
                  |L4.166|
0000a6  6a61              LDR      r1,[r4,#0x24]         ;402
0000a8  6889              LDR      r1,[r1,#8]            ;402
0000aa  5c09              LDRB     r1,[r1,r0]            ;402
0000ac  4a2d              LDR      r2,|L4.356|
0000ae  5411              STRB     r1,[r2,r0]            ;402
0000b0  1c40              ADDS     r0,r0,#1              ;400
                  |L4.178|
0000b2  492a              LDR      r1,|L4.348|
0000b4  6a49              LDR      r1,[r1,#0x24]         ;400  ; m_advdata
0000b6  8889              LDRH     r1,[r1,#4]            ;400
0000b8  4281              CMP      r1,r0                 ;400
0000ba  d8f4              BHI      |L4.166|
                  |L4.188|
0000bc  6aa0              LDR      r0,[r4,#0x28]         ;406
0000be  b320              CBZ      r0,|L4.266|
0000c0  4929              LDR      r1,|L4.360|
0000c2  482a              LDR      r0,|L4.364|
0000c4  6081              STR      r1,[r0,#8]            ;408
0000c6  4925              LDR      r1,|L4.348|
0000c8  6288              STR      r0,[r1,#0x28]         ;409  ; m_advdata
0000ca  4927              LDR      r1,|L4.360|
0000cc  4823              LDR      r0,|L4.348|
0000ce  6a80              LDR      r0,[r0,#0x28]         ;410  ; m_advdata
0000d0  6081              STR      r1,[r0,#8]            ;410
0000d2  6aa0              LDR      r0,[r4,#0x28]         ;411
0000d4  8880              LDRH     r0,[r0,#4]            ;411
0000d6  4921              LDR      r1,|L4.348|
0000d8  6a89              LDR      r1,[r1,#0x28]         ;411  ; m_advdata
0000da  8088              STRH     r0,[r1,#4]            ;411
0000dc  6aa0              LDR      r0,[r4,#0x28]         ;412
0000de  8800              LDRH     r0,[r0,#0]            ;412
0000e0  491e              LDR      r1,|L4.348|
0000e2  6a89              LDR      r1,[r1,#0x28]         ;412  ; m_advdata
0000e4  8008              STRH     r0,[r1,#0]            ;412
0000e6  2000              MOVS     r0,#0                 ;414
0000e8  e005              B        |L4.246|
                  |L4.234|
0000ea  6aa1              LDR      r1,[r4,#0x28]         ;416
0000ec  6889              LDR      r1,[r1,#8]            ;416
0000ee  5c09              LDRB     r1,[r1,r0]            ;416
0000f0  4a1d              LDR      r2,|L4.360|
0000f2  5411              STRB     r1,[r2,r0]            ;416
0000f4  1c40              ADDS     r0,r0,#1              ;414
                  |L4.246|
0000f6  4919              LDR      r1,|L4.348|
0000f8  6a89              LDR      r1,[r1,#0x28]         ;414  ; m_advdata
0000fa  8889              LDRH     r1,[r1,#4]            ;414
0000fc  4281              CMP      r1,r0                 ;414
0000fe  d8f4              BHI      |L4.234|
000100  f894002c          LDRB     r0,[r4,#0x2c]         ;419
000104  4915              LDR      r1,|L4.348|
000106  f881002c          STRB     r0,[r1,#0x2c]         ;419
                  |L4.266|
00010a  6a20              LDR      r0,[r4,#0x20]         ;422
00010c  b158              CBZ      r0,|L4.294|
00010e  4818              LDR      r0,|L4.368|
000110  4912              LDR      r1,|L4.348|
000112  6208              STR      r0,[r1,#0x20]         ;424  ; m_advdata
000114  6a20              LDR      r0,[r4,#0x20]         ;425
000116  8840              LDRH     r0,[r0,#2]            ;425
000118  6a09              LDR      r1,[r1,#0x20]         ;425  ; m_advdata
00011a  8048              STRH     r0,[r1,#2]            ;425
00011c  6a20              LDR      r0,[r4,#0x20]         ;426
00011e  8800              LDRH     r0,[r0,#0]            ;426
000120  490e              LDR      r1,|L4.348|
000122  6a09              LDR      r1,[r1,#0x20]         ;426  ; m_advdata
000124  8008              STRH     r0,[r1,#0]            ;426
                  |L4.294|
000126  6860              LDR      r0,[r4,#4]            ;429
000128  b110              CBZ      r0,|L4.304|
00012a  490c              LDR      r1,|L4.348|
00012c  6860              LDR      r0,[r4,#4]            ;431
00012e  6048              STR      r0,[r1,#4]            ;431  ; m_advdata
                  |L4.304|
000130  4639              MOV      r1,r7                 ;446
000132  480a              LDR      r0,|L4.348|
000134  f7fffffe          BL       ble_advdata_set
000138  4681              MOV      r9,r0                 ;446
00013a  4648              MOV      r0,r9                 ;447
00013c  e76b              B        |L4.22|
;;;449    
                          ENDP

00013e  0000              DCW      0x0000
                  |L4.320|
                          DCD      m_initialized
                  |L4.324|
                          DCD      m_adv_mode_current
                  |L4.328|
                          DCD      m_adv_modes_config
                  |L4.332|
                          DCD      m_evt_handler
                  |L4.336|
                          DCD      m_error_handler
                  |L4.340|
                          DCD      m_current_slave_link_conn_handle
                  |L4.344|
                          DCD      m_peer_address
                  |L4.348|
                          DCD      m_advdata
                  |L4.352|
                          DCD      m_manuf_specific_data
                  |L4.356|
                          DCD      m_manuf_data_array
                  |L4.360|
                          DCD      m_service_data_array
                  |L4.364|
                          DCD      m_service_data
                  |L4.368|
                          DCD      m_slave_conn_int

                          AREA ||i.ble_advertising_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_advertising_on_ble_evt PROC
;;;557    
;;;558    void ble_advertising_on_ble_evt(ble_evt_t const * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;559    {
000002  4604              MOV      r4,r0
;;;560        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L5.20|
00000a  2811              CMP      r0,#0x11
00000c  d006              BEQ      |L5.28|
00000e  281b              CMP      r0,#0x1b
000010  d10c              BNE      |L5.44|
000012  e007              B        |L5.36|
                  |L5.20|
;;;561        {
;;;562            case BLE_GAP_EVT_CONNECTED:
;;;563                on_connected(p_ble_evt);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       on_connected
;;;564                break;
00001a  e008              B        |L5.46|
                  |L5.28|
;;;565    
;;;566            // Upon disconnection, whitelist will be activated and direct advertising is started.
;;;567            case BLE_GAP_EVT_DISCONNECTED:
;;;568                on_disconnected(p_ble_evt);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       on_disconnected
;;;569                break;
000022  e004              B        |L5.46|
                  |L5.36|
;;;570    
;;;571            // Upon time-out, the next advertising mode is started.
;;;572            case BLE_GAP_EVT_TIMEOUT:
;;;573                on_timeout(p_ble_evt);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       on_timeout
;;;574                break;
00002a  e000              B        |L5.46|
                  |L5.44|
;;;575    
;;;576            default:
;;;577                break;
00002c  bf00              NOP      
                  |L5.46|
00002e  bf00              NOP                            ;564
;;;578        }
;;;579    }
000030  bd10              POP      {r4,pc}
;;;580    
                          ENDP


                          AREA ||i.ble_advertising_on_sys_evt||, CODE, READONLY, ALIGN=2

                  ble_advertising_on_sys_evt PROC
;;;581    
;;;582    void ble_advertising_on_sys_evt(uint32_t sys_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;583    {
000002  4605              MOV      r5,r0
;;;584        uint32_t ret;
;;;585    
;;;586        switch (sys_evt)
000004  2d02              CMP      r5,#2
000006  d002              BEQ      |L6.14|
000008  2d03              CMP      r5,#3
00000a  d115              BNE      |L6.56|
00000c  e000              B        |L6.16|
                  |L6.14|
;;;587        {
;;;588            //When a flash operation finishes, re-attempt to start advertising operations.
;;;589            case NRF_EVT_FLASH_OPERATION_SUCCESS:
;;;590            case NRF_EVT_FLASH_OPERATION_ERROR:
00000e  bf00              NOP      
                  |L6.16|
;;;591                if (m_advertising_start_pending)
000010  480b              LDR      r0,|L6.64|
000012  7800              LDRB     r0,[r0,#0]  ; m_advertising_start_pending
000014  b178              CBZ      r0,|L6.54|
;;;592                {
;;;593                    m_advertising_start_pending = false;
000016  2000              MOVS     r0,#0
000018  4909              LDR      r1,|L6.64|
00001a  7008              STRB     r0,[r1,#0]
;;;594                    ret = ble_advertising_start(m_adv_mode_current);
00001c  4809              LDR      r0,|L6.68|
00001e  7800              LDRB     r0,[r0,#0]  ; m_adv_mode_current
000020  f7fffffe          BL       ble_advertising_start
000024  4604              MOV      r4,r0
;;;595                    if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
000026  b134              CBZ      r4,|L6.54|
000028  4807              LDR      r0,|L6.72|
00002a  6800              LDR      r0,[r0,#0]  ; m_error_handler
00002c  b118              CBZ      r0,|L6.54|
;;;596                    {
;;;597                        m_error_handler(ret);
00002e  4620              MOV      r0,r4
000030  4905              LDR      r1,|L6.72|
000032  6809              LDR      r1,[r1,#0]  ; m_error_handler
000034  4788              BLX      r1
                  |L6.54|
;;;598                    }
;;;599                }
;;;600                break;
000036  e000              B        |L6.58|
                  |L6.56|
;;;601    
;;;602            default:
;;;603                // No implementation needed.
;;;604                break;
000038  bf00              NOP      
                  |L6.58|
00003a  bf00              NOP                            ;600
;;;605        }
;;;606    }
00003c  bd70              POP      {r4-r6,pc}
;;;607    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      m_advertising_start_pending
                  |L6.68|
                          DCD      m_adv_mode_current
                  |L6.72|
                          DCD      m_error_handler

                          AREA ||i.ble_advertising_peer_addr_reply||, CODE, READONLY, ALIGN=2

                  ble_advertising_peer_addr_reply PROC
;;;608    
;;;609    uint32_t ble_advertising_peer_addr_reply(ble_gap_addr_t * p_peer_address)
000000  4601              MOV      r1,r0
;;;610    {
;;;611        if (!m_peer_addr_reply_expected)
000002  4808              LDR      r0,|L7.36|
000004  7800              LDRB     r0,[r0,#0]  ; m_peer_addr_reply_expected
000006  b908              CBNZ     r0,|L7.12|
;;;612        {
;;;613            return NRF_ERROR_INVALID_STATE;
000008  2008              MOVS     r0,#8
                  |L7.10|
;;;614        }
;;;615    
;;;616        m_peer_addr_reply_expected = false;
;;;617    
;;;618        memcpy(&m_peer_address, p_peer_address, sizeof(m_peer_address));
;;;619    
;;;620        return NRF_SUCCESS;
;;;621    }
00000a  4770              BX       lr
                  |L7.12|
00000c  2000              MOVS     r0,#0                 ;616
00000e  4a05              LDR      r2,|L7.36|
000010  7010              STRB     r0,[r2,#0]            ;616
000012  4805              LDR      r0,|L7.40|
000014  680a              LDR      r2,[r1,#0]            ;618
000016  6002              STR      r2,[r0,#0]            ;618  ; m_peer_address
000018  888a              LDRH     r2,[r1,#4]            ;618
00001a  8082              STRH     r2,[r0,#4]            ;618
00001c  798a              LDRB     r2,[r1,#6]            ;618
00001e  7182              STRB     r2,[r0,#6]            ;618
000020  2000              MOVS     r0,#0                 ;620
000022  e7f2              B        |L7.10|
;;;622    
                          ENDP

                  |L7.36|
                          DCD      m_peer_addr_reply_expected
                  |L7.40|
                          DCD      m_peer_address

                          AREA ||i.ble_advertising_restart_without_whitelist||, CODE, READONLY, ALIGN=2

                  ble_advertising_restart_without_whitelist PROC
;;;660    
;;;661    uint32_t ble_advertising_restart_without_whitelist(void)
000000  b510              PUSH     {r4,lr}
;;;662    {
;;;663        uint32_t ret;
;;;664    
;;;665        (void) sd_ble_gap_adv_stop();
000002  df74              SVC      #0x74
;;;666    
;;;667        m_whitelist_temporarily_disabled = true;
000004  2001              MOVS     r0,#1
000006  490f              LDR      r1,|L8.68|
000008  7008              STRB     r0,[r1,#0]
;;;668    
;;;669        #if (NRF_SD_BLE_API_VERSION == 3)
;;;670            m_whitelist_in_use = false;
00000a  2000              MOVS     r0,#0
00000c  490e              LDR      r1,|L8.72|
00000e  7008              STRB     r0,[r1,#0]
;;;671        #endif
;;;672    
;;;673        m_advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
000010  2006              MOVS     r0,#6
000012  490e              LDR      r1,|L8.76|
000014  70c8              STRB     r0,[r1,#3]
;;;674    
;;;675        ret = ble_advdata_set(&m_advdata, NULL);
000016  2100              MOVS     r1,#0
000018  480c              LDR      r0,|L8.76|
00001a  f7fffffe          BL       ble_advdata_set
00001e  4604              MOV      r4,r0
;;;676        if (ret != NRF_SUCCESS)
000020  b10c              CBZ      r4,|L8.38|
;;;677        {
;;;678            return ret;
000022  4620              MOV      r0,r4
                  |L8.36|
;;;679        }
;;;680    
;;;681        ret = ble_advertising_start(m_adv_mode_current);
;;;682        if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
;;;683        {
;;;684            m_error_handler(ret);
;;;685        }
;;;686    
;;;687        return NRF_SUCCESS;
;;;688    }
000024  bd10              POP      {r4,pc}
                  |L8.38|
000026  480a              LDR      r0,|L8.80|
000028  7800              LDRB     r0,[r0,#0]            ;681  ; m_adv_mode_current
00002a  f7fffffe          BL       ble_advertising_start
00002e  4604              MOV      r4,r0                 ;681
000030  b134              CBZ      r4,|L8.64|
000032  4808              LDR      r0,|L8.84|
000034  6800              LDR      r0,[r0,#0]            ;682  ; m_error_handler
000036  b118              CBZ      r0,|L8.64|
000038  4620              MOV      r0,r4                 ;684
00003a  4906              LDR      r1,|L8.84|
00003c  6809              LDR      r1,[r1,#0]            ;684  ; m_error_handler
00003e  4788              BLX      r1                    ;684
                  |L8.64|
000040  2000              MOVS     r0,#0                 ;687
000042  e7ef              B        |L8.36|
;;;689    
                          ENDP

                  |L8.68|
                          DCD      m_whitelist_temporarily_disabled
                  |L8.72|
                          DCD      m_whitelist_in_use
                  |L8.76|
                          DCD      m_advdata
                  |L8.80|
                          DCD      m_adv_mode_current
                  |L8.84|
                          DCD      m_error_handler

                          AREA ||i.ble_advertising_start||, CODE, READONLY, ALIGN=2

                  ble_advertising_start PROC
;;;450    
;;;451    uint32_t ble_advertising_start(ble_adv_mode_t advertising_mode)
000000  b57f              PUSH     {r0-r6,lr}
;;;452    {
000002  4605              MOV      r5,r0
;;;453        uint32_t             ret;
;;;454        ble_gap_adv_params_t adv_params;
;;;455    
;;;456        if (m_initialized == false)
000004  484d              LDR      r0,|L9.316|
000006  7800              LDRB     r0,[r0,#0]  ; m_initialized
000008  b910              CBNZ     r0,|L9.16|
;;;457        {
;;;458            return NRF_ERROR_INVALID_STATE;
00000a  2008              MOVS     r0,#8
                  |L9.12|
;;;459        }
;;;460    
;;;461        m_adv_mode_current = advertising_mode;
;;;462    
;;;463        // Delay starting advertising until the flash operations are complete.
;;;464        if (flash_access_in_progress())
;;;465        {
;;;466            m_advertising_start_pending = true;
;;;467            return NRF_SUCCESS;
;;;468        }
;;;469    
;;;470       memset(&m_peer_address, 0, sizeof(m_peer_address));
;;;471    
;;;472        if (  ((m_adv_modes_config.ble_adv_directed_enabled)      && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;473            ||((m_adv_modes_config.ble_adv_directed_slow_enabled) && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;474            ||((m_adv_modes_config.ble_adv_directed_slow_enabled) && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED_SLOW))
;;;475           )
;;;476        {
;;;477            if (m_evt_handler != NULL)
;;;478            {
;;;479                m_peer_addr_reply_expected = true;
;;;480                m_evt_handler(BLE_ADV_EVT_PEER_ADDR_REQUEST);
;;;481            }
;;;482            else
;;;483            {
;;;484                m_peer_addr_reply_expected = false;
;;;485            }
;;;486        }
;;;487    
;;;488        m_adv_mode_current = adv_mode_next_avail_get(advertising_mode);
;;;489    
;;;490        // Fetch the whitelist.
;;;491        if ((m_evt_handler != NULL) &&
;;;492            (m_adv_mode_current == BLE_ADV_MODE_FAST || m_adv_mode_current == BLE_ADV_MODE_SLOW) &&
;;;493            (m_adv_modes_config.ble_adv_whitelist_enabled) &&
;;;494            (!m_whitelist_temporarily_disabled))
;;;495        {
;;;496            #if (NRF_SD_BLE_API_VERSION == 3)
;;;497                m_whitelist_in_use = false;
;;;498            #endif
;;;499            m_whitelist_reply_expected = true;
;;;500            m_evt_handler(BLE_ADV_EVT_WHITELIST_REQUEST);
;;;501        }
;;;502        else
;;;503        {
;;;504            m_whitelist_reply_expected = false;
;;;505        }
;;;506    
;;;507        // Initialize advertising parameters with default values.
;;;508        memset(&adv_params, 0, sizeof(adv_params));
;;;509    
;;;510        adv_params.type = BLE_GAP_ADV_TYPE_ADV_IND;
;;;511        adv_params.fp   = BLE_GAP_ADV_FP_ANY;
;;;512    
;;;513        // Set advertising parameters and events according to selected advertising mode.
;;;514        switch (m_adv_mode_current)
;;;515        {
;;;516            case BLE_ADV_MODE_DIRECTED:
;;;517                ret = set_adv_mode_directed(&adv_params);
;;;518                break;
;;;519    
;;;520            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;521                ret = set_adv_mode_directed_slow(&adv_params);
;;;522                break;
;;;523    
;;;524            case BLE_ADV_MODE_FAST:
;;;525                ret = set_adv_mode_fast(&adv_params);
;;;526                break;
;;;527    
;;;528            case BLE_ADV_MODE_SLOW:
;;;529                ret = set_adv_mode_slow(&adv_params);
;;;530                break;
;;;531    
;;;532            case BLE_ADV_MODE_IDLE:
;;;533                m_adv_evt = BLE_ADV_EVT_IDLE;
;;;534                break;
;;;535    
;;;536            default:
;;;537                break;
;;;538        }
;;;539    
;;;540        if (m_adv_mode_current != BLE_ADV_MODE_IDLE)
;;;541        {
;;;542            ret = sd_ble_gap_adv_start(&adv_params);
;;;543            if (ret != NRF_SUCCESS)
;;;544            {
;;;545                return ret;
;;;546            }
;;;547        }
;;;548    
;;;549        if (m_evt_handler != NULL)
;;;550        {
;;;551            m_evt_handler(m_adv_evt);
;;;552        }
;;;553    
;;;554        return NRF_SUCCESS;
;;;555    }
00000c  b004              ADD      sp,sp,#0x10
00000e  bd70              POP      {r4-r6,pc}
                  |L9.16|
000010  484b              LDR      r0,|L9.320|
000012  7005              STRB     r5,[r0,#0]            ;461
000014  f7fffffe          BL       flash_access_in_progress
000018  b120              CBZ      r0,|L9.36|
00001a  2001              MOVS     r0,#1                 ;466
00001c  4949              LDR      r1,|L9.324|
00001e  7008              STRB     r0,[r1,#0]            ;466
000020  2000              MOVS     r0,#0                 ;467
000022  e7f3              B        |L9.12|
                  |L9.36|
000024  4848              LDR      r0,|L9.328|
000026  2100              MOVS     r1,#0                 ;470
000028  6001              STR      r1,[r0,#0]            ;470  ; m_peer_address
00002a  8081              STRH     r1,[r0,#4]            ;470
00002c  7181              STRB     r1,[r0,#6]            ;470
00002e  4847              LDR      r0,|L9.332|
000030  7840              LDRB     r0,[r0,#1]            ;472  ; m_adv_modes_config
000032  b118              CBZ      r0,|L9.60|
000034  4842              LDR      r0,|L9.320|
000036  7800              LDRB     r0,[r0,#0]            ;472  ; m_adv_mode_current
000038  2801              CMP      r0,#1                 ;472
00003a  d00d              BEQ      |L9.88|
                  |L9.60|
00003c  4843              LDR      r0,|L9.332|
00003e  7880              LDRB     r0,[r0,#2]            ;473  ; m_adv_modes_config
000040  b118              CBZ      r0,|L9.74|
000042  483f              LDR      r0,|L9.320|
000044  7800              LDRB     r0,[r0,#0]            ;473  ; m_adv_mode_current
000046  2801              CMP      r0,#1                 ;473
000048  d006              BEQ      |L9.88|
                  |L9.74|
00004a  4840              LDR      r0,|L9.332|
00004c  7880              LDRB     r0,[r0,#2]            ;474  ; m_adv_modes_config
00004e  b188              CBZ      r0,|L9.116|
000050  483b              LDR      r0,|L9.320|
000052  7800              LDRB     r0,[r0,#0]            ;474  ; m_adv_mode_current
000054  2802              CMP      r0,#2                 ;474
000056  d10d              BNE      |L9.116|
                  |L9.88|
000058  483d              LDR      r0,|L9.336|
00005a  6800              LDR      r0,[r0,#0]            ;477  ; m_evt_handler
00005c  b138              CBZ      r0,|L9.110|
00005e  2001              MOVS     r0,#1                 ;479
000060  493c              LDR      r1,|L9.340|
000062  7008              STRB     r0,[r1,#0]            ;479
000064  2008              MOVS     r0,#8                 ;480
000066  493a              LDR      r1,|L9.336|
000068  6809              LDR      r1,[r1,#0]            ;480  ; m_evt_handler
00006a  4788              BLX      r1                    ;480
00006c  e002              B        |L9.116|
                  |L9.110|
00006e  2000              MOVS     r0,#0                 ;484
000070  4938              LDR      r1,|L9.340|
000072  7008              STRB     r0,[r1,#0]            ;484
                  |L9.116|
000074  4628              MOV      r0,r5                 ;488
000076  f7fffffe          BL       adv_mode_next_avail_get
00007a  4931              LDR      r1,|L9.320|
00007c  7008              STRB     r0,[r1,#0]            ;488
00007e  4834              LDR      r0,|L9.336|
000080  6800              LDR      r0,[r0,#0]            ;491  ; m_evt_handler
000082  b1c0              CBZ      r0,|L9.182|
000084  4608              MOV      r0,r1                 ;492
000086  7800              LDRB     r0,[r0,#0]            ;492  ; m_adv_mode_current
000088  2803              CMP      r0,#3                 ;492
00008a  d003              BEQ      |L9.148|
00008c  4608              MOV      r0,r1                 ;492
00008e  7800              LDRB     r0,[r0,#0]            ;492  ; m_adv_mode_current
000090  2804              CMP      r0,#4                 ;492
000092  d110              BNE      |L9.182|
                  |L9.148|
000094  482d              LDR      r0,|L9.332|
000096  7800              LDRB     r0,[r0,#0]            ;493  ; m_adv_modes_config
000098  b168              CBZ      r0,|L9.182|
00009a  482f              LDR      r0,|L9.344|
00009c  7800              LDRB     r0,[r0,#0]            ;494  ; m_whitelist_temporarily_disabled
00009e  b950              CBNZ     r0,|L9.182|
0000a0  2000              MOVS     r0,#0                 ;497
0000a2  492e              LDR      r1,|L9.348|
0000a4  7008              STRB     r0,[r1,#0]            ;497
0000a6  2001              MOVS     r0,#1                 ;499
0000a8  492d              LDR      r1,|L9.352|
0000aa  7008              STRB     r0,[r1,#0]            ;499
0000ac  2007              MOVS     r0,#7                 ;500
0000ae  4928              LDR      r1,|L9.336|
0000b0  6809              LDR      r1,[r1,#0]            ;500  ; m_evt_handler
0000b2  4788              BLX      r1                    ;500
0000b4  e002              B        |L9.188|
                  |L9.182|
0000b6  2000              MOVS     r0,#0                 ;504
0000b8  4929              LDR      r1,|L9.352|
0000ba  7008              STRB     r0,[r1,#0]            ;504
                  |L9.188|
0000bc  2000              MOVS     r0,#0                 ;508
0000be  9000              STR      r0,[sp,#0]            ;508
0000c0  9001              STR      r0,[sp,#4]            ;508
0000c2  9002              STR      r0,[sp,#8]            ;508
0000c4  9003              STR      r0,[sp,#0xc]          ;508
0000c6  f88d0000          STRB     r0,[sp,#0]            ;510
0000ca  f88d0008          STRB     r0,[sp,#8]            ;511
0000ce  481c              LDR      r0,|L9.320|
0000d0  7800              LDRB     r0,[r0,#0]            ;514  ; m_adv_mode_current
0000d2  2805              CMP      r0,#5                 ;514
0000d4  d21c              BCS      |L9.272|
0000d6  e8dff000          TBB      [pc,r0]               ;514
0000da  1703              DCB      0x17,0x03
0000dc  080d1200          DCB      0x08,0x0d,0x12,0x00
0000e0  4668              MOV      r0,sp                 ;517
0000e2  f7fffffe          BL       set_adv_mode_directed
0000e6  4604              MOV      r4,r0                 ;517
0000e8  e013              B        |L9.274|
0000ea  4668              MOV      r0,sp                 ;521
0000ec  f7fffffe          BL       set_adv_mode_directed_slow
0000f0  4604              MOV      r4,r0                 ;521
0000f2  e00e              B        |L9.274|
0000f4  4668              MOV      r0,sp                 ;525
0000f6  f7fffffe          BL       set_adv_mode_fast
0000fa  4604              MOV      r4,r0                 ;525
0000fc  e009              B        |L9.274|
0000fe  4668              MOV      r0,sp                 ;529
000100  f7fffffe          BL       set_adv_mode_slow
000104  4604              MOV      r4,r0                 ;529
000106  e004              B        |L9.274|
000108  2000              MOVS     r0,#0                 ;533
00010a  4916              LDR      r1,|L9.356|
00010c  7008              STRB     r0,[r1,#0]            ;533
00010e  e000              B        |L9.274|
                  |L9.272|
000110  bf00              NOP                            ;537
                  |L9.274|
000112  bf00              NOP                            ;518
000114  480a              LDR      r0,|L9.320|
000116  7800              LDRB     r0,[r0,#0]            ;540  ; m_adv_mode_current
000118  b128              CBZ      r0,|L9.294|
00011a  4668              MOV      r0,sp                 ;542
00011c  df73              SVC      #0x73                 ;542
00011e  4604              MOV      r4,r0                 ;542
000120  b10c              CBZ      r4,|L9.294|
000122  4620              MOV      r0,r4                 ;545
000124  e772              B        |L9.12|
                  |L9.294|
000126  480a              LDR      r0,|L9.336|
000128  6800              LDR      r0,[r0,#0]            ;549  ; m_evt_handler
00012a  b120              CBZ      r0,|L9.310|
00012c  480d              LDR      r0,|L9.356|
00012e  7800              LDRB     r0,[r0,#0]            ;551  ; m_adv_evt
000130  4907              LDR      r1,|L9.336|
000132  6809              LDR      r1,[r1,#0]            ;551  ; m_evt_handler
000134  4788              BLX      r1                    ;551
                  |L9.310|
000136  2000              MOVS     r0,#0                 ;554
000138  e768              B        |L9.12|
;;;556    
                          ENDP

00013a  0000              DCW      0x0000
                  |L9.316|
                          DCD      m_initialized
                  |L9.320|
                          DCD      m_adv_mode_current
                  |L9.324|
                          DCD      m_advertising_start_pending
                  |L9.328|
                          DCD      m_peer_address
                  |L9.332|
                          DCD      m_adv_modes_config
                  |L9.336|
                          DCD      m_evt_handler
                  |L9.340|
                          DCD      m_peer_addr_reply_expected
                  |L9.344|
                          DCD      m_whitelist_temporarily_disabled
                  |L9.348|
                          DCD      m_whitelist_in_use
                  |L9.352|
                          DCD      m_whitelist_reply_expected
                  |L9.356|
                          DCD      m_adv_evt

                          AREA ||i.ble_advertising_whitelist_reply||, CODE, READONLY, ALIGN=2

                  ble_advertising_whitelist_reply PROC
;;;623    
;;;624    uint32_t ble_advertising_whitelist_reply(ble_gap_addr_t const * p_gap_addrs,
000000  b530              PUSH     {r4,r5,lr}
;;;625                                             uint32_t               addr_cnt,
;;;626                                             ble_gap_irk_t  const * p_gap_irks,
;;;627                                             uint32_t               irk_cnt)
;;;628    {
000002  4604              MOV      r4,r0
;;;629        if (!m_whitelist_reply_expected)
000004  4808              LDR      r0,|L10.40|
000006  7800              LDRB     r0,[r0,#0]  ; m_whitelist_reply_expected
000008  b908              CBNZ     r0,|L10.14|
;;;630        {
;;;631            return NRF_ERROR_INVALID_STATE;
00000a  2008              MOVS     r0,#8
                  |L10.12|
;;;632        }
;;;633    
;;;634        m_whitelist_reply_expected = false;
;;;635    
;;;636        #if (NRF_SD_BLE_API_VERSION == 2)
;;;637    
;;;638            m_whitelist.addr_count = addr_cnt;
;;;639            m_whitelist.irk_count  = irk_cnt;
;;;640    
;;;641            for (uint32_t i = 0; i < addr_cnt; i++)
;;;642            {
;;;643                *m_whitelist.pp_addrs[i] = p_gap_addrs[i];
;;;644            }
;;;645    
;;;646            for (uint32_t i = 0; i < irk_cnt; i++)
;;;647            {
;;;648                *m_whitelist.pp_irks[i] = p_gap_irks[i];
;;;649            }
;;;650    
;;;651        #else
;;;652    
;;;653            m_whitelist_in_use = ((addr_cnt > 0) || (irk_cnt > 0));
;;;654    
;;;655        #endif
;;;656    
;;;657        return NRF_SUCCESS;
;;;658    }
00000c  bd30              POP      {r4,r5,pc}
                  |L10.14|
00000e  2000              MOVS     r0,#0                 ;634
000010  4d05              LDR      r5,|L10.40|
000012  7028              STRB     r0,[r5,#0]            ;634
000014  b901              CBNZ     r1,|L10.24|
000016  b10b              CBZ      r3,|L10.28|
                  |L10.24|
000018  2001              MOVS     r0,#1                 ;653
00001a  e000              B        |L10.30|
                  |L10.28|
00001c  2000              MOVS     r0,#0                 ;653
                  |L10.30|
00001e  4d03              LDR      r5,|L10.44|
000020  7028              STRB     r0,[r5,#0]            ;653
000022  2000              MOVS     r0,#0                 ;657
000024  e7f2              B        |L10.12|
;;;659    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      m_whitelist_reply_expected
                  |L10.44|
                          DCD      m_whitelist_in_use

                          AREA ||i.flash_access_in_progress||, CODE, READONLY, ALIGN=1

                  flash_access_in_progress PROC
;;;178     */
;;;179    static bool flash_access_in_progress()
000000  b508              PUSH     {r3,lr}
;;;180    {
;;;181        uint32_t count;
;;;182    
;;;183        (void)fs_queued_op_count_get(&count);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       fs_queued_op_count_get
;;;184    
;;;185        return (count != 0);
000008  9800              LDR      r0,[sp,#0]
00000a  b108              CBZ      r0,|L11.16|
00000c  2001              MOVS     r0,#1
                  |L11.14|
;;;186    }
00000e  bd08              POP      {r3,pc}
                  |L11.16|
000010  2000              MOVS     r0,#0                 ;185
000012  e7fc              B        |L11.14|
;;;187    
                          ENDP


                          AREA ||i.on_connected||, CODE, READONLY, ALIGN=2

                  on_connected PROC
;;;120     */
;;;121    static void on_connected(ble_evt_t const * p_ble_evt)
000000  7bc1              LDRB     r1,[r0,#0xf]
;;;122    {
;;;123        if (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_PERIPH)
000002  2901              CMP      r1,#1
000004  d102              BNE      |L12.12|
;;;124        {
;;;125            m_current_slave_link_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000006  8881              LDRH     r1,[r0,#4]
000008  4a01              LDR      r2,|L12.16|
00000a  8011              STRH     r1,[r2,#0]
                  |L12.12|
;;;126        }
;;;127    }
00000c  4770              BX       lr
;;;128    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      m_current_slave_link_conn_handle

                          AREA ||i.on_disconnected||, CODE, READONLY, ALIGN=2

                  on_disconnected PROC
;;;133     */
;;;134    static void on_disconnected(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;135    {
000002  4605              MOV      r5,r0
;;;136        uint32_t ret;
;;;137    
;;;138        m_whitelist_temporarily_disabled = false;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L13.48|
000008  7008              STRB     r0,[r1,#0]
;;;139    
;;;140        if (p_ble_evt->evt.gap_evt.conn_handle == m_current_slave_link_conn_handle)
00000a  88a8              LDRH     r0,[r5,#4]
00000c  4909              LDR      r1,|L13.52|
00000e  8809              LDRH     r1,[r1,#0]  ; m_current_slave_link_conn_handle
000010  4288              CMP      r0,r1
000012  d10b              BNE      |L13.44|
;;;141        {
;;;142           ret = ble_advertising_start(BLE_ADV_MODE_DIRECTED);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       ble_advertising_start
00001a  4604              MOV      r4,r0
;;;143           if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
00001c  b134              CBZ      r4,|L13.44|
00001e  4806              LDR      r0,|L13.56|
000020  6800              LDR      r0,[r0,#0]  ; m_error_handler
000022  b118              CBZ      r0,|L13.44|
;;;144           {
;;;145               m_error_handler(ret);
000024  4620              MOV      r0,r4
000026  4904              LDR      r1,|L13.56|
000028  6809              LDR      r1,[r1,#0]  ; m_error_handler
00002a  4788              BLX      r1
                  |L13.44|
;;;146           }
;;;147        }
;;;148    }
00002c  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      m_whitelist_temporarily_disabled
                  |L13.52|
                          DCD      m_current_slave_link_conn_handle
                  |L13.56|
                          DCD      m_error_handler

                          AREA ||i.on_timeout||, CODE, READONLY, ALIGN=2

                  on_timeout PROC
;;;154     */
;;;155    static void on_timeout(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;156    {
000002  4605              MOV      r5,r0
;;;157        ret_code_t ret;
;;;158    
;;;159        if (p_ble_evt->evt.gap_evt.params.timeout.src != BLE_GAP_TIMEOUT_SRC_ADVERTISING)
000004  7a28              LDRB     r0,[r5,#8]
000006  b100              CBZ      r0,|L14.10|
                  |L14.8|
;;;160        {
;;;161            // Nothing to do.
;;;162            return;
;;;163        }
;;;164    
;;;165        // Start advertising in the next mode.
;;;166        ret = ble_advertising_start(adv_mode_next_get(m_adv_mode_current));
;;;167    
;;;168        if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
;;;169        {
;;;170            m_error_handler(ret);
;;;171        }
;;;172    }
000008  bd70              POP      {r4-r6,pc}
                  |L14.10|
00000a  4809              LDR      r0,|L14.48|
00000c  7800              LDRB     r0,[r0,#0]            ;166  ; m_adv_mode_current
00000e  f7fffffe          BL       adv_mode_next_get
000012  4606              MOV      r6,r0                 ;166
000014  f7fffffe          BL       ble_advertising_start
000018  4604              MOV      r4,r0                 ;166
00001a  b134              CBZ      r4,|L14.42|
00001c  4805              LDR      r0,|L14.52|
00001e  6800              LDR      r0,[r0,#0]            ;168  ; m_error_handler
000020  b118              CBZ      r0,|L14.42|
000022  4620              MOV      r0,r4                 ;170
000024  4903              LDR      r1,|L14.52|
000026  6809              LDR      r1,[r1,#0]            ;170  ; m_error_handler
000028  4788              BLX      r1                    ;170
                  |L14.42|
00002a  bf00              NOP      
00002c  e7ec              B        |L14.8|
;;;173    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      m_adv_mode_current
                  |L14.52|
                          DCD      m_error_handler

                          AREA ||i.set_adv_mode_directed||, CODE, READONLY, ALIGN=2

                  set_adv_mode_directed PROC
;;;242     */
;;;243    static ret_code_t set_adv_mode_directed(ble_gap_adv_params_t * p_adv_params)
000000  4601              MOV      r1,r0
;;;244    {
;;;245        m_adv_evt  = BLE_ADV_EVT_DIRECTED;
000002  2001              MOVS     r0,#1
000004  4a04              LDR      r2,|L15.24|
000006  7010              STRB     r0,[r2,#0]
;;;246    
;;;247        p_adv_params->p_peer_addr = &m_peer_address;
000008  4804              LDR      r0,|L15.28|
00000a  6048              STR      r0,[r1,#4]
;;;248        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;249        p_adv_params->timeout     = 0;
000010  2000              MOVS     r0,#0
000012  8188              STRH     r0,[r1,#0xc]
;;;250        p_adv_params->interval    = 0;
000014  8148              STRH     r0,[r1,#0xa]
;;;251    
;;;252        return NRF_SUCCESS;
;;;253    }
000016  4770              BX       lr
;;;254    
                          ENDP

                  |L15.24|
                          DCD      m_adv_evt
                  |L15.28|
                          DCD      m_peer_address

                          AREA ||i.set_adv_mode_directed_slow||, CODE, READONLY, ALIGN=2

                  set_adv_mode_directed_slow PROC
;;;261     */
;;;262    static ret_code_t set_adv_mode_directed_slow(ble_gap_adv_params_t * p_adv_params)
000000  4601              MOV      r1,r0
;;;263    {
;;;264        m_adv_evt = BLE_ADV_EVT_DIRECTED_SLOW;
000002  2002              MOVS     r0,#2
000004  4a06              LDR      r2,|L16.32|
000006  7010              STRB     r0,[r2,#0]
;;;265    
;;;266        p_adv_params->p_peer_addr = &m_peer_address;
000008  4806              LDR      r0,|L16.36|
00000a  6048              STR      r0,[r1,#4]
;;;267        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;268        p_adv_params->timeout     = m_adv_modes_config.ble_adv_directed_slow_timeout;
000010  4805              LDR      r0,|L16.40|
000012  8980              LDRH     r0,[r0,#0xc]  ; m_adv_modes_config
000014  8188              STRH     r0,[r1,#0xc]
;;;269        p_adv_params->interval    = m_adv_modes_config.ble_adv_directed_slow_interval;
000016  4804              LDR      r0,|L16.40|
000018  8900              LDRH     r0,[r0,#8]  ; m_adv_modes_config
00001a  8148              STRH     r0,[r1,#0xa]
;;;270    
;;;271        return NRF_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;272    }
00001e  4770              BX       lr
;;;273    
                          ENDP

                  |L16.32|
                          DCD      m_adv_evt
                  |L16.36|
                          DCD      m_peer_address
                  |L16.40|
                          DCD      m_adv_modes_config

                          AREA ||i.set_adv_mode_fast||, CODE, READONLY, ALIGN=2

                  set_adv_mode_fast PROC
;;;280     */
;;;281    static ret_code_t set_adv_mode_fast(ble_gap_adv_params_t * p_adv_params)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
000002  4604              MOV      r4,r0
;;;283        ret_code_t ret;
;;;284    
;;;285        p_adv_params->interval = m_adv_modes_config.ble_adv_fast_interval;
000004  4812              LDR      r0,|L17.80|
000006  8a00              LDRH     r0,[r0,#0x10]  ; m_adv_modes_config
000008  8160              STRH     r0,[r4,#0xa]
;;;286        p_adv_params->timeout  = m_adv_modes_config.ble_adv_fast_timeout;
00000a  4811              LDR      r0,|L17.80|
00000c  8a80              LDRH     r0,[r0,#0x14]  ; m_adv_modes_config
00000e  81a0              STRH     r0,[r4,#0xc]
;;;287    
;;;288        if ((m_adv_modes_config.ble_adv_whitelist_enabled) &&
000010  480f              LDR      r0,|L17.80|
000012  7800              LDRB     r0,[r0,#0]  ; m_adv_modes_config
000014  b1b0              CBZ      r0,|L17.68|
;;;289            (!m_whitelist_temporarily_disabled) &&
000016  480f              LDR      r0,|L17.84|
000018  7800              LDRB     r0,[r0,#0]  ; m_whitelist_temporarily_disabled
00001a  b998              CBNZ     r0,|L17.68|
;;;290            (whitelist_has_entries()))
00001c  f7fffffe          BL       whitelist_has_entries
000020  b180              CBZ      r0,|L17.68|
;;;291        {
;;;292            #if (NRF_SD_BLE_API_VERSION == 2)
;;;293                p_adv_params->p_whitelist = &m_whitelist;
;;;294            #endif
;;;295    
;;;296            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
000022  2002              MOVS     r0,#2
000024  7220              STRB     r0,[r4,#8]
;;;297            m_advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000026  2004              MOVS     r0,#4
000028  490b              LDR      r1,|L17.88|
00002a  70c8              STRB     r0,[r1,#3]
;;;298    
;;;299            ret = ble_advdata_set(&m_advdata, NULL);
00002c  2100              MOVS     r1,#0
00002e  480a              LDR      r0,|L17.88|
000030  f7fffffe          BL       ble_advdata_set
000034  4605              MOV      r5,r0
;;;300            if (ret != NRF_SUCCESS)
000036  b10d              CBZ      r5,|L17.60|
;;;301            {
;;;302                return ret;
000038  4628              MOV      r0,r5
                  |L17.58|
;;;303            }
;;;304    
;;;305            m_adv_evt = BLE_ADV_EVT_FAST_WHITELIST;
;;;306        }
;;;307        else
;;;308        {
;;;309            m_adv_evt = BLE_ADV_EVT_FAST;
;;;310        }
;;;311    
;;;312        return NRF_SUCCESS;
;;;313    }
00003a  bd70              POP      {r4-r6,pc}
                  |L17.60|
00003c  2005              MOVS     r0,#5                 ;305
00003e  4907              LDR      r1,|L17.92|
000040  7008              STRB     r0,[r1,#0]            ;305
000042  e002              B        |L17.74|
                  |L17.68|
000044  2003              MOVS     r0,#3                 ;309
000046  4905              LDR      r1,|L17.92|
000048  7008              STRB     r0,[r1,#0]            ;309
                  |L17.74|
00004a  2000              MOVS     r0,#0                 ;312
00004c  e7f5              B        |L17.58|
;;;314    
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      m_adv_modes_config
                  |L17.84|
                          DCD      m_whitelist_temporarily_disabled
                  |L17.88|
                          DCD      m_advdata
                  |L17.92|
                          DCD      m_adv_evt

                          AREA ||i.set_adv_mode_slow||, CODE, READONLY, ALIGN=2

                  set_adv_mode_slow PROC
;;;321     */
;;;322    static ret_code_t set_adv_mode_slow(ble_gap_adv_params_t * p_adv_params)
000000  b570              PUSH     {r4-r6,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324        ret_code_t ret;
;;;325    
;;;326        p_adv_params->interval = m_adv_modes_config.ble_adv_slow_interval;
000004  4812              LDR      r0,|L18.80|
000006  8b00              LDRH     r0,[r0,#0x18]  ; m_adv_modes_config
000008  8160              STRH     r0,[r4,#0xa]
;;;327        p_adv_params->timeout  = m_adv_modes_config.ble_adv_slow_timeout;
00000a  4811              LDR      r0,|L18.80|
00000c  8b80              LDRH     r0,[r0,#0x1c]  ; m_adv_modes_config
00000e  81a0              STRH     r0,[r4,#0xc]
;;;328    
;;;329        if ((m_adv_modes_config.ble_adv_whitelist_enabled) &&
000010  480f              LDR      r0,|L18.80|
000012  7800              LDRB     r0,[r0,#0]  ; m_adv_modes_config
000014  b1b0              CBZ      r0,|L18.68|
;;;330            (!m_whitelist_temporarily_disabled) &&
000016  480f              LDR      r0,|L18.84|
000018  7800              LDRB     r0,[r0,#0]  ; m_whitelist_temporarily_disabled
00001a  b998              CBNZ     r0,|L18.68|
;;;331            (whitelist_has_entries()))
00001c  f7fffffe          BL       whitelist_has_entries
000020  b180              CBZ      r0,|L18.68|
;;;332        {
;;;333            #if (NRF_SD_BLE_API_VERSION == 2)
;;;334            {
;;;335                p_adv_params->p_whitelist = &m_whitelist;
;;;336            }
;;;337            #endif
;;;338    
;;;339            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
000022  2002              MOVS     r0,#2
000024  7220              STRB     r0,[r4,#8]
;;;340            m_advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000026  2004              MOVS     r0,#4
000028  490b              LDR      r1,|L18.88|
00002a  70c8              STRB     r0,[r1,#3]
;;;341    
;;;342            ret = ble_advdata_set(&m_advdata, NULL);
00002c  2100              MOVS     r1,#0
00002e  480a              LDR      r0,|L18.88|
000030  f7fffffe          BL       ble_advdata_set
000034  4605              MOV      r5,r0
;;;343            if (ret != NRF_SUCCESS)
000036  b10d              CBZ      r5,|L18.60|
;;;344            {
;;;345                return ret;
000038  4628              MOV      r0,r5
                  |L18.58|
;;;346            }
;;;347    
;;;348            m_adv_evt = BLE_ADV_EVT_SLOW_WHITELIST;
;;;349        }
;;;350        else
;;;351        {
;;;352            m_adv_evt = BLE_ADV_EVT_SLOW;
;;;353        }
;;;354    
;;;355        return NRF_SUCCESS;
;;;356    }
00003a  bd70              POP      {r4-r6,pc}
                  |L18.60|
00003c  2006              MOVS     r0,#6                 ;348
00003e  4907              LDR      r1,|L18.92|
000040  7008              STRB     r0,[r1,#0]            ;348
000042  e002              B        |L18.74|
                  |L18.68|
000044  2004              MOVS     r0,#4                 ;352
000046  4905              LDR      r1,|L18.92|
000048  7008              STRB     r0,[r1,#0]            ;352
                  |L18.74|
00004a  2000              MOVS     r0,#0                 ;355
00004c  e7f5              B        |L18.58|
;;;357    
                          ENDP

00004e  0000              DCW      0x0000
                  |L18.80|
                          DCD      m_adv_modes_config
                  |L18.84|
                          DCD      m_whitelist_temporarily_disabled
                  |L18.88|
                          DCD      m_advdata
                  |L18.92|
                          DCD      m_adv_evt

                          AREA ||i.whitelist_has_entries||, CODE, READONLY, ALIGN=2

                  whitelist_has_entries PROC
;;;86     
;;;87         static bool whitelist_has_entries()
000000  4801              LDR      r0,|L19.8|
;;;88         {
;;;89             return m_whitelist_in_use;
000002  7800              LDRB     r0,[r0,#0]  ; m_whitelist_in_use
;;;90         }
000004  4770              BX       lr
;;;91     
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      m_whitelist_in_use

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_adv_modes_config
                          %        32
                  m_advdata
                          %        56
                  m_manuf_specific_data
                          %        12
                  m_manuf_data_array
                          %        32
                  m_service_data
                          %        12
                  m_service_data_array
                          %        31

                          AREA ||.data||, DATA, ALIGN=2

                  m_initialized
000000  00                DCB      0x00
                  m_advertising_start_pending
000001  00                DCB      0x00
                  m_adv_evt
000002  00                DCB      0x00
                  m_adv_mode_current
000003  00                DCB      0x00
                  m_peer_address
                          DCD      0x00000000
000008  000000            DCB      0x00,0x00,0x00
                  m_peer_addr_reply_expected
00000b  00                DCB      0x00
                  m_slave_conn_int
                          DCD      0x00000000
                  m_current_slave_link_conn_handle
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  m_evt_handler
                          DCD      0x00000000
                  m_error_handler
                          DCD      0x00000000
                  m_whitelist_temporarily_disabled
00001c  00                DCB      0x00
                  m_whitelist_reply_expected
00001d  00                DCB      0x00
                  m_whitelist_in_use
00001e  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_advertising\\ble_advertising.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_8e1d628c____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_ble_advertising_c_8e1d628c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_8e1d628c____REVSH|
#line 402
|__asm___17_ble_advertising_c_8e1d628c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_8e1d628c____RRX|
#line 587
|__asm___17_ble_advertising_c_8e1d628c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
